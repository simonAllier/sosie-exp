[{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:592","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[1,2],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:176","sourceCode":"final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:322","sourceCode":"for (final java.lang.Class<?> java.lang.Class<?> : java.lang.Class<?>[]) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n        return true;\n    } \n}","type":"CtForEachImpl"},"failures":[3,4,5],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[6,7,8,9],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:74","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"matched"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"failures":[10,11,12],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[13],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2123","sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:84","sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[14,15],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:759","sourceCode":"org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Integer>(int))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:113","sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"failures":[16,17,18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"i","this":"this"}},{"position":"org.easymock.internal.RecordState:99","failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,14,67,68,69,15,6,70,1,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,7,97,98,99,100,101,102,9,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,2,121,122,123,124,125,126,127,128,129,130,131,3,4,132,133,134,135,136,137,138,139,18,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:118","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[179,180,181,182,183,184],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:117","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[185,186,187,188,189,190,191,192],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[193],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[194],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:72","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:99","sourceCode":"continue","type":"CtContinueImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"value"}},{"transplant":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:194","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n    return java.lang.Number.byteValue();\n} else if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:89","sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[195],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"failures":[45,52,196,64,65,66,14,67,68,69,15,6,70,197,1,71,72,73,74,75,76,77,78,79,80,81,198,82,83,84,85,189,190,7,97,8,98,99,199,200,100,101,102,9,201,103,104,2,202,122,123,124,125,126,181,137,203,168,169,204,205,170,206,177,178,207],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:603","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[52,53,54,57,208,209,210,211,137,138,139,160,203,175,5,176],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:734","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:113","sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:121","sourceCode":"java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[6],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:280","sourceCode":"for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n            org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        } \n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[212],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"genericInterfaces":"actualTypeArguments","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[213],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[53,214,215,216,181,138,182,217,218,219,203,220,5,176],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":14,"org.easymock.tests2.UsageTest.argumentsOrdered":216,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":159,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":35,"org.easymock.tests2.StubTest.stubWithReturnValue":114,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":82,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":148,"org.easymock.tests.MockingTest.testPartialClassMocking":134,"org.easymock.samples.SupportTest.voteForRemovals":116,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":180,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":212,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":87,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":208,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":91,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":80,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":177,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":178,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":70,"org.easymock.tests2.UsageTest.wrongArguments":214,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":168,"org.easymock.tests.UsageStrictMockTest.range":138,"org.easymock.samples.ExampleTest.answerVsDelegate":191,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":32,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":106,"org.easymock.tests2.UsageConstraintsTest.testNull":68,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":42,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":22,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":34,"org.easymock.tests2.CaptureTest.testPrimitive":98,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":170,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":218,"org.easymock.tests.UsageTest.moreThanOneArgument":160,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":41,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":183,"org.easymock.tests2.CaptureTest.testCaptureNone":101,"org.easymock.tests.UsageUnorderedTest.message":203,"org.easymock.tests.UsageVerifyTest.twoReturns":176,"org.easymock.tests2.ThreadingTest.testThreadSafe":92,"org.easymock.tests.UsageTest.argumentsOrdered":219,"org.easymock.tests2.CaptureTest.testCapture_2617107":8,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":122,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":205,"org.easymock.tests2.UsageConstraintsTest.any":1,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":126,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":10,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":50,"org.easymock.tests2.SerializationTest.testClass":37,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":105,"org.easymock.tests.LimitationsTest.mockNativeMethod":171,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":128,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":158,"org.easymock.tests2.AnswerTest.answer":185,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":197,"org.easymock.tests2.CaptureTest.testAnd":7,"org.easymock.tests2.UsageTest.strictResetToDefault":56,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":213,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":0,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":29,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":166,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":162,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":136,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":39,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":23,"org.easymock.tests.MockingTest.testNicePartialClassMocking":135,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":44,"org.easymock.tests2.CaptureTest.testCaptureLast":100,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":206,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":6,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":112,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":81,"org.easymock.tests2.CaptureTest.testCapture1_2446744":99,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":18,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":215,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":84,"org.easymock.tests.UsageThrowableTest.throwError":129,"org.easymock.tests.UsageStrictMockTest.differentMethods":139,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":94,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":76,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":186,"org.easymock.tests.UsageVerifyTest.twoThrows":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":88,"org.easymock.samples.PartialClassMockTest.testGetArea":115,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":123,"org.easymock.samples.ExampleTest.voteAgainstRemoval":119,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":193,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":47,"org.easymock.tests2.UsageTest.niceToStrict":58,"org.easymock.tests2.UsageConstraintsTest.testNotNull":83,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":133,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":21,"org.easymock.tests2.UsageTest.defaultResetToNice":61,"org.easymock.samples.ExampleTest.voteAgainstRemovals":117,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":154,"org.easymock.tests2.CallbackTest.callback":188,"org.easymock.tests.UsageTest.openCallCountByLastCall":161,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":179,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":30,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":64,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":204,"org.easymock.tests.UsageOverloadedMethodTest.overloading":173,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":74,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":109,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":150,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":172,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":73,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":11,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":102,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":195,"org.easymock.tests.UsageThrowableTest.throwCheckedException":3,"org.easymock.tests2.EasyMockSupportClassTest.testAll":86,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":184,"org.easymock.tests2.CaptureTest.testCaptureAll":97,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":202,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":111,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":108,"org.easymock.tests2.UsageConstraintsTest.testMatches":75,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":110,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":187,"org.easymock.samples.ExampleTest.voteForRemovals":120,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":96,"org.easymock.tests.UsageVarargTest.allKinds":207,"org.easymock.tests2.DependencyTest.testInterfaceMocking":90,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":175,"org.easymock.tests2.DelegateToTest.testStubDelegate":51,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":132,"org.easymock.tests2.AnswerTest.stubAnswer":19,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":137,"org.easymock.tests2.UsageConstraintsTest.greaterThan":77,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":165,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":48,"org.easymock.samples.ExampleTest.voteForRemoval":118,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":93,"org.easymock.tests.UsageExpectAndReturnTest.floatType":141,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":157,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":13,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":49,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":78,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":65,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":55,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":199,"org.easymock.tests2.SerializationTest.test":38,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":12,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":16,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":27,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":130,"org.easymock.tests2.UsageConstraintsTest.testSame":69,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":140,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":194,"org.easymock.tests2.CaptureTest.testCaptureFirst":104,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":28,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":63,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":146,"org.easymock.tests.GenericTest.testPackageScope":127,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":95,"org.easymock.tests2.UsageTest.moreThanOneArgument":57,"org.easymock.tests2.CaptureTest.testCapture2_2446744":103,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":24,"org.easymock.tests.UsageExpectAndReturnTest.longType":142,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":25,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":151,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":198,"org.easymock.tests2.UsageStrictMockTest.differentMethods":54,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":143,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":167,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":147,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":52,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":4,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":169,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":107,"org.easymock.tests2.UsageConstraintsTest.testContains":72,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":113,"org.easymock.tests2.UsageConstraintsTest.testFind":67,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":174,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":189,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":43,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":190,"org.easymock.tests.UsageExpectAndReturnTest.object":149,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":209,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":79,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":45,"org.easymock.tests.ErrorMessageTest.testGetters":210,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":20,"org.easymock.tests2.UsageStrictMockTest.range":53,"org.easymock.tests2.UsageConstraintsTest.lessThan":85,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":33,"org.easymock.tests.UsageTest.exactCallCountByLastCall":163,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":2,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":26,"org.easymock.tests2.CaptureTest.testCaptureRightOne":9,"org.easymock.tests2.UsageConstraintsTest.testOr":15,"org.easymock.tests.UsageRangeTest.combination":164,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":40,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":155,"org.easymock.tests.UsageTest.wrongArguments":217,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":144,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":152,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":192,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":17,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":196,"org.easymock.tests2.UsageConstraintsTest.cmpTo":71,"org.easymock.tests2.UsageTest.openCallCountByLastCall":59,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":60,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":36,"org.easymock.tests2.CaptureTest.testCaptureFromStub":201,"org.easymock.tests.UsageTest.unexpectedCallWithArray":182,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":220,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":131,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":181,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":153,"org.easymock.tests2.UsageConstraintsTest.constraints":66,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":46,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":156,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":89,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":200,"org.easymock.tests2.UsageTest.resumeIfFailure":62,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":124,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":145,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":121,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":125,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":211,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":31}}]

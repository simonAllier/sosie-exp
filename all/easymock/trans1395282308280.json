[{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:167","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"position":"org.easymock.internal.RecordState:190","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123],"status":-1,"binaryOperator":"(java.lang.Object instanceof java.lang.Number)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:279","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[124,125],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:390","sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:95","sourceCode":"int = java.lang.Integer.int","type":"CtAssignmentImpl"},"failures":[8,9,29,126,54,55,57,59,60,65,68,71,77,83,84,127,94,95,96,97,128],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"java.lang.Integer.MAX_VALUE":"max"}},{"position":"org.easymock.EasyMock:1013","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:127","sourceCode":"java.lang.Object[][int] = java.lang.Object","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:98","sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","type":"CtReturnImpl"},"failures":[10,129,17,55,56,58,60,61,130,72,76],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[45,46,131,132],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"failures":[133],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:933","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[134],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[135,78],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1470","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","type":"CtInvocationImpl"},"failures":[56,61,72],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,0,153,154,1,155,156,2,157,3,4,5,158,159,6,160,161,162,7,163,8,9,164,10,11,129,12,13,165,166,14,15,16,17,18,19,20,21,167,168,169,170,22,23,24,171,25,172,26,27,28,173,174,29,30,31,32,33,34,35,36,37,38,39,40,41,42,175,176,177,43,178,179,180,181,182,183,184,185,186,187,188,189,190,191,44,192,193,194,45,46,131,47,195,196,197,198,199,126,48,200,201,202,203,49,50,51,204,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,205,75,76,77,78,79,80,206,207,208,209,210,211,212,213,214,215,216,217,82,218,83,84,219,85,86,220,221,87,222,223,127,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,88,89,255,256,90,91,257,258,92,259,260,261,262,94,96,97,263,98,99,264,265,266,267,268,269,270,271,272,273,274,275,100,276,101,102,128,103,104,105,106,107,108,277,278,109,279,110,280,281,282,111,283,284,285,286,287,287,288,289,290,291,292,293,294,115,295,296,297,298,299,300,116,117,118,301,302,119,120,121,122,123,303,304,305,306,307],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[61,62],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"result"}},{"position":"org.easymock.EasyMock:643","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:180","sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[69],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"o":"actual"}},{"transplant":{"position":"org.easymock.internal.RecordState:162","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[193,194],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:71","sourceCode":"java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field)","type":"CtInvocationImpl"},"failures":[139,151,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1013","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[45,46,131],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"toStringMethod","equalsMethod":"toStringMethod"}},{"transplant":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[138,142,144,145,147,150,152,0,153,154,1,155,2,4,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,39,40,41,42,43,179,180,184,185,186,187,188,189,190,191,44,193,45,46,47,195,196,197,198,48,201,49,50,51,204,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,212,213,214,82,83,84,85,86,87,222,223,88,89,90,91,92,94,96,97,324,325,326,327,328,263,98,99,100,101,102,103,104,105,106,107,108,280,281,282,111,283,285,329,112,294,330,113,114,115,296,297,298,299,300,116,117,118,301,302,119,120,121,122,123,303,304,305,306,307],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","answer":"value"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[86,274],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MocksControl:190","failures":[0,4,17,172,174,34,41,42,56,61,62,63,66,72,73,74,75,258,98,275,276,102,128,104,105,106,107,108],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (this.java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[331,10,11,129,12,13,165,166,14,15,16,332,17,18,19,20,287],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[333,334,335],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[336,337,338,339,340,341],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[342,343,344],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[193],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[345,346],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int) == int","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"failures":[126,221],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:920","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[45,46,131],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:355","sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[134],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[347,348,217,255,349,350],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:109","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[22,27,88,91,276,103],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":56,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":88,"org.easymock.tests2.UsageTest.argumentsOrdered":174,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":41,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":320,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":291,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":172,"org.easymock.tests2.StubTest.stubWithReturnValue":48,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":336,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":302,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":75,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":139,"org.easymock.tests2.SerializationTest.testAllMockedMethod":131,"org.easymock.tests2.DelegateToTest.testReturnException":200,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":289,"org.easymock.tests.MockingTest.testPartialClassMocking":212,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":348,"org.easymock.samples.SupportTest.voteForRemovals":150,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":134,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":112,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":247,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":132,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":235,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":196,"org.easymock.tests.UsageExpectAndThrowTest.object":245,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":80,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":73,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":337,"org.easymock.tests2.DelegateToTest.testWrongClass":202,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":222,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":223,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":62,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":85,"org.easymock.tests2.UsageTest.wrongArguments":171,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":315,"org.easymock.tests.UsageStrictMockTest.range":83,"org.easymock.samples.ConstructorCalledMockTest.testTax":136,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":261,"org.easymock.samples.ExampleTest.answerVsDelegate":143,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":38,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":185,"org.easymock.tests2.UsageConstraintsTest.testNull":58,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":246,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":154,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":40,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":179,"org.easymock.tests2.CaptureTest.testPrimitive":12,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":87,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":257,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":254,"org.easymock.tests.UsageTest.moreThanOneArgument":89,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":260,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":153,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":349,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":109,"org.easymock.tests2.CaptureTest.testCaptureNone":15,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":114,"org.easymock.tests.UsageUnorderedTest.message":275,"org.easymock.tests.UsageVerifyTest.twoReturns":101,"org.easymock.tests.UsageVarargTest.varargByteAccepted":272,"org.easymock.tests2.ThreadingTest.testThreadSafe":49,"org.easymock.tests.UsageTest.argumentsOrdered":258,"org.easymock.tests.UsageVarargTest.varargIntAccepted":266,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":226,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":140,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":280,"org.easymock.tests2.CaptureTest.testCapture_2617107":129,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":176,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":326,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":221,"org.easymock.tests2.UsageConstraintsTest.any":63,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":178,"org.easymock.tests2.StubTest.stub":126,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":283,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":327,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":290,"org.easymock.tests.UsageExpectAndThrowTest.longType":238,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":343,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":163,"org.easymock.tests2.SerializationTest.testClass":45,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":47,"org.easymock.tests.LimitationsTest.mockNativeMethod":294,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":21,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":329,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":307,"org.easymock.tests2.AnswerTest.answer":44,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":130,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":170,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":310,"org.easymock.tests2.CaptureTest.testAnd":10,"org.easymock.tests2.UsageTest.strictResetToDefault":23,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":157,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":164,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":311,"org.easymock.tests2.MockedExceptionTest.testMockedException":159,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":278,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":35,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":96,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":91,"org.easymock.tests2.DelegateToTest.testDelegate":203,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":239,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":214,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":152,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":180,"org.easymock.tests.MockingTest.testNicePartialClassMocking":213,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":250,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":155,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":308,"org.easymock.tests2.CaptureTest.testCaptureLast":14,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":292,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":61,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":191,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":234,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":74,"org.easymock.tests2.CaptureTest.testCapture1_2446744":13,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":296,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":248,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":243,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":168,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":173,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":77,"org.easymock.tests.UsageThrowableTest.throwError":102,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":313,"org.easymock.tests.UsageStrictMockTest.differentMethods":84,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":318,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":51,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":323,"org.easymock.tests2.MockBuilderTest.testCreateMockString":183,"org.easymock.tests.UsageExpectAndThrowTest.floatType":237,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":110,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":69,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":192,"org.easymock.tests.UsageVerifyTest.twoThrows":276,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":197,"org.easymock.samples.PartialClassMockTest.testGetArea":138,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":281,"org.easymock.samples.ExampleTest.voteAgainstRemoval":145,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":330,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":325,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":113,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":4,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":236,"org.easymock.tests2.UsageTest.niceToStrict":25,"org.easymock.tests2.UsageConstraintsTest.testNotNull":76,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":108,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":158,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":335,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":43,"org.easymock.tests2.UsageTest.defaultResetToNice":28,"org.easymock.tests2.MockBuilderTest.testCreateMock":181,"org.easymock.samples.ExampleTest.voteAgainstRemovals":142,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":303,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":309,"org.easymock.tests.UsageVarargTest.differentLength":269,"org.easymock.tests2.CallbackTest.callback":199,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":314,"org.easymock.tests.UsageTest.openCallCountByLastCall":90,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":347,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":244,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":36,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":53,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":259,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":220,"org.easymock.tests.UsageCallCountTest.tooFewCalls":224,"org.easymock.tests.UsageOverloadedMethodTest.overloading":98,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":210,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":67,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":263,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":120,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":188,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":345,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":66,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":16,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":262,"org.easymock.tests.UsageThrowableTest.throwCheckedException":105,"org.easymock.tests2.EasyMockSupportClassTest.testAll":195,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":286,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":350,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":252,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":232,"org.easymock.tests2.CaptureTest.testCaptureAll":11,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":169,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":295,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":190,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":312,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":187,"org.easymock.tests2.UsageConstraintsTest.testMatches":68,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":189,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":194,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":279,"org.easymock.samples.ExampleTest.voteForRemovals":147,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":52,"org.easymock.tests.UsageVarargTest.allKinds":274,"org.easymock.tests2.DependencyTest.testInterfaceMocking":79,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":100,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":339,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":233,"org.easymock.samples.BasicClassMockTest.testPrintContent":141,"org.easymock.samples.ExampleTest.addDocument":146,"org.easymock.tests2.DelegateToTest.testStubDelegate":201,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":107,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":161,"org.easymock.tests2.AnswerTest.stubAnswer":193,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":321,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":293,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":82,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":340,"org.easymock.tests2.UsageConstraintsTest.greaterThan":70,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":95,"org.easymock.tests.UsageVarargTest.varargLongAccepted":271,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":5,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":219,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":324,"org.easymock.samples.ExampleTest.voteForRemoval":144,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":50,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":306,"org.easymock.tests.UsageExpectAndReturnTest.floatType":298,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":156,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":184,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":137,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":71,"org.easymock.tests.UsageThrowableTest.noUpperLimit":128,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":284,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":54,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":22,"org.easymock.tests2.SerializationTest.test":46,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":165,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":346,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":33,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":103,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":297,"org.easymock.tests2.UsageConstraintsTest.testSame":59,"org.easymock.samples.SupportTest.addDocument":149,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":288,"org.easymock.tests2.CaptureTest.testCaptureFirst":20,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":34,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":30,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":211,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":118,"org.easymock.tests.GenericTest.testPackageScope":285,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":204,"org.easymock.tests2.CaptureTest.testCapture2_2446744":19,"org.easymock.tests2.UsageTest.moreThanOneArgument":24,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":182,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":322,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":273,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":228,"org.easymock.tests.UsageExpectAndReturnTest.longType":299,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":230,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":31,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":253,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":121,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":205,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":93,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":251,"org.easymock.tests2.UsageStrictMockTest.differentMethods":9,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":277,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":300,"org.easymock.tests.UsageCallCountTest.tooManyCalls":229,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":344,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":249,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":97,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":127,"org.easymock.tests2.MockedExceptionTest.testRealException":160,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":301,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":240,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":7,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":125,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":86,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":106,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":186,"org.easymock.tests2.UsageConstraintsTest.testContains":65,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":6,"org.easymock.tests2.UsageConstraintsTest.testFind":57,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":99,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":334,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":206,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":1,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":215,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":207,"org.easymock.tests.UsageExpectAndReturnTest.object":119,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":72,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":2,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":177,"org.easymock.tests2.UsageStrictMockTest.range":8,"org.easymock.tests2.UsageConstraintsTest.lessThan":78,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":39,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":338,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":268,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":319,"org.easymock.tests.UsageTest.exactCallCountByLastCall":92,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":115,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":32,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":133,"org.easymock.tests2.CaptureTest.testCaptureRightOne":17,"org.easymock.tests2.UsageConstraintsTest.testOr":60,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":341,"org.easymock.tests.UsageRangeTest.combination":94,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":304,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":264,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":0,"org.easymock.tests.UsageTest.wrongArguments":256,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":209,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":317,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":116,"org.easymock.tests2.EasyMockSupportTest.testVerify":175,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":122,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":342,"org.easymock.tests.UsageVarargTest.varargShortAccepted":270,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":208,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":227,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":167,"org.easymock.tests2.UsageConstraintsTest.cmpTo":64,"org.easymock.tests.UsageVarargTest.varargCharAccepted":267,"org.easymock.tests2.CaptureTest.testCaptureMultiple":331,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":124,"org.easymock.tests2.CompareToTest.testLessThan":135,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":162,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":328,"org.easymock.tests2.UsageTest.openCallCountByLastCall":26,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":27,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":333,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":42,"org.easymock.tests2.CaptureTest.testCaptureFromStub":18,"org.easymock.tests.UsageTest.unexpectedCallWithArray":255,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":242,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":217,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":104,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":225,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":316,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":123,"org.easymock.tests2.CaptureTest.testCapture":332,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":218,"org.easymock.tests2.UsageConstraintsTest.constraints":55,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":3,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":241,"org.easymock.samples.ExampleTest.addAndChangeDocument":148,"org.easymock.tests.CapturesMatcherTest.test":287,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":305,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":151,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":198,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":231,"org.easymock.tests2.UsageTest.resumeIfFailure":29,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":166,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":282,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":117,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":81,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":111,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":265,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":37}}]

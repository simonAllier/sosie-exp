[{"transplant":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:111","sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>[].int) ; int++) {\n    if (java.lang.Class<?>[][int].isPrimitive()) {\n        java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n    } else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n        java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n    } else {\n        final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n        org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n        java.lang.Object[][int] = java.lang.Object;\n    }\n}","type":"CtForImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[1],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[2,3],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:250","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[4],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:320","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[5,6],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[7,8,9,10,11,12],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Same:41","sourceCode":"java.lang.StringBuffer.append(\"same(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[13,14,15],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1038","sourceCode":"org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Integer>(int))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:117","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"failures":[16],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"i","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[17,18,19,20],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:41","sourceCode":"new java.util.Properties()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:100","sourceCode":"return this","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[21,22,23,24,25],"status":-1,"binaryOperator":"int >= 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[26,27,28,29,16,9,30,31,32,33,12,34,35,36],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:71","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:114","sourceCode":"return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs)","type":"CtReturnImpl"},"failures":[37,38,39,40,41,42,43,17,44,45,18,19,46,47,48,49,26,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,27,122,123,124,125,126,28,29,127,128,5,129,130,131,132,133,134,135,136,22,137,138,139,140,141,142,143,23,144,145,146,147,148,24,149,150,151,152,153,154,155,156,157,158,159,25,160,161,162,163,164,165,0,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,248,249,249,250,251,252,253,254,255,256,257,258,259,260,261,2,262,263,264,3,265,266,16,267,268,269,270,271,272,273,274,275,4,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,9,304,305,30,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,20,327,328,329,6,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,1,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,32,33,447,448,449,450,451,452,12,34,453,454,35,36,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1543","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:45","sourceCode":"synchronized(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) {\n    if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n        org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n    } \n}","type":"CtSynchronizedImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:44","sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    synchronized(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) {\n        if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n            org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:71","failures":[89,170,175,176,179,180,182,183,186,187,188,190,192,193,195,218,228,234,253,292,463,466],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"finalizeMethod","method":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"failures":[321,322,323,324,325,326,20,327,328,329,6,330,331,332,333,334,336,337,338,339,340,342],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksControl:116","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:117","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[89,90,91,485],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Injector:75","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[41,42,43,17,44,45,18,19,48,26,50,57,64,65,66,67,68,69,70,71,72,73,74,75,77,78,79,80,81,82,85,86,88,89,90,92,93,94,95,96,97,98,99,100,105,106,108,109,112,113,114,115,116,117,118,119,120,121,122,124,125,126,127,128,5,129,130,131,132,133,135,136,22,137,139,140,141,142,143,23,145,146,147,148,24,149,150,151,152,153,154,155,157,158,159,25,165,0,166,167,168,169,171,175,176,177,182,186,188,190,193,201,208,209,210,211,215,218,228,234,240,241,242,243,245,247,248,248,249,249,251,253,16,278,279,280,281,282,283,284,285,286,287,288,290,292,304,30,306,309,310,311,314,335,341,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,375,381,382,1,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,418,425,426,427,428,429,442,443,444,445,446,32,33,447,448,449,450,451,452,453,454,455,461,469,470,471,473,474,476,478,479,480,481,482,483,484],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[37,38,39,40,486,487,41,42,43,17,44,45,18,19,46,47,48,49,26,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,488,98,99,100,489,101,490,491,492,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,27,122,123,124,125,126,28,29,127,128,5,129,130,131,132,133,134,135,136,22,137,138,139,140,141,142,143,23,144,145,146,147,148,24,149,150,151,152,153,154,155,156,157,158,159,25,160,161,162,163,164,165,0,166,167,168,169,170,493,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,494,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,2,262,263,264,3,265,266,16,267,268,269,270,271,272,273,274,275,4,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,9,304,305,30,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,20,327,328,329,6,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,495,377,378,379,380,381,382,383,1,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,32,33,447,448,449,450,451,452,12,34,453,454,35,36,455,456,457,458,459,460,461,462,463,496,497,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:50","failures":[82,83,89,498,499,96,100,489,181,184,189,191,500,194,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,248,249],"status":-1,"binaryOperator":"(java.lang.Object[].int) != (java.lang.Class<?>[].int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:304","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[276,286,287,288,327],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:84","sourceCode":"java.lang.Object[] = new java.lang.Object[0]","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[26,27,28,29,16,9,30,31,32,33,12,34,35,36,477],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arguments":"arguments"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:45","sourceCode":"java.lang.StringBuffer.append(\"[\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:61","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(org.easymock.internal.matchers.Equals.getExpected(), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[7,9],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append(((org.easymock.internal.ErrorMessage.getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[48,26,50,121,27,28,29,161,162,163,164,9,304,30,306,501,446,32,33,452,34,35,36],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer","matches":"matches","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[289,293],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:852","sourceCode":"org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Integer>(int))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:117","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"failures":[16],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"i","this":"this"}},{"position":"org.easymock.internal.matchers.CompareTo:49","failures":[502,503,504,21,505],"status":-1,"binaryOperator":"((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[137],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[17,18,19,20],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":137,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":451,"org.easymock.tests2.UsageTest.argumentsOrdered":29,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":74,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":202,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":6,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":123,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":252,"org.easymock.tests2.DelegateToTest.testReturnException":129,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":480,"org.easymock.tests.MockingTest.testPartialClassMocking":381,"org.easymock.tests.MockClassControlTest.testToString":296,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":160,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":418,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":179,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":338,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":222,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":218,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":353,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":501,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":42,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":23,"org.easymock.tests2.UsageTest.wrongArguments":27,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":343,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":63,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":458,"org.easymock.samples.ExampleTest.answerVsDelegate":241,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":466,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":385,"org.easymock.tests2.UsageConstraintsTest.testNull":140,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":167,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":73,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":301,"org.easymock.tests2.CaptureTest.testPrimitive":108,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":347,"org.easymock.tests.UsageTest.moreThanOneArgument":452,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":372,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":166,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":283,"org.easymock.tests.UsageTest.argumentsOrdered":36,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":348,"org.easymock.tests.UsageVarargTest.varargIntAccepted":432,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":334,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":425,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":180,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":491,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":206,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":187,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":323,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":429,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":14,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":57,"org.easymock.tests.ReplayStateInvalidUsageTest.times":275,"org.easymock.tests2.DependencyTest.testClassMocking":486,"org.easymock.tests2.AnswerTest.answer":43,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":144,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":336,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":40,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":497,"org.easymock.tests2.CaptureTest.testAnd":105,"org.easymock.tests2.UsageTest.strictResetToDefault":120,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":184,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":174,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":282,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":444,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":68,"org.easymock.tests2.DelegateToTest.testDelegate":133,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":352,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":368,"org.easymock.tests.LimitationsTest.mockFinalMethod":376,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":483,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":424,"org.easymock.tests2.DependencyTest.testClassMockingSupport":487,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":460,"org.easymock.tests2.CaptureTest.testCapture1_2446744":109,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":493,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":366,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":38,"org.easymock.tests.UsageThrowableTest.throwError":387,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":269,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":465,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":495,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":207,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":285,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":498,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":236,"org.easymock.samples.PartialClassMockTest.testGetArea":253,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":270,"org.easymock.tests.MockingTest.testInterfaceMocking":383,"org.easymock.tests2.CompareToTest.testLessOrEqual":505,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":426,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":310,"org.easymock.tests2.UsageTest.niceToStrict":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":223,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":259,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":354,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":321,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":186,"org.easymock.tests2.MockBuilderTest.testCreateMock":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":231,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":60,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":7,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":362,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":69,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":496,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":280,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":312,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":456,"org.easymock.tests.UsageOverloadedMethodTest.overloading":449,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":233,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":474,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":24,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":448,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":406,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":148,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":114,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":433,"org.easymock.tests2.EasyMockSupportClassTest.testAll":215,"org.easymock.tests.MockClassControlTest.testEquals":300,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":291,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":370,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":422,"org.easymock.tests2.CaptureTest.testCaptureAll":106,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":39,"org.easymock.tests.MockNameTest.defaultName":377,"org.easymock.tests2.UsageConstraintsTest.testMatches":149,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":267,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":284,"org.easymock.samples.ExampleTest.voteForRemovals":245,"org.easymock.tests.UsageVarargTest.allKinds":441,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":446,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":423,"org.easymock.samples.BasicClassMockTest.testPrintContent":239,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":393,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":46,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":484,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":132,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":203,"org.easymock.tests2.UsageConstraintsTest.greaterThan":151,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":216,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":443,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":177,"org.easymock.samples.ExampleTest.voteForRemoval":242,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":266,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":178,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":78,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":467,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":492,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":170,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":478,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":119,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":191,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":327,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":66,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":389,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":213,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":479,"org.easymock.tests2.CaptureTest.testCaptureFirst":118,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":5,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":20,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":67,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":128,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":477,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":402,"org.easymock.tests2.UsageTest.moreThanOneArgument":121,"org.easymock.tests2.CaptureTest.testCapture2_2446744":117,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":80,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":193,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":337,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":440,"org.easymock.tests.GenericTest.testBridgedEquals":293,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":319,"org.easymock.tests.UsageExpectAndReturnTest.longType":398,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":420,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":64,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":371,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":447,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":156,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":369,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":281,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":287,"org.easymock.tests.UsageCallCountTest.tooManyCalls":320,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":15,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":314,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":232,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":403,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":62,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":358,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":392,"org.easymock.tests.MockingTest.testNiceClassMocking":386,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":95,"org.easymock.tests.MockingTest.testClassMocking":379,"org.easymock.tests2.UsageConstraintsTest.testContains":147,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":313,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":210,"org.easymock.tests2.UsageConstraintsTest.testFind":139,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":450,"org.easymock.tests.MockTypeTest.fromEasyMockClass":464,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":88,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":302,"org.easymock.tests.UsageExpectAndReturnTest.object":405,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":171,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":61,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":72,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":435,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":257,"org.easymock.tests.UsageTest.exactCallCountByLastCall":455,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":415,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":326,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":417,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":349,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":83,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":430,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":411,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":473,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":197,"org.easymock.tests.MockClassControlTest.testHashCode":299,"org.easymock.tests2.EasyMockSupportTest.testVerify":76,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":225,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":13,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":350,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":471,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":279,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":37,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":134,"org.easymock.tests.UsageVarargTest.varargCharAccepted":434,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":260,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":47,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":342,"org.easymock.tests2.UsageTest.openCallCountByLastCall":124,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":75,"org.easymock.tests.DefaultClassInstantiatorTest.object":261,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":278,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":255,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":226,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":360,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":390,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":55,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":196,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":175,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":298,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":359,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":412,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":234,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":297,"org.easymock.tests2.UsageTest.resumeIfFailure":127,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":463,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":490,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":482,"org.easymock.tests2.StubTest.stubWithReturnValue":93,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":189,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":404,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":157,"org.easymock.tests2.SerializationTest.testAllMockedMethod":91,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":335,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":8,"org.easymock.samples.SupportTest.voteForRemovals":251,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":289,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":199,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":365,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":485,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":341,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":17,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":419,"org.easymock.tests.UsageExpectAndThrowTest.object":363,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":154,"org.easymock.tests2.DelegateToTest.testWrongClass":131,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":469,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":470,"org.easymock.tests.UsageStrictMockTest.range":30,"org.easymock.samples.ConstructorCalledMockTest.testTax":248,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":103,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":71,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":94,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":364,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":188,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":35,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":212,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":276,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":457,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":10,"org.easymock.tests2.CaptureTest.testCaptureNone":113,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":311,"org.easymock.tests.UsageUnorderedTest.message":16,"org.easymock.tests.UsageVerifyTest.twoReturns":33,"org.easymock.tests.UsageVarargTest.varargByteAccepted":439,"org.easymock.tests2.ThreadingTest.testThreadSafe":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":229,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":317,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":238,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":258,"org.easymock.tests2.CaptureTest.testCapture_2617107":107,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":462,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":339,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":346,"org.easymock.tests2.UsageConstraintsTest.any":145,"org.easymock.tests2.StubTest.stub":92,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":274,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":288,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":481,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":340,"org.easymock.tests.UsageExpectAndThrowTest.longType":356,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":264,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":273,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":49,"org.easymock.tests2.SerializationTest.testClass":89,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":201,"org.easymock.tests.LimitationsTest.mockNativeMethod":375,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":414,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":292,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":54,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":51,"org.easymock.tests2.NameTest.nameForMocksControl":164,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":56,"org.easymock.tests2.MockedExceptionTest.testMockedException":209,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":217,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":454,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":1,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":87,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":357,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":165,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":190,"org.easymock.tests.MockingTest.testNicePartialClassMocking":382,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":169,"org.easymock.tests2.CompareToTest.testCompareEqual":504,"org.easymock.tests2.CaptureTest.testCaptureLast":112,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":52,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":461,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":143,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":100,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":155,"org.easymock.tests.MockingTest.testTwoMocks":380,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":489,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":395,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":361,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":28,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":159,"org.easymock.samples.ExampleTest.removeNonExistingDocument":246,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":59,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":271,"org.easymock.tests.UsageStrictMockTest.differentMethods":306,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":198,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":262,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":79,"org.easymock.tests2.MockBuilderTest.testCreateMockString":195,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":294,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":219,"org.easymock.tests.UsageExpectAndThrowTest.floatType":355,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":150,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":214,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":45,"org.easymock.tests.UsageVerifyTest.twoThrows":32,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":84,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":472,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":228,"org.easymock.samples.ExampleTest.voteAgainstRemoval":243,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":309,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":330,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":176,"org.easymock.tests.LimitationsTest.privateConstructor":374,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":499,"org.easymock.tests2.UsageConstraintsTest.testNotNull":158,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":394,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":208,"org.easymock.tests2.UsageTest.defaultResetToNice":126,"org.easymock.samples.ExampleTest.voteAgainstRemovals":240,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":410,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":331,"org.easymock.tests.UsageVarargTest.differentLength":436,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":53,"org.easymock.tests2.CallbackTest.callback":85,"org.easymock.tests2.UsageConstraintsTest.equals":138,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":172,"org.easymock.tests.UsageTest.openCallCountByLastCall":453,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":135,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":345,"org.easymock.tests.UsageCallCountTest.tooFewCalls":315,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":97,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":459,"org.easymock.tests.UsageThrowableTest.throwCheckedException":391,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":11,"org.easymock.tests.MockingTest.testStrictClassMocking":378,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":416,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":99,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":96,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":58,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":4,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":98,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":19,"org.easymock.tests2.CompareToTest.testGreateOrEqual":21,"org.easymock.tests.ObjectMethodsTest.testHashCode":256,"org.easymock.tests2.NameTest.nameForNiceMock":163,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":81,"org.easymock.tests2.DependencyTest.testInterfaceMocking":41,"org.easymock.samples.ExampleTest.addDocument":244,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":230,"org.easymock.tests2.DelegateToTest.testStubDelegate":130,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":235,"org.easymock.tests2.AnswerTest.stubAnswer":18,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":304,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":494,"org.easymock.tests.UsageVarargTest.varargLongAccepted":438,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":307,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":329,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":413,"org.easymock.tests.UsageExpectAndReturnTest.floatType":397,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":82,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":249,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":475,"org.easymock.tests.UsageThrowableTest.noUpperLimit":388,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":152,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":205,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":136,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":101,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":110,"org.easymock.tests2.SerializationTest.test":90,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":2,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":396,"org.easymock.tests2.UsageConstraintsTest.testSame":141,"org.easymock.samples.SupportTest.addDocument":250,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":488,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":272,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":220,"org.easymock.tests.GenericTest.testPackageScope":290,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":351,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":325,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":204,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":384,"org.easymock.tests2.NameTest.nameForMock":161,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":407,"org.easymock.tests2.UsageStrictMockTest.differentMethods":50,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":194,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":173,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":399,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":367,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":254,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":445,"org.easymock.tests2.MockedExceptionTest.testRealException":211,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":468,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":104,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":333,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":332,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":277,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":344,"org.easymock.tests2.NameTest.nameForStrictMock":162,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":185,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":86,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":168,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":102,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":153,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":263,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":182,"org.easymock.tests2.UsageStrictMockTest.range":26,"org.easymock.tests2.UsageConstraintsTest.lessThan":25,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":200,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":328,"org.easymock.tests2.CaptureTest.testCaptureRightOne":115,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":224,"org.easymock.tests2.UsageConstraintsTest.testOr":142,"org.easymock.tests.UsageRangeTest.combination":442,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":0,"org.easymock.tests.UsageTest.wrongArguments":34,"org.easymock.tests2.MockBuilderTest.testWithConstructor":181,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":221,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":295,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":400,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":408,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":322,"org.easymock.tests.UsageVarargTest.varargShortAccepted":437,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":3,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":318,"org.easymock.tests2.UsageConstraintsTest.cmpTo":146,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":44,"org.easymock.tests2.CompareToTest.testLessThan":502,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":324,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":125,"org.easymock.tests2.CaptureTest.testCaptureFromStub":116,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":268,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":183,"org.easymock.tests.UsageTest.unexpectedCallWithArray":12,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":9,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":316,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":500,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":409,"org.easymock.tests2.UsageConstraintsTest.constraints":22,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":305,"org.easymock.samples.ExampleTest.addAndChangeDocument":247,"org.easymock.tests.UsageStrictMockTest.testVerify":308,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":237,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":303,"org.easymock.tests2.CompareToTest.testGreateThan":503,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":421,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":111,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":427,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":401,"org.easymock.tests.LimitationsTest.abstractClass":373,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":476,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":428,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":431,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":70}}]

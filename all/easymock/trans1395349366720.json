[{"transplant":{"position":"org.easymock.internal.MocksControl:336","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[1],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1848","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1928","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[2],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:140","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,37,38,38],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:89","sourceCode":"if (!(org.easymock.internal.Injection.isMatched())) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()));\n} ","type":"CtIfImpl"},"failures":[39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[55,56],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.MockBuilder:218","failures":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,37,38,72],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"failures":[73,74,75,76,77,78,79,80,81,82,83,19,84],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:126","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:97","sourceCode":"for (final java.lang.String java.lang.String : java.lang.String[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.String);\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1975","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Double>(org.easymock.Capture<java.lang.Double>))","type":"CtInvocationImpl"},"failures":[76],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:64","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[17,85,86,87,88,21,89,90,91,92,93,94,95],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[96,97,98,99],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:43","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"equals\", new java.lang.Class[]{ java.lang.Object.java.lang.Object })","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:70","sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : org.easymock.internal.InjectionPlan.getTestSubjectFields()) {\n    java.lang.reflect.Field.setAccessible(true);\n    java.lang.Object java.lang.Object;\n    try {\n        java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Object.getClass();\n    while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n        org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n        java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n    }\n}","type":"CtForEachImpl"},"failures":[100,39,40,41,101,42,43,46,102,47,48,49,103,50,51,54,104,105],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:49","sourceCode":"org.easymock.internal.Injection.getAnnotation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:231","sourceCode":"if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n    if (org.easymock.internal.Injection != null) {\n        throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n    } \n    org.easymock.internal.Injection = org.easymock.internal.Injection;\n} ","type":"CtIfImpl"},"failures":[100,101,102,103,104,105],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,106,107,108,109,110,25,26,27,28,29,111,30,31,32,33,34,35,36,37,37,38,38],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[112,113,114,115,116,117],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:50","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"finalize\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[118,17,119,120,121,122,21,91,93,123,124,125,126],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:70","sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : org.easymock.internal.InjectionPlan.getTestSubjectFields()) {\n    java.lang.reflect.Field.setAccessible(true);\n    java.lang.Object java.lang.Object;\n    try {\n        java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Object.getClass();\n    while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n        org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n        java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n    }\n}","type":"CtForEachImpl"},"failures":[100,39,40,41,101,42,43,46,102,47,48,49,103,50,51,54,104,105],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[127],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:269","sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:189","sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor })","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:49","sourceCode":"org.easymock.internal.Injection.getAnnotation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:232","sourceCode":"if (org.easymock.internal.Injection != null) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[128,66,129,130,131,132,133],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"cls":"type","type":"type"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"failures":[134,135],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[136,137,6,8,138,139,140,14,74,75,83],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Null:35","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"failures":[6,141,142,143],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":137,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":103,"org.easymock.tests2.UsageConstraintsTest.testMatches":11,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":123,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":98,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":101,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":28,"org.easymock.tests2.StubTest.stubWithReturnValue":18,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":128,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":132,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":105,"org.easymock.tests.UsageVarargTest.allKinds":143,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":0,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":91,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":131,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":113,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":70,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":110,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":69,"org.easymock.tests2.AnswerTest.stubAnswer":97,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":42,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":57,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":96,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":21,"org.easymock.tests2.UsageConstraintsTest.greaterThan":12,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":60,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":129,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":90,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":35,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":36,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":22,"org.easymock.samples.ConstructorCalledMockTest.testTax":37,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":54,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":65,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":38,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":44,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":13,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":119,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":4,"org.easymock.tests2.UsageConstraintsTest.testNull":6,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":78,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":61,"org.easymock.tests2.CaptureTest.testPrimitive":76,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":24,"org.easymock.tests.UsageTest.moreThanOneArgument":94,"org.easymock.tests2.UsageConstraintsTest.testSame":7,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":114,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":27,"org.easymock.tests2.CaptureTest.testCaptureFirst":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":99,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":122,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":142,"org.easymock.tests2.UsageTest.moreThanOneArgument":87,"org.easymock.tests.UsageVerifyTest.twoReturns":93,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":107,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":43,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":30,"org.easymock.tests2.CaptureTest.testCapture_2617107":75,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":133,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":95,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":141,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":111,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":45,"org.easymock.tests2.UsageStrictMockTest.differentMethods":85,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":34,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":25,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":56,"org.easymock.tests2.SerializationTest.testClass":64,"org.easymock.tests2.AnswerTest.answer":118,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":71,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":139,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":48,"org.easymock.tests2.CaptureTest.testAnd":74,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":109,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":53,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":86,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":17,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":49,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":135,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":23,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":26,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":125,"org.easymock.tests2.UsageConstraintsTest.testContains":9,"org.easymock.tests2.UsageConstraintsTest.testFind":5,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":102,"org.easymock.tests2.CaptureTest.testCaptureLast":80,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":140,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":138,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":52,"org.easymock.tests2.UsageConstraintsTest.lessThan":16,"org.easymock.tests2.CaptureTest.testCapture1_2446744":77,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":130,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":41,"org.easymock.tests.UsageTest.exactCallCountByLastCall":126,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":20,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":108,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":15,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":50,"org.easymock.tests2.CaptureTest.testCaptureRightOne":83,"org.easymock.tests.UsageStrictMockTest.differentMethods":89,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":40,"org.easymock.tests2.UsageConstraintsTest.testOr":8,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":66,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":46,"org.easymock.tests2.MockBuilderTest.testCreateMockString":63,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":39,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":29,"org.easymock.tests.UsageVerifyTest.twoThrows":92,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":58,"org.easymock.samples.PartialClassMockTest.testGetArea":72,"org.easymock.tests2.CaptureTest.testCaptureMultiple":73,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":31,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":68,"org.easymock.tests2.UsageTest.openCallCountByLastCall":120,"org.easymock.tests2.UsageConstraintsTest.testNotNull":14,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":121,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":106,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":1,"org.easymock.tests2.CaptureTest.testCaptureFromStub":19,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":59,"org.easymock.tests2.UsageTest.defaultResetToNice":55,"org.easymock.tests2.MockBuilderTest.testCreateMock":62,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":134,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":47,"org.easymock.tests.UsageTest.unexpectedCallWithArray":117,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":51,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":67,"org.easymock.tests.UsageTest.openCallCountByLastCall":124,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":112,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":116,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":3,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":100,"org.easymock.tests2.CaptureTest.testCapture":82,"org.easymock.tests2.UsageConstraintsTest.constraints":136,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":10,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":2,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":104,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":81,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":79,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":32,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":115,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":33,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":88}}]

[{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[1,2],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:340","sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.ErrorMessage:51","failures":[3,4,5,6,7],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:122","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[8,9],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[10,11,12,13,14,15],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,68,69,69,70],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:95","sourceCode":"return java.lang.StringBuilder.toString()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:69","sourceCode":"return java.lang.StringBuffer.toString()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:89","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"methodName","key":"methodName"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[3,4,71,72,12,5,13,73,74,75,76,7,77,78,79],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:220","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","type":"CtIfImpl"},"failures":[8],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericType":"genericType"}},{"position":"org.easymock.ConstructorArgs:60","failures":[80,34,37,81,82,83,84,85,86,87,88],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[89,90,91,92,93,94,95,96,97,98,99],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:150","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[100,3,4,101,102,16,17,18,103,19,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,71,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,12,181,182,5,183,184,185,186,187,188,189,190,191,192,193,194,195,20,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,13,73,238,239,74,75,240,241,242,243,244,245,246,247,248,249,8,21,22,23,9,24,250,251,25,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,26,274,275,276,277,278,279,280,281,282,283,284,27,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,76,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,0,332,333,334,335,336,29,80,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,7,354,355,30,356,31,357,358,89,90,359,360,91,361,92,93,362,94,363,364,365,366,367,368,369,370,371,95,372,373,374,375,96,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,32,33,34,35,391,36,37,392,393,394,395,38,40,41,396,42,43,44,45,397,46,47,49,398,399,50,400,401,402,403,404,405,406,77,407,408,409,410,411,78,79,412,413,414,415,416,417,418,419,420,421,422,423,424,97,425,98,426,427,428,429,430,431,432,99,433,434,435,436,437,438,439,1,440,441,442,443,444,51,445,446,52,447,448,449,450,451,452,453,454,455,53,456,457,458,459,460,54,461,462,55,56,463,57,58,59,60,464,61,465,466,62,63,64,65,2,467,468,469,470,471,472,473,474,475,476,477,66,67,478,68,69,70,479,480,481,482,483,484,485,486,487],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1789","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"regex"}},{"transplant":{"position":"org.easymock.EasyMock:1764","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:399","sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[384,451],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","failures":[29,80,30,34,37,81,82,83,84,397,85,86,87,88,442,443,444,51,445,446,52,447,448,449,450,451,452,453,454,455,53,456,457,458,459,460,54,461,462,68,69],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:40","sourceCode":"java.lang.StringBuffer.append(\"not(\")","type":"CtInvocationImpl"},"failures":[488],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[131,0,333],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[369,408,58],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"failures":[489,97,425,98,426,427,428,429,430,432,99,433,434,435],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.Capture:83","failures":[490],"status":-1,"binaryOperator":"(\"More than one value captured: \" + org.easymock.Capture<T>.(getValues()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[91,94,95,96],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:229","failures":[40,47,52,63,467],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:53","sourceCode":"return true","type":"CtReturnImpl"},"failures":[489,97,425,98,426,427,428,429,430,431,432,99,433,434,435],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:128","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.internal.EasyMockProperties:62","failures":[100,3,4,101,102,16,17,18,103,19,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,71,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,12,181,182,5,183,184,185,186,187,188,189,190,191,192,193,194,195,20,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,236,237,13,73,238,239,74,75,240,241,242,243,244,245,246,247,248,249,8,21,22,23,9,24,513,514,250,251,25,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,26,274,275,276,277,278,279,280,281,282,283,284,27,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,76,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,0,332,333,334,335,336,515,29,80,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,7,354,355,30,356,31,357,358,89,90,359,360,91,361,92,93,362,94,363,364,365,366,367,368,369,370,371,95,372,373,374,375,96,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,32,33,34,35,516,391,36,37,81,392,393,394,395,38,40,41,396,42,43,44,45,517,397,46,47,49,398,399,50,400,518,401,402,403,404,405,406,77,407,408,409,410,411,78,79,412,413,414,415,416,417,418,419,420,421,422,423,424,97,425,98,426,427,428,429,430,431,432,99,433,434,435,436,437,438,519,439,1,440,441,442,443,444,51,445,446,52,447,448,449,450,451,452,453,454,455,53,456,457,458,459,460,54,461,462,55,56,463,57,58,59,60,464,61,465,466,62,63,64,65,2,467,468,469,470,471,472,520,521,473,474,475,476,477,66,67,478,68,69,70,479,480,481,482,483,484,485,486,487],"status":-1,"binaryOperator":"java.io.InputStream != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if (java.lang.reflect.Constructor<T> == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"failures":[522,523,524,525,526,29,80,30,84,397],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[527,30,356,31],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1940","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[100,3,4,71,181,5,183,237,528,529,530,6,352,7,354,406],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:187","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:632","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[152,363],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[3,153,171,196,198,199,200,201,202,203,206,207,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,239,275,276,277,278,279,280,297,398,399,50,400,404,410,437],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":90,"org.easymock.tests2.UsageTest.argumentsOrdered":79,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":236,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":388,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":326,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":131,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":408,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":478,"org.easymock.tests2.DelegateToTest.testReturnException":332,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":276,"org.easymock.tests.MockingTest.testPartialClassMocking":17,"org.easymock.tests.MockClassControlTest.testToString":285,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":420,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":292,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":140,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":450,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":52,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":216,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":528,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":471,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":512,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":522,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":362,"org.easymock.tests2.UsageTest.wrongArguments":77,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":204,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":349,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":256,"org.easymock.samples.ExampleTest.answerVsDelegate":480,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":25,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":105,"org.easymock.tests2.UsageConstraintsTest.testNull":91,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":57,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":387,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":290,"org.easymock.tests2.CaptureTest.testPrimitive":426,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":208,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":235,"org.easymock.tests.UsageTest.moreThanOneArgument":237,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":463,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":193,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":107,"org.easymock.tests.UsageTest.argumentsOrdered":75,"org.easymock.tests.UsageVarargTest.varargIntAccepted":159,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":136,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":186,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":38,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":521,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":330,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":43,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":123,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":190,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":496,"org.easymock.tests.ReplayStateInvalidUsageTest.times":266,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":343,"org.easymock.tests2.DependencyTest.testClassMocking":468,"org.easymock.tests2.AnswerTest.answer":414,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":94,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":138,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":395,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":514,"org.easymock.tests2.CaptureTest.testAnd":97,"org.easymock.tests2.UsageTest.strictResetToDefault":405,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":62,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":83,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":192,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":114,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":382,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":111,"org.easymock.tests2.DelegateToTest.testDelegate":336,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":495,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":231,"org.easymock.tests.LimitationsTest.mockFinalMethod":274,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":279,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":120,"org.easymock.tests2.DependencyTest.testClassMockingSupport":469,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":213,"org.easymock.tests2.CaptureTest.testCapture1_2446744":427,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":464,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":229,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":393,"org.easymock.tests.UsageThrowableTest.throwError":196,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":260,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":251,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":331,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":195,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":462,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":499,"org.easymock.samples.PartialClassMockTest.testGetArea":70,"org.easymock.tests.MockingTest.testInterfaceMocking":103,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":261,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":187,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":451,"org.easymock.tests2.UsageTest.niceToStrict":407,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":178,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":217,"org.easymock.tests2.ThreadingTest.testChangeDefault":519,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":121,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":42,"org.easymock.tests2.MockBuilderTest.testCreateMock":46,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":458,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":346,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":14,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":225,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":383,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":513,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":283,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":241,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":254,"org.easymock.tests.UsageOverloadedMethodTest.overloading":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":460,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":455,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":297,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":367,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":169,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":311,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":366,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":432,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":160,"org.easymock.tests2.EasyMockSupportClassTest.testAll":51,"org.easymock.tests.MockClassControlTest.testEquals":289,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":22,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":233,"org.easymock.tests2.CaptureTest.testCaptureAll":425,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":394,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":118,"org.easymock.tests.MockNameTest.defaultName":209,"org.easymock.tests2.UsageConstraintsTest.testMatches":368,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":194,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":258,"org.easymock.samples.ExampleTest.voteForRemovals":484,"org.easymock.tests.UsageVarargTest.allKinds":168,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":100,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":119,"org.easymock.samples.BasicClassMockTest.testPrintContent":67,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":202,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":350,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":280,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":327,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":335,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":526,"org.easymock.tests2.UsageConstraintsTest.greaterThan":370,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":445,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":113,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":65,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":500,"org.easymock.samples.ExampleTest.voteForRemoval":481,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":151,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":439,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":2,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":252,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":60,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":492,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":404,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":20,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":397,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":128,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":380,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":198,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":443,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":275,"org.easymock.tests2.CaptureTest.testCaptureFirst":435,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":0,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":127,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":381,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":413,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":76,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":307,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":440,"org.easymock.tests2.CaptureTest.testCapture2_2446744":434,"org.easymock.tests2.UsageTest.moreThanOneArgument":406,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":139,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":47,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":167,"org.easymock.tests.GenericTest.testBridgedEquals":9,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":248,"org.easymock.tests.UsageExpectAndReturnTest.longType":303,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":116,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":378,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":48,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":234,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":172,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":374,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":232,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":191,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":211,"org.easymock.tests.UsageCallCountTest.tooManyCalls":249,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":459,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":308,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":348,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":221,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":201,"org.easymock.tests.MockingTest.testNiceClassMocking":106,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":33,"org.easymock.tests.MockingTest.testClassMocking":102,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":39,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":242,"org.easymock.tests2.UsageConstraintsTest.testContains":365,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":50,"org.easymock.tests2.UsageConstraintsTest.testFind":360,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":171,"org.easymock.tests.MockTypeTest.fromEasyMockClass":250,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":403,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":179,"org.easymock.tests.UsageExpectAndReturnTest.object":310,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":61,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":347,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":386,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":523,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":162,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":176,"org.easymock.tests.UsageTest.exactCallCountByLastCall":240,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":126,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":108,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":291,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":80,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":157,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":316,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":296,"org.easymock.tests.MockClassControlTest.testHashCode":288,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":321,"org.easymock.tests2.EasyMockSupportTest.testVerify":390,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":453,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":109,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":282,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":294,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":392,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":518,"org.easymock.tests.UsageVarargTest.varargCharAccepted":161,"org.easymock.tests2.CaptureTest.testCaptureMultiple":490,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":351,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":144,"org.easymock.tests2.UsageTest.openCallCountByLastCall":409,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":389,"org.easymock.tests.DefaultClassInstantiatorTest.object":145,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":281,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":174,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":454,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":223,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":199,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":341,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":320,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":498,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":63,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":287,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":222,"org.easymock.tests.CapturesMatcherTest.test":489,"org.easymock.tests.ReplayStateInvalidCallsTest.times":504,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":317,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":210,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":505,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":54,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":286,"org.easymock.tests2.UsageTest.resumeIfFailure":412,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":24,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":520,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":278,"org.easymock.tests2.StubTest.stubWithReturnValue":437,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":84,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":309,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":375,"org.easymock.tests2.SerializationTest.testAllMockedMethod":31,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":137,"org.easymock.samples.SupportTest.voteForRemovals":477,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":15,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":8,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":323,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":228,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":527,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":143,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":415,"org.easymock.tests.UsageExpectAndThrowTest.object":226,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":293,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":372,"org.easymock.tests2.DelegateToTest.testWrongClass":334,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":502,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":270,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":271,"org.easymock.tests.UsageStrictMockTest.range":5,"org.easymock.samples.ConstructorCalledMockTest.testTax":68,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":474,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":385,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":32,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":227,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":44,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":442,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":74,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":268,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":255,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":10,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":494,"org.easymock.tests2.CaptureTest.testCaptureNone":431,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":156,"org.easymock.tests.UsageUnorderedTest.message":71,"org.easymock.tests.UsageVerifyTest.twoReturns":4,"org.easymock.tests.UsageVarargTest.varargByteAccepted":166,"org.easymock.tests2.ThreadingTest.testThreadSafe":438,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":456,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":246,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":177,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":66,"org.easymock.tests2.CaptureTest.testCapture_2617107":98,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":215,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":141,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":207,"org.easymock.tests2.UsageConstraintsTest.any":363,"org.easymock.tests2.StubTest.stub":436,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":265,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":212,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":142,"org.easymock.tests.UsageExpectAndThrowTest.longType":219,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":277,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":149,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":264,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":353,"org.easymock.tests2.SerializationTest.testClass":30,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":325,"org.easymock.tests.LimitationsTest.mockNativeMethod":26,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":23,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":319,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":340,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":510,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":355,"org.easymock.tests2.NameTest.nameForMocksControl":424,"org.easymock.tests2.MockedExceptionTest.testMockedException":399,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":446,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":239,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":402,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":19,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":220,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":55,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":45,"org.easymock.tests.MockingTest.testNicePartialClassMocking":18,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":59,"org.easymock.tests2.CaptureTest.testCaptureLast":430,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":338,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":214,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":509,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":37,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":93,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":373,"org.easymock.tests.MockingTest.testTwoMocks":16,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":506,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":81,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":300,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":224,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":78,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":376,"org.easymock.samples.ExampleTest.removeNonExistingDocument":485,"org.easymock.tests.UsageStrictMockTest.differentMethods":183,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":262,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":345,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":322,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":515,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":147,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":1,"org.easymock.tests2.MockBuilderTest.testCreateMockString":49,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":284,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":447,"org.easymock.tests.UsageExpectAndThrowTest.floatType":218,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":444,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":417,"org.easymock.tests.UsageVerifyTest.twoThrows":3,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":295,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":53,"org.easymock.samples.ExampleTest.voteAgainstRemoval":482,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":132,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":64,"org.easymock.tests.LimitationsTest.privateConstructor":273,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":88,"org.easymock.tests2.UsageConstraintsTest.testNotNull":96,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":398,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":203,"org.easymock.tests2.UsageTest.defaultResetToNice":411,"org.easymock.samples.ExampleTest.voteAgainstRemovals":479,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":133,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":315,"org.easymock.tests.UsageVarargTest.differentLength":163,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":339,"org.easymock.tests2.CallbackTest.callback":337,"org.easymock.tests2.UsageConstraintsTest.equals":359,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":465,"org.easymock.tests.UsageTest.openCallCountByLastCall":238,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":357,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":206,"org.easymock.tests.UsageCallCountTest.tooFewCalls":244,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":35,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":257,"org.easymock.tests.UsageThrowableTest.throwCheckedException":200,"org.easymock.tests.MockingTest.testStrictClassMocking":101,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":11,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":153,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":36,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":34,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":344,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":267,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":391,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":419,"org.easymock.tests.ObjectMethodsTest.testHashCode":175,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":508,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":441,"org.easymock.tests2.NameTest.nameForNiceMock":423,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":503,"org.easymock.tests2.DependencyTest.testInterfaceMocking":470,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":524,"org.easymock.samples.ExampleTest.addDocument":483,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":457,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":461,"org.easymock.tests2.DelegateToTest.testStubDelegate":333,"org.easymock.tests2.AnswerTest.stubAnswer":418,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":181,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":517,"org.easymock.tests.UsageVarargTest.varargLongAccepted":165,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":184,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":130,"org.easymock.tests.UsageExpectAndReturnTest.floatType":302,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":318,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":29,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":69,"org.easymock.tests.UsageThrowableTest.noUpperLimit":197,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":298,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":329,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":371,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":358,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":472,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":428,"org.easymock.tests2.SerializationTest.test":356,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":146,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":301,"org.easymock.tests2.UsageConstraintsTest.testSame":361,"org.easymock.samples.SupportTest.addDocument":476,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":516,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":493,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":263,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":448,"org.easymock.tests.GenericTest.testPackageScope":21,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":110,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":125,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":328,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":104,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":491,"org.easymock.tests2.NameTest.nameForMock":421,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":312,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":86,"org.easymock.tests2.UsageStrictMockTest.differentMethods":354,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":466,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":304,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":230,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":173,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":115,"org.easymock.tests2.MockedExceptionTest.testRealException":400,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":253,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":475,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":135,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":134,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":352,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":205,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":269,"org.easymock.tests2.NameTest.nameForStrictMock":422,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":396,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":401,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":58,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":473,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":529,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":148,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":95,"org.easymock.tests.ErrorMessageTest.testGetters":530,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":40,"org.easymock.tests2.UsageStrictMockTest.range":7,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":497,"org.easymock.tests2.UsageConstraintsTest.lessThan":377,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":324,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":525,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":129,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":379,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":452,"org.easymock.tests2.CaptureTest.testCaptureRightOne":99,"org.easymock.tests2.UsageConstraintsTest.testOr":92,"org.easymock.tests.UsageRangeTest.combination":112,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":56,"org.easymock.tests.UsageTest.wrongArguments":73,"org.easymock.tests2.MockBuilderTest.testWithConstructor":82,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":449,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":27,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":305,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":122,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":313,"org.easymock.tests.UsageVarargTest.varargShortAccepted":164,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":150,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":247,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":511,"org.easymock.tests2.UsageConstraintsTest.cmpTo":364,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":416,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":501,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":124,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":410,"org.easymock.tests2.CaptureTest.testCaptureFromStub":433,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":259,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":41,"org.easymock.tests.UsageTest.unexpectedCallWithArray":13,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":507,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":12,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":245,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":85,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":314,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":182,"org.easymock.tests2.UsageConstraintsTest.constraints":89,"org.easymock.samples.ExampleTest.addAndChangeDocument":486,"org.easymock.tests2.ConstraintsToStringTest.notToString":488,"org.easymock.tests.UsageStrictMockTest.testVerify":185,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":487,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":180,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":117,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":429,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":188,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":28,"org.easymock.tests.LimitationsTest.abstractClass":272,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":306,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":189,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":299,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":384,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":158,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":6}}]

[{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:138","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[0,1,2,3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.internal.LastControl:70","failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1494","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(char))","type":"CtInvocationImpl"},"failures":[48,53,65],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[73,74,30,31,32,33,34,35,36,37,39,75,40,41,42,43],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[30,32,40,47,48,50,52,53,55,65,70],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[76,72],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[77],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[30,32,33,34,35,36,37,39,75,40,41,43],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[11,12,13,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,25,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,62],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[114,114,115,115,116,117],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[118,119,120],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:140","sourceCode":"java.lang.StringBuilder.append(\":\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[78,121,95,96,97],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:210","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:323","sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[122,123,95],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[124,125,126,127],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Invocation:195","failures":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,77,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182],"status":-1,"binaryOperator":"(((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1928","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.EasyMock:1495","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:103","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,183,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:311","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[184,185,186,187,128,11,188,12,189,78,79,190,88,191,90,91,92,93,192,193,194,95,96,195,196,97,98,197,100,198,199,101,102,200,201,202,203,154,155,77,204,166,205,206,169,207,47,62,208],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:144","sourceCode":"java.io.DataOutputStream.writeLong(java.lang.Long.longValue())","type":"CtInvocationImpl"},"failures":[209,210,211],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:734","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[118,119,120],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:557","failures":[4,5,212,213,214,215,216,217,6,7,8,9,10,11,218,219,13,78,79,220,221,222,223,122,123,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,81,246,247,248,191,89,249,250,192,251,252,253,254,255,256,14,15,16,17,18,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,20,272,273,274,275,276,277,21,22,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,194,301,302,303,94,95,96,304,305,306,307,308,309,310,311,312,313,314,114,114,115,115,315,316,137,23,24,25,97,98,317,318,144,145,319,320,321,322,146,197,323,99,198,324,325,326,200,201,327,328,329,330,331,332,333,183,26,0,202,334,335,153,154,336,337,338,339,340,77,341,342,343,344,27,204,345,166,346,347,348,349,350,351,28,29,352,353,354,355,356,357,30,31,33,34,37,38,39,40,41,42,43,358,205,359,168,360,206,169,361,170,207,362,363,176,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,69,70,71,72,125,126,208],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:189","sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor })","type":"CtInvocationImpl"},"failures":[216,364,217,219,256,365,366,367,265,266,267,368,129,369,370,371,372,373,374,375,376,377,378,114,114,115,115,315,379,380,381,144,145,319,320,322,146,327,328,329,0,151,202,152,382,334,383,335,153,203,154,155,336,337,338,339,340,77,342,343,344,384,27,385,165,204,345,166,386,167,346,125,127],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:357","sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"position":"org.easymock.internal.MocksControl:131","failures":[387],"status":-1,"binaryOperator":"(\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:213","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockHandler:97","sourceCode":"return ((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:233","sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"failMessage"}},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[13,79,388,389,89,260,285,289,290,292,295,94,95,96,25,98,390,99],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[12,13,78,79,391,90,25,97,98,77,342,344,165,166],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:34","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>.getName(), java.lang.Byte.java.lang.Class<java.lang.Byte>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"failures":[11,392],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1421","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:183","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"failures":[4,5,215,393,394,395,185,186,216,364,6,7,8,9,10,11,396,219,397,12,13,189,78,79,388,220,221,222,223,122,123,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,81,191,89,91,249,250,92,93,192,256,14,15,16,17,18,398,399,400,401,402,257,258,259,260,403,404,405,406,407,408,409,410,411,19,265,266,267,268,269,270,271,20,272,21,22,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,194,302,303,94,95,96,412,413,414,415,304,305,306,307,308,309,310,311,312,416,313,314,23,417,25,196,97,98,390,317,318,145,319,322,146,197,323,99,100,198,199,324,325,326,101,102,200,201,327,328,329,330,331,332,333,183,26,0,151,334,383,340,77,341,342,343,344,384,27,165,345,346,349,350,351,28,29,353,354,355,357,30,31,32,33,34,35,36,37,38,39,40,41,42,43,418,419,420,421,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,125,126,127,208],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.Capture:82","failures":[30,32,33,34,35,36,37,39,75,40,41,43],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":48,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":191,"org.easymock.tests2.UsageTest.argumentsOrdered":102,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":362,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":138,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":199,"org.easymock.tests2.DelegateToTest.testReturnException":353,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":269,"org.easymock.tests.MockingTest.testPartialClassMocking":265,"org.easymock.tests.MockClassControlTest.testToString":372,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":247,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":167,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":160,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":281,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":337,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":24,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":54,"org.easymock.tests2.UsageTest.wrongArguments":100,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":6,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":182,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":414,"org.easymock.samples.ExampleTest.answerVsDelegate":310,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":369,"org.easymock.tests2.UsageConstraintsTest.testNull":50,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":342,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":207,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":377,"org.easymock.tests2.CaptureTest.testPrimitive":33,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":10,"org.easymock.tests.UsageTest.moreThanOneArgument":89,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":300,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":341,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":306,"org.easymock.tests.UsageTest.argumentsOrdered":93,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":273,"org.easymock.tests.UsageVarargTest.varargIntAccepted":405,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":112,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":14,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":151,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":142,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":383,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":18,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":107,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":176,"org.easymock.tests2.AnswerTest.answer":346,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":55,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":421,"org.easymock.tests2.CaptureTest.testAnd":30,"org.easymock.tests2.UsageTest.strictResetToDefault":323,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":165,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":305,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":302,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":360,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":277,"org.easymock.tests2.DelegateToTest.testDelegate":357,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":296,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":20,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":402,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":80,"org.easymock.tests2.CaptureTest.testCapture1_2446744":34,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":387,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":294,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":419,"org.easymock.tests.UsageThrowableTest.throwError":220,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":130,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":143,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":128,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":308,"org.easymock.samples.PartialClassMockTest.testGetArea":315,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":15,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":262,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":161,"org.easymock.tests2.UsageTest.niceToStrict":198,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":282,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":120,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":334,"org.easymock.tests2.MockBuilderTest.testCreateMock":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":163,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":179,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":104,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":290,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":206,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":214,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":412,"org.easymock.tests.UsageOverloadedMethodTest.overloading":279,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":60,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":259,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":237,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":278,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":59,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":210,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":39,"org.easymock.tests2.EasyMockSupportClassTest.testAll":336,"org.easymock.tests.MockClassControlTest.testEquals":376,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":364,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":109,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":298,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":420,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":400,"org.easymock.tests2.CaptureTest.testCaptureAll":31,"org.easymock.tests2.UsageConstraintsTest.testMatches":61,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":307,"org.easymock.samples.ExampleTest.voteForRemovals":313,"org.easymock.tests.UsageVarargTest.allKinds":19,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":94,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":401,"org.easymock.samples.BasicClassMockTest.testPrintContent":380,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":224,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":195,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":139,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":272,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":356,"org.easymock.tests2.UsageConstraintsTest.greaterThan":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":158,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":301,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":166,"org.easymock.samples.ExampleTest.voteForRemoval":311,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":386,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":332,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":131,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":384,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":197,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":256,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":359,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":222,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":156,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":268,"org.easymock.tests2.CaptureTest.testCaptureFirst":43,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":352,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":168,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":201,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":233,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":183,"org.easymock.tests2.UsageTest.moreThanOneArgument":99,"org.easymock.tests2.CaptureTest.testCapture2_2446744":42,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":154,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":411,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":185,"org.easymock.tests.UsageExpectAndReturnTest.longType":229,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":398,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":358,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":299,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":68,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":264,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":297,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":254,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":304,"org.easymock.tests.UsageCallCountTest.tooManyCalls":186,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":83,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":164,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":234,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":181,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":286,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":123,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":145,"org.easymock.tests.MockingTest.testNiceClassMocking":368,"org.easymock.tests.MockingTest.testClassMocking":366,"org.easymock.tests2.UsageConstraintsTest.testContains":58,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":329,"org.easymock.tests2.UsageConstraintsTest.testFind":49,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":280,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":188,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":29,"org.easymock.tests.UsageExpectAndReturnTest.object":236,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":27,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":180,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":170,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":407,"org.easymock.tests.UsageTest.exactCallCountByLastCall":192,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":4,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":246,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":274,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":87,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":1,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":403,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":242,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":258,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":133,"org.easymock.tests.MockClassControlTest.testHashCode":375,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":106,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":275,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":213,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":257,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":418,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":190,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":44,"org.easymock.tests.UsageVarargTest.varargCharAccepted":406,"org.easymock.tests2.CaptureTest.testCaptureMultiple":74,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":417,"org.easymock.tests2.UsageTest.openCallCountByLastCall":324,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":118,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":363,"org.easymock.tests.DefaultClassInstantiatorTest.object":378,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":212,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":88,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":288,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":223,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":174,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":132,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":204,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":374,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":287,"org.easymock.tests.CapturesMatcherTest.test":73,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":243,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":253,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":108,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":339,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":373,"org.easymock.tests2.UsageTest.resumeIfFailure":200,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":129,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":271,"org.easymock.tests2.StubTest.stubWithReturnValue":318,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":2,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":69,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":235,"org.easymock.tests2.SerializationTest.testAllMockedMethod":127,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":251,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":111,"org.easymock.samples.SupportTest.voteForRemovals":316,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":135,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":293,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":124,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":252,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":347,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":248,"org.easymock.tests.UsageExpectAndThrowTest.object":291,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":66,"org.easymock.tests2.DelegateToTest.testWrongClass":355,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":21,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":22,"org.easymock.samples.ConstructorCalledMockTest.testTax":114,"org.easymock.tests.UsageStrictMockTest.range":78,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":361,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":144,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":292,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":335,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":92,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":413,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":82,"org.easymock.tests2.CaptureTest.testCaptureNone":38,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":263,"org.easymock.tests.UsageUnorderedTest.message":11,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":187,"org.easymock.tests.UsageVerifyTest.twoReturns":96,"org.easymock.tests.UsageVarargTest.varargByteAccepted":410,"org.easymock.tests2.ThreadingTest.testThreadSafe":331,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":162,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":395,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":379,"org.easymock.tests2.CaptureTest.testCapture_2617107":32,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":113,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":389,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":9,"org.easymock.tests2.UsageConstraintsTest.any":56,"org.easymock.tests2.StubTest.stub":317,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":255,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":270,"org.easymock.tests.UsageExpectAndThrowTest.longType":284,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":209,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":196,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":137,"org.easymock.tests2.SerializationTest.testClass":125,"org.easymock.tests.LimitationsTest.mockNativeMethod":219,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":217,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":245,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":173,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":390,"org.easymock.tests2.NameTest.nameForMocksControl":150,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":175,"org.easymock.tests2.MockedExceptionTest.testMockedException":328,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":250,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":267,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":285,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":340,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":153,"org.easymock.tests.MockingTest.testNicePartialClassMocking":266,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":344,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":171,"org.easymock.tests2.CaptureTest.testCaptureLast":37,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":81,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":146,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":53,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":67,"org.easymock.tests.MockingTest.testTwoMocks":367,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":226,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":289,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":101,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":71,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":396,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":178,"org.easymock.tests.UsageStrictMockTest.differentMethods":79,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":134,"org.easymock.tests2.ConstraintsToStringTest.andToString":110,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":333,"org.easymock.tests2.MockBuilderTest.testCreateMockString":155,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":370,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":159,"org.easymock.tests.UsageExpectAndThrowTest.floatType":283,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":157,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":349,"org.easymock.tests.UsageVerifyTest.twoThrows":95,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":338,"org.easymock.samples.ExampleTest.voteAgainstRemoval":312,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":261,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":345,"org.easymock.tests2.UsageConstraintsTest.testNotNull":70,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":225,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":327,"org.easymock.tests2.UsageTest.defaultResetToNice":326,"org.easymock.samples.ExampleTest.voteAgainstRemovals":309,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":241,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":172,"org.easymock.tests.UsageVarargTest.differentLength":193,"org.easymock.tests2.CallbackTest.callback":208,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":117,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":85,"org.easymock.tests.UsageTest.openCallCountByLastCall":249,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":45,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":8,"org.easymock.tests.UsageCallCountTest.tooFewCalls":393,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":320,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":415,"org.easymock.tests.UsageThrowableTest.throwCheckedException":122,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":84,"org.easymock.tests.MockingTest.testStrictClassMocking":365,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":5,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":322,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":177,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":319,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":321,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":351,"org.easymock.tests2.NameTest.nameForNiceMock":149,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":26,"org.easymock.tests2.DependencyTest.testInterfaceMocking":23,"org.easymock.samples.ExampleTest.addDocument":416,"org.easymock.tests2.DelegateToTest.testStubDelegate":354,"org.easymock.tests2.AnswerTest.stubAnswer":350,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":13,"org.easymock.tests.UsageVarargTest.varargLongAccepted":409,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":388,"org.easymock.tests.UsageExpectAndReturnTest.floatType":228,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":244,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":0,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":115,"org.easymock.tests2.ConstraintsToStringTest.orToString":103,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":141,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":64,"org.easymock.tests.UsageThrowableTest.noUpperLimit":221,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":46,"org.easymock.tests2.SerializationTest.test":126,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":35,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":211,"org.easymock.tests2.UsageConstraintsTest.testSame":51,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":227,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":218,"org.easymock.tests.GenericTest.testPackageScope":216,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":276,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":140,"org.easymock.tests2.NameTest.nameForMock":147,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":238,"org.easymock.tests2.UsageStrictMockTest.differentMethods":98,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":385,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":230,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":295,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":303,"org.easymock.tests2.MockedExceptionTest.testRealException":330,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":86,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":3,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":25,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":7,"org.easymock.tests2.NameTest.nameForStrictMock":148,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":382,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":119,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":28,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":343,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":381,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":392,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":65,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":202,"org.easymock.tests2.UsageStrictMockTest.range":97,"org.easymock.tests2.UsageConstraintsTest.lessThan":72,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":136,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":205,"org.easymock.tests2.CaptureTest.testCaptureRightOne":40,"org.easymock.tests2.UsageConstraintsTest.testOr":52,"org.easymock.tests.UsageRangeTest.combination":194,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":77,"org.easymock.tests.UsageTest.wrongArguments":91,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":371,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":231,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":239,"org.easymock.tests.UsageVarargTest.varargShortAccepted":408,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":184,"org.easymock.tests2.UsageConstraintsTest.cmpTo":57,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":348,"org.easymock.tests2.CompareToTest.testLessThan":76,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":325,"org.easymock.tests2.CaptureTest.testCaptureFromStub":41,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":152,"org.easymock.tests.UsageTest.unexpectedCallWithArray":90,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":12,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":394,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":116,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":240,"org.easymock.tests2.CaptureTest.testCapture":75,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":189,"org.easymock.tests2.UsageConstraintsTest.constraints":47,"org.easymock.samples.ExampleTest.addAndChangeDocument":314,"org.easymock.tests2.ConstraintsToStringTest.notToString":105,"org.easymock.tests.UsageStrictMockTest.testVerify":391,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":397,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":399,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":36,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":16,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":232,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":17,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":260,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":404,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":169,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":121}}]

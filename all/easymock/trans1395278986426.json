[{"transplant":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:60","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","type":"CtLocalVariableImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1163","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1777","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"failures":[66,17,24,29],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[4,5,7,9,10,12,22,27,30,32,40],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:198","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:121","sourceCode":"if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n    if (!(java.lang.Object.equals(java.lang.Object))) {\n        return false;\n    } \n} else {\n    if (java.lang.Object != java.lang.Object) {\n        return false;\n    } \n}","type":"CtIfImpl"},"failures":[67],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:215","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.Capture:85","sourceCode":"return java.util.List<T>.get(0)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[68,69,69,70,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,44,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[129,130,106],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[131,132,133,134,135,64],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[136,137,138,139,140,141,135,142,143,144,47,145,146,64,147],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:411","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[148],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[149,150],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[151,152],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:1928","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[16],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1494","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(char))","type":"CtInvocationImpl"},"failures":[5,10,22],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:92","failures":[4,5,9,10,12,22,30,32,40],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:147","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cached":"org.easymock.internal.MocksControl.classProxyFactory"}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:115","sourceCode":"return org.easymock.IAnswer<?>.toString()","type":"CtReturnImpl"},"failures":[153,154,155],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1263","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2110","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[156,157,95,158,159,160,161,162,163,49,164,53,165,166,167,168,61,169],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MocksBehavior:200","failures":[170],"status":-1,"binaryOperator":"(((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:287","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[82,171,172,173,174,175,176,177,139,178,179,180,147,181],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[182,11,17,29],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"failures":[69,69,70,70,183],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.internal.matchers.EndsWith:40","failures":[184],"status":-1,"binaryOperator":"(\"endsWith(\\\"\" + (java.lang.String))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:827","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[148,118],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.Capture:134","failures":[185,186],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:327","failures":[161,162,187,188],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.MocksControl:131","failures":[189],"status":-1,"binaryOperator":"(\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[84,86,87,88,44,96,99,118,126],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[190],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","i":"i"}},{"transplant":{"position":"org.easymock.internal.Range:83","sourceCode":"return int == int","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"failures":[66,29],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"maximum":"result","java.lang.Integer.MAX_VALUE":"result"}},{"transplant":{"position":"org.easymock.internal.RecordState:162","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[183,191],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[148,115,116,117,118],"status":-1,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:107","failures":[68,69,69,70,70,71,72,73,192,74,193,75,76,194,77,78,79,80,129,81,82,195,83,84,85,86,87,88,89,44,196,149,90,91,92,93,197,94,156,157,95,198,199,96,97,98,99,100,101,200,201,202,203,102,204,205,103,206,207,208,209,210,211,212,213,214,104,215,216,217,218,219,105,220,221,106,107,222,223,108,109,110,111,224,112,113,114,225,151,226,227,228,152,229,148,115,116,117,118,119,120,121,122,123,124,125,126,230,231,127,232,128],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:93","failures":[68,69,69,70,70,71,72,73,74,193,75,76,77,78,79,80,81,82,195,83,84,85,86,87,88,89,44,90,91,92,93,95,96,97,98,99,100,101,233,200,234,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,127],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"failures":[85,86,88,90,93,46,139,178,135,64,65,147,181,235],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[136,137,138,139,141,135,142,143,144,47,145,146,64,147],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:159","failures":[69,70,236,237,238,239,196],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":5,"org.easymock.tests2.UsageTest.argumentsOrdered":138,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":168,"org.easymock.tests2.StubTest.stubWithReturnValue":159,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":26,"org.easymock.tests2.SerializationTest.testAllMockedMethod":107,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":166,"org.easymock.tests.MockingTest.testPartialClassMocking":109,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":130,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":132,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":148,"org.easymock.tests.MockClassControlTest.testToString":121,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":209,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":103,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":23,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":62,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":63,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":11,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":51,"org.easymock.tests2.UsageTest.wrongArguments":136,"org.easymock.samples.ConstructorCalledMockTest.testTax":69,"org.easymock.tests.UsageStrictMockTest.range":147,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":96,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":113,"org.easymock.tests2.UsageConstraintsTest.testNull":7,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":86,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":79,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":126,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":176,"org.easymock.tests2.CaptureTest.testPrimitive":33,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":201,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":143,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":163,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":133,"org.easymock.tests2.CaptureTest.testCaptureNone":38,"org.easymock.tests.UsageUnorderedTest.message":47,"org.easymock.tests.UsageVerifyTest.twoReturns":146,"org.easymock.tests2.ConstraintsToStringTest.endsWithToString":184,"org.easymock.tests.UsageTest.argumentsOrdered":144,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":215,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":71,"org.easymock.tests.InvocationTest.testEquals":67,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":56,"org.easymock.tests2.CaptureTest.testCapture_2617107":32,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":74,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":54,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":78,"org.easymock.tests2.UsageConstraintsTest.any":13,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":60,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":162,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":167,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":228,"org.easymock.tests2.SerializationTest.testClass":106,"org.easymock.tests.LimitationsTest.mockNativeMethod":127,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":117,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":12,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":234,"org.easymock.tests2.CaptureTest.testAnd":30,"org.easymock.tests2.UsageTest.strictResetToDefault":150,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":90,"org.easymock.tests2.MockedExceptionTest.testMockedException":157,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":205,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":111,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":84,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":80,"org.easymock.tests.MockingTest.testNicePartialClassMocking":110,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":88,"org.easymock.tests.LimitationsTest.mockFinalMethod":232,"org.easymock.tests2.CaptureTest.testCaptureLast":37,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":61,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":10,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":101,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":24,"org.easymock.tests.MockingTest.testTwoMocks":108,"org.easymock.tests2.CaptureTest.testCapture1_2446744":34,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":189,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":137,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":28,"org.easymock.tests.UsageStrictMockTest.differentMethods":181,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":226,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":170,"org.easymock.tests2.MockBuilderTest.testCreateMockString":83,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":119,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":206,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":19,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":203,"org.easymock.tests.ResultTest.createReturnResultToString":154,"org.easymock.tests.UsageVerifyTest.twoThrows":145,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":221,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":104,"org.easymock.samples.PartialClassMockTest.testGetArea":68,"org.easymock.tests.ResultTest.createDelegateResultToString":153,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":57,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":92,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":210,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":128,"org.easymock.tests2.UsageTest.niceToStrict":171,"org.easymock.tests.LimitationsTest.privateConstructor":231,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":190,"org.easymock.tests2.UsageConstraintsTest.testNotNull":27,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":156,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":77,"org.easymock.tests2.MockBuilderTest.testCreateMock":81,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":217,"org.easymock.tests2.CallbackTest.callback":172,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":196,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":131,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":174,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":2,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":188,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":53,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":214,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":17,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":99,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":16,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":39,"org.easymock.tests2.EasyMockSupportClassTest.testAll":102,"org.easymock.tests.MockClassControlTest.testEquals":125,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":116,"org.easymock.tests.MockingTest.testStrictClassMocking":222,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":134,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":233,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":238,"org.easymock.tests2.CaptureTest.testCaptureAll":31,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":49,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":100,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":98,"org.easymock.tests2.UsageConstraintsTest.testMatches":18,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":191,"org.easymock.tests2.CompareToTest.testGreateOrEqual":182,"org.easymock.tests.UsageVarargTest.allKinds":50,"org.easymock.samples.BasicClassMockTest.testPrintContent":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":220,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":177,"org.easymock.tests2.AnswerTest.stubAnswer":183,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":169,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":65,"org.easymock.tests2.UsageConstraintsTest.greaterThan":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":204,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":93,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":229,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":197,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":89,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":73,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":70,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":21,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":3,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":114,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":198,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":35,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":129,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":164,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":151,"org.easymock.tests2.UsageConstraintsTest.testSame":8,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":202,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":165,"org.easymock.tests2.CaptureTest.testCaptureFirst":43,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":140,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":207,"org.easymock.tests.GenericTest.testPackageScope":115,"org.easymock.tests2.CaptureTest.testCapture2_2446744":42,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":45,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":82,"org.easymock.tests.GenericTest.testBridgedEquals":118,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":195,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":25,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":239,"org.easymock.tests2.UsageStrictMockTest.differentMethods":178,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":161,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":218,"org.easymock.tests2.MockedExceptionTest.testRealException":158,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":46,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":52,"org.easymock.tests.MockingTest.testNiceClassMocking":224,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":97,"org.easymock.tests.MockingTest.testClassMocking":223,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":193,"org.easymock.tests2.UsageConstraintsTest.testContains":15,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":95,"org.easymock.tests2.UsageConstraintsTest.testFind":6,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":194,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":0,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":87,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":1,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":180,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":199,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":227,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":22,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":44,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":75,"org.easymock.tests2.UsageStrictMockTest.range":139,"org.easymock.tests2.UsageConstraintsTest.lessThan":29,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":48,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":211,"org.easymock.tests2.CaptureTest.testCaptureRightOne":40,"org.easymock.tests2.UsageConstraintsTest.testOr":9,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":192,"org.easymock.tests.UsageRangeTest.combination":179,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":85,"org.easymock.tests.UsageTest.wrongArguments":142,"org.easymock.tests2.MockBuilderTest.testWithConstructor":236,"org.easymock.tests.ResultTest.createThrowResultToString":155,"org.easymock.tests.MockClassControlTest.testHashCode":124,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":208,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":120,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":212,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":152,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":187,"org.easymock.tests2.UsageConstraintsTest.cmpTo":14,"org.easymock.tests2.CompareToTest.testLessThan":66,"org.easymock.tests.DefaultClassInstantiatorTest.object":225,"org.easymock.tests2.CaptureTest.testCaptureFromStub":41,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":76,"org.easymock.tests.UsageTest.unexpectedCallWithArray":135,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":141,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":213,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":64,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":237,"org.easymock.tests2.CaptureTest.testCapture":185,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":91,"org.easymock.tests2.UsageConstraintsTest.constraints":4,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":123,"org.easymock.tests.CapturesMatcherTest.test":186,"org.easymock.tests.UsageStrictMockTest.testVerify":235,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":160,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":105,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":122,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":36,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":200,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":58,"org.easymock.tests.LimitationsTest.abstractClass":230,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":112,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":59,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":175}}]

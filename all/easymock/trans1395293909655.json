[{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:67","sourceCode":"return !(java.util.List<T>.isEmpty())","type":"CtReturnImpl"},"failures":[0,1,2,3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:879","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:785","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[4],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:613","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:84","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,0,3,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:340","sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[139],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[140],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.ConstructorArgs:50","failures":[141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182],"status":-1,"binaryOperator":"(java.lang.Object[].int) != (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:200","sourceCode":"throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[183],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"e":"e"}},{"position":"org.easymock.EasyMock:1149","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[184,28,95,185,186,187,188],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1470","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","type":"CtInvocationImpl"},"failures":[189,190,191],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[14,17,18,52,73,74,75,76,86,192,193,124,194,132,135],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"failures":[11,12,13,23,195],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[141,6,196,197,142,198,199,143,145,150,153,163,169,29,200,30,201,202,31,203,204,32,33,205,34,206,207,208,209,210,211,212,42,213,43,214,215,216,217,181,181,182,182,218,64,65,219,220,72,221,222,115,223,117,224,225,226,227],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:57","failures":[],"status":0,"binaryOperator":"(((this.java.lang.Object) != null) && (this.java.lang.Object.equals(org.easymock.internal.matchers.Equals.java.lang.Object)))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[228,229],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[141,230,6,231],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:98","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[141,6,196,197,142,198,199,143,145,150,153,163,169,29,200,30,201,202,31,203,204,32,33,205,34,206,207,232,208,209,210,211,212,42,213,43,214,215,216,217,181,181,182,182,218,64,65,219,220,72,221,222,115,223,117,224,225,226,227],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[141,230,6,231],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:85","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:79","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Double>(double))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:142","failures":[233],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (int)","type":"CtReturnImpl"},"failures":[52,53,234,135,136],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[36,38,2,235,189,236,237,190,238,191,239],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[5,141,230,6,7,8,9,10,258,11,259,260,261,262,12,13,263,264,265,15,16,184,19,266,267,268,269,270,271,20,272,21,273,274,22,23,196,197,142,198,275,199,143,145,150,153,163,169,24,25,26,27,28,276,29,202,31,203,204,36,37,38,277,39,40,41,0,278,2,3,208,279,210,211,212,213,43,215,280,281,235,189,282,236,283,237,190,4,284,285,286,287,288,289,290,229,291,191,292,293,294,239,295,296,45,46,217,297,47,298,299,300,301,302,303,49,50,53,54,55,56,57,304,305,58,306,59,60,62,63,181,182,218,64,65,307,308,309,66,67,68,69,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,72,333,77,78,79,80,81,82,334,335,336,337,338,221,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,100,359,360,361,362,363,364,365,366,367,104,105,106,107,108,110,111,112,113,114,222,115,117,234,192,193,368,369,370,371,372,373,125,126,127,128,129,374,186,187,188,131,133,136,137,138,225,226,227],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[298,375,376,300,305,377,378],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"answer"}},{"position":"org.easymock.internal.ReflectionUtils:107","failures":[141,6,379,380,196,197,142,198,199,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,29,200,30,201,381,202,31,203,204,175,32,33,205,34,207,208,209,210,211,212,42,213,382,383,43,214,215,216,384,385,45,46,217,181,181,182,182,218,64,65,219,220,72,87,386,387,388,389,390,391,392,393,221,394,395,396,222,115,223,233,116,117,118,119,120,121,122,123,397,398,224,225,226,227,399],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1163","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:210","failures":[141,145,146,175,382,181,181,182,182],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMockSupport:480","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1373","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1928","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"failures":[400,213,285],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[36,38,2,235,189,236,237,190,238,191,239],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[142,143,144,146,401,172,173,174,176,177,178,179,402,403,404,405,406,407],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnValue":"arg","returnedType":"paramType"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"failures":[259,260,12,13,263,264,265,408,409,184,19,266,267,270,271,21,274,23,276,202,37,277,410,41,0,278,2,3,211,215,280,281,235,189,282,236,283,237,190,4,284,286,287,288,289,290,229,291,191,292,293,294,239,295,296,299,300,301,302,50,52,53,305,218,307,308,309,310,311,312,313,314,317,319,320,321,322,324,325,326,327,329,330,331,332,411,333,412,413,334,335,336,337,338,339,340,343,345,346,347,348,350,351,352,353,355,356,357,358,414,415,416,417,418,419,360,361,366,234,192,374,186,187,188,133,135,136],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":189,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":411,"org.easymock.tests2.UsageTest.argumentsOrdered":18,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":273,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":15,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":57,"org.easymock.tests2.DelegateToTest.testReturnException":298,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":363,"org.easymock.tests.MockingTest.testPartialClassMocking":225,"org.easymock.tests.MockClassControlTest.testToString":118,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":385,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":157,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":153,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":339,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":262,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":4,"org.easymock.tests2.UsageTest.wrongArguments":14,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":310,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":248,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":68,"org.easymock.samples.ExampleTest.answerVsDelegate":305,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":220,"org.easymock.tests2.UsageConstraintsTest.testNull":236,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":210,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":123,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":21,"org.easymock.tests2.CaptureTest.testPrimitive":277,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":312,"org.easymock.tests.UsageTest.moreThanOneArgument":333,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":358,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":279,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":370,"org.easymock.tests.UsageTest.argumentsOrdered":76,"org.easymock.tests.UsageVarargTest.varargIntAccepted":106,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":334,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":29,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":256,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":31,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":377,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":338,"org.easymock.tests.ReplayStateInvalidUsageTest.times":96,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":5,"org.easymock.tests2.AnswerTest.answer":258,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":238,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":185,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":10,"org.easymock.tests2.CaptureTest.testAnd":36,"org.easymock.tests2.UsageTest.strictResetToDefault":263,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":173,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":43,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":369,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":187,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":269,"org.easymock.tests2.DelegateToTest.testDelegate":300,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":354,"org.easymock.tests.LimitationsTest.mockFinalMethod":394,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":366,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":129,"org.easymock.tests2.CaptureTest.testCapture1_2446744":410,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":352,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":8,"org.easymock.tests.UsageThrowableTest.throwError":414,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":90,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":257,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":372,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":183,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":171,"org.easymock.samples.PartialClassMockTest.testGetArea":218,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":91,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":335,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":158,"org.easymock.tests2.UsageTest.niceToStrict":265,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":340,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":407,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":202,"org.easymock.tests2.MockBuilderTest.testCreateMock":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":166,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":245,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":348,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":270,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":77,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":66,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":404,"org.easymock.tests.UsageOverloadedMethodTest.overloading":308,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":168,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":162,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":288,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":324,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":287,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":278,"org.easymock.tests2.EasyMockSupportClassTest.testAll":150,"org.easymock.tests.MockClassControlTest.testEquals":122,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":115,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":356,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":206,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":127,"org.easymock.tests2.CaptureTest.testCaptureAll":37,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":9,"org.easymock.tests2.UsageConstraintsTest.testMatches":289,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":88,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":371,"org.easymock.samples.ExampleTest.voteForRemovals":60,"org.easymock.tests.UsageVarargTest.allKinds":114,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":234,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":128,"org.easymock.samples.BasicClassMockTest.testPrintContent":65,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":418,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":48,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":253,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":367,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":376,"org.easymock.tests2.UsageConstraintsTest.greaterThan":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":151,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":186,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":216,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":391,"org.easymock.samples.ExampleTest.voteForRemoval":58,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":384,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":302,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":42,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":72,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":175,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":267,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":148,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":362,"org.easymock.tests2.CaptureTest.testCaptureFirst":3,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":268,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":124,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":320,"org.easymock.tests2.UsageTest.moreThanOneArgument":264,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":33,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":113,"org.easymock.tests.GenericTest.testBridgedEquals":233,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":405,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":402,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":84,"org.easymock.tests.UsageExpectAndReturnTest.longType":316,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":125,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":19,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":205,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":357,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":44,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":355,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":368,"org.easymock.tests.UsageCallCountTest.tooManyCalls":85,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":167,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":321,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":247,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":344,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":417,"org.easymock.tests.MockingTest.testNiceClassMocking":399,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":197,"org.easymock.tests.MockingTest.testClassMocking":398,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":78,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":200,"org.easymock.tests2.UsageConstraintsTest.testContains":286,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":217,"org.easymock.tests2.UsageConstraintsTest.testFind":282,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":309,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":130,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":13,"org.easymock.tests.UsageExpectAndReturnTest.object":323,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":213,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":246,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":272,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":108,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":103,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":406,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":180,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":307,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":146,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":104,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":329,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":378,"org.easymock.tests.MockClassControlTest.testHashCode":121,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":249,"org.easymock.tests2.EasyMockSupportTest.testVerify":22,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":160,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":7,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":35,"org.easymock.tests.UsageVarargTest.varargCharAccepted":107,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":49,"org.easymock.tests2.UsageTest.openCallCountByLastCall":408,"org.easymock.tests.DefaultClassInstantiatorTest.object":87,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":274,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":101,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":161,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":346,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":415,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":242,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":120,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":214,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":345,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":330,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":169,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":119,"org.easymock.tests2.UsageTest.resumeIfFailure":184,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":219,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":365,"org.easymock.tests2.StubTest.stubWithReturnValue":276,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":174,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":294,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":322,"org.easymock.tests2.SerializationTest.testAllMockedMethod":6,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":140,"org.easymock.samples.SupportTest.voteForRemovals":56,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":396,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":251,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":351,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":231,"org.easymock.tests.UsageExpectAndThrowTest.object":349,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":292,"org.easymock.tests2.DelegateToTest.testWrongClass":375,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":360,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":361,"org.easymock.samples.ConstructorCalledMockTest.testTax":181,"org.easymock.tests.UsageStrictMockTest.range":135,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":20,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":196,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":403,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":350,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":147,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":98,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":75,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":67,"org.easymock.tests2.CaptureTest.testCaptureNone":0,"org.easymock.tests.UsageUnorderedTest.message":86,"org.easymock.tests.UsageVerifyTest.twoReturns":193,"org.easymock.tests.UsageVarargTest.varargByteAccepted":112,"org.easymock.tests2.ThreadingTest.testThreadSafe":301,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":164,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":82,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":64,"org.easymock.tests2.CaptureTest.testCapture_2617107":38,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":71,"org.easymock.tests2.UsageConstraintsTest.any":284,"org.easymock.tests2.StubTest.stub":28,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":95,"org.easymock.tests.UsageExpectAndThrowTest.longType":342,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":364,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":389,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":94,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":51,"org.easymock.tests2.SerializationTest.testClass":141,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":47,"org.easymock.tests.LimitationsTest.mockNativeMethod":221,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":223,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":332,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":232,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":241,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":54,"org.easymock.tests2.NameTest.nameForMocksControl":27,"org.easymock.tests2.MockedExceptionTest.testMockedException":46,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":152,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":413,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":227,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":343,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":208,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":204,"org.easymock.tests.MockingTest.testNicePartialClassMocking":226,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":212,"org.easymock.tests2.CompareToTest.testCompareEqual":400,"org.easymock.tests2.CaptureTest.testCaptureLast":41,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":190,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":143,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":293,"org.easymock.tests.MockingTest.testTwoMocks":224,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":144,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":313,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":347,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":17,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":295,"org.easymock.samples.ExampleTest.removeNonExistingDocument":61,"org.easymock.tests.UsageStrictMockTest.differentMethods":136,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":92,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":244,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":250,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":387,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":139,"org.easymock.tests2.MockBuilderTest.testCreateMockString":34,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":154,"org.easymock.tests.UsageExpectAndThrowTest.floatType":341,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":290,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":149,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":11,"org.easymock.tests.UsageVerifyTest.twoThrows":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":163,"org.easymock.samples.ExampleTest.voteAgainstRemoval":306,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":215,"org.easymock.tests.LimitationsTest.privateConstructor":393,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":179,"org.easymock.tests2.UsageConstraintsTest.testNotNull":239,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":419,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":45,"org.easymock.tests2.UsageTest.defaultResetToNice":16,"org.easymock.samples.ExampleTest.voteAgainstRemovals":304,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":328,"org.easymock.tests.UsageVarargTest.differentLength":109,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":240,"org.easymock.tests2.CallbackTest.callback":23,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":382,"org.easymock.tests.UsageTest.openCallCountByLastCall":412,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":280,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":70,"org.easymock.tests.UsageCallCountTest.tooFewCalls":80,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":198,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":69,"org.easymock.tests.UsageThrowableTest.throwCheckedException":416,"org.easymock.tests.MockingTest.testStrictClassMocking":397,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":199,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":142,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":97,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":275,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":260,"org.easymock.tests.ObjectMethodsTest.testHashCode":102,"org.easymock.tests2.NameTest.nameForNiceMock":26,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":303,"org.easymock.tests2.DependencyTest.testInterfaceMocking":261,"org.easymock.samples.ExampleTest.addDocument":59,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":165,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":170,"org.easymock.tests2.DelegateToTest.testStubDelegate":299,"org.easymock.tests2.AnswerTest.stubAnswer":259,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":133,"org.easymock.tests.UsageVarargTest.varargLongAccepted":111,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":137,"org.easymock.tests.UsageExpectAndReturnTest.floatType":315,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":331,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":145,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":182,"org.easymock.tests.UsageThrowableTest.noUpperLimit":100,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":255,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":291,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":281,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":379,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":39,"org.easymock.tests2.SerializationTest.test":230,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":386,"org.easymock.tests2.UsageConstraintsTest.testSame":283,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":314,"org.easymock.samples.SupportTest.addDocument":55,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":93,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":155,"org.easymock.tests.GenericTest.testPackageScope":222,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":254,"org.easymock.tests2.NameTest.nameForMock":24,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":325,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":177,"org.easymock.tests2.UsageStrictMockTest.differentMethods":53,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":383,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":317,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":353,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":188,"org.easymock.tests2.MockedExceptionTest.testRealException":297,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":195,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":99,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":311,"org.easymock.tests2.NameTest.nameForStrictMock":25,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":381,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":401,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":12,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":211,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":380,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":388,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":191,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":30,"org.easymock.tests2.UsageStrictMockTest.range":52,"org.easymock.tests2.UsageConstraintsTest.lessThan":296,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":252,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":266,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":159,"org.easymock.tests2.CaptureTest.testCaptureRightOne":2,"org.easymock.tests2.UsageConstraintsTest.testOr":237,"org.easymock.tests.UsageRangeTest.combination":374,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":209,"org.easymock.tests.UsageTest.wrongArguments":74,"org.easymock.tests2.MockBuilderTest.testWithConstructor":172,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":156,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":117,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":318,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":326,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":390,"org.easymock.tests.UsageVarargTest.varargShortAccepted":110,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":83,"org.easymock.tests2.UsageConstraintsTest.cmpTo":285,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":409,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":89,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":201,"org.easymock.tests.UsageTest.unexpectedCallWithArray":73,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":132,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":81,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":176,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":327,"org.easymock.tests2.CaptureTest.testCapture":1,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":134,"org.easymock.tests2.UsageConstraintsTest.constraints":235,"org.easymock.samples.ExampleTest.addAndChangeDocument":62,"org.easymock.tests.UsageStrictMockTest.testVerify":138,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":63,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":131,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":126,"org.easymock.tests2.CompareToTest.testGreateThan":228,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":40,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":207,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":336,"org.easymock.tests.LimitationsTest.abstractClass":392,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":319,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":337,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":373,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":105,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":271}}]

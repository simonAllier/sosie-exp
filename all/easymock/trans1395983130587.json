[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","position":"org.easymock.internal.ClassProxyFactory:204","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:117","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ThrowingAnswer() , true)","position":"org.easymock.internal.Result:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ExpectedInvocationAndResult.getResult()","position":"org.easymock.internal.MocksBehavior:67","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"-4214363692271370781L","position":"org.easymock.Capture:33","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-3743894206806704049L","position":"org.easymock.internal.matchers.Any:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[0],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:800","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Range.this(int, int)","position":"org.easymock.internal.Range:32","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Field java.lang.reflect.Field = org.easymock.internal.Injector.org.easymock.internal.Injector.getFieldByName(java.lang.Class<?>, org.easymock.internal.Injection.getQualifier())","position":"org.easymock.internal.Injector:163","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:129","type":"CtInvocationImpl"},"status":-2},{"failures":[1],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.Invocation:105","type":"CtThrowImpl"},"status":-1},{"failures":[2,3],"variableMapping":{"constructorArgs":"constructorArgs","constructor":"constructor"},"name":"add","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","position":"org.easymock.internal.MockBuilder:120","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","position":"org.easymock.internal.MockBuilder:132","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException)","position":"org.easymock.internal.ClassProxyFactory:210","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:203","type":"CtReturnImpl"},"status":-2},{"failures":[4,5,6,7,8,9,10,11],"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","position":"org.easymock.internal.RecordState:117","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:163","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:267","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:154","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"))","position":"org.easymock.internal.BridgeMethodResolver:94","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:141","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1163","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.InjectionTarget:56","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.replay()","position":"org.easymock.internal.MocksControl:212","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:267","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock)","position":"org.easymock.internal.Injector:112","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setCallbackType(org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.getClass())","position":"org.easymock.internal.ClassProxyFactory:171","type":"CtInvocationImpl"},"status":-2},{"failures":[4,5,12,6,13,14,15,16,17,18,19,20,21,22,23,2,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,0,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,7,8,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,9,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,10,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,11,192,193,194,195,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","position":"org.easymock.internal.LastControl:126","type":"CtInvocationImpl"},"status":-1},{"failures":[],"binaryOperator":"(int <= (int))","name":"removeConditional","position":"org.easymock.internal.Range:79","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?>[][int] = java.lang.Class<?>","position":"org.easymock.internal.MethodSerializationWrapper:70","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:107","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"((org.easymock.internal.matchers.Equals.java.lang.Object) == null)","name":"removeConditional","position":"org.easymock.internal.matchers.Equals:57","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T> , this)","position":"org.easymock.EasyMockSupport:497","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","position":"org.easymock.EasyMock:480","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","position":"org.easymock.internal.ReplayState:48","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"]\")","position":"org.easymock.internal.ArgumentToString:52","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return ","position":"org.easymock.internal.ClassProxyFactory:111","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    if (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().equals(org.easymock.internal.ExpectedInvocation)) {\n        org.easymock.internal.ExpectedInvocationAndResults.getResults().add(org.easymock.internal.Result, org.easymock.internal.Range);\n        return ;\n    } \n}","position":"org.easymock.internal.UnorderedBehavior:38","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"or(\")","position":"org.easymock.internal.matchers.Or:47","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.Result:63","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:48","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","position":"org.easymock.internal.LastControl:133","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory","position":"org.easymock.internal.ClassProxyFactory:225","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(java.lang.Object))","position":"org.easymock.internal.ClassProxyFactory:282","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1790","type":"CtReturnImpl"},"status":-2},{"failures":[35],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Short>(short))","position":"org.easymock.EasyMock:785","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)","position":"org.easymock.internal.Injector:134","type":"CtThrowImpl"},"status":0},{"failures":[297,298,299,300,4,301,302,5,12,6,303,304,305,13,306,307,14,308,309,310,311,312,313,314,315,316,15,317,318,319,320,321,16,322,323,17,324,18,19,325,20,21,22,326,23,327,2,24,25,26,27,28,29,328,30,31,32,33,34,35,329,36,37,38,39,40,41,42,43,44,45,46,47,48,0,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,330,66,331,332,67,68,69,70,333,334,7,335,8,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,336,337,338,339,340,102,341,342,343,344,345,346,103,104,105,106,107,9,108,109,110,111,347,348,349,350,351,112,352,353,354,355,356,357,358,359,113,114,115,116,360,361,117,118,119,120,3,121,122,123,124,125,126,127,128,129,130,362,363,364,365,366,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,10,147,148,149,150,367,151,152,152,153,153,154,155,156,157,158,368,369,370,371,372,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,373,374,375,376,377,378,191,11,379,192,193,380,381,194,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,196,197,198,199,200,201,202,203,204,205,206,409,410,411,207,208,412,209,413,414,415,210,211,416,417,418,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,419,420,228,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,229,230,231,232,233,234,235,236,436,237,238,239,240,241,437,438,439,440,441,442,443,444,242,243,244,245,246,445,446,447,448,449,450,451,452,453,247,248,249,250,454,455,456,457,458,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,459,460,461,271,462,463,464,465,466,467,468,272,273,274,275,276,277,278,279,280,281,469,282,283,470,284,285,471,472,286,287,288,473,289,290,291,292,293,294,295,296],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","position":"org.easymock.internal.ReflectionUtils:30","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:191","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:141","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory","position":"org.easymock.internal.ClassProxyFactory:225","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(java.lang.Object))","position":"org.easymock.internal.ClassProxyFactory:282","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"length"},"name":"replace","transplant":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:180","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.internal.BridgeMethodResolver:195","type":"CtLocalVariableImpl"},"status":-2},{"failures":[368,382],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","position":"org.easymock.Capture:80","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","position":"org.easymock.internal.RecordState:263","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"currentPosition":"length","callCount":"length"},"name":"replace","transplant":{"sourceCode":"if (int > (this.int)) {\n    return true;\n} ","position":"org.easymock.internal.Results:56","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Type[].int) != (java.lang.Class<?>[].int)) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:190","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.AssertionError","position":"org.easymock.internal.AssertionErrorWrapper:32","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:50","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (java.lang.Class<?> != null) {\n    for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n        final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n        if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n            java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:381","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","position":"org.easymock.internal.RecordState:310","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"shouldBeUsedInOneThread":"value","state":"state"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","position":"org.easymock.internal.MocksControl:248","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","position":"org.easymock.internal.MocksControl:232","type":"CtInvocationImpl"},"status":0},{"failures":[56,134,140,141,194,474,231,234,245,246,271,274,275,278,279],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","position":"org.easymock.internal.ArgumentToString:93","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))","position":"org.easymock.internal.AndroidClassProxyFactory:97","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","position":"org.easymock.internal.ObjectMethodsFilter:45","type":"CtThrowImpl"},"status":-2},{"failures":[135],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","position":"org.easymock.EasyMock:2024","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","position":"org.easymock.EasyMock:2066","type":"CtForEachImpl"},"status":-1},{"failures":[],"binaryOperator":"(\"Delegation to object [\" + java.lang.Object)","name":"math","position":"org.easymock.internal.DelegatingAnswer:86","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:261","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1816","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\", \")","position":"org.easymock.internal.ExpectedInvocation:109","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:986","type":"CtInvocationImpl"},"status":-2},{"failures":[14,77,79,80,83],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.IMocksControl>.add(org.easymock.IMocksControl)","position":"org.easymock.EasyMockSupport:531","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","position":"org.easymock.internal.MockBuilder:164","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","position":"org.easymock.internal.Range:37","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.matchers.And:54","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while ((int) < (java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    final org.easymock.internal.Result org.easymock.internal.Result = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).addActual(org.easymock.internal.Invocation);\n    if (org.easymock.internal.Result != null) {\n        return org.easymock.internal.Result;\n    } \n    if (!(java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).verify())) {\n        break;\n    } \n    (int)++;\n}","position":"org.easymock.internal.MocksBehavior:86","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.InjectionTarget:60","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[int + int]","position":"org.easymock.internal.Invocation:62","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = this.java.lang.Object[][int]","position":"org.easymock.internal.Invocation:118","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.InputStream java.io.InputStream = org.easymock.internal.EasyMockProperties.getClassLoader().getResourceAsStream(java.lang.String)","position":"org.easymock.internal.EasyMockProperties:61","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return true","position":"org.easymock.internal.BridgeMethodResolver:142","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Class.java.lang.Class.forName(\"dalvik.system.PathClassLoader\");\n    org.easymock.internal.AndroidSupport.boolean = true;\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    org.easymock.internal.AndroidSupport.boolean = false;\n}","position":"org.easymock.internal.AndroidSupport:25","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","position":"org.easymock.internal.MocksControl:334","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = true","position":"org.easymock.internal.AndroidSupport:27","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"entry":"entry"},"name":"add","transplant":{"sourceCode":"final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount()","position":"org.easymock.internal.UnorderedBehavior:86","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))","position":"org.easymock.internal.UnorderedBehavior:87","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:108","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((this.java.lang.Object[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:114","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","position":"org.easymock.internal.EasyMockProperties:63","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:1064","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n    java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:384","type":"CtIfImpl"},"status":0},{"failures":[13,14,15,16,17,2,25,59,60,62,63,64,65,66,67,68,69,70,73,115,475,116,360,117,118,119,120,121,122,476,123,124,125,126,127,129,130,477,478,479,144,145,152,152,153,153,154,373,376,191,411,207,208,209,228,438,284,285,471],"variableMapping":{"result":"result"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","position":"org.easymock.internal.ReflectionUtils:96","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:54","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.verify()","position":"org.easymock.internal.ReplayState:73","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Constructor<?>","position":"org.easymock.ConstructorArgs:101","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMock:500","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"constructor":"constructor"},"name":"add","transplant":{"sourceCode":"if ((this.java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:235","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:138","type":"CtTryImpl"},"status":0},{"failures":[45],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1348","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1408","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","position":"org.easymock.internal.ArgumentToString:89","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Class<?>.getConstructors()[0]","position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.Class<?>.getConstructor(new java.lang.Class[0]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    if ((java.lang.Class<?>.getConstructors().int) == 0) {\n        throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n    } \n    return java.lang.Class<?>.getConstructors()[0];\n}","position":"org.easymock.internal.DefaultClassInstantiator:89","type":"CtTryImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","position":"org.easymock.internal.RecordState:234","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())))","position":"org.easymock.internal.DefaultClassInstantiator:193","type":"CtThrowImpl"},"status":-2},{"failures":[],"binaryOperator":"((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\")","name":"math","position":"org.easymock.internal.ExpectedInvocation:48","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","position":"org.easymock.internal.matchers.Captures:52","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()))","position":"org.easymock.internal.MocksBehavior:98","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:354","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[int + int]","position":"org.easymock.internal.Invocation:62","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.this(java.lang.Class<T>, null)","position":"org.easymock.internal.MockBuilder:50","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","position":"org.easymock.internal.InjectionPlan:52","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","position":"org.easymock.EasyMock:1518","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:252","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.Method.getGenericParameterTypes()","position":"org.easymock.internal.BridgeMethodResolver:188","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = org.easymock.internal.Injector.org.easymock.internal.Injector.injectByName(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan.getQualifiedInjections())","position":"org.easymock.internal.Injector:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:267","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return ","position":"org.easymock.internal.ClassProxyFactory:111","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:289","type":"CtIfImpl"},"status":-2},{"failures":[327,26,27,28,29,30,31,32,33,34,35,329,36,37,38,39,40,41,42,43,44,45,46,47,48,0,49,50,51,54,66,7,8,88,89,90,91,92,93,94,95,96,97,98,99,100,101,106,210,211,212,213,214,215,216,221,223,224,225,226,227,231,232,242,243,271,296],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","position":"org.easymock.internal.ReplayState:68","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","position":"org.easymock.EasyMock:2106","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.Result(new DelegatingAnswer() , false)","position":"org.easymock.internal.Result:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.internal.Result>.get(int)","position":"org.easymock.internal.Results:69","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.Injector:81","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","position":"org.easymock.internal.RecordState:292","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","position":"org.easymock.internal.MocksControl:131","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1176","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"args":"args","org.easymock.internal.Invocation.NO_ARGS":"args"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object[] == null ? java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:57","type":"CtReturnImpl"},"status":0},{"failures":[297,298,303,304,305,13,306,307,14,308,309,310,311,312,313,314,315,316,15,317,318,319,320,321,16,322,323,17,324,2,25,59,60,62,63,64,65,66,331,332,67,68,69,70,333,334,71,72,73,115,116,360,361,117,118,119,120,3,121,122,123,124,125,126,127,129,130,144,145,152,152,153,153,154,373,376,191,409,410,411,207,208,209,415,419,420,228,421,437,438,439,440,441,442,443,444,450,462,463,464,465,466,467,468,470,284,285,471,472],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1444","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:59","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1177","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"status":-2},{"failures":[21],"variableMapping":{"value":"lastInvocationUsed","checkOrder":"lastInvocationUsed"},"name":"replace","transplant":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:177","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:256","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:233","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:68","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","position":"org.easymock.internal.MethodSerializationWrapper:69","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:90","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-8447010713532143168L","position":"org.easymock.internal.matchers.CompareTo:30","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{"count":"result","maximum":"result","minimum":"result"},"name":"add","transplant":{"sourceCode":"return (int <= int) && (int <= int)","position":"org.easymock.internal.Range:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:415","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Double>(double))","position":"org.easymock.EasyMock:733","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","position":"org.easymock.internal.RecordState:139","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","position":"org.easymock.EasyMock:1092","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new org.easymock.CaptureType()","position":"org.easymock.CaptureType:30","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.easymock.EasyMock:1305","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion()","position":"org.easymock.internal.ClassInstantiatorFactory:52","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int));\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:342","type":"CtTryImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"obj":"obj"},"name":"add","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.ClassProxyFactory:77","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:90","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object)","position":"org.easymock.internal.ObjectMethodsFilter:89","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","position":"org.easymock.internal.ObjectMethodsFilter:88","type":"CtIfImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":199,"org.easymock.tests2.MockedExceptionTest.testRealException":74,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":230,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":308,"org.easymock.tests.UsageVarargTest.varargIntAccepted":288,"org.easymock.tests.LimitationsTest.mockFinalMethod":421,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":26,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":17,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":440,"org.easymock.tests.UsageCallCountTest.tooManyCalls":165,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":318,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":427,"org.easymock.tests2.StubTest.stubWithReturnValue":19,"org.easymock.tests.UsageVarargTest.allKinds":296,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":323,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":250,"org.easymock.tests2.CaptureTest.testCaptureAll":89,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":210,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":42,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":477,"org.easymock.tests2.CaptureTest.testAnd":88,"org.easymock.tests.UsageStrictMockTest.testVerify":436,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":259,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":192,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":373,"org.easymock.tests.MockClassControlTest.testToString":439,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":124,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":434,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":80,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":184,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":267,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":112,"org.easymock.tests.UsageThrowableTest.throwError":196,"org.easymock.samples.SupportTest.addDocument":155,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":227,"org.easymock.tests2.StubTest.stub":18,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":455,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":428,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":347,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":215,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":330,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":223,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":406,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":190,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":334,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":479,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":408,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":333,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":295,"org.easymock.tests.UsageExpectAndThrowTest.object":261,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":105,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":320,"org.easymock.tests2.UsageTest.moreThanOneArgument":133,"org.easymock.tests.UsageVarargTest.varargByteAccepted":294,"org.easymock.tests.MockClassControlTest.testEquals":443,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":478,"org.easymock.tests.UsageTest.wrongArguments":275,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":169,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":448,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":351,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":262,"org.easymock.tests2.UsageTest.defaultResetToNice":139,"org.easymock.tests.MockingTest.testNiceClassMocking":415,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":73,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":106,"org.easymock.tests.InvocationTest.testHashCode":1,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":120,"org.easymock.tests2.MockBuilderTest.testCreateMock":121,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":107,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":475,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":424,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":429,"org.easymock.samples.ExampleTest.voteAgainstRemovals":146,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":52,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":350,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":379,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":282,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":204,"org.easymock.tests2.CaptureTest.testCapture1_2446744":92,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":326,"org.easymock.samples.ExampleTest.voteForRemoval":147,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":299,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":162,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":381,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":418,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":236,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":247,"org.easymock.tests2.CaptureTest.testCaptureRightOne":98,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":177,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":425,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":302,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":64,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":469,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":426,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":457,"org.easymock.tests2.UsageConstraintsTest.cmpTo":37,"org.easymock.tests.MockTypeTest.fromEasyMockClass":374,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":466,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":355,"org.easymock.tests2.MockedExceptionTest.testMockedException":72,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":0,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":239,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":270,"org.easymock.samples.PartialClassMockTest.testGetArea":154,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":244,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":392,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":206,"org.easymock.samples.ConstructorCalledMockTest.testTax":152,"org.easymock.tests2.UsageTest.argumentsOrdered":141,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":301,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":300,"org.easymock.samples.ExampleTest.removeNonExistingDocument":367,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":6,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":464,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":423,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":176,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":166,"org.easymock.tests2.AnswerTest.answer":4,"org.easymock.tests.MockingTest.testNicePartialClassMocking":208,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":356,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":232,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":216,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":241,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":456,"org.easymock.tests.UsageExpectAndThrowTest.longType":254,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":378,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":268,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":15,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":82,"org.easymock.tests.UsageTest.argumentsOrdered":279,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":29,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":119,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":189,"org.easymock.tests2.MockBuilderTest.testCreateMockString":123,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":225,"org.easymock.tests2.NameTest.nameForStrictMock":364,"org.easymock.tests2.CaptureTest.testCaptureNone":96,"org.easymock.tests2.SerializationTest.testClass":2,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":391,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":405,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":450,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":144,"org.easymock.tests.MockingTest.testInterfaceMocking":412,"org.easymock.tests2.EasyMockSupportTest.testVerify":87,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":446,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":353,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":118,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":256,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":414,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":48,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":131,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":122,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":188,"org.easymock.tests.GenericTest.testBridgedEquals":472,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":35,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":128,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":59,"org.easymock.tests2.UsageConstraintsTest.testOr":33,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":104,"org.easymock.tests.MockClassControlTest.testHashCode":442,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":337,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":362,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":183,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":203,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":211,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":376,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":238,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":125,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":322,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":306,"org.easymock.tests2.UsageConstraintsTest.testSame":32,"org.easymock.tests2.UsageTest.resumeIfFailure":142,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":369,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":129,"org.easymock.tests.UsageOverloadedMethodTest.overloading":205,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":331,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":377,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":340,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":341,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":313,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":384,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":153,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":285,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":312,"org.easymock.tests.UsageTest.openCallCountByLastCall":276,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":257,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":383,"org.easymock.tests2.NameTest.nameForNiceMock":365,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":431,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":352,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":283,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":237,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":61,"org.easymock.tests2.CaptureTest.testPrimitive":91,"org.easymock.samples.BasicClassMockTest.testPrintContent":145,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":368,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":212,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":67,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":7,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":164,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":372,"org.easymock.tests2.UsageStrictMockTest.differentMethods":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":314,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":77,"org.easymock.tests.MockingTest.testClassMocking":410,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":471,"org.easymock.tests2.CaptureTest.testCaptureLast":95,"org.easymock.tests2.UsageConstraintsTest.equals":328,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":476,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":163,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":252,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":161,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":114,"org.easymock.tests.UsageStrictMockTest.range":234,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":277,"org.easymock.tests.UsageTest.unexpectedCallWithArray":274,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":315,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":388,"org.easymock.samples.ExampleTest.addDocument":149,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":413,"org.easymock.tests2.UsageConstraintsTest.lessThan":51,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":194,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":278,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":11,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":454,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":325,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":397,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":297,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":468,"org.easymock.tests2.UsageStrictMockTest.range":56,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":130,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":168,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":459,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":390,"org.easymock.tests.UsageTest.moreThanOneArgument":273,"org.easymock.tests2.UsageTest.openCallCountByLastCall":137,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":116,"org.easymock.tests.UsageStrictMockTest.differentMethods":235,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":463,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":394,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":298,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":255,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":416,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":171,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":221,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":307,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":66,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":233,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":349,"org.easymock.tests2.DependencyTest.testClassMockingSupport":359,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":266,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":242,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":339,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":158,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":451,"org.easymock.tests2.UsageConstraintsTest.testContains":38,"org.easymock.tests2.UsageConstraintsTest.testFind":30,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":93,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":465,"org.easymock.samples.ExampleTest.addAndChangeDocument":151,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":115,"org.easymock.tests.UsageVarargTest.varargCharAccepted":289,"org.easymock.tests2.CaptureTest.testCaptureFromStub":99,"org.easymock.tests.UsageVerifyTest.twoThrows":245,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":357,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":224,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":290,"org.easymock.tests2.DelegateToTest.testReturnException":20,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":136,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":324,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":86,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":53,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":335,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":470,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":370,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":435,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":467,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":97,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":263,"org.easymock.tests2.UsageConstraintsTest.testMatches":41,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":167,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":395,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":396,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":407,"org.easymock.tests2.UsageConstraintsTest.testNull":31,"org.easymock.tests.LimitationsTest.abstractClass":419,"org.easymock.tests2.EasyMockSupportClassTest.testAll":13,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":191,"org.easymock.tests2.UsageConstraintsTest.greaterThan":43,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":286,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":430,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":45,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":83,"org.easymock.tests.UsageExpectAndReturnTest.object":181,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":58,"org.easymock.tests2.DelegateToTest.testWrongClass":22,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":387,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":258,"org.easymock.samples.ExampleTest.voteAgainstRemoval":148,"org.easymock.tests.CapturesMatcherTest.test":195,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":202,"org.easymock.tests.UsageVarargTest.varargShortAccepted":292,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":458,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":449,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":345,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":214,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":157,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":305,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":437,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":348,"org.easymock.tests2.SerializationTest.testAllMockedMethod":25,"org.easymock.tests2.NameTest.nameForMocksControl":366,"org.easymock.tests.MockingTest.testStrictClassMocking":409,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":226,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":311,"org.easymock.tests2.DelegateToTest.testStubDelegate":21,"org.easymock.tests.LimitationsTest.mockNativeMethod":228,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":417,"org.easymock.tests.UsageUnorderedTest.message":271,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":380,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":399,"org.easymock.samples.ExampleTest.answerVsDelegate":10,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":453,"org.easymock.tests.UsageCallCountTest.tooFewCalls":160,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":180,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":5,"org.easymock.tests.UsageVerifyTest.twoReturns":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":319,"org.easymock.tests2.DependencyTest.testInterfaceMocking":113,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":175,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":260,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":398,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":75,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":218,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":400,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":78,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":111,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":34,"org.easymock.tests.MockingTest.testTwoMocks":411,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":159,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":248,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":71,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":309,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":182,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":126,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":354,"org.easymock.tests.UsageThrowableTest.throwCheckedException":200,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":304,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":404,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":375,"org.easymock.samples.ExampleTest.voteForRemovals":150,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":198,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":40,"org.easymock.tests.ReplayStateInvalidUsageTest.times":432,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":193,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":220,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":310,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":63,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":272,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":385,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":172,"org.easymock.tests2.UsageConstraintsTest.any":36,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":338,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":386,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":179,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":389,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":85,"org.easymock.tests.LimitationsTest.privateConstructor":420,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":8,"org.easymock.tests2.CallbackTest.callback":9,"org.easymock.tests2.NameTest.nameForMock":363,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":393,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":39,"org.easymock.tests.MockNameTest.defaultName":422,"org.easymock.tests2.SerializationTest.test":24,"org.easymock.tests.UsageExpectAndReturnTest.longType":174,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":94,"org.easymock.tests2.CaptureTest.testCaptureFirst":101,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":46,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":461,"org.easymock.tests2.UsageTest.niceToStrict":135,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":217,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":170,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":452,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":229,"org.easymock.tests2.UsageTest.strictResetToDefault":132,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":303,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":69,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":474,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":243,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":251,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":178,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":108,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":65,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":361,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":44,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":62,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":287,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":222,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":209,"org.easymock.tests2.DelegateToTest.testDelegate":23,"org.easymock.tests2.UsageConstraintsTest.testNotNull":49,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":55,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":102,"org.easymock.tests2.CaptureTest.testCapture_2617107":90,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":402,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":433,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":342,"org.easymock.tests2.ThreadingTest.testThreadSafe":103,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":138,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":403,"org.easymock.tests.UsageThrowableTest.noUpperLimit":197,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":473,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":84,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":76,"org.easymock.tests.UsageExpectAndReturnTest.floatType":173,"org.easymock.tests2.UsageTest.wrongArguments":134,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":329,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":110,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":441,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":3,"org.easymock.samples.SupportTest.voteForRemovals":156,"org.easymock.tests.UsageRangeTest.combination":281,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":201,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":316,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":50,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":321,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":346,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":54,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":185,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":265,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":249,"org.easymock.tests.UsageExpectAndThrowTest.floatType":253,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":317,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":60,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":186,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":336,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":332,"org.easymock.tests.UsageTest.exactCallCountByLastCall":280,"org.easymock.tests2.AnswerTest.stubAnswer":12,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":81,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":14,"org.easymock.tests.MockingTest.testPartialClassMocking":207,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":187,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":140,"org.easymock.tests2.UsageConstraintsTest.constraints":28,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":109,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":327,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":240,"org.easymock.tests.UsageVarargTest.varargLongAccepted":293,"org.easymock.tests.ObjectMethodsTest.testHashCode":447,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":68,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":70,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":231,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":269,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":16,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":382,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":360,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":460,"org.easymock.tests2.DependencyTest.testClassMocking":358,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":213,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":444,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":445,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":344,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":79,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":27,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":438,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":117,"org.easymock.tests.DefaultClassInstantiatorTest.object":462,"org.easymock.tests.UsageVarargTest.differentLength":291,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":401,"org.easymock.tests2.CaptureTest.testCapture2_2446744":100,"org.easymock.tests.GenericTest.testPackageScope":284}}]

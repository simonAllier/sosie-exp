[{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[0,1,2,3],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,1,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,154,155,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,2,243,244,245,246,247,248,3,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.Capture:117","sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"failures":[278,274],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:126","failures":[51,151,234,236,237],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:50","failures":[154,155,279,280,281,282,283,284,285,286,287,238,240,288,289,290,291,252,292,293,253,294,295,296,297,298,299,300,301,302,254,303,304,305,306,307,255,308,309,266,270,310],"status":-1,"binaryOperator":"(java.lang.Object[].int) != (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:54","sourceCode":"return java.lang.Object[] == null ? java.lang.Object[] : java.lang.Object[]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:130","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.Invocation.NO_ARGS":"methodArgs","args":"methodArgs"}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:67","sourceCode":"return !(java.util.List<T>.isEmpty())","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[311],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:92","failures":[312,200],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:840","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:53","sourceCode":"return false","type":"CtReturnImpl"},"failures":[206],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:208","sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[110],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:94","failures":[192,193,194,195,196,197,198,199,312,200,209,210,213,214,271,313,314,272,275,276],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Injector:122","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:35","sourceCode":"final java.lang.Object java.lang.Object = org.easymock.internal.matchers.Equals.getExpected()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1039","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:48","failures":[4,5,6,7,8,9,10,13,14,17,315,316,317,318,319,320,321,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,322,323,40,41,42,43,44,45,46,47,48,49,51,52,53,55,56,57,58,59,60,61,324,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,325,88,89,90,91,92,93,99,326,100,101,102,103,104,105,106,327,328,128,130,131,134,135,329,330,331,332,333,334,335,336,337,144,145,146,147,148,149,150,151,338,152,339,340,154,154,155,155,341,156,157,158,160,161,162,163,166,167,342,169,171,172,174,176,177,178,179,180,181,182,183,185,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,343,344,217,218,219,224,225,226,227,345,346,228,229,230,231,232,347,233,348,234,235,236,349,237,238,239,240,241,242,2,243,244,245,246,247,248,3,249,250,252,253,254,255,256,258,260,261,350,263,264,265,266,267,268,269,270,271,313,272,273,278,351,274,275,276,277,352],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:98","failures":[9,10,11,12,15,16,17,353,354,355,356,357,323,358,39,359,360,361,45,50,362,53,54,363,58,59,64,65,66,124,364,365,126,127,128,129,130,131,132,138,139,140,156,158,159,160,366,164,165,166,167,342,171,173,179,189,192,206,347,233,242,245,3,256,257,258,259,260,261,262,266,269],"status":-1,"binaryOperator":"(java.lang.String) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:295","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.EqualsWithDelta:39","sourceCode":"final java.lang.Number java.lang.Number = ((java.lang.Number)(java.lang.Object))","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:2000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:720","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[199],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:51","sourceCode":"public static class MockMethodInterceptor implements java.io.Serializable , net.sf.cglib.proxy.MethodInterceptor {\n    private static final long serialVersionUID = -9054190871232972342L;\n\n    private final java.lang.reflect.InvocationHandler handler;\n\n    private transient java.util.Set<java.lang.reflect.Method> mockedMethods;\n\n    public MockMethodInterceptor(final java.lang.reflect.InvocationHandler handler) {\n        this.java.lang.reflect.InvocationHandler = java.lang.reflect.InvocationHandler;\n    }\n\n    public java.lang.Object intercept(final java.lang.Object obj, java.lang.reflect.Method method, final java.lang.Object[] args, final net.sf.cglib.proxy.MethodProxy proxy) throws java.lang.Throwable {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n            return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n        } \n        if ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) {\n            if (org.easymock.internal.ClassProxyFactory.org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable())) {\n                return java.lang.Object;\n            } \n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n        } \n        if (((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))) {\n            return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[]);\n        } \n        return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n    }\n\n    public void setMockedMethods(final java.lang.reflect.Method... mockedMethods) {\n        this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[]));\n    }\n\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    private void readObject(final java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        java.io.ObjectInputStream.defaultReadObject();\n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()));\n        if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n            return ;\n        } \n        java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size());\n        for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n            try {\n                java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n            } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n                throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n            }\n        }\n    }\n\n    private void writeObject(final java.io.ObjectOutputStream stream) throws java.io.IOException {\n        java.io.ObjectOutputStream.defaultWriteObject();\n        if ((java.util.Set<java.lang.reflect.Method>) == null) {\n            java.io.ObjectOutputStream.writeObject(null);\n            return ;\n        } \n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = new java.util.HashSet<org.easymock.internal.MethodSerializationWrapper>(java.util.Set<java.lang.reflect.Method>.size());\n        for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n            java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n        }\n        java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>);\n    }\n}","type":"CtClassImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:223","failures":[253],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:180","sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:184","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; ++int) {\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n    } \n    if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n        return false;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:593","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[192,198],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1026","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:45","sourceCode":"java.lang.StringBuffer.append(\"[\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[10,11,12,15,16,367,368,369,127,370,371,372,373,158,159,164,165],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:251","sourceCode":"net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:269","sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","type":"CtInvocationImpl"},"failures":[374,354,322,375,376,377,42,43,44,378,379,99,380,326,381,382,383,106,384,119,385,386,387,388,389,390,136,137,138,139,140,141,142,143,149,154,154,155,155,391,392,168,342,393,394,169,170,171,172,282,173,174,175,178,179,181,182,183,184,185,395,396,186,187,188,189,397,398,224,225,226,238,399,240,288,400,401,289,290,291,252,292,293,253,294,295,296,297,298,299,300,301,302,254,303,304,305,306,307,255,308,309,264,265,266,267,269,270],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mockClass":"toMock","this":"enhancer"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1555","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:162","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"failures":[62,402,328,350],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:161","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    return java.lang.reflect.Constructor<T>;\n} ","type":"CtIfImpl"},"failures":[281,282,403,404,405,406,238,240,288],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[182,206],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:106","failures":[374,354,322,377,42,43,44,99,380,326,106,137,149,154,154,155,155,391,392,168,407,342,393,169,170,171,172,173,174,408,175,178,179,181,182,183,184,185,186,187,188,189,226,409,410,411,412,238,399,240,252,253,254,255,264,265,266,267,269,270],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"failures":[413],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[4,5,6,7,8,9,10,12,13,14,15,16,17,315,316,317,318,319,320,321,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,414,415,416,417,418,356,419,420,421,422,423,322,357,38,323,358,424,425,359,360,40,41,377,42,43,44,45,46,47,48,49,50,51,52,362,53,54,55,56,57,363,58,59,60,61,324,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,325,88,89,90,91,92,93,94,99,380,326,100,101,102,103,104,105,106,327,328,126,426,127,128,129,130,131,132,133,134,135,329,330,331,332,333,334,335,336,337,144,145,146,147,148,427,149,428,150,151,338,152,429,339,340,154,154,155,155,391,392,430,341,156,157,158,159,160,366,161,162,163,164,165,166,167,342,169,171,172,174,176,177,178,179,180,181,182,183,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,312,200,201,202,203,204,205,206,207,208,209,210,211,431,212,213,214,215,216,343,344,217,218,219,220,224,225,226,227,345,346,228,229,230,231,232,347,233,348,234,235,236,349,237,238,239,399,240,241,242,2,243,244,245,246,247,248,3,249,250,251,432,433,434,435,252,253,254,255,256,257,436,258,259,260,261,262,350,263,264,265,266,267,268,269,270,271,313,314,272,273,437,438,278,351,274,275,276,277,352],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1952","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MocksBehavior:200","failures":[230],"status":-1,"binaryOperator":"(((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1483","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MocksControl:189","failures":[9,11,12,15,16,17,59,65,66,94,95,96,97,98,120,121,122,123,126,127,129,130,131,156,159,160,366,163,164,165,167,168,170,171,172,174,175,184,186,192,220,221,222,223,233,2,244,245,247,248,256,257,259,260,261],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,414,415,416,417,418,419,420,421,422,423,322,357,38,323,358,424,425,40,41,42,43,44,45,46,47,48,53,56,57,58,59,60,61,324,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,325,88,89,90,91,92,93,94,95,96,97,98,99,380,100,101,102,103,104,105,106,111,120,121,122,123,126,426,127,128,129,130,131,132,133,134,135,137,144,145,146,147,148,150,151,338,152,429,339,340,156,157,158,159,160,366,161,162,163,164,165,166,167,168,169,170,174,175,176,178,179,180,181,182,183,185,186,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,345,346,228,229,230,231,232,347,234,235,236,237,238,239,399,240,432,433,434,435,257,436,258,259,260,261,262,350,263,439,264,265,266,269,270,271,313,314,272,273,437,438,278,351,274,275,276,277,352],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[327],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.Matches:40","failures":[440],"status":-1,"binaryOperator":"((\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":193,"org.easymock.tests2.UsageTest.argumentsOrdered":165,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":9,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":249,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":366,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":428,"org.easymock.tests2.DelegateToTest.testReturnException":234,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":101,"org.easymock.tests.MockingTest.testPartialClassMocking":42,"org.easymock.tests.MockClassControlTest.testToString":138,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":315,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":297,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":18,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":253,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":177,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":403,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":199,"org.easymock.tests2.UsageTest.wrongArguments":159,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":60,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":122,"org.easymock.samples.ExampleTest.answerVsDelegate":151,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":354,"org.easymock.tests2.UsageConstraintsTest.testNull":195,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":181,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":143,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":3,"org.easymock.tests2.CaptureTest.testPrimitive":272,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":63,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":37,"org.easymock.tests.UsageTest.moreThanOneArgument":10,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":180,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":6,"org.easymock.tests.UsageTest.argumentsOrdered":16,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":333,"org.easymock.tests.UsageVarargTest.varargIntAccepted":416,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":402,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":144,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":168,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":170,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":148,"org.easymock.tests.ReplayStateInvalidUsageTest.times":115,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":256,"org.easymock.tests2.AnswerTest.answer":216,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":312,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":223,"org.easymock.tests2.CaptureTest.testAnd":271,"org.easymock.tests2.UsageTest.strictResetToDefault":157,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":186,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":280,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":5,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":47,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":244,"org.easymock.tests2.DelegateToTest.testDelegate":237,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":337,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":33,"org.easymock.tests.LimitationsTest.mockFinalMethod":384,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":104,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":98,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":363,"org.easymock.tests2.CaptureTest.testCapture1_2446744":273,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":31,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":221,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":109,"org.easymock.tests.UsageThrowableTest.throwError":87,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":8,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":285,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":309,"org.easymock.samples.PartialClassMockTest.testGetArea":149,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":110,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":145,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":330,"org.easymock.tests2.UsageTest.niceToStrict":160,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":19,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":298,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":365,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":169,"org.easymock.tests2.MockBuilderTest.testCreateMock":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":305,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":27,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":370,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":245,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":321,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":357,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":120,"org.easymock.tests.UsageOverloadedMethodTest.overloading":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":307,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":52,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":204,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":55,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":78,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":203,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":274,"org.easymock.tests.MockClassControlTest.testEquals":142,"org.easymock.tests2.EasyMockSupportClassTest.testAll":252,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":380,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":35,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":371,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":409,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":96,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":222,"org.easymock.tests2.CaptureTest.testCaptureAll":313,"org.easymock.tests.MockNameTest.defaultName":361,"org.easymock.tests2.UsageConstraintsTest.testMatches":205,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":107,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":7,"org.easymock.samples.ExampleTest.voteForRemovals":339,"org.easymock.tests.UsageVarargTest.allKinds":423,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":64,"org.easymock.samples.BasicClassMockTest.testPrintContent":392,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":97,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":92,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":257,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":105,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":349,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":406,"org.easymock.tests2.UsageConstraintsTest.greaterThan":207,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":292,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":46,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":189,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":390,"org.easymock.samples.ExampleTest.voteForRemoval":338,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":397,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":229,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":184,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":156,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":322,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":282,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":2,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":88,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":290,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":100,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":348,"org.easymock.tests2.CaptureTest.testCaptureFirst":352,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":243,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":167,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":54,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":74,"org.easymock.tests2.UsageTest.moreThanOneArgument":158,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":231,"org.easymock.tests2.CaptureTest.testCapture2_2446744":277,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":174,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":422,"org.easymock.tests.GenericTest.testBridgedEquals":381,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":359,"org.easymock.tests.UsageExpectAndReturnTest.longType":70,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":94,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":241,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":408,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":36,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":431,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":332,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":34,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":4,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":317,"org.easymock.tests.UsageCallCountTest.tooManyCalls":360,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":323,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":306,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":75,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":23,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":91,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":265,"org.easymock.tests.MockingTest.testNiceClassMocking":378,"org.easymock.tests.MockingTest.testClassMocking":376,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":407,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":38,"org.easymock.tests2.UsageConstraintsTest.testContains":202,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":226,"org.easymock.tests2.UsageConstraintsTest.testFind":194,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":57,"org.easymock.tests.MockTypeTest.fromEasyMockClass":353,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":126,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":346,"org.easymock.tests.UsageExpectAndReturnTest.object":77,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":185,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":248,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":418,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":404,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":1,"org.easymock.tests.UsageTest.exactCallCountByLastCall":17,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":287,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":40,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":334,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":369,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":288,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":414,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":83,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":51,"org.easymock.tests.MockClassControlTest.testHashCode":141,"org.easymock.tests2.EasyMockSupportTest.testVerify":251,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":300,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":335,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":49,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":320,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":220,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":439,"org.easymock.tests.UsageVarargTest.varargCharAccepted":417,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":436,"org.easymock.tests2.UsageTest.openCallCountByLastCall":161,"org.easymock.tests.DefaultClassInstantiatorTest.object":119,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":250,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":319,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":124,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":25,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":301,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":412,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":89,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":187,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":140,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":24,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":84,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":316,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":139,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":255,"org.easymock.tests2.UsageTest.resumeIfFailure":166,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":374,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":103,"org.easymock.tests2.StubTest.stubWithReturnValue":263,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":281,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":76,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":212,"org.easymock.tests2.SerializationTest.testAllMockedMethod":399,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":327,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":311,"org.easymock.samples.SupportTest.voteForRemovals":341,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":372,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":379,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":30,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":328,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":343,"org.easymock.tests.UsageExpectAndThrowTest.object":28,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":210,"org.easymock.tests2.DelegateToTest.testWrongClass":236,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":134,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":135,"org.easymock.samples.ConstructorCalledMockTest.testTax":154,"org.easymock.tests.UsageStrictMockTest.range":130,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":247,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":264,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":29,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":171,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":117,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":15,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":289,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":121,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":367,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":331,"org.easymock.tests2.CaptureTest.testCaptureNone":351,"org.easymock.tests.UsageUnorderedTest.message":59,"org.easymock.tests.UsageVerifyTest.twoReturns":66,"org.easymock.tests.UsageVarargTest.varargByteAccepted":421,"org.easymock.tests2.ThreadingTest.testThreadSafe":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":303,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":425,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":391,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":364,"org.easymock.tests2.CaptureTest.testCapture_2617107":314,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":373,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":413,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":62,"org.easymock.tests2.UsageConstraintsTest.any":200,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":114,"org.easymock.tests2.StubTest.stub":350,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":318,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":102,"org.easymock.tests.UsageExpectAndThrowTest.longType":21,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":388,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":113,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":259,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":233,"org.easymock.tests2.SerializationTest.testClass":238,"org.easymock.tests.LimitationsTest.mockNativeMethod":106,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":86,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":326,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":411,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":262,"org.easymock.tests2.NameTest.nameForMocksControl":435,"org.easymock.tests2.MockedExceptionTest.testMockedException":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":293,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":14,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":44,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":22,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":178,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":172,"org.easymock.tests.MockingTest.testNicePartialClassMocking":43,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":183,"org.easymock.tests2.CaptureTest.testCaptureLast":278,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":58,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":198,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":270,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":211,"org.easymock.tests.MockingTest.testTwoMocks":377,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":310,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":67,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":26,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":164,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":214,"org.easymock.samples.ExampleTest.removeNonExistingDocument":153,"org.easymock.tests.UsageStrictMockTest.differentMethods":131,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":111,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":386,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":230,"org.easymock.tests2.MockBuilderTest.testCreateMockString":175,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":136,"org.easymock.tests.UsageExpectAndThrowTest.floatType":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":294,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":206,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":291,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":217,"org.easymock.tests.UsageVerifyTest.twoThrows":65,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":254,"org.easymock.samples.ExampleTest.voteAgainstRemoval":152,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":329,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":188,"org.easymock.tests.LimitationsTest.privateConstructor":383,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":286,"org.easymock.tests2.UsageConstraintsTest.testNotNull":213,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":93,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":224,"org.easymock.tests2.UsageTest.defaultResetToNice":163,"org.easymock.samples.ExampleTest.voteAgainstRemovals":150,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":82,"org.easymock.tests.UsageVarargTest.differentLength":356,"org.easymock.tests2.CallbackTest.callback":347,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":395,"org.easymock.tests.UsageTest.openCallCountByLastCall":13,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":190,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":324,"org.easymock.tests.UsageCallCountTest.tooFewCalls":358,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":267,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":123,"org.easymock.tests.UsageThrowableTest.throwCheckedException":90,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":368,"org.easymock.tests.MockingTest.testStrictClassMocking":375,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":41,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":269,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":266,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":116,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":268,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":219,"org.easymock.tests.ObjectMethodsTest.testHashCode":125,"org.easymock.tests2.ConstraintsToStringTest.matchesToString":440,"org.easymock.tests2.NameTest.nameForNiceMock":434,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":232,"org.easymock.tests2.DependencyTest.testInterfaceMocking":176,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":405,"org.easymock.samples.ExampleTest.addDocument":429,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":304,"org.easymock.tests2.DelegateToTest.testStubDelegate":235,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":308,"org.easymock.tests2.AnswerTest.stubAnswer":218,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":128,"org.easymock.tests.UsageVarargTest.varargLongAccepted":420,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":132,"org.easymock.tests.UsageExpectAndReturnTest.floatType":69,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":85,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":240,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":155,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":208,"org.easymock.tests.UsageThrowableTest.noUpperLimit":325,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":362,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":191,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":400,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":437,"org.easymock.tests2.SerializationTest.test":239,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":385,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":68,"org.easymock.tests2.UsageConstraintsTest.testSame":196,"org.easymock.samples.SupportTest.addDocument":430,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":112,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":295,"org.easymock.tests.GenericTest.testPackageScope":99,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":336,"org.easymock.tests2.NameTest.nameForMock":432,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":79,"org.easymock.tests2.UsageStrictMockTest.differentMethods":261,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":284,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":396,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":71,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":32,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":0,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":48,"org.easymock.tests2.MockedExceptionTest.testRealException":227,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":355,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":258,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":118,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":61,"org.easymock.tests2.NameTest.nameForStrictMock":433,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":394,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":345,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":182,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":401,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":387,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":209,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":342,"org.easymock.tests2.UsageStrictMockTest.range":260,"org.easymock.tests2.UsageConstraintsTest.lessThan":215,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":242,"org.easymock.tests2.CaptureTest.testCaptureRightOne":275,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":299,"org.easymock.tests2.UsageConstraintsTest.testOr":197,"org.easymock.tests.UsageRangeTest.combination":45,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":179,"org.easymock.tests.UsageTest.wrongArguments":12,"org.easymock.tests2.MockBuilderTest.testWithConstructor":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":296,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":137,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":72,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":80,"org.easymock.tests.UsageVarargTest.varargShortAccepted":419,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":389,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":39,"org.easymock.tests2.UsageConstraintsTest.cmpTo":201,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":344,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":162,"org.easymock.tests2.CaptureTest.testCaptureFromStub":276,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":108,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":393,"org.easymock.tests.UsageTest.unexpectedCallWithArray":11,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":127,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":424,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":283,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":81,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":129,"org.easymock.tests2.UsageConstraintsTest.constraints":192,"org.easymock.samples.ExampleTest.addAndChangeDocument":340,"org.easymock.tests.UsageStrictMockTest.testVerify":133,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":427,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":426,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":95,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":438,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":410,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":146,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":73,"org.easymock.tests.LimitationsTest.abstractClass":382,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":147,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":53,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":415,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":246}}]

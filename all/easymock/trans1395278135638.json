[{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[0,1,2,3],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[4,5,6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[34,34,35,35,36,37],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,1,84,85,14,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,34,34,35,35,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,22,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,31,259,260,261,262,263,264,265,266,267,268,269,270,271,32,272,273,274,275,276,277,278,279,280,4,5,33],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lastControl":"control","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:38","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(long.long, java.lang.Long.java.lang.Long)","type":"CtInvocationImpl"},"failures":[281,282,283,284,285,286],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:36","failures":[38,39,40,41,42,287,288,43,289,290,291,292,293,294,295,44,296,45,297,298,46,47,48,49,50,51,299,300,301,302,303,304,305,306,307,308,309,310,311,312,52,313,7,314,8,53,9,54,55,10,315,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,0,1,316,317,84,318,85,14,15,16,86,87,17,18,88,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,89,335,336,337,338,339,90,340,91,92,93,94,95,96,97,98,99,341,342,343,344,345,100,2,101,102,3,103,346,347,348,349,350,351,352,353,354,355,356,357,358,104,105,106,359,360,361,362,363,364,107,365,366,367,108,109,368,110,369,370,371,111,112,113,114,115,116,117,118,119,120,121,372,373,374,375,376,377,378,379,122,123,380,381,382,383,384,385,386,387,388,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,389,390,391,392,393,394,395,396,397,398,399,400,401,154,155,156,157,158,159,160,161,162,402,163,403,164,34,35,165,404,405,406,407,408,166,409,410,411,412,413,167,414,415,416,417,418,419,420,421,168,169,19,422,170,20,171,172,21,173,174,423,424,425,426,427,428,429,175,176,177,178,430,179,180,181,431,182,183,22,23,184,24,185,186,187,25,26,188,189,190,191,192,193,194,195,196,197,198,199,432,433,434,435,436,437,438,439,440,200,441,442,443,201,444,202,445,203,446,447,448,204,449,450,451,452,453,205,454,455,206,456,457,458,459,460,461,462,463,464,207,465,466,467,468,469,208,470,471,209,210,211,212,213,214,472,473,215,37,474,475,216,217,218,476,477,219,220,221,222,223,224,225,478,226,227,228,229,230,231,232,233,234,479,235,236,480,481,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,482,483,484,485,486,487,488,256,489,490,491,492,493,494,495,496,497,498,257,258,31,259,499,260,261,262,263,264,265,500,266,267,268,269,270,271,32,272,273,274,275,276,501,277,278,279,280,4,5,6,33],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:270","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[40,41,42,322],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[38,39,40,41,42,287,288,43,289,290,291,292,293,294,295,44,296,45,297,298,46,47,48,49,50,51,299,300,301,302,303,304,305,306,307,308,309,310,311,312,52,313,7,314,8,53,9,54,55,10,315,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,0,1,316,317,84,318,85,14,15,16,86,87,17,18,88,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,89,335,336,337,338,339,90,340,91,92,93,94,95,96,97,98,99,341,342,343,344,345,100,2,101,102,3,103,346,347,348,349,350,351,352,353,354,355,356,357,358,104,105,106,359,360,361,362,363,364,107,365,366,367,108,109,368,110,369,370,371,111,112,113,114,115,116,117,118,119,120,121,372,373,374,375,376,377,378,379,122,123,380,381,382,383,384,385,386,387,388,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,389,390,391,392,393,394,395,396,397,398,399,400,401,154,155,156,157,158,159,160,161,162,402,163,403,164,34,35,165,404,405,406,407,408,166,409,410,411,412,413,167,414,415,416,417,418,419,420,421,168,169,19,422,170,20,171,172,21,173,174,423,424,425,426,427,428,429,175,176,177,178,430,179,180,181,431,182,183,22,23,184,24,185,186,187,25,26,188,189,190,191,192,193,194,195,196,197,198,199,432,433,434,435,436,437,438,439,440,200,441,442,443,201,444,202,445,203,446,447,448,204,449,450,451,452,453,205,454,455,206,456,457,458,459,460,461,462,463,464,207,465,466,467,468,469,208,470,471,209,210,211,212,213,214,472,473,215,37,474,475,216,217,218,476,477,219,220,221,222,223,224,225,478,226,227,228,229,230,231,232,233,234,479,235,236,480,481,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,482,483,484,485,486,487,488,256,489,490,491,492,493,494,495,496,497,498,257,258,31,259,499,260,261,262,263,264,265,500,266,267,268,269,270,271,32,272,273,274,275,276,501,277,278,279,280,4,5,6,33],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[38,39,287,288,43,289,290,291,44,296,46,47,48,49,50,51,300,302,303,305,308,310,52,7,314,8,53,9,54,55,10,315,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85,14,15,16,86,87,17,18,88,94,95,96,97,98,99,341,342,343,344,345,103,347,348,349,351,352,354,355,356,357,358,108,109,110,111,112,113,114,115,116,122,123,382,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,389,390,391,392,154,155,156,157,158,159,160,161,162,402,163,164,34,34,35,35,165,404,405,406,407,408,166,167,168,169,19,422,170,20,171,172,21,173,174,175,176,177,178,179,180,181,182,183,22,23,184,24,185,186,187,25,26,188,189,190,191,192,193,194,195,196,197,198,199,435,436,437,438,439,201,444,202,203,204,450,205,206,207,208,209,210,211,212,213,214,215,475,217,219,222,223,224,225,226,228,229,230,232,233,234,479,235,236,480,481,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,482,256,495,496,497,498,257,258,31,259,260,261,262,263,264,265,266,267,268,269,270,271,32,272,273,274,275,276,277,278,279,280,4,5,6,33],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"this.org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[308,196],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","threadSafe":"shouldBeUsedInOneThread"}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.AssertionErrorWrapper:32","sourceCode":"return java.lang.AssertionError","type":"CtReturnImpl"},"failures":[287,43,289,292,293,294,51,7,8,53,9,54,55,10,85,14,15,16,17,18,88,353,147,151,152,153,19,170,20,171,172,21,182,22,23,184,24,25,26,188,189,196,435,436,437,438,200,448,204,450,210,216,218,245,249,250,253,31,32,33],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:321","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Throwable.getClass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[38,39,40,41,42,287,288,43,289,290,291,292,293,294,295,44,296,45,297,298,46,47,48,49,50,51,299,300,301,302,303,304,305,306,307,308,309,310,311,312,52,313,7,314,8,53,9,54,55,10,315,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,0,1,316,317,84,318,85,14,15,16,86,87,17,18,88,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,89,335,336,337,338,339,90,340,91,92,93,94,95,96,97,98,99,341,342,343,344,345,100,2,101,102,3,103,346,347,348,349,350,351,352,353,354,355,356,357,358,104,105,106,359,360,361,362,363,364,107,365,366,367,108,109,368,110,369,370,371,111,112,113,114,115,116,117,118,119,120,121,372,373,374,375,376,377,378,379,122,123,380,381,382,383,384,385,386,387,388,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,389,390,391,392,393,394,395,396,397,398,399,400,401,154,155,156,157,158,159,160,161,162,402,163,403,164,34,35,165,404,405,406,407,408,166,409,410,411,412,413,167,414,415,416,417,418,419,420,421,168,169,19,422,170,20,171,172,21,173,174,423,424,425,426,427,428,429,175,176,177,178,430,179,180,181,431,182,183,22,23,184,24,185,186,187,25,26,188,189,190,191,192,193,194,195,196,197,198,199,432,433,434,435,436,437,438,439,440,200,441,442,443,201,444,202,445,203,446,447,448,204,449,450,451,452,453,205,454,455,206,456,457,458,459,460,461,462,463,464,207,465,466,467,468,469,208,470,471,209,210,211,212,213,214,472,473,215,37,474,475,216,217,218,476,477,219,220,221,222,223,224,225,478,226,227,228,229,230,231,232,233,234,479,235,236,480,481,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,482,483,484,485,486,487,488,256,489,490,491,492,493,494,495,496,497,498,257,258,31,259,499,260,261,262,263,264,265,500,266,267,268,269,270,271,32,272,273,274,275,276,501,277,278,279,280,4,5,6,33],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.Capture:134","failures":[502,503],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Captures:53","failures":[502,233,234,479,235,236,480,481,237,238,239,240,241,242,243],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:62","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[329,227,229],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[329,227,229],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[8,11,12,15,27,29],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[259],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[502,503],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:173","failures":[229],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:40","sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:41","sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.internal.matchers.Equals:57","failures":[],"status":0,"binaryOperator":"(((this.java.lang.Object) == null) && ((org.easymock.internal.matchers.Equals.java.lang.Object) == null)) || (((this.java.lang.Object) != null) && (this.java.lang.Object.equals(org.easymock.internal.matchers.Equals.java.lang.Object)))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[44,296,297,311,312,52,313,94,365,366,367,371,381,382,383,384,385,386,387,388,394,395,396,397,398,399,401,406,407,423,427,175,178,191,192,451,205,455,456,457,460,463,465,466,469,209,210,212,213,214,215,474,475,218,476,477,6],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"interceptor":"interceptor","mockedMethods":"mockedMethods"}},{"position":"org.easymock.internal.ReflectionUtils:106","failures":[44,296,45,52,94,367,108,109,110,372,377,382,34,34,35,35,165,406,407,504,505,506,507,175,176,177,178,180,181,192,199,439,508,200,441,201,444,202,203,448,204,509,450,205,206,207,208,209,210,212,213,214,472,215,475,216,217,218,4,6],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"delegateTo"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[233,479,240,31,259,261,263,264,500,274,278],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:153","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[39,111,112,113,114,115,116,190,191,192,193],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[510,4,5,6],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[394,395,396,397,399,401],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:439","failures":[44,45,297],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:85","failures":[38,39,287,288,43,289,290,291,292,293,294,44,296,46,47,48,49,50,51,299,300,301,302,303,304,305,306,307,308,309,310,52,7,314,8,53,9,54,55,10,315,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85,14,15,16,86,87,17,18,88,94,95,96,97,98,99,341,342,343,344,345,100,101,102,103,346,347,348,349,351,352,353,354,355,356,357,358,360,361,362,108,109,110,111,112,113,114,115,116,122,123,381,382,383,384,385,386,387,388,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,389,390,391,392,394,154,155,156,157,158,159,160,161,162,402,163,403,164,34,34,35,35,165,404,405,406,407,408,166,167,168,169,19,422,170,20,171,172,21,173,174,175,176,177,178,179,180,181,182,183,22,23,184,24,185,186,187,25,26,188,189,190,191,192,193,194,195,196,197,198,199,435,436,437,438,439,200,201,444,202,203,448,204,450,205,206,207,208,209,210,211,212,213,214,472,215,475,216,217,218,219,222,223,224,225,226,228,229,230,232,233,234,479,235,236,480,481,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,482,483,256,495,496,497,498,257,258,31,259,260,261,262,263,264,265,266,267,268,269,270,271,32,272,273,274,275,276,501,277,278,279,280,4,5,6,33],"status":-1,"binaryOperator":"org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:92","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:274","failures":[100,160,219,220,221,222,223,224,225,226,33],"status":-1,"binaryOperator":"org.easymock.IAnswer<?> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[259,260,263,264],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:972","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[0,1,2,3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[184],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"mock"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:320","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[329,227],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":259,"org.easymock.tests2.UsageTest.argumentsOrdered":26,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":85,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":254,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":414,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":329,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":24,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":404,"org.easymock.tests2.DelegateToTest.testReturnException":228,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":112,"org.easymock.tests.MockingTest.testPartialClassMocking":108,"org.easymock.tests.MockClassControlTest.testToString":383,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":434,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":84,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":477,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":337,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":459,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":127,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":206,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":169,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":281,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":265,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":46,"org.easymock.tests2.UsageTest.wrongArguments":23,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":494,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":391,"org.easymock.samples.ExampleTest.answerVsDelegate":160,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":377,"org.easymock.tests2.UsageConstraintsTest.testNull":261,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":370,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":212,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":388,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":253,"org.easymock.tests2.CaptureTest.testPrimitive":235,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":50,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":146,"org.easymock.tests.UsageTest.moreThanOneArgument":14,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":211,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":156,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":117,"org.easymock.tests.UsageTest.argumentsOrdered":18,"org.easymock.tests.UsageVarargTest.varargIntAccepted":349,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":334,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":95,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":439,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":285,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":425,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":418,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":444,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":321,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":99,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":256,"org.easymock.tests.ReplayStateInvalidUsageTest.times":307,"org.easymock.tests2.DependencyTest.testClassMocking":420,"org.easymock.tests2.AnswerTest.answer":219,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":500,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":335,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":498,"org.easymock.tests2.CaptureTest.testAnd":233,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":374,"org.easymock.tests2.UsageTest.strictResetToDefault":183,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":475,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":442,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":155,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":149,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":248,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":121,"org.easymock.tests2.DelegateToTest.testDelegate":232,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":142,"org.easymock.tests.LimitationsTest.mockFinalMethod":313,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":115,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":345,"org.easymock.tests2.DependencyTest.testClassMockingSupport":421,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":0,"org.easymock.tests2.CaptureTest.testCapture1_2446744":236,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":473,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":140,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":496,"org.easymock.tests.UsageThrowableTest.throwError":56,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":301,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":376,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":419,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":298,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":158,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":471,"org.easymock.samples.PartialClassMockTest.testGetArea":165,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":302,"org.easymock.tests.MockingTest.testInterfaceMocking":368,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":96,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":460,"org.easymock.tests2.UsageTest.niceToStrict":184,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":128,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":364,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":319,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":201,"org.easymock.tests2.MockBuilderTest.testCreateMock":448,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":467,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":491,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":136,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":27,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":249,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":373,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":42,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":287,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":389,"org.easymock.tests.UsageOverloadedMethodTest.overloading":125,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":469,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":464,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":102,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":270,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":124,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":75,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":269,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":239,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":350,"org.easymock.tests.MockClassControlTest.testEquals":387,"org.easymock.tests2.EasyMockSupportClassTest.testAll":205,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":296,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":144,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":28,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":504,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":497,"org.easymock.tests2.CaptureTest.testCaptureAll":234,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":343,"org.easymock.tests.MockNameTest.defaultName":380,"org.easymock.tests2.UsageConstraintsTest.testMatches":271,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":157,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":299,"org.easymock.samples.ExampleTest.voteForRemovals":163,"org.easymock.tests.UsageVarargTest.allKinds":358,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":151,"org.easymock.samples.BasicClassMockTest.testPrintContent":407,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":344,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":62,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":19,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":415,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":116,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":231,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":400,"org.easymock.tests2.UsageConstraintsTest.greaterThan":272,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":454,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":148,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":218,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":401,"org.easymock.samples.ExampleTest.voteForRemoval":161,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":476,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":195,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":378,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":426,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":472,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":182,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":94,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":447,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":326,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":246,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":58,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":452,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":111,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":227,"org.easymock.tests2.CaptureTest.testCaptureFirst":243,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":325,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":247,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":189,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":346,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":71,"org.easymock.tests2.UsageTest.moreThanOneArgument":22,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":197,"org.easymock.tests2.CaptureTest.testCapture2_2446744":242,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":336,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":357,"org.easymock.tests.GenericTest.testBridgedEquals":297,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":293,"org.easymock.tests.UsageExpectAndReturnTest.longType":67,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":244,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":341,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":509,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":145,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":501,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":107,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":143,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":154,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":92,"org.easymock.tests.UsageCallCountTest.tooManyCalls":294,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":43,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":468,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":72,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":493,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":132,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":61,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":176,"org.easymock.tests.MockingTest.testNiceClassMocking":371,"org.easymock.tests.MockingTest.testClassMocking":366,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":508,"org.easymock.tests2.UsageConstraintsTest.testContains":268,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":288,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":192,"org.easymock.tests2.UsageConstraintsTest.testFind":260,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":126,"org.easymock.tests.MockTypeTest.fromEasyMockClass":375,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":7,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":226,"org.easymock.tests.UsageExpectAndReturnTest.object":74,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":215,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":492,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":252,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":282,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":352,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":362,"org.easymock.tests.UsageTest.exactCallCountByLastCall":88,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":38,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":324,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":118,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":317,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":13,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":432,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":80,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":347,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":101,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":410,"org.easymock.tests.MockClassControlTest.testHashCode":386,"org.easymock.tests2.EasyMockSupportTest.testVerify":482,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":462,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":119,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":100,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":41,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":495,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":483,"org.easymock.tests.UsageVarargTest.varargCharAccepted":351,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":393,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":422,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":340,"org.easymock.tests2.UsageTest.openCallCountByLastCall":185,"org.easymock.tests.DefaultClassInstantiatorTest.object":394,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":255,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":40,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":360,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":463,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":134,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":507,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":59,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":487,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":409,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":385,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":216,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":133,"org.easymock.tests.CapturesMatcherTest.test":502,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":81,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":91,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":384,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":208,"org.easymock.tests2.UsageTest.resumeIfFailure":188,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":372,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":424,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":114,"org.easymock.tests2.StubTest.stubWithReturnValue":174,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":445,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":73,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":277,"org.easymock.tests2.SerializationTest.testAllMockedMethod":6,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":89,"org.easymock.samples.SupportTest.voteForRemovals":166,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":29,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":295,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":412,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":139,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":510,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":90,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":220,"org.easymock.tests.UsageExpectAndThrowTest.object":137,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":318,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":275,"org.easymock.tests2.DelegateToTest.testWrongClass":230,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":122,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":123,"org.easymock.samples.ConstructorCalledMockTest.testTax":34,"org.easymock.tests.UsageStrictMockTest.range":54,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":428,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":251,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":175,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":138,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":202,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":451,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":17,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":309,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":390,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":11,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":106,"org.easymock.tests2.CaptureTest.testCaptureNone":238,"org.easymock.tests.UsageUnorderedTest.message":51,"org.easymock.tests.UsageVerifyTest.twoReturns":153,"org.easymock.tests.UsageVarargTest.varargByteAccepted":356,"org.easymock.tests2.ThreadingTest.testThreadSafe":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":465,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":291,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":406,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":363,"org.easymock.tests2.CaptureTest.testCapture_2617107":479,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":30,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":316,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":49,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":338,"org.easymock.tests2.UsageConstraintsTest.any":266,"org.easymock.tests2.StubTest.stub":173,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":306,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":93,"org.easymock.tests.UsageExpectAndThrowTest.longType":130,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":113,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":339,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":398,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":305,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":20,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":167,"org.easymock.tests2.SerializationTest.testClass":4,"org.easymock.tests.LimitationsTest.mockNativeMethod":52,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":45,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":83,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":506,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":486,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":21,"org.easymock.tests2.NameTest.nameForMocksControl":438,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":488,"org.easymock.tests2.MockedExceptionTest.testMockedException":191,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":455,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":87,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":478,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":131,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":110,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":209,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":203,"org.easymock.tests.MockingTest.testNicePartialClassMocking":109,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":214,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":484,"org.easymock.tests2.CaptureTest.testCaptureLast":237,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":1,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":181,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":264,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":276,"org.easymock.tests.MockingTest.testTwoMocks":367,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":431,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":64,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":135,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":25,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":279,"org.easymock.samples.ExampleTest.removeNonExistingDocument":403,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":490,"org.easymock.tests.UsageStrictMockTest.differentMethods":55,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":303,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":411,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":396,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":196,"org.easymock.tests2.MockBuilderTest.testCreateMockString":450,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":381,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":456,"org.easymock.tests.UsageExpectAndThrowTest.floatType":129,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":453,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":222,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":433,"org.easymock.tests.UsageVerifyTest.twoThrows":152,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":2,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":207,"org.easymock.samples.ExampleTest.voteAgainstRemoval":162,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":104,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":330,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":217,"org.easymock.tests.LimitationsTest.privateConstructor":312,"org.easymock.tests2.UsageConstraintsTest.testNotNull":278,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":190,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":63,"org.easymock.tests2.UsageTest.defaultResetToNice":187,"org.easymock.samples.ExampleTest.voteAgainstRemovals":159,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":79,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":331,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":485,"org.easymock.tests.UsageVarargTest.differentLength":353,"org.easymock.tests2.CallbackTest.callback":33,"org.easymock.tests2.UsageConstraintsTest.equals":499,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":37,"org.easymock.tests.UsageTest.openCallCountByLastCall":86,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":257,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":48,"org.easymock.tests.UsageCallCountTest.tooFewCalls":289,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":178,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":392,"org.easymock.tests.UsageThrowableTest.throwCheckedException":60,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":12,"org.easymock.tests.MockingTest.testStrictClassMocking":365,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":180,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":39,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":489,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":177,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":308,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":179,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":224,"org.easymock.tests.ObjectMethodsTest.testHashCode":361,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":284,"org.easymock.tests2.NameTest.nameForNiceMock":437,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":198,"org.easymock.tests2.DependencyTest.testInterfaceMocking":168,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":283,"org.easymock.samples.ExampleTest.addDocument":402,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":466,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":470,"org.easymock.tests2.DelegateToTest.testStubDelegate":229,"org.easymock.tests2.AnswerTest.stubAnswer":223,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":53,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":446,"org.easymock.tests.UsageVarargTest.varargLongAccepted":355,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":10,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":328,"org.easymock.tests.UsageExpectAndReturnTest.floatType":66,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":82,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":199,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":35,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":417,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":3,"org.easymock.tests.UsageThrowableTest.noUpperLimit":57,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":273,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":258,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":423,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":480,"org.easymock.tests2.SerializationTest.test":5,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":395,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":65,"org.easymock.tests2.UsageConstraintsTest.testSame":262,"org.easymock.samples.SupportTest.addDocument":408,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":430,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":457,"org.easymock.tests.GenericTest.testPackageScope":44,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":120,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":323,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":416,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":369,"org.easymock.tests2.NameTest.nameForMock":435,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":76,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":449,"org.easymock.tests2.UsageStrictMockTest.differentMethods":172,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":474,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":68,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":141,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":359,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":150,"org.easymock.tests2.MockedExceptionTest.testRealException":193,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":379,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":429,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":333,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":170,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":332,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":47,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":310,"org.easymock.tests2.NameTest.nameForStrictMock":436,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":443,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":225,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":213,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":427,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":397,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":274,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":200,"org.easymock.tests2.UsageStrictMockTest.range":171,"org.easymock.tests2.UsageConstraintsTest.lessThan":280,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":413,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":461,"org.easymock.tests2.CaptureTest.testCaptureRightOne":240,"org.easymock.tests2.UsageConstraintsTest.testOr":263,"org.easymock.tests.UsageRangeTest.combination":147,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":210,"org.easymock.tests.UsageTest.wrongArguments":16,"org.easymock.tests2.MockBuilderTest.testWithConstructor":440,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":458,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":382,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":69,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":77,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":320,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":399,"org.easymock.tests.UsageVarargTest.varargShortAccepted":354,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":292,"org.easymock.tests2.UsageConstraintsTest.cmpTo":267,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":221,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":322,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":186,"org.easymock.tests2.CaptureTest.testCaptureFromStub":241,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":300,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":441,"org.easymock.tests.UsageTest.unexpectedCallWithArray":15,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":8,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":290,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":36,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":78,"org.easymock.tests2.CaptureTest.testCapture":503,"org.easymock.tests2.UsageConstraintsTest.constraints":31,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":9,"org.easymock.samples.ExampleTest.addAndChangeDocument":164,"org.easymock.tests.UsageStrictMockTest.testVerify":315,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":405,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":314,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":342,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":481,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":505,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":97,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":70,"org.easymock.tests.LimitationsTest.abstractClass":311,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":103,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":98,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":250,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":348}}]

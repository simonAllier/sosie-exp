[{"position":"org.easymock.internal.ClassProxyFactory:168","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"status":-1,"binaryOperator":"java.lang.reflect.Method[] != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[72,73,74],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[75,76],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[77,78,30,79],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[80],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:411","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[0,1,2,81,3,4,82,83,84,85,86,87,88,89,90,91,92,5,6,93,7,8,9,10,94,11,95,12,13,14,15,16,17,18,19,20,21,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,22,23,24,25,185,186,26,27,187,28,188,189,190,29,191,192,193,194,195,196,197,198,199,77,78,30,200,201,202,203,204,205,206,207,208,209,210,211,31,212,213,32,214,33,215,34,35,216,217,36,218,219,37,220,221,38,39,222,223,40,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,41,42,43,44,45,284,46,285,286,47,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,48,49,50,51,52,53,54,55,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,56,57,58,59,60,61,417,62,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,63,64,65,66,457,67,458,459,460,461,462,463,464,465,466,68,69,70,71,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[0,0,1,1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,21,165,75,167,168,171,172,173,175,178,179,76,181,495,496,182,22,23,24,25,26,27,77,30,32,215,221,224,43,44,45,46,366,371,49,63,65,66,457,70],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[327],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:318","failures":[439,442],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.RecordState:163","failures":[197,198],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[101,142,148,149,283,289,292,359,360,363,364,497,435,437,438],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1568","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(T))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[0,0,1,1,99,120,229,241,242,246,247,248,249,255,257,258,260,261,267,268,269,290,296,297,300,301,302,447,448,449,450,451,452,453,454,455,456,473],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[250,251],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[439,442],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Captures:53","failures":[109,110,111,112,113,114,115,116,117,118,119,120,121,122,80],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.ConstructorArgs:77","failures":[74],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[0,0,1,1,2,3,4,5,6,7,8,9,10,11,95,12,13,14,15,16,17,18,19,20,21,165,166,75,167,168,169,170,171,172,173,174,175,177,178,179,180,76,181,498,496,182,183,184,22,23,24,25,26,27,28,29,77,30,31,212,213,32,214,33,215,34,35,216,217,36,218,219,37,220,221,38,39,222,223,40,224,225,226,41,42,43,44,45,46,47,366,371,48,49,50,51,52,53,54,55,415,416,56,57,58,59,60,61,417,62,63,64,65,66,457,67,68,69,70,71],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[80],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:92","failures":[252,253],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[2,82,84,85,87,91,5,6,93,7,8,9,11,14,15,16,21,99,101,102,109,110,111,112,113,116,117,118,119,121,122,128,139,140,141,143,145,146,147,150,151,152,153,154,155,156,157,158,159,160,161,162,163,167,171,173,175,179,182,22,23,24,25,186,26,27,193,197,77,78,205,32,215,221,224,229,232,236,237,238,239,240,241,242,243,244,246,247,248,249,250,251,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,272,273,282,44,45,46,290,292,293,296,297,300,301,302,303,357,358,361,362,365,379,380,381,382,392,394,403,404,406,407,408,409,436,438,439,441,442,443,444,445,446,452,453,454,455,456,63,65,457,459,70,467,468,469,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:88","sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:176","failures":[499,500,501,502,503,504,505,182],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[0,1,2,81,3,4,82,83,84,85,86,87,88,89,90,91,92,5,6,93,7,8,9,10,94,11,95,12,13,14,15,16,17,18,19,20,21,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,22,23,24,25,185,186,26,27,187,28,188,189,190,29,191,192,193,194,195,196,197,198,199,77,78,30,200,201,202,203,204,205,206,207,208,209,210,211,31,212,213,32,214,33,215,34,35,216,217,36,218,219,37,220,221,38,39,222,223,40,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,41,42,43,44,45,284,46,285,286,47,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,48,49,50,51,52,53,54,55,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,56,57,58,59,60,61,417,62,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,63,64,65,66,457,67,458,459,460,461,462,463,464,465,466,68,69,70,71,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1815","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EndsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"suffix"}},{"position":"org.easymock.internal.Range:40","failures":[0,1,2,81,3,4,82,83,84,85,86,87,88,89,90,91,92,5,6,93,7,8,9,10,94,11,95,12,13,14,15,16,17,18,19,20,21,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,22,23,24,25,185,186,26,27,187,28,188,189,190,29,191,192,193,194,195,196,197,198,199,77,78,30,200,201,202,203,204,205,206,207,208,209,210,211,31,212,213,32,214,33,215,34,35,216,217,36,218,219,37,220,221,38,39,222,223,40,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,41,42,43,44,45,284,46,285,286,47,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,48,49,50,51,52,53,54,55,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,56,57,58,59,60,61,417,62,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,63,64,65,66,457,67,458,459,460,461,462,463,464,465,466,68,69,70,71,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[77,78,30,79],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:83","sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:93","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","type":"CtInvocationImpl"},"failures":[101,142,148,149,283,289,292,359,360,363,364,497,435,437,438],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:217","failures":[2,81,3,4,82,83,84,85,86,87,89,90,91,92,5,6,93,7,8,9,11,15,21,98,99,100,101,102,103,109,110,111,112,114,115,116,117,118,119,122,128,139,140,142,143,144,148,149,151,152,153,154,155,156,157,158,160,161,162,163,164,171,173,175,182,22,23,24,25,186,26,27,193,196,77,78,30,205,32,215,221,224,227,231,233,235,239,240,244,247,250,251,253,254,256,259,262,263,264,265,266,267,272,273,277,279,280,282,44,45,46,288,289,290,291,292,293,294,296,297,298,299,318,319,320,322,323,329,330,339,340,342,347,352,360,363,364,365,379,407,408,419,420,421,423,424,426,427,428,429,430,435,437,438,439,440,441,442,443,444,445,446,63,65,66,70,477,478,480,485,490],"status":-1,"binaryOperator":"(boolean) && ((org.easymock.internal.Result) == null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:633","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Injector:206","sourceCode":"final java.lang.NoSuchFieldException java.lang.NoSuchFieldException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[101,292,506,437,438],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:88","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[2,81,3,4,82,83,84,85,86,87,88,89,90,91,92,5,6,93,7,8,9,10,94,11,12,13,14,15,16,17,18,19,20,21,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,167,168,170,171,172,173,175,178,179,181,22,23,25,186,187,28,29,191,192,193,194,195,196,197,198,199,78,30,200,201,202,203,204,205,206,207,208,209,210,211,31,212,32,33,215,34,35,36,37,221,38,39,222,223,40,224,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,41,42,43,284,285,286,47,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,369,370,371,372,373,374,375,376,377,378,48,49,50,51,52,53,54,55,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,56,57,58,59,60,61,417,62,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,63,64,65,66,457,67,458,459,460,461,462,463,464,465,466,68,69,70,71,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:413","sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:122","sourceCode":"return null","type":"CtReturnImpl"},"failures":[507,508,509,510],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1594","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[511,512,274,289,290,359,360,361,362,363,364,365,513,514,431],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[195],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:194","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n    return java.lang.Number.byteValue();\n} else if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","type":"CtIfImpl"},"failures":[0,0,1,1,2,82,84,85,87,91,5,93,7,9,167,171,173,175,179,182,22,23,24,25,186,26,27,197,32,215,221,224,232,239,44,45,46,301,447,448,452,453,454,456,70,477,478,479,484,491,492,493,494],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:73","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:126","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","type":"CtInvocationImpl"},"failures":[0,1,2,81,3,4,82,83,84,85,86,87,89,90,91,92,5,6,93,7,8,9,10,11,13,14,15,16,19,20,21,96,97,98,99,100,101,102,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,167,171,172,173,175,178,179,181,182,22,23,24,25,186,26,27,193,196,197,198,77,78,30,205,32,215,221,224,227,228,229,231,232,233,235,236,237,238,239,240,241,242,243,244,246,247,248,249,250,251,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,272,273,274,276,277,279,280,283,44,45,46,287,288,289,290,291,292,293,294,296,297,298,299,300,301,302,317,318,319,320,321,322,323,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,375,376,377,378,379,381,382,407,408,409,419,420,421,423,424,425,426,427,428,429,430,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,63,65,66,80,80,461,462,463,464,465,466,70,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"failures":[194,195],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":244,"org.easymock.tests2.UsageTest.argumentsOrdered":149,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":357,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":162,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":206,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":393,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":144,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":81,"org.easymock.tests2.DelegateToTest.testReturnException":231,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":462,"org.easymock.tests.MockingTest.testPartialClassMocking":44,"org.easymock.tests.MockClassControlTest.testToString":50,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":104,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":459,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":402,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":18,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":217,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":215,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":337,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":273,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":500,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":251,"org.easymock.tests2.UsageTest.wrongArguments":142,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":296,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":134,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":377,"org.easymock.samples.ExampleTest.answerVsDelegate":83,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":371,"org.easymock.tests2.UsageConstraintsTest.testNull":247,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":286,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":7,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":161,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":55,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":509,"org.easymock.tests2.CaptureTest.testPrimitive":112,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":300,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":356,"org.easymock.tests.UsageTest.moreThanOneArgument":358,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":93,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":449,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":324,"org.easymock.tests.UsageTest.argumentsOrdered":364,"org.easymock.tests.UsageVarargTest.varargIntAccepted":421,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":398,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":452,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":504,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":165,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":189,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":210,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":172,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":385,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":456,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":128,"org.easymock.tests.ReplayStateInvalidUsageTest.times":311,"org.easymock.tests2.DependencyTest.testClassMocking":270,"org.easymock.tests2.AnswerTest.answer":193,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":252,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":400,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":138,"org.easymock.tests2.CaptureTest.testAnd":109,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":368,"org.easymock.tests2.UsageTest.strictResetToDefault":140,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":169,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":13,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":448,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":156,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":381,"org.easymock.tests2.DelegateToTest.testDelegate":235,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":328,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":352,"org.easymock.tests.LimitationsTest.mockFinalMethod":71,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":465,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":336,"org.easymock.tests2.DependencyTest.testClassMockingSupport":271,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":329,"org.easymock.tests2.CaptureTest.testCapture1_2446744":113,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":94,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":350,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":136,"org.easymock.tests.UsageThrowableTest.throwError":439,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":305,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":370,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":434,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":211,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":451,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":226,"org.easymock.samples.PartialClassMockTest.testGetArea":2,"org.easymock.tests.MockingTest.testInterfaceMocking":284,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":306,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":453,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":468,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":415,"org.easymock.tests2.UsageTest.niceToStrict":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":36,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":338,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":74,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":383,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":171,"org.easymock.tests2.MockBuilderTest.testCreateMock":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":222,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":131,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":511,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":346,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":157,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":367,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":433,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":315,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":375,"org.easymock.tests.UsageOverloadedMethodTest.overloading":408,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":40,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":220,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":257,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":280,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":486,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":407,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":256,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":118,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":422,"org.easymock.tests2.EasyMockSupportClassTest.testAll":32,"org.easymock.tests.MockClassControlTest.testEquals":54,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":66,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":354,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":495,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":137,"org.easymock.tests2.CaptureTest.testCaptureAll":110,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":334,"org.easymock.tests.MockNameTest.defaultName":418,"org.easymock.tests2.UsageConstraintsTest.testMatches":258,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":450,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":303,"org.easymock.samples.ExampleTest.voteForRemovals":87,"org.easymock.tests.UsageVarargTest.allKinds":430,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":436,"org.easymock.samples.BasicClassMockTest.testPrintContent":4,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":335,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":445,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":97,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":466,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":207,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":234,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":505,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":417,"org.easymock.tests2.UsageConstraintsTest.greaterThan":260,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":214,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":380,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":16,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":62,"org.easymock.samples.ExampleTest.voteForRemoval":84,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":17,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":237,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":508,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":372,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":190,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":10,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":139,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":63,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":177,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":390,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":154,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":441,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":212,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":461,"org.easymock.tests2.CaptureTest.testCaptureFirst":122,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":230,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":389,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":155,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":151,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":283,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":482,"org.easymock.tests2.UsageTest.moreThanOneArgument":141,"org.easymock.tests2.CaptureTest.testCapture2_2446744":121,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":401,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":179,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":429,"org.easymock.tests.GenericTest.testBridgedEquals":67,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":322,"org.easymock.tests.UsageExpectAndReturnTest.longType":478,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":152,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":332,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":76,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":355,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":265,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":374,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":353,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":471,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":447,"org.easymock.tests.UsageCallCountTest.tooManyCalls":323,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":317,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":223,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":483,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":133,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":342,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":444,"org.easymock.tests.MockingTest.testNiceClassMocking":47,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":23,"org.easymock.tests.MockingTest.testClassMocking":42,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":75,"org.easymock.tests2.UsageConstraintsTest.testContains":255,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":316,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":21,"org.easymock.tests2.UsageConstraintsTest.testFind":246,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":409,"org.easymock.tests.MockTypeTest.fromEasyMockClass":369,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":276,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":287,"org.easymock.tests.UsageExpectAndReturnTest.object":485,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":11,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":132,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":160,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":501,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":424,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":413,"org.easymock.tests.UsageTest.exactCallCountByLastCall":365,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":473,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":388,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":458,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":325,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":183,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":491,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":419,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":279,"org.easymock.tests.MockClassControlTest.testHashCode":53,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":201,"org.easymock.tests2.EasyMockSupportTest.testVerify":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":219,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":326,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":432,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":277,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":135,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":199,"org.easymock.tests.UsageVarargTest.varargCharAccepted":423,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":416,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":406,"org.easymock.tests2.UsageTest.openCallCountByLastCall":145,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":163,"org.easymock.tests.DefaultClassInstantiatorTest.object":56,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":72,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":431,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":411,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":497,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":37,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":344,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":510,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":442,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":126,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":200,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":14,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":52,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":343,"org.easymock.tests.CapturesMatcherTest.test":80,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":492,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":470,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":224,"org.easymock.tests2.UsageTest.resumeIfFailure":150,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":366,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":188,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":464,"org.easymock.tests2.StubTest.stubWithReturnValue":229,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":174,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":484,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":266,"org.easymock.tests2.SerializationTest.testAllMockedMethod":30,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":399,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":512,"org.easymock.samples.SupportTest.voteForRemovals":91,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":64,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":203,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":349,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":79,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":405,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":194,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":460,"org.easymock.tests.UsageExpectAndThrowTest.object":347,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":263,"org.easymock.tests2.DelegateToTest.testWrongClass":233,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":301,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":302,"org.easymock.samples.ConstructorCalledMockTest.testTax":0,"org.easymock.tests.UsageStrictMockTest.range":292,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":191,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":159,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":22,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":348,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":31,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":313,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":363,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":376,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":513,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":469,"org.easymock.tests2.CaptureTest.testCaptureNone":117,"org.easymock.tests.UsageUnorderedTest.message":435,"org.easymock.tests.UsageVerifyTest.twoReturns":438,"org.easymock.tests.UsageVarargTest.varargByteAccepted":428,"org.easymock.tests2.ThreadingTest.testThreadSafe":236,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":38,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":320,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":414,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":3,"org.easymock.tests2.CaptureTest.testCapture_2617107":111,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":331,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":403,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":299,"org.easymock.tests2.UsageConstraintsTest.any":253,"org.easymock.tests2.StubTest.stub":228,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":310,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":472,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":463,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":404,"org.easymock.tests.UsageExpectAndThrowTest.longType":340,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":60,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":309,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":100,"org.easymock.tests2.SerializationTest.testClass":77,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":205,"org.easymock.tests.LimitationsTest.mockNativeMethod":70,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":494,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":457,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":125,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":103,"org.easymock.tests2.NameTest.nameForMocksControl":108,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":127,"org.easymock.tests2.MockedExceptionTest.testMockedException":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":33,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":362,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":46,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":275,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":341,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":5,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":175,"org.easymock.tests.MockingTest.testNicePartialClassMocking":45,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":9,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":499,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":123,"org.easymock.tests2.CaptureTest.testCaptureLast":116,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":330,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":27,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":250,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":264,"org.easymock.tests.MockingTest.testTwoMocks":43,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":187,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":475,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":345,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":148,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":268,"org.easymock.samples.ExampleTest.removeNonExistingDocument":88,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":130,"org.easymock.tests.UsageStrictMockTest.differentMethods":293,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":307,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":202,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":58,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":238,"org.easymock.tests2.MockBuilderTest.testCreateMockString":181,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":48,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":34,"org.easymock.tests.UsageExpectAndThrowTest.floatType":339,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":259,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":213,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":196,"org.easymock.tests.UsageVerifyTest.twoThrows":437,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":184,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":278,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":221,"org.easymock.samples.ExampleTest.voteAgainstRemoval":85,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":394,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":15,"org.easymock.tests.LimitationsTest.privateConstructor":69,"org.easymock.tests2.UsageConstraintsTest.testNotNull":267,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":446,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":19,"org.easymock.tests2.UsageTest.defaultResetToNice":147,"org.easymock.samples.ExampleTest.voteAgainstRemovals":82,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":490,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":395,"org.easymock.tests.UsageVarargTest.differentLength":425,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":124,"org.easymock.tests2.CallbackTest.callback":227,"org.easymock.tests2.UsageConstraintsTest.equals":245,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":95,"org.easymock.tests.UsageTest.openCallCountByLastCall":361,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":241,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":298,"org.easymock.tests.UsageCallCountTest.tooFewCalls":318,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":25,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":378,"org.easymock.tests.UsageThrowableTest.throwCheckedException":443,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":514,"org.easymock.tests.MockingTest.testStrictClassMocking":41,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":474,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":26,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":129,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":24,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":312,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":186,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":198,"org.easymock.tests.ObjectMethodsTest.testHashCode":412,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":503,"org.easymock.tests2.NameTest.nameForNiceMock":107,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":240,"org.easymock.tests2.DependencyTest.testInterfaceMocking":272,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":502,"org.easymock.samples.ExampleTest.addDocument":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":39,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":225,"org.easymock.tests2.DelegateToTest.testStubDelegate":232,"org.easymock.tests2.AnswerTest.stubAnswer":197,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":290,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":176,"org.easymock.tests.UsageVarargTest.varargLongAccepted":427,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":294,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":392,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":493,"org.easymock.tests.UsageExpectAndReturnTest.floatType":477,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":182,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":1,"org.easymock.tests.UsageThrowableTest.noUpperLimit":440,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":209,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":261,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":281,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":242,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":28,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":114,"org.easymock.tests2.SerializationTest.test":78,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":57,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":476,"org.easymock.tests2.UsageConstraintsTest.testSame":248,"org.easymock.samples.SupportTest.addDocument":90,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":185,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":308,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":35,"org.easymock.tests.GenericTest.testPackageScope":65,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":387,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":208,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":285,"org.easymock.tests2.NameTest.nameForMock":105,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":487,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":180,"org.easymock.tests2.UsageStrictMockTest.differentMethods":102,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":12,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":479,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":351,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":410,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":382,"org.easymock.tests2.MockedExceptionTest.testRealException":96,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":397,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":192,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":396,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":99,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":297,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":314,"org.easymock.tests2.NameTest.nameForStrictMock":106,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":170,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":73,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":274,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":8,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":29,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":59,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":262,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":167,"org.easymock.tests2.UsageStrictMockTest.range":101,"org.easymock.tests2.UsageConstraintsTest.lessThan":269,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":498,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":204,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":507,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":391,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":153,"org.easymock.tests2.CaptureTest.testCaptureRightOne":119,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":218,"org.easymock.tests2.UsageConstraintsTest.testOr":249,"org.easymock.tests.UsageRangeTest.combination":379,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":6,"org.easymock.tests.UsageTest.wrongArguments":360,"org.easymock.tests2.MockBuilderTest.testWithConstructor":166,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":216,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":49,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":480,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":488,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":384,"org.easymock.tests.UsageVarargTest.varargShortAccepted":426,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":61,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":321,"org.easymock.tests2.UsageConstraintsTest.cmpTo":254,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":195,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":386,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":146,"org.easymock.tests2.CaptureTest.testCaptureFromStub":120,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":304,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":168,"org.easymock.tests.UsageTest.unexpectedCallWithArray":359,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":289,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":319,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":489,"org.easymock.tests2.UsageConstraintsTest.constraints":243,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":291,"org.easymock.samples.ExampleTest.addAndChangeDocument":89,"org.easymock.tests.UsageStrictMockTest.testVerify":295,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":92,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":288,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":333,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":115,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":496,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":454,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":481,"org.easymock.tests.LimitationsTest.abstractClass":68,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":455,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":282,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":506,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":420,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":158}}]

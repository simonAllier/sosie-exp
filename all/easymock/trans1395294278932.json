[{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Matches:40","failures":[1],"status":-1,"binaryOperator":"(\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")))","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:245","sourceCode":"net.sf.cglib.proxy.Factory.getCallback(0)","type":"CtInvocationImpl"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:35","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>.getName(), java.lang.Short.java.lang.Class<java.lang.Short>)","type":"CtInvocationImpl"},"failures":[66,67,13,68],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ClassProxyFactory:168","failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,69,29,30,31,32,70,33,71,72,73,74,75,76,77,78,37,38,79,39,40,80,41,42,81,82,43,83,44,45,84,47,48,49,50,51,52,53,54,85,86,57,87,58,88,89,90,91,92,93,94,59,60,61,62,63,64,65],"status":-1,"binaryOperator":"java.lang.reflect.Method[] != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:96","sourceCode":"return java.lang.Class<?>.getConstructors()[0]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:89","sourceCode":"try {\n    return java.lang.Class<?>.getConstructor(new java.lang.Class[0]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    if ((java.lang.Class<?>.getConstructors().int) == 0) {\n        throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n    } \n    return java.lang.Class<?>.getConstructors()[0];\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.EndsWith:40","failures":[95],"status":-1,"binaryOperator":"((\"endsWith(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:327","failures":[96,97,98,99],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","sourceCode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )","type":"CtDoImpl"},"failures":[83,44,45,46,84],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"leafClass"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[66,67,13,68],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[100,101,102,103,104,105,106,107,108],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1531","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareEqual:39","failures":[109],"status":-1,"binaryOperator":"int == 0","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[66,67,13,68],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.Captures:53","failures":[106,110,107,111,112,113,114,115,116,117,108,118,119,120,121],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:328","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[122,123,124],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[125,126,127],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[128,129,130,131,132,133],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1421","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:35","sourceCode":"new java.lang.ThreadLocal<org.easymock.internal.MocksControl>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append(((org.easymock.internal.ErrorMessage.getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[150,151,152,153,154,136,155,156,157,158,159,132,160,144,161,162,163,164,165,166,167,148,149],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer","matches":"matches","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:157","sourceCode":"final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:218","sourceCode":"return ","type":"CtReturnImpl"},"failures":[150,151,152,153,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,100,101,183,184,185,102,103,186,104,187,188,189,190,191,192,134,193,194,105,195,196,197,198,199,200,201,2,3,6,7,8,9,10,11,12,66,67,13,14,15,202,16,17,18,19,20,22,23,24,25,28,203,204,205,206,207,208,209,210,125,211,126,212,213,214,106,110,107,111,112,113,114,115,116,117,108,118,119,120,215,216,217,218,219,30,31,32,220,221,222,223,154,135,136,155,224,33,34,35,36,225,137,226,156,157,227,228,229,230,231,158,159,232,138,233,234,235,236,237,238,239,240,241,139,37,38,79,39,242,40,80,41,42,81,81,82,82,243,43,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,44,45,46,140,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,47,48,49,50,51,52,53,54,317,318,319,320,321,322,323,141,142,324,325,326,327,328,329,330,331,332,122,333,334,335,336,337,338,339,340,341,57,342,343,344,345,124,346,96,97,347,348,349,350,351,352,353,354,132,160,143,144,161,355,356,58,146,163,133,164,357,358,165,166,147,359,98,99,360,361,362,363,364,365,366,367,368,369,88,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,167,148,149,392,393,394,395,396,61,62,63,64,397,398,399,400,401,402,403],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[134],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[136,157,158,159,404,347,132,144,133,164,165,166,148,149,403],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1249","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"position":"org.easymock.internal.matchers.NotNull:36","failures":[199],"status":-1,"binaryOperator":"java.lang.Object != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:38","sourceCode":"new java.util.HashSet<java.lang.String>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[333],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Equals:53","failures":[405,158,165],"status":-1,"binaryOperator":"(java.lang.Object == null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[66,67,13,68],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1471","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[128,129,130,131,132,133],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":101,"org.easymock.tests2.UsageTest.argumentsOrdered":159,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":146,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":178,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":127,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":228,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":243,"org.easymock.tests2.DelegateToTest.testReturnException":211,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":361,"org.easymock.tests.MockingTest.testPartialClassMocking":62,"org.easymock.tests.MockClassControlTest.testToString":49,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":268,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":27,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":34,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":297,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":162,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":217,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":186,"org.easymock.tests2.UsageTest.wrongArguments":157,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":289,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":368,"org.easymock.samples.ExampleTest.answerVsDelegate":248,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":56,"org.easymock.tests2.UsageConstraintsTest.testNull":184,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":16,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":177,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":54,"org.easymock.tests2.CaptureTest.testPrimitive":111,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":293,"org.easymock.tests.UsageTest.moreThanOneArgument":163,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":316,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":202,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":394,"org.easymock.tests.UsageTest.argumentsOrdered":166,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":326,"org.easymock.tests.UsageVarargTest.varargIntAccepted":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":123,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":263,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":2,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":7,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":267,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":225,"org.easymock.tests.ReplayStateInvalidUsageTest.times":338,"org.easymock.tests2.AnswerTest.answer":233,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":104,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":205,"org.easymock.tests2.CaptureTest.testAnd":106,"org.easymock.tests2.UsageTest.strictResetToDefault":226,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":22,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":393,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":172,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":285,"org.easymock.tests2.DelegateToTest.testDelegate":214,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":330,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":312,"org.easymock.tests.LimitationsTest.mockFinalMethod":87,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":364,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":352,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":390,"org.easymock.tests2.CaptureTest.testCapture1_2446744":112,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":310,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":203,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":122,"org.easymock.tests.UsageThrowableTest.throwError":255,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":396,"org.easymock.samples.PartialClassMockTest.testGetArea":43,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":333,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":264,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":343,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":74,"org.easymock.tests2.UsageTest.niceToStrict":227,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":298,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":6,"org.easymock.tests2.MockBuilderTest.testCreateMock":10,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":128,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":306,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":173,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":97,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":317,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":366,"org.easymock.tests.UsageOverloadedMethodTest.overloading":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":78,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":400,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":191,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":270,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":381,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":190,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":117,"org.easymock.tests2.EasyMockSupportClassTest.testAll":33,"org.easymock.tests.MockClassControlTest.testEquals":53,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":45,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":314,"org.easymock.tests2.CaptureTest.testCaptureAll":110,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":204,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":350,"org.easymock.tests2.UsageConstraintsTest.testMatches":192,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":395,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":331,"org.easymock.samples.ExampleTest.voteForRemovals":252,"org.easymock.tests.UsageVarargTest.allKinds":283,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":167,"org.easymock.samples.BasicClassMockTest.testPrintContent":42,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":351,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":261,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":222,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":213,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":365,"org.easymock.tests2.UsageConstraintsTest.greaterThan":193,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":284,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":25,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":94,"org.easymock.samples.ExampleTest.voteForRemoval":249,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":26,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":207,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":0,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":19,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":137,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":58,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":170,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":257,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":360,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":125,"org.easymock.tests2.CaptureTest.testCaptureFirst":120,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":171,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":138,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":403,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":377,"org.easymock.tests2.UsageTest.moreThanOneArgument":156,"org.easymock.tests2.CaptureTest.testCapture2_2446744":119,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":209,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":11,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":282,"org.easymock.tests.GenericTest.testBridgedEquals":84,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":141,"org.easymock.tests.UsageExpectAndReturnTest.longType":373,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":168,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":348,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":315,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":197,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":269,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":313,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":392,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":98,"org.easymock.tests.UsageCallCountTest.tooManyCalls":142,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":319,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":378,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":302,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":260,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":38,"org.easymock.tests.MockingTest.testNiceClassMocking":65,"org.easymock.tests.MockingTest.testClassMocking":60,"org.easymock.tests2.UsageConstraintsTest.testContains":189,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":318,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":32,"org.easymock.tests2.UsageConstraintsTest.testFind":183,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":272,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":241,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":353,"org.easymock.tests.UsageExpectAndReturnTest.object":380,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":20,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":176,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":277,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":296,"org.easymock.tests.UsageTest.exactCallCountByLastCall":147,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":287,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":327,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":386,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":273,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":399,"org.easymock.tests.MockClassControlTest.testHashCode":52,"org.easymock.tests2.EasyMockSupportTest.testVerify":180,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":328,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":397,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":96,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":28,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":215,"org.easymock.tests.UsageVarargTest.varargCharAccepted":276,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":223,"org.easymock.tests2.UsageTest.openCallCountByLastCall":229,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":179,"org.easymock.tests.DefaultClassInstantiatorTest.object":88,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":346,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":294,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":404,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":75,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":304,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":258,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":23,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":51,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":303,"org.easymock.tests.CapturesMatcherTest.test":121,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":387,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":36,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":50,"org.easymock.tests2.UsageTest.resumeIfFailure":232,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":55,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":363,"org.easymock.tests2.StubTest.stubWithReturnValue":219,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":198,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":379,"org.easymock.tests2.SerializationTest.testAllMockedMethod":13,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":345,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":129,"org.easymock.samples.SupportTest.voteForRemovals":246,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":83,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":309,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":68,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":124,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":234,"org.easymock.tests.UsageExpectAndThrowTest.object":307,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":195,"org.easymock.tests2.DelegateToTest.testWrongClass":212,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":324,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":325,"org.easymock.tests.UsageStrictMockTest.range":144,"org.easymock.samples.ConstructorCalledMockTest.testTax":81,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":175,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":37,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":308,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":8,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":165,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":70,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":340,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":367,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":130,"org.easymock.tests2.CaptureTest.testCaptureNone":116,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":344,"org.easymock.tests.UsageUnorderedTest.message":347,"org.easymock.tests.UsageVerifyTest.twoReturns":149,"org.easymock.tests2.ConstraintsToStringTest.endsWithToString":95,"org.easymock.tests.UsageVarargTest.varargByteAccepted":281,"org.easymock.tests2.ThreadingTest.testThreadSafe":206,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":76,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":322,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":41,"org.easymock.tests2.CaptureTest.testCapture_2617107":107,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":292,"org.easymock.tests2.UsageConstraintsTest.any":187,"org.easymock.tests2.StubTest.stub":218,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":337,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":99,"org.easymock.tests.UsageExpectAndThrowTest.longType":300,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":362,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":92,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":336,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":135,"org.easymock.tests2.SerializationTest.testClass":66,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":239,"org.easymock.tests.LimitationsTest.mockNativeMethod":57,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":389,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":46,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":224,"org.easymock.tests2.NameTest.nameForMocksControl":153,"org.easymock.tests2.MockedExceptionTest.testMockedException":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":71,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":358,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":64,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":301,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":14,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":9,"org.easymock.tests.MockingTest.testNicePartialClassMocking":63,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":18,"org.easymock.tests2.CaptureTest.testCaptureLast":115,"org.easymock.tests2.CompareToTest.testCompareEqual":109,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":391,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":103,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":80,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":196,"org.easymock.tests.MockingTest.testTwoMocks":61,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":370,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":305,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":158,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":200,"org.easymock.samples.ExampleTest.removeNonExistingDocument":253,"org.easymock.tests.UsageStrictMockTest.differentMethods":161,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":334,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":90,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":208,"org.easymock.tests2.MockBuilderTest.testCreateMockString":12,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":72,"org.easymock.tests.UsageExpectAndThrowTest.floatType":299,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":134,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":236,"org.easymock.tests.UsageVerifyTest.twoThrows":148,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":35,"org.easymock.samples.ExampleTest.voteAgainstRemoval":250,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":342,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":24,"org.easymock.tests.LimitationsTest.privateConstructor":86,"org.easymock.tests2.UsageConstraintsTest.testNotNull":199,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":30,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":262,"org.easymock.tests2.UsageTest.defaultResetToNice":231,"org.easymock.samples.ExampleTest.voteAgainstRemovals":247,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":385,"org.easymock.tests.UsageVarargTest.differentLength":278,"org.easymock.tests2.CallbackTest.callback":139,"org.easymock.tests2.UsageConstraintsTest.equals":405,"org.easymock.tests.UsageTest.openCallCountByLastCall":357,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":181,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":291,"org.easymock.tests.UsageCallCountTest.tooFewCalls":320,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":39,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":369,"org.easymock.tests.UsageThrowableTest.throwCheckedException":259,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":131,"org.easymock.tests.MockingTest.testStrictClassMocking":59,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":40,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":288,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":79,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":339,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":242,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":238,"org.easymock.tests.ObjectMethodsTest.testHashCode":295,"org.easymock.tests2.ConstraintsToStringTest.matchesToString":1,"org.easymock.tests2.NameTest.nameForNiceMock":152,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":210,"org.easymock.tests2.DependencyTest.testInterfaceMocking":216,"org.easymock.samples.ExampleTest.addDocument":251,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":77,"org.easymock.tests2.DelegateToTest.testStubDelegate":126,"org.easymock.tests2.AnswerTest.stubAnswer":237,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":160,"org.easymock.tests.UsageVarargTest.varargLongAccepted":280,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":355,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":388,"org.easymock.tests.UsageExpectAndReturnTest.floatType":372,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":221,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":82,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":401,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":194,"org.easymock.tests.UsageThrowableTest.noUpperLimit":256,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":182,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":69,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":113,"org.easymock.tests2.SerializationTest.test":67,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":89,"org.easymock.tests2.UsageConstraintsTest.testSame":185,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":371,"org.easymock.samples.SupportTest.addDocument":245,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":335,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":73,"org.easymock.tests.GenericTest.testPackageScope":44,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":329,"org.easymock.tests2.NameTest.nameForMock":150,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":382,"org.easymock.tests2.UsageStrictMockTest.differentMethods":155,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":21,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":374,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":311,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":286,"org.easymock.tests2.MockedExceptionTest.testRealException":220,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":154,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":290,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":341,"org.easymock.tests2.NameTest.nameForStrictMock":151,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":5,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":240,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":17,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":29,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":105,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":91,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":3,"org.easymock.tests2.UsageStrictMockTest.range":136,"org.easymock.tests2.UsageConstraintsTest.lessThan":201,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":169,"org.easymock.tests2.CaptureTest.testCaptureRightOne":108,"org.easymock.tests2.UsageConstraintsTest.testOr":102,"org.easymock.tests.UsageRangeTest.combination":140,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":15,"org.easymock.tests.UsageTest.wrongArguments":164,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":48,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":375,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":383,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":93,"org.easymock.tests.UsageVarargTest.varargShortAccepted":279,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":323,"org.easymock.tests2.UsageConstraintsTest.cmpTo":188,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":235,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":230,"org.easymock.tests2.CaptureTest.testCaptureFromStub":118,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":332,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":4,"org.easymock.tests.UsageTest.unexpectedCallWithArray":133,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":132,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":321,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":384,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":143,"org.easymock.tests2.UsageConstraintsTest.constraints":100,"org.easymock.samples.ExampleTest.addAndChangeDocument":254,"org.easymock.tests.UsageStrictMockTest.testVerify":356,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":244,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":354,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":349,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":114,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":265,"org.easymock.tests.LimitationsTest.abstractClass":85,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":376,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":402,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":266,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":174,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":145,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":274}}]

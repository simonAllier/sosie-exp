[{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:86","sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","type":"CtReturnImpl"},"failures":[0,1,2],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:84","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[3,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,0,89,90,91,92,1,93,94,95,96,2,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:141","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:42","sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","type":"CtThrowImpl"},"failures":[160],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:173","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"failures":[161],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[130,131],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:122","sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[162,33],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"actual","myArgument":"actual"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[163,164,165,166,167,168,169,170,171,172],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"parameterType":"parameterType","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:188","sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","type":"CtTryImpl"},"failures":[173,174],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"method","name":"methodName"}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"failures":[175,176,177],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[3,3,4,4,178,179],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:50","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"mock"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:73","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"failures":[162,175,6,180,181,7,8,9,182,10,11,183,184,185,160,12,186,187,188,189,13,14,190,191,15,192,16,17,18,19,193,20,21,22,23,194,24,25,26,27,195,196,197,28,198,199,200,201,29,202,176,203,177,30,31,32,33,204,205,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,206,51,207,208,209,210,52,211,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,212,213,214,215,69,216,217,218,219,70,220,221,222,223,224,225,226,71,72,73,227,228,74,229,75,76,77,78,230,79,80,81,82,231,83,84,85,86,232,87,88,233,0,89,90,91,92,1,93,94,234,235,95,96,2,97,236,237,238,239,240,241,242,243,244,245,246,247,248,98,99,100,101,102,103,104,105,106,249,250,251,107,108,252,253,254,255,256,257,109,258,259,260,261,110,262,263,264,111,265,266,267,112,113,114,268,269,115,270,271,272,116,273,274,275,276,277,278,279,280,281,282,283,284,285,117,118,119,120,121,122,286,287,288,289,290,291,292,123,293,294,124,295,296,125,297,126,128,298,299,300,301,302,303,129,130,131,304,132,133,134,305,135,136,137,138,306,307,308,309,310,139,311,140,141,312,142,143,313,314,315,316,317,144,145,146,318,319,320,321,322,323,147,324,148,325,326,327,149,328,329,330,331,150,332,333,334,335,336,337,151,152,338,153,339,340,154,341,342,155,156,157,158,159],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:213","sourceCode":"return org.easymock.internal.RecordState.createNumberObject(java.lang.Object, java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"o"}},{"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[343,344],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[345,346],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"shouldBeUsedInOneThread"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[313],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:159","sourceCode":"final java.lang.ClassCastException java.lang.ClassCastException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[313],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:612","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"failures":[347,348,349,350,351,352,5,353,354,355,356,357,358,359,360,361,362,363,162,6,180,181,7,8,9,182,10,11,183,184,185,186,187,188,189,13,14,190,191,15,192,16,17,18,19,193,20,21,22,23,194,24,25,26,27,195,196,197,28,198,199,200,201,29,30,31,32,33,204,205,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,206,207,208,210,52,211,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,215,69,216,217,218,219,70,220,221,222,223,225,226,71,72,73,227,228,74,229,75,76,77,78,230,79,80,81,82,231,83,84,85,86,232,87,88,233,0,89,90,91,92,1,93,94,95,96,2,97,236,237,238,239,240,241,242,243,98,99,100,101,102,103,104,105,106,249,250,251,107,364,262,263,264,111,265,266,267,112,113,114,268,269,115,270,271,272,116,273,274,275,276,277,278,279,280,281,282,285,117,118,119,120,121,122,286,287,288,123,293,294,124,125,297,126,298,299,302,303,129,130,131,304,365,132,133,134,305,135,136,137,138,306,307,309,310,139,311,140,141,312,142,143,313,314,315,316,317,144,145,146,318,319,320,321,322,323,147,324,148,325,326,327,328,329,330,331,150,332,333,334,335,336,337,151,152,338,340,154,341,155,156,157,158,159],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:90","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[366,367,368],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[347,348,349,350,351,352,353,354,355,356,357,358,360,361,362,363,162,6,180,181,8,369,187,188,189,13,14,190,191,15,192,16,17,18,19,193,20,21,22,23,194,24,25,26,27,196,28,200,201,29,30,32,33,34,47,48,49,50,210,211,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,215,69,216,217,218,219,222,223,226,71,72,73,227,228,74,229,75,76,77,78,230,79,80,81,82,231,83,84,85,86,232,87,88,89,237,238,98,99,100,101,102,103,104,105,106,249,250,251,107,364,262,264,111,266,267,114,115,272,116,275,276,277,278,279,280,281,282,285,117,118,119,120,121,122,286,287,288,123,294,124,298,299,302,303,129,130,365,132,133,134,305,135,136,137,138,306,307,309,310,139,311,140,141,312,142,143,313,314,315,317,144,145,146,318,320,321,322,323,324,148,326,328,329,330,331,332,333,334,335,336,337,338,340,154,155,156,157,158,159],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:328","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[37,370,235],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksControl:190","failures":[180,184,226,233,236,237,239,240,241,242,243,254,260,261,267,269,305,306,307,309,311,313,314,315,317,319,326,337],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:35","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(short.short, java.lang.Short.java.lang.Short)","type":"CtInvocationImpl"},"failures":[172],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[371,372,328,329,330,331,150,332,333,334,336,373,337,151,152,338],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:70","sourceCode":"java.lang.Class<?>[][int] = java.lang.Class<?>","type":"CtAssignmentImpl"},"failures":[374,286,287],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:275","sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":305,"org.easymock.tests2.UsageTest.argumentsOrdered":269,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":7,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":260,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":367,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":56,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":267,"org.easymock.tests2.StubTest.stubWithReturnValue":107,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":164,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":317,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":19,"org.easymock.tests2.SerializationTest.testAllMockedMethod":288,"org.easymock.tests2.DelegateToTest.testReturnException":340,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":234,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":54,"org.easymock.tests.MockingTest.testPartialClassMocking":187,"org.easymock.tests.MockClassControlTest.testToString":90,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":343,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":177,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":80,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":374,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":290,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":235,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":72,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":283,"org.easymock.tests.UsageExpectAndThrowTest.object":230,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":314,"org.easymock.tests2.DelegateToTest.testWrongClass":341,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":166,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":87,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":88,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":307,"org.easymock.tests2.UsageTest.wrongArguments":265,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":32,"org.easymock.tests.UsageStrictMockTest.range":199,"org.easymock.samples.ConstructorCalledMockTest.testTax":3,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":49,"org.easymock.samples.ExampleTest.answerVsDelegate":348,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":109,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":128,"org.easymock.tests2.UsageConstraintsTest.testNull":136,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":321,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":79,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":295,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":259,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":94,"org.easymock.tests2.CaptureTest.testPrimitive":331,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":34,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":86,"org.easymock.tests.UsageTest.moreThanOneArgument":8,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":45,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":183,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":320,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":48,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":100,"org.easymock.tests2.CaptureTest.testCaptureNone":335,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":203,"org.easymock.tests.UsageUnorderedTest.message":233,"org.easymock.tests.UsageVerifyTest.twoReturns":181,"org.easymock.tests.UsageVarargTest.varargByteAccepted":362,"org.easymock.tests2.ThreadingTest.testThreadSafe":129,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":244,"org.easymock.tests.UsageTest.argumentsOrdered":184,"org.easymock.tests.UsageVarargTest.varargIntAccepted":356,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":219,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":370,"org.easymock.tests2.CaptureTest.testCapture_2617107":330,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":59,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":123,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":171,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":369,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":205,"org.easymock.tests2.UsageConstraintsTest.any":309,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":124,"org.easymock.tests2.StubTest.stub":251,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":42,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":214,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":63,"org.easymock.tests.UsageExpectAndThrowTest.longType":228,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":55,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":173,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":41,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":273,"org.easymock.tests2.SerializationTest.testClass":286,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":149,"org.easymock.tests.LimitationsTest.mockNativeMethod":232,"org.easymock.tests.ReplayStateInvalidUsageTest.times":43,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":153,"org.easymock.tests2.AnswerTest.answer":282,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":224,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":27,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":308,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":122,"org.easymock.tests2.CaptureTest.testAnd":328,"org.easymock.tests2.UsageTest.strictResetToDefault":264,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":276,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":148,"org.easymock.tests2.NameTest.nameForMocksControl":281,"org.easymock.tests2.MockedExceptionTest.testMockedException":157,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":99,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":255,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":105,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":11,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":248,"org.easymock.tests2.DelegateToTest.testDelegate":155,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":74,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":189,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":318,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":296,"org.easymock.tests.MockingTest.testNicePartialClassMocking":188,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":231,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":323,"org.easymock.tests2.CaptureTest.testCaptureLast":334,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":57,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":12,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":306,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":303,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":315,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":68,"org.easymock.tests.MockingTest.testTwoMocks":186,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":160,"org.easymock.tests2.CaptureTest.testCapture1_2446744":150,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":13,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":81,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":77,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":120,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":268,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":145,"org.easymock.tests.UsageThrowableTest.throwError":236,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":37,"org.easymock.samples.ExampleTest.removeNonExistingDocument":5,"org.easymock.tests.UsageStrictMockTest.differentMethods":200,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":39,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":366,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":131,"org.easymock.tests2.MockBuilderTest.testCreateMockString":126,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":0,"org.easymock.tests.UsageExpectAndThrowTest.floatType":227,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":102,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":312,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":285,"org.easymock.tests.UsageVerifyTest.twoThrows":180,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":291,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":38,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":60,"org.easymock.samples.ExampleTest.voteAgainstRemoval":350,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":202,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":176,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":326,"org.easymock.tests2.UsageTest.niceToStrict":266,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":73,"org.easymock.tests2.UsageConstraintsTest.testNotNull":144,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":243,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":156,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":294,"org.easymock.tests2.UsageTest.defaultResetToNice":114,"org.easymock.tests2.MockBuilderTest.testCreateMock":125,"org.easymock.samples.ExampleTest.voteAgainstRemovals":347,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":194,"org.easymock.tests.UsageVarargTest.differentLength":359,"org.easymock.tests2.CallbackTest.callback":262,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":179,"org.easymock.tests.UsageTest.openCallCountByLastCall":10,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":78,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":256,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":132,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":215,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":204,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":47,"org.easymock.tests.UsageCallCountTest.tooFewCalls":217,"org.easymock.tests.UsageOverloadedMethodTest.overloading":226,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":208,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":140,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":300,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":225,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":20,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":311,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":336,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":50,"org.easymock.tests.UsageThrowableTest.throwCheckedException":240,"org.easymock.tests2.EasyMockSupportClassTest.testAll":289,"org.easymock.tests.MockClassControlTest.testEquals":93,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":223,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":84,"org.easymock.tests2.CaptureTest.testCaptureAll":329,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":66,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":121,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":302,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":31,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":368,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":299,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":44,"org.easymock.tests2.UsageConstraintsTest.testMatches":141,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":301,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":118,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":35,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":101,"org.easymock.tests.ObjectMethodsTest.testHashCode":2,"org.easymock.samples.ExampleTest.voteForRemovals":352,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":170,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":365,"org.easymock.tests2.NameTest.nameForNiceMock":280,"org.easymock.tests.UsageVarargTest.allKinds":162,"org.easymock.tests2.DependencyTest.testInterfaceMocking":364,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":6,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":168,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":67,"org.easymock.samples.ExampleTest.addDocument":351,"org.easymock.tests2.DelegateToTest.testStubDelegate":154,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":242,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":271,"org.easymock.tests2.AnswerTest.stubAnswer":117,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":342,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":58,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":28,"org.easymock.tests2.UsageConstraintsTest.greaterThan":142,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":172,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":104,"org.easymock.tests.UsageVarargTest.varargLongAccepted":361,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":327,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":201,"org.easymock.samples.ExampleTest.voteForRemoval":349,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":130,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":26,"org.easymock.tests.UsageExpectAndReturnTest.floatType":190,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":277,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":147,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":4,"org.easymock.tests.UsageThrowableTest.noUpperLimit":237,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":209,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":143,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":263,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":211,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":133,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":332,"org.easymock.tests2.SerializationTest.test":287,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":174,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":345,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":253,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":238,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":14,"org.easymock.tests2.UsageConstraintsTest.testSame":137,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":53,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":339,"org.easymock.tests2.CaptureTest.testCaptureFirst":338,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":254,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":270,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":52,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":40,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":17,"org.easymock.tests.GenericTest.testPackageScope":222,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":304,"org.easymock.tests2.UsageTest.moreThanOneArgument":111,"org.easymock.tests2.CaptureTest.testCapture2_2446744":152,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":247,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":297,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":363,"org.easymock.tests2.NameTest.nameForMock":278,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":220,"org.easymock.tests.UsageExpectAndReturnTest.longType":191,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":64,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":108,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":85,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":21,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":316,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":175,"org.easymock.tests2.UsageStrictMockTest.differentMethods":275,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":83,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":213,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":98,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":15,"org.easymock.tests.UsageCallCountTest.tooManyCalls":221,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":82,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":106,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":216,"org.easymock.tests2.MockedExceptionTest.testRealException":159,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":18,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":165,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":229,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":116,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":241,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":33,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":46,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":298,"org.easymock.tests2.NameTest.nameForStrictMock":279,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":69,"org.easymock.tests2.UsageConstraintsTest.testContains":139,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":158,"org.easymock.tests2.UsageConstraintsTest.testFind":135,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":71,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":249,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":322,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":250,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":195,"org.easymock.tests.UsageExpectAndReturnTest.object":193,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":313,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":324,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":293,"org.easymock.tests2.UsageStrictMockTest.range":274,"org.easymock.tests2.UsageConstraintsTest.lessThan":146,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":258,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":358,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":167,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":97,"org.easymock.tests.UsageTest.exactCallCountByLastCall":185,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":30,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":252,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":169,"org.easymock.tests2.CaptureTest.testCaptureRightOne":337,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":245,"org.easymock.tests2.UsageConstraintsTest.testOr":138,"org.easymock.tests.UsageRangeTest.combination":103,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":163,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":354,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":319,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":24,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":207,"org.easymock.tests.UsageTest.wrongArguments":182,"org.easymock.tests.MockClassControlTest.testHashCode":1,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":89,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":192,"org.easymock.tests2.EasyMockSupportTest.testVerify":110,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":22,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":246,"org.easymock.tests.UsageVarargTest.varargShortAccepted":360,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":346,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":206,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":70,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":119,"org.easymock.tests2.UsageConstraintsTest.cmpTo":310,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":127,"org.easymock.tests.UsageVarargTest.varargCharAccepted":357,"org.easymock.tests2.CaptureTest.testCaptureMultiple":372,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":284,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":272,"org.easymock.tests2.UsageTest.openCallCountByLastCall":112,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":113,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":261,"org.easymock.tests.DefaultClassInstantiatorTest.object":95,"org.easymock.tests2.CaptureTest.testCaptureFromStub":151,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":36,"org.easymock.tests.UsageTest.unexpectedCallWithArray":9,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":96,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":76,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":239,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":197,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":218,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":344,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":178,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":23,"org.easymock.tests2.CaptureTest.testCapture":373,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":325,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":198,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":92,"org.easymock.tests2.UsageConstraintsTest.constraints":134,"org.easymock.samples.ExampleTest.addAndChangeDocument":353,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":75,"org.easymock.tests.CapturesMatcherTest.test":371,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":25,"org.easymock.tests.UsageStrictMockTest.testVerify":29,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":292,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":196,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":91,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":65,"org.easymock.tests2.CompareToTest.testGreateThan":161,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":333,"org.easymock.tests2.UsageTest.resumeIfFailure":115,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":61,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":16,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":210,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":62,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":355,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":257}}]

[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:88","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field)","position":"org.easymock.internal.InjectionPlan:71","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:168","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.Mock == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:113","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:52","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.Result(new ReturningAnswer() , true)","position":"org.easymock.internal.Result:71","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new java.util.concurrent.locks.ReentrantLock()","position":"org.easymock.internal.ReplayState:32","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:76","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.ErrorMessage.isMatching()) {\n    int++;\n} ","position":"org.easymock.internal.MocksBehavior:131","type":"CtIfImpl"},"status":-2},{"failures":[0,1],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","position":"org.easymock.EasyMock:2189","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","position":"org.easymock.internal.RecordState:245","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:80","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:117","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","position":"org.easymock.internal.RecordState:107","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"org.easymock.internal.ReflectionUtils.OBJECT_TOSTRING","method":"org.easymock.internal.ReflectionUtils.OBJECT_TOSTRING"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:52","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Compare:52","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"or(\")","position":"org.easymock.internal.matchers.Or:47","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:91","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:119","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"-5418279681566430252L","position":"org.easymock.internal.RecordState:31","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResult org.easymock.internal.ExpectedInvocationAndResult : java.util.List<org.easymock.internal.ExpectedInvocationAndResult>) {\n    if (org.easymock.internal.ExpectedInvocationAndResult.getExpectedInvocation().matches(org.easymock.internal.Invocation)) {\n        return org.easymock.internal.ExpectedInvocationAndResult.getResult();\n    } \n}","position":"org.easymock.internal.MocksBehavior:65","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2039","type":"CtInvocationImpl"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:267","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.StringBuilder.toString()","position":"org.easymock.internal.ArgumentToString:95","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","position":"org.easymock.internal.ObjectMethodsFilter:88","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:112","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType()))","position":"org.easymock.internal.BridgeMethodResolver:285","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:68","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.IArgumentMatcher.matches(java.lang.Object)) {\n    return true;\n} ","position":"org.easymock.internal.matchers.Or:39","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"(((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size()))","name":"math","position":"org.easymock.internal.ExpectedInvocation:48","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)","position":"org.easymock.internal.RecordState:336","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n    if (!(java.lang.Object.equals(java.lang.Object))) {\n        return false;\n    } \n} else {\n    if (java.lang.Object != java.lang.Object) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:121","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(double[]))","position":"org.easymock.EasyMock:1620","type":"CtInvocationImpl"},"status":-2},{"failures":[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Number.doubleValue()","position":"org.easymock.internal.RecordState:205","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.intValue()","position":"org.easymock.internal.RecordState:199","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:109","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1459","type":"CtReturnImpl"},"status":-2},{"failures":[70,71,72,73,74],"binaryOperator":"(70 * ((int - int) + 1))","name":"math","position":"org.easymock.internal.MocksBehavior:119","type":"mutation","status":-1},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1052","type":"mutation","return":"return 0","status":0},{"failures":[62,75,65,66,67],"variableMapping":{"toMock":"toMock","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","position":"org.easymock.internal.MocksControl:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","position":"org.easymock.internal.MocksControl:93","type":"CtReturnImpl"},"status":-1},{"failures":[76,77,78,79,41,42,43,44,45,80,2,81,46,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,47,120,48,49,121,50,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,51,162,163,164,165,166,167,168,169,170,171,53,172,54,55,56,71,57,58,59,60,61,62,63,173,174,175,176,3,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,198,199,199,64,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,9,237,10,11,12,13,14,15,238,16,65,66,67,239,240,241,68,242,243,244,245,246,247,248,17,249,250,251,252,18,253,69,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,19,278,279,280,281,282,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,283,40,284,74,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:213","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.MocksBehavior:89","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ","position":"org.easymock.internal.RecordState:298","type":"CtReturnImpl"},"status":-2},{"failures":[307,308],"variableMapping":{"this":"this","mockName":"mockName"},"name":"replace","transplant":{"sourceCode":"if ((((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:195","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","position":"org.easymock.EasyMock:557","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:275","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"stack":"stack"},"name":"add","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>()","position":"org.easymock.internal.LastControl:62","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:63","type":"CtInvocationImpl"},"status":0},{"failures":[76,78,79,41,42,43,44,45,2,81,46,82,83,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,309,109,110,111,112,115,117,118,47,120,48,49,121,50,122,310,124,311,129,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,151,152,153,154,156,157,158,159,160,161,51,162,163,168,169,170,52,53,54,55,56,57,58,59,60,61,62,63,3,177,178,180,182,183,184,187,188,191,192,193,194,196,64,201,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,312,313,4,236,9,10,11,12,13,14,15,314,238,16,65,66,67,239,240,315,241,68,242,243,244,17,250,251,253,69,263,265,266,275,276,277,19,278,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,284,286,287,290,291,292,293,294,295],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:297","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:289","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:185","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1176","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))) {\n    return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:93","type":"CtIfImpl"},"status":-2},{"failures":[2,87,88,89,90,91,93,94,95,96,97,99,100,101,102,103,104,105,106,107,108,109,111,112,113,115,117,118,132,133,134,135,136,137,139,140,141,142,144,145,146,147,148,149,150,151,153,154,156,157,163,56,179,180,181,185,186,9,237,11,12,13,14,15,238,250,18,260,262,263,265,266,275,285,288,289,291],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.MocksBehavior:108","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:57","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.Invocation:221","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.MockBuilder:140","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"binaryOperator":"(((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\")","name":"math","position":"org.easymock.internal.ExpectedInvocation:48","type":"mutation","status":-2},{"failures":[100],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:39","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:747","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n    java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:384","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)))","position":"org.easymock.internal.ClassProxyFactory:227","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:734","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this","mockedMethods":"mockedMethods"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:206","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.Results.getMainInterval()","position":"org.easymock.internal.Results:81","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","position":"org.easymock.internal.ReplayState:59","type":"CtTryImpl"},"status":-2},{"failures":[257],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:234","type":"CtThrowImpl"},"status":-1},{"failures":[84],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n    try {\n        java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n    } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n        throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:115","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size())","position":"org.easymock.internal.ClassProxyFactory:114","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Any:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","position":"org.easymock.internal.ErrorMessage:50","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:632","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new org.easymock.internal.MocksControl.MockType(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.internal.MocksControl:48","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n    try {\n        java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n    } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n        throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:115","type":"CtForEachImpl"},"status":-2},{"failures":[184],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","position":"org.easymock.EasyMock:2011","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","position":"org.easymock.EasyMock:2038","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksBehavior.addBehaviorListIfNecessary(org.easymock.internal.ExpectedInvocation)","position":"org.easymock.internal.MocksBehavior:60","type":"CtInvocationImpl"},"status":-2},{"failures":[108],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Float>(float))","position":"org.easymock.EasyMock:1025","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:840","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","position":"org.easymock.internal.LastControl:37","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.reset();\n}","position":"org.easymock.EasyMockSupport:551","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * This class was kept here for compabitility reason with frameworks using EasyMock\n * @deprecated Use org.easymock.MockType\n */\n@java.lang.Deprecated\npublic enum MockType {\nNICE(org.easymock.MockType.NICE), DEFAULT(org.easymock.MockType.DEFAULT), STRICT(org.easymock.MockType.STRICT);\n    public org.easymock.MockType realType;\n    MockType(final org.easymock.MockType realType) {\n        this.org.easymock.MockType = org.easymock.MockType;\n    }}","position":"org.easymock.internal.MocksControl:46","type":"CtEnumImpl"},"status":-2},{"failures":[316],"variableMapping":{"result":"genericType","bound":"genericType"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:355","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:260","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount())","position":"org.easymock.internal.UnorderedBehavior:93","type":"CtLocalVariableImpl"},"status":-2},{"failures":[317,177],"variableMapping":{"this":"this","mock":"mock"},"name":"replace","transplant":{"sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).verify()","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","position":"org.easymock.EasyMock:2053","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"-7799769066534714634L","position":"org.easymock.internal.MockInvocationHandler:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5160559075998939348L","position":"org.easymock.internal.matchers.Not:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.internal.LastControl:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:665","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:77","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"org.easymock.internal.MocksBehavior:124","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:75","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:323","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","position":"org.easymock.internal.ReflectionUtils:230","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.Mock == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:113","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"method","method":"method"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.Invocation:211","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasResults())) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:53","type":"CtIfImpl"},"status":-2},{"failures":[318,319,320],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return \"Delegated to \" + java.lang.Object","position":"org.easymock.internal.Result:95","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.IAnswer<?>.toString()","position":"org.easymock.internal.Result:115","type":"CtReturnImpl"},"status":-1},{"failures":[84,85,86,321],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","position":"org.easymock.internal.MethodSerializationWrapper:69","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Method.getDeclaringClass().getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:157","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","position":"org.easymock.internal.MocksControl:196","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:185","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.LastControl.threadToControl":"org.easymock.internal.LastControl.threadToControl"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove()","position":"org.easymock.internal.LastControl:51","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","position":"org.easymock.internal.LastControl:49","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Results:57","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.ClassProxyFactory:90","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.IllegalArgumentException java.lang.IllegalArgumentException","position":"org.easymock.internal.Result:85","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:196","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Results.add(org.easymock.internal.Result, org.easymock.internal.Range)","position":"org.easymock.internal.UnorderedBehavior:45","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","position":"org.easymock.EasyMock:2025","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","position":"org.easymock.internal.RecordState:102","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","position":"org.easymock.internal.DefaultClassInstantiator:63","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1673","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:412","type":"CtWhileImpl"},"status":-2},{"failures":[322],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((this.java.lang.Object[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:114","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.ExpectedInvocation","position":"org.easymock.internal.ExpectedInvocationAndResults:37","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","position":"org.easymock.EasyMock:2052","type":"CtForEachImpl"},"status":-2},{"failures":[],"binaryOperator":"(java.lang.String + \".\") + java.lang.String","name":"math","position":"org.easymock.internal.Invocation:154","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:195","type":"CtIfImpl"},"status":-2},{"failures":[297,306],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.AndroidClassProxyFactory:80","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isVarArgs()) {\n    int = java.lang.Math.java.lang.Math.min(int, ((java.lang.Class<?>[].int) - 1));\n} ","position":"org.easymock.internal.Invocation:136","type":"CtIfImpl"},"status":-1},{"failures":[323,104],"variableMapping":{"count":"result","maximum":"result","minimum":"result"},"name":"replace","transplant":{"sourceCode":"return (int <= int) && (int <= int)","position":"org.easymock.internal.Range:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return ((int) <= int) && (int <= (int))","position":"org.easymock.internal.Range:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName()))) && (java.lang.StackTraceElement[][2].getMethodName().equals(\"invoke\"))","position":"org.easymock.internal.ClassProxyFactory:157","type":"CtReturnImpl"},"status":-2},{"failures":[324],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"))","position":"org.easymock.internal.DefaultClassInstantiator:191","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:81","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","position":"org.easymock.internal.RecordState:234","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeShort(0)","position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return true","position":"org.easymock.internal.ExpectedInvocation:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:209","type":"CtIfImpl"},"status":0},{"failures":[325],"variableMapping":{"result":"result","i":"i"},"name":"add","transplant":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:90","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","position":"org.easymock.internal.ArgumentToString:93","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:324","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:326","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:105","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:172","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:88","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","position":"org.easymock.EasyMock:2125","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)","position":"org.easymock.internal.InjectionTarget:62","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1940","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.easymock.internal.ErrorMessage:44","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(byte.byte, java.lang.Byte.java.lang.Byte)","position":"org.easymock.internal.ReflectionUtils:34","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>, java.lang.Boolean.java.lang.Boolean)","position":"org.easymock.internal.RecordState:45","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"stack":"stack"},"name":"add","transplant":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:70","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"status":0},{"failures":[322],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.ClassNotFoundException java.lang.ClassNotFoundException","position":"org.easymock.internal.DefaultClassInstantiator:46","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:70","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((this.java.lang.Object[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:114","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1234","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ReturningAnswer() , true)","position":"org.easymock.internal.Result:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.util.LinkedList<org.easymock.internal.Range>.size()) ; int++) {\n    final org.easymock.internal.Range org.easymock.internal.Range = java.util.LinkedList<org.easymock.internal.Range>.get(int);\n    if (org.easymock.internal.Range.hasOpenCount()) {\n        int += 1;\n        return java.util.List<org.easymock.internal.Result>.get(int);\n    } \n    int += org.easymock.internal.Range.getMaximum();\n    if (int > (int)) {\n        int += 1;\n        return java.util.List<org.easymock.internal.Result>.get(int);\n    } \n}","position":"org.easymock.internal.Results:65","type":"CtForImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.JavaProxyFactory()","position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>))","position":"org.easymock.internal.AndroidClassProxyFactory:53","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection)","position":"org.easymock.internal.Injector:193","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator()","position":"org.easymock.internal.AndroidClassProxyFactory:47","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:225","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:450","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:93","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:86","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object)","position":"org.easymock.internal.MocksControl:156","type":"CtLocalVariableImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":11,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":122,"org.easymock.tests2.MockedExceptionTest.testRealException":130,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":264,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":261,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":35,"org.easymock.tests.UsageVarargTest.varargIntAccepted":299,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":275,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":87,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":45,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":203,"org.easymock.tests2.UsageConstraintsTest.testContains":99,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":255,"org.easymock.tests2.UsageConstraintsTest.testFind":91,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":75,"org.easymock.tests2.CompareToTest.testGreateThan":323,"org.easymock.tests2.StubTest.stubWithReturnValue":2,"org.easymock.tests.UsageVarargTest.allKinds":306,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":149,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":282,"org.easymock.tests2.CaptureTest.testCaptureAll":145,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":239,"org.easymock.samples.ExampleTest.addAndChangeDocument":197,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":171,"org.easymock.tests.UsageVarargTest.varargCharAccepted":300,"org.easymock.tests2.CaptureTest.testCaptureFromStub":155,"org.easymock.tests.UsageVerifyTest.twoThrows":19,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":251,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":301,"org.easymock.tests2.DelegateToTest.testReturnException":81,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":181,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":103,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":142,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":114,"org.easymock.tests2.CaptureTest.testAnd":144,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":259,"org.easymock.tests.UsageStrictMockTest.testVerify":268,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":28,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":153,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":313,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":32,"org.easymock.tests2.UsageConstraintsTest.testMatches":102,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":211,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":324,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":57,"org.easymock.tests2.UsageConstraintsTest.testNull":92,"org.easymock.tests2.EasyMockSupportClassTest.testAll":41,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":136,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":36,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":228,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":168,"org.easymock.tests.UsageThrowableTest.throwError":9,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":235,"org.easymock.tests2.UsageConstraintsTest.greaterThan":104,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":297,"org.easymock.samples.SupportTest.addDocument":200,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":253,"org.easymock.tests2.StubTest.stub":80,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":257,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":256,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":243,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":250,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":106,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":139,"org.easymock.tests.UsageExpectAndReturnTest.object":225,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":234,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":305,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":119,"org.easymock.tests.UsageExpectAndThrowTest.object":30,"org.easymock.tests2.DelegateToTest.testWrongClass":82,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":161,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":247,"org.easymock.tests2.UsageTest.moreThanOneArgument":178,"org.easymock.tests.UsageVarargTest.varargByteAccepted":304,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":27,"org.easymock.samples.ExampleTest.voteAgainstRemoval":194,"org.easymock.tests.UsageTest.wrongArguments":285,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":213,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":14,"org.easymock.tests.UsageVarargTest.varargShortAccepted":302,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":31,"org.easymock.tests2.UsageTest.defaultResetToNice":184,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":129,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":242,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":51,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":202,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":55,"org.easymock.tests2.MockBuilderTest.testCreateMock":70,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":162,"org.easymock.tests2.SerializationTest.testAllMockedMethod":86,"org.easymock.tests2.NameTest.nameForMocksControl":176,"org.easymock.samples.ExampleTest.voteAgainstRemovals":191,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":113,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":293,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":18,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":314,"org.easymock.tests2.CaptureTest.testCapture1_2446744":148,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":188,"org.easymock.tests2.DelegateToTest.testStubDelegate":46,"org.easymock.tests.LimitationsTest.mockNativeMethod":69,"org.easymock.tests.UsageUnorderedTest.message":283,"org.easymock.samples.ExampleTest.answerVsDelegate":192,"org.easymock.samples.ExampleTest.voteForRemoval":193,"org.easymock.tests.UsageCallCountTest.tooFewCalls":207,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":224,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":77,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":209,"org.easymock.tests.UsageVerifyTest.twoReturns":278,"org.easymock.tests2.ThreadingTest.testChangeDefault":1,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":29,"org.easymock.tests2.DependencyTest.testInterfaceMocking":169,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":219,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":131,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":236,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":246,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":134,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":167,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":95,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":267,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":279,"org.easymock.tests2.CaptureTest.testCaptureRightOne":154,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":221,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":206,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":254,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":280,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":127,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":50,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":292,"org.easymock.tests.ResultTest.createDelegateResultToString":318,"org.easymock.tests2.UsageConstraintsTest.cmpTo":98,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":204,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":226,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":59,"org.easymock.tests2.MockedExceptionTest.testMockedException":128,"org.easymock.tests.UsageThrowableTest.throwCheckedException":12,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":39,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":109,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":271,"org.easymock.samples.PartialClassMockTest.testGetArea":64,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":277,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":10,"org.easymock.samples.ExampleTest.voteForRemovals":196,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":16,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":101,"org.easymock.samples.ConstructorCalledMockTest.testTax":198,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":4,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":248,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":121,"org.easymock.tests2.UsageTest.argumentsOrdered":186,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":40,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":79,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":220,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":210,"org.easymock.tests2.AnswerTest.answer":76,"org.easymock.tests.MockingTest.testNicePartialClassMocking":66,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":263,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":216,"org.easymock.tests2.UsageConstraintsTest.any":97,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":223,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":244,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":273,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":141,"org.easymock.tests.ResultTest.createThrowResultToString":320,"org.easymock.tests.UsageExpectAndThrowTest.longType":23,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":37,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":126,"org.easymock.tests2.CallbackTest.callback":163,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":43,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":138,"org.easymock.tests2.NameTest.nameForMock":173,"org.easymock.tests.UsageTest.argumentsOrdered":289,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":54,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":90,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":100,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":233,"org.easymock.tests2.MockBuilderTest.testCreateMockString":71,"org.easymock.tests2.NameTest.nameForStrictMock":174,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":252,"org.easymock.tests2.CaptureTest.testCaptureNone":152,"org.easymock.tests2.SerializationTest.test":85,"org.easymock.tests.UsageExpectAndReturnTest.longType":218,"org.easymock.tests2.SerializationTest.testClass":84,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":150,"org.easymock.tests2.CaptureTest.testCaptureFirst":157,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":107,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":189,"org.easymock.tests2.EasyMockSupportTest.testVerify":143,"org.easymock.tests2.UsageTest.niceToStrict":180,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":245,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":214,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":172,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":260,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":25,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":309,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":3,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":33,"org.easymock.tests2.UsageTest.strictResetToDefault":177,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":56,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":124,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":232,"org.easymock.tests.GenericTest.testBridgedEquals":316,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":325,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":276,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":20,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":96,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":61,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":222,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":164,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":49,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":105,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":298,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":47,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":249,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":67,"org.easymock.tests2.UsageConstraintsTest.testOr":94,"org.easymock.tests2.DelegateToTest.testDelegate":83,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":160,"org.easymock.tests2.UsageConstraintsTest.testNotNull":110,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":116,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":158,"org.easymock.tests2.CaptureTest.testCapture_2617107":146,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":307,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":258,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":15,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":227,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":240,"org.easymock.tests2.ThreadingTest.testThreadSafe":159,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":183,"org.easymock.tests.UsageThrowableTest.noUpperLimit":237,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":270,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":58,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":60,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":140,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":132,"org.easymock.tests.UsageExpectAndReturnTest.floatType":217,"org.easymock.tests2.UsageTest.wrongArguments":179,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":166,"org.easymock.tests2.UsageConstraintsTest.testSame":93,"org.easymock.tests2.UsageTest.resumeIfFailure":187,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":62,"org.easymock.tests.UsageOverloadedMethodTest.overloading":238,"org.easymock.samples.SupportTest.voteForRemovals":201,"org.easymock.tests.UsageRangeTest.combination":291,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":13,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":7,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":199,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":111,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":296,"org.easymock.tests.UsageTest.openCallCountByLastCall":286,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":26,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":308,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":6,"org.easymock.tests2.NameTest.nameForNiceMock":175,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":294,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":108,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":269,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":115,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":48,"org.easymock.tests2.CaptureTest.testPrimitive":147,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":229,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":34,"org.easymock.samples.BasicClassMockTest.testPrintContent":190,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":281,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":241,"org.easymock.tests.UsageExpectAndThrowTest.floatType":22,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":123,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":0,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":120,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":125,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":230,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":205,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":317,"org.easymock.tests2.UsageStrictMockTest.differentMethods":118,"org.easymock.tests.UsageTest.exactCallCountByLastCall":290,"org.easymock.tests2.AnswerTest.stubAnswer":78,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":133,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":137,"org.easymock.tests2.CaptureTest.testCaptureLast":151,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":21,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":72,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":208,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":42,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":170,"org.easymock.tests.UsageStrictMockTest.range":265,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":287,"org.easymock.tests.UsageTest.unexpectedCallWithArray":74,"org.easymock.tests.MockingTest.testPartialClassMocking":65,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":231,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":8,"org.easymock.tests.MatchableArgumentsTest.testEquals":322,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":185,"org.easymock.tests2.UsageConstraintsTest.constraints":89,"org.easymock.samples.ExampleTest.addDocument":195,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":73,"org.easymock.tests2.UsageConstraintsTest.lessThan":112,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":165,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":288,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":312,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":272,"org.easymock.tests.UsageVarargTest.varargLongAccepted":303,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":310,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":311,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":262,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":38,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":44,"org.easymock.tests2.UsageStrictMockTest.range":117,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":63,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":212,"org.easymock.tests.UsageTest.moreThanOneArgument":284,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":68,"org.easymock.tests2.UsageTest.openCallCountByLastCall":182,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":52,"org.easymock.tests.UsageStrictMockTest.differentMethods":266,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":135,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":88,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":274,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":53,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":24,"org.easymock.tests.ResultTest.createReturnResultToString":319,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":315,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":321,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":215,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":17,"org.easymock.tests2.CaptureTest.testCapture2_2446744":156,"org.easymock.tests.GenericTest.testPackageScope":295}}]

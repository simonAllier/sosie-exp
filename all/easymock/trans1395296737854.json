[{"transplant":{"position":"org.easymock.Capture:117","sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,1,91,2,3,4,5,6,7,92,8,10,11,93,12,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,1,91,2,3,4,5,6,7,92,8,10,11,93,12,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[13,14,14,15,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,76,79,80,81,82,86,87,1,91,2,3,4,5,6,7,92,8,10,11,93,12,94,95,96,97,98,99,100,102,103,104,105,106,107,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,173,174,175,176,177,180,181,183,184,187,188,189,191,192,194,196,197,198,199,200,203,205,206,208,209,212,213,214,215,216,218,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,315,317,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,356,357,358,359,360,361,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[31,83,490,491,492,493,494],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[13,14,14,15,15,25,26,30,74,495,76,77,80,81,82,84,87,88,496,90,94,95,97,98,99,100,102,105,106,107,108,118,178,179,180,181,184,185,497,203,206,216,222,238,240,287,288,289,291,312,317,344,380,381,382,424,433],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"parameterType","type":"parameterType"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[357,361],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:61","failures":[38,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,1,91,2,3,4,5,6,7,92,8,10,11,93,12,102,114,150,233,364,368,369,422,435,436,437,438,439,444,445,446,447,448,462,476,477,480,481],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:67","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","type":"CtThrowImpl"},"failures":[498],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[134,233,236,237,245,249,250,252,255,325,329,336,464,465,466,481,484,485],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[357,361],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:62","failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,79,80,81,82,84,85,86,87,88,90,1,91,2,3,4,5,6,7,92,8,10,11,93,12,498,499,500,501,502,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,503,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,356,357,358,359,360,361,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489],"status":-1,"binaryOperator":"java.io.InputStream != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:411","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"cls"}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[44,50,228,422,436],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"actual":"expected"}},{"position":"org.easymock.EasyMock:1319","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ClassProxyFactory:191","failures":[13,25,26,74,76,77,79,80,81,82,84,87,88,90,94,95,97,98,99,100,102,104,105,106,107,108,109,110,116,117,118,169,173,178,179,181,184,200,201,203,205,206,207,208,209,211,212,213,214,216,217,218,219,220,221,222,240,285,286,287,288,289,291,294,312,317,344,356,357,358,359,360,361,363,379,380,381,382,383,423,424,425,426,427,428,429,430,431,432,433,434],"status":-1,"binaryOperator":"org.easymock.ConstructorArgs != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:32","sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[526],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:279","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[227,400],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[135,141,142,235,326,527,337,338,341,342,364,465,466,480,483],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"failures":[13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,38,40,41,42,43,44,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,80,81,82,84,87,88,90,1,91,2,3,4,5,6,7,92,8,10,11,93,12,94,95,96,97,98,99,100,102,105,106,107,108,111,112,114,115,116,117,118,119,125,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,156,164,165,166,168,176,177,178,179,180,181,183,184,185,187,188,189,190,191,192,193,194,195,196,197,198,199,203,206,216,222,225,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,288,289,291,307,308,309,310,311,320,322,323,326,331,333,334,335,336,337,338,339,340,341,342,343,344,350,351,352,353,354,364,368,369,371,372,373,374,375,376,377,378,380,381,384,385,386,411,412,413,415,416,417,418,419,420,421,422,433,435,436,437,438,439,440,441,442,443,444,445,446,447,448,458,459,460,461,462,463,464,465,466,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[59,98],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1277","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:129","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,1,91,2,3,4,5,6,7,92,8,10,11,93,12,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (this.int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (int)","type":"CtReturnImpl"},"failures":[235,236,464,483,484],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"minimum":"minimum"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[135,141,142,235,527,337,338,341,342,364,465,466,480,483],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:355","sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[383],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"failures":[150],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[379],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:334","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.MockBuilder:71","failures":[13,74,76,77,80,81,82,84,87,88,90,100,106,107,110,206,216,222,238,312,317,382],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[238,239,240,528],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:194","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:773","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:116","failures":[],"status":0,"binaryOperator":"(((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1518","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:97","sourceCode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[13,16,18,19,21,29,30,41,42,43,44,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,66,67,68,69,76,80,82,84,88,1,91,3,4,7,92,8,10,93,12,94,95,96,97,98,99,102,106,107,108,111,112,113,114,115,118,125,132,133,134,136,138,139,140,143,144,147,148,156,165,177,178,179,180,181,183,184,185,187,188,189,190,191,192,193,194,195,196,197,198,203,206,216,222,225,229,233,235,236,238,239,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,288,289,291,325,331,332,333,334,335,336,339,340,343,368,371,373,374,375,376,377,378,380,384,385,386,433,435,436,439,444,445,446,447,448,464,466,476,477,481,483,484],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:83","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:183","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[219],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[43,44,47,49,50,52,62,67,1,2,10],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:363","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[113,304],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:416","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[105],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:41","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.And:49","sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[529],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[226,393],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[135,141,142,235,326,527,337,338,341,342,364,465,466,480,483],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1039","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":44,"org.easymock.tests2.UsageTest.argumentsOrdered":142,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":335,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":197,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":126,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":397,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":137,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":24,"org.easymock.tests2.DelegateToTest.testReturnException":164,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":459,"org.easymock.tests.MockingTest.testPartialClassMocking":288,"org.easymock.tests.MockClassControlTest.testToString":425,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":33,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":450,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":406,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":110,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":210,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":206,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":241,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":148,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":525,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":490,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":51,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":435,"org.easymock.tests2.UsageTest.wrongArguments":135,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":162,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":442,"org.easymock.samples.ExampleTest.answerVsDelegate":17,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":317,"org.easymock.tests2.UsageConstraintsTest.testNull":47,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":293,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":97,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":430,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":196,"org.easymock.tests2.CaptureTest.testPrimitive":3,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":439,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":260,"org.easymock.tests.UsageTest.moreThanOneArgument":336,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":96,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":309,"org.easymock.tests.UsageTest.argumentsOrdered":342,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":345,"org.easymock.tests.UsageVarargTest.varargIntAccepted":413,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":402,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":444,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":494,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":74,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":171,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":130,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":81,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":389,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":448,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":509,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":156,"org.easymock.tests.ReplayStateInvalidUsageTest.times":303,"org.easymock.tests2.DependencyTest.testClassMocking":145,"org.easymock.tests2.AnswerTest.answer":225,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":52,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":404,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":73,"org.easymock.tests2.CaptureTest.testAnd":1,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":314,"org.easymock.tests2.UsageTest.strictResetToDefault":133,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":105,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":78,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":308,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":191,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":333,"org.easymock.tests2.DelegateToTest.testDelegate":168,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":349,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":508,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":256,"org.easymock.tests.LimitationsTest.mockFinalMethod":434,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":462,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":354,"org.easymock.tests2.DependencyTest.testClassMockingSupport":146,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":327,"org.easymock.tests2.CaptureTest.testCapture1_2446744":4,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":101,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":254,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":71,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":297,"org.easymock.tests.UsageThrowableTest.throwError":371,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":316,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":131,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":264,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":311,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":224,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":512,"org.easymock.samples.PartialClassMockTest.testGetArea":13,"org.easymock.tests.MockingTest.testInterfaceMocking":290,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":298,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":445,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":488,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":457,"org.easymock.tests2.UsageTest.niceToStrict":136,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":211,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":242,"org.easymock.tests2.ThreadingTest.testChangeDefault":503,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":526,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":387,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":80,"org.easymock.tests2.MockBuilderTest.testCreateMock":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":219,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":159,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":250,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":192,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":313,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":367,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":467,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":440,"org.easymock.tests.UsageOverloadedMethodTest.overloading":385,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":221,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":57,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":323,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":384,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":276,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":56,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":8,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":414,"org.easymock.tests.MockClassControlTest.testEquals":429,"org.easymock.tests2.EasyMockSupportClassTest.testAll":203,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":381,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":258,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":72,"org.easymock.tests2.CaptureTest.testCaptureAll":91,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":352,"org.easymock.tests.MockNameTest.defaultName":370,"org.easymock.tests2.UsageConstraintsTest.testMatches":58,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":295,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":310,"org.easymock.samples.ExampleTest.voteForRemovals":21,"org.easymock.tests.UsageVarargTest.allKinds":422,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":464,"org.easymock.samples.BasicClassMockTest.testPrintContent":26,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":353,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":377,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":231,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":463,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":167,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":127,"org.easymock.tests2.UsageConstraintsTest.greaterThan":60,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":362,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":204,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":332,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":108,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":513,"org.easymock.samples.ExampleTest.voteForRemoval":18,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":363,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":112,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":109,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":318,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":172,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":100,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":505,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":132,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":344,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":86,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":394,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":189,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":373,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":201,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":458,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":163,"org.easymock.tests2.CaptureTest.testCaptureFirst":12,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":393,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":190,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":144,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":326,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":272,"org.easymock.tests2.UsageTest.moreThanOneArgument":134,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":114,"org.easymock.tests2.CaptureTest.testCapture2_2446744":93,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":405,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":88,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":421,"org.easymock.tests.GenericTest.testBridgedEquals":383,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":474,"org.easymock.tests.UsageExpectAndReturnTest.longType":268,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":187,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":350,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":496,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":259,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":65,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":330,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":257,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":262,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":307,"org.easymock.tests.UsageCallCountTest.tooManyCalls":475,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":469,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":220,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":273,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":161,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":246,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":376,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":179,"org.easymock.tests.MockingTest.testNiceClassMocking":294,"org.easymock.tests.MockingTest.testClassMocking":286,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":495,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":468,"org.easymock.tests2.UsageConstraintsTest.testContains":55,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":118,"org.easymock.tests2.UsageConstraintsTest.testFind":46,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":386,"org.easymock.tests.MockTypeTest.fromEasyMockClass":315,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":478,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":40,"org.easymock.tests.UsageExpectAndReturnTest.object":275,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":102,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":160,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":195,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":491,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":416,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":455,"org.easymock.tests.UsageTest.exactCallCountByLastCall":343,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":368,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":392,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":449,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":346,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":31,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":411,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":281,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":322,"org.easymock.tests.MockClassControlTest.testHashCode":428,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":121,"org.easymock.tests2.EasyMockSupportTest.testVerify":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":213,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":347,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":320,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":366,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":70,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":150,"org.easymock.tests.UsageVarargTest.varargCharAccepted":415,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":355,"org.easymock.tests2.CaptureTest.testCaptureMultiple":0,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":232,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":410,"org.easymock.tests2.UsageTest.openCallCountByLastCall":138,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":198,"org.easymock.tests.DefaultClassInstantiatorTest.object":356,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":365,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":453,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":527,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":214,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":248,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":374,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":154,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":120,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":511,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":427,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":106,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":247,"org.easymock.tests.ReplayStateInvalidCallsTest.times":517,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":282,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":261,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":518,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":426,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":222,"org.easymock.tests2.UsageTest.resumeIfFailure":143,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":312,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":170,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":461,"org.easymock.tests2.StubTest.stubWithReturnValue":177,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":83,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":66,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":274,"org.easymock.tests2.SerializationTest.testAllMockedMethod":240,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":403,"org.easymock.samples.SupportTest.voteForRemovals":29,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":379,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":123,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":253,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":528,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":409,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":226,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":451,"org.easymock.tests.UsageExpectAndThrowTest.object":251,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":63,"org.easymock.tests2.DelegateToTest.testWrongClass":166,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":515,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":476,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":477,"org.easymock.tests.UsageStrictMockTest.range":483,"org.easymock.samples.ConstructorCalledMockTest.testTax":14,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":174,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":194,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":178,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":252,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":82,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":200,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":305,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":341,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":441,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":507,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":489,"org.easymock.tests2.CaptureTest.testCaptureNone":92,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":499,"org.easymock.tests.UsageUnorderedTest.message":364,"org.easymock.tests.UsageVerifyTest.twoReturns":466,"org.easymock.tests.UsageVarargTest.varargByteAccepted":420,"org.easymock.tests2.ThreadingTest.testThreadSafe":111,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":217,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":472,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":456,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":25,"org.easymock.tests2.CaptureTest.testCapture_2617107":2,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":329,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":438,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":407,"org.easymock.tests2.UsageConstraintsTest.any":53,"org.easymock.tests2.StubTest.stub":176,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":302,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":263,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":460,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":408,"org.easymock.tests.UsageExpectAndThrowTest.longType":244,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":360,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":301,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":234,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":125,"org.easymock.tests2.SerializationTest.testClass":238,"org.easymock.tests.LimitationsTest.mockNativeMethod":433,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":284,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":382,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":153,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":523,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":237,"org.easymock.tests2.NameTest.nameForMocksControl":37,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":155,"org.easymock.tests2.MockedExceptionTest.testMockedException":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":205,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":340,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":39,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":245,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":291,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":94,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":84,"org.easymock.tests.MockingTest.testNicePartialClassMocking":289,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":99,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":151,"org.easymock.tests2.CaptureTest.testCaptureLast":7,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":328,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":522,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":185,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":50,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":64,"org.easymock.tests.MockingTest.testTwoMocks":287,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":519,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":186,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":265,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":249,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":141,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":68,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":502,"org.easymock.samples.ExampleTest.removeNonExistingDocument":22,"org.easymock.tests.UsageStrictMockTest.differentMethods":484,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":158,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":299,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":122,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":501,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":358,"org.easymock.tests2.ConstraintsToStringTest.andToString":529,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":113,"org.easymock.tests2.MockBuilderTest.testCreateMockString":90,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":423,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":207,"org.easymock.tests.UsageExpectAndThrowTest.floatType":243,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":59,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":202,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":228,"org.easymock.tests.UsageVerifyTest.twoThrows":465,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":32,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":321,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":216,"org.easymock.samples.ExampleTest.voteAgainstRemoval":19,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":487,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":398,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":107,"org.easymock.tests.LimitationsTest.privateConstructor":432,"org.easymock.tests2.UsageConstraintsTest.testNotNull":67,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":116,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":378,"org.easymock.tests2.UsageTest.defaultResetToNice":140,"org.easymock.samples.ExampleTest.voteAgainstRemovals":16,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":399,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":280,"org.easymock.tests.UsageVarargTest.differentLength":417,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":152,"org.easymock.tests2.CallbackTest.callback":149,"org.easymock.tests2.UsageConstraintsTest.equals":45,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":103,"org.easymock.tests.UsageTest.openCallCountByLastCall":339,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":41,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":437,"org.easymock.tests.UsageCallCountTest.tooFewCalls":470,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":181,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":443,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":500,"org.easymock.tests.UsageThrowableTest.throwCheckedException":375,"org.easymock.tests.MockingTest.testStrictClassMocking":285,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":184,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":369,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":180,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":157,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":304,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":183,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":230,"org.easymock.tests.ObjectMethodsTest.testHashCode":454,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":493,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":521,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":115,"org.easymock.tests2.NameTest.nameForNiceMock":36,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":516,"org.easymock.tests2.DependencyTest.testInterfaceMocking":147,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":492,"org.easymock.samples.ExampleTest.addDocument":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":218,"org.easymock.tests2.DelegateToTest.testStubDelegate":165,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":223,"org.easymock.tests2.AnswerTest.stubAnswer":229,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":481,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":85,"org.easymock.tests.UsageVarargTest.varargLongAccepted":419,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":485,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":396,"org.easymock.tests.UsageExpectAndReturnTest.floatType":267,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":283,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":30,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":15,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":129,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":61,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":324,"org.easymock.tests.UsageThrowableTest.noUpperLimit":372,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":42,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":169,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":5,"org.easymock.tests2.SerializationTest.test":239,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":357,"org.easymock.tests2.UsageConstraintsTest.testSame":48,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":266,"org.easymock.samples.SupportTest.addDocument":28,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":182,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":506,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":300,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":208,"org.easymock.tests.GenericTest.testPackageScope":380,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":348,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":391,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":128,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":292,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":504,"org.easymock.tests2.NameTest.nameForMock":34,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":277,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":89,"org.easymock.tests2.UsageStrictMockTest.differentMethods":236,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":104,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":269,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":255,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":452,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":334,"org.easymock.tests2.MockedExceptionTest.testRealException":119,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":319,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":401,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":175,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":400,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":233,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":436,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":306,"org.easymock.tests2.NameTest.nameForStrictMock":35,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":79,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":38,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":98,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":173,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":62,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":359,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":76,"org.easymock.tests2.UsageStrictMockTest.range":235,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":510,"org.easymock.tests2.UsageConstraintsTest.lessThan":69,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":124,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":395,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":188,"org.easymock.tests2.CaptureTest.testCaptureRightOne":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":212,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":498,"org.easymock.tests2.UsageConstraintsTest.testOr":49,"org.easymock.tests.UsageRangeTest.combination":331,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":95,"org.easymock.tests.UsageTest.wrongArguments":338,"org.easymock.tests2.MockBuilderTest.testWithConstructor":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":209,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":424,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":270,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":388,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":278,"org.easymock.tests.UsageVarargTest.varargShortAccepted":418,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":361,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":473,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":524,"org.easymock.tests2.UsageConstraintsTest.cmpTo":54,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":227,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":514,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":390,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":139,"org.easymock.tests2.CaptureTest.testCaptureFromStub":11,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":296,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":77,"org.easymock.tests.UsageTest.unexpectedCallWithArray":337,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":520,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":480,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":471,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":279,"org.easymock.tests2.CaptureTest.testCapture":9,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":482,"org.easymock.tests2.UsageConstraintsTest.constraints":43,"org.easymock.samples.ExampleTest.addAndChangeDocument":23,"org.easymock.tests.UsageStrictMockTest.testVerify":486,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":27,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":479,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":351,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":6,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":497,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":446,"org.easymock.tests.LimitationsTest.abstractClass":431,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":271,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":447,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":325,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":412,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":193}}]

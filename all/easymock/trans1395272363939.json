[{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:217","sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[13,14,15,16],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,1,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,5,56,57,58,59,60,61,10,11],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:216","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[62],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:176","sourceCode":"final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:84","sourceCode":"return this","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:216","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:708","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[63],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:218","sourceCode":"return ","type":"CtReturnImpl"},"failures":[64,65,66,67,68,17,69,70,71,18,19,72,73,20,74,75,76,13,77,21,78,79,80,81,82,83,84,85,86,87,88,89,90,91,22,14,92,63,93,94,95,15,96,97,98,99,23,100,101,102,103,24,25,26,104,105,106,107,27,108,109,110,111,112,113,114,28,115,29,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,30,154,0,31,32,1,2,155,156,157,158,159,33,160,3,34,35,36,161,162,163,37,38,39,40,164,165,166,167,168,169,170,171,172,41,173,174,175,176,177,178,179,180,181,182,182,183,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,42,220,221,222,223,224,225,226,227,45,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,48,49,50,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,51,303,304,305,306,307,52,308,53,4,54,55,5,6,309,310,56,7,57,58,311,312,59,60,61,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,62,9,10,11,348,349,350,351,352,353,354,355,356,357,358,359,360,361,12,362],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1064","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:269","sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","type":"CtInvocationImpl"},"failures":[99,23,363,364,100,101,102,103,365,24,25,26,104,106,107,27,109,110,111,112,113,366,367,114,28,115,29,368,369,370,371,149,150,151,153,372,373,374,375,155,376,377,156,378,379,380,381,382,383,384,385,386,157,387,388,389,390,391,158,392,393,173,174,175,176,178,179,180,181,182,182,183,183,185,394,225,226,227,395,261,262,263,264,265,268,396,397,398,294,399,310,400,326,401,402,403,404,405,406,407,353,354,355,356],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"failures":[408,64,65,66,67,68,17,69,70,71,18,19,72,73,20,74,75,76,13,77,21,78,409,79,80,81,82,83,84,85,86,87,88,89,90,91,22,14,92,63,93,94,95,15,96,97,98,99,23,363,364,100,101,102,103,365,24,25,26,104,105,106,107,27,108,109,110,111,112,410,113,366,367,114,28,115,29,368,369,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,370,371,411,412,413,414,145,146,147,148,149,150,151,152,153,372,30,154,0,31,32,1,2,373,374,375,155,376,377,156,378,379,380,381,382,383,384,385,386,157,387,388,389,390,391,158,392,393,415,416,417,418,419,159,420,421,422,423,424,425,33,160,3,34,35,36,161,162,163,37,38,39,40,164,165,166,167,168,169,426,427,428,429,430,170,431,432,433,434,435,436,171,437,172,41,173,174,175,176,177,178,179,180,181,182,182,183,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,438,210,439,211,212,213,214,215,216,217,440,218,219,42,220,221,222,223,224,394,225,226,227,395,45,228,229,230,231,232,233,234,235,236,237,441,238,239,240,442,443,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,48,49,50,396,444,445,397,446,447,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,398,448,294,399,295,296,297,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,298,465,466,467,468,469,299,470,300,301,302,51,303,304,305,306,307,52,308,53,4,54,55,5,6,309,310,56,7,57,58,311,312,59,60,61,313,314,315,316,317,318,319,320,321,322,323,324,325,326,401,402,403,404,405,407,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,62,8,9,10,11,348,349,350,351,352,471,472,473,353,354,355,474,356,475,476,477,357,358,359,360,361,12,362],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:140","sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","type":"CtInvocationImpl"},"failures":[404,478,479],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"clazz"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[64,65,66,67,68,17,69,70,71,18,19,72,73,20,74,75,76,13,77,21,78,79,80,81,82,83,84,85,86,87,88,89,90,91,22,14,92,63,93,94,95,15,96,97,98,99,23,100,102,103,25,104,105,106,107,27,108,109,110,111,113,114,28,115,29,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,30,154,0,31,32,1,2,155,156,157,158,159,33,160,3,34,35,36,161,162,163,37,38,39,40,164,165,166,167,168,169,170,171,172,41,173,174,175,176,177,178,179,180,181,182,182,183,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,42,220,221,222,223,224,225,226,227,45,228,229,230,231,232,233,234,235,236,237,238,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,269,271,272,273,274,49,50,275,276,277,278,279,280,281,294,295,296,297,298,299,300,301,302,51,303,52,308,53,4,54,55,5,6,309,310,56,7,58,311,312,59,60,61,313,314,315,316,317,318,319,320,321,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,62,9,10,11,348,349,350,351,352,353,354,355,356,357,358,359,360,361,12],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"failures":[126,128,129,130,190,451,359],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:117","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[283,293],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[21,78,82,83,85,63,131,133,141],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[69,20,441,240],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[480,481,482],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:121","sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","type":"CtInvocationImpl"},"failures":[104,105,106],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:557","failures":[68,17,69,70,71,18,19,72,73,20,74,75,13,77,21,78,79,80,81,82,83,84,86,87,88,89,90,91,22,14,92,63,93,94,15,96,97,98,23,100,102,103,25,104,105,107,27,108,109,110,111,113,28,115,29,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,0,32,1,155,156,157,158,159,33,160,3,35,161,162,163,39,40,164,165,166,167,168,169,170,171,172,41,173,174,175,176,177,178,179,182,182,183,183,185,188,189,190,191,192,194,196,197,198,199,200,201,202,203,204,205,206,207,208,209,438,210,439,211,212,213,214,225,227,45,228,229,230,231,232,233,234,235,236,237,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,271,275,276,277,278,279,280,281,287,294,295,296,297,298,299,300,301,302,51,4,55,5,310,56,7,311,312,61,313,314,315,316,317,318,319,320,321,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,62,9,10,11,348,349,350,351,352,354,355,356,357,359,360,12],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:153","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[149,150,151,152,232,235,316,317,318,319,320,321],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[104,105,106],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"equalsMethod","method":"equalsMethod"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"failures":[413,414],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,1,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,5,56,57,58,59,60,61,10,11],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:53","sourceCode":"java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection)","type":"CtInvocationImpl"},"failures":[416,417,419,421,422,423,424,425,427,428,430,432,433,434,435,436],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:160","sourceCode":"throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())))","type":"CtThrowImpl"},"failures":[483,484,485],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:113","sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"failures":[401,405],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[68,17,69,70,71,18,19,73,20,74,75,13,77,21,78,79,80,81,82,83,84,86,87,88,89,90,91,22,14,92,63,93,94,15,96,97,98,100,102,103,104,105,107,27,108,109,110,111,113,115,120,121,122,123,124,127,131,132,134,135,138,139,140,141,143,144,145,146,148,153,0,32,1,155,156,157,158,159,33,160,3,35,161,162,39,40,164,168,170,173,174,175,176,177,178,179,185,188,189,191,192,194,197,199,200,201,202,203,204,205,206,207,208,209,210,212,213,214,225,227,45,229,230,231,233,234,237,275,276,294,295,296,297,458,460,468,469,470,4,55,5,56,7,311,312,61,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,9,11,354,355,356],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","answer":"value"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:180","sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:184","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; ++int) {\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n    } \n    if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n        return false;\n    } \n}","type":"CtForImpl"},"failures":[486,487,488,489,490,491,372],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:198","sourceCode":"final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = new java.util.ArrayList<java.lang.reflect.Field>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[106,107,27,109,110,111,113,367,114,29,368,369,370,371,150,151,373,155,377,378,379,382,385,387,388,391,173,176,180,181,225,226,395,261,262,263,264,265,266,267,268,398,448,294,399,310,326,401,402,403,404,405,407,472,473,353,477],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"interceptor":"interceptor","mockedMethods":"mockedMethods"}},{"transplant":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.InstanceOf:40","sourceCode":"java.lang.StringBuffer.append(((\"isA(\" + (java.lang.Class<?>.getName())) + \")\"))","type":"CtInvocationImpl"},"failures":[21],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[164,166,167,169,171,172,41,190,462,357],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:162","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[165],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[21,83],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[401,405],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:117","sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1915","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","type":"CtInvocationImpl"},"failures":[131,133,135,136,137,140,141,142,143],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"captured"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:177","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[127],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"failures":[32,51,55,492,493,10,11],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[98,494],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:56","sourceCode":"if (int > int) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:193","sourceCode":"if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"currentPosition":"i","callCount":"i"}},{"transplant":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.UnorderedBehavior:29","sourceCode":"new java.util.ArrayList<org.easymock.internal.ExpectedInvocationAndResults>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:53","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:52","sourceCode":"java.lang.StringBuffer.append(\"]\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[495,496,497,498,3,34,37,38,499,500,501,53,7,57,58,59,60],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:108","failures":[148,197,200,201,202,203,204,214,236,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,320,10,360],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"failures":[502],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:225","sourceCode":"net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:42","sourceCode":"if (org.easymock.internal.IMocksBehavior.isThreadSafe()) {\n    java.util.concurrent.locks.ReentrantLock.lock();\n    try {\n        return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n    } finally {\n        java.util.concurrent.locks.ReentrantLock.unlock();\n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:82","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[416,417,419,421,422,425,427,428,430,432,433,436],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":78,"org.easymock.tests2.UsageTest.argumentsOrdered":38,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":56,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":74,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":431,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":459,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":36,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":184,"org.easymock.tests2.DelegateToTest.testReturnException":126,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":317,"org.easymock.tests.MockingTest.testPartialClassMocking":354,"org.easymock.tests.MockClassControlTest.testToString":263,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":408,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":467,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":381,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":156,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":241,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":146,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":487,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":84,"org.easymock.tests2.UsageTest.wrongArguments":34,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":233,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":425,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":324,"org.easymock.samples.ExampleTest.answerVsDelegate":190,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":397,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":476,"org.easymock.tests2.UsageConstraintsTest.testNull":80,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":109,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":20,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":268,"org.easymock.tests2.CaptureTest.testPrimitive":134,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":237,"org.easymock.tests.UsageTest.moreThanOneArgument":7,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":260,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":108,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":350,"org.easymock.tests.UsageTest.argumentsOrdered":60,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":277,"org.easymock.tests.UsageVarargTest.varargIntAccepted":217,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":464,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":205,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":491,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":99,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":484,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":435,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":101,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":451,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":209,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":159,"org.easymock.tests.ReplayStateInvalidUsageTest.times":290,"org.easymock.tests2.DependencyTest.testClassMocking":413,"org.easymock.tests2.AnswerTest.answer":164,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":465,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":119,"org.easymock.tests2.CaptureTest.testAnd":131,"org.easymock.tests2.UsageTest.strictResetToDefault":160,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":114,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":349,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":71,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":229,"org.easymock.tests2.DelegateToTest.testDelegate":130,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":281,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":256,"org.easymock.tests.LimitationsTest.mockFinalMethod":399,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":320,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":307,"org.easymock.tests2.DependencyTest.testClassMockingSupport":414,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":347,"org.easymock.tests2.CaptureTest.testCapture1_2446744":135,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":410,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":254,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":117,"org.easymock.tests.UsageThrowableTest.throwError":197,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":284,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":445,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":436,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":44,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":352,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":393,"org.easymock.samples.PartialClassMockTest.testGetArea":185,"org.easymock.tests.MockingTest.testInterfaceMocking":474,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":285,"org.easymock.tests2.CompareToTest.testLessOrEqual":16,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":206,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":296,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":443,"org.easymock.tests2.UsageTest.niceToStrict":35,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":242,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":382,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":480,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":449,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":100,"org.easymock.tests2.MockBuilderTest.testCreateMock":24,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":389,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":422,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":495,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":250,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":18,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":302,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":269,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":322,"org.easymock.tests.UsageOverloadedMethodTest.overloading":213,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":391,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":386,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":90,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":360,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":212,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":338,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":478,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":89,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":140,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":440,"org.easymock.tests2.EasyMockSupportClassTest.testAll":155,"org.easymock.tests.MockClassControlTest.testEquals":267,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":226,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":496,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":258,"org.easymock.tests2.CaptureTest.testCaptureAll":132,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":118,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":305,"org.easymock.tests.MockNameTest.defaultName":471,"org.easymock.tests2.UsageConstraintsTest.testMatches":91,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":282,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":351,"org.easymock.samples.ExampleTest.voteForRemovals":194,"org.easymock.tests.UsageVarargTest.allKinds":224,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":9,"org.easymock.samples.BasicClassMockTest.testPrintContent":181,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":306,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":203,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":30,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":432,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":129,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":321,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":406,"org.easymock.tests2.UsageConstraintsTest.greaterThan":14,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":376,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":228,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":29,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":407,"org.easymock.samples.ExampleTest.voteForRemoval":191,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":121,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":368,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":446,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":485,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":112,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":33,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":310,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":365,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":456,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":69,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":374,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":316,"org.easymock.tests2.CaptureTest.testCaptureFirst":144,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":125,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":455,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":70,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":40,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":362,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":334,"org.easymock.tests2.CaptureTest.testCapture2_2446744":143,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":123,"org.easymock.tests2.UsageTest.moreThanOneArgument":3,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":466,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":25,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":223,"org.easymock.tests.GenericTest.testBridgedEquals":395,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":49,"org.easymock.tests.UsageExpectAndReturnTest.longType":330,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":68,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":303,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":259,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":95,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":211,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":257,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":314,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":348,"org.easymock.tests.UsageCallCountTest.tooManyCalls":50,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":390,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":335,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":424,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":246,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":202,"org.easymock.tests.MockingTest.testNiceClassMocking":477,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":174,"org.easymock.tests.MockingTest.testClassMocking":473,"org.easymock.tests2.UsageConstraintsTest.testContains":88,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":270,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":151,"org.easymock.tests2.UsageConstraintsTest.testFind":79,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":214,"org.easymock.tests.MockTypeTest.fromEasyMockClass":444,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":172,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":52,"org.easymock.tests.UsageExpectAndReturnTest.object":337,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":113,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":423,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":73,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":488,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":219,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":240,"org.easymock.tests.UsageTest.exactCallCountByLastCall":61,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":231,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":454,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":438,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":278,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":501,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":372,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":215,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":343,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":359,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":427,"org.easymock.tests.MockClassControlTest.testHashCode":266,"org.easymock.tests2.EasyMockSupportTest.testVerify":76,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":384,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":279,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":301,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":357,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":116,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":46,"org.easymock.tests.UsageVarargTest.varargCharAccepted":218,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":400,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":470,"org.easymock.tests2.UsageTest.openCallCountByLastCall":161,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":481,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":75,"org.easymock.tests.DefaultClassInstantiatorTest.object":326,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":300,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":238,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":385,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":248,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":200,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":418,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":426,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":28,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":265,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":247,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":344,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":158,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":264,"org.easymock.tests2.UsageTest.resumeIfFailure":39,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":396,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":483,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":319,"org.easymock.tests2.StubTest.stubWithReturnValue":148,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":486,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":15,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":336,"org.easymock.tests2.SerializationTest.testAllMockedMethod":106,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":298,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":497,"org.easymock.samples.SupportTest.voteForRemovals":188,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":394,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":429,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":253,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":299,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":165,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":439,"org.easymock.tests.UsageExpectAndThrowTest.object":251,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":93,"org.easymock.tests2.DelegateToTest.testWrongClass":128,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":275,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":276,"org.easymock.samples.ConstructorCalledMockTest.testTax":182,"org.easymock.tests.UsageStrictMockTest.range":55,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":411,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":72,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":173,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":252,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":102,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":59,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":373,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":323,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":499,"org.easymock.tests2.CaptureTest.testCaptureNone":139,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":297,"org.easymock.tests.UsageUnorderedTest.message":51,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":43,"org.easymock.tests.UsageVerifyTest.twoReturns":11,"org.easymock.tests.UsageVarargTest.varargByteAccepted":222,"org.easymock.tests2.ThreadingTest.testThreadSafe":120,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":387,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":274,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":442,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":180,"org.easymock.tests2.CaptureTest.testCapture_2617107":133,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":498,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":468,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":236,"org.easymock.tests2.UsageConstraintsTest.any":86,"org.easymock.tests2.StubTest.stub":147,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":289,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":315,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":469,"org.easymock.tests.UsageExpectAndThrowTest.longType":244,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":318,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":404,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":288,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":31,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":170,"org.easymock.tests2.SerializationTest.testClass":104,"org.easymock.tests.LimitationsTest.mockNativeMethod":294,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":227,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":346,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":417,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":2,"org.easymock.tests2.NameTest.nameForMocksControl":67,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":419,"org.easymock.tests2.MockedExceptionTest.testMockedException":150,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":377,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":312,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":437,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":245,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":356,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":107,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":103,"org.easymock.tests.MockingTest.testNicePartialClassMocking":355,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":111,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":415,"org.easymock.tests2.CaptureTest.testCaptureLast":138,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":62,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":179,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":83,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":94,"org.easymock.tests.MockingTest.testTwoMocks":353,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":327,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":249,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":37,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":97,"org.easymock.samples.ExampleTest.removeNonExistingDocument":195,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":421,"org.easymock.tests.UsageStrictMockTest.differentMethods":5,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":286,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":428,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":402,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":122,"org.easymock.tests2.MockBuilderTest.testCreateMockString":26,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":261,"org.easymock.tests.UsageExpectAndThrowTest.floatType":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":378,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":22,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":375,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":167,"org.easymock.tests.UsageVerifyTest.twoThrows":10,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":358,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":157,"org.easymock.samples.ExampleTest.voteAgainstRemoval":192,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":460,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":295,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":115,"org.easymock.tests.LimitationsTest.privateConstructor":448,"org.easymock.tests2.UsageConstraintsTest.testNotNull":96,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":149,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":204,"org.easymock.tests2.UsageTest.defaultResetToNice":163,"org.easymock.samples.ExampleTest.voteAgainstRemovals":189,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":461,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":342,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":416,"org.easymock.tests.UsageVarargTest.differentLength":42,"org.easymock.tests2.CallbackTest.callback":41,"org.easymock.tests2.UsageConstraintsTest.equals":409,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":366,"org.easymock.tests.UsageTest.openCallCountByLastCall":311,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":13,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":235,"org.easymock.tests.UsageCallCountTest.tooFewCalls":272,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":176,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":325,"org.easymock.tests.UsageThrowableTest.throwCheckedException":201,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":500,"org.easymock.tests.MockingTest.testStrictClassMocking":472,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":178,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":232,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":420,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":175,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":291,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":177,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":169,"org.easymock.tests.ObjectMethodsTest.testHashCode":239,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":490,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":124,"org.easymock.tests2.NameTest.nameForNiceMock":66,"org.easymock.tests2.DependencyTest.testInterfaceMocking":145,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":489,"org.easymock.samples.ExampleTest.addDocument":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":388,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":392,"org.easymock.tests2.DelegateToTest.testStubDelegate":127,"org.easymock.tests2.AnswerTest.stubAnswer":168,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":4,"org.easymock.tests.UsageVarargTest.varargLongAccepted":221,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":6,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":458,"org.easymock.tests.UsageExpectAndReturnTest.floatType":329,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":345,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":153,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":183,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":434,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":92,"org.easymock.tests.UsageThrowableTest.noUpperLimit":198,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":361,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":77,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":370,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":136,"org.easymock.tests2.SerializationTest.test":105,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":479,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":401,"org.easymock.tests2.UsageConstraintsTest.testSame":81,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":328,"org.easymock.samples.SupportTest.addDocument":187,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":287,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":379,"org.easymock.tests.GenericTest.testPackageScope":225,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":453,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":433,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":475,"org.easymock.tests2.NameTest.nameForMock":64,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":339,"org.easymock.tests2.UsageStrictMockTest.differentMethods":1,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":367,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":331,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":255,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":441,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":230,"org.easymock.tests2.MockedExceptionTest.testRealException":152,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":447,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":463,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":412,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":462,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":0,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":234,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":293,"org.easymock.tests2.NameTest.nameForStrictMock":65,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":364,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":482,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":171,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":110,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":371,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":492,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":403,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":63,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":23,"org.easymock.tests2.UsageStrictMockTest.range":32,"org.easymock.tests2.UsageConstraintsTest.lessThan":98,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":430,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":502,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":457,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":17,"org.easymock.tests2.CaptureTest.testCaptureRightOne":141,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":383,"org.easymock.tests2.UsageConstraintsTest.testOr":82,"org.easymock.tests.UsageRangeTest.combination":45,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":27,"org.easymock.tests.UsageTest.wrongArguments":58,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":380,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":262,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":332,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":450,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":340,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":405,"org.easymock.tests.UsageVarargTest.varargShortAccepted":220,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":48,"org.easymock.tests2.UsageConstraintsTest.cmpTo":87,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":166,"org.easymock.tests2.CompareToTest.testLessThan":494,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":452,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":162,"org.easymock.tests2.CaptureTest.testCaptureFromStub":142,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":283,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":363,"org.easymock.tests.UsageTest.unexpectedCallWithArray":57,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":53,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":273,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":341,"org.easymock.tests2.UsageConstraintsTest.constraints":21,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":54,"org.easymock.samples.ExampleTest.addAndChangeDocument":196,"org.easymock.tests.UsageStrictMockTest.testVerify":309,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":186,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":308,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":304,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":137,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":207,"org.easymock.tests.LimitationsTest.abstractClass":398,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":333,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":12,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":208,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":493,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":19,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":216}}]

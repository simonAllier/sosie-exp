[{"position":"org.easymock.internal.ArgumentToString:47","failures":[0,1,2,3,4,5],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[6,7,8],"status":-1,"binaryOperator":"java.lang.String == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[9],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this","constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[10],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:78","sourceCode":"org.easymock.internal.ExpectedInvocation = new org.easymock.internal.ExpectedInvocation(org.easymock.internal.Invocation , java.util.List<org.easymock.IArgumentMatcher>)","type":"CtAssignmentImpl"},"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,9,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,160,161,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,2,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"failures":[314],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:125","sourceCode":"java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[11,14,15,16,17,18,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,315,316,317,318,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,319,61,320,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,321,107,108,322,109,110,323,111,324,9,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,325,325,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,210,211,2,212,213,214,215,216,218,219,220,221,222,225,226,227,228,234,235,236,237,326,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,3,254,255,256,257,258,259,327,328,329,330,263,264,265,266,267,268,269,271,272,277,278,279,280,281,282,283,284,285,286,288,289,331,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,332,333,334,335,336],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ErrorMessage:50","failures":[27,214,279,280,308,337,338],"status":-1,"binaryOperator":"int == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:355","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[339,261],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:137","sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"failures":[27,69,75,76,2,214,3,254,257,258,340,279,280,308],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"result","matches":"i"}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"toStringMethod","equalsMethod":"toStringMethod"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[38,39,40,41,48,49,81,82,83,84,85,86,87,88,89,90,99,100,104,105],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:59","sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection","obj":"obj","targetField":"targetField"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[131,132,133,341],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:61","sourceCode":"final java.lang.Throwable java.lang.Throwable","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:72","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:133","sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:135","sourceCode":"java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cl":"cl","this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[38,40,48,81,87],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.internal.MockBuilder:223","failures":[31,34,319,342,321,322],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Injector:229","sourceCode":"org.easymock.internal.Injection org.easymock.internal.Injection = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:36","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>.getName(), java.lang.Character.java.lang.Class<java.lang.Character>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[343,344,345,346,347,348,349],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:194","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n    return java.lang.Number.byteValue();\n} else if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","type":"CtIfImpl"},"failures":[153,155,156,158,160,160,161,161,163,168,169,170,171,172,176,177,183,184,185,186,187,218,219,221,225,226,292,294,296],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[350,351],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"count":"count","stack":"stack","this":"this"}},{"position":"org.easymock.ConstructorArgs:54","failures":[352,353,354,30,355,356,31,357,358,359,360,361,362,363,364,365,32,366,367,368,369,370,33,371,372,373,374,343,375,376,377,9,344,131,144,148,378,379,380,160,161],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:224","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[381],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[131,132,133,341],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[34,35,36,37,141,382,230,231,232,263,264,265,266,267,268,383,283,310],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"position":"org.easymock.Capture:82","failures":[38,40,41,42,43,44,45,47,384,48,49,51],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:85","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object));\n} ","type":"CtIfImpl"},"failures":[385,386,387],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:213","failures":[10,388],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:161","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    return java.lang.reflect.Constructor<T>;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:162","sourceCode":"return java.lang.reflect.Constructor<T>","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"ret":"ret"}},{"transplant":{"position":"org.easymock.internal.MocksControl:142","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.AndroidClassProxyFactory()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:147","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory()","type":"CtReturnImpl"},"failures":[389,390,391,352,353,354,30,355,356,31,357,358,359,360,361,362,363,364,365,32,366,367,368,369,370,33,371,372,34,35,36,392,393,55,56,58,59,60,319,61,394,395,320,62,63,64,396,342,321,107,397,398,108,322,109,110,375,323,111,324,9,344,131,133,142,143,144,145,147,148,149,151,152,160,160,161,161,399,400,401,165,166,167,402,10,227,228,229,388,403,404,243,405,386,406,407,408,409,387,410,411,412,350,413,414,415,351,416,417,418,277],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:81","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[419],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[38,40,48,81,82,84,86,87,89,99,104],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[420,79,97,103],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":82,"org.easymock.tests2.UsageTest.argumentsOrdered":76,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":252,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":127,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":71,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":164,"org.easymock.tests2.DelegateToTest.testReturnException":135,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":264,"org.easymock.tests.MockingTest.testPartialClassMocking":165,"org.easymock.tests.MockClassControlTest.testToString":407,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":262,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":360,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":188,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":31,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":53,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":345,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":88,"org.easymock.tests2.UsageTest.wrongArguments":69,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":281,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":329,"org.easymock.samples.ExampleTest.answerVsDelegate":154,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":418,"org.easymock.tests2.UsageConstraintsTest.testNull":84,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":58,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":411,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":126,"org.easymock.tests2.CaptureTest.testPrimitive":41,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":285,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":207,"org.easymock.tests.UsageTest.moreThanOneArgument":253,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":57,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":220,"org.easymock.tests.UsageTest.argumentsOrdered":258,"org.easymock.tests.UsageVarargTest.varargIntAccepted":299,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":292,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":321,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":349,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":322,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":296,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":65,"org.easymock.tests2.DependencyTest.testClassMocking":392,"org.easymock.tests2.AnswerTest.answer":11,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":89,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":318,"org.easymock.tests2.CaptureTest.testAnd":38,"org.easymock.tests2.UsageTest.strictResetToDefault":67,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":320,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":374,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":219,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":121,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":271,"org.easymock.tests2.DelegateToTest.testDelegate":139,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":314,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":203,"org.easymock.tests.LimitationsTest.mockFinalMethod":405,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":267,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":336,"org.easymock.tests2.DependencyTest.testClassMockingSupport":393,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":223,"org.easymock.tests2.CaptureTest.testCapture1_2446744":42,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":7,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":201,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":316,"org.easymock.tests.UsageThrowableTest.throwError":244,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":222,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":379,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":372,"org.easymock.samples.PartialClassMockTest.testGetArea":149,"org.easymock.tests2.CompareToTest.testLessOrEqual":420,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":293,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":312,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":189,"org.easymock.tests2.UsageTest.niceToStrict":70,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":361,"org.easymock.tests2.ThreadingTest.testChangeDefault":8,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":419,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":108,"org.easymock.tests2.MockBuilderTest.testCreateMock":323,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":368,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":0,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":197,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":122,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":275,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":233,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":327,"org.easymock.tests.UsageOverloadedMethodTest.overloading":241,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":365,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":370,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":94,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":289,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":179,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":240,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":93,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":47,"org.easymock.tests.MockClassControlTest.testEquals":410,"org.easymock.tests2.EasyMockSupportClassTest.testAll":30,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":228,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":205,"org.easymock.tests2.CaptureTest.testCaptureAll":39,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":317,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":334,"org.easymock.tests2.UsageConstraintsTest.testMatches":95,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":221,"org.easymock.samples.ExampleTest.voteForRemovals":158,"org.easymock.tests.UsageVarargTest.allKinds":307,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":278,"org.easymock.samples.BasicClassMockTest.testPrintContent":152,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":335,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":250,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":23,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":138,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":268,"org.easymock.tests2.UsageConstraintsTest.greaterThan":97,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":355,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":270,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":64,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":416,"org.easymock.samples.ExampleTest.voteForRemoval":155,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":396,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":113,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":319,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":66,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":277,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":375,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":382,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":119,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":353,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":263,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":134,"org.easymock.tests2.CaptureTest.testCaptureFirst":51,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":120,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":78,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":331,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":175,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":115,"org.easymock.tests2.CaptureTest.testCapture2_2446744":50,"org.easymock.tests2.UsageTest.moreThanOneArgument":68,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":111,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":339,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":306,"org.easymock.tests.GenericTest.testBridgedEquals":388,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":238,"org.easymock.tests.UsageExpectAndReturnTest.longType":171,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":117,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":332,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":206,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":102,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":276,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":204,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":218,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":231,"org.easymock.tests.UsageCallCountTest.tooManyCalls":239,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":234,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":369,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":176,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":193,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":249,"org.easymock.tests.MockingTest.testNiceClassMocking":402,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":143,"org.easymock.tests.MockingTest.testClassMocking":400,"org.easymock.tests2.UsageConstraintsTest.testContains":92,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":36,"org.easymock.tests2.UsageConstraintsTest.testFind":83,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":242,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":18,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":210,"org.easymock.tests.UsageExpectAndReturnTest.object":178,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":61,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":125,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":301,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":346,"org.easymock.tests.UsageTest.exactCallCountByLastCall":259,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":309,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":260,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":344,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":184,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":297,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":288,"org.easymock.tests.MockClassControlTest.testHashCode":387,"org.easymock.tests2.EasyMockSupportTest.testVerify":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":363,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":261,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":274,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":286,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":315,"org.easymock.tests.UsageVarargTest.varargCharAccepted":300,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":24,"org.easymock.tests2.UsageTest.openCallCountByLastCall":72,"org.easymock.tests.DefaultClassInstantiatorTest.object":412,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":128,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":273,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":340,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":195,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":364,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":247,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":409,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":62,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":194,"org.easymock.tests.CapturesMatcherTest.test":325,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":185,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":230,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":408,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":33,"org.easymock.tests2.UsageTest.resumeIfFailure":77,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":417,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":390,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":266,"org.easymock.tests2.StubTest.stubWithReturnValue":141,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":343,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":177,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":103,"org.easymock.tests2.SerializationTest.testAllMockedMethod":133,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":208,"org.easymock.samples.SupportTest.voteForRemovals":163,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":1,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":10,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":200,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":341,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":209,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":12,"org.easymock.tests.UsageExpectAndThrowTest.object":198,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":100,"org.easymock.tests2.DelegateToTest.testWrongClass":137,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":225,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":226,"org.easymock.samples.ConstructorCalledMockTest.testTax":160,"org.easymock.tests.UsageStrictMockTest.range":214,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":124,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":142,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":199,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":109,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":352,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":383,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":328,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":4,"org.easymock.tests2.CaptureTest.testCaptureNone":46,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":313,"org.easymock.tests.UsageUnorderedTest.message":308,"org.easymock.tests.UsageVerifyTest.twoReturns":280,"org.easymock.tests.UsageVarargTest.varargByteAccepted":305,"org.easymock.tests2.ThreadingTest.testThreadSafe":112,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":366,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":237,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":151,"org.easymock.tests2.CaptureTest.testCapture_2617107":40,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":381,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":284,"org.easymock.tests2.UsageConstraintsTest.any":90,"org.easymock.tests2.StubTest.stub":140,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":232,"org.easymock.tests.UsageExpectAndThrowTest.longType":191,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":265,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":415,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":26,"org.easymock.tests2.SerializationTest.testClass":131,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":54,"org.easymock.tests.LimitationsTest.mockNativeMethod":243,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":187,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":229,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":29,"org.easymock.tests2.NameTest.nameForMocksControl":22,"org.easymock.tests2.MockedExceptionTest.testMockedException":35,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":356,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":256,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":167,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":192,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":55,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":110,"org.easymock.tests.MockingTest.testNicePartialClassMocking":166,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":60,"org.easymock.tests2.CaptureTest.testCaptureLast":45,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":224,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":148,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":87,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":101,"org.easymock.tests.MockingTest.testTwoMocks":401,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":378,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":168,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":196,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":75,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":105,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":6,"org.easymock.tests.UsageStrictMockTest.differentMethods":215,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":413,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":114,"org.easymock.tests2.MockBuilderTest.testCreateMockString":324,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":386,"org.easymock.tests.UsageExpectAndThrowTest.floatType":190,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":357,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":354,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":14,"org.easymock.tests.UsageVerifyTest.twoThrows":279,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":287,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":32,"org.easymock.samples.ExampleTest.voteAgainstRemoval":156,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":311,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":63,"org.easymock.tests.LimitationsTest.privateConstructor":404,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":380,"org.easymock.tests2.UsageConstraintsTest.testNotNull":104,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":34,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":251,"org.easymock.tests2.UsageTest.defaultResetToNice":74,"org.easymock.samples.ExampleTest.voteAgainstRemovals":153,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":183,"org.easymock.tests.UsageVarargTest.differentLength":302,"org.easymock.tests2.CallbackTest.callback":130,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":394,"org.easymock.tests.UsageTest.openCallCountByLastCall":255,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":79,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":283,"org.easymock.tests.UsageCallCountTest.tooFewCalls":235,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":145,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":330,"org.easymock.tests.UsageThrowableTest.throwCheckedException":248,"org.easymock.tests.MockingTest.testStrictClassMocking":399,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":5,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":147,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":310,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":144,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":146,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":16,"org.easymock.tests.ObjectMethodsTest.testHashCode":385,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":348,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":116,"org.easymock.tests2.NameTest.nameForNiceMock":21,"org.easymock.tests2.DependencyTest.testInterfaceMocking":52,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":347,"org.easymock.samples.ExampleTest.addDocument":157,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":367,"org.easymock.tests2.DelegateToTest.testStubDelegate":136,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":371,"org.easymock.tests2.AnswerTest.stubAnswer":15,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":212,"org.easymock.tests.UsageVarargTest.varargLongAccepted":304,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":216,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":186,"org.easymock.tests.UsageExpectAndReturnTest.floatType":170,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":9,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":161,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":98,"org.easymock.tests.UsageThrowableTest.noUpperLimit":245,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":290,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":80,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":389,"org.easymock.tests2.SerializationTest.test":132,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":43,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":350,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":169,"org.easymock.tests2.UsageConstraintsTest.testSame":85,"org.easymock.samples.SupportTest.addDocument":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":358,"org.easymock.tests.GenericTest.testPackageScope":227,"org.easymock.tests2.NameTest.nameForMock":19,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":180,"org.easymock.tests2.UsageStrictMockTest.differentMethods":28,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":377,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":395,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":172,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":202,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":272,"org.easymock.tests2.MockedExceptionTest.testRealException":37,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":25,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":282,"org.easymock.tests2.NameTest.nameForStrictMock":20,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":398,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":17,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":59,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":391,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":414,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":99,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":337,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":107,"org.easymock.tests2.UsageStrictMockTest.range":27,"org.easymock.tests2.UsageConstraintsTest.lessThan":106,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":118,"org.easymock.tests2.CaptureTest.testCaptureRightOne":48,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":362,"org.easymock.tests2.UsageConstraintsTest.testOr":86,"org.easymock.tests.UsageRangeTest.combination":269,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":56,"org.easymock.tests.UsageTest.wrongArguments":254,"org.easymock.tests2.MockBuilderTest.testWithConstructor":373,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":359,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":406,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":173,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":181,"org.easymock.tests.UsageVarargTest.varargShortAccepted":303,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":351,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":326,"org.easymock.tests2.UsageConstraintsTest.cmpTo":91,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":13,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":73,"org.easymock.tests2.CaptureTest.testCaptureFromStub":49,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":397,"org.easymock.tests.UsageTest.unexpectedCallWithArray":3,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":2,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":236,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":376,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":182,"org.easymock.tests2.CaptureTest.testCapture":384,"org.easymock.tests2.UsageConstraintsTest.constraints":81,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":213,"org.easymock.samples.ExampleTest.addAndChangeDocument":159,"org.easymock.tests.UsageStrictMockTest.testVerify":217,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":150,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":211,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":333,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":44,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":294,"org.easymock.tests.LimitationsTest.abstractClass":403,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":174,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":291,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":295,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":123,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":298,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":338}}]

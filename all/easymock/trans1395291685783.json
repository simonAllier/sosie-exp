[{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[0,1,2],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:49","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Integer.java.lang.Class<java.lang.Integer>, java.lang.Integer.java.lang.Integer.valueOf(0))","type":"CtInvocationImpl"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:60","sourceCode":"return org.easymock.internal.Result.answer()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:59","sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","type":"CtTryImpl"},"failures":[227,480],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[269,271,279,361,362,365,367,368,370,380,385],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:131","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"position":"org.easymock.internal.LastControl:95","failures":[269,271,279,361,362,365,367,368,370,380,385],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[387,487],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[40,488,489,145,490,491],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[40,488,489,145,490,491],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[5,10,11,12,13,14,15,18,19,21,22,23,25,26,27,28,29,41,43,44,69,102,103,104,105,155,156,158,232,233,234,235,241,242,243,244,245,246,247,251,259,260,262,263,265,283,284,285,286,287,288,291,295,296,297,309,311,312,314,337,340,350,356,390,396,397,401,451,452,453,454,456,457,458,462,466,468,470,474],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[492,493,494,495,496,497],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"propertyFileName":"propertyFileName","properties":"properties","in":"in"}},{"position":"org.easymock.internal.DefaultClassInstantiator:93","failures":[167,168,172],"status":-1,"binaryOperator":"(java.lang.Class<?>.getConstructors().int) == 0","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:262","failures":[71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,122,123,125,126,127,128,129,130,132,134,135,136,137,138,139,140,141,142,143,148,227,238,248,249,250,301,431,438,477,478,479,480],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"failures":[498],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:279","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[200,483],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"failures":[5,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,38,39,40,41,42,43,44,45,46,48,49,54,55,56,57,59,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,98,99,101,102,104,105,106,109,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,143,144,146,147,148,149,150,151,175,176,177,179,180,181,182,183,184,185,186,224,226,227,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,252,253,256,257,258,259,260,261,262,263,264,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,291,297,300,301,307,308,309,310,311,312,313,327,337,359,360,361,362,364,365,366,367,368,369,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,389,390,391,393,396,397,398,399,400,401,402,408,415,416,417,418,419,420,421,423,424,425,426,427,429,430,431,432,433,434,435,436,437,438,440,441,442,443,444,446,451,454,456,477,478,479,480,481,484,485,486],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"failures":[290],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1928","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[38,40,42,43,44,58,59,60,102,499,500,143,145,146,149,150,151,181,231,238,239,501,502,268,284,295,297,307,310,311,312,361,377,416,420,421,424,431,434,435,436,440,441,442,443,462,473,474,476],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[254,255,314,315,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,428,453,458,459,461,464,469,472,503,475,504,505],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:159","failures":[254,255,292,461,503,506,475],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:127","sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","type":"CtTryImpl"},"failures":[492,496],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[315,507,508,509,510,511,469],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[512,428,429,430],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,123,126,127,128,129,130,138,140,141,142,227,238,301],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:320","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[197,388],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:49","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[374],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:50","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"finalize\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:81","sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[256,257,322,323,324,326,328,329,330,333,403,404,405,407,409,410,411,414],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[512,428,429,430],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:176","sourceCode":"return false","type":"CtReturnImpl"},"failures":[314,513,507,508,509,510,511,514],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[123,126],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:557","failures":[5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,41,43,44,47,48,49,50,51,54,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,100,102,103,104,105,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,151,155,156,158,203,209,216,224,226,227,229,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,254,254,255,255,259,260,261,262,263,265,267,268,269,270,272,273,276,277,278,279,280,281,282,283,284,285,286,287,288,291,295,296,297,300,301,309,311,312,314,327,337,340,350,356,359,360,361,362,364,365,366,367,368,369,371,372,373,374,375,376,377,378,379,380,381,382,384,385,386,387,388,389,390,391,392,393,396,397,398,399,400,401,402,408,415,416,417,418,419,420,421,422,423,424,425,426,428,429,431,432,433,435,437,438,439,442,443,444,446,451,452,453,454,456,457,458,462,466,468,470,474,477,478,479,480,481,482,483,484,485,486],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Any:36","failures":[41,69,70,71,72,73,131,132,138,231,241,242,243,244,245,246,247,270,276,277,282,309,367,371],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[498,515,270,281,282],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:162","sourceCode":"final java.lang.NoSuchFieldException java.lang.NoSuchFieldException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2123","sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":362,"org.easymock.tests2.UsageTest.argumentsOrdered":441,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":143,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":425,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":409,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":197,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":436,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":257,"org.easymock.tests2.DelegateToTest.testReturnException":389,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":135,"org.easymock.tests.MockingTest.testPartialClassMocking":155,"org.easymock.tests.MockClassControlTest.testToString":114,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":302,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":206,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":299,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":344,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":74,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":340,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":397,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":507,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":369,"org.easymock.tests2.UsageTest.wrongArguments":434,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":69,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":333,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":164,"org.easymock.samples.ExampleTest.answerVsDelegate":261,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":35,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":160,"org.easymock.tests2.UsageConstraintsTest.testNull":365,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":286,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":424,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":119,"org.easymock.tests2.CaptureTest.testPrimitive":272,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":73,"org.easymock.tests.UsageTest.moreThanOneArgument":144,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":93,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":285,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":234,"org.easymock.tests.UsageTest.argumentsOrdered":150,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":47,"org.easymock.tests.UsageVarargTest.varargIntAccepted":177,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":202,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":243,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":511,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":460,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":413,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":189,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":247,"org.easymock.tests.ReplayStateInvalidUsageTest.times":219,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":327,"org.easymock.tests2.DependencyTest.testClassMocking":394,"org.easymock.tests2.AnswerTest.answer":481,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":370,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":204,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":320,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":32,"org.easymock.tests2.CaptureTest.testAnd":269,"org.easymock.tests2.UsageTest.strictResetToDefault":432,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":464,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":294,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":233,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":419,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":104,"org.easymock.tests2.DelegateToTest.testDelegate":393,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":51,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":89,"org.easymock.tests.LimitationsTest.mockFinalMethod":6,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":138,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":65,"org.easymock.tests2.DependencyTest.testClassMockingSupport":395,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":66,"org.easymock.tests2.CaptureTest.testCapture1_2446744":273,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":290,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":87,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":318,"org.easymock.tests.UsageThrowableTest.throwError":123,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":213,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":34,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":502,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":414,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":236,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":504,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":358,"org.easymock.samples.PartialClassMockTest.testGetArea":251,"org.easymock.tests.MockingTest.testInterfaceMocking":157,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":214,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":244,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":95,"org.easymock.tests2.UsageTest.niceToStrict":435,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":111,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":345,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":187,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":2,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":466,"org.easymock.tests2.MockBuilderTest.testCreateMock":473,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":353,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":330,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":490,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":83,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":420,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":31,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":142,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":52,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":162,"org.easymock.tests.UsageOverloadedMethodTest.overloading":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":355,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":227,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":375,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":120,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":21,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":374,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":278,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":178,"org.easymock.tests.MockClassControlTest.testEquals":118,"org.easymock.tests2.EasyMockSupportClassTest.testAll":337,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":99,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":91,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":506,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":63,"org.easymock.tests2.CaptureTest.testCaptureAll":270,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":319,"org.easymock.tests.MockNameTest.defaultName":223,"org.easymock.tests2.UsageConstraintsTest.testMatches":376,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":211,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":235,"org.easymock.samples.ExampleTest.voteForRemovals":265,"org.easymock.tests.UsageVarargTest.allKinds":186,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":237,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":64,"org.easymock.samples.BasicClassMockTest.testPrintContent":253,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":129,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":307,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":410,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":392,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":139,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":514,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":173,"org.easymock.tests2.UsageConstraintsTest.greaterThan":378,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":338,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":103,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":297,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":174,"org.easymock.samples.ExampleTest.voteForRemoval":262,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":399,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":298,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":36,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":289,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":431,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":240,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":472,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":194,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":417,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":125,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":335,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":134,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":388,"org.easymock.tests2.CaptureTest.testCaptureFirst":282,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":193,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":418,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":443,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":230,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":17,"org.easymock.tests2.UsageTest.moreThanOneArgument":433,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":401,"org.easymock.tests2.CaptureTest.testCapture2_2446744":281,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":474,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":205,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":185,"org.easymock.tests.GenericTest.testBridgedEquals":101,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":59,"org.easymock.tests.UsageExpectAndReturnTest.longType":13,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":415,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":61,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":92,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":133,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":383,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":90,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":232,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":249,"org.easymock.tests.UsageCallCountTest.tooManyCalls":60,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":354,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":18,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":332,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":79,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":128,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":452,"org.easymock.tests.MockingTest.testNiceClassMocking":161,"org.easymock.tests.MockingTest.testClassMocking":153,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":53,"org.easymock.tests2.UsageConstraintsTest.testContains":373,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":479,"org.easymock.tests2.UsageConstraintsTest.testFind":364,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":122,"org.easymock.tests.MockTypeTest.fromEasyMockClass":33,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":446,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":38,"org.easymock.tests.UsageExpectAndReturnTest.object":20,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":291,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":331,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":423,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":508,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":180,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":109,"org.easymock.tests.UsageTest.exactCallCountByLastCall":151,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":131,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":192,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":7,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":48,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":315,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":175,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":26,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":226,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":404,"org.easymock.tests.MockClassControlTest.testHashCode":117,"org.easymock.tests2.EasyMockSupportTest.testVerify":427,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":347,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":49,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":141,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":224,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":499,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":317,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":321,"org.easymock.tests.UsageVarargTest.varargCharAccepted":179,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":166,"org.easymock.tests2.CaptureTest.testCaptureMultiple":515,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":308,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":210,"org.easymock.tests2.UsageTest.openCallCountByLastCall":437,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":426,"org.easymock.tests.DefaultClassInstantiatorTest.object":167,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":0,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":140,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":107,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":500,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":81,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":348,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":126,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":325,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":403,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":116,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":295,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":80,"org.easymock.tests.CapturesMatcherTest.test":498,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":27,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":248,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":115,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":356,"org.easymock.tests2.UsageTest.resumeIfFailure":442,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":30,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":137,"org.easymock.tests2.StubTest.stubWithReturnValue":301,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":469,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":384,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":19,"org.easymock.tests2.SerializationTest.testAllMockedMethod":430,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":203,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":491,"org.easymock.samples.SupportTest.voteForRemovals":259,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":97,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":406,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":86,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":512,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":209,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":482,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":9,"org.easymock.tests.UsageExpectAndThrowTest.object":84,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":381,"org.easymock.tests2.DelegateToTest.testWrongClass":391,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":241,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":242,"org.easymock.tests.UsageStrictMockTest.range":43,"org.easymock.samples.ConstructorCalledMockTest.testTax":254,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":449,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":422,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":451,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":85,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":468,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":149,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":221,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":334,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":163,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":488,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":96,"org.easymock.tests2.CaptureTest.testCaptureNone":277,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":493,"org.easymock.tests.UsageUnorderedTest.message":231,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":501,"org.easymock.tests.UsageVerifyTest.twoReturns":239,"org.easymock.tests.UsageVarargTest.varargByteAccepted":184,"org.easymock.tests2.ThreadingTest.testThreadSafe":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":351,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":57,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":110,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":252,"org.easymock.tests2.CaptureTest.testCapture_2617107":271,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":68,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":72,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":207,"org.easymock.tests2.UsageConstraintsTest.any":371,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":218,"org.easymock.tests2.StubTest.stub":300,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":250,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":136,"org.easymock.tests.UsageExpectAndThrowTest.longType":77,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":208,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":171,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":217,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":310,"org.easymock.tests2.SerializationTest.testClass":428,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":408,"org.easymock.tests.LimitationsTest.mockNativeMethod":5,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":100,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":29,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":324,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":313,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":494,"org.easymock.tests2.NameTest.nameForMocksControl":306,"org.easymock.tests2.MockedExceptionTest.testMockedException":478,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":326,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":339,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":148,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":445,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":158,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":78,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":283,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":470,"org.easymock.tests.MockingTest.testNicePartialClassMocking":156,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":288,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":513,"org.easymock.tests2.CaptureTest.testCaptureLast":276,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":322,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":67,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":458,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":368,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":382,"org.easymock.tests.MockingTest.testTwoMocks":154,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":459,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":10,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":82,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":440,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":386,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":497,"org.easymock.samples.ExampleTest.removeNonExistingDocument":266,"org.easymock.tests.UsageStrictMockTest.differentMethods":44,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":215,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":329,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":405,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":496,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":169,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":400,"org.easymock.tests2.MockBuilderTest.testCreateMockString":476,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":112,"org.easymock.tests.UsageExpectAndThrowTest.floatType":76,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":341,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":377,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":336,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":484,"org.easymock.tests.UsageVerifyTest.twoThrows":238,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":316,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":350,"org.easymock.samples.ExampleTest.voteAgainstRemoval":263,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":94,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":198,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":296,"org.easymock.tests.LimitationsTest.privateConstructor":4,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":505,"org.easymock.tests2.UsageConstraintsTest.testNotNull":385,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":477,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":130,"org.easymock.tests2.UsageTest.defaultResetToNice":439,"org.easymock.samples.ExampleTest.voteAgainstRemovals":260,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":25,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":199,"org.easymock.tests.UsageVarargTest.differentLength":181,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":323,"org.easymock.tests2.CallbackTest.callback":268,"org.easymock.tests2.UsageConstraintsTest.equals":363,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":292,"org.easymock.tests.UsageTest.openCallCountByLastCall":147,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":359,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":71,"org.easymock.tests.UsageCallCountTest.tooFewCalls":55,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":454,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":165,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":495,"org.easymock.tests.UsageThrowableTest.throwCheckedException":127,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":489,"org.easymock.tests.MockingTest.testStrictClassMocking":152,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":457,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":132,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":453,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":328,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":220,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":456,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":486,"org.easymock.tests.ObjectMethodsTest.testHashCode":108,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":510,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":402,"org.easymock.tests2.NameTest.nameForNiceMock":305,"org.easymock.tests2.DependencyTest.testInterfaceMocking":396,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":509,"org.easymock.samples.ExampleTest.addDocument":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":352,"org.easymock.tests2.DelegateToTest.testStubDelegate":390,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":357,"org.easymock.tests2.AnswerTest.stubAnswer":485,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":41,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":471,"org.easymock.tests.UsageVarargTest.varargLongAccepted":183,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":45,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":196,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":28,"org.easymock.tests.UsageExpectAndReturnTest.floatType":12,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":314,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":255,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":412,"org.easymock.tests.UsageThrowableTest.noUpperLimit":124,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":228,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":379,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":360,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":447,"org.easymock.tests2.SerializationTest.test":429,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":274,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":168,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":11,"org.easymock.tests2.UsageConstraintsTest.testSame":366,"org.easymock.samples.SupportTest.addDocument":258,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":455,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":342,"org.easymock.tests.GenericTest.testPackageScope":98,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":191,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":411,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":159,"org.easymock.tests2.NameTest.nameForMock":303,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":22,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":475,"org.easymock.tests2.UsageStrictMockTest.differentMethods":312,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":293,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":14,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":88,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":106,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":105,"org.easymock.tests2.MockedExceptionTest.testRealException":480,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":37,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":450,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":201,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":200,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":309,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":70,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":222,"org.easymock.tests2.NameTest.nameForStrictMock":304,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":465,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":444,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":1,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":287,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":448,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":170,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":380,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":462,"org.easymock.tests2.UsageStrictMockTest.range":311,"org.easymock.tests2.UsageConstraintsTest.lessThan":387,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":407,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":416,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":195,"org.easymock.tests2.CaptureTest.testCaptureRightOne":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":346,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":492,"org.easymock.tests2.UsageConstraintsTest.testOr":367,"org.easymock.tests.UsageRangeTest.combination":102,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":284,"org.easymock.tests.UsageTest.wrongArguments":146,"org.easymock.tests2.MockBuilderTest.testWithConstructor":461,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":343,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":113,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":15,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":188,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":23,"org.easymock.tests.UsageVarargTest.varargShortAccepted":182,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":172,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":58,"org.easymock.tests2.UsageConstraintsTest.cmpTo":372,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":483,"org.easymock.tests2.CompareToTest.testLessThan":487,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":190,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":438,"org.easymock.tests2.CaptureTest.testCaptureFromStub":280,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":212,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":463,"org.easymock.tests.UsageTest.unexpectedCallWithArray":145,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":40,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":56,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":503,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":24,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":42,"org.easymock.tests2.UsageConstraintsTest.constraints":361,"org.easymock.samples.ExampleTest.addAndChangeDocument":267,"org.easymock.tests.UsageStrictMockTest.testVerify":46,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":256,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":39,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":62,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":275,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":245,"org.easymock.tests.LimitationsTest.abstractClass":3,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":16,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":229,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":246,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":421,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":176}}]

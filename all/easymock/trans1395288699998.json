[{"position":"org.easymock.internal.ReflectionUtils:176","failures":[0,1,2,3,4,5,6,7],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:120","sourceCode":"return ((java.lang.String)(java.util.Properties.remove(java.lang.String)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[8,9,10,11,12,13,14,15,16,17,18],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"paramType"}},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1092","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","type":"CtInvocationImpl"},"failures":[19,20,21,22],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"substring","key":"substring"}},{"position":"org.easymock.EasyMock:933","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:194","failures":[13,18,2,3,4,5,6],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,8,9,10,50,11,12,13,51,14,15,16,17,0,18],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[52],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1373","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:173","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[53,54],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"failures":[55,56,57,58,59,60],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[50,13,51,0,18,2,3,4,61,7],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"failures":[62],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[63,64,65,66,67,68],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[69,70,71,72],"status":-1,"binaryOperator":"int < 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[13,73,18,2,3,4,61,5,6,7],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"parameterType":"parameterType","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[53,54],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:130","sourceCode":"if (java.lang.Boolean.java.lang.Boolean.valueOf(java.lang.String)) {\n    throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"));\n} ","type":"CtIfImpl"},"failures":[74],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[75,76,77,78,79,80,81,82,83,84,85,86],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Invocation:195","failures":[87,88,89,90,91,92,93,94,26,27,29,32,35,36,42,44,45,95,96,9,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132],"status":-1,"binaryOperator":"(((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[87,133,134,135,136,137,138,53,139,140,141,54,142,143,144,145,146,147,148,63,64,65,66,149,67,68,150,151,152,153,154,155,156,157,158,159,23,23,24,24,160,161,162,91,163,164,165,166,167,168,169,92,170,171,93,172,94,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,95,96,8,173,174,9,50,175,97,176,177,98,178,179,180,181,99,51,182,100,183,101,184,185,0,18,186,187,188,189,190,191,192,193],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.Range:36","failures":[194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,87,209,210,211,88,133,89,212,213,214,215,216,217,218,219,220,221,222,223,134,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,90,252,253,254,255,55,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,135,136,137,138,285,286,53,139,140,141,54,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,56,334,335,336,337,338,57,339,340,341,342,343,344,58,59,345,346,142,143,144,145,146,347,147,348,349,148,350,351,352,353,354,355,356,63,64,65,66,149,67,357,68,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,60,375,376,377,378,379,380,381,150,151,152,153,154,155,156,157,158,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,159,399,400,401,402,403,404,405,406,23,24,407,408,409,410,160,161,162,91,411,163,164,165,166,74,167,168,169,92,170,171,93,172,94,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,95,96,8,173,412,413,174,9,10,414,415,416,417,418,19,419,420,421,422,423,424,20,425,426,427,428,21,52,69,429,430,431,432,22,433,70,434,435,436,437,71,50,438,175,97,11,177,98,12,178,179,180,181,13,99,439,51,182,100,15,101,440,441,442,443,444,445,446,447,448,449,450,451,452,184,453,454,455,185,456,457,458,459,460,461,462,463,464,465,466,467,102,103,104,105,106,107,108,109,110,111,112,113,468,469,470,114,471,472,115,473,116,474,475,476,477,478,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,0,18,479,191,192,193,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,75,499,76,77,78,79,80,81,500,82,84,85,501,86,502,503,504,505,506,507,508,509],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:205","sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:79","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"failures":[200,201,202,204,205,226,264,267,268,270,271,272,274,275,277,278,279,280,281,140,350,353,379,380,158,391,392,394,395,396,397,399,401,402,403,404,406,407,408,409,410,160,161,434,175,179,443,445,449,450,114,474,475,476,477,499,76,79,80,81,500,86,504,506,507,508,509],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[218,241,261,266,290,311,312,315,317,318,319,320,322,323,324,325,327,328,329,330,354,383,440,447,488],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Contains:40","failures":[510],"status":-1,"binaryOperator":"((\"contains(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[64,67],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[197,198,199,200,201,202,203,216,217,218,220,221,222,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255,55,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,274,275,277,278,279,280,281,137,285,286,139,140,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,56,334,335,336,337,338,57,339,340,341,342,343,344,58,59,345,346,145,146,147,350,351,352,353,354,355,63,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,60,375,376,377,380,150,151,152,153,154,155,156,157,158,382,383,384,390,391,392,393,394,395,396,397,398,159,399,400,401,402,403,404,405,406,23,23,24,24,407,408,409,410,160,161,162,91,411,163,164,165,166,167,92,170,171,93,28,31,41,47,95,96,8,173,413,174,9,414,416,417,418,19,419,421,422,423,424,20,425,427,428,21,52,69,429,430,431,432,22,433,70,435,436,437,71,50,438,175,97,179,180,181,99,182,100,101,440,441,442,443,444,445,446,447,448,449,450,451,452,458,461,462,463,464,465,466,467,107,468,469,470,114,471,472,115,473,116,474,475,476,477,117,118,119,120,126,0,191,192,193,480,481,482,483,484,485,486,487,488,491,492,494,495,496,498,75,499,76,77,78,79,80,81,500,82,84,85,501,86,503,504,505,506,507,508,509],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.ReflectionUtils:106","failures":[87,133,137,139,140,141,144,145,146,147,151,158,159,23,23,24,24,160,161,162,91,163,164,165,166,167,92,170,171,93,28,31,41,47,95,96,8,173,174,9,50,175,97,176,177,98,179,180,181,99,182,100,183,101,0,186,188,189,190,193],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[511,512,513,262,263,264,267,268,392,442,443,449,450,514,515,516,517],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[518,263,264,267,268,350,383,384,392,395,443,449,450,507],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:180","sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[50,13,73,18,1,5],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[519,50,438,175],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[520,521],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int) == int","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Captures:53","failures":[522,75,499,76,77,78,79,80,81,500,82,84,85,501,86],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[367,484],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[511,512,263,392,514,516],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:573","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":419,"org.easymock.tests2.UsageTest.argumentsOrdered":450,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":261,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":475,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":297,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":445,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":407,"org.easymock.tests2.DelegateToTest.testReturnException":494,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":238,"org.easymock.tests.MockingTest.testPartialClassMocking":145,"org.easymock.tests.MockClassControlTest.testToString":152,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":478,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":283,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":94,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":306,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":35,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":31,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":311,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":492,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":2,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":425,"org.easymock.tests2.UsageTest.wrongArguments":443,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":351,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":132,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":235,"org.easymock.samples.ExampleTest.answerVsDelegate":400,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":133,"org.easymock.tests2.UsageConstraintsTest.testNull":422,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":349,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":163,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":474,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":157,"org.easymock.tests2.CaptureTest.testPrimitive":77,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":355,"org.easymock.tests.UsageTest.moreThanOneArgument":262,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":330,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":411,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":375,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":385,"org.easymock.tests.UsageTest.argumentsOrdered":268,"org.easymock.tests.UsageVarargTest.varargIntAccepted":272,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":302,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":252,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":97,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":6,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":454,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":112,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":180,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":289,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":55,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":126,"org.easymock.tests.ReplayStateInvalidUsageTest.times":366,"org.easymock.tests2.DependencyTest.testClassMocking":489,"org.easymock.tests2.AnswerTest.answer":458,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":426,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":304,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":467,"org.easymock.tests2.CaptureTest.testAnd":75,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":210,"org.easymock.tests2.UsageTest.strictResetToDefault":441,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":12,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":92,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":60,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":471,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":372,"org.easymock.tests2.DelegateToTest.testDelegate":498,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":389,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":326,"org.easymock.tests.LimitationsTest.mockFinalMethod":138,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":241,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":260,"org.easymock.tests2.DependencyTest.testClassMockingSupport":490,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":379,"org.easymock.tests2.CaptureTest.testCapture1_2446744":78,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":74,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":324,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":465,"org.easymock.tests.UsageThrowableTest.throwError":225,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":360,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":88,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":113,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":90,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":377,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":16,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":49,"org.easymock.samples.PartialClassMockTest.testGetArea":159,"org.easymock.tests.MockingTest.testInterfaceMocking":347,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":361,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":253,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":214,"org.easymock.tests2.UsageTest.niceToStrict":444,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":134,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":36,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":312,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":287,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":179,"org.easymock.tests2.MockBuilderTest.testCreateMock":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":44,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":129,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":514,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":320,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":472,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":209,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":196,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":197,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":233,"org.easymock.tests.UsageOverloadedMethodTest.overloading":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":46,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":40,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":69,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":246,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":216,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":340,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":520,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":52,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":82,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":273,"org.easymock.tests.MockClassControlTest.testEquals":156,"org.easymock.tests2.EasyMockSupportClassTest.testAll":28,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":140,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":515,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":328,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":186,"org.easymock.tests2.CaptureTest.testCaptureAll":499,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":466,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":258,"org.easymock.tests.MockNameTest.defaultName":224,"org.easymock.tests2.UsageConstraintsTest.testMatches":429,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":358,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":376,"org.easymock.samples.ExampleTest.voteForRemovals":404,"org.easymock.tests.UsageVarargTest.allKinds":281,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":382,"org.easymock.samples.BasicClassMockTest.testPrintContent":161,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":259,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":231,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":503,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":497,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":109,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":242,"org.easymock.tests2.UsageConstraintsTest.greaterThan":431,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":7,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":357,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":29,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":371,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":93,"org.easymock.samples.ExampleTest.voteForRemoval":401,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":68,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":483,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":172,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":89,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":455,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":166,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":440,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":158,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":51,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":294,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":470,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":26,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":237,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":493,"org.easymock.tests2.CaptureTest.testCaptureFirst":86,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":293,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":114,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":452,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":249,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":337,"org.easymock.tests2.CaptureTest.testCapture2_2446744":501,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":485,"org.easymock.tests2.UsageTest.moreThanOneArgument":442,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":100,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":305,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":280,"org.easymock.tests.GenericTest.testBridgedEquals":54,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":204,"org.easymock.tests.UsageExpectAndReturnTest.longType":56,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":468,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":256,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":183,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":329,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":434,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":378,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":327,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":207,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":374,"org.easymock.tests.UsageCallCountTest.tooManyCalls":205,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":45,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":338,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":131,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":316,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":230,"org.easymock.tests.MockingTest.testNiceClassMocking":148,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":96,"org.easymock.tests.MockingTest.testClassMocking":143,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":176,"org.easymock.tests2.UsageConstraintsTest.testContains":21,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":198,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":193,"org.easymock.tests2.UsageConstraintsTest.testFind":421,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":218,"org.easymock.tests.MockTypeTest.fromEasyMockClass":211,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":416,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":390,"org.easymock.tests.UsageExpectAndReturnTest.object":339,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":167,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":130,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":116,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":3,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":275,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":222,"org.easymock.tests.UsageTest.exactCallCountByLastCall":269,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":285,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":292,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":386,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":282,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":513,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":18,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":58,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":270,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":245,"org.easymock.tests.MockClassControlTest.testHashCode":155,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":103,"org.easymock.tests2.EasyMockSupportTest.testVerify":477,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":38,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":387,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":195,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":243,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":464,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":502,"org.easymock.tests.UsageVarargTest.varargCharAccepted":274,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":356,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":504,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":310,"org.easymock.tests2.UsageTest.openCallCountByLastCall":446,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":476,"org.easymock.tests.DefaultClassInstantiatorTest.object":63,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":194,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":220,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":518,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":39,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":318,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":190,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":228,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":124,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":102,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":170,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":154,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":317,"org.easymock.tests.CapturesMatcherTest.test":522,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":59,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":206,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":153,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":47,"org.easymock.tests2.UsageTest.resumeIfFailure":451,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":87,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":453,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":240,"org.easymock.tests2.StubTest.stubWithReturnValue":488,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":13,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":435,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":57,"org.easymock.tests2.SerializationTest.testAllMockedMethod":175,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":303,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":516,"org.easymock.samples.SupportTest.voteForRemovals":410,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":53,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":105,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":323,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":519,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":309,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":459,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":284,"org.easymock.tests.UsageExpectAndThrowTest.object":321,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":433,"org.easymock.tests2.DelegateToTest.testWrongClass":496,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":250,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":251,"org.easymock.tests.UsageStrictMockTest.range":395,"org.easymock.samples.ConstructorCalledMockTest.testTax":23,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":456,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":473,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":95,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":322,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":181,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":25,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":267,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":368,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":234,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":511,"org.easymock.tests2.CaptureTest.testCaptureNone":500,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":215,"org.easymock.tests.UsageUnorderedTest.message":350,"org.easymock.tests.UsageVerifyTest.twoReturns":384,"org.easymock.tests.UsageVarargTest.varargByteAccepted":279,"org.easymock.tests2.ThreadingTest.testThreadSafe":482,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":42,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":202,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":160,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":223,"org.easymock.tests2.CaptureTest.testCapture_2617107":76,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":517,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":381,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":307,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":354,"org.easymock.tests2.UsageConstraintsTest.any":427,"org.easymock.tests2.StubTest.stub":487,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":365,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":208,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":308,"org.easymock.tests.UsageExpectAndThrowTest.longType":314,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":149,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":364,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":506,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":107,"org.easymock.tests2.SerializationTest.testClass":50,"org.easymock.tests.LimitationsTest.mockNativeMethod":137,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":141,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":346,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":189,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":123,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":509,"org.easymock.tests2.NameTest.nameForMocksControl":120,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":125,"org.easymock.tests2.MockedExceptionTest.testMockedException":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":30,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":266,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":415,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":147,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":315,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":162,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":99,"org.easymock.tests.MockingTest.testNicePartialClassMocking":146,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":165,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":121,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":1,"org.easymock.tests2.CompareToTest.testCompareEqual":62,"org.easymock.tests2.CaptureTest.testCaptureLast":81,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":380,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":9,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":20,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":70,"org.easymock.tests.MockingTest.testTwoMocks":144,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":10,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":331,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":319,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":449,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":437,"org.easymock.samples.ExampleTest.removeNonExistingDocument":405,"org.easymock.tests.UsageStrictMockTest.differentMethods":396,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":128,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":362,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":104,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":65,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":484,"org.easymock.tests2.MockBuilderTest.testCreateMockString":101,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":150,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":32,"org.easymock.tests.UsageExpectAndThrowTest.floatType":313,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":430,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":27,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":461,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":479,"org.easymock.tests.UsageVerifyTest.twoThrows":383,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":244,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":41,"org.easymock.samples.ExampleTest.voteAgainstRemoval":402,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":213,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":298,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":171,"org.easymock.tests.LimitationsTest.privateConstructor":136,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":17,"org.easymock.tests2.UsageConstraintsTest.testNotNull":436,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":191,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":232,"org.easymock.tests2.UsageTest.defaultResetToNice":448,"org.easymock.samples.ExampleTest.voteAgainstRemovals":399,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":299,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":344,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":122,"org.easymock.tests.UsageVarargTest.differentLength":276,"org.easymock.tests2.CallbackTest.callback":481,"org.easymock.tests2.UsageConstraintsTest.equals":420,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":168,"org.easymock.tests.UsageTest.openCallCountByLastCall":265,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":417,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":353,"org.easymock.tests.UsageCallCountTest.tooFewCalls":200,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":173,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":236,"org.easymock.tests.UsageThrowableTest.throwCheckedException":229,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":512,"org.easymock.tests.MockingTest.testStrictClassMocking":142,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":174,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":286,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":127,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":8,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":367,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":413,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":463,"org.easymock.tests.ObjectMethodsTest.testHashCode":221,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":5,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":486,"org.easymock.tests2.NameTest.nameForNiceMock":119,"org.easymock.tests2.DependencyTest.testInterfaceMocking":491,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":4,"org.easymock.samples.ExampleTest.addDocument":403,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":43,"org.easymock.tests2.DelegateToTest.testStubDelegate":495,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":48,"org.easymock.tests2.AnswerTest.stubAnswer":462,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":393,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":439,"org.easymock.tests.UsageVarargTest.varargLongAccepted":278,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":397,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":296,"org.easymock.tests.UsageExpectAndReturnTest.floatType":333,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":345,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":0,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":24,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":432,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":111,"org.easymock.tests.UsageThrowableTest.noUpperLimit":226,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":247,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":418,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":184,"org.easymock.tests2.SerializationTest.test":438,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":79,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":521,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":64,"org.easymock.tests2.UsageConstraintsTest.testSame":423,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":332,"org.easymock.samples.SupportTest.addDocument":409,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":412,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":363,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":33,"org.easymock.tests.GenericTest.testPackageScope":139,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":388,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":291,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":110,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":348,"org.easymock.tests2.NameTest.nameForMock":117,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":341,"org.easymock.tests2.UsageStrictMockTest.differentMethods":508,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":15,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":169,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":334,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":325,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":219,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":373,"org.easymock.tests2.MockedExceptionTest.testRealException":480,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":212,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":457,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":301,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":73,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":505,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":300,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":352,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":369,"org.easymock.tests2.NameTest.nameForStrictMock":118,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":178,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":414,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":164,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":185,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":22,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":66,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":177,"org.easymock.tests2.UsageStrictMockTest.range":507,"org.easymock.tests2.UsageConstraintsTest.lessThan":71,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":187,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":106,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":469,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":61,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":295,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":37,"org.easymock.tests2.CaptureTest.testCaptureRightOne":84,"org.easymock.tests2.UsageConstraintsTest.testOr":424,"org.easymock.tests.UsageRangeTest.combination":370,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":91,"org.easymock.tests.UsageTest.wrongArguments":264,"org.easymock.tests2.MockBuilderTest.testWithConstructor":11,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":34,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":151,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":335,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":288,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":342,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":67,"org.easymock.tests.UsageVarargTest.varargShortAccepted":277,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":203,"org.easymock.tests2.UsageConstraintsTest.cmpTo":428,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":460,"org.easymock.tests2.CompareToTest.testLessThan":72,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":290,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":447,"org.easymock.tests2.CaptureTest.testCaptureFromStub":85,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":359,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":98,"org.easymock.tests.UsageTest.unexpectedCallWithArray":263,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":392,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":201,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":14,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":343,"org.easymock.tests2.CaptureTest.testCapture":83,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":394,"org.easymock.tests2.UsageConstraintsTest.constraints":19,"org.easymock.samples.ExampleTest.addAndChangeDocument":406,"org.easymock.tests2.ConstraintsToStringTest.containsToString":510,"org.easymock.tests.UsageStrictMockTest.testVerify":398,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":408,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":391,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":257,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":80,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":188,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":254,"org.easymock.tests.LimitationsTest.abstractClass":135,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":336,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":248,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":255,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":115,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":271}}]

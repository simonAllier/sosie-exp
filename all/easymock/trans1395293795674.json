[{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[0,1,2],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:244","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:786","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[3,4,5,6,7,8],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1988","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1495","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:33","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>.getName(), java.lang.Boolean.java.lang.Class<java.lang.Boolean>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:229","failures":[9],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:105","sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","type":"CtInvocationImpl"},"failures":[10],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:142","failures":[11],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:108","sourceCode":"org.easymock.internal.Invocation.validateCaptures()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2124","sourceCode":"if (org.easymock.internal.Invocation == null) {\n    throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\");\n} ","type":"CtIfImpl"},"failures":[12],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"actual":"result"}},{"transplant":{"position":"org.easymock.EasyMock:1470","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,47,48,48],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.CompareTo:41","failures":[49],"status":-1,"binaryOperator":"(java.lang.Object instanceof java.lang.Comparable)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[50,51,52,53,54,55,56,57,5,58,59,6,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[78,31,40,79],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[3,4,5,6,7,8],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:183","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:67","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","type":"CtThrowImpl"},"failures":[80],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"methodName":"propertyFileName"}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"failures":[42],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"position":"org.easymock.internal.RecordState:136","failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,47,48,48],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MocksControl:136","failures":[81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,11,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,70,125,126,127,128,129,130,131,71,72,73,132,133,134,135,136,137,138,139,140,9,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,47,47,48,48,182],"status":-1,"binaryOperator":"org.easymock.internal.IProxyFactory != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","sourceCode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[92,183,184],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[185,186,187],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[188,50,51,81,82,83,84,85,189,86,190,191,87,192,193,194,195,196,52,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,88,89,90,91,92,93,230,94,13,231,232,233,234,53,235,236,237,238,239,240,241,242,243,244,245,246,57,247,248,249,250,251,252,253,254,255,256,257,258,5,14,259,58,59,260,261,15,16,17,18,19,20,21,22,23,24,95,262,263,264,265,266,267,268,269,25,26,270,271,27,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,6,60,301,302,61,62,303,304,305,306,307,308,309,63,64,65,96,97,98,99,11,100,310,311,312,313,101,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,28,29,102,103,104,105,332,333,334,335,336,337,0,1,2,106,107,108,109,110,111,112,113,338,339,340,341,342,343,344,345,346,66,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,114,115,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,30,401,67,68,402,116,403,117,31,32,404,405,406,33,34,35,36,407,408,409,410,411,37,412,38,39,413,40,41,414,415,416,417,79,42,43,44,418,419,420,421,422,423,424,425,426,69,427,428,429,118,119,120,121,430,431,122,123,432,433,434,435,436,124,437,70,125,438,126,127,128,129,439,130,440,131,71,72,441,73,132,133,134,442,443,444,12,445,446,447,448,74,449,450,451,452,453,75,76,77,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,45,477,478,479,46,480,481,482,483,484,135,136,137,138,139,140,9,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,485,161,162,163,164,486,165,166,167,168,169,170,171,172,173,174,175,487,488,176,177,178,489,179,490,491,492,493,180,181,494,47,48,182,495,496,497,498,499,500,501,502,503],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:320","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[215,379],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[183],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[404,405,34,36,407,409,414,42,466,468,476],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:958","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Long>(long))","type":"CtInvocationImpl"},"failures":[415],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:39","sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","type":"CtInvocationImpl"},"failures":[3,4,504,5,300,6,60,61,62,7,505,8,506,448,74,75,76],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[188,50,51,53,14,58,59,276,277,300,60,61,62,342,345,346,507,508,509,510,8,511,506,30,67,68,448,74,75,76],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"expected"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[453],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Same:37","failures":[35],"status":-1,"binaryOperator":"(java.lang.Object) == java.lang.Object","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:315","failures":[231,249,264,268,269,270,271,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,302,332,333,334,335,336,337,344,132,133,134,442,446,452,46],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[34,35,409,410,414,415,42,43],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"method"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[83,84,85,86,95,97,98,99,100,101,104,107,512,114,116,117,118,119,120,121,122,123,124,513,70,125,127,128,129,130,71,72,514,73,134,138,9,150,156,159,160,161,162,163,164,165,168,169,170,171,180,181,47,47,48,48,182],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:144","sourceCode":"java.io.DataOutputStream.writeLong(java.lang.Long.longValue())","type":"CtInvocationImpl"},"failures":[92,183,184],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:123","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[116,403,117],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:227","sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[188,50,51,192,193,194,195,196,52,197,198,199,200,201,202,203,204,221,227,13,231,232,233,234,53,235,236,237,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,257,258,5,14,259,58,59,260,261,15,16,17,18,19,20,21,22,23,24,262,263,264,265,266,267,268,269,25,26,270,271,27,272,273,274,275,276,277,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,6,60,301,302,61,62,303,304,306,307,308,309,63,64,65,312,313,314,315,316,317,318,319,28,29,332,333,334,335,336,337,0,1,2,339,341,342,343,344,345,346,66,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,372,373,515,516,379,380,381,382,383,384,386,392,393,399,400,30,401,67,68,402,403,31,32,404,405,33,34,35,36,407,408,409,410,411,37,412,38,39,413,40,41,414,415,416,417,79,42,43,44,418,419,420,421,422,423,424,425,426,69,427,428,429,118,431,433,434,435,436,132,133,134,442,444,445,446,447,448,74,449,450,451,452,453,75,76,77,454,455,456,457,458,459,460,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,45,477,478,479,46,480,481,482,483,484,138,485,487,488,492,493,494,495,496,497,498,499,500,502,503],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:322","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":405,"org.easymock.tests2.UsageTest.argumentsOrdered":76,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":299,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":427,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":215,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":450,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":494,"org.easymock.tests2.DelegateToTest.testReturnException":380,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":333,"org.easymock.tests.MockingTest.testPartialClassMocking":84,"org.easymock.tests.MockClassControlTest.testToString":108,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":461,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":339,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":173,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":224,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":144,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":9,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":279,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":488,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":408,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":25,"org.easymock.tests2.UsageTest.wrongArguments":74,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":398,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":318,"org.easymock.samples.ExampleTest.answerVsDelegate":496,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":101,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":191,"org.easymock.tests2.UsageConstraintsTest.testNull":34,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":161,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":113,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":69,"org.easymock.tests2.CaptureTest.testPrimitive":469,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":27,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":298,"org.easymock.tests.UsageTest.moreThanOneArgument":300,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":485,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":22,"org.easymock.tests.UsageTest.argumentsOrdered":62,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":192,"org.easymock.tests.UsageVarargTest.varargIntAccepted":237,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_NotFound":516,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":511,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":220,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":15,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":187,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":124,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":178,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":377,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":128,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":207,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":19,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":509,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":392,"org.easymock.tests.ReplayStateInvalidUsageTest.times":328,"org.easymock.tests2.DependencyTest.testClassMocking":174,"org.easymock.tests2.AnswerTest.answer":455,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":409,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":222,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":436,"org.easymock.tests2.CaptureTest.testAnd":466,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":311,"org.easymock.tests2.UsageTest.strictResetToDefault":447,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":438,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":168,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":21,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":422,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":198,"org.easymock.tests2.DelegateToTest.testDelegate":384,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":196,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":294,"org.easymock.tests.LimitationsTest.mockFinalMethod":105,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":336,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":204,"org.easymock.tests2.DependencyTest.testClassMockingSupport":175,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":276,"org.easymock.tests2.CaptureTest.testCapture1_2446744":470,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":486,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":292,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":434,"org.easymock.tests.UsageThrowableTest.throwError":262,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":322,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":313,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":57,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":378,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":24,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":158,"org.easymock.samples.PartialClassMockTest.testGetArea":182,"org.easymock.tests.MockingTest.testInterfaceMocking":189,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":323,"org.easymock.tests2.CompareToTest.testLessOrEqual":78,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":16,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":233,"org.easymock.tests2.UsageTest.niceToStrict":449,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":145,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":256,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":205,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":127,"org.easymock.tests2.MockBuilderTest.testCreateMock":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":153,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":395,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":7,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":288,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":423,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":310,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":2,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":304,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":316,"org.easymock.tests.UsageOverloadedMethodTest.overloading":248,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":149,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":38,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":344,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":247,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":358,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":412,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":183,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":475,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":238,"org.easymock.tests2.EasyMockSupportClassTest.testAll":138,"org.easymock.tests.MockClassControlTest.testEquals":112,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":98,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":505,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":296,"org.easymock.tests2.CaptureTest.testCaptureAll":467,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":435,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":202,"org.easymock.tests.MockNameTest.defaultName":272,"org.easymock.tests2.UsageConstraintsTest.testMatches":39,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":23,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":320,"org.easymock.samples.ExampleTest.voteForRemovals":500,"org.easymock.tests.UsageVarargTest.allKinds":246,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":188,"org.easymock.samples.BasicClassMockTest.testPrintContent":181,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":203,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":268,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":399,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":337,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":374,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":383,"org.easymock.tests2.UsageConstraintsTest.greaterThan":40,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":230,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":139,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":197,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":171,"org.easymock.samples.ExampleTest.voteForRemoval":497,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":94,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":481,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":172,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":314,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":489,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":164,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":446,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":95,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":131,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":212,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":420,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":136,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":332,"org.easymock.tests2.CaptureTest.testCaptureFirst":478,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":379,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":211,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":421,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":454,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":66,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":354,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":483,"org.easymock.tests2.CaptureTest.testCapture2_2446744":477,"org.easymock.tests2.UsageTest.moreThanOneArgument":448,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":72,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":223,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":245,"org.easymock.tests.GenericTest.testBridgedEquals":11,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":64,"org.easymock.tests.UsageExpectAndReturnTest.longType":350,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":418,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":200,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":514,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":297,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":417,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":250,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":295,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":20,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":274,"org.easymock.tests.UsageCallCountTest.tooManyCalls":65,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":306,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":154,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":355,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":397,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":284,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":267,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":119,"org.easymock.tests.MockingTest.testNiceClassMocking":87,"org.easymock.tests.MockingTest.testClassMocking":82,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":513,"org.easymock.tests2.UsageConstraintsTest.testContains":37,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":305,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":134,"org.easymock.tests2.UsageConstraintsTest.testFind":33,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":249,"org.easymock.tests.MockTypeTest.fromEasyMockClass":312,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":445,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":257,"org.easymock.tests.UsageExpectAndReturnTest.object":357,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":165,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":396,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":426,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":240,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":254,"org.easymock.tests.UsageTest.exactCallCountByLastCall":303,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":13,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":210,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":193,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":338,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":504,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":115,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":235,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":363,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":343,"org.easymock.tests.MockClassControlTest.testHashCode":111,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":368,"org.easymock.tests2.EasyMockSupportTest.testVerify":429,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":147,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":194,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":1,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":341,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":433,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":54,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":443,"org.easymock.tests.UsageVarargTest.varargCharAccepted":239,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_Found":515,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":229,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":400,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":228,"org.easymock.tests2.UsageTest.openCallCountByLastCall":451,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":428,"org.easymock.tests.DefaultClassInstantiatorTest.object":88,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":0,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":252,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":148,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":286,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":265,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":390,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":367,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":169,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":110,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":285,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":364,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":273,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":156,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":109,"org.easymock.tests2.UsageTest.resumeIfFailure":77,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":100,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":177,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":335,"org.easymock.tests2.StubTest.stubWithReturnValue":46,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":439,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":79,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":356,"org.easymock.tests2.SerializationTest.testAllMockedMethod":117,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":221,"org.easymock.samples.SupportTest.voteForRemovals":493,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":8,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":96,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":370,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":291,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":227,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":456,"org.easymock.tests.UsageExpectAndThrowTest.object":289,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":340,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":415,"org.easymock.tests2.DelegateToTest.testWrongClass":382,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":28,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":10,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":29,"org.easymock.samples.ConstructorCalledMockTest.testTax":47,"org.easymock.tests.UsageStrictMockTest.range":58,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":490,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":425,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":118,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":290,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":135,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":61,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":330,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":317,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":3,"org.easymock.tests2.CaptureTest.testCaptureNone":474,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":234,"org.easymock.tests.UsageUnorderedTest.message":53,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":56,"org.easymock.tests.UsageVerifyTest.twoReturns":51,"org.easymock.tests.UsageVarargTest.varargByteAccepted":244,"org.easymock.tests2.ThreadingTest.testThreadSafe":480,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":151,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":309,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":180,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":255,"org.easymock.tests2.CaptureTest.testCapture_2617107":468,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":506,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":278,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":225,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":271,"org.easymock.tests2.UsageConstraintsTest.any":410,"org.easymock.tests2.StubTest.stub":479,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":327,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":226,"org.easymock.tests.UsageExpectAndThrowTest.longType":282,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":334,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":92,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":326,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":401,"org.easymock.tests2.SerializationTest.testClass":116,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":372,"org.easymock.tests.LimitationsTest.mockNativeMethod":104,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":99,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":366,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":389,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":402,"org.easymock.tests2.NameTest.nameForMocksControl":465,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":391,"org.easymock.tests2.MockedExceptionTest.testMockedException":133,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":140,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":302,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":12,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":86,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":283,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":159,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":130,"org.easymock.tests.MockingTest.testNicePartialClassMocking":85,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":163,"org.easymock.tests2.CompareToTest.testNotComparable":49,"org.easymock.tests2.CaptureTest.testCaptureLast":473,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":387,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":185,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":277,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":407,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":123,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":416,"org.easymock.tests.MockingTest.testTwoMocks":83,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":432,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":347,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":287,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":75,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":43,"org.easymock.samples.ExampleTest.removeNonExistingDocument":501,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":394,"org.easymock.tests.UsageStrictMockTest.differentMethods":59,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":324,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":369,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":90,"org.easymock.tests2.ConstraintsToStringTest.andToString":510,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":482,"org.easymock.tests2.MockBuilderTest.testCreateMockString":73,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":106,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":141,"org.easymock.tests.UsageExpectAndThrowTest.floatType":281,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":413,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":137,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":458,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":385,"org.easymock.tests.UsageVerifyTest.twoThrows":50,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":150,"org.easymock.samples.ExampleTest.voteAgainstRemoval":498,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":216,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":232,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":170,"org.easymock.tests.LimitationsTest.privateConstructor":103,"org.easymock.tests2.UsageConstraintsTest.testNotNull":42,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":132,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":269,"org.easymock.tests2.UsageTest.defaultResetToNice":453,"org.easymock.samples.ExampleTest.voteAgainstRemovals":495,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":217,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":362,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":388,"org.easymock.tests.UsageVarargTest.differentLength":241,"org.easymock.tests2.CallbackTest.callback":386,"org.easymock.tests2.UsageConstraintsTest.equals":406,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":166,"org.easymock.tests.UsageTest.openCallCountByLastCall":301,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":31,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":270,"org.easymock.tests.UsageCallCountTest.tooFewCalls":307,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":121,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":319,"org.easymock.tests.UsageThrowableTest.throwCheckedException":266,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":4,"org.easymock.tests.MockingTest.testStrictClassMocking":81,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":122,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":231,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":393,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":120,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":329,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":431,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":460,"org.easymock.tests.ObjectMethodsTest.testHashCode":253,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":186,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":484,"org.easymock.tests2.NameTest.nameForNiceMock":464,"org.easymock.tests2.DependencyTest.testInterfaceMocking":487,"org.easymock.samples.ExampleTest.addDocument":499,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":152,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":157,"org.easymock.tests2.DelegateToTest.testStubDelegate":381,"org.easymock.tests2.AnswerTest.stubAnswer":459,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":14,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":440,"org.easymock.tests.UsageVarargTest.varargLongAccepted":243,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":260,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":214,"org.easymock.tests.UsageExpectAndReturnTest.floatType":349,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":365,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":114,"org.easymock.tests2.ConstraintsToStringTest.orToString":507,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":48,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":41,"org.easymock.tests.UsageThrowableTest.noUpperLimit":263,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":345,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":376,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":32,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":176,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":471,"org.easymock.tests2.SerializationTest.test":403,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":184,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":89,"org.easymock.tests2.UsageConstraintsTest.testSame":35,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":348,"org.easymock.samples.SupportTest.addDocument":492,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":430,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":325,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":142,"org.easymock.tests.GenericTest.testPackageScope":97,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":195,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":209,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":375,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":190,"org.easymock.tests2.NameTest.nameForMock":462,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":359,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":441,"org.easymock.tests2.UsageStrictMockTest.differentMethods":68,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":167,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":351,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":293,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":251,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":199,"org.easymock.tests2.MockedExceptionTest.testRealException":442,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":315,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":491,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":219,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":30,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":218,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":26,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":331,"org.easymock.tests2.NameTest.nameForStrictMock":463,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":126,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":444,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":162,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":179,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":414,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":91,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":70,"org.easymock.tests2.UsageStrictMockTest.range":67,"org.easymock.tests2.UsageConstraintsTest.lessThan":44,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":371,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":419,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":213,"org.easymock.tests2.CaptureTest.testCaptureRightOne":476,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":146,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":80,"org.easymock.tests2.UsageConstraintsTest.testOr":36,"org.easymock.tests.UsageRangeTest.combination":52,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":160,"org.easymock.tests.UsageTest.wrongArguments":60,"org.easymock.tests2.MockBuilderTest.testWithConstructor":437,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":143,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":107,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":352,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":206,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":360,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":93,"org.easymock.tests.UsageVarargTest.varargShortAccepted":242,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":63,"org.easymock.tests2.UsageConstraintsTest.cmpTo":411,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":457,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":208,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":452,"org.easymock.tests2.CaptureTest.testCaptureFromStub":45,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":321,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":125,"org.easymock.tests.UsageTest.unexpectedCallWithArray":6,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":5,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":308,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":361,"org.easymock.tests2.UsageConstraintsTest.constraints":404,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":259,"org.easymock.samples.ExampleTest.addAndChangeDocument":502,"org.easymock.tests2.ConstraintsToStringTest.notToString":508,"org.easymock.tests.UsageStrictMockTest.testVerify":261,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":503,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":258,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":201,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":472,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":512,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":17,"org.easymock.tests.LimitationsTest.abstractClass":102,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":353,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":18,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":346,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":424,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":236}}]

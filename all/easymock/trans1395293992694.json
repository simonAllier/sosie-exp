[{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:230","sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[1,2,3,4,5],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[19,20,21],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1291","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[22,23],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ClassProxyFactory:191","failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,19,85,7,8,9,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124],"status":-1,"binaryOperator":"org.easymock.ConstructorArgs != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[125],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[126],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"methodName","key":"methodName"}},{"position":"org.easymock.EasyMock:972","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:62","sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"t"}},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[105,106,107,108,109],"status":-1,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:44","failures":[127,128,129,130,131,132,133,134,135,136,137,138,24,139,25,140,141,142,143,144,145,146,147,22,23,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,26,168,169,27,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,28,29,30,31,186,187,32,33,188,34,35,37,38,189,39,190,40,41,42,43,44,191,45,46,47,48,192,49,50,51,52,53,54,55,193,194,195,196,197,198,199,200,6,56,58,59,61,62,63,64,66,201,67,68,69,71,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,72,73,217,74,75,76,77,218,78,79,80,81,82,83,84,19,85,219,220,221,222,223,224,225,226,227,125,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,7,8,9,10,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,20,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,86,87,88,89,90,295,296,297,298,11,299,300,301,302,303,304,305,306,307,308,12,309,310,91,311,312,313,314,92,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,93,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,94,95,96,97,98,99,100,386,387,388,389,21,390,391,392,393,394,395,396,397,101,102,103,104,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,1,440,2,441,442,443,444,445,446,447,448,3,4,449,5,450,451,452,453,454,455,456,457,458,13,14,15,16,17,18,459,460,461,462,463,464,465,466,467,468,469,470,105,106,107,108,109,110,111,112,113,114,115,116,117,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,118,119,120,121,122,507,123,508,509,124,510,511,512,513,514],"status":-1,"binaryOperator":"(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1594","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","type":"CtInvocationImpl"},"failures":[239],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:46","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>, java.lang.Byte.java.lang.Byte.valueOf(((byte)(0))))","type":"CtInvocationImpl"},"failures":[284,286,288,289,291,382,489],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Injector:62","sourceCode":"final org.easymock.internal.InjectionPlan org.easymock.internal.InjectionPlan = new org.easymock.internal.InjectionPlan()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>).append(\")\")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:49","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[239],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:85","failures":[],"status":0,"binaryOperator":"(java.util.Stack<org.easymock.IArgumentMatcher> != null)","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"failures":[515],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:180","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[66,91],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1726","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[198,81,85],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:122","sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:250","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[395],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"failures":[132,24,139,25,144,147,22,23,150,151,152,154,155,156,157,158,159,160,161,162,164,165,167,172,173,174,175,176,177,178,180,181,182,183,184,185,28,29,30,31,187,32,33,34,39,41,49,55,6,62,64,66,203,204,205,206,207,208,209,210,211,212,213,215,216,72,73,217,74,75,76,78,83,225,226,227,125,229,230,231,232,233,234,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,9,258,266,267,268,270,271,273,20,274,275,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,293,294,88,89,90,298,299,300,301,307,308,12,309,310,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,93,337,338,340,341,342,343,344,345,373,374,375,376,378,379,380,381,382,383,384,385,103,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,421,422,423,424,425,426,427,428,429,430,17,459,460,461,463,464,466,467,468,469,470,106,107,471,472,473,479,481,482,494,499,500,501,502,503,504,505,121,122,123],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[21],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1495","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[516,517,339,518,519,500],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[22,23],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"failures":[73,81],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:972","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.RecordState:136","failures":[214,225,226,229,230,231,232,238,240,241,243,244,250,251,252,278,86,86,87,87,298,307,308,310,380,381,382,383,384,429,430,474,475,476,477,478,501],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[520,243],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[521,203,204,205,206,207,208,209,210,211,212,522,213,214,215,216,515],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"potentialValue":"value","capture":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[24,139,25,523],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:336","sourceCode":"org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"failures":[152,154,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,78,225,226,227,125,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,278,298,11,307,308,12,309,310,380,381,382,383,384,385,429,430,17,470,500,501],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:126","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1964","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:193","sourceCode":"if (!(this.boolean)) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:217","sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[132,24,139,25,140,141,142,143,144,145,146,147,22,23,150,151,152,154,155,156,157,158,159,160,161,162,163,164,165,166,167,172,173,174,175,176,177,178,179,180,181,182,183,184,185,28,29,30,31,187,32,33,34,39,41,49,55,196,197,198,199,200,6,56,58,62,63,64,66,68,69,71,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,72,73,217,74,75,76,77,78,81,82,83,84,225,226,227,125,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,7,8,9,10,258,265,266,267,268,269,270,271,273,20,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,86,86,87,87,88,89,90,295,296,297,298,11,299,300,301,302,303,304,305,306,307,308,12,309,310,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,93,337,338,339,340,341,342,343,344,345,346,347,348,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,94,387,388,389,21,390,391,392,393,394,395,396,397,103,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,421,422,423,424,425,426,427,428,429,430,445,449,451,454,455,456,13,14,15,16,17,18,459,460,461,463,464,465,466,467,468,469,470,106,107,108,110,111,112,113,114,115,116,117,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,120,121,122,123,510,511,512,513,514],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"shouldBeUsedInOneThread":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:52","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double.valueOf(0))","type":"CtInvocationImpl"},"failures":[127,128,129,130,131,132,133,134,135,136,137,138,24,139,25,140,141,142,143,144,145,146,147,22,23,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,26,27,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,28,29,30,31,186,187,32,33,188,34,35,36,37,38,189,39,190,40,41,42,43,44,191,45,46,47,48,192,49,50,51,52,53,54,55,193,194,195,196,197,198,199,200,6,56,57,58,59,60,61,62,63,64,65,66,201,67,68,69,70,71,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,72,73,217,74,75,76,77,218,78,79,80,81,82,83,84,19,85,225,226,227,125,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,7,8,9,10,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,273,20,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,86,87,88,89,90,295,296,297,298,11,299,300,301,302,303,304,305,306,307,308,12,309,310,91,311,312,313,314,92,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,93,337,338,339,340,341,342,343,344,345,346,347,348,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,524,94,95,96,97,98,99,525,100,386,387,388,389,21,390,391,392,393,394,395,396,397,101,102,103,104,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,1,440,2,441,442,443,444,445,446,447,448,3,4,449,5,450,451,452,453,454,455,456,457,458,13,14,15,16,17,18,459,460,461,462,463,464,465,466,467,468,469,470,105,106,107,108,109,110,111,112,113,114,115,116,117,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,118,119,120,121,122,507,123,508,509,124,510,511,512,513,514],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Equals:53","failures":[164,228,343],"status":-1,"binaryOperator":"(java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:40","sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:41","sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1013","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[203,205,213,227,125,230,232,233,235,245,250],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[132,24,139,144,22,150,151,155,156,157,159,161,162,166,167,172,173,174,175,176,177,178,180,181,182,183,28,29,30,31,187,32,33,34,39,41,49,55,6,62,64,66,203,204,206,207,210,211,212,213,215,216,72,73,217,74,75,76,78,83,225,226,227,125,229,230,231,232,233,234,236,237,238,239,240,241,242,243,244,245,246,247,249,250,251,252,258,267,271,273,20,274,275,278,280,281,284,286,288,289,291,88,295,296,297,298,299,300,301,307,308,310,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,341,342,345,380,381,382,383,384,103,421,423,424,425,426,427,428,429,430,1,2,3,4,5,451,106,108,471,473,494,496,497,501,503,504,121,122,123],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","answer":"value"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":125,"org.easymock.tests2.UsageTest.argumentsOrdered":165,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":337,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":182,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":259,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":440,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":160,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":285,"org.easymock.tests2.DelegateToTest.testReturnException":266,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":14,"org.easymock.tests.MockingTest.testPartialClassMocking":121,"org.easymock.tests.MockClassControlTest.testToString":112,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":195,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":451,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":448,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":85,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":191,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":398,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":41,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":151,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":370,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":234,"org.easymock.tests2.UsageTest.wrongArguments":158,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":307,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":138,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":304,"org.easymock.samples.ExampleTest.answerVsDelegate":287,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":92,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":509,"org.easymock.tests2.UsageConstraintsTest.testNull":230,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":74,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":181,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":117,"org.easymock.tests2.CaptureTest.testPrimitive":206,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":310,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":417,"org.easymock.tests.UsageTest.moreThanOneArgument":338,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":217,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":476,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":510,"org.easymock.tests.UsageTest.argumentsOrdered":344,"org.easymock.tests.UsageVarargTest.varargIntAccepted":461,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_NotFound":0,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":444,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":380,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":56,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":169,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":263,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":63,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":433,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":384,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":354,"org.easymock.tests.ReplayStateInvalidUsageTest.times":394,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":132,"org.easymock.tests2.DependencyTest.testClassMocking":148,"org.easymock.tests2.AnswerTest.answer":144,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":235,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":446,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":143,"org.easymock.tests2.CaptureTest.testAnd":203,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":312,"org.easymock.tests2.UsageTest.strictResetToDefault":156,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":60,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":81,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":475,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":496,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":176,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":514,"org.easymock.tests2.DelegateToTest.testDelegate":270,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":353,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":413,"org.easymock.tests.LimitationsTest.mockFinalMethod":104,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":17,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":493,"org.easymock.tests2.DependencyTest.testClassMockingSupport":149,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":418,"org.easymock.tests2.CaptureTest.testCapture1_2446744":207,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":218,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":411,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":141,"org.easymock.tests.UsageThrowableTest.throwError":421,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":389,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":314,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":264,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":478,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":194,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":357,"org.easymock.samples.PartialClassMockTest.testGetArea":88,"org.easymock.tests.MockingTest.testInterfaceMocking":507,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":21,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":381,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":296,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":458,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":399,"org.easymock.tests2.UsageTest.niceToStrict":159,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":45,"org.easymock.tests2.ThreadingTest.testChangeDefault":272,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":431,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":62,"org.easymock.tests2.MockBuilderTest.testCreateMock":68,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":52,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":135,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":516,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":407,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":177,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":311,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":488,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":371,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":302,"org.easymock.tests.UsageOverloadedMethodTest.overloading":300,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":192,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":482,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":240,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":299,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":328,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":239,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":212,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":462,"org.easymock.tests.MockClassControlTest.testEquals":116,"org.easymock.tests2.EasyMockSupportClassTest.testAll":39,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":107,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":415,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":491,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":142,"org.easymock.tests2.CaptureTest.testCaptureAll":204,"org.easymock.tests.MockNameTest.defaultName":386,"org.easymock.tests2.UsageConstraintsTest.testMatches":241,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":477,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":387,"org.easymock.samples.ExampleTest.voteForRemovals":291,"org.easymock.tests.UsageVarargTest.allKinds":470,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":471,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":492,"org.easymock.samples.BasicClassMockTest.testPrintContent":90,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":427,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":276,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":18,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":260,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":269,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":525,"org.easymock.tests2.UsageConstraintsTest.greaterThan":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":190,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":495,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":84,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":358,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":100,"org.easymock.samples.ExampleTest.voteForRemoval":288,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":19,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":273,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":126,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":315,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":77,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":350,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":155,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":93,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":67,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":438,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":174,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":423,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":38,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":13,"org.easymock.tests2.CaptureTest.testCaptureFirst":216,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":265,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":437,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":175,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":167,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":485,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":324,"org.easymock.tests2.UsageTest.moreThanOneArgument":157,"org.easymock.tests2.CaptureTest.testCapture2_2446744":215,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":274,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":447,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":69,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":469,"org.easymock.tests.GenericTest.testBridgedEquals":109,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":378,"org.easymock.tests.UsageExpectAndReturnTest.longType":320,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":489,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":172,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":416,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":248,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":306,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":414,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":474,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":347,"org.easymock.tests.UsageCallCountTest.tooManyCalls":379,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":373,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":53,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":325,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":137,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":403,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":426,"org.easymock.tests.MockingTest.testNiceClassMocking":124,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":29,"org.easymock.tests.MockingTest.testClassMocking":119,"org.easymock.tests2.UsageConstraintsTest.testContains":238,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":372,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":9,"org.easymock.tests2.UsageConstraintsTest.testFind":229,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":301,"org.easymock.tests.MockTypeTest.fromEasyMockClass":313,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":498,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":154,"org.easymock.tests.UsageExpectAndReturnTest.object":327,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":78,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":136,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":180,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":464,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":456,"org.easymock.tests.UsageTest.exactCallCountByLastCall":345,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":298,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":436,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":511,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":450,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":35,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":459,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":333,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":481,"org.easymock.tests.MockClassControlTest.testHashCode":115,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":254,"org.easymock.tests2.EasyMockSupportTest.testVerify":184,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":47,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":512,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":487,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":479,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":140,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":202,"org.easymock.tests.UsageVarargTest.varargCharAccepted":463,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":524,"org.easymock.tests2.CaptureTest.testCaptureMultiple":521,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":277,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":5,"org.easymock.tests2.UsageTest.openCallCountByLastCall":161,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":183,"org.easymock.tests.DefaultClassInstantiatorTest.object":94,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":486,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":454,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":405,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":48,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":424,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":130,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":253,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":114,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":82,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":356,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":404,"org.easymock.tests.CapturesMatcherTest.test":515,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":334,"org.easymock.tests.ReplayStateInvalidCallsTest.times":362,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":346,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":363,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":55,"org.easymock.tests2.UsageTest.resumeIfFailure":166,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":91,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":168,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":16,"org.easymock.tests2.StubTest.stubWithReturnValue":6,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":65,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":249,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":326,"org.easymock.tests2.SerializationTest.testAllMockedMethod":25,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":445,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":517,"org.easymock.samples.SupportTest.voteForRemovals":284,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":105,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":256,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":410,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":523,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":449,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":145,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":452,"org.easymock.tests.UsageExpectAndThrowTest.object":408,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":246,"org.easymock.tests2.DelegateToTest.testWrongClass":268,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":429,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":360,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":430,"org.easymock.tests.UsageStrictMockTest.range":503,"org.easymock.samples.ConstructorCalledMockTest.testTax":86,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":170,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":179,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":28,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":409,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":64,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":396,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":37,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":343,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":303,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":518,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":352,"org.easymock.tests2.CaptureTest.testCaptureNone":211,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":297,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":220,"org.easymock.tests.UsageUnorderedTest.message":385,"org.easymock.tests.UsageVerifyTest.twoReturns":473,"org.easymock.tests.UsageVarargTest.varargByteAccepted":468,"org.easymock.tests2.ThreadingTest.testThreadSafe":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":50,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":376,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":457,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":89,"org.easymock.tests2.CaptureTest.testCapture_2617107":205,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":420,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":3,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":309,"org.easymock.tests2.UsageConstraintsTest.any":236,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":393,"org.easymock.tests2.StubTest.stub":200,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":348,"org.easymock.tests.UsageExpectAndThrowTest.longType":401,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":4,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":15,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":98,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":392,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":279,"org.easymock.tests2.SerializationTest.testClass":24,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":258,"org.easymock.tests.LimitationsTest.mockNativeMethod":103,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":108,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":336,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":129,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":368,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":282,"org.easymock.tests2.NameTest.nameForMocksControl":199,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":221,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":131,"org.easymock.tests2.MockedExceptionTest.testMockedException":8,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":40,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":342,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":402,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":153,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":123,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":72,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":66,"org.easymock.tests.MockingTest.testNicePartialClassMocking":122,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":76,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":127,"org.easymock.tests2.CaptureTest.testCaptureLast":210,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":419,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":33,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":233,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":367,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":247,"org.easymock.tests.MockingTest.testTwoMocks":120,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":364,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":188,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":317,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":406,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":164,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":251,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":224,"org.easymock.samples.ExampleTest.removeNonExistingDocument":292,"org.easymock.tests.UsageStrictMockTest.differentMethods":504,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":390,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":134,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":255,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":96,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":223,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":20,"org.easymock.tests2.MockBuilderTest.testCreateMockString":71,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":110,"org.easymock.tests.UsageExpectAndThrowTest.floatType":400,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":42,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":242,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":189,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":147,"org.easymock.tests.UsageVerifyTest.twoThrows":472,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":36,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":480,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":49,"org.easymock.samples.ExampleTest.voteAgainstRemoval":289,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":2,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":295,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":83,"org.easymock.tests.LimitationsTest.privateConstructor":102,"org.easymock.tests2.UsageConstraintsTest.testNotNull":250,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":428,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":7,"org.easymock.tests2.UsageTest.defaultResetToNice":163,"org.easymock.samples.ExampleTest.voteAgainstRemovals":286,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":441,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":332,"org.easymock.tests.UsageVarargTest.differentLength":465,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":128,"org.easymock.tests2.CallbackTest.callback":185,"org.easymock.tests2.UsageConstraintsTest.equals":228,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":79,"org.easymock.tests.UsageTest.openCallCountByLastCall":341,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":225,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":12,"org.easymock.tests.UsageCallCountTest.tooFewCalls":374,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":31,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":305,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":222,"org.easymock.tests.UsageThrowableTest.throwCheckedException":425,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":519,"org.easymock.tests.MockingTest.testStrictClassMocking":118,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":32,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":11,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":133,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":30,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":395,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":187,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":23,"org.easymock.tests.ObjectMethodsTest.testHashCode":455,"org.easymock.tests2.NameTest.nameForNiceMock":198,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":275,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":366,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":361,"org.easymock.tests2.DependencyTest.testInterfaceMocking":150,"org.easymock.samples.ExampleTest.addDocument":290,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":193,"org.easymock.tests2.DelegateToTest.testStubDelegate":267,"org.easymock.tests2.AnswerTest.stubAnswer":22,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":501,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":201,"org.easymock.tests.UsageVarargTest.varargLongAccepted":467,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":505,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":1,"org.easymock.tests.UsageExpectAndReturnTest.floatType":319,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":335,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":34,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":87,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":483,"org.easymock.tests.UsageThrowableTest.noUpperLimit":422,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":244,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":262,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":226,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":26,"org.easymock.tests2.SerializationTest.test":139,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":208,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":95,"org.easymock.tests2.UsageConstraintsTest.testSame":231,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":318,"org.easymock.samples.SupportTest.addDocument":283,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":186,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":351,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":391,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":43,"org.easymock.tests.GenericTest.testPackageScope":106,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":513,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":435,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":261,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":508,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":349,"org.easymock.tests2.NameTest.nameForMock":196,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":329,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":70,"org.easymock.tests2.UsageStrictMockTest.differentMethods":281,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":80,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":321,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":412,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":453,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":497,"org.easymock.tests2.MockedExceptionTest.testRealException":10,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":316,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":443,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":171,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":442,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":278,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":397,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":308,"org.easymock.tests2.NameTest.nameForStrictMock":197,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":61,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":152,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":75,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":27,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":97,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":245,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":58,"org.easymock.tests2.UsageStrictMockTest.range":280,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":355,"org.easymock.tests2.UsageConstraintsTest.lessThan":252,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":257,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":439,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":46,"org.easymock.tests2.CaptureTest.testCaptureRightOne":213,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":219,"org.easymock.tests2.UsageConstraintsTest.testOr":232,"org.easymock.tests.UsageRangeTest.combination":494,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":73,"org.easymock.tests.UsageTest.wrongArguments":340,"org.easymock.tests2.MockBuilderTest.testWithConstructor":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":44,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":111,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":322,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":432,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":330,"org.easymock.tests.UsageVarargTest.varargShortAccepted":466,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":99,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":377,"org.easymock.tests2.UsageConstraintsTest.cmpTo":237,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":369,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":146,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":359,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":434,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":162,"org.easymock.tests2.CaptureTest.testCaptureFromStub":214,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":388,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":59,"org.easymock.tests.UsageTest.unexpectedCallWithArray":339,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":365,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":500,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":375,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":331,"org.easymock.tests2.CaptureTest.testCapture":522,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":502,"org.easymock.tests2.UsageConstraintsTest.constraints":227,"org.easymock.samples.ExampleTest.addAndChangeDocument":293,"org.easymock.tests.UsageStrictMockTest.testVerify":506,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":294,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":499,"org.easymock.tests2.CompareToTest.testGreateThan":520,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":490,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":209,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":382,"org.easymock.tests.LimitationsTest.abstractClass":101,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":323,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":484,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":383,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":460,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":178}}]

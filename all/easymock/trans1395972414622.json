[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"(int)++","position":"org.easymock.internal.MocksBehavior:94","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1000","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.InjectionTarget:56","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-5554816464613350531L","position":"org.easymock.internal.ExpectedInvocation:32","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-6785245714002503134L","position":"org.easymock.internal.matchers.Contains:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[0],"binaryOperator":"((java.lang.Number.doubleValue()) + (java.lang.Number.doubleValue()))","name":"math","position":"org.easymock.internal.matchers.EqualsWithDelta:41","type":"mutation","status":-1},{"failures":[],"variableMapping":{"varArgsCount":"length","nonVarArgsCount":"length"},"name":"replace","transplant":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[int + int]","position":"org.easymock.internal.Invocation:62","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = org.easymock.internal.Invocation.org.easymock.internal.Invocation.createObjectArray(java.lang.Object[][((java.lang.Object[].int) - 1)])","position":"org.easymock.internal.Invocation:59","type":"CtLocalVariableImpl"},"status":-2},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,0,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksBehavior.addBehaviorListIfNecessary(org.easymock.internal.ExpectedInvocation)","position":"org.easymock.internal.MocksBehavior:60","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:450","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:141","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.matchers.Equals.matches(java.lang.Object)","position":"org.easymock.internal.matchers.ArrayEquals:55","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\")","position":"org.easymock.ConstructorArgs:65","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:113","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:40","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })))","position":"org.easymock.internal.DefaultClassInstantiator:189","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int))","position":"org.easymock.ConstructorArgs:61","type":"CtThrowImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((70 * (((java.util.List<org.easymock.internal.UnorderedBehavior>.size()) - (int)) + 1)))","position":"org.easymock.internal.MocksBehavior:164","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"actual"},"name":"add","transplant":{"sourceCode":"if (org.easymock.internal.Invocation == null) {\n    throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\");\n} ","position":"org.easymock.EasyMock:2124","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.MocksBehavior:109","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Object[][int] = java.lang.Object","position":"org.easymock.internal.DefaultClassInstantiator:127","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","position":"org.easymock.internal.ClassProxyFactory:217","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:163","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:78","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","position":"org.easymock.internal.MocksControl:88","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.IMocksControl","position":"org.easymock.EasyMockSupport:532","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-5418279681566430252L","position":"org.easymock.internal.RecordState:31","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","position":"org.easymock.internal.MockBuilder:68","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:253","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.InputStream.close()","position":"org.easymock.internal.EasyMockProperties:70","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:283","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.Method.getGenericParameterTypes()","position":"org.easymock.internal.BridgeMethodResolver:188","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","position":"org.easymock.internal.MocksControl:258","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Long>(long))","position":"org.easymock.EasyMock:865","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(boolean[]))","position":"org.easymock.EasyMock:1581","type":"CtInvocationImpl"},"status":-2},{"failures":[22,24,26,27,38,43,80,86,87,91,267],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1176","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(int))","position":"org.easymock.EasyMock:1530","type":"CtInvocationImpl"},"status":-1},{"failures":[1,15,24,25,30,31,36,37,41,43,44,48,80,81,83,84,85,86,87,90,91,118,124,125,127,130,134,147,149,151,179,187,209,268,217,218,219,220,221,242,243,246,247,248,250,257,267],"binaryOperator":"int < (this.java.lang.Object[].int)","name":"conditionalBoundary","position":"org.easymock.internal.Invocation:117","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).verify())) {\n    break;\n} ","position":"org.easymock.internal.MocksBehavior:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.UnorderedBehavior org.easymock.internal.UnorderedBehavior : java.util.List<org.easymock.internal.UnorderedBehavior>.subList(int, java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    if (!(org.easymock.internal.UnorderedBehavior.verify())) {\n        boolean = false;\n        break;\n    } \n}","position":"org.easymock.internal.MocksBehavior:154","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","position":"org.easymock.internal.LastControl:124","type":"CtIfImpl"},"status":-2},{"failures":[106,269,114,115,116,117,270],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.String","position":"org.easymock.internal.Invocation:148","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.String + \".\") + java.lang.String","position":"org.easymock.internal.Invocation:154","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.ClassProxyFactory.MockMethodInterceptor org.easymock.internal.ClassProxyFactory.MockMethodInterceptor = new org.easymock.internal.ClassProxyFactory.MockMethodInterceptor(java.lang.reflect.InvocationHandler)","position":"org.easymock.internal.ClassProxyFactory:167","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1177","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","position":"org.easymock.internal.RecordState:106","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:137","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:116","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[java.lang.reflect.Array.java.lang.reflect.Array.getLength(java.lang.Object)]","position":"org.easymock.internal.Invocation:72","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:177","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Double>(org.easymock.Capture<java.lang.Double>))","position":"org.easymock.EasyMock:1975","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = org.easymock.internal.Injector.org.easymock.internal.Injector.injectByName(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan.getQualifiedInjections())","position":"org.easymock.internal.Injector:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","position":"org.easymock.internal.RecordState:181","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","position":"org.easymock.internal.ClassProxyFactory:216","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = org.easymock.internal.Injector.org.easymock.internal.Injector.fieldsOf(java.lang.Class<?>)","position":"org.easymock.internal.Injector:159","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof byte[]) && ((java.lang.Object == null) || (java.lang.Object instanceof byte[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof char[]) && ((java.lang.Object == null) || (java.lang.Object instanceof char[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:38","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Number.floatValue()","position":"org.easymock.internal.RecordState:203","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.longValue()","position":"org.easymock.internal.RecordState:201","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","position":"org.easymock.internal.RecordState:124","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","position":"org.easymock.internal.RecordState:107","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = true","position":"org.easymock.internal.AndroidSupport:27","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:167","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","lastThread":"this"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Thread == null) {\n    java.lang.Thread = java.lang.Thread.currentThread();\n} else if (java.lang.Thread != (java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + java.lang.Thread) + \" Current: \") + (java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","position":"org.easymock.internal.MethodSerializationWrapper:69","type":"CtIfImpl"},"status":-2},{"failures":[21,79,81,89],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.IArgumentMatcher.matches(java.lang.Object))) {\n    return false;\n} ","position":"org.easymock.internal.matchers.And:39","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"actual":"actual","expected":"actual"},"name":"add","transplant":{"sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","position":"org.easymock.internal.matchers.Equals:37","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:43","type":"CtReturnImpl"},"status":0},{"failures":[271,272],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1421","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.easymock.internal.ErrorMessage:44","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl"},"status":-2},{"failures":[273,270],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return true","position":"org.easymock.internal.Invocation:182","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:200","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null))","position":"org.easymock.internal.DefaultClassInstantiator:160","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:93","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","position":"org.easymock.internal.EasyMockProperties:67","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:137","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:221","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:256","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","position":"org.easymock.internal.MockBuilder:139","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.ReflectionUtils:92","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)))","position":"org.easymock.internal.MocksControl:157","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1816","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1221","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"constructor":"constructor"},"name":"add","transplant":{"sourceCode":"if ((this.java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:235","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:150","type":"CtTryImpl"},"status":0},{"failures":[274,275,276],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"\\'\")","position":"org.easymock.internal.ArgumentToString:43","type":"CtInvocationImpl"},"status":-1},{"failures":[33,267],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:53","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"result":"genericType","bound":"genericType"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:260","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ","position":"org.easymock.internal.MocksBehavior:194","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","position":"org.easymock.Capture:82","type":"CtIfImpl"},"status":-2},{"failures":[48,50,51,277,278,279,280,281,282,120,283,284,176,285,286,287,288,209,211,212,217,218,219,289,290,242,244],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:54","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ReturningAnswer() , true)","position":"org.easymock.internal.Result:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","position":"org.easymock.internal.ReplayState:52","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(char.char, java.lang.Character.java.lang.Character)","position":"org.easymock.internal.ReflectionUtils:36","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2025","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n    org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection);\n    java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField());\n} ","position":"org.easymock.internal.Injector:169","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:136","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int]);\n    if (java.lang.Class<?> != null) {\n        java.lang.Class<?>[][int] = java.lang.Class<?>;\n    } else {\n        java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n    }\n}","position":"org.easymock.internal.MethodSerializationWrapper:67","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","position":"org.easymock.internal.RecordState:166","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","position":"org.easymock.internal.Result:88","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:198","type":"CtLocalVariableImpl"},"status":-2},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,0,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,291,59,292,60,61,62,63,64,293,294,65,295,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,296,90,91,92,93,94,95,96,97,98,297,298,299,300,99,100,101,301,102,103,302,104,105,303,106,269,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,304,139,305,305,306,306,140,141,142,143,144,145,307,146,147,148,149,308,150,151,309,310,311,312,313,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,283,174,175,176,285,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,314,315,316,317,199,318,200,201,202,203,204,205,319,320,321,322,323,324,325,326,327,328,329,330,206,207,208,209,210,211,212,213,214,331,332,333,334,335,336,337,338,339,340,341,342,343,215,216,217,218,219,344,345,346,347,348,349,350,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,290,242,351,243,244,352,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267],"variableMapping":{"state":"state"},"name":"replace","transplant":{"sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:221","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.replay()","position":"org.easymock.internal.MocksControl:212","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"c":"c","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>))","position":"org.easymock.internal.DefaultClassInstantiator:42","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","position":"org.easymock.internal.DefaultClassInstantiator:40","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","position":"org.easymock.internal.RecordState:77","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1863","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method)","name":"removeConditional","position":"org.easymock.internal.BridgeMethodResolver:94","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:360","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","position":"org.easymock.internal.Range:75","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"paramTypes":"paramTypes","name":"name","clazz":"clazz"},"name":"add","transplant":{"sourceCode":"return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.ReflectionUtils:228","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ReflectionUtils:227","type":"CtTryImpl"},"status":-2},{"failures":[353],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","position":"org.easymock.internal.RecordState:240","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","position":"org.easymock.internal.RecordState:161","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:260","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-3018631689416120154L","position":"org.easymock.internal.matchers.EqualsWithDelta:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[11,19,20,23,24,25,26,32,34,35,37,0,43,44,45,48,191,192,194,195,196,197,198,200,201,204,209,215],"variableMapping":{"behavior":"behavior"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","position":"org.easymock.internal.ReplayState:73","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","position":"org.easymock.internal.RecordState:139","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","position":"org.easymock.EasyMock:2011","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","position":"org.easymock.internal.MocksControl:79","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","position":"org.easymock.internal.LastControl:61","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"arguments":"result"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","position":"org.easymock.internal.ArgumentToString:83","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    java.lang.Object[][int] = java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int);\n}","position":"org.easymock.internal.Invocation:73","type":"CtForImpl"},"status":-2},{"failures":[0],"binaryOperator":"((java.lang.Number.doubleValue()) + (java.lang.Number.doubleValue()))","name":"math","position":"org.easymock.internal.matchers.EqualsWithDelta:41","type":"mutation","status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl"},"status":-2},{"failures":[354,220],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","position":"org.easymock.internal.ReplayState:149","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:364","type":"CtThrowImpl"},"status":-1},{"failures":[208],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.UnorderedBehavior:105","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof boolean[]) && ((java.lang.Object == null) || (java.lang.Object instanceof boolean[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof byte[]) && ((java.lang.Object == null) || (java.lang.Object instanceof byte[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof char[]) && ((java.lang.Object == null) || (java.lang.Object instanceof char[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:36","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.DefaultClassInstantiator:130","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","position":"org.easymock.internal.ExpectedInvocationAndResults:46","type":"CtReturnImpl"},"status":-2},{"failures":[355],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"leq\"","position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"Answer returning \" + java.lang.Object","position":"org.easymock.internal.Result:68","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final net.sf.cglib.proxy.Enhancer net.sf.cglib.proxy.Enhancer = new net.sf.cglib.proxy.Enhancer() {\n    /** \n     * Filter all private constructors but do not check that there are\n     * some left\n     */\n@java.lang.SuppressWarnings(value = \"rawtypes\")\n    @java.lang.Override\n    protected void filterConstructors(final java.lang.Class sc, final java.util.List constructors) {\n        net.sf.cglib.core.CollectionUtils.net.sf.cglib.core.CollectionUtils.filter(java.util.List, new net.sf.cglib.core.VisibilityPredicate(java.lang.Class , true));\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:257","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injection.setMatched()","position":"org.easymock.internal.InjectionTarget:65","type":"CtInvocationImpl"},"status":-2},{"failures":[188],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:136","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:301","type":"CtReturnImpl"},"status":-1},{"failures":[356],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = org.easymock.internal.ExpectedInvocation.getMethod().getExceptionTypes()","position":"org.easymock.internal.RecordState:320","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","position":"org.easymock.internal.RecordState:151","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:220","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2039","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.ObjectMethodsFilter:76","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:410","type":"CtAssertImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!(java.util.List<org.easymock.IArgumentMatcher>.get(int).matches(java.lang.Object[][int]))) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:94","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:59","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:242","type":"CtThrowImpl"},"status":-2},{"failures":[1,2,3,4,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,0,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,61,63,64,293,294,65,295,79,80,81,82,83,84,85,86,87,88,89,296,90,91,93,94,95,96,97,98,100,103,108,109,112,113,118,119,120,121,122,123,124,125,127,128,129,130,133,134,135,136,137,138,139,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,314,315,316,317,199,318,200,201,202,203,204,205,323,207,208,209,210,211,212,213,331,332,333,334,335,215,216,217,218,219,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,290,242,243,244,245,246,247,248,249,250,251,253,254,255,256,257,258,259,260,261,263,264,265,266,267],"variableMapping":{"this":"this","mocks":"mocks"},"name":"add","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","position":"org.easymock.EasyMock:2024","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","position":"org.easymock.EasyMock:2011","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.AndroidClassProxyFactory:80","type":"CtAssignmentImpl"},"status":-2},{"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,0,38,39,40,41,42,43,44,45,48,59,63,64,79,80,81,82,83,84,85,86,87,88,89,296,90,91,96,191,192,194,195,196,197,198,199,200,201,202,203,204,208,209,215,216,242,267],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1332","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","position":"org.easymock.EasyMock:2106","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"lastResult":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","position":"org.easymock.internal.RecordState:102","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = java.lang.reflect.Method.getParameterTypes()","position":"org.easymock.internal.Invocation:135","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","position":"org.easymock.internal.LastControl:65","type":"CtInvocationImpl"},"status":-2},{"failures":[303,269,308,285,352],"binaryOperator":"(70 * ((int - int) + 1))","name":"math","position":"org.easymock.internal.MocksBehavior:119","type":"mutation","status":-1},{"failures":[],"binaryOperator":"(\"\" + int)","name":"math","position":"org.easymock.internal.LastControl:92","type":"mutation","status":-2},{"failures":[],"variableMapping":{"actual":"actual"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.MocksBehavior:108","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:57","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.ReflectionUtils:228","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injection != null) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n} ","position":"org.easymock.internal.Injector:232","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:252","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:632","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.StringBuffer.toString()","position":"org.easymock.internal.ExpectedInvocation:113","type":"CtReturnImpl"},"status":-2},{"failures":[274,280,357],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.matchers.Same:43","type":"CtInvocationImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":180,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":59,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":210,"org.easymock.tests2.MockedExceptionTest.testRealException":295,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":207,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":237,"org.easymock.tests.UsageVarargTest.varargIntAccepted":259,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":215,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":19,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":9,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":144,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":339,"org.easymock.tests2.UsageConstraintsTest.testContains":32,"org.easymock.tests.UsageCallCountTest.tooManyCalls":151,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":322,"org.easymock.tests2.UsageConstraintsTest.testFind":23,"org.easymock.tests2.StubTest.stubWithReturnValue":11,"org.easymock.tests.UsageVarargTest.allKinds":267,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":84,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":350,"org.easymock.tests2.CaptureTest.testCaptureAll":80,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":191,"org.easymock.samples.ExampleTest.addAndChangeDocument":139,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":301,"org.easymock.tests.UsageVarargTest.varargCharAccepted":260,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":280,"org.easymock.tests2.CaptureTest.testCaptureFromStub":296,"org.easymock.tests.UsageVerifyTest.twoThrows":218,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":201,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":261,"org.easymock.tests2.DelegateToTest.testReturnException":12,"org.easymock.tests2.ConstraintsToStringTest.andToString":281,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":123,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":36,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":77,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":275,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":47,"org.easymock.tests2.CaptureTest.testAnd":79,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":330,"org.easymock.tests.UsageStrictMockTest.testVerify":214,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":230,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":88,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":174,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":234,"org.easymock.tests2.UsageConstraintsTest.testMatches":35,"org.easymock.tests.MockClassControlTest.testToString":338,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":310,"org.easymock.tests2.UsageConstraintsTest.testNull":24,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":107,"org.easymock.tests2.EasyMockSupportClassTest.testAll":5,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":329,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":71,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":165,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":238,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":99,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":172,"org.easymock.tests.UsageThrowableTest.throwError":177,"org.easymock.tests2.UsageConstraintsTest.greaterThan":37,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":257,"org.easymock.samples.SupportTest.addDocument":141,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":204,"org.easymock.tests2.StubTest.stub":10,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":325,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":220,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":323,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":197,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":200,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":38,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":74,"org.easymock.tests.UsageExpectAndReturnTest.object":162,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":171,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":266,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":52,"org.easymock.tests.UsageExpectAndThrowTest.object":232,"org.easymock.tests2.DelegateToTest.testWrongClass":14,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":95,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":316,"org.easymock.tests2.UsageTest.moreThanOneArgument":120,"org.easymock.tests.UsageVarargTest.varargByteAccepted":265,"org.easymock.tests.MockClassControlTest.testEquals":342,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":229,"org.easymock.samples.ExampleTest.voteAgainstRemoval":136,"org.easymock.tests.UsageTest.wrongArguments":245,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":287,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":312,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":183,"org.easymock.tests.UsageVarargTest.varargShortAccepted":263,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":346,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":233,"org.easymock.tests2.UsageTest.defaultResetToNice":126,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":286,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":278,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":65,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":196,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":96,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":143,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":105,"org.easymock.tests2.MockBuilderTest.testCreateMock":303,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":336,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":97,"org.easymock.tests2.SerializationTest.testAllMockedMethod":18,"org.easymock.tests2.NameTest.nameForMocksControl":117,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":319,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":324,"org.easymock.samples.ExampleTest.voteAgainstRemovals":133,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":46,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":283,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":253,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":203,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":185,"org.easymock.tests2.CaptureTest.testCapture1_2446744":83,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":130,"org.easymock.tests2.DelegateToTest.testStubDelegate":13,"org.easymock.tests.LimitationsTest.mockNativeMethod":205,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":276,"org.easymock.tests.UsageUnorderedTest.message":242,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":284,"org.easymock.samples.ExampleTest.answerVsDelegate":134,"org.easymock.samples.ExampleTest.voteForRemoval":135,"org.easymock.tests.UsageCallCountTest.tooFewCalls":147,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":161,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":2,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":149,"org.easymock.tests.UsageVerifyTest.twoReturns":219,"org.easymock.tests2.DependencyTest.testInterfaceMocking":100,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":156,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":231,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":66,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":176,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":315,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":69,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":300,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":27,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":213,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":347,"org.easymock.tests2.CaptureTest.testCaptureRightOne":89,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":158,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":146,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":320,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":348,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":293,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":272,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":58,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":252,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":321,"org.easymock.tests2.UsageConstraintsTest.cmpTo":31,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":145,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":163,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":109,"org.easymock.tests2.MockedExceptionTest.testMockedException":294,"org.easymock.tests.UsageThrowableTest.throwCheckedException":181,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":42,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":241,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":333,"org.easymock.samples.PartialClassMockTest.testGetArea":140,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":217,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":356,"org.easymock.samples.ExampleTest.voteForRemovals":138,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":179,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":187,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":34,"org.easymock.samples.ConstructorCalledMockTest.testTax":305,"org.easymock.tests.ReplayStateInvalidUsageTest.times":327,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":175,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":317,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":57,"org.easymock.tests2.UsageTest.argumentsOrdered":128,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":271,"org.easymock.samples.ExampleTest.removeNonExistingDocument":304,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":243,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":4,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":157,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":309,"org.easymock.tests2.AnswerTest.answer":1,"org.easymock.tests.MockingTest.testNicePartialClassMocking":189,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":209,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":153,"org.easymock.tests2.UsageConstraintsTest.any":30,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":354,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":160,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":198,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":221,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":335,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":76,"org.easymock.tests.UsageExpectAndThrowTest.longType":225,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":64,"org.easymock.tests2.CallbackTest.callback":98,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":7,"org.easymock.tests2.ConstraintsToStringTest.notToString":279,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":73,"org.easymock.tests2.NameTest.nameForMock":114,"org.easymock.tests.UsageTest.argumentsOrdered":249,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":22,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":104,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":33,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":170,"org.easymock.tests2.NameTest.nameForStrictMock":115,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":202,"org.easymock.tests2.MockBuilderTest.testCreateMockString":269,"org.easymock.tests2.CaptureTest.testCaptureNone":87,"org.easymock.tests2.SerializationTest.test":17,"org.easymock.tests.UsageExpectAndReturnTest.longType":155,"org.easymock.tests2.SerializationTest.testClass":16,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":353,"org.easymock.tests2.CaptureTest.testCaptureFirst":91,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":39,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":131,"org.easymock.tests2.EasyMockSupportTest.testVerify":78,"org.easymock.tests2.UsageTest.niceToStrict":122,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":314,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":344,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":313,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":302,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":206,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":227,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":41,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":118,"org.easymock.tests2.UsageTest.strictResetToDefault":119,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":235,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":61,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":106,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":169,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":288,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":216,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":222,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":28,"org.easymock.tests2.ConstraintsToStringTest.orToString":277,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":111,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":159,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":297,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":291,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":0,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":56,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":258,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":53,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":318,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":190,"org.easymock.tests2.UsageConstraintsTest.testOr":26,"org.easymock.tests2.DelegateToTest.testDelegate":15,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":94,"org.easymock.tests2.UsageConstraintsTest.testNotNull":43,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":49,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":92,"org.easymock.tests.MockClassControlTest.testHashCode":341,"org.easymock.tests2.CaptureTest.testCapture_2617107":81,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":273,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":328,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":164,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":184,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":192,"org.easymock.tests2.ThreadingTest.testThreadSafe":93,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":125,"org.easymock.tests.UsageThrowableTest.noUpperLimit":178,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":332,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":108,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":110,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":75,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":67,"org.easymock.tests.UsageExpectAndReturnTest.floatType":154,"org.easymock.tests2.UsageTest.wrongArguments":121,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":29,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":299,"org.easymock.tests2.UsageConstraintsTest.testSame":25,"org.easymock.tests2.UsageTest.resumeIfFailure":129,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":357,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":340,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":112,"org.easymock.tests.UsageOverloadedMethodTest.overloading":186,"org.easymock.samples.SupportTest.voteForRemovals":142,"org.easymock.tests.UsageRangeTest.combination":251,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":182,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":306,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":44,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":256,"org.easymock.tests.UsageTest.openCallCountByLastCall":246,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":228,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":270,"org.easymock.tests2.NameTest.nameForNiceMock":116,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":326,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":254,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":40,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":331,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":48,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":55,"org.easymock.tests2.CaptureTest.testPrimitive":82,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":166,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":236,"org.easymock.samples.BasicClassMockTest.testPrintContent":132,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":349,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":194,"org.easymock.tests.UsageExpectAndThrowTest.floatType":224,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":292,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":54,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":63,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":150,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":167,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":307,"org.easymock.tests2.UsageStrictMockTest.differentMethods":51,"org.easymock.tests.UsageTest.exactCallCountByLastCall":250,"org.easymock.tests2.AnswerTest.stubAnswer":3,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":68,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":72,"org.easymock.tests2.CaptureTest.testCaptureLast":86,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":223,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":308,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":148,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":6,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":101,"org.easymock.tests.UsageStrictMockTest.range":211,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":247,"org.easymock.tests.InvocationTest.testEquals":268,"org.easymock.tests.UsageTest.unexpectedCallWithArray":352,"org.easymock.tests.MockingTest.testPartialClassMocking":188,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":168,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":127,"org.easymock.tests2.UsageConstraintsTest.constraints":21,"org.easymock.samples.ExampleTest.addDocument":137,"org.easymock.tests2.UsageConstraintsTest.lessThan":45,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":285,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":298,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":248,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":173,"org.easymock.tests.UsageVarargTest.varargLongAccepted":264,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":334,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":282,"org.easymock.tests.ObjectMethodsTest.testHashCode":345,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":60,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":62,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":208,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":8,"org.easymock.tests2.UsageStrictMockTest.range":50,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":113,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":289,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":290,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":311,"org.easymock.tests.UsageTest.moreThanOneArgument":244,"org.easymock.tests2.UsageTest.openCallCountByLastCall":124,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":195,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":274,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":343,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":102,"org.easymock.tests.UsageStrictMockTest.differentMethods":212,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":70,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":20,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":337,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":103,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":226,"org.easymock.tests.DefaultClassInstantiatorTest.object":351,"org.easymock.tests.UsageVarargTest.differentLength":262,"org.easymock.tests.ResultTest.createReturnResultToString":355,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":193,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":152,"org.easymock.tests2.CaptureTest.testCapture2_2446744":90,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":199,"org.easymock.tests.GenericTest.testPackageScope":255}}]

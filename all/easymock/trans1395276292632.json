[{"transplant":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:41","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[17,18,19,20,21,22,23,24,25,26,27,28],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:83","sourceCode":"return int == int","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"failures":[29],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"maximum":"result","java.lang.Integer.MAX_VALUE":"result"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"failures":[30,31,32],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[33,34],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[35,1,36,37,2,3,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,9,10,11,12,59,60,61,62,63,64,65,66,16,67,68,69,70,71,72,73,74,75],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[76],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod"}},{"transplant":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:38","sourceCode":"new java.util.HashSet<java.lang.String>()","type":"CtNewClassImpl"},"failures":[77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:113","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"method"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:208","sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:603","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[103],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:173","sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError(java.lang.StringBuilder.toString()))","type":"CtThrowImpl"},"failures":[0,104,49,105,106,107,108,109,8,110,111,112,113,69,114,115,70,71],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[116,117,118,119,120,121],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:262","failures":[35,122,123,124,125,126,127,128,58,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,70,164,165,166,167,168,169,170,171,172],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:130","failures":[173],"status":-1,"binaryOperator":"(((!(java.lang.reflect.Method.isBridge())) && (!(java.lang.reflect.Method.equals(java.lang.reflect.Method)))) && (java.lang.reflect.Method.getName().equals(java.lang.reflect.Method.getName())))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[174,175,176,177],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"failures":[178,179,180,181,182,183],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[184,185,186,187,188,189,190,174,191,192],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[30,31],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"actual":"expected"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:160","sourceCode":"return java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:158","sourceCode":"if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n    java.lang.reflect.Field.setAccessible(true);\n    return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n} ","type":"CtIfImpl"},"failures":[193,194],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"f":"f","this":"this"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:233","sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[195,196,197,198,199,200,201,202,203,204,32,205,206,207,208,209,210,211,212,213,214,215],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"failMessage","key":"failMessage"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:30","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[216],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:126","sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[217,218],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"otherArgument":"expected","myArgument":"expected"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[185,186,187,188,219,220,191],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[221,222,223,224,225,226,227,228,229,230,77,231,232,233,234,235,78,184,185,236,35,237,0,1,36,37,238,122,239,2,3,38,39,240,241,123,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,124,125,126,127,267,268,269,174,175,176,270,40,271,272,273,41,42,274,275,43,276,277,278,30,279,31,280,281,282,283,284,44,285,286,287,288,289,290,33,34,291,292,293,294,103,295,296,45,297,298,299,300,301,302,303,304,305,306,46,307,104,47,48,49,105,308,106,107,108,109,309,310,311,312,313,314,17,315,18,19,20,21,22,23,316,24,26,27,317,28,318,319,320,321,50,79,80,81,82,83,84,85,86,87,88,89,90,322,323,324,325,326,327,328,329,330,331,332,51,333,334,335,336,337,338,191,339,216,192,52,53,340,54,341,342,343,344,345,346,347,348,349,350,351,352,55,353,354,355,356,357,358,359,360,361,362,56,363,57,364,365,91,92,93,94,95,96,97,98,99,100,101,102,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,128,58,8,9,10,390,129,11,12,59,391,217,130,131,392,60,393,394,395,396,397,398,399,400,401,402,403,404,76,405,406,173,407,408,409,410,195,196,197,198,199,200,201,202,203,204,32,205,206,207,208,209,411,210,211,212,213,214,412,215,413,414,415,178,416,417,418,419,420,179,421,422,423,424,425,426,180,181,427,428,429,430,431,432,433,434,435,436,437,438,439,440,132,441,133,134,135,136,137,138,442,182,443,444,445,446,139,447,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,448,449,450,451,452,453,454,455,160,161,162,110,456,111,112,457,458,63,64,65,66,459,16,113,67,68,69,114,460,461,462,463,163,464,465,466,115,70,71,467,116,117,118,119,468,120,469,121,164,165,166,167,168,169,470,471,472,473,183,72,474,475,476,170,171,172,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,73,492,493,494,495,218,496,497,498,499,500,501,502,503,504,505,506,507,508,509,75],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:362","sourceCode":"return this","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:353","sourceCode":"return this","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[0,1,37,2,3,44,45,46,47,105,4,5,6,7,50,8,9,10,11,12,13,14,15,66,16,67,114],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[37,45,355,435],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:93","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[328,330,396,397,399],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:50","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"finalize\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:109","sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:202","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"failures":[237,270],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[231,232,233,234,234,235,235,184,185,510,511,512,513,514,515,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,124,125,126,174,176,322,323,324,325,328,329,516,331,517,51,333,335,336,337,338,339,192,52,53,518,519,54,345,349,352,55,354,355,356,357,359,360,361,362,56,363,57,364,365,371,372,373,374,375,393,394,395,396,397,399,402,76,405,406,173,407,448,453,116,117,118,119,468,120,121,501,502,503,504,505,506,507,508,509],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[520,521,522],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:49","sourceCode":"org.easymock.internal.Injection.getAnnotation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:231","sourceCode":"if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n    if (org.easymock.internal.Injection != null) {\n        throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n    } \n    org.easymock.internal.Injection = org.easymock.internal.Injection;\n} ","type":"CtIfImpl"},"failures":[77,78,79,85,91,97],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:32","sourceCode":"new java.util.concurrent.locks.ReentrantLock()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:839","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Float>(float))","type":"CtInvocationImpl"},"failures":[303],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1928","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1607","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(char[]))","type":"CtInvocationImpl"},"failures":[103],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[35,1,36,37,2,3,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,9,10,11,12,59,60,61,62,63,64,65,66,16,67,68,69,70,71,72,73,74,75],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[285],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:90","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[516],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[44,285,287,288,289,290,33,34,291,292,299,300,304,305,17,315,18,19,26,27],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Null:35","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"failures":[288,302,369,218],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"actual":"actual"}},{"position":"org.easymock.internal.matchers.Equals:54","failures":[286],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[221,222,223,224,225,226,228,229,230,77,231,232,78,35,237,0,36,37,238,122,2,38,39,241,123,245,124,125,126,127,267,269,175,176,270,40,271,272,273,41,42,275,43,276,277,278,279,31,280,282,283,284,44,285,287,288,289,290,33,34,292,293,294,103,295,296,45,297,298,299,300,301,302,303,304,305,306,307,104,47,48,49,105,309,312,313,314,17,315,18,19,20,21,22,23,316,24,26,27,317,28,50,84,322,325,327,343,344,352,55,353,354,355,356,359,96,366,367,368,369,370,371,374,388,389,128,58,8,390,129,11,59,391,217,130,131,392,60,403,404,405,406,407,413,414,415,178,416,417,418,419,420,179,421,422,423,424,425,426,180,181,427,428,132,441,133,134,135,136,137,138,442,182,443,444,445,446,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,111,112,457,458,64,65,459,113,67,68,69,114,461,463,163,115,70,71,164,165,166,167,168,169,470,471,472,473,183,72,475,476,482,483,486,487,488,490,491,492,493,494,495,218,496,499,508,509],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:235","failures":[234,235,184,185,174,332,334,191,192,523,340,524,525,526,360],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MocksControl:105","failures":[221,222,223,224,225,226,227,228,229,230,77,78,35,237,0,1,36,37,238,122,239,2,3,38,39,240,241,123,124,125,126,127,267,268,269,175,270,40,271,272,273,41,42,274,275,43,276,277,278,30,279,31,280,281,282,283,284,44,285,286,287,288,289,290,33,34,291,292,293,294,103,295,296,45,297,298,299,300,301,302,303,304,305,306,46,307,104,47,48,49,105,308,106,107,108,109,309,310,311,312,313,314,17,315,18,19,20,21,22,23,316,24,26,27,317,28,318,319,320,321,50,79,80,81,82,83,84,85,86,87,88,89,90,327,330,343,344,350,351,353,91,92,93,94,95,96,97,98,99,100,101,102,366,367,368,369,370,376,377,378,379,380,381,382,383,384,385,386,387,388,389,128,58,8,9,10,390,129,11,12,59,391,217,130,131,392,60,398,400,401,403,404,408,409,410,195,196,197,198,199,200,201,202,203,204,32,205,206,207,208,209,411,210,211,212,213,214,412,215,413,414,415,178,416,417,418,419,420,179,421,422,423,424,425,426,180,181,427,428,429,430,431,432,433,434,435,436,437,438,439,440,132,441,133,134,135,136,137,138,442,182,443,444,445,446,139,447,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,451,452,454,455,160,161,162,110,456,111,112,457,458,63,64,65,66,459,16,113,67,68,69,114,460,461,462,463,163,464,465,466,115,70,71,164,165,166,167,168,169,470,471,472,473,183,72,474,475,476,170,171,172,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,73,492,493,494,495,218,496,497,498,499,500,501],"status":-1,"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:44","failures":[221,222,223,224,225,226,227,228,229,230,77,231,232,233,234,235,78,527,528,529,530,531,532,184,185,35,237,0,1,36,37,238,122,239,2,3,38,39,240,241,123,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,124,125,126,127,267,268,269,174,175,176,270,40,271,272,273,41,42,274,275,43,276,277,278,30,279,31,280,281,282,283,284,44,285,286,287,288,289,290,33,34,291,292,293,294,103,295,296,45,297,298,299,300,301,302,303,304,305,306,46,307,104,47,48,49,105,308,106,107,108,109,309,310,311,312,313,314,17,315,18,19,20,21,22,23,316,24,26,27,317,28,318,319,320,321,50,79,80,81,82,83,84,85,86,87,88,89,90,322,323,324,325,326,327,328,329,330,331,51,333,335,336,337,338,339,216,192,52,53,54,341,342,343,344,345,346,347,349,350,351,352,55,353,354,355,356,357,358,359,360,361,362,56,363,57,364,365,91,92,93,94,95,96,97,98,99,100,101,102,366,533,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,128,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,58,8,9,10,390,129,11,12,59,391,217,130,131,392,60,393,394,395,396,397,398,399,400,401,402,403,404,76,405,406,173,407,408,409,410,195,196,197,198,199,200,201,202,203,204,32,205,206,207,208,209,411,210,211,212,213,214,412,215,413,414,415,178,416,417,418,419,420,179,421,422,423,424,425,426,180,181,427,428,429,430,431,432,433,434,435,436,437,438,439,440,132,441,133,134,135,136,137,138,442,182,443,444,445,446,139,447,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,448,449,450,451,452,453,454,455,160,161,162,110,456,111,112,457,458,63,64,65,66,459,16,113,67,68,69,114,460,461,462,463,163,464,465,466,115,70,71,116,117,118,119,468,120,121,164,165,166,167,168,169,470,471,472,473,183,72,474,475,476,170,171,172,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,73,492,493,494,495,218,496,497,498,499,500,501,502,503,504,505,506,507,508,509],"status":-1,"binaryOperator":"(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":285,"org.easymock.tests2.UsageTest.argumentsOrdered":3,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":58,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":276,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":32,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":37,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":77,"org.easymock.tests2.DelegateToTest.testReturnException":279,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":165,"org.easymock.tests.MockingTest.testPartialClassMocking":396,"org.easymock.tests.MockClassControlTest.testToString":504,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":308,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":381,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":212,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":365,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":252,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":140,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":248,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":344,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":555,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":186,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":34,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":391,"org.easymock.tests2.UsageTest.wrongArguments":1,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":102,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":378,"org.easymock.samples.ExampleTest.answerVsDelegate":222,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":453,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":401,"org.easymock.tests2.UsageConstraintsTest.testNull":288,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":354,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":509,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":43,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":510,"org.easymock.tests2.CaptureTest.testPrimitive":19,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":392,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":159,"org.easymock.tests.UsageTest.moreThanOneArgument":8,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":353,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":443,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":481,"org.easymock.tests.UsageTest.argumentsOrdered":12,"org.easymock.tests.UsageVarargTest.varargIntAccepted":488,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":209,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":470,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":220,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":331,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":89,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":347,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":337,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":197,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":183,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":539,"org.easymock.tests.ReplayStateInvalidUsageTest.times":437,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":96,"org.easymock.tests2.DependencyTest.testClassMocking":341,"org.easymock.tests2.AnswerTest.answer":309,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":291,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":210,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":321,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":450,"org.easymock.tests2.CaptureTest.testAnd":17,"org.easymock.tests2.UsageTest.strictResetToDefault":237,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":334,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":362,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":182,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":475,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":273,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":485,"org.easymock.tests2.DelegateToTest.testDelegate":282,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":538,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":155,"org.easymock.tests.LimitationsTest.mockFinalMethod":375,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":168,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":387,"org.easymock.tests2.DependencyTest.testClassMockingSupport":342,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":408,"org.easymock.tests2.CaptureTest.testCapture1_2446744":20,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":358,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":153,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":319,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":431,"org.easymock.tests.UsageThrowableTest.throwError":132,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":452,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":75,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":90,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":445,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":524,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":266,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":542,"org.easymock.samples.PartialClassMockTest.testGetArea":233,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":432,"org.easymock.tests.MockingTest.testInterfaceMocking":398,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":471,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":478,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":501,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":141,"org.easymock.tests2.UsageTest.niceToStrict":36,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":253,"org.easymock.tests2.ThreadingTest.testChangeDefault":533,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":522,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":195,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":336,"org.easymock.tests2.MockBuilderTest.testCreateMock":52,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":261,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":99,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":149,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":4,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":41,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":449,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":162,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":110,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":376,"org.easymock.tests.UsageOverloadedMethodTest.overloading":389,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":263,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":163,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":295,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":422,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":388,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":103,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":193,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":24,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":489,"org.easymock.tests.MockClassControlTest.testEquals":508,"org.easymock.tests2.EasyMockSupportClassTest.testAll":245,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":406,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":157,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":5,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":511,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":385,"org.easymock.tests2.CaptureTest.testCaptureAll":315,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":320,"org.easymock.tests.MockNameTest.defaultName":447,"org.easymock.tests2.UsageConstraintsTest.testMatches":296,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":444,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":429,"org.easymock.samples.ExampleTest.voteForRemovals":226,"org.easymock.tests.UsageVarargTest.allKinds":218,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":115,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":386,"org.easymock.samples.BasicClassMockTest.testPrintContent":232,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":137,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":46,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":169,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":86,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":281,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":469,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":190,"org.easymock.tests2.UsageConstraintsTest.greaterThan":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":246,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":474,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":57,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":543,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":121,"org.easymock.samples.ExampleTest.voteForRemoval":223,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":364,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":367,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":518,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":454,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":348,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":357,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":535,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":35,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":371,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":192,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":202,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":271,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":133,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":243,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":164,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":30,"org.easymock.tests2.CaptureTest.testCaptureFirst":28,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":201,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":272,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":39,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":466,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":419,"org.easymock.tests2.UsageTest.moreThanOneArgument":0,"org.easymock.tests2.CaptureTest.testCapture2_2446744":317,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":369,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":53,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":211,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":495,"org.easymock.tests.GenericTest.testBridgedEquals":407,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":64,"org.easymock.tests.UsageExpectAndReturnTest.longType":178,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":270,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":383,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":519,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":158,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":480,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":302,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":156,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":442,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":171,"org.easymock.tests.UsageCallCountTest.tooManyCalls":65,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":111,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":262,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":420,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":101,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":145,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":136,"org.easymock.tests.MockingTest.testNiceClassMocking":402,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":323,"org.easymock.tests.MockingTest.testClassMocking":394,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":517,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":456,"org.easymock.tests2.UsageConstraintsTest.testContains":294,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":126,"org.easymock.tests2.UsageConstraintsTest.testFind":287,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":128,"org.easymock.tests.MockTypeTest.fromEasyMockClass":451,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":66,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":269,"org.easymock.tests.UsageExpectAndReturnTest.object":421,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":359,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":100,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":275,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":491,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":187,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":499,"org.easymock.tests.UsageTest.exactCallCountByLastCall":59,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":446,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":200,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":482,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":380,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":15,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":185,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":486,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":180,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":463,"org.easymock.tests.MockClassControlTest.testHashCode":507,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":80,"org.easymock.tests2.EasyMockSupportTest.testVerify":278,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":255,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":483,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":461,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":161,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":61,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":318,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":240,"org.easymock.tests.UsageVarargTest.varargCharAccepted":490,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":467,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":307,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":215,"org.easymock.tests2.UsageTest.openCallCountByLastCall":238,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":520,"org.easymock.tests.DefaultClassInstantiatorTest.object":116,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":277,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":160,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":497,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":62,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":147,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":256,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":515,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":134,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":94,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":79,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":541,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":506,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":56,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":146,"org.easymock.tests.ReplayStateInvalidCallsTest.times":547,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":181,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":170,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":548,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":505,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":264,"org.easymock.tests2.UsageTest.resumeIfFailure":38,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":448,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":346,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":167,"org.easymock.tests2.StubTest.stubWithReturnValue":123,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":191,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":179,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":303,"org.easymock.tests2.SerializationTest.testAllMockedMethod":176,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":411,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":526,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":6,"org.easymock.samples.SupportTest.voteForRemovals":230,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":76,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":82,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":152,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":177,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":412,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":310,"org.easymock.tests.UsageExpectAndThrowTest.object":150,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":382,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":300,"org.easymock.tests2.DelegateToTest.testWrongClass":280,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":545,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":403,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":404,"org.easymock.tests.UsageStrictMockTest.range":68,"org.easymock.samples.ConstructorCalledMockTest.testTax":234,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":350,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":274,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":322,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":151,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":338,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":439,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":11,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":242,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":377,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":13,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":537,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":479,"org.easymock.tests2.CaptureTest.testCaptureNone":316,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":528,"org.easymock.tests.UsageUnorderedTest.message":60,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":74,"org.easymock.tests.UsageVerifyTest.twoReturns":71,"org.easymock.tests.UsageVarargTest.varargByteAccepted":494,"org.easymock.tests2.ThreadingTest.testThreadSafe":366,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":259,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":458,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":500,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":231,"org.easymock.tests2.CaptureTest.testCapture_2617107":18,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":7,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":410,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":131,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":213,"org.easymock.tests2.UsageConstraintsTest.any":292,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":436,"org.easymock.tests2.StubTest.stub":241,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":172,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":166,"org.easymock.tests.UsageExpectAndThrowTest.longType":143,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":214,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":468,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":435,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":47,"org.easymock.tests2.SerializationTest.testClass":174,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":84,"org.easymock.tests.LimitationsTest.mockNativeMethod":374,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":428,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":173,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":514,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":93,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":553,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":105,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":529,"org.easymock.tests2.NameTest.nameForMocksControl":109,"org.easymock.tests2.MockedExceptionTest.testMockedException":125,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":95,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":247,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":129,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":399,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":144,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":268,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":352,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":339,"org.easymock.tests.MockingTest.testNicePartialClassMocking":397,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":356,"org.easymock.tests2.CompareToTest.testCompareEqual":29,"org.easymock.tests2.CaptureTest.testCaptureLast":23,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":91,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":409,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":552,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":33,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":329,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":301,"org.easymock.tests.MockingTest.testTwoMocks":395,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":549,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":330,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":413,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":148,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":2,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":305,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":532,"org.easymock.samples.ExampleTest.removeNonExistingDocument":227,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":433,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":98,"org.easymock.tests.UsageStrictMockTest.differentMethods":69,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":81,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":531,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":118,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":368,"org.easymock.tests2.MockBuilderTest.testCreateMockString":54,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":502,"org.easymock.tests.UsageExpectAndThrowTest.floatType":142,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":249,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":45,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":244,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":312,"org.easymock.tests.UsageVerifyTest.twoThrows":70,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":236,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":462,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":258,"org.easymock.samples.ExampleTest.voteAgainstRemoval":224,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":477,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":205,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":363,"org.easymock.tests.LimitationsTest.privateConstructor":373,"org.easymock.tests2.UsageConstraintsTest.testNotNull":304,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":138,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":124,"org.easymock.tests2.UsageTest.defaultResetToNice":239,"org.easymock.samples.ExampleTest.voteAgainstRemovals":221,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":426,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":206,"org.easymock.tests.UsageVarargTest.differentLength":73,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":92,"org.easymock.tests2.CallbackTest.callback":50,"org.easymock.tests2.UsageConstraintsTest.equals":286,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":360,"org.easymock.tests.UsageTest.openCallCountByLastCall":390,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":283,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":130,"org.easymock.tests.UsageCallCountTest.tooFewCalls":112,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":325,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":379,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":530,"org.easymock.tests.UsageThrowableTest.throwCheckedException":135,"org.easymock.tests.MockingTest.testStrictClassMocking":393,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":14,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":139,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":328,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":97,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":324,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":438,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":327,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":314,"org.easymock.tests.ObjectMethodsTest.testHashCode":498,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":219,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":551,"org.easymock.tests2.NameTest.nameForNiceMock":108,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":370,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":546,"org.easymock.tests2.DependencyTest.testInterfaceMocking":343,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":188,"org.easymock.samples.ExampleTest.addDocument":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":260,"org.easymock.tests2.DelegateToTest.testStubDelegate":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":265,"org.easymock.tests2.AnswerTest.stubAnswer":313,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":113,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":216,"org.easymock.tests.UsageVarargTest.varargLongAccepted":493,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":114,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":204,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":427,"org.easymock.tests.UsageExpectAndReturnTest.floatType":415,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":184,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":235,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":464,"org.easymock.tests.UsageThrowableTest.noUpperLimit":441,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":88,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":298,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":284,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":345,"org.easymock.tests2.SerializationTest.test":175,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":21,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":194,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":117,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":414,"org.easymock.tests2.UsageConstraintsTest.testSame":289,"org.easymock.samples.SupportTest.addDocument":229,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":326,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":536,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":434,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":250,"org.easymock.tests.GenericTest.testPackageScope":405,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":484,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":199,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":87,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":400,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":534,"org.easymock.tests2.NameTest.nameForMock":106,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":423,"org.easymock.tests2.UsageStrictMockTest.differentMethods":49,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":340,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":361,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":416,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":154,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":496,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":476,"org.easymock.tests2.MockedExceptionTest.testRealException":127,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":455,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":208,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":351,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":525,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":104,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":207,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":440,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":217,"org.easymock.tests2.NameTest.nameForStrictMock":107,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":335,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":521,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":267,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":355,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":349,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":119,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":299,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":51,"org.easymock.tests2.UsageStrictMockTest.range":48,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":540,"org.easymock.tests2.UsageConstraintsTest.lessThan":306,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":512,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":83,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":516,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":189,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":40,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":203,"org.easymock.tests2.CaptureTest.testCaptureRightOne":26,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":254,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":527,"org.easymock.tests2.UsageConstraintsTest.testOr":290,"org.easymock.tests.UsageRangeTest.combination":72,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":55,"org.easymock.tests.UsageTest.wrongArguments":10,"org.easymock.tests2.MockBuilderTest.testWithConstructor":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":251,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":503,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":417,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":424,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":196,"org.easymock.tests.UsageVarargTest.varargShortAccepted":492,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":120,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":63,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":554,"org.easymock.tests2.UsageConstraintsTest.cmpTo":293,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":311,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":544,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":198,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":122,"org.easymock.tests2.CaptureTest.testCaptureFromStub":27,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":430,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":333,"org.easymock.tests.UsageTest.unexpectedCallWithArray":9,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":550,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":16,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":457,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":523,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":425,"org.easymock.tests2.CaptureTest.testCapture":25,"org.easymock.tests2.UsageConstraintsTest.constraints":44,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":67,"org.easymock.samples.ExampleTest.addAndChangeDocument":228,"org.easymock.tests.UsageStrictMockTest.testVerify":460,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":78,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":459,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":384,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":22,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":513,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":472,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":418,"org.easymock.tests.LimitationsTest.abstractClass":372,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":473,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":465,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":487,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":42}}]

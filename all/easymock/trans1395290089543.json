[{"position":"org.easymock.internal.MockBuilder:218","failures":[0,1,2,3,4],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:84","sourceCode":"java.lang.Object[] = new java.lang.Object[0]","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arguments":"arguments"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[20,21,22,23,11,13],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[24,25,26,27,28,29,30,31,32,33],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.EasyMock:840","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Null:39","sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[5,34,12,18,19],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:315","failures":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.RecordState:136","failures":[1,1,2,2,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:194","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[111,112,113,114,0,115,116,117,118,78,5,119,120,3,4,121,122,123,124,125,126,127,128,129,130,131,132,133,32,134,135,136,137,138,139,140,141,142,143,144,94,97,98,99,100,102,12,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,103,104,105,106,107,166,167,168,169,109,110],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1333","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:181","failures":[24,170,25,26,27,171,172,29,30,33],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"this.org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[173,174,175,176,177],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable","state":"state"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[178,85],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:318","failures":[179,180],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:54","sourceCode":"return java.lang.Object[] == null ? this.java.lang.Object[] : java.lang.Object[]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:94","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.Invocation.NO_ARGS":"initArgs","args":"initArgs"}},{"position":"org.easymock.internal.ReflectionUtils:93","failures":[181,182,0,1,1,2,2,24,183,184,185,186,120,3,4,121,187,188,122,189,123,190,124,125,191,126,192,193,40,127,128,129,130,132,133,32,135,136,138,139,140,194,141,195,142,143,144,196,197,198,199,200,201,202,166,203,167,168,169],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:127","sourceCode":"java.lang.Object[][int] = java.lang.Object","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[204],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:130","failures":[200],"status":-1,"binaryOperator":"(((!(java.lang.reflect.Method.isBridge())) && (!(java.lang.reflect.Method.equals(java.lang.reflect.Method)))) && (java.lang.reflect.Method.getName().equals(java.lang.reflect.Method.getName())))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:262","failures":[35,36,37,38,39,40,41,42,173,174,175,43,44,179,45,180,205,206,46,47,207,208,209,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,18,77],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[210,93],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"methods":"methods","name":"name","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[24,31],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[211],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","failures":[1,2,24,212,213,214,215,216,120,217,218,3,219,220,221,222,223,224,225,226,227,4,228,229,230,231,232,121,233,234,235,236,30,31,237,238,129,133,239,32,33],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[240,241,242,243,178,83,85,244,245,204,91],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"name":"name"}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[24,25,26,27,28,29,30,31,32,33],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:83","failures":[116,35,78,246,5,119,36,247,6,248,37,7,8,249,250,241,251,252,253,254,255,256,83,257,258,91,259,260,261,262,263,264,265,95,96,45,52,266,11,102,267,12,145,74,268,14,269,75,15,16,270,17,76,271,18,19],"status":-1,"binaryOperator":"(int) == (java.lang.Integer.int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:38","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[211],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"actual":"expected"}},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1746","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:622","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[24,272,183,273],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"failures":[274,275,141],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[24,272,183,273],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[111,276,112,113,277,114,278,279,116,280,24,272,183,117,281,35,282,283,284,285,286,287,288,78,119,289,290,247,291,292,293,294,240,250,241,295,252,253,254,255,296,242,256,80,81,243,178,82,83,84,85,244,297,257,275,86,211,87,88,258,89,90,204,298,299,300,91,92,93,187,123,190,38,39,40,41,259,260,261,262,128,129,132,133,263,301,264,302,32,265,303,304,305,135,137,138,139,140,141,195,143,306,94,95,96,307,308,309,310,311,45,97,98,99,100,101,196,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,312,313,314,315,316,317,318,319,320,266,197,198,199,321,102,145,322,323,268,324,325,326,327,328,329,330,76,146,147,148,149,150,151,152,153,154,155,331,332,156,157,333,158,159,160,334,161,162,163,164,165,103,104,105,106,107,166,271,18,19,335,336,337,338,339,108,167,168,169,109,110],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[78,5,119,247,6,7,8,340,20,341,342,343,344,345,346,21,347,348,258,349,350,22,351,23,352,353,354,10,11,102,12,145,268,13,14,15,16,17,271,18,19],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[24,272,183,273],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1039","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:106","failures":[184,186,355,123,142,143],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[20,21,22,23,11,13],"status":-1,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":178,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":74,"org.easymock.tests2.UsageTest.argumentsOrdered":8,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":51,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":292,"org.easymock.tests2.StubTest.stubWithReturnValue":35,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":30,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":300,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":157,"org.easymock.tests2.SerializationTest.testAllMockedMethod":183,"org.easymock.tests2.DelegateToTest.testReturnException":279,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":49,"org.easymock.tests.MockingTest.testPartialClassMocking":167,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":21,"org.easymock.samples.SupportTest.voteForRemovals":115,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":66,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":222,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":273,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":54,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":3,"org.easymock.tests.UsageExpectAndThrowTest.object":64,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":298,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":118,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":25,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":109,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":110,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":297,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":94,"org.easymock.tests2.UsageTest.wrongArguments":6,"org.easymock.tests.UsageStrictMockTest.range":12,"org.easymock.samples.ConstructorCalledMockTest.testTax":1,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":309,"org.easymock.samples.ExampleTest.answerVsDelegate":276,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":202,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":127,"org.easymock.tests2.UsageConstraintsTest.testNull":83,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":65,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":138,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":124,"org.easymock.tests2.CaptureTest.testPrimitive":295,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":96,"org.easymock.tests.UsageTest.moreThanOneArgument":268,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":214,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":73,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":15,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":176,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":308,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":137,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":22,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":99,"org.easymock.tests2.CaptureTest.testCaptureNone":255,"org.easymock.tests.UsageUnorderedTest.message":17,"org.easymock.tests.UsageVerifyTest.twoReturns":19,"org.easymock.tests.UsageVarargTest.varargByteAccepted":319,"org.easymock.tests2.ThreadingTest.testThreadSafe":303,"org.easymock.tests.UsageTest.argumentsOrdered":16,"org.easymock.tests.UsageVarargTest.varargIntAccepted":314,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":228,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":329,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":181,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":347,"org.easymock.tests2.CaptureTest.testCapture_2617107":241,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":103,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":348,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":172,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":187,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":44,"org.easymock.tests2.UsageConstraintsTest.any":257,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":190,"org.easymock.tests2.StubTest.stub":281,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":107,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":175,"org.easymock.tests.UsageExpectAndThrowTest.longType":57,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":50,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":343,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":246,"org.easymock.tests2.SerializationTest.testClass":24,"org.easymock.tests.LimitationsTest.mockNativeMethod":166,"org.easymock.tests2.AnswerTest.answer":263,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":200,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":165,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":245,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":287,"org.easymock.tests2.CaptureTest.testAnd":240,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":186,"org.easymock.tests2.UsageTest.strictResetToDefault":290,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":289,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":236,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":195,"org.easymock.tests2.NameTest.nameForMocksControl":262,"org.easymock.tests2.MockedExceptionTest.testMockedException":39,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":218,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":148,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":75,"org.easymock.tests2.DelegateToTest.testDelegate":280,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":58,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":169,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":135,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":125,"org.easymock.tests.MockingTest.testNicePartialClassMocking":168,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":69,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":140,"org.easymock.tests2.CompareToTest.testCompareEqual":274,"org.easymock.tests2.CaptureTest.testCaptureLast":254,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":170,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":52,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":350,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":244,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":133,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":339,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":299,"org.easymock.tests.MockingTest.testTwoMocks":203,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":349,"org.easymock.tests2.CaptureTest.testCapture1_2446744":251,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":239,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":150,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":67,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":285,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":62,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":7,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":92,"org.easymock.tests.UsageThrowableTest.throwError":179,"org.easymock.tests.UsageStrictMockTest.differentMethods":145,"org.easymock.tests2.ConstraintsToStringTest.andToString":346,"org.easymock.tests2.MockBuilderTest.testCreateMockString":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":219,"org.easymock.tests.UsageExpectAndThrowTest.floatType":56,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":101,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":258,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":216,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":301,"org.easymock.tests.UsageVerifyTest.twoThrows":18,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":234,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":4,"org.easymock.samples.PartialClassMockTest.testGetArea":0,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":104,"org.easymock.samples.ExampleTest.voteAgainstRemoval":113,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":143,"org.easymock.tests2.UsageTest.niceToStrict":291,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":223,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":55,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":213,"org.easymock.tests2.UsageConstraintsTest.testNotNull":91,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":38,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":47,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":123,"org.easymock.tests2.UsageTest.defaultResetToNice":293,"org.easymock.tests2.MockBuilderTest.testCreateMock":191,"org.easymock.samples.ExampleTest.voteAgainstRemovals":111,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":230,"org.easymock.tests2.CallbackTest.callback":265,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":352,"org.easymock.tests.UsageTest.openCallCountByLastCall":269,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":63,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":20,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":80,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":209,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":324,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":307,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":43,"org.easymock.tests.UsageCallCountTest.tooFewCalls":327,"org.easymock.tests.UsageOverloadedMethodTest.overloading":330,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":227,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":87,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":42,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":130,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":158,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":211,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":296,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":310,"org.easymock.tests.UsageThrowableTest.throwCheckedException":205,"org.easymock.tests2.EasyMockSupportClassTest.testAll":120,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":199,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":345,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":71,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":23,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":184,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":337,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":286,"org.easymock.tests2.CaptureTest.testCaptureAll":250,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":77,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":132,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":129,"org.easymock.tests2.UsageConstraintsTest.testMatches":88,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":131,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":302,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":100,"org.easymock.samples.ExampleTest.voteForRemovals":114,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":171,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":305,"org.easymock.tests2.NameTest.nameForNiceMock":261,"org.easymock.tests.UsageVarargTest.allKinds":266,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":271,"org.easymock.tests2.DependencyTest.testInterfaceMocking":117,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":27,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":338,"org.easymock.samples.BasicClassMockTest.testPrintContent":182,"org.easymock.samples.ExampleTest.addDocument":277,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":233,"org.easymock.tests2.DelegateToTest.testStubDelegate":116,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":46,"org.easymock.tests2.AnswerTest.stubAnswer":264,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":53,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":102,"org.easymock.tests2.UsageConstraintsTest.greaterThan":89,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":217,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":147,"org.easymock.tests.UsageVarargTest.varargLongAccepted":318,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":144,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":322,"org.easymock.samples.ExampleTest.voteForRemoval":112,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":304,"org.easymock.tests.UsageExpectAndReturnTest.floatType":152,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":164,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":194,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":32,"org.easymock.tests2.ConstraintsToStringTest.orToString":340,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":2,"org.easymock.tests.UsageThrowableTest.noUpperLimit":311,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":90,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":196,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":81,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":36,"org.easymock.tests2.SerializationTest.test":272,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":252,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":31,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":177,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":45,"org.easymock.tests2.UsageConstraintsTest.testSame":84,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":151,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":215,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":48,"org.easymock.tests2.CaptureTest.testCaptureFirst":256,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":249,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":9,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":220,"org.easymock.tests.GenericTest.testPackageScope":198,"org.easymock.tests2.UsageTest.moreThanOneArgument":247,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":134,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":126,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":320,"org.easymock.tests2.NameTest.nameForMock":259,"org.easymock.tests.UsageExpectAndReturnTest.longType":153,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":335,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":192,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":72,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":159,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":238,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":70,"org.easymock.tests2.UsageStrictMockTest.differentMethods":119,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":97,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":174,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":154,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":351,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":68,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":149,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":326,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":231,"org.easymock.tests2.MockedExceptionTest.testRealException":41,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":156,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":353,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":78,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":59,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":206,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":95,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":128,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":325,"org.easymock.tests2.NameTest.nameForStrictMock":260,"org.easymock.tests2.UsageConstraintsTest.testContains":86,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":188,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":40,"org.easymock.tests2.UsageConstraintsTest.testFind":82,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":76,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":282,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":139,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":283,"org.easymock.tests.UsageExpectAndReturnTest.object":333,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":204,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":141,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":122,"org.easymock.tests2.UsageStrictMockTest.range":5,"org.easymock.tests2.UsageConstraintsTest.lessThan":93,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":316,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":26,"org.easymock.tests.UsageTest.exactCallCountByLastCall":270,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":108,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":28,"org.easymock.tests2.CaptureTest.testCaptureRightOne":242,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":224,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":354,"org.easymock.tests2.UsageConstraintsTest.testOr":85,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":33,"org.easymock.tests.UsageRangeTest.combination":146,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":312,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":136,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":162,"org.easymock.tests.UsageTest.wrongArguments":14,"org.easymock.tests2.MockBuilderTest.testWithConstructor":235,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":221,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":197,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":155,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":160,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":225,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":342,"org.easymock.tests.UsageVarargTest.varargShortAccepted":317,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":208,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":284,"org.easymock.tests2.UsageConstraintsTest.cmpTo":275,"org.easymock.tests.UsageVarargTest.varargCharAccepted":315,"org.easymock.tests2.CompareToTest.testLessThan":210,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":288,"org.easymock.tests2.UsageTest.openCallCountByLastCall":248,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":37,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":207,"org.easymock.tests2.CaptureTest.testCaptureFromStub":79,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":189,"org.easymock.tests.UsageTest.unexpectedCallWithArray":13,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":226,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":61,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":355,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":11,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":180,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":328,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":237,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":334,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":267,"org.easymock.tests2.UsageConstraintsTest.constraints":243,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":142,"org.easymock.samples.ExampleTest.addAndChangeDocument":278,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":60,"org.easymock.tests2.ConstraintsToStringTest.notToString":341,"org.easymock.tests.UsageStrictMockTest.testVerify":323,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":163,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":173,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":344,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":321,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":121,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":336,"org.easymock.tests2.UsageTest.resumeIfFailure":294,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":253,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":105,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":185,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":331,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":201,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":306,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":106,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":313,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":34}}]

[{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","position":"org.easymock.internal.MocksControl:232","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:247","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:185","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","position":"org.easymock.internal.LastControl:73","type":"CtInvocationImpl"},"status":-2},{"failures":[0,1],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","position":"org.easymock.internal.ReplayState:68","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1420","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.Invocation:187","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-4434322855124959723L","position":"org.easymock.internal.ThrowableWrapper:23","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.EasyMock:1235","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.easymock.internal.Invocation.(getMockAndMethodName()) + \"(\") + org.easymock.internal.ArgumentToString.(org.easymock.internal.ArgumentToString.argumentsToString(java.lang.Object[]))) + \")\"","position":"org.easymock.internal.Invocation:110","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"currentPosition":"minimum","callCount":"maximum"},"name":"add","transplant":{"sourceCode":"if (int > (this.int)) {\n    return true;\n} ","position":"org.easymock.internal.Results:56","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (int) == (int)","position":"org.easymock.internal.Range:52","type":"CtReturnImpl"},"status":0},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"variableMapping":{"position":"max"},"name":"replace","transplant":{"sourceCode":"int++","position":"org.easymock.internal.MocksBehavior:94","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:97","type":"CtOperatorAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<java.lang.reflect.Field>","position":"org.easymock.internal.InjectionPlan:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"\\'\")","position":"org.easymock.internal.ArgumentToString:41","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"in":"in"},"name":"add","transplant":{"sourceCode":"java.io.InputStream.close()","position":"org.easymock.internal.EasyMockProperties:70","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","position":"org.easymock.internal.EasyMockProperties:62","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:196","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n    org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection);\n    java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField());\n} ","position":"org.easymock.internal.Injector:169","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor });\n    if (org.easymock.ConstructorArgs != null) {\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>;\n        try {\n            java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n        } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n            throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n        }\n        T T;\n        try {\n            java.lang.reflect.Constructor<?>.setAccessible(true);\n            T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n        } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n        } catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n        }\n        return T;\n    } else {\n        net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory;\n        try {\n            net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n        }\n        net.sf.cglib.proxy.Factory.getCallback(0);\n        return ((T)(net.sf.cglib.proxy.Factory));\n    }\n} finally {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null);\n}","position":"org.easymock.internal.ClassProxyFactory:188","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","position":"org.easymock.internal.RecordState:129","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:70","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.Invocation:210","type":"CtTryImpl"},"status":-2},{"failures":[44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"variableMapping":{"injection":"toAssign"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.Injection.setMatched()","position":"org.easymock.internal.InjectionTarget:65","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injection == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:189","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.CompareEqual<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:1877","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","position":"org.easymock.internal.RecordState:176","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","position":"org.easymock.EasyMock:693","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.InjectionTarget == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:165","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.Class<?>.getSimpleName()) + \".\") + java.lang.String","position":"org.easymock.internal.Invocation:158","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.ClassProxyFactory:116","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","position":"org.easymock.internal.Range:37","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException((\"Failed to mock \" + java.lang.Class<T>) , java.io.IOException)","position":"org.easymock.internal.AndroidClassProxyFactory:58","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:202","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:345","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"))","position":"org.easymock.internal.DefaultClassInstantiator:191","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isArray()) {\n    final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n            return false;\n        } \n        break;\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:196","type":"CtIfImpl"},"status":-2},{"failures":[2,60,61,62,63,64,65,66,67,68,69,70,71,72,3,73,74,4,75,0,1,76,77,78,79,5,80,81,82,83,6,84,85,7,8,86,87,88,9,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,11,12,117,118,119,120,121,122,123,124,125,126,127,16,17,128,129,130,131,132,133,134,135,136,137,138,139,140,141,18,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,19,159,160,161,20,162,21,163,22,23,164,24,25,165,26,166,27,167,28,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,39,40,189,190,191,192,193,194,42,195,196,197,198,199,200,201,202,203,204,205,206,207],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))","position":"org.easymock.EasyMock:1687","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:98","type":"CtInvocationImpl"},"status":-1},{"failures":[149],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Number.intValue()","position":"org.easymock.internal.RecordState:199","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.shortValue()","position":"org.easymock.internal.RecordState:197","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount())) {\n        return false;\n    } \n}","position":"org.easymock.internal.UnorderedBehavior:74","type":"CtForEachImpl"},"status":-2},{"failures":[],"binaryOperator":"(org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\")","name":"math","position":"org.easymock.internal.matchers.CompareTo:49","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"continue","position":"org.easymock.internal.Injector:114","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.InjectionTarget:58","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","position":"org.easymock.internal.MockBuilder:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int += 1","position":"org.easymock.internal.Results:73","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:422","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new (\">=\") {\n    @java.lang.Override\n    public boolean matchResult(final int result) {\n        return int >= 0;\n    }\n}","position":"org.easymock.LogicalOperator:42","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1495","type":"CtReturnImpl"},"status":-2},{"failures":[208,209,210],"binaryOperator":"java.lang.String == null","name":"negateConditional","position":"org.easymock.internal.EasyMockProperties:119","type":"mutation","status":-1},{"failures":[],"variableMapping":{"result":"actualTypeArgument","bound":"actualTypeArgument"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type)","position":"org.easymock.internal.BridgeMethodResolver:325","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"java.lang.Integer.MAX_VALUE":"minimum","maximum":"minimum"},"name":"add","transplant":{"sourceCode":"return (this.int) == (this.int)","position":"org.easymock.internal.Range:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (int) == (int)","position":"org.easymock.internal.Range:52","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.LinkedList<org.easymock.internal.Range>.isEmpty())) {\n    final org.easymock.internal.Range org.easymock.internal.Range = java.util.LinkedList<org.easymock.internal.Range>.getLast();\n    if (!(org.easymock.internal.Range.hasFixedCount())) {\n        throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"));\n    } \n} ","position":"org.easymock.internal.Results:37","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"length"},"name":"replace","transplant":{"sourceCode":"return int == 0","position":"org.easymock.internal.matchers.CompareEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isArray()) {\n        final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n                return false;\n            } \n            break;\n        } \n    } \n    if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:193","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method = java.io.ObjectStreamClass.java.io.ObjectStreamClass.getDeclaredMethod(java.lang.String, new java.lang.Class[]{ java.lang.Class.java.lang.Class })","position":"org.easymock.internal.DefaultClassInstantiator:181","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1647","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1291","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"new org.easymock.internal.Range(1)","position":"org.easymock.internal.MocksControl:380","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","position":"org.easymock.internal.BridgeMethodResolver:318","type":"CtIfImpl"},"status":0},{"failures":[171,173],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","position":"org.easymock.internal.ReflectionUtils:30","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:317","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","position":"org.easymock.EasyMock:2053","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.intValue()","position":"org.easymock.internal.RecordState:199","type":"CtReturnImpl"},"status":-2},{"failures":[1],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory","position":"org.easymock.internal.ClassProxyFactory:225","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Float>(float))","position":"org.easymock.EasyMock:932","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return boolean","position":"org.easymock.internal.ErrorMessage:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","position":"org.easymock.internal.ClassProxyFactory:208","type":"CtLocalVariableImpl"},"status":-2},{"failures":[2,60,61,62,63,64,65,66,67,68,211,69,70,71,72,3,73,74,4,75,0,1,76,212,77,78,79,5,83,6,213,84,85,214,215,7,8,86,87,216,88,9,118,14,15,127,136,149,150,151,152,153,157,158,217,181,182,218,219,183,220,188,41,189,221,222],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1348","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","position":"org.easymock.EasyMock:2106","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"result":"actualTypeArgument","bound":"actualTypeArgument","this":"this"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:354","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:324","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:75","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(T))","position":"org.easymock.EasyMock:1568","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:267","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-1951159588262854559L","position":"org.easymock.internal.ExpectedInvocationAndResult:25","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.floatValue()","position":"org.easymock.internal.RecordState:203","type":"CtReturnImpl"},"status":-2},{"failures":[104,223],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:105","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:109","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(((\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\"))","position":"org.easymock.internal.matchers.Matches:40","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"result"},"name":"add","transplant":{"sourceCode":"return int < 0","position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int <= 0","position":"org.easymock.internal.matchers.LessOrEqual:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:203","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs)","position":"org.easymock.internal.MocksControl:114","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","position":"org.easymock.internal.MockBuilder:68","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Float.java.lang.Class<java.lang.Float>, java.lang.Float.java.lang.Float.valueOf(0))","position":"org.easymock.internal.RecordState:51","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","position":"org.easymock.internal.ArgumentToString:37","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.closeMethod()","position":"org.easymock.internal.RecordState:76","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method);\n}","position":"org.easymock.internal.MockBuilder:104","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:210","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))","position":"org.easymock.internal.ExpectedInvocation:85","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.io.InputStream.close()","position":"org.easymock.internal.EasyMockProperties:70","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","position":"org.easymock.internal.EasyMockProperties:62","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    return java.lang.reflect.Constructor<T>;\n} ","position":"org.easymock.internal.ReflectionUtils:161","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:203","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","position":"org.easymock.internal.MethodSerializationWrapper:69","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += 1","position":"org.easymock.internal.Results:68","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Invocation.getMethod()","position":"org.easymock.internal.ExpectedInvocation:117","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:41","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","position":"org.easymock.internal.MocksControl:201","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"arg":"testSubject"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.Injector:73","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]))","position":"org.easymock.internal.MockInvocationHandler:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToStrict();\n}","position":"org.easymock.EasyMockSupport:594","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"actual","expected":"actual","this":"this"},"name":"add","transplant":{"sourceCode":"return java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:45","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:51","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"matching":"isThreadSafe"},"name":"replace","transplant":{"sourceCode":"return this.boolean","position":"org.easymock.internal.ErrorMessage:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this.boolean","position":"org.easymock.internal.MocksBehavior:189","type":"CtReturnImpl"},"status":0},{"failures":[89,127,140,147,172,224,185,188,197],"variableMapping":{"verified":"lastInvocationUsed"},"name":"replace","transplant":{"sourceCode":"if (boolean) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:160","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:217","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan)","position":"org.easymock.internal.Injector:66","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:250","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:98","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","position":"org.easymock.EasyMock:2066","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.isEmpty()) || (!(this.boolean))) {\n    return true;\n} else {\n    final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.get(((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size()) - 1)).getExpectedInvocation();\n    return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation);\n}","position":"org.easymock.internal.UnorderedBehavior:104","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1177","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:85","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:159","type":"CtLocalVariableImpl"},"status":-2},{"failures":[14,225],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new java.util.Properties()","position":"org.easymock.internal.EasyMockProperties:41","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","position":"org.easymock.internal.ReplayState:68","type":"CtInvocationImpl"},"status":-1},{"failures":[2,60,61,62,63,64,65,66,67,68,69,70,71,72,3,73,74,4,75,0,1,76,77,78,79,5,80,81,82,83,6,213,84,214,215,7,8,86,87,9,89,226,90,227,91,92,93,94,95,96,97,98,99,100,101,102,228,229,230,231,232,233,104,234,105,106,108,109,235,10,110,111,112,113,114,115,116,11,12,119,236,120,13,14,15,121,122,123,124,125,237,126,238,239,240,128,241,129,130,132,133,134,135,136,242,138,141,142,243,145,146,148,149,150,151,152,153,244,154,155,156,157,158,245,246,247,248,249,250,251,252,253,254,255,256,257,19,159,160,161,20,162,21,163,22,23,164,24,25,165,26,166,27,167,28,168,169,258,170,259,172,179,180,260,261,262,263,217,264,29,265,266,267,30,268,31,269,32,33,270,34,35,271,36,272,37,273,38,274,181,182,183,184,224,185,275,276,277,278,279,280,281,189,193,282,283,284,285,286,287,288,289,222,198,199,200,201,202,290,203,204,291,205,43,292,293,294,206,295,207,296,297,298],"name":"inlineConstant","inlineConstant":"boolean boolean = true","position":"org.easymock.internal.MocksBehavior:152","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:51","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"type":"superclass"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:163","type":"CtAssignmentImpl"},"status":0},{"failures":[299,300,301,302,303,304,305],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","position":"org.easymock.internal.Range:41","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:296","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.internal.LastControl:117","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","position":"org.easymock.internal.LastControl:119","type":"CtReturnImpl"},"status":-2},{"failures":[306],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.matchers.Or:54","type":"CtInvocationImpl"},"status":-1},{"failures":[2,60,61,62,307,63,64,65,66,67,68,211,69,70,71,72,3,73,74,4,75,0,1,76,212,77,78,79,5,80,308,309,310,311,81,82,83,6,213,84,85,214,215,7,8,86,87,216,88,9,89,312,313,226,90,227,91,92,93,94,95,96,97,98,99,100,101,102,228,314,315,316,317,318,229,230,231,232,233,319,103,320,321,322,104,234,105,323,106,324,325,326,107,327,328,108,109,235,10,110,111,112,113,329,114,115,116,330,11,12,117,118,119,331,236,120,332,333,13,334,335,336,337,338,339,340,14,225,15,341,342,343,121,344,345,122,346,347,348,349,350,351,352,353,354,123,355,356,357,358,359,124,360,361,362,44,45,46,363,47,125,364,48,49,50,51,365,237,126,366,238,127,367,16,17,368,239,240,128,241,52,53,54,369,55,129,370,56,57,58,59,371,130,131,132,133,134,135,372,210,136,373,374,242,137,138,139,375,376,140,141,18,377,142,243,143,144,145,378,379,146,147,299,380,381,382,300,301,383,384,385,386,387,388,389,390,302,391,392,393,394,303,395,396,397,398,399,400,148,401,149,150,151,152,153,402,244,403,404,405,406,407,408,409,410,411,154,155,412,156,413,414,415,157,158,416,417,418,419,420,421,422,423,424,245,246,247,248,425,249,250,426,251,252,427,428,429,253,254,255,256,257,19,159,160,161,20,162,21,163,22,23,164,24,25,165,26,166,27,167,28,168,430,169,258,431,432,170,304,171,259,172,173,174,175,176,177,433,434,435,436,437,438,439,440,178,179,180,441,442,443,444,445,446,260,261,262,263,217,264,29,265,266,267,30,268,31,269,32,33,270,34,35,271,36,272,37,273,38,274,181,182,218,219,183,184,224,185,275,276,277,278,279,447,448,449,450,451,452,453,454,455,456,457,458,186,459,460,187,461,462,280,220,188,463,39,40,464,281,305,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,41,189,221,190,191,192,193,282,283,485,284,285,486,286,287,288,289,222,194,42,487,488,195,196,489,490,197,198,199,200,201,202,290,203,204,291,205,491,43,292,293,294,206,295,207,296,297,298],"binaryOperator":"(int >= 0)","name":"conditionalBoundary","position":"org.easymock.internal.Range:40","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:93","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","position":"org.easymock.internal.ReflectionUtils:95","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"c":"c"},"name":"add","transplant":{"sourceCode":"org.easymock.IMocksControl.reset()","position":"org.easymock.EasyMockSupport:552","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.resetToNice()","position":"org.easymock.EasyMockSupport:573","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double)","position":"org.easymock.internal.RecordState:65","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:351","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-8447010713532143168L","position":"org.easymock.internal.matchers.CompareTo:30","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int));\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:342","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:117","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1688","type":"CtReturnImpl"},"status":-2},{"failures":[2,62,64,67,68,69,70,72,3,74,4,0,1,76,212,77,78,5,80,81,82,83,6,213,84,85,214,215,7,8,86,87,88,9,89,226,90,227,91,92,93,94,95,96,97,99,100,101,102,228,104,105,106,108,109,235,10,110,111,112,113,114,115,116,11,12,117,118,119,236,120,332,13,14,15,121,122,123,124,125,126,238,127,367,16,17,368,128,129,130,131,132,133,134,135,136,138,140,141,18,142,243,147,148,149,150,151,152,153,154,155,156,157,158,426,251,252,428,429,19,159,160,161,20,162,21,163,22,23,164,24,25,165,26,166,27,167,28,168,169,258,170,171,259,172,173,174,175,176,177,178,179,217,29,265,266,267,30,268,31,269,32,33,270,34,35,271,36,272,37,273,38,274,181,182,218,219,183,224,185,454,456,457,280,188,463,39,40,464,41,189,193,282,283,284,285,286,287,288,289,222,194,42,197,198,202,290,203,204,291,205,43,292,206,295,207,296,297,298],"binaryOperator":"int > (int)","name":"negateConditional","position":"org.easymock.internal.Results:56","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"boolean boolean = true","position":"org.easymock.internal.MocksBehavior:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = java.lang.reflect.Method.isAccessible()","position":"org.easymock.internal.DefaultClassInstantiator:185","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:666","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.Class<?>.getSimpleName()) + \".\") + java.lang.String","position":"org.easymock.internal.Invocation:158","type":"CtReturnImpl"},"status":-2},{"failures":[84],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Double>(org.easymock.Capture<java.lang.Double>))","position":"org.easymock.EasyMock:1975","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.ExpectedInvocation:112","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.io.ObjectInputStream java.io.ObjectInputStream = new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(byte[]))","position":"org.easymock.internal.DefaultClassInstantiator:202","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","position":"org.easymock.internal.EasyMockProperties:62","type":"CtIfImpl"},"status":-2},{"failures":[151,275,202,203,204,205,207],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>, java.lang.Byte.java.lang.Byte.valueOf(((byte)(0))))","position":"org.easymock.internal.RecordState:46","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.ObjectMethodsFilter:76","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new org.easymock.internal.MocksControl.MockType(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.internal.MocksControl:48","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","position":"org.easymock.internal.Range:65","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)","position":"org.easymock.internal.RecordState:97","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","position":"org.easymock.internal.MockBuilder:68","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:197","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.verify()","position":"org.easymock.internal.ReplayState:73","type":"CtInvocationImpl"},"status":-2},{"failures":[62,67,68,69,72,0,1,76,77,87,94,101,102,127,131,134,138,243,378,379,171,259,173,174,175,176,177,179,184,224,185,188,478,479,41,489,490],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount())) {\n        return false;\n    } \n}","position":"org.easymock.internal.UnorderedBehavior:74","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((this.boolean) != boolean) {\n    return false;\n} else if ((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.isEmpty()) || (!(this.boolean))) {\n    return true;\n} else {\n    final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.get(((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size()) - 1)).getExpectedInvocation();\n    return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation);\n}","position":"org.easymock.internal.UnorderedBehavior:102","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Long java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:187","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount())","position":"org.easymock.internal.UnorderedBehavior:93","type":"CtLocalVariableImpl"},"status":0},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":173,"org.easymock.tests2.MockedExceptionTest.testRealException":241,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":280,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":346,"org.easymock.tests.UsageVarargTest.varargIntAccepted":283,"org.easymock.tests.LimitationsTest.mockFinalMethod":401,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":2,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":80,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":404,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":356,"org.easymock.tests.UsageCallCountTest.tooManyCalls":429,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":467,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":330,"org.easymock.tests2.StubTest.stubWithReturnValue":126,"org.easymock.tests.UsageVarargTest.allKinds":222,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":361,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":248,"org.easymock.tests2.CaptureTest.testCaptureAll":6,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":157,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":74,"org.easymock.tests2.CaptureTest.testAnd":83,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":309,"org.easymock.tests.UsageStrictMockTest.testVerify":281,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":32,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":456,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":433,"org.easymock.tests.MockClassControlTest.testToString":403,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":110,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":474,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":96,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":37,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":165,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":129,"org.easymock.tests.UsageThrowableTest.throwError":171,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":183,"org.easymock.samples.SupportTest.addDocument":295,"org.easymock.tests2.StubTest.stub":237,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":478,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":468,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":52,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":152,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":210,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":181,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":49,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":396,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":168,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":376,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":398,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":375,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":289,"org.easymock.tests.UsageExpectAndThrowTest.object":270,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":117,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":262,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":358,"org.easymock.tests2.UsageTest.moreThanOneArgument":18,"org.easymock.tests.UsageVarargTest.varargByteAccepted":288,"org.easymock.tests.MockClassControlTest.testEquals":407,"org.easymock.tests.UsageTest.wrongArguments":488,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":278,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":444,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":55,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":34,"org.easymock.tests2.UsageTest.defaultResetToNice":145,"org.easymock.tests.MockingTest.testNiceClassMocking":415,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":128,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":118,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":106,"org.easymock.tests2.MockBuilderTest.testCreateMock":326,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":119,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":305,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":469,"org.easymock.samples.ExampleTest.voteAgainstRemovals":202,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":366,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":369,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":455,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":200,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":178,"org.easymock.tests2.CaptureTest.testCapture1_2446744":85,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":333,"org.easymock.samples.ExampleTest.voteForRemoval":203,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":339,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":252,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":186,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":337,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":192,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":323,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":245,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":464,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":21,"org.easymock.tests2.CaptureTest.testCaptureRightOne":87,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":465,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":313,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":135,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":199,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":466,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":480,"org.easymock.tests2.UsageConstraintsTest.cmpTo":70,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":421,"org.easymock.tests.MockTypeTest.fromEasyMockClass":436,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":58,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":324,"org.easymock.tests2.MockedExceptionTest.testMockedException":240,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":77,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":255,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":274,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":184,"org.easymock.samples.PartialClassMockTest.testGetArea":206,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":384,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":180,"org.easymock.samples.ConstructorCalledMockTest.testTax":293,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":329,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":335,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":312,"org.easymock.tests2.UsageTest.argumentsOrdered":379,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":434,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":340,"org.easymock.samples.ExampleTest.removeNonExistingDocument":491,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":227,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":419,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":304,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":162,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":275,"org.easymock.tests2.AnswerTest.answer":89,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":59,"org.easymock.tests.MockingTest.testNicePartialClassMocking":155,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":188,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":153,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":257,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":479,"org.easymock.tests.UsageExpectAndThrowTest.longType":267,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":440,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":273,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":123,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":98,"org.easymock.tests.UsageTest.argumentsOrdered":490,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":62,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":105,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":28,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":218,"org.easymock.tests2.NameTest.nameForStrictMock":316,"org.easymock.tests2.MockBuilderTest.testCreateMockString":328,"org.easymock.tests2.CaptureTest.testCaptureNone":8,"org.easymock.tests2.SerializationTest.testClass":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":383,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":395,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":446,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":297,"org.easymock.tests.MockingTest.testInterfaceMocking":412,"org.easymock.tests2.EasyMockSupportTest.testVerify":228,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":442,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":56,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":234,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":268,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":414,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":212,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":140,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":107,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":167,"org.easymock.tests.GenericTest.testBridgedEquals":432,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":68,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":114,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":130,"org.easymock.tests2.UsageConstraintsTest.testOr":66,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":12,"org.easymock.tests.MockClassControlTest.testHashCode":406,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":45,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":314,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":25,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":158,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":177,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":438,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":254,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":111,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":360,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":344,"org.easymock.tests2.UsageConstraintsTest.testSame":65,"org.easymock.tests2.UsageTest.resumeIfFailure":146,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":448,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":115,"org.easymock.tests.UsageOverloadedMethodTest.overloading":179,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":373,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":439,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":47,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":364,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":351,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":453,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":294,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":258,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":350,"org.easymock.tests.UsageTest.openCallCountByLastCall":195,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":31,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":450,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":452,"org.easymock.tests2.NameTest.nameForNiceMock":317,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":471,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":370,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":201,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":253,"org.easymock.tests2.CaptureTest.testPrimitive":84,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":132,"org.easymock.samples.BasicClassMockTest.testPrintContent":298,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":447,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":149,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":242,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":14,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":428,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":249,"org.easymock.tests2.UsageStrictMockTest.differentMethods":17,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":352,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":93,"org.easymock.tests.MockingTest.testClassMocking":410,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":431,"org.easymock.tests2.CaptureTest.testCaptureLast":7,"org.easymock.tests2.UsageConstraintsTest.equals":307,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":223,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":265,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":427,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":251,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":82,"org.easymock.tests.UsageStrictMockTest.range":39,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":196,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":353,"org.easymock.tests.UsageTest.unexpectedCallWithArray":487,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":382,"org.easymock.samples.ExampleTest.addDocument":291,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":413,"org.easymock.tests2.UsageConstraintsTest.lessThan":5,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":459,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":489,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":454,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":477,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":331,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":389,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":334,"org.easymock.tests2.MockBuilderTest.testWithConstructor":319,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":424,"org.easymock.tests2.UsageStrictMockTest.range":16,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":116,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":277,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":482,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":301,"org.easymock.tests.UsageTest.moreThanOneArgument":42,"org.easymock.tests2.UsageTest.openCallCountByLastCall":143,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":103,"org.easymock.tests.UsageStrictMockTest.differentMethods":40,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":418,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":386,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":338,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":30,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":190,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":19,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":345,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":54,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":136,"org.easymock.tests2.DependencyTest.testClassMockingSupport":311,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":463,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":272,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":189,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":363,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":292,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":460,"org.easymock.tests2.UsageConstraintsTest.testContains":71,"org.easymock.tests2.UsageConstraintsTest.testFind":63,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":214,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":420,"org.easymock.samples.ExampleTest.addAndChangeDocument":43,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":233,"org.easymock.tests.UsageVarargTest.varargCharAccepted":284,"org.easymock.tests2.CaptureTest.testCaptureFromStub":216,"org.easymock.tests.UsageVerifyTest.twoThrows":224,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":371,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":435,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":182,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":285,"org.easymock.tests2.DelegateToTest.testReturnException":236,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":243,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":308,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":102,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":225,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":238,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":430,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":449,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":422,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":475,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":86,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":35,"org.easymock.tests2.UsageConstraintsTest.testMatches":73,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":387,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":388,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":397,"org.easymock.tests2.UsageConstraintsTest.testNull":64,"org.easymock.tests.LimitationsTest.abstractClass":399,"org.easymock.tests2.EasyMockSupportClassTest.testAll":121,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":423,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":170,"org.easymock.tests2.UsageConstraintsTest.greaterThan":4,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":193,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":470,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":0,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":99,"org.easymock.tests.UsageExpectAndReturnTest.object":164,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":368,"org.easymock.tests2.DelegateToTest.testWrongClass":332,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":381,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":269,"org.easymock.samples.ExampleTest.voteAgainstRemoval":204,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":176,"org.easymock.tests.UsageVarargTest.varargShortAccepted":286,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":481,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":445,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":51,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":151,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":296,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":343,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":402,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":53,"org.easymock.tests2.SerializationTest.testAllMockedMethod":235,"org.easymock.tests2.NameTest.nameForMocksControl":318,"org.easymock.tests.MockingTest.testStrictClassMocking":409,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":219,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":147,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":349,"org.easymock.tests2.DelegateToTest.testStubDelegate":120,"org.easymock.tests.LimitationsTest.mockNativeMethod":148,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":191,"org.easymock.tests.UsageUnorderedTest.message":41,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":302,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":458,"org.easymock.samples.ExampleTest.answerVsDelegate":290,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":461,"org.easymock.tests.UsageCallCountTest.tooFewCalls":426,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":23,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":226,"org.easymock.tests.UsageVerifyTest.twoReturns":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":357,"org.easymock.tests2.ThreadingTest.testChangeDefault":209,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":20,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":33,"org.easymock.tests2.DependencyTest.testInterfaceMocking":81,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":390,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":91,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":261,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":391,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":94,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":232,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":67,"org.easymock.tests.MockingTest.testTwoMocks":411,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":250,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":246,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":239,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":425,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":347,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":24,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":112,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":57,"org.easymock.tests.UsageThrowableTest.throwCheckedException":174,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":303,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":342,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":437,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":172,"org.easymock.samples.ExampleTest.voteForRemovals":205,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":3,"org.easymock.tests.ReplayStateInvalidUsageTest.times":472,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":263,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":348,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":457,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":134,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":194,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":299,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":159,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":336,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":46,"org.easymock.tests2.UsageConstraintsTest.any":69,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":380,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":22,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":300,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":101,"org.easymock.tests.LimitationsTest.privateConstructor":400,"org.easymock.tests2.CallbackTest.callback":10,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":15,"org.easymock.tests2.NameTest.nameForMock":315,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":385,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":72,"org.easymock.tests.MockNameTest.defaultName":476,"org.easymock.tests2.SerializationTest.test":109,"org.easymock.tests.UsageExpectAndReturnTest.longType":161,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":215,"org.easymock.tests2.CaptureTest.testCaptureFirst":9,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":1,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":484,"org.easymock.tests2.UsageTest.niceToStrict":142,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":260,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":279,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":187,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":416,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":462,"org.easymock.tests2.UsageTest.strictResetToDefault":141,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":341,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":138,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":221,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":29,"org.easymock.tests2.ConstraintsToStringTest.orToString":306,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":163,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":229,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":322,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":372,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":75,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":133,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":282,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":264,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":156,"org.easymock.tests2.DelegateToTest.testDelegate":13,"org.easymock.tests2.UsageConstraintsTest.testNotNull":78,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":321,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":367,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":125,"org.easymock.tests2.CaptureTest.testCapture_2617107":213,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":393,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":473,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":48,"org.easymock.tests2.ThreadingTest.testThreadSafe":11,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":144,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":394,"org.easymock.tests.UsageThrowableTest.noUpperLimit":259,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":485,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":100,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":92,"org.easymock.tests.UsageExpectAndReturnTest.floatType":160,"org.easymock.tests2.UsageTest.wrongArguments":377,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":211,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":231,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":405,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":325,"org.easymock.tests.UsageRangeTest.combination":198,"org.easymock.samples.SupportTest.voteForRemovals":207,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":175,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":354,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":79,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":76,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":359,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":365,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":127,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":26,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":36,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":247,"org.easymock.tests.UsageExpectAndThrowTest.floatType":266,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":355,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":131,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":166,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":208,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":44,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":374,"org.easymock.tests.UsageTest.exactCallCountByLastCall":197,"org.easymock.tests2.AnswerTest.stubAnswer":90,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":97,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":122,"org.easymock.tests.MockingTest.testPartialClassMocking":154,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":27,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":378,"org.easymock.tests2.UsageConstraintsTest.constraints":61,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":230,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":362,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":256,"org.easymock.tests.UsageVarargTest.varargLongAccepted":287,"org.easymock.tests.ObjectMethodsTest.testHashCode":443,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":137,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":139,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":220,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":38,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":124,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":451,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":320,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":483,"org.easymock.tests2.DependencyTest.testClassMocking":310,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":150,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":408,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":441,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":50,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":95,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":60,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":244,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":104,"org.easymock.tests.DefaultClassInstantiatorTest.object":417,"org.easymock.tests.UsageVarargTest.differentLength":486,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":392,"org.easymock.tests2.CaptureTest.testCapture2_2446744":88,"org.easymock.tests.GenericTest.testPackageScope":169}}]

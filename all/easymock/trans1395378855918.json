[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:73","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:237","sourceCode":"return org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.reflect.Method.getParameterTypes())","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidClassProxyFactory:58","sourceCode":"throw new java.lang.RuntimeException((\"Failed to mock \" + java.lang.Class<T>) , java.io.IOException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:39","sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","type":"CtInvocationImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1708","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:249","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[38,39],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[40],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:206","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:214","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[41,42,43,44,45,46,47,48,49,50,51,52],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[2,6,7,8,14,16],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:123","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[52,53,54],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"failures":[55],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"failures":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:104","sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[104],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"message":"key"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[105,40],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1659","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(long[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[106,107,108,32,33,34,35,109,110,111,112,113,114,115,36,37,116,117],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[118],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:251","sourceCode":"java.lang.Class<?> java.lang.Class<?> = this.org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:212","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"lastInvocation":"lastInvocation"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"failures":[60,61,93],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[0,119],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:74","sourceCode":"java.util.Set<java.lang.reflect.Method>.add(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,52],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"failures":[2,6,139,140,141,142,143,144,145,146,147,148,149,150],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.EasyMock:1832","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:43","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"failures":[151,152,15],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":19,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":56,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":105,"org.easymock.tests2.UsageTest.argumentsOrdered":13,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":71,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":68,"org.easymock.tests2.StubTest.stubWithReturnValue":97,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":45,"org.easymock.tests2.SerializationTest.testAllMockedMethod":54,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":66,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":16,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":138,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":62,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":85,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":132,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":70,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":73,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":139,"org.easymock.tests.UsageExpectAndThrowTest.object":83,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":29,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":147,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":25,"org.easymock.tests2.UsageTest.wrongArguments":11,"org.easymock.tests.UsageStrictMockTest.range":140,"org.easymock.samples.ConstructorCalledMockTest.testTax":41,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":135,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":49,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":42,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":121,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":98,"org.easymock.tests2.UsageConstraintsTest.testNull":21,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":144,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":110,"org.easymock.tests2.SerializationTest.test":53,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":84,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":128,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":46,"org.easymock.tests2.CaptureTest.testPrimitive":35,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":4,"org.easymock.tests.UsageTest.moreThanOneArgument":1,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":58,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":92,"org.easymock.tests2.UsageConstraintsTest.testSame":22,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":7,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":65,"org.easymock.tests2.CaptureTest.testCaptureFirst":117,"org.easymock.tests2.CaptureTest.testCaptureNone":113,"org.easymock.tests.UsageUnorderedTest.message":39,"org.easymock.tests.GenericTest.testPackageScope":38,"org.easymock.tests2.CaptureTest.testCapture2_2446744":116,"org.easymock.tests2.UsageTest.moreThanOneArgument":10,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":130,"org.easymock.tests.UsageTest.argumentsOrdered":5,"org.easymock.tests.GenericTest.testBridgedEquals":119,"org.easymock.tests2.CaptureTest.testCapture_2617107":34,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":17,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":124,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":91,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":95,"org.easymock.tests2.UsageStrictMockTest.differentMethods":150,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":47,"org.easymock.tests2.UsageConstraintsTest.any":27,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":89,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":67,"org.easymock.tests.UsageExpectAndThrowTest.longType":76,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":87,"org.easymock.tests2.SerializationTest.testClass":52,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":122,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":26,"org.easymock.tests2.MockedExceptionTest.testRealException":103,"org.easymock.tests2.CaptureTest.testAnd":32,"org.easymock.tests2.UsageTest.strictResetToDefault":118,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":146,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":44,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":104,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":148,"org.easymock.tests2.MockedExceptionTest.testMockedException":101,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":78,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":61,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":72,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":77,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":102,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":129,"org.easymock.tests2.UsageConstraintsTest.testFind":20,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":88,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":145,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":96,"org.easymock.tests2.CaptureTest.testCaptureLast":112,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":69,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":28,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":24,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":125,"org.easymock.tests2.UsageStrictMockTest.range":149,"org.easymock.tests2.CaptureTest.testCapture1_2446744":109,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":107,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":86,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":81,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":12,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":31,"org.easymock.tests.UsageThrowableTest.throwError":57,"org.easymock.tests.UsageStrictMockTest.differentMethods":141,"org.easymock.tests2.CaptureTest.testCaptureRightOne":36,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":9,"org.easymock.tests2.UsageConstraintsTest.testOr":23,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":50,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":143,"org.easymock.tests.UsageTest.wrongArguments":3,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":40,"org.easymock.tests2.MockBuilderTest.testCreateMockString":131,"org.easymock.tests2.MockBuilderTest.testWithConstructor":43,"org.easymock.tests.UsageExpectAndThrowTest.floatType":75,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":151,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":51,"org.easymock.tests.UsageVerifyTest.twoThrows":93,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":133,"org.easymock.samples.PartialClassMockTest.testGetArea":123,"org.easymock.tests2.CaptureTest.testCaptureMultiple":108,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":55,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":137,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":74,"org.easymock.tests2.UsageConstraintsTest.testNotNull":30,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":100,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":99,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":63,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":127,"org.easymock.tests2.CaptureTest.testCaptureFromStub":37,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":126,"org.easymock.tests.UsageTest.unexpectedCallWithArray":2,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":48,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":14,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":80,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":82,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":6,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":59,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":94,"org.easymock.tests2.CaptureTest.testCapture":115,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":136,"org.easymock.tests2.UsageConstraintsTest.constraints":18,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":79,"org.easymock.tests.CapturesMatcherTest.test":106,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":64,"org.easymock.tests.UsageStrictMockTest.testVerify":142,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":114,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":152,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":134,"org.easymock.tests.UsageThrowableTest.throwCheckedException":60,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":111,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":120,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":8,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":15,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":90,"org.easymock.tests2.CaptureTest.testCaptureAll":33}}]

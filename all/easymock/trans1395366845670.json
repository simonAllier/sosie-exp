[{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,144,145,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:77","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:67","sourceCode":"final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[316,317,318,319,320,321,322,323,324,122,126,325],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"failures":[4,144,144,145,145],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:346","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[130],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[8,10,11,20,22,23,24,25,62,63,64,65,66,101,119,120,121,122,123,124,125,126,129,130,131,132,133,134,135,137,138,139,140,141,142,147,149,151,152,154,158,159,160,161,162,177,179,180,185,186,187,188,195,206,214,215,216,217,235,236,237,238,239,240,243,244,246,247,248,250,251,252,253,254,292,293,305,306,307],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:207","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"failures":[87,110],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:122","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"toStringMethod"}},{"position":"org.easymock.internal.LastControl:94","failures":[35,36,37,38,39,40,41,42,43,44,53,54,58,59,67,68,69,70,77,78],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:152","sourceCode":"boolean boolean = true","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:999","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"this.org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"failures":[62,66,137,326],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:119","sourceCode":"java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:196","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"failures":[89,114],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:140","sourceCode":"java.lang.StringBuilder.append(\":\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[327,255],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"equalsMethod","equalsMethod":"equalsMethod"}},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[328],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[13,15,329,330,331,332,333,334,335,336,22,337,338,23,339,340,341,342,343,344,345,346,347,24,348,349,350,351,352,25,353,354,61,355,62,356,357,63,358,64,65,359,360,66,361,362,95,96,97,363,364,119,324,120,121,122,123,125,126,129,130,132,133,134,365,135,366,367,136,137,138,139,368,326,142,144,144,145,145,156,157,183,369,370,371,372,373,374,375,376,377,195,378,379,380,381,220,221,222,382,383,384,385,304,305,306,307,386,387,388,389,390,391,392,393,394],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"result","name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[8,10,11,29,30,31,32,108,109,115,116,395,327,396,176,177,179,180,211,212,213,255,277,279,282,283],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[43,44],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[108,109,115,116,397,398,399,400,176,401,402,403,277,278,279,282,283],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[106,113,128,167,171,199,209,212,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,281,294,296,297,298,299,300,301],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"failures":[404,405],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[347,353,354,122,325,130,136,139],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1688","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[13,15,329,331,332,22,23,24,25,61,355,62,356,63,358,64,65,360,66,361,362,97,119,120,121,122,123,125,126,129,130,132,133,134,365,135,136,137,138,139,142,144,144,145,145,156,157,183,195,379,380,220,221,222,304,305,306,307,388],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"failures":[1,2],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidClassProxyFactory:47","sourceCode":"org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:92","sourceCode":"return null","type":"CtReturnImpl"},"failures":[388],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:60","sourceCode":"this.java.util.List<T>.clear()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[328,68,79,80,406],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"failures":[158],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,63,358,66,362,407,67,68,69,70,71,72,73,74,75,76,77,78,79,80,95,96,97,98,100,101,102,104,105,408,409,410,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,125,126,127,128,129,130,131,132,133,134,135,136,138,140,149,150,151,152,153,154,155,158,159,160,161,162,163,164,165,166,167,168,170,171,174,175,176,177,178,179,180,181,182,411,412,413,414,183,185,186,187,188,415,195,201,206,207,208,209,210,211,212,213,214,215,216,217,218,219,416,417,418,419,220,221,223,224,225,226,227,229,230,231,232,233,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,291,292,293,294,295,296,297,298,299,300,301,302,303,305,306,307,308,309,310,311,312,313,388],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":36,"org.easymock.tests2.UsageTest.argumentsOrdered":116,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":276,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":92,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":111,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":143,"org.easymock.tests2.DelegateToTest.testReturnException":100,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":164,"org.easymock.tests.MockingTest.testPartialClassMocking":305,"org.easymock.tests.MockClassControlTest.testToString":389,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":202,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":326,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":342,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":23,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":256,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":395,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":141,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":42,"org.easymock.tests2.UsageTest.wrongArguments":109,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":206,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":413,"org.easymock.samples.ExampleTest.answerVsDelegate":150,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":380,"org.easymock.tests2.UsageConstraintsTest.testNull":38,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":132,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":394,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":91,"org.easymock.tests2.CaptureTest.testPrimitive":70,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":210,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":275,"org.easymock.tests.UsageTest.moreThanOneArgument":277,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":131,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":216,"org.easymock.tests.UsageTest.argumentsOrdered":283,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":285,"org.easymock.tests.UsageVarargTest.varargIntAccepted":225,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":158,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":61,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":358,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":162,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":16,"org.easymock.tests2.AnswerTest.answer":0,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":43,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":410,"org.easymock.tests2.CaptureTest.testAnd":67,"org.easymock.tests2.UsageTest.strictResetToDefault":107,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":136,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":320,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":215,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":187,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":86,"org.easymock.tests2.DelegateToTest.testDelegate":104,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":289,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":271,"org.easymock.tests.LimitationsTest.mockFinalMethod":378,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":167,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":419,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":290,"org.easymock.tests2.CaptureTest.testCapture1_2446744":71,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":269,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":408,"org.easymock.tests.UsageThrowableTest.throwError":294,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":218,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":316,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":354,"org.easymock.samples.PartialClassMockTest.testGetArea":142,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":159,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":204,"org.easymock.tests2.UsageTest.niceToStrict":110,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":343,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":383,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":63,"org.easymock.tests2.MockBuilderTest.testCreateMock":360,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":350,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":397,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":265,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":87,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":191,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":308,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":411,"org.easymock.tests.UsageOverloadedMethodTest.overloading":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":347,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":352,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":48,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":199,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":169,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":246,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":47,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":76,"org.easymock.tests.MockClassControlTest.testEquals":393,"org.easymock.tests2.EasyMockSupportClassTest.testAll":22,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":221,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":398,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":273,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":329,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":417,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":409,"org.easymock.tests2.CaptureTest.testCaptureAll":68,"org.easymock.tests2.UsageConstraintsTest.testMatches":49,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":217,"org.easymock.samples.ExampleTest.voteForRemovals":154,"org.easymock.tests.UsageVarargTest.allKinds":233,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":211,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":418,"org.easymock.samples.BasicClassMockTest.testPrintContent":157,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":300,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":6,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":168,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":103,"org.easymock.tests2.UsageConstraintsTest.greaterThan":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":337,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":186,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":139,"org.easymock.samples.ExampleTest.voteForRemoval":151,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":375,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":18,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":368,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":365,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":183,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":106,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":359,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":84,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":296,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":335,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":163,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":99,"org.easymock.tests2.CaptureTest.testCaptureFirst":80,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":85,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":118,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":242,"org.easymock.tests2.UsageTest.moreThanOneArgument":108,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":20,"org.easymock.tests2.CaptureTest.testCapture2_2446744":79,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":66,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":232,"org.easymock.tests.GenericTest.testBridgedEquals":382,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":314,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":318,"org.easymock.tests.UsageExpectAndReturnTest.longType":238,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":82,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":219,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":274,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":361,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":184,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":56,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":272,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":193,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":214,"org.easymock.tests.UsageCallCountTest.tooManyCalls":315,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":351,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":243,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":261,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":299,"org.easymock.tests.MockingTest.testNiceClassMocking":386,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":121,"org.easymock.tests.MockingTest.testClassMocking":385,"org.easymock.tests2.UsageConstraintsTest.testContains":46,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":309,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":355,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":97,"org.easymock.tests2.UsageConstraintsTest.testFind":37,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":171,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":174,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":27,"org.easymock.tests.UsageExpectAndReturnTest.object":245,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":135,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":90,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":227,"org.easymock.tests.UsageTest.exactCallCountByLastCall":284,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":302,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":286,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":403,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":324,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":223,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":251,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":198,"org.easymock.tests.MockClassControlTest.testHashCode":392,"org.easymock.tests2.EasyMockSupportTest.testVerify":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":345,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":287,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":190,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":196,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":105,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":407,"org.easymock.tests.UsageVarargTest.varargCharAccepted":226,"org.easymock.tests2.CaptureTest.testCaptureMultiple":328,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":7,"org.easymock.tests2.UsageTest.openCallCountByLastCall":112,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":93,"org.easymock.tests.DefaultClassInstantiatorTest.object":369,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":189,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":234,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":263,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":346,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":297,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":333,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":404,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":391,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":137,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":262,"org.easymock.tests.CapturesMatcherTest.test":406,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":252,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":192,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":390,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":25,"org.easymock.tests2.UsageTest.resumeIfFailure":117,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":379,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":166,"org.easymock.tests2.StubTest.stubWithReturnValue":128,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":321,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":57,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":244,"org.easymock.tests2.SerializationTest.testAllMockedMethod":15,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":172,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":399,"org.easymock.samples.SupportTest.voteForRemovals":147,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":381,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":405,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":268,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":173,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":1,"org.easymock.tests.UsageExpectAndThrowTest.object":266,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":54,"org.easymock.tests2.DelegateToTest.testWrongClass":102,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":292,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":293,"org.easymock.tests.UsageStrictMockTest.range":179,"org.easymock.samples.ConstructorCalledMockTest.testTax":144,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":89,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":120,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":267,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":64,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":334,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":412,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":401,"org.easymock.tests2.CaptureTest.testCaptureNone":75,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":205,"org.easymock.tests.UsageUnorderedTest.message":255,"org.easymock.tests.UsageVerifyTest.twoReturns":213,"org.easymock.tests.UsageVarargTest.varargByteAccepted":231,"org.easymock.tests2.ThreadingTest.testThreadSafe":17,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":348,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":313,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":156,"org.easymock.tests2.CaptureTest.testCapture_2617107":69,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":400,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":209,"org.easymock.tests2.UsageConstraintsTest.any":44,"org.easymock.tests2.StubTest.stub":127,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":194,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":165,"org.easymock.tests.UsageExpectAndThrowTest.longType":259,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":373,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":9,"org.easymock.tests2.SerializationTest.testClass":13,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":81,"org.easymock.tests.LimitationsTest.mockNativeMethod":195,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":222,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":254,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":332,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":12,"org.easymock.tests2.NameTest.nameForMocksControl":32,"org.easymock.tests2.MockedExceptionTest.testMockedException":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":338,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":281,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":260,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":307,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":129,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":65,"org.easymock.tests.MockingTest.testNicePartialClassMocking":306,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":134,"org.easymock.tests2.CaptureTest.testCaptureLast":74,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":291,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":126,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":41,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":55,"org.easymock.tests.MockingTest.testTwoMocks":304,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":325,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":235,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":264,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":115,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":59,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":415,"org.easymock.tests.UsageStrictMockTest.differentMethods":180,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":371,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":19,"org.easymock.tests2.MockBuilderTest.testCreateMockString":362,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":387,"org.easymock.tests.UsageExpectAndThrowTest.floatType":258,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":339,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":336,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":3,"org.easymock.tests.UsageVerifyTest.twoThrows":212,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":24,"org.easymock.samples.ExampleTest.voteAgainstRemoval":152,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":203,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":138,"org.easymock.tests.LimitationsTest.privateConstructor":377,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":317,"org.easymock.tests2.UsageConstraintsTest.testNotNull":58,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":95,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":301,"org.easymock.tests2.UsageTest.defaultResetToNice":114,"org.easymock.samples.ExampleTest.voteAgainstRemovals":149,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":250,"org.easymock.tests.UsageVarargTest.differentLength":228,"org.easymock.tests2.CallbackTest.callback":28,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":366,"org.easymock.tests.UsageTest.openCallCountByLastCall":280,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":33,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":208,"org.easymock.tests.UsageCallCountTest.tooFewCalls":311,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":123,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":414,"org.easymock.tests.UsageThrowableTest.throwCheckedException":298,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":402,"org.easymock.tests.MockingTest.testStrictClassMocking":384,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":125,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":303,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":122,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":124,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":5,"org.easymock.tests2.NameTest.nameForNiceMock":31,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":21,"org.easymock.tests2.DependencyTest.testInterfaceMocking":140,"org.easymock.samples.ExampleTest.addDocument":153,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":349,"org.easymock.tests2.DelegateToTest.testStubDelegate":101,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":353,"org.easymock.tests2.AnswerTest.stubAnswer":4,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":177,"org.easymock.tests.UsageVarargTest.varargLongAccepted":230,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":181,"org.easymock.tests.UsageExpectAndReturnTest.floatType":237,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":253,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":119,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":145,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":52,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":200,"org.easymock.tests.UsageThrowableTest.noUpperLimit":295,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":34,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":363,"org.easymock.tests2.SerializationTest.test":14,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":72,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":370,"org.easymock.tests2.UsageConstraintsTest.testSame":39,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":236,"org.easymock.samples.SupportTest.addDocument":146,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":340,"org.easymock.tests.GenericTest.testPackageScope":220,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":288,"org.easymock.tests2.NameTest.nameForMock":29,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":247,"org.easymock.tests2.UsageStrictMockTest.differentMethods":11,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":323,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":367,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":239,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":270,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":188,"org.easymock.tests2.MockedExceptionTest.testRealException":98,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":8,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":207,"org.easymock.tests2.NameTest.nameForStrictMock":30,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":357,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":26,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":133,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":364,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":53,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":327,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":372,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":62,"org.easymock.tests2.UsageStrictMockTest.range":10,"org.easymock.tests2.UsageConstraintsTest.lessThan":60,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":330,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":83,"org.easymock.tests2.CaptureTest.testCaptureRightOne":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":344,"org.easymock.tests2.UsageConstraintsTest.testOr":40,"org.easymock.tests.UsageRangeTest.combination":185,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":130,"org.easymock.tests.UsageTest.wrongArguments":279,"org.easymock.tests2.MockBuilderTest.testWithConstructor":319,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":341,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":388,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":240,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":248,"org.easymock.tests.UsageVarargTest.varargShortAccepted":229,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":374,"org.easymock.tests2.UsageConstraintsTest.cmpTo":45,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":2,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":113,"org.easymock.tests2.CaptureTest.testCaptureFromStub":78,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":356,"org.easymock.tests.UsageTest.unexpectedCallWithArray":278,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":176,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":312,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":322,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":249,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":178,"org.easymock.tests2.UsageConstraintsTest.constraints":35,"org.easymock.samples.ExampleTest.addAndChangeDocument":155,"org.easymock.tests.UsageStrictMockTest.testVerify":182,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":148,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":175,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":416,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":73,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":160,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":331,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":241,"org.easymock.tests.LimitationsTest.abstractClass":376,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":161,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":201,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":396,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":88,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":224}}]

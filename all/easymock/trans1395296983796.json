[{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[0,1,1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"result","paramTypes":"paramTypes","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:124","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[80,117,81],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[0,1,1,2,2,118,119,120,121,122,123,124,125,126,3,4,127,128,129,5,6,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,8,10,11,12,13,14,15,16,17,18,19,22,170,171,172,173,174,175,176,177,178,179,180,181,182,183,23,24,184,25,26,27,28,29,30,31,32,33,34,35,36,37,185,186,187,188,189,38,39,40,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,41,42,238,239,240,241,43,44,45,46,242,47,48,243,244,245,246,247,248,249,250,251,252,253,254,255,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,256,257,258,259,260,261,262,263,264,265,266,267,268,80,117,81,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,82,83,84,85,86,312,87,313,314,88,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,89,332,333,90,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,91,360,361,362,363,364,365,366,367,368,369,92,93,94,95,96,97,98,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,99,100,101,102,103,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,104,105,106,107,108,109,110,111,112,113,114,115,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,116,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477],"status":-1,"binaryOperator":"(java.lang.String != null) && (!org.easymock.internal.Invocation.(org.easymock.internal.Invocation.isJavaIdentifier(java.lang.String)))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[478,479],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:346","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[24],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[0,1,1,2,2,118,119,120,121,122,123,125,126,3,4,127,128,129,5,130,131,132,133,134,136,137,138,139,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,10,13,15,16,19,170,171,172,173,174,175,176,177,178,179,180,181,182,183,23,24,184,25,26,27,28,29,32,33,34,35,185,186,187,188,189,38,39,40,190,196,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,225,232,233,234,235,236,237,240,241,43,44,45,46,242,47,48,243,244,245,246,247,248,249,250,251,252,253,254,255,58,61,71,77,256,257,258,259,260,261,262,263,264,265,266,267,268,80,117,81,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,84,85,86,87,327,328,329,330,331,336,337,338,339,340,341,343,344,346,347,348,349,350,351,352,354,355,356,357,358,359,91,360,361,362,363,364,370,371,372,373,374,375,377,378,379,380,381,382,383,384,100,101,102,385,386,387,404,410,412,413,414,416,417,418,419,420,421,422,423,104,114,424,425,426,427,428,429,433,434,435,436,437,439,446,447,448,449,450,451,452,453,454,455,457,458,459,460,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[480,481,482,483,353,468],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value"}},{"position":"org.easymock.EasyMock:1205","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:37","failures":[118,119,120,121,122,123,125,126,3,4,127,128,129,140,143,145,146,163,13,15,16,170,171,177,178,180,183,24,26,34,185,186,187,189,196,203,204,205,207,208,209,210,214,215,216,217,218,225,233,234,235,237,240,241,243,244,245,246,247,248,249,251,252,253,254,256,259,260,263,264,265,266,267,268,80,117,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,327,328,329,330,331,336,338,339,351,352,355,356,359,370,374,377,378,379,380,381,382,383,384,101,385,386,387,412,413,414,416,417,419,420,421,422,423,424,425,426,427,428,433,434,435,436,437,446,447,448,449,450,451,452,453,454,464,465,467,469,470,471,472,473],"status":-1,"binaryOperator":"(this.java.lang.Object) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:99","failures":[0,118,120,121,123,129,5,137,138,139,140,142,143,144,145,146,147,149,150,151,152,153,154,155,156,157,158,159,160,162,163,164,165,10,13,15,16,19,170,171,173,174,177,178,179,180,182,183,23,24,184,25,26,27,29,33,34,35,185,186,187,188,189,40,196,203,204,205,207,209,210,211,214,215,216,217,225,234,241,43,44,45,46,242,47,48,243,244,245,246,247,248,249,250,251,252,253,254,58,61,71,77,260,264,266,267,80,117,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,85,86,87,341,347,348,349,350,351,352,355,356,359,374,377,379,380,381,382,383,384,100,102,385,386,387,114,424,425,428,433,434,435,436,437,452,454,464,465,469,471,472],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:94","failures":[139,140,142,143,144,145,146,147,148,149,158,159,163,164,170,171,172,173,180,181],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"failures":[219],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[6,484,485,486,487,488,489],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:61","failures":[139,140,143,145,146,163,170,171,172,177,178,180,183,423,425,426,427],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[99],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:720","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[147],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[480,481,482,483,353,468],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[32],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:201","failures":[0,8,10,11,13,15,16,19,22,28,33,34,37,61,71,77,80,89,90,102],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:87","sourceCode":"if ((java.util.List<java.lang.reflect.Method>.size()) == 1) {\n    java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0);\n} else {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:113","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[490],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:49","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Integer.java.lang.Class<java.lang.Integer>, java.lang.Integer.java.lang.Integer.valueOf(0))","type":"CtInvocationImpl"},"failures":[184,188,38,39,40,190,232,233,234,235,236,237,242,368,93,97,434],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Compare:52","failures":[155],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[0,1,2,118,119,120,121,122,123,124,125,126,3,4,127,128,129,5,6,491,492,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,8,493,10,11,494,12,13,14,15,484,16,495,17,18,19,496,22,170,171,172,173,174,175,176,177,178,179,180,181,182,183,23,24,184,25,26,27,28,497,29,30,31,32,33,34,35,36,37,185,186,187,188,189,38,39,40,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,498,499,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,41,500,501,502,42,238,239,240,241,43,44,45,46,503,242,47,48,504,243,244,245,246,247,248,249,250,251,252,253,254,255,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,256,257,258,259,260,261,262,263,264,265,266,267,268,80,117,81,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,505,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,82,83,84,85,86,312,87,313,314,88,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,89,506,507,332,333,90,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,91,360,361,362,363,364,365,366,367,368,369,508,92,93,94,95,96,97,509,98,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,99,100,101,102,103,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,104,105,106,107,108,109,110,111,112,113,114,115,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,116,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[346],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.Invocation:99","failures":[0,120,121,123,125,129,149,13,252,254,510,347],"status":-1,"binaryOperator":"((this.java.lang.Object.equals(org.easymock.internal.Invocation.java.lang.Object)) && (this.java.lang.reflect.Method.equals(org.easymock.internal.Invocation.java.lang.reflect.Method))) && org.easymock.internal.Invocation.(equalArguments(org.easymock.internal.Invocation.java.lang.Object[]))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1445","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[232,236],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:255","failures":[103],"status":-1,"binaryOperator":"java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:217","sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ErrorMessage:50","failures":[511,370],"status":-1,"binaryOperator":"int == 1","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:42","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"failures":[512],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[5,6,484,17,485,486,487,513,514,80],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:79","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","type":"CtLocalVariableImpl"},"failures":[0,8,9,10,11,13,14,15,16,18,19,21,22,28,80,89,90,102],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[0,1,2,118,119,120,121,122,123,124,125,126,3,4,127,128,129,5,6,491,492,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,8,493,10,11,494,12,13,14,15,484,16,495,17,18,19,496,22,170,171,172,173,174,175,176,177,178,179,180,181,182,183,23,24,184,25,26,27,28,497,29,30,31,32,33,34,35,36,37,185,186,187,188,189,38,39,40,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,498,499,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,41,500,501,502,42,238,239,240,241,43,44,45,46,503,242,47,48,504,243,244,245,246,247,248,249,250,251,252,253,254,255,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,256,257,258,259,260,261,262,263,264,265,266,267,268,80,117,81,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,505,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,82,83,84,85,86,312,87,313,314,88,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,89,506,507,332,333,90,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,91,360,361,362,363,364,365,366,367,368,369,508,92,93,94,95,96,97,509,98,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,99,100,101,102,103,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,104,105,106,107,108,109,110,111,112,113,114,115,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,116,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:185","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"position":"org.easymock.internal.Range:44","failures":[0,1,2,118,119,120,121,122,123,124,125,126,3,4,127,128,129,5,6,491,492,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,8,493,10,11,494,12,13,14,15,484,16,495,17,18,19,496,22,170,171,172,173,174,175,176,177,178,179,180,181,182,183,23,24,184,25,26,27,28,497,29,30,31,32,33,34,35,36,37,185,186,187,188,189,38,39,40,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,498,499,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,41,500,501,502,42,238,239,240,241,43,44,45,46,503,242,47,48,504,243,244,245,246,247,248,249,250,251,252,253,254,255,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,256,257,258,259,260,261,262,263,264,265,266,267,268,80,117,81,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,505,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,82,83,84,85,86,312,87,313,314,88,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,89,506,507,332,333,90,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,91,360,361,362,363,364,365,366,367,368,369,508,92,93,94,95,96,97,509,98,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,99,100,101,102,103,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,104,105,106,107,108,109,110,111,112,113,114,115,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,116,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ClassProxyFactory:157","failures":[],"status":0,"binaryOperator":"(((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName())))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.EqualsWithDelta:45","failures":[515],"status":-1,"binaryOperator":"(((\"eq(\" + (java.lang.Number)) + \", \") + (java.lang.Number))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:117","failures":[119,134,136,218,256,259,261,336],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[516],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ObjectMethodsFilter:98","failures":[139,155,10,15,18,24,35,196,203,205,206,207,208,212,213,214,215,218,225,45,47,244,248,252,262,264,265,266,267,268,332,90,335,337,340,341,342,343,344,347,351,352,353,354,357,358,359,370,376,418,106,107,108,442,445,116,452,453,454,455,457,458,461,462,463,466,468,469,470,471,472,473],"status":-1,"binaryOperator":"(java.lang.String) != null","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":140,"org.easymock.tests2.UsageTest.argumentsOrdered":213,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":351,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":253,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":197,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":398,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":208,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":126,"org.easymock.tests2.DelegateToTest.testReturnException":233,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":447,"org.easymock.tests.MockingTest.testPartialClassMocking":85,"org.easymock.tests.MockClassControlTest.testToString":106,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":492,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":439,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":407,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":37,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":65,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":61,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":269,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":217,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":485,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":147,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":424,"org.easymock.tests2.UsageTest.wrongArguments":206,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":231,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":431,"org.easymock.samples.ExampleTest.answerVsDelegate":119,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":90,"org.easymock.tests2.UsageConstraintsTest.testNull":143,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":314,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":25,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":111,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":252,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":49,"org.easymock.tests2.CaptureTest.testPrimitive":173,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":428,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":288,"org.easymock.tests.UsageTest.moreThanOneArgument":352,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":184,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":329,"org.easymock.tests.UsageTest.argumentsOrdered":358,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":360,"org.easymock.tests.UsageVarargTest.varargIntAccepted":414,"org.easymock.tests.InvocationTest.testEquals":510,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":403,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":433,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":489,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":8,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":501,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":201,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":14,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":390,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":437,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":225,"org.easymock.tests.ReplayStateInvalidUsageTest.times":323,"org.easymock.tests2.DependencyTest.testClassMocking":498,"org.easymock.tests2.AnswerTest.answer":256,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":148,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":405,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":169,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":507,"org.easymock.tests2.CaptureTest.testAnd":170,"org.easymock.tests2.UsageTest.strictResetToDefault":204,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":494,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":32,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":328,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":247,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":349,"org.easymock.tests2.DelegateToTest.testDelegate":237,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":364,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":284,"org.easymock.tests.LimitationsTest.mockFinalMethod":115,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":450,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":369,"org.easymock.tests2.DependencyTest.testClassMockingSupport":499,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":343,"org.easymock.tests2.CaptureTest.testCapture1_2446744":174,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":497,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":282,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":167,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":317,"org.easymock.tests.UsageThrowableTest.throwError":377,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":333,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":505,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":202,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":331,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":79,"org.easymock.samples.PartialClassMockTest.testGetArea":0,"org.easymock.tests.MockingTest.testInterfaceMocking":312,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":318,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":434,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":476,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":66,"org.easymock.tests2.UsageTest.niceToStrict":207,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":270,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":388,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":13,"org.easymock.tests2.MockBuilderTest.testCreateMock":18,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":74,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":228,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":480,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":278,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":248,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":506,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":373,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":455,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":429,"org.easymock.tests.UsageOverloadedMethodTest.overloading":386,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":70,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":76,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":153,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":339,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":385,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":303,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":152,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":179,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":415,"org.easymock.tests.MockClassControlTest.testEquals":110,"org.easymock.tests2.EasyMockSupportClassTest.testAll":58,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":101,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":286,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":50,"org.easymock.tests2.CaptureTest.testCaptureAll":171,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":168,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":367,"org.easymock.tests.MockNameTest.defaultName":376,"org.easymock.tests2.UsageConstraintsTest.testMatches":154,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":315,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":330,"org.easymock.samples.ExampleTest.voteForRemovals":123,"org.easymock.tests.UsageVarargTest.allKinds":423,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":452,"org.easymock.samples.BasicClassMockTest.testPrintContent":4,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":368,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":383,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":262,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":451,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":198,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":236,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":514,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":509,"org.easymock.tests2.UsageConstraintsTest.greaterThan":156,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":59,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":348,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":35,"org.easymock.samples.ExampleTest.voteForRemoval":120,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":98,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":186,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":36,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":20,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":334,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":502,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":28,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":91,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":203,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":17,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":395,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":245,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":379,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":56,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":446,"org.easymock.tests2.CaptureTest.testCaptureFirst":183,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":232,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":394,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":246,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":215,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":342,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":299,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":188,"org.easymock.tests2.CaptureTest.testCapture2_2446744":182,"org.easymock.tests2.UsageTest.moreThanOneArgument":205,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":406,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":19,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":422,"org.easymock.tests.GenericTest.testBridgedEquals":103,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":462,"org.easymock.tests.UsageExpectAndReturnTest.longType":295,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":243,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":365,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":21,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":287,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":161,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":346,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":285,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":290,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":327,"org.easymock.tests.UsageCallCountTest.tooManyCalls":463,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":457,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":75,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":300,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":230,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":274,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":382,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":44,"org.easymock.tests.MockingTest.testNiceClassMocking":88,"org.easymock.tests.MockingTest.testClassMocking":83,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":456,"org.easymock.tests2.UsageConstraintsTest.testContains":151,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":9,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":40,"org.easymock.tests2.UsageConstraintsTest.testFind":142,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":387,"org.easymock.tests.MockTypeTest.fromEasyMockClass":332,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":466,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":136,"org.easymock.tests.UsageExpectAndReturnTest.object":302,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":29,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":229,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":515,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":251,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":486,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":417,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":444,"org.easymock.tests.UsageTest.exactCallCountByLastCall":359,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":374,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":393,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":438,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":361,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":6,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":412,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":308,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":338,"org.easymock.tests.MockClassControlTest.testHashCode":109,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":192,"org.easymock.tests2.EasyMockSupportTest.testVerify":255,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":68,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":362,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":336,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":372,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":166,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":219,"org.easymock.tests.UsageVarargTest.varargCharAccepted":416,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":508,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":263,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":411,"org.easymock.tests2.UsageTest.openCallCountByLastCall":209,"org.easymock.tests.DefaultClassInstantiatorTest.object":92,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":254,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":371,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":442,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":69,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":276,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":54,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":380,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":223,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":191,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":108,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":33,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":275,"org.easymock.tests.CapturesMatcherTest.test":479,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":309,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":289,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":77,"org.easymock.tests2.UsageTest.resumeIfFailure":214,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":89,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":500,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":449,"org.easymock.tests2.StubTest.stubWithReturnValue":241,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":484,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":162,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":301,"org.easymock.tests2.SerializationTest.testAllMockedMethod":81,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":404,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":490,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":481,"org.easymock.samples.SupportTest.voteForRemovals":129,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":99,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":194,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":281,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":410,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":257,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":440,"org.easymock.tests.UsageExpectAndThrowTest.object":279,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":159,"org.easymock.tests2.DelegateToTest.testWrongClass":235,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":464,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":465,"org.easymock.tests.UsageStrictMockTest.range":471,"org.easymock.samples.ConstructorCalledMockTest.testTax":1,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":238,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":250,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":43,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":516,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":280,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":15,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":55,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":325,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":357,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":430,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":482,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":477,"org.easymock.tests2.CaptureTest.testCaptureNone":178,"org.easymock.tests.UsageUnorderedTest.message":370,"org.easymock.tests.UsageVerifyTest.twoReturns":454,"org.easymock.tests.UsageVarargTest.varargByteAccepted":421,"org.easymock.tests2.ThreadingTest.testThreadSafe":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":72,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":460,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":445,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":3,"org.easymock.tests2.CaptureTest.testCapture_2617107":172,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":345,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":408,"org.easymock.tests2.UsageConstraintsTest.any":149,"org.easymock.tests2.StubTest.stub":240,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":322,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":291,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":448,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":409,"org.easymock.tests.UsageExpectAndThrowTest.longType":272,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":96,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":321,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":265,"org.easymock.tests2.SerializationTest.testClass":80,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":196,"org.easymock.tests.LimitationsTest.mockNativeMethod":114,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":102,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":311,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":53,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":222,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":268,"org.easymock.tests2.NameTest.nameForMocksControl":133,"org.easymock.tests2.MockedExceptionTest.testMockedException":39,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":224,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":60,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":356,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":135,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":87,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":273,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":23,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":16,"org.easymock.tests.MockingTest.testNicePartialClassMocking":86,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":27,"org.easymock.tests2.CaptureTest.testCaptureLast":177,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":220,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":344,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":146,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":48,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":160,"org.easymock.tests.MockingTest.testTwoMocks":84,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":504,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":292,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":277,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":212,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":164,"org.easymock.samples.ExampleTest.removeNonExistingDocument":124,"org.easymock.tests.UsageStrictMockTest.differentMethods":472,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":227,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":319,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":193,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":94,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":187,"org.easymock.tests2.MockBuilderTest.testCreateMockString":22,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":62,"org.easymock.tests.UsageExpectAndThrowTest.floatType":271,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":57,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":259,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":491,"org.easymock.tests.UsageVerifyTest.twoThrows":453,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":337,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":71,"org.easymock.samples.ExampleTest.voteAgainstRemoval":121,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":475,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":399,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":34,"org.easymock.tests.LimitationsTest.privateConstructor":113,"org.easymock.tests2.UsageConstraintsTest.testNotNull":163,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":384,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":38,"org.easymock.tests2.UsageTest.defaultResetToNice":211,"org.easymock.samples.ExampleTest.voteAgainstRemovals":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":400,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":307,"org.easymock.tests.UsageVarargTest.differentLength":418,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":221,"org.easymock.tests2.CallbackTest.callback":218,"org.easymock.tests2.UsageConstraintsTest.equals":141,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":30,"org.easymock.tests.UsageTest.openCallCountByLastCall":355,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":137,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":426,"org.easymock.tests.UsageCallCountTest.tooFewCalls":458,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":46,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":432,"org.easymock.tests.UsageThrowableTest.throwCheckedException":381,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":483,"org.easymock.tests.MockingTest.testStrictClassMocking":82,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":47,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":375,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":45,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":226,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":324,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":242,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":261,"org.easymock.tests.ObjectMethodsTest.testHashCode":443,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":488,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":189,"org.easymock.tests2.NameTest.nameForNiceMock":132,"org.easymock.tests2.DependencyTest.testInterfaceMocking":216,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":487,"org.easymock.samples.ExampleTest.addDocument":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":73,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":78,"org.easymock.tests2.DelegateToTest.testStubDelegate":234,"org.easymock.tests2.AnswerTest.stubAnswer":260,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":469,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":495,"org.easymock.tests.UsageVarargTest.varargLongAccepted":420,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":473,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":397,"org.easymock.tests.UsageExpectAndReturnTest.floatType":294,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":310,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":5,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":2,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":157,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":200,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":340,"org.easymock.tests.UsageThrowableTest.noUpperLimit":378,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":138,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":41,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":175,"org.easymock.tests2.SerializationTest.test":117,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":93,"org.easymock.tests2.UsageConstraintsTest.testSame":144,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":293,"org.easymock.samples.SupportTest.addDocument":128,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":503,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":320,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":63,"org.easymock.tests.GenericTest.testPackageScope":100,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":363,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":392,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":199,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":313,"org.easymock.tests2.NameTest.nameForMock":130,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":304,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":496,"org.easymock.tests2.UsageStrictMockTest.differentMethods":267,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":31,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":296,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":283,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":441,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":350,"org.easymock.tests2.MockedExceptionTest.testRealException":190,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":335,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":402,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":401,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":264,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":425,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":326,"org.easymock.tests2.NameTest.nameForStrictMock":131,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":12,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":134,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":26,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":42,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":511,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":158,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":95,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":10,"org.easymock.tests2.UsageStrictMockTest.range":266,"org.easymock.tests2.UsageConstraintsTest.lessThan":165,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":51,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":195,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":7,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":513,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":396,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":244,"org.easymock.tests2.CaptureTest.testCaptureRightOne":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":67,"org.easymock.tests2.UsageConstraintsTest.testOr":145,"org.easymock.tests.UsageRangeTest.combination":347,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":24,"org.easymock.tests.UsageTest.wrongArguments":354,"org.easymock.tests2.MockBuilderTest.testWithConstructor":493,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":64,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":105,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":297,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":389,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":305,"org.easymock.tests.UsageVarargTest.varargShortAccepted":419,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":97,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":461,"org.easymock.tests2.UsageConstraintsTest.cmpTo":150,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":391,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":210,"org.easymock.tests2.CaptureTest.testCaptureFromStub":181,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":316,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":11,"org.easymock.tests.UsageTest.unexpectedCallWithArray":353,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":468,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":459,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":306,"org.easymock.tests2.CaptureTest.testCapture":478,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":470,"org.easymock.tests2.UsageConstraintsTest.constraints":139,"org.easymock.samples.ExampleTest.addAndChangeDocument":125,"org.easymock.tests2.ConstraintsToStringTest.notToString":512,"org.easymock.tests.UsageStrictMockTest.testVerify":474,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":127,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":467,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":366,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":176,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":435,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":52,"org.easymock.tests.LimitationsTest.abstractClass":112,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":298,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":436,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":341,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":413,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":249}}]

[{"position":"org.easymock.EasyMock:866","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:98","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()))","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1568","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(T))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,45,46,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:159","sourceCode":"final java.lang.ClassCastException java.lang.ClassCastException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:37","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(int.int, java.lang.Integer.java.lang.Integer)","type":"CtInvocationImpl"},"failures":[64,65,66,67,68,69,70,71,72],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[73,74,75,76,77,78,79,80,81,82,83,84,85,45,45,46,46,86,87,88,89,90,91,92,9,93,10,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,11,109,110,111,112,12,13,14,113,114,115,116,117,118,119],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"methods":"methods","name":"name","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[120],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[121],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:593","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"failures":[122,123,124],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:166","sourceCode":"java.lang.StringBuilder.append(\"\\n  Expectation failure on verify:\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[125,126,127,128,129],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"this.java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[73,74,130,131,132,133,134,135,89,10,96,136,102,103,105,106,11,110,111,13,14,113,114,116],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","toStringMethod":"hashCodeMethod","this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[137,138,139,140,141],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"failures":[142,143,144,145,146,147,148,149,150,151,122,152,153,154,155,156,157,158,159,160,161,162],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:198","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.EqualsWithDelta:40","sourceCode":"return (((java.lang.Number.doubleValue()) - (java.lang.Number.doubleValue())) <= (java.lang.Number.doubleValue())) && ((java.lang.Number.doubleValue()) <= ((java.lang.Number.doubleValue()) + (java.lang.Number.doubleValue())))","type":"CtReturnImpl"},"failures":[57],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1506","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(double))","type":"CtInvocationImpl"},"failures":[163,138,164],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:219","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[136,116],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[165,166,167],"status":-1,"binaryOperator":"java.lang.String == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,0,1,2,3,191,192,193,194,195,196,197,198,199,200,201,28,29,30,31,32,33,34,4,5,6,7,8,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,75,35,222,76,77,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,80,81,82,263,36,37,264,265,38,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,39,40,41,42,43,131,83,132,133,134,135,283,284,84,285,126,127,286,287,288,44,289,128,290,291,292,85,293,294,295,296,297,298,299,300,45,46,301,302,303,304,86,87,88,89,305,90,91,92,9,93,10,94,95,96,97,98,99,100,101,102,103,104,306,105,106,307,308,47,48,137,163,49,50,51,52,138,309,310,311,53,312,54,55,313,56,57,164,314,315,316,317,58,59,60,107,318,108,11,110,112,12,13,14,113,114,116,319,320,321,322,15,323,324,325,16,326,327,328,329,330,331,332,333,17,18,19,20,21,334,335,22,336,23,24,337,25,26,338,339,340,341,342,343,344,345,27,117,346,347,119,348,349,350,351,352,353,354,355,61,356,357,358,124,359,360,139,361,140,362,363,364,365,366,367,368,141,62,369,370,371,372,63,373,129,374,375],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:48","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"toString\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:210","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[47,137,56,317,376],"status":-1,"binaryOperator":"int <= 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Or:47","sourceCode":"java.lang.StringBuffer.append(\"or(\")","type":"CtInvocationImpl"},"failures":[377],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[73,74,130,378,379,75,120,76,78,380,381,79,80,81,82,382,266,383,384,385,386,387,388,131,83,132,134,135,283,284,84,85,45,45,46,46,88,89,90,91,92,9,93,389,390,10,94,95,96,391,136,97,98,99,100,101,102,103,104,105,106,107,108,11,109,110,111,392,112,12,13,14,113,114,393,115,116,394,395,117,66,396,118,347,119],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"result","name":"name","method":"method","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.EasyMockSupport:52","sourceCode":"new java.util.ArrayList<org.easymock.IMocksControl>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"failures":[397],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[398,399,204,288,400,401],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[171,172,173,175,176,177,178,183,184,185,186,187,188,189,190,197,198,199,200,205,208,209,210,211,212,213,214,215,217,218,219,220,221,75,76,77,225,226,228,233,238,245,246,248,253,258,80,81,82,263,36,37,264,265,279,84,126,127,287,288,44,289,128,290,291,85,293,294,295,296,297,298,300,301,302,303,304,86,87,88,89,305,90,91,92,93,95,97,98,99,100,101,102,103,104,306,105,106,163,50,138,309,310,311,312,313,164,314,315,316,317,58,107,318,108,112,13,14,319,320,322,15,323,326,327,329,330,331,21,334,335,22,336,23,24,337,26,338,339,340,341,27,117,119,349,353,354,356,357,358,359,360,139,361,140,362,364,365,366,367,368,141,370,372,63,373,129,374,375],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1790","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1065","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[402,403,404],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:94","sourceCode":"java.util.List<org.easymock.IArgumentMatcher>.addAll(java.util.Stack<org.easymock.IArgumentMatcher>.subList(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int), java.util.Stack<org.easymock.IArgumentMatcher>.size()))","type":"CtInvocationImpl"},"failures":[137,163,50,51,52,405,164,58,59,139,140,141],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:801","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:75","sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","type":"CtReturnImpl"},"failures":[203,205,208,209,263,285,126,127,288,44,128,290,321,322,326,327,342,343,344,345,63,129,374],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[164],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[406,407,408,166],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.CompareEqual:39","failures":[93,311,409],"status":-1,"binaryOperator":"int == 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[73,74,130,75,76,77,78,410,79,80,81,82,131,83,132,133,134,135,283,284,84,85,45,45,46,46,86,87,88,89,90,91,92,9,93,10,94,95,96,136,97,98,99,100,101,102,103,104,105,106,107,108,11,110,111,112,12,13,14,113,114,116,117,119],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"equalsMethod","method":"equalsMethod"}},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:104","sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","type":"CtThrowImpl"},"failures":[405],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1594","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:945","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Integer>(int))","type":"CtInvocationImpl"},"failures":[47,56,314],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:40","failures":[398,399,411,412,203,204,263,413,414,285,126,127,288,44,128,290,321,377,400,415,416,417,401,418,63,129,374],"status":-1,"binaryOperator":"java.lang.Object instanceof java.lang.Character","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:172","failures":[74,13],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:289","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[120],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:107","failures":[73,74,130,378,379,75,419,120,76,77,78,410,380,381,79,80,81,82,382,266,383,384,385,386,387,388,131,83,132,133,134,135,283,284,84,85,45,45,46,46,86,87,88,89,90,91,92,9,93,389,390,10,94,95,96,391,136,420,421,422,97,423,424,98,425,426,427,428,429,430,431,432,433,99,434,435,436,437,438,100,439,440,101,102,103,104,105,106,107,108,11,109,110,111,392,112,12,13,14,441,113,114,115,116,394,395,117,66,118,346,347,119],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:63","failures":[],"status":0,"binaryOperator":"(\"Failed to instantiate \" + (java.lang.Class<?>.getName()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:117","failures":[197,294,307,308,330,331,333,349],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:52","sourceCode":"java.lang.StringBuffer.append(\"]\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[442,443,444],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[445,446,361,369,370],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:907","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:83","sourceCode":"return (int) == (java.lang.Integer.int)","type":"CtReturnImpl"},"failures":[179,185,195,202,203,205,206,207,208,209,210,221,263,37,38,285,126,127,288,44,289,128,290,50,310,313,58,319,321,322,324,325,326,327,329,330,332,342,343,344,345,349,61,124,361,140,363,364,365,366,367,370,63,373,129,374],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":163,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":202,"org.easymock.tests2.UsageTest.argumentsOrdered":327,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":339,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":122,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":323,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":301,"org.easymock.tests2.DelegateToTest.testReturnException":358,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":192,"org.easymock.tests.MockingTest.testPartialClassMocking":80,"org.easymock.tests.MockClassControlTest.testToString":132,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":159,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":136,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":428,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":98,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":223,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":357,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":67,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":309,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":36,"org.easymock.tests2.UsageTest.wrongArguments":322,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":2,"org.easymock.samples.ExampleTest.answerVsDelegate":294,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":74,"org.easymock.tests2.UsageConstraintsTest.testNull":50,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":90,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":284,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":338,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":396,"org.easymock.tests2.CaptureTest.testPrimitive":362,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":38,"org.easymock.tests.UsageTest.moreThanOneArgument":203,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":242,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":305,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":41,"org.easymock.tests.UsageTest.argumentsOrdered":209,"org.easymock.tests.UsageVarargTest.varargIntAccepted":213,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":418,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":156,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":30,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":11,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":71,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":12,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":144,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":34,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":444,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":27,"org.easymock.tests.ReplayStateInvalidUsageTest.times":275,"org.easymock.tests2.AnswerTest.answer":330,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":405,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":157,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":20,"org.easymock.tests2.CaptureTest.testAnd":139,"org.easymock.tests2.UsageTest.strictResetToDefault":320,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":10,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":40,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":23,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":281,"org.easymock.tests2.DelegateToTest.testDelegate":360,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":238,"org.easymock.tests.LimitationsTest.mockFinalMethod":419,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":195,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":8,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":413,"org.easymock.tests2.CaptureTest.testCapture1_2446744":363,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":165,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":236,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":18,"org.easymock.tests.UsageThrowableTest.throwError":183,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":269,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":43,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":440,"org.easymock.samples.PartialClassMockTest.testGetArea":85,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":270,"org.easymock.tests2.CompareToTest.testLessOrEqual":376,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":429,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":130,"org.easymock.tests2.UsageTest.niceToStrict":15,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":224,"org.easymock.tests2.ThreadingTest.testChangeDefault":167,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":402,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":142,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":112,"org.easymock.tests2.MockBuilderTest.testCreateMock":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":436,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":400,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":232,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":24,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":168,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":0,"org.easymock.tests.UsageOverloadedMethodTest.overloading":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":438,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":433,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":54,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":199,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":177,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":254,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":312,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":368,"org.easymock.tests2.EasyMockSupportClassTest.testAll":97,"org.easymock.tests.MockClassControlTest.testEquals":283,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":77,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":240,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":397,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":6,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":19,"org.easymock.tests2.CaptureTest.testCaptureAll":361,"org.easymock.tests2.UsageConstraintsTest.testMatches":55,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":42,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":267,"org.easymock.samples.ExampleTest.voteForRemovals":298,"org.easymock.tests.UsageVarargTest.allKinds":221,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":285,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":7,"org.easymock.samples.BasicClassMockTest.testPrintContent":87,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":189,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":371,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":196,"org.easymock.tests2.UsageConstraintsTest.greaterThan":56,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":423,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":280,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":96,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":388,"org.easymock.samples.ExampleTest.voteForRemoval":295,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":391,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":351,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":393,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":9,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":84,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":319,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":441,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":149,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":22,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":421,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":191,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":123,"org.easymock.tests2.CaptureTest.testCaptureFirst":370,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":148,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":336,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":329,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":201,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":250,"org.easymock.tests2.UsageTest.moreThanOneArgument":321,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":353,"org.easymock.tests2.CaptureTest.testCapture2_2446744":369,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":158,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":114,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":220,"org.easymock.tests.GenericTest.testBridgedEquals":410,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":175,"org.easymock.tests.UsageExpectAndReturnTest.longType":246,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":4,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":334,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":115,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":241,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":316,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":239,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":39,"org.easymock.tests.UsageCallCountTest.tooManyCalls":176,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":442,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":437,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":251,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":228,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":188,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":102,"org.easymock.tests.MockingTest.testNiceClassMocking":382,"org.easymock.tests.MockingTest.testClassMocking":381,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":169,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":109,"org.easymock.tests2.UsageConstraintsTest.testContains":53,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":119,"org.easymock.tests2.UsageConstraintsTest.testFind":49,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":179,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":286,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":308,"org.easymock.tests.UsageExpectAndReturnTest.object":253,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":93,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":26,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":68,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":215,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":182,"org.easymock.tests.UsageTest.exactCallCountByLastCall":210,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":35,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":147,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":66,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":211,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":259,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":198,"org.easymock.tests.MockClassControlTest.testHashCode":135,"org.easymock.tests2.EasyMockSupportTest.testVerify":341,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":431,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":443,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":197,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":17,"org.easymock.tests.UsageVarargTest.varargCharAccepted":214,"org.easymock.tests2.CaptureTest.testCaptureMultiple":446,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":372,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":162,"org.easymock.tests2.UsageTest.openCallCountByLastCall":324,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":403,"org.easymock.tests.DefaultClassInstantiatorTest.object":266,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":340,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":180,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":412,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":432,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":230,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":186,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":134,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":94,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":229,"org.easymock.tests.CapturesMatcherTest.test":445,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":260,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":416,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":133,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":100,"org.easymock.tests2.UsageTest.resumeIfFailure":328,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":73,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":194,"org.easymock.tests2.StubTest.stubWithReturnValue":61,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":64,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":252,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":317,"org.easymock.tests2.SerializationTest.testAllMockedMethod":108,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":121,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":401,"org.easymock.samples.SupportTest.voteForRemovals":304,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":120,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":235,"org.easymock.tests.UsageExpectAndThrowTest.object":233,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":314,"org.easymock.tests2.DelegateToTest.testWrongClass":359,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":28,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":29,"org.easymock.tests.UsageStrictMockTest.range":128,"org.easymock.samples.ConstructorCalledMockTest.testTax":45,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":25,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":101,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":234,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":13,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":420,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":208,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":277,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":1,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":398,"org.easymock.tests2.CaptureTest.testCaptureNone":367,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":407,"org.easymock.tests.UsageUnorderedTest.message":263,"org.easymock.tests.UsageVerifyTest.twoReturns":127,"org.easymock.tests.UsageVarargTest.varargByteAccepted":219,"org.easymock.tests2.ThreadingTest.testThreadSafe":350,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":434,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":173,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":86,"org.easymock.tests2.CaptureTest.testCapture_2617107":140,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":160,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":265,"org.easymock.tests2.UsageConstraintsTest.any":310,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":274,"org.easymock.tests2.StubTest.stub":355,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":161,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":193,"org.easymock.tests.UsageExpectAndThrowTest.longType":226,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":386,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":273,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":373,"org.easymock.tests2.SerializationTest.testClass":107,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":21,"org.easymock.tests.LimitationsTest.mockNativeMethod":75,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":78,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":262,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":375,"org.easymock.tests2.NameTest.nameForMocksControl":345,"org.easymock.tests2.MockedExceptionTest.testMockedException":347,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":424,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":207,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":82,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":227,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":88,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":14,"org.easymock.tests.MockingTest.testNicePartialClassMocking":81,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":92,"org.easymock.tests2.CompareToTest.testCompareEqual":409,"org.easymock.tests2.CaptureTest.testCaptureLast":366,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":414,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":138,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":106,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":315,"org.easymock.tests.MockingTest.testTwoMocks":79,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":243,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":231,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":326,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":59,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":166,"org.easymock.samples.ExampleTest.removeNonExistingDocument":299,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":271,"org.easymock.tests.UsageStrictMockTest.differentMethods":290,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":384,"org.easymock.tests2.ConstraintsToStringTest.andToString":417,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":352,"org.easymock.tests2.MockBuilderTest.testCreateMockString":116,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":131,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":425,"org.easymock.tests.UsageExpectAndThrowTest.floatType":225,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":422,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":331,"org.easymock.tests.UsageVerifyTest.twoThrows":126,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":99,"org.easymock.samples.ExampleTest.voteAgainstRemoval":296,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":152,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":95,"org.easymock.tests.LimitationsTest.privateConstructor":379,"org.easymock.tests2.UsageConstraintsTest.testNotNull":58,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":190,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":346,"org.easymock.tests2.UsageTest.defaultResetToNice":16,"org.easymock.samples.ExampleTest.voteAgainstRemovals":293,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":153,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":258,"org.easymock.tests.UsageVarargTest.differentLength":216,"org.easymock.tests2.CallbackTest.callback":349,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":389,"org.easymock.tests.UsageTest.openCallCountByLastCall":206,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":47,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":264,"org.easymock.tests.UsageCallCountTest.tooFewCalls":171,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":104,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":3,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":408,"org.easymock.tests.UsageThrowableTest.throwCheckedException":187,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":399,"org.easymock.tests.MockingTest.testStrictClassMocking":380,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":105,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":222,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":103,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":276,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":306,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":333,"org.easymock.tests.ObjectMethodsTest.testHashCode":181,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":70,"org.easymock.tests2.NameTest.nameForNiceMock":344,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":354,"org.easymock.tests2.DependencyTest.testInterfaceMocking":356,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":69,"org.easymock.samples.ExampleTest.addDocument":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":435,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":439,"org.easymock.tests2.DelegateToTest.testStubDelegate":124,"org.easymock.tests2.AnswerTest.stubAnswer":332,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":44,"org.easymock.tests.UsageVarargTest.varargLongAccepted":218,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":291,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":151,"org.easymock.tests.UsageExpectAndReturnTest.floatType":245,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":261,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":117,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":46,"org.easymock.tests2.ConstraintsToStringTest.orToString":377,"org.easymock.tests.UsageThrowableTest.noUpperLimit":184,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":57,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":48,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":394,"org.easymock.tests2.SerializationTest.test":318,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":364,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":383,"org.easymock.tests2.UsageConstraintsTest.testSame":51,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":244,"org.easymock.samples.SupportTest.addDocument":303,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":272,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":426,"org.easymock.tests.GenericTest.testPackageScope":76,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":146,"org.easymock.tests2.NameTest.nameForMock":342,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":255,"org.easymock.tests2.UsageStrictMockTest.differentMethods":374,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":390,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":247,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":237,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":282,"org.easymock.tests2.MockedExceptionTest.testRealException":348,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":155,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":411,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":154,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":63,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":37,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":278,"org.easymock.tests2.NameTest.nameForStrictMock":343,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":392,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":404,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":307,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":91,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":395,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":385,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":164,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":110,"org.easymock.tests2.UsageStrictMockTest.range":129,"org.easymock.tests2.UsageConstraintsTest.lessThan":60,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":150,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":335,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":430,"org.easymock.tests2.CaptureTest.testCaptureRightOne":141,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":406,"org.easymock.tests2.UsageConstraintsTest.testOr":52,"org.easymock.tests.UsageRangeTest.combination":279,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":89,"org.easymock.tests.UsageTest.wrongArguments":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":427,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":83,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":248,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":143,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":256,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":387,"org.easymock.tests.UsageVarargTest.varargShortAccepted":217,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":174,"org.easymock.tests2.UsageConstraintsTest.cmpTo":311,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":145,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":325,"org.easymock.tests2.CaptureTest.testCaptureFromStub":62,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":268,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":111,"org.easymock.tests.UsageTest.unexpectedCallWithArray":204,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":288,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":172,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":257,"org.easymock.tests2.UsageConstraintsTest.constraints":137,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":289,"org.easymock.samples.ExampleTest.addAndChangeDocument":300,"org.easymock.tests2.ConstraintsToStringTest.notToString":415,"org.easymock.tests.UsageStrictMockTest.testVerify":292,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":302,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":287,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":5,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":365,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":118,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":32,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":249,"org.easymock.tests.LimitationsTest.abstractClass":378,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":33,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":200,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":125,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":212,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":337}}]

[{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[0,1],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"answer":"answer"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:72","sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","type":"CtReturnImpl"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:37","sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","type":"CtInvocationImpl"},"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[38,39],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1988","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[40,41,42,43,44,45],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[46,47,48,49,50,51,52,53,54,55,56],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[57,58,59,60,61,62,63],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:340","sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[64],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.CompareTo:49","failures":[65,66,67,68,69],"status":-1,"binaryOperator":"(((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[57,58,59,60,61,62,63],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:109","sourceCode":"org.easymock.internal.Invocation.clearCaptures()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"actual":"invocation"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:56","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[21,23,29,30,33,37],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[70,71,72,73,46,47,74,48,75,49,50,76,51,77,78,79,80,81,82,83,84,85,52,86,87,88,89,53,90,91,54,92,55,93,94,95,96,97,98,99,56,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,37,123],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:43","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"equals\", new java.lang.Class[]{ java.lang.Object.java.lang.Object })","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[124,125,126,127,128,129,130,108,131,132,133,134,120,135],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[136],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[2,137,137,138,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,70,71,72,73,46,47,74,48,75,49,50,76,77,78,79,80,81,82,83,84,85,52,86,87,89,53,90,91,157,158,159,160,3,7,8,9,10,12,14,54,92,55,93,94,95,96,97,98,99,56,100,101,102,161,162,163,164,165,166,103,167,168,169,170,64,171,172,124,125,126,127,173,174,175,25,26,176,177,178,179,180,27,28,40,181,182,183,184,104,185,186,187,188,189,41,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,105,221,222,223,224,17,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,136,271,272,273,274,275,276,277,278,279,280,281,282,42,43,44,283,32,33,34,284,285,35,36,286,287,288,289,290,291,292,106,107,108,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,109,314,315,110,111,112,113,114,316,317,318,319,115,116,117,118,119,131,132,133,134,120,135,320,321,322,323,324,325,326,327,328,121,122,329,330,37,123,331,332,333,334,335],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[0],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"failures":[75],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"actual":"expected"}},{"position":"org.easymock.internal.Range:44","failures":[2,137,138,139,140,141,142,143,144,336,145,146,147,148,149,150,151,152,57,337,338,153,154,155,156,70,339,71,72,73,46,47,340,74,48,75,49,50,76,51,77,78,79,80,81,82,83,84,85,52,86,87,88,89,53,90,91,157,158,159,160,3,341,5,6,342,343,7,8,9,58,10,344,345,11,12,346,14,54,92,55,93,94,95,96,97,98,99,56,100,101,102,161,162,163,164,165,166,15,347,103,348,349,167,350,168,351,352,353,169,170,64,171,172,124,125,126,127,354,355,356,357,358,173,359,360,361,362,363,364,174,175,25,26,176,177,178,179,180,27,28,40,181,365,366,182,183,184,104,367,368,369,370,371,185,372,373,374,375,376,377,378,186,187,188,379,189,380,381,382,383,384,385,386,41,190,191,192,193,194,387,195,196,197,388,198,199,200,201,202,203,204,205,206,207,208,209,210,389,390,391,211,392,393,212,394,395,396,397,398,399,400,401,402,213,403,404,405,406,407,214,408,409,215,38,410,216,217,218,219,220,105,221,222,223,224,17,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,128,129,130,411,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,412,413,414,267,268,415,269,416,417,418,419,270,420,136,271,421,272,422,423,273,424,274,275,276,277,278,279,18,425,426,427,428,19,429,430,431,432,433,434,435,280,436,437,281,438,439,282,42,43,44,283,32,33,34,284,285,35,36,286,287,440,441,442,443,444,288,289,290,291,292,445,446,447,448,449,450,451,452,453,106,454,455,456,107,108,457,293,294,295,296,297,298,299,300,0,301,302,20,1,458,303,304,459,460,461,462,463,464,39,465,466,467,468,469,470,471,472,473,474,45,475,476,477,478,479,480,305,306,307,481,308,309,482,310,311,312,313,109,483,314,484,485,486,487,488,489,490,491,315,492,110,111,112,113,114,316,317,318,319,115,116,117,118,119,493,494,495,496,497,498,499,500,501,131,132,133,134,120,135,320,321,322,323,324,325,326,327,328,502,503,504,121,122,329,330,37,123,331,332,333,334,335,505,506,507],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[154,351,353],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:46","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>, java.lang.Byte.java.lang.Byte.valueOf(((byte)(0))))","type":"CtInvocationImpl"},"failures":[139,141,142,144,151,288,117],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:229","failures":[5,12,350,353,212],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[0],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:197","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[162,167,351,193,388],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[446,447,448,449,451,453],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"position":"org.easymock.EasyMock:1107","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1764","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[139,140,141,142,143,144,336,145,72,73,46,47,74,48,75,49,50,76,51,77,78,79,80,81,82,83,84,85,52,86,87,88,89,53,90,91,157,54,92,55,93,94,95,96,97,98,99,56,100,101,102,161,162,163,164,347,103,349,167,352,169,170,64,172,124,125,126,127,174,25,26,177,178,179,180,27,28,40,181,365,182,104,185,378,186,187,188,379,189,380,384,385,386,215,38,410,216,217,218,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,128,129,130,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,413,414,415,419,270,420,136,271,421,272,422,423,273,424,274,275,276,277,278,279,431,432,433,434,435,280,436,437,281,438,439,283,32,33,34,284,285,35,36,286,287,440,441,442,443,444,445,446,447,448,449,450,451,452,453,106,454,455,456,107,108,457,293,294,295,296,297,298,299,300,301,302,20,1,458,303,304,483,314,484,485,486,487,488,489,490,315,110,111,112,113,114,316,115,116,117,118,119,494,496,497,498,499,500,131,132,133,134,120,135,320,321,322,323,324,325,326,327,328,502,503,504,121,122,505,506,507],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1235","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:56","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"failures":[146,149,354,355,356,358,360,361,364,367,368,369,371,373,374,377],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[17,225,226,508],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:60","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:328","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1646","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(int[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:39","sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","type":"CtInvocationImpl"},"failures":[21,22,23,24,153,47,84,25,26,178,27,28,220,222,17,29,30,31,282,32,33,34,284,35,36,330,37,123,332,335],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Compare:53","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:39","sourceCode":"return int <= 0","type":"CtReturnImpl"},"failures":[69,72,46,84,89],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:44","failures":[],"status":0,"binaryOperator":"(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"failures":[137,138,152,57,341,342,58,345,509,346,510,511,512,348,17],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplantationPoint":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"failures":[440],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:180","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[10,18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:169","sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0)","type":"CtInvocationImpl"},"failures":[153,154,155,156,25,105,223,32,320,321,322,123,333],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:70","failures":[222,223,332,333],"status":-1,"binaryOperator":"(\"between \" + (int))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.AndroidClassProxyFactory:57","sourceCode":"java.io.IOException java.io.IOException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:102","sourceCode":"if (!boolean) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove();\n    throw new java.lang.IllegalStateException(java.lang.String);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":47,"org.easymock.tests2.UsageTest.argumentsOrdered":28,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":283,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":208,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":359,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":468,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":177,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":146,"org.easymock.tests2.DelegateToTest.testReturnException":186,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":132,"org.easymock.tests.MockingTest.testPartialClassMocking":267,"org.easymock.tests.MockClassControlTest.testToString":484,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":338,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":494,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":476,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":353,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":397,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":212,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":227,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":183,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":59,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":76,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":110,"org.easymock.tests2.UsageTest.wrongArguments":26,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":377,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":318,"org.easymock.samples.ExampleTest.answerVsDelegate":140,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":19,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":417,"org.easymock.tests2.UsageConstraintsTest.testNull":48,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":164,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":489,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":207,"org.easymock.tests2.CaptureTest.testPrimitive":93,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":114,"org.easymock.tests.UsageTest.moreThanOneArgument":32,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":246,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":163,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":277,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":440,"org.easymock.tests.UsageTest.argumentsOrdered":36,"org.easymock.tests.UsageVarargTest.varargIntAccepted":307,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":473,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":115,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":3,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":63,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":363,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":382,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":461,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":119,"org.easymock.tests.ReplayStateInvalidUsageTest.times":423,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":185,"org.easymock.tests2.DependencyTest.testClassMocking":365,"org.easymock.tests2.AnswerTest.answer":215,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":51,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":45,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":160,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":426,"org.easymock.tests2.CaptureTest.testAnd":54,"org.easymock.tests2.UsageTest.strictResetToDefault":175,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":167,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":342,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":276,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":43,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":202,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":444,"org.easymock.tests2.DelegateToTest.testDelegate":189,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":242,"org.easymock.tests.LimitationsTest.mockFinalMethod":492,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":120,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":292,"org.easymock.tests2.DependencyTest.testClassMockingSupport":366,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":437,"org.easymock.tests2.CaptureTest.testCapture1_2446744":94,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":347,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":240,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":158,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":420,"org.easymock.tests.UsageThrowableTest.throwError":293,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":428,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":411,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":364,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":279,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":510,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":409,"org.easymock.samples.PartialClassMockTest.testGetArea":2,"org.easymock.tests.MockingTest.testInterfaceMocking":415,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":136,"org.easymock.tests2.CompareToTest.testLessOrEqual":69,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":116,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":506,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":501,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":398,"org.easymock.tests2.UsageTest.niceToStrict":176,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":228,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":459,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":7,"org.easymock.tests2.MockBuilderTest.testCreateMock":11,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":405,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":374,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":21,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":236,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":203,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":425,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":456,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":323,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":316,"org.easymock.tests.UsageOverloadedMethodTest.overloading":303,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":407,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":402,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":434,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":81,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":458,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":258,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":80,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":99,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":481,"org.easymock.tests.MockClassControlTest.testEquals":488,"org.easymock.tests2.EasyMockSupportClassTest.testAll":211,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":302,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":22,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":244,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":159,"org.easymock.tests2.CaptureTest.testCaptureAll":92,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":290,"org.easymock.tests.MockNameTest.defaultName":457,"org.easymock.tests2.UsageConstraintsTest.testMatches":82,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":419,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":278,"org.easymock.samples.ExampleTest.voteForRemovals":144,"org.easymock.tests.UsageVarargTest.allKinds":109,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":320,"org.easymock.samples.BasicClassMockTest.testPrintContent":148,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":291,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":299,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":219,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":135,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":360,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":379,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":452,"org.easymock.tests2.UsageConstraintsTest.greaterThan":84,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":392,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":42,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":351,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":453,"org.easymock.samples.ExampleTest.voteForRemoval":141,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":170,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":352,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":429,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":383,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":15,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":174,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":287,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":345,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":465,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":200,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":295,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":390,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":131,"org.easymock.tests2.CaptureTest.testCaptureFirst":102,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":378,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":39,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":201,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":181,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":436,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":254,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":171,"org.easymock.tests2.CaptureTest.testCapture2_2446744":101,"org.easymock.tests2.UsageTest.moreThanOneArgument":25,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":475,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":12,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":313,"org.easymock.tests.GenericTest.testBridgedEquals":1,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":503,"org.easymock.tests.UsageExpectAndReturnTest.longType":250,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":198,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":288,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":13,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":245,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":439,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":88,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":243,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":129,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":275,"org.easymock.tests.UsageCallCountTest.tooManyCalls":504,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":325,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":406,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":255,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":376,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":232,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":298,"org.easymock.tests.MockingTest.testNiceClassMocking":418,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":192,"org.easymock.tests.MockingTest.testClassMocking":413,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":4,"org.easymock.tests2.UsageConstraintsTest.testContains":79,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":324,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":126,"org.easymock.tests2.UsageConstraintsTest.testFind":74,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":304,"org.easymock.tests.MockTypeTest.fromEasyMockClass":427,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":71,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":329,"org.easymock.tests.UsageExpectAndReturnTest.object":257,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":103,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":375,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":206,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":60,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":309,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":499,"org.easymock.tests.UsageTest.exactCallCountByLastCall":286,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":107,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":464,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":493,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":441,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":31,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":57,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":263,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":305,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":433,"org.easymock.tests.MockClassControlTest.testHashCode":487,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":355,"org.easymock.tests2.EasyMockSupportTest.testVerify":210,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":400,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":442,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":455,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":431,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":157,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":104,"org.easymock.tests.UsageVarargTest.varargCharAccepted":308,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":445,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":220,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":480,"org.easymock.tests2.UsageTest.openCallCountByLastCall":178,"org.easymock.tests.DefaultClassInstantiatorTest.object":446,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":209,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":454,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":497,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":401,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":234,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":296,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":370,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":354,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":486,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":350,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":233,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":264,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":128,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":485,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":214,"org.easymock.tests2.UsageTest.resumeIfFailure":40,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":18,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":381,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":134,"org.easymock.tests2.StubTest.stubWithReturnValue":190,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":58,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":89,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":256,"org.easymock.tests2.SerializationTest.testAllMockedMethod":226,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":474,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":512,"org.easymock.samples.SupportTest.voteForRemovals":151,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":23,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":357,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":239,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":508,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":479,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":38,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":495,"org.easymock.tests.UsageExpectAndThrowTest.object":237,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":86,"org.easymock.tests2.DelegateToTest.testWrongClass":188,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":121,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":122,"org.easymock.samples.ConstructorCalledMockTest.testTax":137,"org.easymock.tests.UsageStrictMockTest.range":332,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":385,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":205,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":191,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":238,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":9,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":424,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":389,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":35,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":317,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":29,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":507,"org.easymock.tests2.CaptureTest.testCaptureNone":98,"org.easymock.tests.UsageUnorderedTest.message":106,"org.easymock.tests.UsageVerifyTest.twoReturns":322,"org.easymock.tests.UsageVarargTest.varargByteAccepted":312,"org.easymock.tests2.ThreadingTest.testThreadSafe":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":403,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":328,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":500,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":147,"org.easymock.tests2.CaptureTest.testCapture_2617107":55,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":24,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":438,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":477,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":113,"org.easymock.tests2.UsageConstraintsTest.any":77,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":422,"org.easymock.tests2.StubTest.stub":41,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":130,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":478,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":133,"org.easymock.tests.UsageExpectAndThrowTest.longType":230,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":450,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":272,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":221,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":173,"org.easymock.tests2.SerializationTest.testClass":17,"org.easymock.tests.LimitationsTest.mockNativeMethod":315,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":20,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":266,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":369,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":224,"org.easymock.tests2.NameTest.nameForMocksControl":156,"org.easymock.tests2.MockedExceptionTest.testMockedException":125,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":393,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":285,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":231,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":269,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":339,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":161,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":10,"org.easymock.tests.MockingTest.testNicePartialClassMocking":268,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":166,"org.easymock.tests2.CaptureTest.testCaptureLast":97,"org.easymock.tests2.CompareToTest.testCompareEqual":67,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":367,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":281,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":50,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":197,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":87,"org.easymock.tests.MockingTest.testTwoMocks":414,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":388,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":247,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":235,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":27,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":90,"org.easymock.samples.ExampleTest.removeNonExistingDocument":336,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":271,"org.easymock.tests.UsageStrictMockTest.differentMethods":333,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":373,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":356,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":448,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":64,"org.easymock.tests2.MockBuilderTest.testCreateMockString":14,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":483,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":394,"org.easymock.tests.UsageExpectAndThrowTest.floatType":229,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":391,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":216,"org.easymock.tests.UsageVerifyTest.twoThrows":321,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":337,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":432,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":213,"org.easymock.samples.ExampleTest.voteAgainstRemoval":142,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":505,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":469,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":168,"org.easymock.tests.LimitationsTest.privateConstructor":491,"org.easymock.tests2.UsageConstraintsTest.testNotNull":53,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":124,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":300,"org.easymock.tests2.UsageTest.defaultResetToNice":180,"org.easymock.samples.ExampleTest.voteAgainstRemovals":139,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":470,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":262,"org.easymock.tests.UsageVarargTest.differentLength":482,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":368,"org.easymock.tests2.CallbackTest.callback":184,"org.easymock.tests2.UsageConstraintsTest.equals":340,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":348,"org.easymock.tests.UsageTest.openCallCountByLastCall":284,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":72,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":112,"org.easymock.tests.UsageCallCountTest.tooFewCalls":326,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":194,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":319,"org.easymock.tests.UsageThrowableTest.throwCheckedException":297,"org.easymock.tests.MockingTest.testStrictClassMocking":412,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":30,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":108,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":196,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":193,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":372,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":273,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":195,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":218,"org.easymock.tests.ObjectMethodsTest.testHashCode":498,"org.easymock.tests2.CompareToTest.testGreateOrEqual":68,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":62,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":172,"org.easymock.tests2.NameTest.nameForNiceMock":155,"org.easymock.tests2.DependencyTest.testInterfaceMocking":182,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":61,"org.easymock.samples.ExampleTest.addDocument":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":404,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":408,"org.easymock.tests2.DelegateToTest.testStubDelegate":187,"org.easymock.tests2.AnswerTest.stubAnswer":217,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":123,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":344,"org.easymock.tests.UsageVarargTest.varargLongAccepted":311,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":334,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":467,"org.easymock.tests.UsageExpectAndReturnTest.floatType":249,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":265,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":152,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":138,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":435,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":85,"org.easymock.tests.UsageThrowableTest.noUpperLimit":294,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":362,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":73,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":380,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":95,"org.easymock.tests2.SerializationTest.test":225,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":447,"org.easymock.tests2.UsageConstraintsTest.testSame":75,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":248,"org.easymock.samples.SupportTest.addDocument":150,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":387,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":421,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":395,"org.easymock.tests.GenericTest.testPackageScope":301,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":443,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":463,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":361,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":416,"org.easymock.tests2.NameTest.nameForMock":153,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":259,"org.easymock.tests2.UsageStrictMockTest.differentMethods":223,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":346,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":349,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":251,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":241,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":496,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":44,"org.easymock.tests2.MockedExceptionTest.testRealException":127,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":430,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":472,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":386,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":511,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":471,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":105,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":111,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":274,"org.easymock.tests2.NameTest.nameForStrictMock":154,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":343,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":70,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":165,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":384,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":449,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":52,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":5,"org.easymock.tests2.UsageStrictMockTest.range":222,"org.easymock.tests2.UsageConstraintsTest.lessThan":91,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":358,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":466,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":399,"org.easymock.tests2.CaptureTest.testCaptureRightOne":56,"org.easymock.tests2.UsageConstraintsTest.testOr":49,"org.easymock.tests.UsageRangeTest.combination":282,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":162,"org.easymock.tests.UsageTest.wrongArguments":34,"org.easymock.tests2.MockBuilderTest.testWithConstructor":341,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":396,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":314,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":252,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":460,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":260,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":451,"org.easymock.tests.UsageVarargTest.varargShortAccepted":310,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":502,"org.easymock.tests2.UsageConstraintsTest.cmpTo":78,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":410,"org.easymock.tests2.CompareToTest.testLessThan":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":462,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":179,"org.easymock.tests2.CaptureTest.testCaptureFromStub":100,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":270,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":6,"org.easymock.tests.UsageTest.unexpectedCallWithArray":33,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":37,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":327,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":509,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":261,"org.easymock.tests2.UsageConstraintsTest.constraints":46,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":331,"org.easymock.samples.ExampleTest.addAndChangeDocument":145,"org.easymock.tests.UsageStrictMockTest.testVerify":335,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":149,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":330,"org.easymock.tests2.CompareToTest.testGreateThan":66,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":289,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":96,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":117,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":16,"org.easymock.tests.LimitationsTest.abstractClass":490,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":253,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":118,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":280,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":204,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":306}}]

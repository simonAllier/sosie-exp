[{"position":"org.easymock.internal.ErrorMessage:50","failures":[0,1,2,3,4,5,6],"status":-1,"binaryOperator":"int == 1","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:235","failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:177","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[22],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[23],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int) == int","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"failures":[24,25,26,27,28,29],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:36","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>.getName(), java.lang.Character.java.lang.Class<java.lang.Character>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:174","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[30],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:228","sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:39","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[31,32],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[33,34,35,36],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:117","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[37,38],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method"}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[39],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:346","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[40,41,42,43],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:206","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"type":"org.easymock.MockType.STRICT","org.easymock.MockType.STRICT":"type"}},{"position":"org.easymock.internal.InjectionPlan:51","failures":[44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"status":-1,"binaryOperator":"(java.lang.String.length()) != 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"failures":[70,71],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.LastControl:92","failures":[72,73,74,75,76,77,78,79,80],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1277","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[72,73,74,75,76,77,78,79,80],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:72","sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","type":"CtReturnImpl"},"failures":[81,7,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,30,97],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:178","failures":[89,96],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1397","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"failures":[98,99,23],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:93","sourceCode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:381","sourceCode":"while (java.lang.Class<?> != null) {\n    for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n        final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n        if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n            java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[100,101],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[102,100,103,104,101,105],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.JavaProxyFactory:34","sourceCode":"return java.lang.reflect.Proxy.java.lang.reflect.Proxy.getInvocationHandler(java.lang.Object)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:165","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory().getInvocationHandler(java.lang.Object)","type":"CtReturnImpl"},"failures":[106],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:180","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[89,96],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:83","failures":[107,108,109,0,110,111,112,113,114,115,116,1,117,4,5,6],"status":-1,"binaryOperator":"java.lang.Object[] == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"qualifier","key":"qualifier"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:373","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[118],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[7,119,120,121],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[122,123,124,125,126,8,9,10,12,13,18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"paramType"}},{"position":"org.easymock.internal.ReflectionUtils:176","failures":[127,128,129,130,131,132,133,17],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":73,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":122,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":62,"org.easymock.tests2.UsageTest.argumentsOrdered":109,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":35,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":24,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":50,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":10,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":131,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":68,"org.easymock.tests2.SerializationTest.testAllMockedMethod":120,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":16,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":130,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":47,"org.easymock.tests2.DelegateToTest.testStubDelegate":22,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":121,"org.easymock.tests2.AnswerTest.stubAnswer":34,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":39,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":51,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":71,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":33,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":133,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":128,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":105,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":25,"org.easymock.tests2.UsageTest.wrongArguments":107,"org.easymock.tests.UsageStrictMockTest.range":1,"org.easymock.samples.ConstructorCalledMockTest.testTax":20,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":67,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":17,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":94,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":21,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":30,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":53,"org.easymock.tests2.SerializationTest.test":119,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":11,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":88,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":23,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":100,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":114,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":27,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":36,"org.easymock.tests.UsageUnorderedTest.message":4,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":117,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":42,"org.easymock.tests.UsageVerifyTest.twoReturns":6,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":91,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":52,"org.easymock.tests.UsageTest.argumentsOrdered":115,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":41,"org.easymock.tests2.CaptureTest.testCapture_2617107":79,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":132,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":82,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":92,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":54,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":13,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":87,"org.easymock.tests2.StubTest.stub":70,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":98,"org.easymock.tests2.SerializationTest.testClass":7,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":49,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":61,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":95,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":76,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":118,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":28,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":58,"org.easymock.tests2.CaptureTest.testAnd":78,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":66,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":9,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":15,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":60,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":38,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":83,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":43,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":89,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":127,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":56,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":123,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":104,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":2,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":75,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":77,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":84,"org.easymock.tests.MockingTest.testTwoMocks":106,"org.easymock.tests2.UsageStrictMockTest.range":0,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":65,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":124,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":129,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":26,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":48,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":40,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":63,"org.easymock.tests2.CaptureTest.testCaptureRightOne":80,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":46,"org.easymock.tests2.UsageConstraintsTest.testOr":74,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":18,"org.easymock.tests.UsageTest.wrongArguments":113,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":103,"org.easymock.tests2.MockBuilderTest.testWithConstructor":8,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":55,"org.easymock.tests2.MockBuilderTest.testCreateMockString":93,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":45,"org.easymock.tests.UsageVerifyTest.twoThrows":5,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":101,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":14,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":125,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":110,"org.easymock.samples.PartialClassMockTest.testGetArea":97,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":126,"org.easymock.tests.DefaultClassInstantiatorTest.object":102,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":86,"org.easymock.tests2.MockBuilderTest.testCreateMock":90,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":37,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":29,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":57,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":85,"org.easymock.tests.UsageTest.unexpectedCallWithArray":112,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":111,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":19,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":64,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":116,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":12,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":59,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":44,"org.easymock.tests2.CaptureTest.testCapture":31,"org.easymock.tests2.UsageConstraintsTest.constraints":72,"org.easymock.tests.CapturesMatcherTest.test":32,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":99,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":69,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":81,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":96,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":3}}]

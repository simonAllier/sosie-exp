[{"transplant":{"position":"org.easymock.EasyMock:1191","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:213","sourceCode":"return org.easymock.internal.RecordState.createNumberObject(java.lang.Object, java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,102,103,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:213","sourceCode":"return true","type":"CtReturnImpl"},"failures":[177,178],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[179],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:45","sourceCode":"java.lang.StringBuffer.append(\"[\")","type":"CtInvocationImpl"},"failures":[180,181,182,183,184,185],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:173","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[70],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:90","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[186,187,188],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[189,33],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:301","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[174],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[5,190,191,192,193,194,195,196,80,197],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"failures":[198,199,69,200,71,76,88,201,202,203,204,205,206,116,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,159,162,167,171,172,230],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[231],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:249","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"cls"}},{"position":"org.easymock.internal.LastControl:94","failures":[18,19,20,21,22,23,24,25,232,26,35,36,39,40,45,46,233,47,52,53],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Injector:62","sourceCode":"final org.easymock.internal.InjectionPlan org.easymock.internal.InjectionPlan = new org.easymock.internal.InjectionPlan()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:54","sourceCode":"try {\n    return java.lang.reflect.Constructor<?>.newInstance(java.lang.Object[]);\n} catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalArgumentException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Matches:40","failures":[234],"status":-1,"binaryOperator":"((\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:364","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[235,236],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:162","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[237],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":19,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":159,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":67,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":204,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":187,"org.easymock.tests2.StubTest.stubWithReturnValue":88,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":195,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":38,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":148,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":202,"org.easymock.tests.MockingTest.testPartialClassMocking":174,"org.easymock.samples.SupportTest.voteForRemovals":104,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":181,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":177,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":222,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":210,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":13,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":237,"org.easymock.tests.UsageExpectAndThrowTest.object":220,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":36,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":100,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":190,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":164,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":165,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":25,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":127,"org.easymock.samples.ConstructorCalledMockTest.testTax":102,"org.easymock.tests.UsageStrictMockTest.range":118,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":64,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":81,"org.easymock.tests2.UsageConstraintsTest.testNull":21,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":221,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":92,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":66,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":43,"org.easymock.tests2.CaptureTest.testPrimitive":47,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":129,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":229,"org.easymock.tests.UsageTest.moreThanOneArgument":160,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":91,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":134,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":183,"org.easymock.tests2.CaptureTest.testCaptureNone":50,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":126,"org.easymock.tests.UsageVerifyTest.twoReturns":131,"org.easymock.tests2.ThreadingTest.testThreadSafe":8,"org.easymock.tests2.CaptureTest.testCapture_2617107":233,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":109,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":209,"org.easymock.tests2.UsageConstraintsTest.any":26,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":113,"org.easymock.tests.UsageExpectAndThrowTest.longType":213,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":203,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":56,"org.easymock.tests2.SerializationTest.testClass":5,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":7,"org.easymock.tests.LimitationsTest.mockNativeMethod":124,"org.easymock.tests2.AnswerTest.answer":0,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":138,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":158,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":232,"org.easymock.tests2.CaptureTest.testAnd":45,"org.easymock.tests2.UsageTest.strictResetToDefault":72,"org.easymock.tests2.MockedExceptionTest.testMockedException":199,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":133,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":61,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":122,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":162,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":214,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":176,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":89,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":44,"org.easymock.tests.MockingTest.testNicePartialClassMocking":175,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":225,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":94,"org.easymock.tests2.CaptureTest.testCaptureLast":49,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":205,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":87,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":24,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":37,"org.easymock.tests2.CaptureTest.testCapture1_2446744":48,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":139,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":223,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":218,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":40,"org.easymock.tests.UsageThrowableTest.throwError":166,"org.easymock.tests.UsageStrictMockTest.differentMethods":119,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":188,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":10,"org.easymock.tests.UsageExpectAndThrowTest.floatType":212,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":136,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":14,"org.easymock.samples.PartialClassMockTest.testGetArea":101,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":110,"org.easymock.samples.ExampleTest.voteAgainstRemoval":107,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":97,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":211,"org.easymock.tests2.UsageTest.niceToStrict":74,"org.easymock.tests2.UsageConstraintsTest.testNotNull":39,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":198,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":172,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":42,"org.easymock.tests2.UsageTest.defaultResetToNice":77,"org.easymock.samples.ExampleTest.voteAgainstRemovals":105,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":154,"org.easymock.tests.UsageTest.openCallCountByLastCall":161,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":219,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":180,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":62,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":16,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":208,"org.easymock.tests.UsageOverloadedMethodTest.overloading":115,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":207,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":30,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":84,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":114,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":150,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":29,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":51,"org.easymock.tests.UsageThrowableTest.throwCheckedException":169,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":227,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":184,"org.easymock.tests2.CaptureTest.testCaptureAll":46,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":230,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":86,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":83,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":186,"org.easymock.tests2.UsageConstraintsTest.testMatches":31,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":85,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":135,"org.easymock.samples.ExampleTest.voteForRemovals":108,"org.easymock.tests2.ConstraintsToStringTest.matchesToString":234,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":12,"org.easymock.tests2.DependencyTest.testInterfaceMocking":99,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":130,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":192,"org.easymock.tests2.DelegateToTest.testStubDelegate":70,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":171,"org.easymock.tests2.AnswerTest.stubAnswer":1,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":206,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":117,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":194,"org.easymock.tests2.UsageConstraintsTest.greaterThan":33,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":121,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":98,"org.easymock.samples.ExampleTest.voteForRemoval":106,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":9,"org.easymock.tests.UsageExpectAndReturnTest.floatType":141,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":157,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":231,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":80,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":103,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":34,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":71,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":17,"org.easymock.tests2.SerializationTest.test":6,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":196,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":59,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":167,"org.easymock.tests2.UsageConstraintsTest.testSame":22,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":140,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":201,"org.easymock.tests2.CaptureTest.testCaptureFirst":55,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":179,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":60,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":79,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":146,"org.easymock.tests.GenericTest.testPackageScope":137,"org.easymock.tests2.UsageTest.moreThanOneArgument":73,"org.easymock.tests2.CaptureTest.testCapture2_2446744":54,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":11,"org.easymock.tests.GenericTest.testBridgedEquals":178,"org.easymock.tests.UsageExpectAndReturnTest.longType":142,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":57,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":228,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":151,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":226,"org.easymock.tests2.UsageStrictMockTest.differentMethods":4,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":132,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":143,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":224,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":123,"org.easymock.tests2.MockedExceptionTest.testRealException":200,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":147,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":215,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":2,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":128,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":170,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":82,"org.easymock.tests2.UsageConstraintsTest.testContains":28,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":69,"org.easymock.tests2.UsageConstraintsTest.testFind":20,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":116,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":93,"org.easymock.tests.UsageExpectAndReturnTest.object":149,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":35,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":95,"org.easymock.tests2.UsageStrictMockTest.range":3,"org.easymock.tests2.UsageConstraintsTest.lessThan":41,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":65,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":191,"org.easymock.tests.UsageTest.exactCallCountByLastCall":163,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":173,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":193,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":58,"org.easymock.tests2.CaptureTest.testCaptureRightOne":52,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":236,"org.easymock.tests2.UsageConstraintsTest.testOr":23,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":197,"org.easymock.tests.UsageRangeTest.combination":120,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":90,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":155,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":144,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":235,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":152,"org.easymock.tests2.UsageConstraintsTest.cmpTo":27,"org.easymock.tests2.UsageTest.openCallCountByLastCall":75,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":76,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":68,"org.easymock.tests2.CaptureTest.testCaptureFromStub":53,"org.easymock.tests.UsageTest.unexpectedCallWithArray":185,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":217,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":168,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":182,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":153,"org.easymock.tests2.UsageConstraintsTest.constraints":18,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":96,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":216,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":156,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":15,"org.easymock.tests2.CompareToTest.testGreateThan":189,"org.easymock.tests2.UsageTest.resumeIfFailure":78,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":111,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":145,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":112,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":125,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":63}}]

[{"transplantationPoint":{"position":"org.easymock.internal.LastControl:73","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[319,320,321,322,323,324,325,326,327,30,31,32,33,34,35,38,39,42,43,48,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,108,109,110,111,112,113,116,140,141,147,159,161,162,166,167,328,329,330,331,332,173,174,175,176,177,178,179,180,181,182,183,184,188,190,191,192,193,194,195,196,197,198,199,201,202,203,204,205,206,207,208,209,210,211,212,214,215,216,217,218,219,220,221,222,333,223,224,225,227,228,231,232,233,234,236,237,334,335,238,239,243,252,253,255,256,258,260,261,262,264,266,267,268,271,272,273,274,278,282,283,284,285,286,287,289,291,292,293,294,295,296,297,298,299,300,302,310,312,313,315,316,317,318],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[336,142,274,277,279,280,281,303],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Compare:53","failures":[207],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:120","sourceCode":"return ((java.lang.String)(java.util.Properties.remove(java.lang.String)))","type":"CtReturnImpl"},"failures":[289,337,338,290,291,292,293,339,340,294,295,296,297,299,300],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[341,224,226,227,228,229,230,231,233,342,234,235,237],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:126","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[246],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[343,344,345,346,0,1,44,114,186,187,188,189,302],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[319,320,321,322,323,324,325,326,327,30,31,32,33,34,35,38,39,42,43,48,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,108,109,110,111,112,113,116,140,141,147,159,161,162,166,167,328,329,330,331,332,173,174,175,176,177,178,179,180,181,182,183,184,188,190,191,192,193,194,195,196,197,198,199,201,202,203,204,205,206,207,208,209,210,211,212,214,215,216,217,218,219,220,221,222,333,223,224,225,227,228,231,232,233,234,236,237,334,335,238,239,243,252,253,255,256,258,260,261,262,264,266,267,268,271,272,273,274,278,282,283,284,285,286,287,289,291,292,293,294,295,296,297,298,299,300,302,310,312,313,315,316,317,318],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:92","sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[347,253,291,292],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[348,349,350,351,352],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:336","sourceCode":"org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:61","sourceCode":"throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int))","type":"CtThrowImpl"},"failures":[353],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[354,355,356,357],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[204],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:208","sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:45","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>, java.lang.Boolean.java.lang.Boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:358","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[32,34,35,38,39,42,50,61,62,65,67,68,69,70,72,73,74,75,77,78,79,80,86,88,108,109,110,111,113,116,147,159,161,162,328,329,330,331,332,190,191,192,194,195,196,197,201,203,205,206,207,208,209,215,216,217,219,220,221,225,228,231,232,236,237,243,258,260,262,266,267,271,272,274,278,302,310,312,313],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Equals:53","failures":[40,358,269],"status":-1,"binaryOperator":"(java.lang.Object == null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"failures":[358],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:80","sourceCode":"return org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType())","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:57","sourceCode":"try {\n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.IMocksBehavior.addActual(org.easymock.internal.Invocation);\n    try {\n        return org.easymock.internal.Result.answer();\n    } catch (final java.lang.Throwable java.lang.Throwable) {\n        if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n            throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n        } \n        throw java.lang.Throwable;\n    }\n} finally {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation();\n}","type":"CtTryImpl"},"failures":[319,359,360,361,362,363,364,365,320,321,336,322,323,366,324,367,325,368,327,343,344,345,346,0,1,4,6,7,11,24,25,26,27,28,29,31,32,34,35,36,37,38,39,40,41,42,43,44,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,108,112,113,114,115,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,140,141,156,157,158,159,160,161,162,173,174,175,176,177,178,179,181,182,183,184,185,188,190,191,192,193,194,195,196,197,198,199,201,202,203,204,205,206,207,208,209,210,211,212,214,215,216,217,218,219,220,221,222,333,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,334,335,238,239,240,242,243,244,246,253,255,256,258,259,260,261,262,263,264,265,266,267,269,270,272,273,274,277,278,279,280,369,281,282,284,285,286,287,289,292,294,295,296,297,298,299,300,302,303,308,309,310,311,312,313,315,316,317,318],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[370,371,372,35,36,37,40,41,158,373,374,375,376,262,263,269,270],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:144","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findGenericDeclaration(java.lang.reflect.Method)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[319,362,362,363,363,320,321,336,322,323,324,367,377,378,379,380,381,325,326,327,343,344,345,346,0,1,4,11,24,25,26,27,28,29,30,31,32,33,34,35,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,147,149,150,151,159,161,162,165,166,167,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,187,188,189,190,191,192,193,194,195,196,197,198,199,201,202,203,204,205,206,207,208,209,210,211,212,214,215,216,217,218,219,220,221,222,333,223,224,225,227,228,231,232,233,234,235,236,237,334,335,238,239,241,242,243,244,245,246,252,253,255,256,258,260,261,262,264,266,267,268,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,289,291,292,293,294,295,296,297,298,299,300,301,302,303,310,312,313,315,316,317,318],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"failures":[192,234],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[25,26,27,28,29,81,82,83,84,85,112,113,116,140,141,159,348,349,350,351,352,190,205,208,209,217,302,310],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String)","type":"CtInvocationImpl"},"failures":[382,383,384,11,35,37,40,41,86,87,88,158,159,161,162,262,263,269,270,304,305,306,307,310,312,313],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:48","sourceCode":"java.lang.StringBuffer.append(\", \")","type":"CtInvocationImpl"},"failures":[370,371,158,373,375],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":193,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":34,"org.easymock.tests2.UsageTest.argumentsOrdered":270,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":183,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":265,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":361,"org.easymock.tests2.DelegateToTest.testReturnException":242,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":344,"org.easymock.tests.MockingTest.testPartialClassMocking":58,"org.easymock.tests.MockClassControlTest.testToString":102,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":33,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":340,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":352,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":119,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":316,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":382,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":335,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":199,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":112,"org.easymock.tests2.UsageTest.wrongArguments":263,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":154,"org.easymock.samples.ExampleTest.answerVsDelegate":336,"org.easymock.tests2.UsageConstraintsTest.testNull":195,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":285,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":182,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":107,"org.easymock.tests2.CaptureTest.testPrimitive":227,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":116,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":138,"org.easymock.tests.UsageTest.moreThanOneArgument":35,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":284,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":27,"org.easymock.tests.UsageTest.argumentsOrdered":41,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":377,"org.easymock.tests.UsageVarargTest.varargIntAccepted":91,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":81,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":251,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":254,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":85,"org.easymock.tests.ReplayStateInvalidUsageTest.times":20,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":223,"org.easymock.tests2.AnswerTest.answer":274,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":200,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":250,"org.easymock.tests2.CaptureTest.testAnd":224,"org.easymock.tests2.UsageTest.strictResetToDefault":261,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":290,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":26,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":177,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":110,"org.easymock.tests2.DelegateToTest.testDelegate":246,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":381,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":134,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":0,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":117,"org.easymock.tests2.CaptureTest.testCapture1_2446744":228,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":132,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":248,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":14,"org.easymock.tests.UsageThrowableTest.throwError":48,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":29,"org.easymock.samples.PartialClassMockTest.testGetArea":319,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":15,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":82,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":166,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":120,"org.easymock.tests2.UsageTest.niceToStrict":264,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":348,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":253,"org.easymock.tests2.MockBuilderTest.testCreateMock":257,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":128,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":373,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":178,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":47,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":2,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":152,"org.easymock.tests.UsageOverloadedMethodTest.overloading":31,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":145,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":205,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":30,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":72,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":204,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":233,"org.easymock.tests.MockClassControlTest.testEquals":106,"org.easymock.tests2.EasyMockSupportClassTest.testAll":315,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":368,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":136,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":374,"org.easymock.tests2.CaptureTest.testCaptureAll":225,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":249,"org.easymock.tests2.UsageConstraintsTest.testMatches":206,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":28,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":12,"org.easymock.samples.ExampleTest.voteForRemovals":324,"org.easymock.tests.UsageVarargTest.allKinds":99,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":86,"org.easymock.samples.BasicClassMockTest.testPrintContent":360,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":54,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":308,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":1,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":245,"org.easymock.tests2.UsageConstraintsTest.greaterThan":208,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":109,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":293,"org.easymock.samples.ExampleTest.voteForRemoval":322,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":220,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":339,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":288,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":24,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":260,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":175,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":50,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":343,"org.easymock.tests2.CaptureTest.testCaptureFirst":237,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":241,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":176,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":272,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":148,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":68,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":222,"org.easymock.tests2.CaptureTest.testCapture2_2446744":236,"org.easymock.tests2.UsageTest.moreThanOneArgument":262,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":258,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":98,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":9,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":353,"org.easymock.tests.UsageExpectAndReturnTest.longType":64,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":173,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":137,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":139,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":213,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":135,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":150,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":25,"org.easymock.tests.UsageCallCountTest.tooManyCalls":10,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":4,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":69,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":124,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":53,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":295,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":3,"org.easymock.tests2.UsageConstraintsTest.testContains":203,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":347,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":188,"org.easymock.tests2.UsageConstraintsTest.testFind":194,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":32,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":156,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":281,"org.easymock.tests.UsageExpectAndReturnTest.object":71,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":289,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":181,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":93,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":170,"org.easymock.tests.UsageTest.exactCallCountByLastCall":42,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":43,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":350,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":378,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":372,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":77,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":89,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":144,"org.easymock.tests.MockClassControlTest.testHashCode":105,"org.easymock.tests2.EasyMockSupportTest.testVerify":185,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":379,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":142,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":46,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":247,"org.easymock.tests.UsageVarargTest.varargCharAccepted":92,"org.easymock.tests2.CaptureTest.testCaptureMultiple":341,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":309,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":332,"org.easymock.tests2.UsageTest.openCallCountByLastCall":266,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":184,"org.easymock.tests.DefaultClassInstantiatorTest.object":56,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":45,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":168,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":126,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":51,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":104,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":291,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":125,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":78,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":149,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":103,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":318,"org.easymock.tests2.UsageTest.resumeIfFailure":271,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":346,"org.easymock.tests2.StubTest.stubWithReturnValue":302,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":70,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":214,"org.easymock.tests2.SerializationTest.testAllMockedMethod":240,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":171,"org.easymock.samples.SupportTest.voteForRemovals":320,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":375,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":131,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":172,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":275,"org.easymock.tests.UsageExpectAndThrowTest.object":129,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":211,"org.easymock.tests2.DelegateToTest.testWrongClass":244,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":140,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":141,"org.easymock.tests.UsageStrictMockTest.range":161,"org.easymock.samples.ConstructorCalledMockTest.testTax":362,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":180,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":294,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":130,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":255,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":40,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":22,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":153,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":370,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":167,"org.easymock.tests2.CaptureTest.testCaptureNone":232,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":355,"org.easymock.tests.UsageUnorderedTest.message":11,"org.easymock.tests.UsageVerifyTest.twoReturns":88,"org.easymock.tests.UsageVarargTest.varargByteAccepted":97,"org.easymock.tests2.ThreadingTest.testThreadSafe":219,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":7,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":359,"org.easymock.tests2.CaptureTest.testCapture_2617107":226,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":376,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":115,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":330,"org.easymock.tests2.UsageConstraintsTest.any":201,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":19,"org.easymock.tests2.StubTest.stub":301,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":151,"org.easymock.tests.UsageExpectAndThrowTest.longType":122,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":331,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":345,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":18,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":311,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":218,"org.easymock.tests2.SerializationTest.testClass":238,"org.easymock.tests.LimitationsTest.mockNativeMethod":327,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":80,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":326,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":314,"org.easymock.tests2.NameTest.nameForMocksControl":307,"org.easymock.tests2.MockedExceptionTest.testMockedException":187,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":39,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":123,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":60,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":369,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":282,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":256,"org.easymock.tests.MockingTest.testNicePartialClassMocking":59,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":287,"org.easymock.tests2.CaptureTest.testCaptureLast":231,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":118,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":198,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":300,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":212,"org.easymock.tests.MockingTest.testTwoMocks":57,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":61,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":127,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":269,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":216,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":357,"org.easymock.tests.UsageStrictMockTest.differentMethods":162,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":16,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":221,"org.easymock.tests2.MockBuilderTest.testCreateMockString":259,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":100,"org.easymock.tests.UsageExpectAndThrowTest.floatType":121,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":207,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":277,"org.easymock.tests.UsageVerifyTest.twoThrows":87,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":317,"org.easymock.samples.ExampleTest.voteAgainstRemoval":323,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":165,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":329,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":292,"org.easymock.tests2.UsageConstraintsTest.testNotNull":215,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":186,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":55,"org.easymock.tests2.UsageTest.defaultResetToNice":268,"org.easymock.samples.ExampleTest.voteAgainstRemovals":321,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":76,"org.easymock.tests.UsageVarargTest.differentLength":94,"org.easymock.tests2.CallbackTest.callback":303,"org.easymock.tests2.UsageConstraintsTest.equals":358,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":337,"org.easymock.tests.UsageTest.openCallCountByLastCall":38,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":190,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":114,"org.easymock.tests.UsageCallCountTest.tooFewCalls":5,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":297,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":155,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":356,"org.easymock.tests.UsageThrowableTest.throwCheckedException":52,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":371,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":44,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":299,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":296,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":21,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":298,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":279,"org.easymock.tests.ObjectMethodsTest.testHashCode":169,"org.easymock.tests2.NameTest.nameForNiceMock":306,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":333,"org.easymock.tests2.DependencyTest.testInterfaceMocking":334,"org.easymock.samples.ExampleTest.addDocument":366,"org.easymock.tests2.DelegateToTest.testStubDelegate":243,"org.easymock.tests2.AnswerTest.stubAnswer":278,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":159,"org.easymock.tests.UsageVarargTest.varargLongAccepted":96,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":163,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":328,"org.easymock.tests.UsageExpectAndReturnTest.floatType":63,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":79,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":273,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":363,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":146,"org.easymock.tests.UsageThrowableTest.noUpperLimit":49,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":209,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":191,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":229,"org.easymock.tests2.SerializationTest.test":239,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":62,"org.easymock.tests2.UsageConstraintsTest.testSame":196,"org.easymock.samples.SupportTest.addDocument":365,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":17,"org.easymock.tests.GenericTest.testPackageScope":325,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":380,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":349,"org.easymock.tests2.NameTest.nameForMock":304,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":73,"org.easymock.tests2.UsageStrictMockTest.differentMethods":313,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":338,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":65,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":133,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":111,"org.easymock.tests2.MockedExceptionTest.testRealException":189,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":351,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":310,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":113,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":23,"org.easymock.tests2.NameTest.nameForStrictMock":305,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":280,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":286,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":210,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":383,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":252,"org.easymock.tests2.UsageStrictMockTest.range":312,"org.easymock.tests2.UsageConstraintsTest.lessThan":217,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":174,"org.easymock.tests2.CaptureTest.testCaptureRightOne":234,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":354,"org.easymock.tests2.UsageConstraintsTest.testOr":197,"org.easymock.tests.UsageRangeTest.combination":108,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":283,"org.easymock.tests.UsageTest.wrongArguments":37,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":101,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":66,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":74,"org.easymock.tests.UsageVarargTest.varargShortAccepted":95,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":8,"org.easymock.tests2.UsageConstraintsTest.cmpTo":202,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":276,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":267,"org.easymock.tests2.CaptureTest.testCaptureFromStub":235,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":13,"org.easymock.tests.UsageTest.unexpectedCallWithArray":36,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":158,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":6,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":75,"org.easymock.tests2.CaptureTest.testCapture":342,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":160,"org.easymock.tests2.UsageConstraintsTest.constraints":192,"org.easymock.samples.ExampleTest.addAndChangeDocument":367,"org.easymock.tests.UsageStrictMockTest.testVerify":164,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":364,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":157,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":230,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":83,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":67,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":147,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":84,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":384,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":179,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":90}}]

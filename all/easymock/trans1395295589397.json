[{"transplant":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:93","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:137","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[15,16,17,18,19,20,21,22,23,24,25,26],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[27],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1554","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","type":"CtInvocationImpl"},"failures":[28,29,27],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"failures":[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,28,29,46,47,48,49,50,27,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,15,66,16,17,19,20,21,67,22,24,26,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,0,86,87,1,2,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,6,7,8,147,148,149,150,151,152,153,154,155,156,157,158,159,11,160,161,13,14,162,163],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[164,165,68],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:120","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[38,39,40,166,166,167,167,45,57,168,169,170,171,61,172,62,63,173,174,175,68,70,89,90,91,92,94,95,99,100,102,103,104,176,105,177,178,106,179,108,109,110,111,180,117,118,119,120,121,181,122,148],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"type":"searchType"}},{"position":"org.easymock.EasyMock:853","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MocksControl:136","failures":[38,39,40,166,166,167,167,182,183,45,184,185,57,186,169,170,171,187,61,172,62,63,164,173,174,175,68,70,89,90,91,92,94,95,99,100,102,103,104,176,105,188,189,177,178,106,179,190,191,192,193,194,195,196,197,198,108,199,200,109,201,202,203,204,205,206,207,208,209,110,210,211,212,213,214,111,215,216,217,218,180,117,118,119,219,220,120,121,181,221,222,223,122,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,148],"status":-1,"binaryOperator":"org.easymock.internal.IProxyFactory != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:146","sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","type":"CtTryImpl"},"failures":[38,39,40,166,166,167,167,182,183,45,184,185,57,186,169,170,171,187,61,172,62,63,164,173,174,175,68,70,89,90,91,92,94,95,99,100,102,103,104,176,105,188,189,177,178,106,179,190,191,192,193,194,195,196,197,198,108,199,200,109,201,202,203,204,205,206,207,208,209,110,210,211,212,213,214,111,215,216,217,218,180,117,118,119,219,220,120,121,181,221,222,223,122,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,148],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cached":"org.easymock.internal.MocksControl.classProxyFactory"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[181],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1093","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:235","failures":[166,167,57,186,242,243,244,164,245,246,247,248,165,68,188],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[249,250,251],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:345","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:120","sourceCode":"return ((java.lang.String)(java.util.Properties.remove(java.lang.String)))","type":"CtReturnImpl"},"failures":[252,253,105,188,189,177,178,106,179,190,191],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:178","failures":[63,233],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1531","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MocksBehavior:200","failures":[254],"status":-1,"binaryOperator":"(((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ClassProxyFactory:191","failures":[38,39,40,166,167,182,183,45,57,186,255,169,242,170,171,243,187,61,172,62,244,63,164,173,174,246,175,68,70,89,90,91,92,94,95,99,100,102,103,104,176,105,188,189,177,178,106,179,190,191,192,195,196,197,108,200,109,201,202,203,205,206,207,208,110,210,211,212,213,214,111,217,218,180,117,118,119,219,220,120,121,181,221,222,223,122,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,148],"status":-1,"binaryOperator":"org.easymock.ConstructorArgs != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:35","sourceCode":"java.lang.StringBuffer.append(\"null\")","type":"CtInvocationImpl"},"failures":[256,257,258,259],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:70","failures":[30,31,32,33,34,35,260,261,36,37,38,39,40,41,42,166,166,167,167,262,263,254,44,264,265,266,267,268,28,269,270,271,272,29,46,273,47,48,274,49,275,276,50,277,278,27,51,52,53,54,279,280,281,55,56,58,15,66,16,17,18,19,20,21,67,22,24,25,282,26,283,105,284,285,286,287,288,289,290,291,138,292,293,294,153,295,9,11,296,297,298],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[256,257,299,258,5,11],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[300],"status":-1,"binaryOperator":"(int <= int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:330","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[301,302,303],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[68,69,70,304],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[43,305,306,307],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[49],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[91,308,100,177,179],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.EasyMock:1940","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[309,283,3,310,311,312,313,314,315,9,296,12,316,317,13,14],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[266,267,269,270,271,272,274,275,276,277,278,279,280,281,318,283,285,287,288,289,290,291,292,293,295,296,297,298],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.RecordState:315","failures":[182,183,45,319,318,84,320,321,322,323,324,284,325,286,326,327,112,113,328,114,329,330,331,332,115,333,334,335,336,116,337,338,339,340,141,145,146,341,342,294,153,157,343],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:436","sourceCode":"java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"failures":[30,31,32,33,35,261,40,42,166,166,167,167,262,263,254,43,44,182,183,45,319,264,265,266,267,268,28,269,270,271,272,29,46,47,48,274,49,275,276,50,277,278,27,51,52,54,279,280,281,55,56,57,59,249,344,60,250,345,170,61,62,63,174,346,64,347,65,348,349,15,66,17,18,21,67,22,24,25,282,26,68,69,350,318,71,72,73,74,75,76,77,351,78,79,80,81,352,83,84,85,309,86,353,320,354,355,88,89,90,91,92,93,94,95,283,3,310,99,100,101,102,103,104,105,178,106,179,107,108,109,110,111,321,322,323,324,284,325,285,286,326,327,112,113,328,114,329,330,331,332,115,333,334,335,336,116,337,338,339,340,117,118,119,120,181,287,288,289,290,291,122,356,357,123,124,358,125,359,360,361,362,126,363,364,365,366,127,367,368,369,370,371,372,373,374,375,376,377,378,379,300,139,140,141,142,143,144,145,146,380,381,382,301,302,303,341,315,383,342,147,148,384,292,293,294,153,295,154,9,385,386,387,388,389,390,391,392,155,156,157,158,393,296,12,316,317,13,14,297,298,162,163,343,394,395],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:193","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isArray()) {\n        final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n                return false;\n            } \n            break;\n        } \n    } \n    if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[38,39,40,166,166,167,167,182,183,45,57,186,396,168,397,398,399,400,401,169,402,170,171,187,61,172,62,63,164,173,174,403,404,175,68,70,89,90,91,92,94,95,99,100,102,103,104,176,105,188,189,177,178,106,179,190,191,192,195,196,197,198,108,199,200,109,201,202,203,204,205,206,207,208,209,110,210,211,212,213,214,111,215,216,217,218,180,117,118,119,219,220,120,121,181,221,222,223,122,224,225,226,227,228,229,230,231,232,233,234,405,235,236,237,238,239,240,241,148],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"result","paramTypes":"paramTypes","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":28,"org.easymock.tests2.UsageTest.argumentsOrdered":2,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":341,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":80,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":87,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":36,"org.easymock.tests2.DelegateToTest.testReturnException":64,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":322,"org.easymock.tests.MockingTest.testPartialClassMocking":117,"org.easymock.tests.MockClassControlTest.testToString":227,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":388,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":191,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":204,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":109,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":326,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":311,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":56,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":46,"org.easymock.tests2.UsageTest.wrongArguments":0,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":292,"org.easymock.samples.ExampleTest.answerVsDelegate":31,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":234,"org.easymock.tests2.UsageConstraintsTest.testNull":270,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":102,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":79,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":232,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":396,"org.easymock.tests2.CaptureTest.testPrimitive":17,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":295,"org.easymock.tests.UsageTest.moreThanOneArgument":315,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":340,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":101,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":373,"org.easymock.tests.UsageTest.argumentsOrdered":8,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":376,"org.easymock.tests.UsageVarargTest.varargIntAccepted":131,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":287,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":169,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":194,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":172,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":291,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":107,"org.easymock.tests2.DependencyTest.testClassMocking":184,"org.easymock.tests2.AnswerTest.answer":59,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":273,"org.easymock.tests2.CaptureTest.testAnd":15,"org.easymock.tests2.UsageTest.strictResetToDefault":85,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":177,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":243,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":372,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":391,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":75,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":300,"org.easymock.tests2.DelegateToTest.testDelegate":349,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":116,"org.easymock.tests.LimitationsTest.mockFinalMethod":224,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":284,"org.easymock.tests2.DependencyTest.testClassMockingSupport":185,"org.easymock.tests2.CaptureTest.testCapture1_2446744":18,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":253,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":335,"org.easymock.tests.UsageThrowableTest.throwError":139,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":375,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":216,"org.easymock.samples.PartialClassMockTest.testGetArea":40,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":288,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":381,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":405,"org.easymock.tests2.UsageTest.niceToStrict":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":205,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":327,"org.easymock.tests2.ThreadingTest.testChangeDefault":252,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":61,"org.easymock.tests2.MockBuilderTest.testCreateMock":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":212,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":256,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":332,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":76,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":387,"org.easymock.tests.UsageOverloadedMethodTest.overloading":163,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":209,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":214,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":157,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":275,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":162,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":363,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":49,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":22,"org.easymock.tests2.EasyMockSupportClassTest.testAll":108,"org.easymock.tests.MockClassControlTest.testEquals":231,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":121,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":338,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":168,"org.easymock.tests2.CaptureTest.testCaptureAll":66,"org.easymock.tests2.UsageConstraintsTest.testMatches":276,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":374,"org.easymock.samples.ExampleTest.voteForRemovals":35,"org.easymock.tests.UsageVarargTest.allKinds":138,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":317,"org.easymock.samples.BasicClassMockTest.testPrintContent":39,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":145,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":325,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":348,"org.easymock.tests2.UsageConstraintsTest.greaterThan":277,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":199,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":390,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":179,"org.easymock.samples.ExampleTest.voteForRemoval":32,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":241,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":190,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":263,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":403,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":176,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":148,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":84,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":164,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":73,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":141,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":197,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":321,"org.easymock.tests2.CaptureTest.testCaptureFirst":26,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":346,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":251,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":74,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":88,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":10,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":360,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":43,"org.easymock.tests2.CaptureTest.testCapture2_2446744":282,"org.easymock.tests2.UsageTest.moreThanOneArgument":309,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":174,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":137,"org.easymock.tests.GenericTest.testBridgedEquals":221,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":151,"org.easymock.tests.UsageExpectAndReturnTest.longType":124,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":71,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":404,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":339,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":393,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":53,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":337,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":302,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":371,"org.easymock.tests.UsageCallCountTest.tooManyCalls":152,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":384,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":213,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":361,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":114,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":144,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":90,"org.easymock.tests.MockingTest.testNiceClassMocking":219,"org.easymock.tests.MockingTest.testClassMocking":218,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":402,"org.easymock.tests2.UsageConstraintsTest.testContains":274,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":45,"org.easymock.tests2.UsageConstraintsTest.testFind":269,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":343,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":265,"org.easymock.tests.UsageExpectAndReturnTest.object":126,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":105,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":78,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":133,"org.easymock.tests.UsageTest.exactCallCountByLastCall":147,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":285,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":306,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":377,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":186,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":129,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":367,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":156,"org.easymock.tests.MockClassControlTest.testHashCode":230,"org.easymock.tests2.EasyMockSupportTest.testVerify":82,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":207,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":378,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":386,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":155,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":58,"org.easymock.tests.UsageVarargTest.varargCharAccepted":132,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":96,"org.easymock.tests2.UsageTest.openCallCountByLastCall":353,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":81,"org.easymock.tests.DefaultClassInstantiatorTest.object":235,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":385,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":4,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":208,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":330,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":400,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":142,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":178,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":229,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":329,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":368,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":301,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":111,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":228,"org.easymock.tests2.UsageTest.resumeIfFailure":355,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":233,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":193,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":324,"org.easymock.tests2.StubTest.stubWithReturnValue":318,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":244,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":54,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":362,"org.easymock.tests2.SerializationTest.testAllMockedMethod":70,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":394,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":165,"org.easymock.samples.SupportTest.voteForRemovals":42,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":257,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":220,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":334,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":304,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":395,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":249,"org.easymock.tests.UsageExpectAndThrowTest.object":115,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":307,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":51,"org.easymock.tests2.DelegateToTest.testWrongClass":65,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":297,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":298,"org.easymock.samples.ConstructorCalledMockTest.testTax":166,"org.easymock.tests.UsageStrictMockTest.range":12,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":351,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":89,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":333,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":62,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":7,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":196,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":299,"org.easymock.tests2.CaptureTest.testCaptureNone":67,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":382,"org.easymock.tests.UsageUnorderedTest.message":9,"org.easymock.tests.UsageVerifyTest.twoReturns":14,"org.easymock.tests.UsageVarargTest.varargByteAccepted":136,"org.easymock.tests2.ThreadingTest.testThreadSafe":262,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":210,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":150,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":38,"org.easymock.tests2.CaptureTest.testCapture_2617107":16,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":153,"org.easymock.tests2.UsageConstraintsTest.any":47,"org.easymock.tests2.StubTest.stub":350,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":303,"org.easymock.tests.UsageExpectAndThrowTest.longType":113,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":323,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":239,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":97,"org.easymock.tests2.SerializationTest.testClass":68,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":83,"org.easymock.tests.LimitationsTest.mockNativeMethod":122,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":181,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":370,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":399,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":98,"org.easymock.tests2.MockedExceptionTest.testMockedException":183,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":200,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":342,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":119,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":328,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":99,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":63,"org.easymock.tests.MockingTest.testNicePartialClassMocking":118,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":104,"org.easymock.tests2.CaptureTest.testCaptureLast":21,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":154,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":29,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":95,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":52,"org.easymock.tests.MockingTest.testTwoMocks":180,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":308,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":356,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":331,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":1,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":280,"org.easymock.samples.ExampleTest.removeNonExistingDocument":260,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":128,"org.easymock.tests.UsageStrictMockTest.differentMethods":316,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":237,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":254,"org.easymock.tests2.MockBuilderTest.testCreateMockString":175,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":225,"org.easymock.tests.UsageExpectAndThrowTest.floatType":112,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":201,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":198,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":60,"org.easymock.tests.UsageVerifyTest.twoThrows":13,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":255,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":110,"org.easymock.samples.ExampleTest.voteAgainstRemoval":33,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":380,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":106,"org.easymock.tests.LimitationsTest.privateConstructor":223,"org.easymock.tests2.UsageConstraintsTest.testNotNull":279,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":182,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":146,"org.easymock.tests2.UsageTest.defaultResetToNice":354,"org.easymock.samples.ExampleTest.voteAgainstRemovals":30,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":127,"org.easymock.tests2.CallbackTest.callback":352,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":188,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":259,"org.easymock.tests.UsageTest.openCallCountByLastCall":383,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":266,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":294,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":92,"org.easymock.tests.UsageThrowableTest.throwCheckedException":143,"org.easymock.tests.MockingTest.testStrictClassMocking":217,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":258,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":94,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":286,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":91,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":93,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":345,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":44,"org.easymock.tests2.DependencyTest.testInterfaceMocking":55,"org.easymock.samples.ExampleTest.addDocument":34,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":211,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":215,"org.easymock.tests2.DelegateToTest.testStubDelegate":347,"org.easymock.tests2.AnswerTest.stubAnswer":250,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":296,"org.easymock.tests.UsageVarargTest.varargLongAccepted":135,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":161,"org.easymock.tests.UsageExpectAndReturnTest.floatType":123,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":369,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":57,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":167,"org.easymock.tests.UsageThrowableTest.noUpperLimit":140,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":278,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":267,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":192,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":19,"org.easymock.tests2.SerializationTest.test":69,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":236,"org.easymock.tests2.UsageConstraintsTest.testSame":271,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":357,"org.easymock.samples.SupportTest.addDocument":41,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":305,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":202,"org.easymock.tests.GenericTest.testPackageScope":120,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":379,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":364,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":246,"org.easymock.tests2.UsageStrictMockTest.differentMethods":310,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":189,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":358,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":336,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":392,"org.easymock.tests2.MockedExceptionTest.testRealException":319,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":248,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":283,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":293,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":187,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":264,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":103,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":195,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":27,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":238,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":312,"org.easymock.tests.ErrorMessageTest.testGetters":313,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":170,"org.easymock.tests2.UsageStrictMockTest.range":3,"org.easymock.tests2.UsageConstraintsTest.lessThan":281,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":397,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":401,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":72,"org.easymock.tests2.CaptureTest.testCaptureRightOne":24,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":206,"org.easymock.tests2.UsageConstraintsTest.testOr":272,"org.easymock.tests.UsageRangeTest.combination":389,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":100,"org.easymock.tests.UsageTest.wrongArguments":6,"org.easymock.tests2.MockBuilderTest.testWithConstructor":242,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":203,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":226,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":125,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":365,"org.easymock.tests.UsageVarargTest.varargShortAccepted":134,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":240,"org.easymock.tests2.UsageConstraintsTest.cmpTo":48,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":344,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":320,"org.easymock.tests2.CaptureTest.testCaptureFromStub":25,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":171,"org.easymock.tests.UsageTest.unexpectedCallWithArray":5,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":11,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":149,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":245,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":366,"org.easymock.tests2.CaptureTest.testCapture":23,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":160,"org.easymock.tests2.UsageConstraintsTest.constraints":268,"org.easymock.samples.ExampleTest.addAndChangeDocument":261,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":37,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":159,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":20,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":398,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":289,"org.easymock.tests.LimitationsTest.abstractClass":222,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":359,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":158,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":290,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":130,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":77,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":314}}]

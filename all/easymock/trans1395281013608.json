[{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.matchers.Any:40","sourceCode":"java.lang.StringBuffer.append(\"<any>\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:68","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,4,70,71,11,72,73,74,75,76,77,78,79,80,19,20,81,82,83,84,85,86,87],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:77","failures":[88,89],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:153","failures":[90,91,92,93,94,95,96,97,73,98,80,83],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[5,6,99,100,101,102,103,104,21,22,105,106,107,108,109,110,111,112],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[45,50,60,65],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[113,114,115,116,116,117,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,68,137,138,139,140,141,142,143,92,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:225","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[136,168,144,149],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1495","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"failures":[136,149],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[67,169],"status":-1,"binaryOperator":"int < 0","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:98","failures":[42,57,122,123,125,126,170,171,172,0,1,173,174,2,3,175,176,132,137,140,168,177,4,178,5,6,179,180,181,182,183,184,185,7,8,9,10,186,187,188,144,146,147,150,151,152,153,155,11,156,189,190,157,191,192,193,194,195,196,197,15,198,16,17,18,199,200,201,19,20,202,21,22,203,204,205,206,207,208,209,23,24,25,210,211,212,213,214,215,216,217,218,219],"status":-1,"binaryOperator":"(java.lang.String) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"answer":"answer"}},{"position":"org.easymock.EasyMock:866","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[113,220,221,222,223,224,225,26,27,28,29,30,33,34,35,36,38,39,118,226,227,228,229,230,231,120,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,121,122,123,124,232,125,126,233,234,235,170,127,128,129,130,172,236,0,173,237,238,239,175,176,131,132,240,133,134,135,68,138,139,140,241,242,243,69,244,4,5,6,245,246,247,180,248,181,249,182,183,250,184,185,251,252,186,187,92,146,148,150,151,153,253,254,255,256,99,257,258,259,100,101,260,102,261,262,103,263,264,265,266,267,268,269,270,271,272,273,274,158,73,197,15,275,276,199,161,162,163,200,277,278,279,74,75,76,77,78,79,80,20,21,22,164,280,281,282,23,24,25,283,284,285,212,81,82,85,286,287,288,289,108,290,291,292,109,110,293,111,294,295,112,296,297,298,299,300,86,87],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[106],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:311","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:167","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[301,164,165,166,302],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:44","sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","type":"CtThrowImpl"},"failures":[42,57,172,1,173,174,2,3,175,176,132,138,140,243,177,178,5,6,180,182,183,185,186,146,152,153,155,11,193,197,198,16,17,18,199,200,201,19,202,21,22,207,208,209,24,25],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:75","sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,15,16,17,18,19,20,21,22,23,24,25],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[303,304,305,306,198,19],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:48","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.specification.version\")","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:110","sourceCode":"return ((org.easymock.internal.Invocation.(getMockAndMethodName()) + \"(\") + org.easymock.internal.ArgumentToString.(org.easymock.internal.ArgumentToString.argumentsToString(java.lang.Object[]))) + \")\"","type":"CtReturnImpl"},"failures":[1,2,3,5,6,155,11,198,16,17,18,307,308,19,21,22,24,25,213],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1361","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[234,235],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","failures":[118,309,310,311,312,313,127,314,315,128,316,317,318,319,320,321,322,323,324,129,325,326,327,328,329,130,330,331,332,333,334,335,336,89,337],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[118,226,119,338],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:48","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.specification.version\")","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[339,340],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:53","sourceCode":"return true","type":"CtReturnImpl"},"failures":[26,27,28,29,30,31,32,33,34,35,36,37,38,39,341],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1445","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:159","failures":[116,117,342,343,344,345,346],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[301],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"mock"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[118,226,119,338],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[1,2,3,5,11,347,198,16,17,18,19,21,24,25,213],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:37","failures":[348,220,221,222,223,349,224,350,351,225,114,115,352,26,27,33,34,36,39,118,226,227,228,229,230,353,231,43,45,47,48,65,233,354,234,170,172,236,0,173,174,237,238,175,176,132,134,139,241,242,243,244,355,4,178,5,6,179,245,246,247,180,248,181,249,182,183,184,185,251,252,186,187,148,150,151,253,254,255,256,99,257,258,259,100,101,260,102,261,262,103,263,264,265,266,267,268,356,269,270,271,272,273,274,11,357,358,359,360,361,362,363,364,365,72,94,95,96,97,73,98,366,367,368,369,370,197,15,275,276,199,74,75,76,77,78,79,371,20,202,21,22,203,165,280,281,282,23,24,25,283,284,285,81,82,83,84,85,286,287,288,289,108,290,291,292,109,110,293,111,294,295,112,296,297,298,299,300,86,87],"status":-1,"binaryOperator":"(this.java.lang.Object) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:190","failures":[26,27,29,30,33,34,35,36,37,38,39,118,226,231,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,233,170,172,236,0,173,237,238,239,175,176,132,134,68,138,139,140,241,242,243,244,4,5,6,245,246,247,180,248,181,249,182,183,250,184,185,251,252,187,92,148,257,258,259,260,102,261,262,103,268,269,270,271,272,273,274,368,370,197,15,275,276,199,200,277,278,279,77,372,79,20,21,22,281,282,23,25,212,373,374,81,82,85,375],"status":-1,"binaryOperator":"(java.lang.Object instanceof java.lang.Number)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[5,6,99,100,101,102,103,104,21,22,105,106,107,108,109,110,111,112],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":43,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":197,"org.easymock.tests2.UsageTest.argumentsOrdered":3,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":251,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":97,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":188,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":174,"org.easymock.tests2.StubTest.stubWithReturnValue":231,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":348,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":64,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":101,"org.easymock.tests2.SerializationTest.testAllMockedMethod":119,"org.easymock.tests2.DelegateToTest.testReturnException":227,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":95,"org.easymock.tests.MockingTest.testPartialClassMocking":161,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":304,"org.easymock.samples.SupportTest.voteForRemovals":225,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":301,"org.easymock.tests.MockClassControlTest.testToString":194,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":372,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":294,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":168,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":319,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":338,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":286,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":128,"org.easymock.tests.UsageExpectAndThrowTest.object":293,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":12,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":246,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":61,"org.easymock.tests2.DelegateToTest.testWrongClass":229,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":86,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":87,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":49,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":81,"org.easymock.tests2.UsageTest.wrongArguments":1,"org.easymock.tests.UsageStrictMockTest.range":21,"org.easymock.samples.ConstructorCalledMockTest.testTax":116,"org.easymock.samples.ExampleTest.answerVsDelegate":221,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":250,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":121,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":157,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":333,"org.easymock.tests2.UsageConstraintsTest.testNull":45,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":111,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":133,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":150,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":185,"org.easymock.tests2.CaptureTest.testPrimitive":29,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":85,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":311,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":300,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":17,"org.easymock.tests.UsageTest.moreThanOneArgument":15,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":240,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":368,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":305,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":374,"org.easymock.tests2.CaptureTest.testCaptureNone":34,"org.easymock.tests.UsageUnorderedTest.message":11,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":307,"org.easymock.tests.UsageVerifyTest.twoReturns":25,"org.easymock.tests.UsageVarargTest.varargByteAccepted":364,"org.easymock.tests2.ThreadingTest.testThreadSafe":241,"org.easymock.tests.UsageTest.argumentsOrdered":18,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":105,"org.easymock.tests.UsageVarargTest.varargIntAccepted":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":325,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":217,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":114,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":74,"org.easymock.tests2.CaptureTest.testCapture_2617107":28,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":144,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":84,"org.easymock.tests2.UsageConstraintsTest.any":51,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":149,"org.easymock.tests2.StubTest.stub":353,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":78,"org.easymock.tests.UsageExpectAndThrowTest.longType":289,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":96,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":178,"org.easymock.tests2.SerializationTest.testClass":118,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":187,"org.easymock.tests.LimitationsTest.mockNativeMethod":158,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":170,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":267,"org.easymock.tests2.AnswerTest.answer":233,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":166,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":50,"org.easymock.tests2.CaptureTest.testAnd":26,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":143,"org.easymock.tests2.UsageTest.strictResetToDefault":236,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":137,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":179,"org.easymock.tests2.NameTest.nameForMocksControl":10,"org.easymock.tests2.MockedExceptionTest.testMockedException":91,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":367,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":315,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":278,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":249,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":276,"org.easymock.tests2.DelegateToTest.testDelegate":230,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":107,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":108,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":163,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":131,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":151,"org.easymock.tests.MockingTest.testNicePartialClassMocking":162,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":296,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":135,"org.easymock.tests2.CaptureTest.testCaptureLast":33,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":73,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":215,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":48,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":126,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":62,"org.easymock.tests.MockingTest.testTwoMocks":160,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":214,"org.easymock.tests2.CaptureTest.testCapture1_2446744":30,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":253,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":295,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":109,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":2,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":66,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":339,"org.easymock.tests.UsageThrowableTest.throwError":268,"org.easymock.tests.UsageStrictMockTest.differentMethods":22,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":190,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":243,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":308,"org.easymock.tests2.MockBuilderTest.testCreateMockString":155,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":370,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":316,"org.easymock.tests.UsageExpectAndThrowTest.floatType":288,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":313,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":354,"org.easymock.tests.UsageVerifyTest.twoThrows":24,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":210,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":331,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":129,"org.easymock.samples.PartialClassMockTest.testGetArea":113,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":75,"org.easymock.samples.ExampleTest.voteAgainstRemoval":223,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":373,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":139,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":320,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":287,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":218,"org.easymock.tests2.UsageTest.niceToStrict":173,"org.easymock.tests2.ThreadingTest.testChangeDefault":340,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":88,"org.easymock.tests2.UsageConstraintsTest.testNotNull":65,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":274,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":90,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":89,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":148,"org.easymock.tests2.UsageTest.defaultResetToNice":239,"org.easymock.tests2.MockBuilderTest.testCreateMock":152,"org.easymock.samples.ExampleTest.voteAgainstRemovals":220,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":263,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":327,"org.easymock.tests.UsageVarargTest.differentLength":193,"org.easymock.tests2.CallbackTest.callback":186,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":342,"org.easymock.tests.UsageTest.openCallCountByLastCall":275,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":303,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":110,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":182,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":40,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":204,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":83,"org.easymock.tests.UsageCallCountTest.tooFewCalls":206,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":334,"org.easymock.tests.UsageOverloadedMethodTest.overloading":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":329,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":324,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":285,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":55,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":280,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":102,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":124,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":54,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":35,"org.easymock.tests.UsageThrowableTest.throwCheckedException":271,"org.easymock.tests2.EasyMockSupportClassTest.testAll":127,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":165,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":306,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":298,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":141,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":345,"org.easymock.tests2.CaptureTest.testCaptureAll":27,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":80,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":125,"org.easymock.tests.MockNameTest.defaultName":219,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":123,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":171,"org.easymock.tests2.UsageConstraintsTest.testMatches":56,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":232,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":235,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":369,"org.easymock.samples.ExampleTest.voteForRemovals":224,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":244,"org.easymock.tests2.NameTest.nameForNiceMock":9,"org.easymock.tests.UsageVarargTest.allKinds":72,"org.easymock.tests2.DependencyTest.testInterfaceMocking":245,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":23,"org.easymock.samples.BasicClassMockTest.testPrintContent":115,"org.easymock.samples.ExampleTest.addDocument":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":326,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":330,"org.easymock.tests2.DelegateToTest.testStubDelegate":228,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":273,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":177,"org.easymock.tests2.AnswerTest.stubAnswer":234,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":98,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":20,"org.easymock.tests2.UsageConstraintsTest.greaterThan":58,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":314,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":277,"org.easymock.tests.UsageVarargTest.varargLongAccepted":363,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":140,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":203,"org.easymock.samples.ExampleTest.voteForRemoval":222,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":242,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":266,"org.easymock.tests.UsageExpectAndReturnTest.floatType":255,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":191,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":120,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":136,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":117,"org.easymock.tests.UsageThrowableTest.noUpperLimit":356,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":211,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":59,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":41,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":167,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":172,"org.easymock.tests2.SerializationTest.test":226,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":31,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":337,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":248,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":269,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":254,"org.easymock.tests2.UsageConstraintsTest.testSame":46,"org.easymock.samples.SupportTest.addDocument":351,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":312,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":94,"org.easymock.tests2.CaptureTest.testCaptureFirst":39,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":181,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":176,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":213,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":259,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":317,"org.easymock.tests.GenericTest.testPackageScope":164,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":69,"org.easymock.tests2.UsageTest.moreThanOneArgument":0,"org.easymock.tests2.CaptureTest.testCapture2_2446744":38,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":106,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":153,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":365,"org.easymock.tests.GenericTest.testBridgedEquals":302,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":335,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":332,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":208,"org.easymock.tests2.NameTest.nameForMock":7,"org.easymock.tests.UsageExpectAndReturnTest.longType":256,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":247,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":299,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":261,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":154,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":375,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":63,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":346,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":297,"org.easymock.tests2.UsageStrictMockTest.differentMethods":6,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":366,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":99,"org.easymock.tests.UsageCallCountTest.tooManyCalls":209,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":112,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":279,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":328,"org.easymock.tests2.MockedExceptionTest.testRealException":93,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":192,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":100,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":290,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":4,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":272,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":82,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":122,"org.easymock.tests2.UsageConstraintsTest.testContains":53,"org.easymock.tests2.NameTest.nameForStrictMock":8,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":145,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":92,"org.easymock.tests2.UsageConstraintsTest.testFind":44,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":282,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":310,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":70,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":134,"org.easymock.tests.MockTypeTest.fromEasyMockClass":189,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":201,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":71,"org.easymock.tests.UsageExpectAndReturnTest.object":260,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":60,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":13,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":68,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":146,"org.easymock.tests2.UsageStrictMockTest.range":5,"org.easymock.tests2.UsageConstraintsTest.lessThan":67,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":184,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":361,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":336,"org.easymock.tests.UsageTest.exactCallCountByLastCall":199,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":79,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":104,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":321,"org.easymock.tests2.CaptureTest.testCaptureRightOne":36,"org.easymock.tests2.UsageConstraintsTest.testOr":47,"org.easymock.tests.UsageRangeTest.combination":200,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":357,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":264,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":132,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":284,"org.easymock.tests.UsageTest.wrongArguments":16,"org.easymock.tests2.MockBuilderTest.testWithConstructor":343,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":318,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":159,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":257,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":262,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":322,"org.easymock.tests.UsageVarargTest.varargShortAccepted":362,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":283,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":207,"org.easymock.tests2.UsageConstraintsTest.cmpTo":52,"org.easymock.tests.UsageVarargTest.varargCharAccepted":360,"org.easymock.tests2.CompareToTest.testLessThan":169,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":355,"org.easymock.tests2.UsageTest.openCallCountByLastCall":237,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":238,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":309,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":252,"org.easymock.tests2.CaptureTest.testCaptureFromStub":37,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":147,"org.easymock.tests.UsageTest.unexpectedCallWithArray":198,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":216,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":347,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":323,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":292,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":270,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":19,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":344,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":103,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":202,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":196,"org.easymock.tests2.UsageConstraintsTest.constraints":42,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":138,"org.easymock.samples.ExampleTest.addAndChangeDocument":350,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":291,"org.easymock.tests.CapturesMatcherTest.test":341,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":265,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":352,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":371,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":195,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":130,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":32,"org.easymock.tests2.UsageTest.resumeIfFailure":175,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":76,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":142,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":258,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":156,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":212,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":77,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":358,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":14,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":183}}]

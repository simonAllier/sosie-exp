[{"position":"org.easymock.internal.matchers.CompareTo:42","failures":[0],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:122","sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:45","sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"actual","myArgument":"actual"}},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"failures":[1],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:357","sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"position":"org.easymock.internal.LastControl:95","failures":[2,3,4,5,6,7,8,9,10,11,12],"status":-1,"binaryOperator":"int < int","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:128","sourceCode":"final java.lang.String java.lang.String = org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(org.easymock.EasyMock.java.lang.String)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:98","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[13,14],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[15,16],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[17,18,19,20],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"failures":[21,22,23,24],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Equals:53","failures":[25,26,27],"status":-1,"binaryOperator":"(java.lang.Object == null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[28,29,25,30,31,32,33,34,35,36,37,38,26,39,40],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.Find:41","failures":[41],"status":-1,"binaryOperator":"(\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[21,22,42,43],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"failures":[44,45,46,1,47,48,49],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:89","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[50],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"m","bridgeMethod":"m"}},{"transplant":{"position":"org.easymock.internal.RecordState:251","sourceCode":"java.lang.Class<?> java.lang.Class<?> = this.org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:212","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"lastInvocation":"lastInvocation"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[51,52,13,53],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:71","failures":[54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,18,72,73,74],"status":-1,"binaryOperator":"(this.java.util.Set<java.lang.reflect.Method>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:334","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","type":"CtInvocationImpl"},"failures":[75,76,77,78,79,80,81,33,82,83,84,85,86,87,88,21,52,22,13,89,90,91,92,93,94,95,96,97],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:920","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"toStringMethod","method":"toStringMethod"}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[13,14],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:622","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[98,99],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[2,3,4,5,6,7,8,9,10,11,12],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:116","failures":[],"status":0,"binaryOperator":"((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\")","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[100],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:47","sourceCode":"java.lang.StringBuffer.append(((((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol())) + \" 0\"))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:172","failures":[55,63],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:133","failures":[101,102,103],"status":-1,"binaryOperator":"java.lang.ClassLoader == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:44","sourceCode":"new java.util.ArrayList<org.easymock.internal.matchers.Captures<?>>(0)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:310","sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:152","sourceCode":"boolean boolean = true","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:91","sourceCode":"java.lang.StringBuilder.append(\", \")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[100],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","failures":[44,45,46,104,105,106,1,48,107,108,18,109,110,111,112,113,114,115,116,72,117,118,119,120,121,122,123,124,125,73,126,127,128,129,130,74,131,132,133,134,100],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:108","sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"failures":[18,19,20],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"equalsMethod"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:71","sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:72","sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mockedMethods":"mockedMethods"}},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:355","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[135,136],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[137],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:318","failures":[138,139],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[46,104,105,1,48,107,108,110,133,134,100],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:665","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:35","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(short.short, java.lang.Short.java.lang.Short)","type":"CtInvocationImpl"},"failures":[140],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1928","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"result"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:746","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Float>(float))","type":"CtInvocationImpl"},"failures":[51],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":3,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":133,"org.easymock.tests2.UsageTest.argumentsOrdered":39,"org.easymock.tests2.CompareToTest.testGreateOrEqual":53,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":105,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":42,"org.easymock.tests2.SerializationTest.testAllMockedMethod":20,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":137,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":15,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":131,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":71,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":120,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":17,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":72,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":76,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":140,"org.easymock.tests2.UsageConstraintsTest.greaterThan":22,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":115,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":23,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":90,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":51,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":86,"org.easymock.tests2.UsageTest.wrongArguments":38,"org.easymock.samples.ConstructorCalledMockTest.testTax":44,"org.easymock.tests.UsageStrictMockTest.range":37,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":109,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":68,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":45,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":55,"org.easymock.tests2.UsageConstraintsTest.testNull":4,"org.easymock.tests2.SerializationTest.test":19,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":106,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":111,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":25,"org.easymock.tests.UsageTest.moreThanOneArgument":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":112,"org.easymock.tests2.CaptureTest.testCaptureFirst":97,"org.easymock.tests2.CaptureTest.testCaptureNone":96,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":102,"org.easymock.tests.UsageUnorderedTest.message":33,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":118,"org.easymock.tests2.UsageTest.moreThanOneArgument":88,"org.easymock.tests.UsageVerifyTest.twoReturns":35,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":135,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":66,"org.easymock.tests2.ThreadingTest.testThreadSafe":89,"org.easymock.tests.UsageTest.argumentsOrdered":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":126,"org.easymock.tests.GenericTest.testBridgedEquals":16,"org.easymock.tests2.CaptureTest.testCapture_2617107":11,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":58,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":80,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":84,"org.easymock.tests2.UsageConstraintsTest.any":99,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":48,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":62,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":79,"org.easymock.tests2.SerializationTest.testClass":18,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":56,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":7,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":129,"org.easymock.tests2.CaptureTest.testAnd":10,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":116,"org.easymock.tests2.DelegateToTest.testDelegate":93,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":64,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":81,"org.easymock.tests2.CompareToTest.testNotComparable":0,"org.easymock.tests2.CaptureTest.testCaptureLast":95,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":134,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":8,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":6,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":59,"org.easymock.tests2.UsageStrictMockTest.range":40,"org.easymock.tests2.UsageConstraintsTest.lessThan":13,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":100,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":82,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":98,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":26,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":50,"org.easymock.tests.UsageThrowableTest.throwError":138,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":122,"org.easymock.tests2.CaptureTest.testCaptureRightOne":12,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":101,"org.easymock.tests2.ConstraintsToStringTest.findToString":41,"org.easymock.tests2.UsageConstraintsTest.testOr":5,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":110,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":85,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":103,"org.easymock.tests.UsageTest.wrongArguments":29,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":91,"org.easymock.tests2.MockBuilderTest.testWithConstructor":46,"org.easymock.tests2.MockBuilderTest.testCreateMockString":67,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":119,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":123,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":136,"org.easymock.tests.UsageVerifyTest.twoThrows":34,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":132,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":73,"org.easymock.samples.PartialClassMockTest.testGetArea":57,"org.easymock.tests2.CompareToTest.testLessOrEqual":43,"org.easymock.tests2.CompareToTest.testLessThan":14,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":70,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":121,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":108,"org.easymock.tests2.UsageConstraintsTest.testNotNull":9,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":61,"org.easymock.tests2.MockBuilderTest.testCreateMock":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":128,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":60,"org.easymock.tests2.CallbackTest.callback":92,"org.easymock.tests.UsageTest.unexpectedCallWithArray":28,"org.easymock.tests2.UsageConstraintsTest.equals":27,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":31,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":49,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":124,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":139,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":36,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":21,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":1,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":130,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":125,"org.easymock.tests2.UsageConstraintsTest.constraints":2,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":69,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":77,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":52,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":74,"org.easymock.tests2.CompareToTest.testGreateThan":24,"org.easymock.tests2.EasyMockSupportClassTest.testAll":114,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":54,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":83,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":47,"org.easymock.tests2.CaptureTest.testCaptureAll":94}}]

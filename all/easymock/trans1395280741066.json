[{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:148","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:194","sourceCode":"return false","type":"CtReturnImpl"},"failures":[1,2,3,4,5,6,7],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","shouldBeUsedInOneThread":"shouldBeUsedInOneThread"}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:162","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[8],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"delegateTo"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[9,10,11],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[6,12,13,14,15,16,7,17,18,19,20],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"transplant":{"position":"org.easymock.EasyMock:708","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:71","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[21],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksControl:190","failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[41,64],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"failures":[65,66],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"qualifier"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:117","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:115","sourceCode":"java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int])","type":"CtAssignmentImpl"},"failures":[68,69],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:93","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:666","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:920","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[70,22,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,23,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,8,105,106,107,108,109,110,111,112,113,114,115,116,117,118,68,119,120,121,69,122,123,124,125,126,127,24,128,129,130,131,132,133,134,135,136,137,138,139,140,25,141,142,143,144,145,146,147,148,26,149,150,151,152,27,28,153,154,155,156,157,158,159,160,161,162,163,164,165,29,30,166,31,32,33,34,35,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,36,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,21,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,65,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,6,37,313,314,315,66,316,317,318,319,320,321,322,323,38,324,325,326,39,40,327,328,329,330,331,332,333,41,334,64,335,336,337,42,43,338,44,339,340,45,341,342,343,344,345,46,47,48,346,49,347,348,349,350,50,351,51,352,52,53,353,354,54,55,56,355,356,357,12,358,359,360,13,361,362,363,364,365,366,367,368,369,370,371,372,373,374,57,375,376,377,378,379,380,381,382,383,384,385,386,58,59,387,388,389,390,60,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,61,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,62,450,451,452,453,454,455,456,457,458,459,460,63,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:188","sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:73","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"failures":[489],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"this.org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"threadSafe"}},{"position":"org.easymock.internal.MockBuilder:205","failures":[216,219,221,223,312,6,490,328,365,15,366,367,16,368,369,370,371,7,372,491,373,374,57,18,375,376,430,440,446,454,457,460,63,463,477,478,479],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocationAndResults:46","sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","type":"CtReturnImpl"},"failures":[70,22,71,24,150,151,27,28,200,202,205,36,273,325,39,40,385,386,390,60,400,401,402,403],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[78],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:83","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[70,22,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,23,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,8,105,106,107,108,109,110,111,112,113,114,115,116,117,492,118,68,119,120,121,69,493,122,123,124,125,126,127,24,128,129,130,131,132,133,134,135,136,137,138,139,140,25,141,142,143,144,145,146,147,148,26,149,150,151,152,27,28,153,154,155,156,157,158,159,160,161,162,163,164,165,29,30,166,31,32,33,34,35,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,36,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,21,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,65,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,6,490,37,313,314,315,66,316,317,318,319,320,321,322,323,38,324,325,326,39,40,327,328,329,330,331,332,333,41,334,64,335,336,337,42,43,338,44,339,340,45,341,342,343,344,345,46,47,48,346,49,347,348,349,350,50,351,51,352,52,53,353,354,54,55,56,355,356,357,12,358,359,360,13,361,362,363,364,365,15,366,367,16,368,369,370,371,7,372,373,374,57,18,375,376,377,378,379,494,380,381,382,383,384,385,386,58,59,387,388,389,390,60,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,61,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,62,450,451,452,453,454,455,456,457,458,459,460,63,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,477,478,478,479,480,481,482,483,484,485,486,487,488],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","name":"name","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"method"}},{"transplant":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"failures":[157,473,480,482,483,485],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[495,43,341,349],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:773","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1832","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[95,99,100,108,113,123,142,151,155,156,157,158,159,160,161,162,163,164,167,168,171,230,242,243,325,331,332,64,335,336,337,340,341,342,344,345,46,347,348,349,414,418,477,477,478,478],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.EasyMockProperties:116","failures":[],"status":0,"binaryOperator":"((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[124,169,248,249,250,251,252,253,376,377,378,379],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.EasyMock:480","sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:497","sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T> , this)","type":"CtReturnImpl"},"failures":[371,372,430,440,477,478,479],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:190","failures":[70,71,23,87,88,89,123,126,127,25,141,142,151,27,28,158,162,164,29,166,31,32,33,34,35,167,168,171,199,200,203,204,206,266,273,280,281,282,285,286,287,288,289,299,317,325,39,40,328,329,331,332,333,41,64,335,336,337,42,43,44,339,340,45,341,342,343,344,345,46,47,48,49,347,348,349,350,50,351,51,352,52,53,353,354,54,55,56,369,378,383,384,385,58,387,388,389,391,392,393,404,405,407,408,411,412,413,61,414,415,416,418,419,420,421,423,62,452,456,460,63,461,466,467],"status":-1,"binaryOperator":"(java.lang.Object instanceof java.lang.Number)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:352","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[112,24,180,186,192,196,198,199,276,282,288,292,294,408,415],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":41,"org.easymock.tests2.UsageTest.argumentsOrdered":60,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":199,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":55,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":300,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":8,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":59,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":476,"org.easymock.tests2.DelegateToTest.testReturnException":307,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":249,"org.easymock.tests.MockingTest.testPartialClassMocking":75,"org.easymock.tests.MockClassControlTest.testToString":259,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":399,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":266,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":463,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":434,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":430,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":179,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":467,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":1,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":43,"org.easymock.tests2.UsageTest.wrongArguments":386,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":167,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":323,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":228,"org.easymock.samples.ExampleTest.answerVsDelegate":481,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":223,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":80,"org.easymock.tests2.UsageConstraintsTest.testNull":335,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":451,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":54,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":264,"org.easymock.tests2.CaptureTest.testPrimitive":407,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":171,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":198,"org.easymock.tests.UsageTest.moreThanOneArgument":200,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":450,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":162,"org.easymock.tests.UsageTest.argumentsOrdered":36,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":82,"org.easymock.tests.UsageVarargTest.varargIntAccepted":130,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":109,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":155,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":5,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":365,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":304,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":370,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":97,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":159,"org.easymock.tests.ReplayStateInvalidUsageTest.times":238,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":317,"org.easymock.tests2.DependencyTest.testClassMocking":464,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":0,"org.easymock.tests2.AnswerTest.answer":393,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":338,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":111,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":364,"org.easymock.tests2.CaptureTest.testAnd":404,"org.easymock.tests2.UsageTest.strictResetToDefault":384,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":459,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":16,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":161,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":88,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":352,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":86,"org.easymock.tests2.DelegateToTest.testDelegate":311,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":194,"org.easymock.tests.LimitationsTest.mockFinalMethod":247,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":252,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":94,"org.easymock.tests2.DependencyTest.testClassMockingSupport":465,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":176,"org.easymock.tests2.CaptureTest.testCapture1_2446744":408,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":455,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":192,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":362,"org.easymock.tests.UsageThrowableTest.throwError":29,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":232,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":222,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":305,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":164,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":19,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":448,"org.easymock.samples.PartialClassMockTest.testGetArea":479,"org.easymock.tests.MockingTest.testInterfaceMocking":77,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":233,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":156,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":126,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":435,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":180,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":148,"org.easymock.tests2.UsageTest.niceToStrict":58,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":11,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":95,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":369,"org.easymock.tests2.MockBuilderTest.testCreateMock":374,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":443,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":320,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":188,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":52,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":256,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":207,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":226,"org.easymock.tests.UsageOverloadedMethodTest.overloading":25,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":445,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":439,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":271,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":341,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":140,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":286,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":45,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":413,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":131,"org.easymock.tests2.EasyMockSupportClassTest.testAll":427,"org.easymock.tests.MockClassControlTest.testEquals":263,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":218,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":196,"org.easymock.tests2.CaptureTest.testCaptureAll":405,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":92,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":363,"org.easymock.tests.MockNameTest.defaultName":172,"org.easymock.tests2.UsageConstraintsTest.testMatches":342,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":163,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":230,"org.easymock.samples.ExampleTest.voteForRemovals":485,"org.easymock.tests.UsageVarargTest.allKinds":139,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":70,"org.easymock.samples.BasicClassMockTest.testPrintContent":475,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":93,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":34,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":38,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":253,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":301,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":310,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":493,"org.easymock.tests2.UsageConstraintsTest.greaterThan":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":428,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":87,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":461,"org.easymock.samples.ExampleTest.voteForRemoval":482,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":122,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":462,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":420,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":224,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":454,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":165,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":383,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":102,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":351,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":166,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":425,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":248,"org.easymock.tests2.CaptureTest.testCaptureFirst":416,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":306,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":101,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":51,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":392,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":274,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":282,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":422,"org.easymock.tests2.CaptureTest.testCapture2_2446744":415,"org.easymock.tests2.UsageTest.moreThanOneArgument":385,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":112,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":57,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":138,"org.easymock.tests.GenericTest.testBridgedEquals":220,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":214,"org.easymock.tests.UsageExpectAndReturnTest.longType":278,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":90,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":350,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":197,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":142,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":346,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":195,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":174,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":160,"org.easymock.tests.UsageCallCountTest.tooManyCalls":215,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":209,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":444,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":283,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":322,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":184,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":33,"org.easymock.tests.MockingTest.testNiceClassMocking":81,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":357,"org.easymock.tests.MockingTest.testClassMocking":73,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":208,"org.easymock.tests2.UsageConstraintsTest.testContains":340,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":378,"org.easymock.tests2.UsageConstraintsTest.testFind":64,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":141,"org.easymock.tests.MockTypeTest.fromEasyMockClass":21,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":26,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":382,"org.easymock.tests.UsageExpectAndReturnTest.object":285,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":456,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":321,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":354,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":133,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":2,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":146,"org.easymock.tests.UsageTest.exactCallCountByLastCall":206,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":123,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":100,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":83,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":265,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":6,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":128,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":291,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":270,"org.easymock.tests.MockClassControlTest.testHashCode":262,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":296,"org.easymock.tests2.EasyMockSupportTest.testVerify":355,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":437,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":84,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":255,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":268,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":361,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":494,"org.easymock.tests.UsageVarargTest.varargCharAccepted":132,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":492,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":324,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":117,"org.easymock.tests2.UsageTest.openCallCountByLastCall":387,"org.easymock.tests.DefaultClassInstantiatorTest.object":118,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":9,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":56,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":254,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":144,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":438,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":186,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":31,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":66,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":295,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":460,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":261,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":185,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":292,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":446,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":260,"org.easymock.tests2.UsageTest.resumeIfFailure":391,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":221,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":251,"org.easymock.tests2.StubTest.stubWithReturnValue":418,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":7,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":49,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":284,"org.easymock.tests2.SerializationTest.testAllMockedMethod":330,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":110,"org.easymock.samples.SupportTest.voteForRemovals":473,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":216,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":65,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":191,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":116,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":394,"org.easymock.tests.UsageExpectAndThrowTest.object":189,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":267,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":47,"org.easymock.tests2.DelegateToTest.testWrongClass":309,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":242,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":243,"org.easymock.samples.ConstructorCalledMockTest.testTax":477,"org.easymock.tests.UsageStrictMockTest.range":27,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":470,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":353,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":356,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":190,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":424,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":205,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":240,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":227,"org.easymock.tests2.CaptureTest.testCaptureNone":412,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":127,"org.easymock.tests.UsageUnorderedTest.message":24,"org.easymock.tests.UsageVerifyTest.twoReturns":71,"org.easymock.tests.UsageVarargTest.varargByteAccepted":137,"org.easymock.tests2.ThreadingTest.testThreadSafe":419,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":441,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":212,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":474,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":147,"org.easymock.tests2.CaptureTest.testCapture_2617107":406,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":178,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":170,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":114,"org.easymock.tests2.UsageConstraintsTest.any":44,"org.easymock.tests2.StubTest.stub":417,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":237,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":175,"org.easymock.tests.UsageExpectAndThrowTest.longType":182,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":115,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":250,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":121,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":236,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":326,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":299,"org.easymock.tests2.SerializationTest.testClass":328,"org.easymock.tests.LimitationsTest.mockNativeMethod":246,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":219,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":294,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":315,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":327,"org.easymock.tests2.NameTest.nameForMocksControl":403,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":316,"org.easymock.tests2.MockedExceptionTest.testMockedException":377,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":429,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":204,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":183,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":78,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":381,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":449,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":372,"org.easymock.tests.MockingTest.testNicePartialClassMocking":76,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":453,"org.easymock.tests2.CaptureTest.testCaptureLast":411,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":313,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":177,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":42,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":13,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":48,"org.easymock.tests.MockingTest.testTwoMocks":74,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":14,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":275,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":187,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":390,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":348,"org.easymock.samples.ExampleTest.removeNonExistingDocument":486,"org.easymock.tests.UsageStrictMockTest.differentMethods":28,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":234,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":319,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":297,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":119,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":421,"org.easymock.tests2.MockBuilderTest.testCreateMockString":375,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":431,"org.easymock.tests.UsageExpectAndThrowTest.floatType":181,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":343,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":426,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":396,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":490,"org.easymock.tests.UsageVerifyTest.twoThrows":22,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":269,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":440,"org.easymock.tests.ResultTest.createDelegateResultToString":67,"org.easymock.samples.ExampleTest.voteAgainstRemoval":483,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":125,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":105,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":63,"org.easymock.tests.LimitationsTest.privateConstructor":245,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":20,"org.easymock.tests2.UsageConstraintsTest.testNotNull":347,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":35,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":376,"org.easymock.tests2.UsageTest.defaultResetToNice":389,"org.easymock.samples.ExampleTest.voteAgainstRemovals":480,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":106,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":290,"org.easymock.tests.UsageVarargTest.differentLength":134,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":314,"org.easymock.tests2.CallbackTest.callback":37,"org.easymock.tests2.UsageConstraintsTest.equals":334,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":457,"org.easymock.tests.UsageTest.openCallCountByLastCall":203,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":331,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":169,"org.easymock.tests.UsageCallCountTest.tooFewCalls":210,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":358,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":229,"org.easymock.tests.UsageThrowableTest.throwCheckedException":32,"org.easymock.tests.MockingTest.testStrictClassMocking":72,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":124,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":360,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":12,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":318,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":239,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":359,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":398,"org.easymock.tests2.CompareToTest.testGreateOrEqual":495,"org.easymock.tests.ObjectMethodsTest.testHashCode":145,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":4,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":423,"org.easymock.tests2.NameTest.nameForNiceMock":402,"org.easymock.tests2.DependencyTest.testInterfaceMocking":466,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":3,"org.easymock.samples.ExampleTest.addDocument":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":442,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":447,"org.easymock.tests2.DelegateToTest.testStubDelegate":308,"org.easymock.tests2.AnswerTest.stubAnswer":397,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":151,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":491,"org.easymock.tests.UsageVarargTest.varargLongAccepted":136,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":153,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":104,"org.easymock.tests.UsageExpectAndReturnTest.floatType":277,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":293,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":312,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":478,"org.easymock.tests.UsageThrowableTest.noUpperLimit":30,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":272,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":303,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":345,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":332,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":468,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":409,"org.easymock.tests2.SerializationTest.test":329,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":68,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":276,"org.easymock.tests2.UsageConstraintsTest.testSame":336,"org.easymock.samples.SupportTest.addDocument":472,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":235,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":432,"org.easymock.tests.GenericTest.testPackageScope":217,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":99,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":302,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":79,"org.easymock.tests2.NameTest.nameForMock":400,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":287,"org.easymock.tests2.UsageStrictMockTest.differentMethods":40,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":18,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":458,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":279,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":193,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":143,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":89,"org.easymock.tests2.MockedExceptionTest.testRealException":379,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":225,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":471,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":107,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":325,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":168,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":241,"org.easymock.tests2.NameTest.nameForStrictMock":401,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":368,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":10,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":380,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":452,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":469,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":120,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":46,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":366,"org.easymock.tests2.UsageStrictMockTest.range":39,"org.easymock.tests2.UsageConstraintsTest.lessThan":349,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":298,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":489,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":103,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":436,"org.easymock.tests2.CaptureTest.testCaptureRightOne":61,"org.easymock.tests2.UsageConstraintsTest.testOr":337,"org.easymock.tests.UsageRangeTest.combination":23,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":62,"org.easymock.tests.UsageTest.wrongArguments":202,"org.easymock.tests2.MockBuilderTest.testWithConstructor":15,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":433,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":258,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":96,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":288,"org.easymock.tests.UsageVarargTest.varargShortAccepted":135,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":69,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":213,"org.easymock.tests2.UsageConstraintsTest.cmpTo":339,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":395,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":98,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":388,"org.easymock.tests2.CaptureTest.testCaptureFromStub":414,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":231,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":367,"org.easymock.tests.UsageTest.unexpectedCallWithArray":201,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":150,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":211,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":17,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":289,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":152,"org.easymock.tests2.UsageConstraintsTest.constraints":333,"org.easymock.samples.ExampleTest.addAndChangeDocument":487,"org.easymock.tests.UsageStrictMockTest.testVerify":154,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":488,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":149,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":91,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":410,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":157,"org.easymock.tests.LimitationsTest.abstractClass":244,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":281,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":158,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":273,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":129,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":53}}]

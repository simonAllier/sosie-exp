[{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[0,1,2,3],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:138","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[4,5,6],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[7,8],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:94","sourceCode":"java.util.List<org.easymock.IArgumentMatcher>.addAll(java.util.Stack<org.easymock.IArgumentMatcher>.subList(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int), java.util.Stack<org.easymock.IArgumentMatcher>.size()))","type":"CtInvocationImpl"},"failures":[9,10,11,12,13,7,14,15,16,17,18],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1421","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:119","sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(java.util.Properties.remove(java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[19,20,21,22,23,24,25,26,27,28,29],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,4,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,19,20,21,22,23,24,25,26,27,28,336,337,9,10,338,339,11,340,12,13,341,7,8,342,343,344,345,346,347,348,349,14,350,351,352,353,15,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,1,2,3,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,16,481,17,482,483,484,485,486,487,488,18,489,490,491],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1952","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:390","sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:256","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1433","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:224","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:225","sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Equals:53","failures":[41,304,338],"status":-1,"binaryOperator":"(java.lang.Object == null)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"(((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol()))","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[35,40,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,105,123,129,136,137,140,162,164,165,166,167,168,169,180,181,182,183,184,185,295,302,366,367,368,369,470],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:127","sourceCode":"java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"type":"mockType","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"failures":[289,289,290,290,360],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[492,493,494],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1291","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"failures":[255],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:2124","failures":[282,356,359,360,370,371,372],"status":-1,"binaryOperator":"org.easymock.internal.Invocation == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:33","sourceCode":"new java.util.ArrayList<org.easymock.internal.ExpectedInvocationAndResult>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"failures":[220],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:365","sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[53,278,280,379,380,381,382,383,384,385,386,387,388,389,390,450,451,452,453,454,455,456,457,458,459,460,461],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[319],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:40","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[495],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[37,496,497,246,498,499],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"position":"org.easymock.internal.RecordState:274","failures":[120,282,356,357,358,359,360,361,370,372,378],"status":-1,"binaryOperator":"org.easymock.IAnswer<?> == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:131","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","type":"CtIfImpl"},"failures":[500,501],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[47,52,93,106,107,108,109,110,112,115,175,176,177,178,179,186,187,188,189,203,204,205,206,4,207,209,243,265,266,267,268,269,270,271,272,279,289,289,290,290,291,292,308,310,311,313,314,315,316,318,320,321,322,324,329,330,332,333,334,335,20,21,22,23,24,25,26,27,28,366,367,368,1,3,397,398,418,422,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,472,473,474,475,478,479],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[37,496,497,246,498,499],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[10,339],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:280","sourceCode":"for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n            org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        } \n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[175],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericInterfaces":"actualTypeArguments","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:49","sourceCode":"org.easymock.internal.Injection.getAnnotation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:53","sourceCode":"java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[216,357],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.Capture:134","failures":[500],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,4,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,19,20,21,22,23,24,25,26,27,28,336,337,9,10,338,339,11,340,12,13,341,7,8,342,343,344,345,346,347,348,349,14,350,351,352,353,15,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,1,2,3,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,16,481,17,482,483,484,485,486,487,488,18,489,490,491],"status":-1,"binaryOperator":"(int <= int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"failures":[35,40,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,105,123,129,136,137,140,162,164,165,166,167,168,169,180,181,182,183,184,185,295,302,366,367,368,369,470],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":10,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":35,"org.easymock.tests2.UsageTest.argumentsOrdered":305,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":410,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":385,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":220,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":300,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":280,"org.easymock.tests2.DelegateToTest.testReturnException":392,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":181,"org.easymock.tests.MockingTest.testPartialClassMocking":109,"org.easymock.tests.MockClassControlTest.testToString":267,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":413,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":45,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":28,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":435,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":431,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":61,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":328,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":341,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":134,"org.easymock.tests2.UsageTest.wrongArguments":298,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":461,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":236,"org.easymock.samples.ExampleTest.answerVsDelegate":282,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":52,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":114,"org.easymock.tests2.UsageConstraintsTest.testNull":11,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":332,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":409,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":272,"org.easymock.tests2.CaptureTest.testPrimitive":482,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":138,"org.easymock.tests.UsageTest.moreThanOneArgument":36,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":80,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":331,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":32,"org.easymock.tests.UsageTest.argumentsOrdered":42,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":259,"org.easymock.tests.UsageVarargTest.varargIntAccepted":83,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":225,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":273,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":308,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":420,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":389,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":315,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":212,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":277,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":455,"org.easymock.tests.ReplayStateInvalidUsageTest.times":198,"org.easymock.tests2.DependencyTest.testClassMocking":325,"org.easymock.tests2.AnswerTest.answer":356,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":7,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":227,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":365,"org.easymock.tests2.CaptureTest.testAnd":16,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":49,"org.easymock.tests2.UsageTest.strictResetToDefault":296,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":23,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":312,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":31,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":404,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":118,"org.easymock.tests2.DelegateToTest.testDelegate":396,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":263,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":76,"org.easymock.tests.LimitationsTest.mockFinalMethod":189,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":184,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":174,"org.easymock.tests2.DependencyTest.testClassMockingSupport":326,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":130,"org.easymock.tests2.CaptureTest.testCapture1_2446744":483,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":19,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":74,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":363,"org.easymock.tests.UsageThrowableTest.throwError":162,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":192,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":51,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":390,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":264,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":34,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":449,"org.easymock.samples.PartialClassMockTest.testGetArea":279,"org.easymock.tests.MockingTest.testInterfaceMocking":111,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":193,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":274,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":256,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":436,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":62,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":243,"org.easymock.tests2.UsageTest.niceToStrict":299,"org.easymock.tests2.ThreadingTest.testChangeDefault":29,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":492,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":210,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":314,"org.easymock.tests2.MockBuilderTest.testCreateMock":321,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":444,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":458,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":498,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":70,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":405,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":48,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":60,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":94,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":234,"org.easymock.tests.UsageOverloadedMethodTest.overloading":128,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":446,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":440,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":123,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":345,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":153,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":127,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":5,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":344,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":488,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":84,"org.easymock.tests2.EasyMockSupportClassTest.testAll":428,"org.easymock.tests.MockClassControlTest.testEquals":271,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":177,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":78,"org.easymock.tests2.CaptureTest.testCaptureAll":481,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":172,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":364,"org.easymock.tests.MockNameTest.defaultName":103,"org.easymock.tests2.UsageConstraintsTest.testMatches":346,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":190,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":33,"org.easymock.samples.ExampleTest.voteForRemovals":286,"org.easymock.tests.UsageVarargTest.allKinds":92,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":139,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":173,"org.easymock.samples.BasicClassMockTest.testPrintContent":292,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":168,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":462,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":395,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":386,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":185,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":208,"org.easymock.tests2.UsageConstraintsTest.greaterThan":348,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":429,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":117,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":26,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":209,"org.easymock.samples.ExampleTest.voteForRemoval":283,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":27,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":374,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":53,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":421,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":335,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":93,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":295,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":320,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":217,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":402,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":426,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":180,"org.easymock.tests2.CaptureTest.testCaptureFirst":491,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":391,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":216,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":403,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":307,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":126,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":149,"org.easymock.tests2.CaptureTest.testCapture2_2446744":490,"org.easymock.tests2.UsageTest.moreThanOneArgument":297,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":376,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":228,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":322,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":91,"org.easymock.tests.GenericTest.testBridgedEquals":179,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":101,"org.easymock.tests.UsageExpectAndReturnTest.longType":145,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":400,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":170,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":79,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":258,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":352,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":77,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":30,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":56,"org.easymock.tests.UsageCallCountTest.tooManyCalls":102,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":445,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":150,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":460,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":66,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":167,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":473,"org.easymock.tests.MockingTest.testNiceClassMocking":115,"org.easymock.tests.MockingTest.testClassMocking":107,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":95,"org.easymock.tests2.UsageConstraintsTest.testContains":343,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":368,"org.easymock.tests2.UsageConstraintsTest.testFind":339,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":129,"org.easymock.tests.MockTypeTest.fromEasyMockClass":50,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":244,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":372,"org.easymock.tests.UsageExpectAndReturnTest.object":152,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":20,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":459,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":408,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":86,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":241,"org.easymock.tests.UsageTest.exactCallCountByLastCall":43,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":104,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":215,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":44,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":260,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":398,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":158,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":81,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":122,"org.easymock.tests.MockClassControlTest.testHashCode":270,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":380,"org.easymock.tests2.EasyMockSupportTest.testVerify":412,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":438,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":261,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":120,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":59,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":362,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":471,"org.easymock.tests.UsageVarargTest.varargCharAccepted":85,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":202,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":463,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":233,"org.easymock.tests2.UsageTest.openCallCountByLastCall":301,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":493,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":411,"org.easymock.tests.DefaultClassInstantiatorTest.object":203,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":58,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":439,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":68,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":165,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":453,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":379,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":24,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":269,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":67,"org.easymock.tests.CapturesMatcherTest.test":500,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":159,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":447,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":268,"org.easymock.tests2.UsageTest.resumeIfFailure":306,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":47,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":419,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":183,"org.easymock.tests2.StubTest.stubWithReturnValue":470,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":317,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":151,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":353,"org.easymock.tests2.SerializationTest.testAllMockedMethod":3,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":226,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":499,"org.easymock.samples.SupportTest.voteForRemovals":294,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":175,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":382,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":73,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":0,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":232,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":357,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":46,"org.easymock.tests.UsageExpectAndThrowTest.object":71,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":350,"org.easymock.tests2.DelegateToTest.testWrongClass":394,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":253,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":254,"org.easymock.tests.UsageStrictMockTest.range":249,"org.easymock.samples.ConstructorCalledMockTest.testTax":289,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":423,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":407,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":472,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":72,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":316,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":425,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":41,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":200,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":235,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":496,"org.easymock.tests2.CaptureTest.testCaptureNone":487,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":257,"org.easymock.tests.UsageUnorderedTest.message":133,"org.easymock.tests.UsageVerifyTest.twoReturns":141,"org.easymock.tests.UsageVarargTest.varargByteAccepted":90,"org.easymock.tests2.ThreadingTest.testThreadSafe":373,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":442,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":99,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":242,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":291,"org.easymock.tests2.CaptureTest.testCapture_2617107":17,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":132,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":137,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":230,"org.easymock.tests2.UsageConstraintsTest.any":8,"org.easymock.tests2.StubTest.stub":469,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":197,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":57,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":182,"org.easymock.tests.UsageExpectAndThrowTest.longType":64,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":231,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":4,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":196,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":465,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":384,"org.easymock.tests2.SerializationTest.testClass":1,"org.easymock.tests.LimitationsTest.mockNativeMethod":188,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":178,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":161,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":452,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":468,"org.easymock.tests2.NameTest.nameForMocksControl":417,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":454,"org.easymock.tests2.MockedExceptionTest.testMockedException":367,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":430,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":40,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":112,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":65,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":371,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":329,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":318,"org.easymock.tests.MockingTest.testNicePartialClassMocking":110,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":334,"org.easymock.tests2.CaptureTest.testCaptureLast":486,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":450,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":131,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":479,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":13,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":351,"org.easymock.tests.MockingTest.testTwoMocks":108,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":480,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":142,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":69,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":304,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":354,"org.easymock.samples.ExampleTest.removeNonExistingDocument":287,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":457,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":194,"org.easymock.tests.UsageStrictMockTest.differentMethods":250,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":381,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":205,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":375,"org.easymock.tests2.MockBuilderTest.testCreateMockString":324,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":432,"org.easymock.tests.UsageExpectAndThrowTest.floatType":63,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":347,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":427,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":359,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":399,"org.easymock.tests.UsageVerifyTest.twoThrows":140,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":441,"org.easymock.samples.ExampleTest.voteAgainstRemoval":284,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":221,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":255,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":25,"org.easymock.tests.LimitationsTest.privateConstructor":187,"org.easymock.tests2.UsageConstraintsTest.testNotNull":15,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":169,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":366,"org.easymock.tests2.UsageTest.defaultResetToNice":303,"org.easymock.samples.ExampleTest.voteAgainstRemovals":281,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":157,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":222,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":451,"org.easymock.tests.UsageVarargTest.differentLength":87,"org.easymock.tests2.CallbackTest.callback":378,"org.easymock.tests2.UsageConstraintsTest.equals":338,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":21,"org.easymock.tests.UsageTest.openCallCountByLastCall":39,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":336,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":136,"org.easymock.tests.UsageCallCountTest.tooFewCalls":97,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":475,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":237,"org.easymock.tests.UsageThrowableTest.throwCheckedException":166,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":497,"org.easymock.tests.MockingTest.testStrictClassMocking":106,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":478,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":105,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":474,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":456,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":199,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":477,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":361,"org.easymock.tests.ObjectMethodsTest.testHashCode":240,"org.easymock.tests2.NameTest.nameForNiceMock":416,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":377,"org.easymock.tests2.DependencyTest.testInterfaceMocking":327,"org.easymock.samples.ExampleTest.addDocument":285,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":443,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":448,"org.easymock.tests2.DelegateToTest.testStubDelegate":393,"org.easymock.tests2.AnswerTest.stubAnswer":360,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":247,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":319,"org.easymock.tests.UsageVarargTest.varargLongAccepted":89,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":251,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":219,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":160,"org.easymock.tests.UsageExpectAndReturnTest.floatType":144,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":397,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":290,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":388,"org.easymock.tests.UsageThrowableTest.noUpperLimit":163,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":124,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":349,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":337,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":418,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":484,"org.easymock.tests2.SerializationTest.test":2,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":6,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":204,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":143,"org.easymock.tests2.UsageConstraintsTest.testSame":340,"org.easymock.samples.SupportTest.addDocument":293,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":476,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":195,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":433,"org.easymock.tests.GenericTest.testPackageScope":176,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":262,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":214,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":387,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":113,"org.easymock.tests2.NameTest.nameForMock":414,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":154,"org.easymock.tests2.UsageStrictMockTest.differentMethods":467,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":323,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":22,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":146,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":75,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":238,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":119,"org.easymock.tests2.MockedExceptionTest.testRealException":369,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":54,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":424,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":224,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":464,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":223,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":135,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":201,"org.easymock.tests2.NameTest.nameForStrictMock":415,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":313,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":494,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":370,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":333,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":422,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":14,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":206,"org.easymock.tests.ErrorMessageTest.testGetters":495,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":310,"org.easymock.tests2.UsageStrictMockTest.range":466,"org.easymock.tests2.UsageConstraintsTest.lessThan":355,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":383,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":401,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":218,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":437,"org.easymock.tests2.CaptureTest.testCaptureRightOne":18,"org.easymock.tests2.UsageConstraintsTest.testOr":12,"org.easymock.tests.UsageRangeTest.combination":116,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":330,"org.easymock.tests.UsageTest.wrongArguments":38,"org.easymock.tests2.MockBuilderTest.testWithConstructor":309,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":434,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":266,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":147,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":155,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":211,"org.easymock.tests.UsageVarargTest.varargShortAccepted":88,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":207,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":100,"org.easymock.tests2.UsageConstraintsTest.cmpTo":342,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":358,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":213,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":302,"org.easymock.tests2.CaptureTest.testCaptureFromStub":489,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":191,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":311,"org.easymock.tests.UsageTest.unexpectedCallWithArray":37,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":246,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":98,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":156,"org.easymock.tests2.CaptureTest.testCapture":501,"org.easymock.tests2.UsageConstraintsTest.constraints":9,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":248,"org.easymock.samples.ExampleTest.addAndChangeDocument":288,"org.easymock.tests.UsageStrictMockTest.testVerify":252,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":278,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":245,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":171,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":485,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":275,"org.easymock.tests.LimitationsTest.abstractClass":186,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":148,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":125,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":276,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":406,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":82}}]

[{"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:80","failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","sourceCode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[49,50,51,52,53,54],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[55,56,57,6,58],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:141","sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:274","failures":[59,60,61,62,63,64,65,66,67],"status":-1,"binaryOperator":"org.easymock.IAnswer<?> == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[68],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:55","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:932","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Float>(float))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"this.java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"toMock":"toMock","toStringMethod":"hashCodeMethod","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Not:40","sourceCode":"java.lang.StringBuffer.append(\"not(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:61","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(org.easymock.internal.matchers.Equals.getExpected(), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[34,69],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[26,70,71,28,29,30,32,33,34,36,39,40,41,47],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[72,73,74,75,76],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"failures":[77],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"arg"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:96","sourceCode":"return java.lang.Class<?>.getConstructors()[0]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:89","sourceCode":"try {\n    return java.lang.Class<?>.getConstructor(new java.lang.Class[0]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    if ((java.lang.Class<?>.getConstructors().int) == 0) {\n        throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n    } \n    return java.lang.Class<?>.getConstructors()[0];\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"clazz"}},{"transplant":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:94","sourceCode":"if (!(java.util.List<org.easymock.IArgumentMatcher>.get(int).matches(java.lang.Object[][int]))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[78,28,29,30,79,80,81,82,83,84,85,32,86,87,88,34,35,89,90,91,92,93,94,95,96,97,0,98,99,100,101,102,103,104,105,106,107,108,2,74,3,109,110,111,112,113,114,4,115,75,76,39,116,117,40,41,63,118,67,119,46],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[9,120,121],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.ConstructorArgs:54","failures":[122,123,9,124,125,126,120,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[161,26,162,163,164,165,166,167,168,169,86,170,171,87,172,173,174,34,35,96,97,0,68,98,175,99,100,1,176,177,178,179,101,180,102,103,104,105,106,181,182,183,184,185,186,107,108,187,2,74,3,109,110,111,112,113,188,114,4,115,75,76,65,66,189,46],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"this.java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"toMock":"toMock","hashCodeMethod":"toStringMethod","this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1763","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"failures":[186],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1963","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Float>(org.easymock.Capture<java.lang.Float>))","type":"CtInvocationImpl"},"failures":[109],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[190],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[5,191,192,193,194,195,196,197,198,199,26,78,29,30,79,81,82,83,84,85,32,200,201,202,203,204,205,206,207,208,169,209,86,170,171,210,88,211,35,212,36,37,213,214,89,90,215,92,93,95,216,217,68,175,1,176,178,180,104,181,182,183,184,185,186,74,3,109,111,112,113,188,114,4,76,218,14,19,219,116,117,40,41,220,221,222,67,119,223,46,224,47,48,225],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:202","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[5,191,192,59,193,194,195,196,161,197,198,199,26,78,29,30,162,79,80,81,82,83,84,85,164,165,166,167,168,32,200,201,202,203,204,205,206,207,208,169,209,86,170,171,87,172,210,173,174,88,211,35,212,36,37,213,214,89,90,215,92,93,95,216,217,96,97,68,98,175,99,100,1,176,178,101,180,102,103,104,105,106,181,182,183,184,185,186,107,108,74,3,109,110,111,112,113,188,114,4,75,76,226,218,14,19,219,116,117,40,41,63,220,221,222,227,118,67,119,223,46,224,47,48,225],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"control"}},{"position":"org.easymock.internal.ExpectedInvocation:85","failures":[78,28,29,30,162,79,80,81,82,83,84,85,32,209,86,87,88,34,35,36,37,89,90,215,91,92,93,94,95,216,217,96,97,0,68,98,99,100,1,176,178,101,180,102,103,104,105,106,181,182,183,185,107,108,2,74,3,109,110,111,112,113,114,4,115,75,76,19,39,116,117,40,41,63,118,67,119,46,47,48],"status":-1,"binaryOperator":"((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockInvocationHandler:37","failures":[],"status":0,"binaryOperator":"(org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[68,100,177],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":68,"org.easymock.tests2.UsageTest.argumentsOrdered":41,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":216,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":117,"org.easymock.tests2.StubTest.stubWithReturnValue":118,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":126,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":185,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":121,"org.easymock.samples.SupportTest.voteForRemovals":191,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":146,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":142,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":23,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":182,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":173,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":174,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":176,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":86,"org.easymock.tests2.UsageTest.wrongArguments":39,"org.easymock.tests.UsageStrictMockTest.range":36,"org.easymock.samples.ConstructorCalledMockTest.testTax":122,"org.easymock.samples.ExampleTest.answerVsDelegate":59,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":8,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":190,"org.easymock.tests2.UsageConstraintsTest.testNull":175,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":95,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":16,"org.easymock.tests2.CaptureTest.testPrimitive":109,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":172,"org.easymock.tests.UsageTest.moreThanOneArgument":27,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":136,"org.easymock.tests2.CaptureTest.testCaptureNone":188,"org.easymock.tests.UsageUnorderedTest.message":26,"org.easymock.tests.UsageVerifyTest.twoReturns":33,"org.easymock.tests.UsageVarargTest.varargByteAccepted":207,"org.easymock.tests.UsageTest.argumentsOrdered":30,"org.easymock.tests.UsageVarargTest.varargIntAccepted":202,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":153,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":198,"org.easymock.tests2.CaptureTest.testCapture_2617107":3,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":164,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":10,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":87,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":15,"org.easymock.tests2.UsageConstraintsTest.any":178,"org.easymock.tests2.StubTest.stub":227,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":168,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":224,"org.easymock.tests2.SerializationTest.testClass":9,"org.easymock.tests2.AnswerTest.answer":61,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":6,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":177,"org.easymock.tests2.CaptureTest.testAnd":2,"org.easymock.tests2.UsageTest.strictResetToDefault":219,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":225,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":125,"org.easymock.tests2.NameTest.nameForMocksControl":45,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":91,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":141,"org.easymock.tests2.DelegateToTest.testDelegate":218,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":17,"org.easymock.tests2.CaptureTest.testCaptureLast":113,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":161,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":1,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":132,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":183,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":210,"org.easymock.tests2.CaptureTest.testCapture1_2446744":110,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":133,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":40,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":107,"org.easymock.tests.UsageThrowableTest.throwError":79,"org.easymock.tests.UsageStrictMockTest.differentMethods":37,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":51,"org.easymock.tests2.MockBuilderTest.testCreateMockString":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":143,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":138,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":62,"org.easymock.tests.UsageVerifyTest.twoThrows":32,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":134,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":160,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":152,"org.easymock.samples.PartialClassMockTest.testGetArea":5,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":165,"org.easymock.samples.ExampleTest.voteAgainstRemoval":194,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":222,"org.easymock.tests2.UsageTest.niceToStrict":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":147,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":135,"org.easymock.tests2.UsageConstraintsTest.testNotNull":186,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":85,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":14,"org.easymock.tests2.MockBuilderTest.testCreateMock":18,"org.easymock.samples.ExampleTest.voteAgainstRemovals":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":155,"org.easymock.tests2.CallbackTest.callback":67,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":69,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":92,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":96,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":171,"org.easymock.tests.UsageCallCountTest.tooFewCalls":197,"org.easymock.tests.UsageOverloadedMethodTest.overloading":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":151,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":157,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":102,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":180,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":114,"org.easymock.tests.UsageThrowableTest.throwCheckedException":82,"org.easymock.tests2.EasyMockSupportClassTest.testAll":139,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":57,"org.easymock.tests2.CaptureTest.testCaptureAll":74,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":163,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":131,"org.easymock.tests2.UsageConstraintsTest.testMatches":103,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":64,"org.easymock.samples.ExampleTest.voteForRemovals":195,"org.easymock.tests2.NameTest.nameForNiceMock":44,"org.easymock.tests.UsageVarargTest.allKinds":169,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":154,"org.easymock.tests2.DelegateToTest.testStubDelegate":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":159,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":84,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":119,"org.easymock.tests2.AnswerTest.stubAnswer":63,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":35,"org.easymock.tests2.UsageConstraintsTest.greaterThan":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":140,"org.easymock.tests.UsageVarargTest.varargLongAccepted":206,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":213,"org.easymock.samples.ExampleTest.voteForRemoval":193,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":54,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":22,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":129,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":123,"org.easymock.tests.UsageThrowableTest.noUpperLimit":80,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":106,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":97,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":111,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":120,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":90,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":50,"org.easymock.tests2.UsageConstraintsTest.testSame":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":137,"org.easymock.tests2.CaptureTest.testCaptureFirst":76,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":144,"org.easymock.tests.GenericTest.testPackageScope":56,"org.easymock.tests2.CaptureTest.testCapture2_2446744":75,"org.easymock.tests2.UsageTest.moreThanOneArgument":38,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":187,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":19,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":208,"org.easymock.tests.GenericTest.testBridgedEquals":58,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":77,"org.easymock.tests2.NameTest.nameForMock":42,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":214,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":20,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":184,"org.easymock.tests2.UsageStrictMockTest.differentMethods":48,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":128,"org.easymock.tests.UsageCallCountTest.tooManyCalls":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":156,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":46,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":83,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":170,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":11,"org.easymock.tests2.NameTest.nameForStrictMock":43,"org.easymock.tests2.UsageConstraintsTest.testContains":101,"org.easymock.tests2.UsageConstraintsTest.testFind":98,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":65,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":221,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":88,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":66,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":52,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":24,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":181,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":189,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":12,"org.easymock.tests2.UsageStrictMockTest.range":47,"org.easymock.tests2.UsageConstraintsTest.lessThan":108,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":94,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":204,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":162,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":89,"org.easymock.tests2.CaptureTest.testCaptureRightOne":4,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":148,"org.easymock.tests2.UsageConstraintsTest.testOr":100,"org.easymock.tests.UsageRangeTest.combination":209,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":130,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":220,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":200,"org.easymock.tests.UsageTest.wrongArguments":28,"org.easymock.tests2.MockBuilderTest.testWithConstructor":124,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":145,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":149,"org.easymock.tests.UsageVarargTest.varargShortAccepted":205,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":60,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":53,"org.easymock.tests2.UsageConstraintsTest.cmpTo":179,"org.easymock.tests.UsageVarargTest.varargCharAccepted":203,"org.easymock.tests2.CaptureTest.testCaptureMultiple":73,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":223,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":217,"org.easymock.tests.DefaultClassInstantiatorTest.object":49,"org.easymock.tests2.CaptureTest.testCaptureFromStub":115,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":13,"org.easymock.tests.UsageTest.unexpectedCallWithArray":71,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":70,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":150,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":81,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":34,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":127,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":212,"org.easymock.tests2.UsageConstraintsTest.constraints":0,"org.easymock.samples.ExampleTest.addAndChangeDocument":196,"org.easymock.tests.CapturesMatcherTest.test":72,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":211,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":158,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":112,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":166,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":7,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":167,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":201,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":93,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":25}}]

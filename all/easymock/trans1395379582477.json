[{"transplant":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:120","sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:136","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.Capture:117","sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1915","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"captured"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","type":"CtIfImpl"},"failures":[9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"org.easymock.internal.EasyMockProperties.PREFIX"}},{"transplant":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cached":"cached"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:43","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String).append(\", actual: \")","type":"CtInvocationImpl"},"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:43","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"equals\", new java.lang.Class[]{ java.lang.Object.java.lang.Object })","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:106","sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    final org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock));\n}","type":"CtForEachImpl"},"failures":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:74","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[52,53,39,42,54,55,56,57,46,49,58,59],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"matched"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[60,61,62],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:55","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"failures":[63],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:49","sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","type":"CtInvocationImpl"},"failures":[64,65,66,67,68],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:309","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:251","sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[69,70,71,72,73,74,75,76,77,78],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:213","sourceCode":"return true","type":"CtReturnImpl"},"failures":[79,80],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:156","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:185","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"verified":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[81,82,83],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:86","sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[84,85,86,87,88,89,90,90,91,91,92,93,94,95,96,97,98,10,99,11,12,100,101,102,103,104,40,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,0,133,1,134,2,3,4,135,136,5,6,7,8,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,69,156,157,82,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,13,14,182,183,184,185,186,15,16,187,188,189,190,191,192,47,193,194,195,196,197,198,199,73,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,21,22,226,23,24,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,25,26,27,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,28,280,29,281,282,30,31,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,35,324,325,326,327,328,329,330,331,332,333,334,335,63,336,337,338,339,340,341,342,343,344,345],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"failures":[84,85,86,87,346,88,347,89,90,90,91,91,36,92,37,348,93,349,350,94,95,96,97,98,351,10,99,11,12,100,101,102,103,104,40,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,0,133,1,134,2,3,4,135,136,5,6,7,8,137,138,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,69,156,157,82,158,159,160,161,162,163,164,165,166,167,168,169,170,171,352,172,173,174,175,176,177,353,178,179,180,181,13,14,182,183,184,185,186,15,16,187,188,189,190,191,192,47,193,194,195,196,197,198,199,73,200,354,201,202,203,204,17,18,19,20,206,207,208,210,211,212,213,214,215,216,217,218,355,220,221,222,223,224,356,225,357,21,22,226,23,24,227,358,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,25,26,27,259,260,262,265,266,267,271,272,273,359,360,361,274,362,363,275,364,365,366,367,368,369,370,371,372,83,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,279,28,280,29,281,282,30,31,283,389,390,391,392,393,394,395,396,397,398,284,285,286,287,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,35,324,325,326,327,328,329,330,331,339,340,341,342,344,345],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"this.org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"failures":[399,154,400,69,70,174,401,72,353,179,73,79,219],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:62","sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","type":"CtIfImpl"},"failures":[192,342],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:88","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[84,85,86,87,88,89,90,90,91,91,92,93,94,95,96,97,98,10,99,11,12,100,101,102,103,104,40,41,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,0,133,1,134,2,3,4,135,136,5,6,7,8,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,400,69,156,157,82,158,159,160,161,162,163,164,165,166,167,168,169,170,171,352,172,173,402,174,175,176,177,353,178,179,180,181,13,14,182,183,184,185,186,15,16,187,188,189,190,191,192,47,48,193,194,195,196,197,198,199,73,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,21,22,226,23,24,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,25,26,27,259,260,261,262,263,264,403,265,266,267,268,269,270,271,272,273,359,404,405,406,407,408,409,410,411,274,275,383,384,385,276,277,278,279,28,280,29,281,282,30,31,283,284,285,286,287,288,289,290,412,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,35,324,325,326,327,328,329,330,331,332,333,334,335,63,336,337,338,339,340,341,342,343,344,345],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arg":"mock"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[73,200,354,413],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Same:42","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:49","sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","type":"CtInvocationImpl"},"failures":[64,65,66,67,68],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[85,206,208,209,210,414,341],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"answer"}},{"transplant":{"position":"org.easymock.EasyMock:1687","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:97","sourceCode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[84,86,87,88,92,93,94,95,10,11,12,40,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,129,130,131,132,0,133,134,2,135,136,5,6,8,137,138,142,144,145,146,147,148,149,151,153,154,155,69,156,157,82,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,174,176,177,178,180,181,13,182,184,185,186,187,188,191,47,193,194,195,196,197,198,199,73,200,201,202,203,204,207,213,218,220,22,23,24,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,254,255,256,257,25,27,259,265,266,267,271,272,273,274,279,28,281,282,283,285,286,287,288,289,292,293,296,297,298,324,326,327,328,329,330,331,344],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:133","sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:127","sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","type":"CtTryImpl"},"failures":[415,416],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:35","sourceCode":"new java.lang.ThreadLocal<org.easymock.internal.MocksControl>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"failures":[135,5,417],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[263],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[73,200,354],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"equalsMethod","method":"equalsMethod"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":108,"org.easymock.tests2.UsageTest.argumentsOrdered":16,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":279,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":170,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":48,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":183,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":37,"org.easymock.tests2.DelegateToTest.testReturnException":206,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":249,"org.easymock.tests.MockingTest.testPartialClassMocking":265,"org.easymock.tests.MockClassControlTest.testToString":383,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":258,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":400,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":202,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":304,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":32,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":95,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":74,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":114,"org.easymock.tests2.UsageTest.wrongArguments":14,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":292,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":55,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":216,"org.easymock.samples.ExampleTest.answerVsDelegate":85,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":409,"org.easymock.tests2.UsageConstraintsTest.testNull":110,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":147,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":388,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":169,"org.easymock.tests2.CaptureTest.testPrimitive":134,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":296,"org.easymock.tests.UsageTest.moreThanOneArgument":28,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":323,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":146,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":222,"org.easymock.tests.UsageTest.argumentsOrdered":31,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":332,"org.easymock.tests.UsageVarargTest.varargIntAccepted":391,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":285,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":172,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":51,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":175,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":414,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":289,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":40,"org.easymock.tests.ReplayStateInvalidUsageTest.times":377,"org.easymock.tests2.AnswerTest.answer":138,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":115,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":104,"org.easymock.tests2.CaptureTest.testAnd":0,"org.easymock.tests2.UsageTest.strictResetToDefault":181,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":152,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":221,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":164,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":256,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":63,"org.easymock.tests2.DelegateToTest.testDelegate":210,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":319,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":252,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":303,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":261,"org.easymock.tests2.CaptureTest.testCapture1_2446744":2,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":317,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":102,"org.easymock.tests.UsageThrowableTest.throwError":324,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":372,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":408,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":59,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":224,"org.easymock.samples.PartialClassMockTest.testGetArea":92,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":83,"org.easymock.tests2.CompareToTest.testLessOrEqual":68,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":286,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":269,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":405,"org.easymock.tests2.UsageTest.niceToStrict":182,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":305,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":62,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":174,"org.easymock.tests2.MockBuilderTest.testCreateMock":353,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":54,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":313,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":165,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":338,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":362,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":214,"org.easymock.tests.UsageOverloadedMethodTest.overloading":272,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":120,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":342,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":239,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":271,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":119,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":5,"org.easymock.tests.MockClassControlTest.testEquals":387,"org.easymock.tests2.EasyMockSupportClassTest.testAll":201,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":355,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":321,"org.easymock.tests2.CaptureTest.testCaptureAll":133,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":103,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":301,"org.easymock.tests.MockNameTest.defaultName":412,"org.easymock.tests2.UsageConstraintsTest.testMatches":121,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":223,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":370,"org.easymock.samples.ExampleTest.voteForRemovals":88,"org.easymock.tests.UsageVarargTest.allKinds":284,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":25,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":302,"org.easymock.samples.BasicClassMockTest.testPrintContent":350,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":330,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":98,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":49,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":209,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":253,"org.easymock.tests2.UsageConstraintsTest.greaterThan":123,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":78,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":255,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":155,"org.easymock.samples.ExampleTest.voteForRemoval":86,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":157,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":81,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":410,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":150,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":180,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":291,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":72,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":162,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":326,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":248,"org.easymock.tests2.CaptureTest.testCaptureFirst":137,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":205,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":163,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":188,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":345,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":235,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":158,"org.easymock.tests2.CaptureTest.testCapture2_2446744":8,"org.easymock.tests2.UsageTest.moreThanOneArgument":13,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":178,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":398,"org.easymock.tests.GenericTest.testBridgedEquals":80,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":368,"org.easymock.tests.UsageExpectAndReturnTest.longType":231,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":160,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":299,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":322,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":128,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":290,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":320,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":220,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":277,"org.easymock.tests.UsageCallCountTest.tooManyCalls":369,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":275,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":236,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":44,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":309,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":329,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":194,"org.easymock.tests2.UsageConstraintsTest.testContains":118,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":363,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":191,"org.easymock.tests2.UsageConstraintsTest.testFind":109,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":273,"org.easymock.tests.MockTypeTest.fromEasyMockClass":407,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":97,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":225,"org.easymock.tests.UsageExpectAndReturnTest.object":238,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":151,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":43,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":168,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":393,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":75,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":361,"org.easymock.tests.UsageTest.exactCallCountByLastCall":283,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":259,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":333,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":70,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":389,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":244,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":341,"org.easymock.tests.MockClassControlTest.testHashCode":386,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":56,"org.easymock.tests2.EasyMockSupportTest.testVerify":352,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":334,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":337,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":339,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":101,"org.easymock.tests.UsageVarargTest.varargCharAccepted":392,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":351,"org.easymock.tests2.UsageTest.openCallCountByLastCall":184,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":171,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":60,"org.easymock.tests.DefaultClassInstantiatorTest.object":356,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":336,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":359,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":311,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":327,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":38,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":385,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":153,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":310,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":245,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":276,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":384,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":204,"org.easymock.tests2.UsageTest.resumeIfFailure":187,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":406,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":251,"org.easymock.tests2.StubTest.stubWithReturnValue":213,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":71,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":129,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":237,"org.easymock.tests2.SerializationTest.testAllMockedMethod":354,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":263,"org.easymock.samples.SupportTest.voteForRemovals":93,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":79,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":45,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":316,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":413,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":264,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":139,"org.easymock.tests.UsageExpectAndThrowTest.object":314,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":126,"org.easymock.tests2.DelegateToTest.testWrongClass":208,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":297,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":298,"org.easymock.tests.UsageStrictMockTest.range":23,"org.easymock.samples.ConstructorCalledMockTest.testTax":90,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":167,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":193,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":315,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":176,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":30,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":379,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":215,"org.easymock.tests2.CaptureTest.testCaptureNone":136,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":270,"org.easymock.tests.UsageUnorderedTest.message":35,"org.easymock.tests.UsageVerifyTest.twoReturns":27,"org.easymock.tests.UsageVarargTest.varargByteAccepted":397,"org.easymock.tests2.ThreadingTest.testThreadSafe":156,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":366,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":404,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":349,"org.easymock.tests2.CaptureTest.testCapture_2617107":1,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":295,"org.easymock.tests2.UsageConstraintsTest.any":116,"org.easymock.tests2.StubTest.stub":212,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":376,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":278,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":250,"org.easymock.tests.UsageExpectAndThrowTest.longType":307,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":375,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":99,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":47,"org.easymock.tests2.SerializationTest.testClass":73,"org.easymock.tests.LimitationsTest.mockNativeMethod":274,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":219,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":247,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":53,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":100,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":9,"org.easymock.tests2.NameTest.nameForMocksControl":20,"org.easymock.tests2.MockedExceptionTest.testMockedException":190,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":39,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":282,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":267,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":308,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":144,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":177,"org.easymock.tests.MockingTest.testNicePartialClassMocking":266,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":149,"org.easymock.tests2.CaptureTest.testCaptureLast":135,"org.easymock.tests2.CompareToTest.testCompareEqual":66,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":262,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":113,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":199,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":127,"org.easymock.tests.MockingTest.testTwoMocks":403,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":228,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":312,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":15,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":131,"org.easymock.samples.ExampleTest.removeNonExistingDocument":347,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":42,"org.easymock.tests.UsageStrictMockTest.differentMethods":24,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":373,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":57,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":416,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":82,"org.easymock.tests2.MockBuilderTest.testCreateMockString":179,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":381,"org.easymock.tests.UsageExpectAndThrowTest.floatType":306,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":122,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":141,"org.easymock.tests.UsageVerifyTest.twoThrows":26,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":203,"org.easymock.samples.ExampleTest.voteAgainstRemoval":87,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":268,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":154,"org.easymock.tests2.UsageConstraintsTest.testNotNull":130,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":189,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":331,"org.easymock.tests2.UsageTest.defaultResetToNice":186,"org.easymock.samples.ExampleTest.voteAgainstRemovals":84,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":243,"org.easymock.tests.UsageVarargTest.differentLength":394,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":52,"org.easymock.tests2.CallbackTest.callback":211,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":399,"org.easymock.tests.UsageTest.openCallCountByLastCall":281,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":105,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":294,"org.easymock.tests.UsageCallCountTest.tooFewCalls":364,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":196,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":217,"org.easymock.tests.UsageThrowableTest.throwCheckedException":328,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":198,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":260,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":41,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":195,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":378,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":197,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":143,"org.easymock.tests2.CompareToTest.testGreateOrEqual":67,"org.easymock.tests.ObjectMethodsTest.testHashCode":360,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":159,"org.easymock.tests2.NameTest.nameForNiceMock":19,"org.easymock.tests2.DependencyTest.testInterfaceMocking":94,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":76,"org.easymock.samples.ExampleTest.addDocument":346,"org.easymock.tests2.DelegateToTest.testStubDelegate":207,"org.easymock.tests2.AnswerTest.stubAnswer":142,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":22,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":401,"org.easymock.tests.UsageVarargTest.varargLongAccepted":396,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":227,"org.easymock.tests.UsageExpectAndReturnTest.floatType":230,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":246,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":69,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":91,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":124,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":50,"org.easymock.tests.UsageThrowableTest.noUpperLimit":325,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":343,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":106,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":3,"org.easymock.tests2.SerializationTest.test":200,"org.easymock.tests2.UsageConstraintsTest.testSame":111,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":229,"org.easymock.samples.SupportTest.addDocument":348,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":374,"org.easymock.tests.GenericTest.testPackageScope":218,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":335,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":58,"org.easymock.tests2.NameTest.nameForMock":17,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":240,"org.easymock.tests2.UsageStrictMockTest.differentMethods":12,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":232,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":318,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":257,"org.easymock.tests2.MockedExceptionTest.testRealException":192,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":411,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":10,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":293,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":380,"org.easymock.tests2.NameTest.nameForStrictMock":18,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":96,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":61,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":148,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":125,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":33,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":173,"org.easymock.tests2.UsageStrictMockTest.range":11,"org.easymock.tests2.UsageConstraintsTest.lessThan":132,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":46,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":161,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":77,"org.easymock.tests2.CaptureTest.testCaptureRightOne":6,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":415,"org.easymock.tests2.UsageConstraintsTest.testOr":112,"org.easymock.tests.UsageRangeTest.combination":254,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":145,"org.easymock.tests.UsageTest.wrongArguments":29,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":382,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":233,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":241,"org.easymock.tests.UsageVarargTest.varargShortAccepted":395,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":367,"org.easymock.tests2.UsageConstraintsTest.cmpTo":117,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":140,"org.easymock.tests2.CompareToTest.testLessThan":64,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":185,"org.easymock.tests2.CaptureTest.testCaptureFromStub":7,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":371,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":402,"org.easymock.tests.UsageTest.unexpectedCallWithArray":280,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":21,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":365,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":242,"org.easymock.tests2.CaptureTest.testCapture":417,"org.easymock.tests2.UsageConstraintsTest.constraints":107,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":226,"org.easymock.samples.ExampleTest.addAndChangeDocument":89,"org.easymock.tests.UsageStrictMockTest.testVerify":358,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":36,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":357,"org.easymock.tests2.CompareToTest.testGreateThan":65,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":300,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":4,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":287,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":234,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":288,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":344,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":390,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":166,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":34}}]

[{"transplantationPoint":{"position":"org.easymock.EasyMock:1725","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.Capture:82","failures":[1,2,3,4,5,6,7,8,9,10,11,12,13],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[14,15],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:122","sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"expected","myArgument":"expected"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[16],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:255","failures":[17],"status":-1,"binaryOperator":"java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[18,19,20,21,22,23,24],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:104","sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","type":"CtThrowImpl"},"failures":[25],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[26,27],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[28,29,30,26],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1204","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[26],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1349","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[53],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"actual","actual":"actual","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[16],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[54,55,56],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[57,58,59,60],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:90","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[61,62,63],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1776","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","type":"CtInvocationImpl"},"failures":[29],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"regex"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:281","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[64,44],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1928","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:40","sourceCode":"return java.lang.Object.equals(java.lang.Object)","type":"CtReturnImpl"},"failures":[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,54,183,28,0,30,26,184,58,59,185,186,187,188,189,190,44,56,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,52,216,217,218,219,220,221,222,2,223,8,224,11,13,225,226,227,228,229,230],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1964","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[231,232,233,66,67,68,69,70,71,72,73,74,75,92,94,95,234,235,96,97,98,99,100,101,102,103,104,105,106,107,236,149,150,151,152,237,160,161,162,238,239,240,163,241,164,165,166,167,168,242,243,169,170,171,172,174,175,179,182,54,244,183,245,28,29,0,246,26,27,247,248,53,249,55,250,251,252,253,254,255,256,184,257,185,258,188,189,44,56,191,192,259,260,194,195,199,200,201,202,204,205,207,208,209,211,216,222,223,3,4,5,6,7,8,224,9,11,261,13,262,225,226,227,228,229,230],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.RecordState:251","sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:212","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[263,264,265,241,266,267],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[268,269,270,271,272,273,274,275],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"failures":[276,277,278,279,280,281],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[282,283],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:336","sourceCode":"this.org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:340","sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[214],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior","threadSafe":"shouldBeUsedInOneThread"}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:47","sourceCode":"this.T = T","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"potentialValue":"potentialValue"}},{"position":"org.easymock.internal.RecordState:233","failures":[284,285,286,287,288,231,289,232,290,233,291,292,293,294,295,296,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,297,85,86,87,88,89,90,91,92,93,298,94,95,234,235,96,97,98,99,100,101,299,102,103,104,105,106,300,301,107,236,302,108,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,328,329,330,149,150,151,152,153,154,237,331,332,333,155,156,157,158,159,334,335,160,161,162,238,239,240,163,241,164,165,166,167,168,242,243,169,170,171,172,173,174,175,276,276,277,277,176,177,178,179,180,181,336,182,337,338,54,339,340,244,183,245,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,28,29,0,246,30,26,27,25,247,248,357,53,249,358,55,250,251,252,253,254,255,256,184,359,360,58,59,60,257,185,186,187,258,188,189,190,361,44,56,191,192,362,259,260,193,194,195,363,364,196,197,365,198,199,200,201,202,203,204,205,366,206,207,208,209,367,368,369,370,371,210,372,373,49,50,374,211,212,213,214,51,215,52,216,217,218,375,219,220,221,376,222,2,223,3,4,5,6,7,8,224,9,11,12,261,13,262,225,226,227,228,229,230],"status":-1,"binaryOperator":"(org.easymock.internal.ExpectedInvocation) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[356,28,0,30,26,25,252,184,2,3,11],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[360,377],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:206","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[354,250,256,378],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[82,170,352,353,195,364,196,365,211],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"failures":[326,52],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"failures":[296],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","type":"CtReturnImpl"},"failures":[166,167,228,229],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1554","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:720","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[27],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:734","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:110","sourceCode":"break","type":"CtBreakImpl"},"failures":[379,1,223,12,261],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:288","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[306,376],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:66","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[380,265,298,234,235,149,161,162,241,166,361,259,260,228],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MocksControl:105","failures":[284,285,286,287,381,288,231,289,232,382,290,233,291,292,293,383,61,384,385,294,295,296,65,66,67,386,387,388,389,390,391,392,68,69,70,71,72,73,74,75,31,32,33,34,76,77,78,79,80,81,82,393,83,84,394,297,395,85,86,87,88,89,90,91,35,36,37,38,39,92,93,265,298,94,95,234,235,96,97,98,99,396,100,101,299,102,103,104,105,106,397,300,398,107,236,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,399,400,40,149,150,151,152,153,154,401,402,403,404,405,406,407,408,409,410,411,412,237,331,332,333,155,156,157,158,159,334,413,414,415,160,161,162,416,238,239,417,418,240,163,241,164,165,166,167,168,242,169,170,171,172,173,174,419,175,176,177,178,179,337,349,420,352,421,353,354,355,356,28,422,29,0,246,30,26,27,25,247,248,357,53,249,358,55,250,251,252,253,254,255,256,184,359,360,59,188,189,190,361,44,56,191,192,362,259,260,193,194,423,424,195,363,364,196,197,365,45,46,47,48,425,426,427,428,429,198,62,430,431,432,433,434,199,200,201,202,203,204,205,366,206,207,208,209,367,435,368,369,370,371,436,437,438,439,440,210,63,441,442,443,444,445,373,49,50,374,211,212,213,214,51,215,52,216,217,218,375,219,220,221,376,222,2,223,3,4,5,6,7,8,224,9,11,12,261,13,446,262,225,226,227,228,229,230],"status":-1,"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":28,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":92,"org.easymock.tests2.UsageTest.argumentsOrdered":260,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":208,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":62,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":314,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":56,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":176,"org.easymock.tests2.DelegateToTest.testReturnException":219,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":77,"org.easymock.tests.MockingTest.testPartialClassMocking":328,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":435,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":300,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":323,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":109,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":342,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":218,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":20,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":27,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":150,"org.easymock.tests2.UsageTest.wrongArguments":361,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":445,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":33,"org.easymock.samples.ExampleTest.answerVsDelegate":170,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":40,"org.easymock.tests2.UsageConstraintsTest.testNull":0,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":338,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":207,"org.easymock.tests2.CaptureTest.testPrimitive":4,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":154,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":128,"org.easymock.tests.UsageTest.moreThanOneArgument":93,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":337,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":157,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":416,"org.easymock.tests.UsageTest.argumentsOrdered":235,"org.easymock.tests.UsageVarargTest.varargIntAccepted":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":319,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":87,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":24,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":433,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":306,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":91,"org.easymock.tests.ReplayStateInvalidUsageTest.times":409,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":210,"org.easymock.tests2.AnswerTest.answer":195,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":25,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":321,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":48,"org.easymock.tests2.CaptureTest.testAnd":2,"org.easymock.tests2.UsageTest.strictResetToDefault":189,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":43,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":156,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":203,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":332,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":418,"org.easymock.tests2.DelegateToTest.testDelegate":222,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":124,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":80,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":39,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":413,"org.easymock.tests2.CaptureTest.testCapture1_2446744":5,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":122,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":46,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":403,"org.easymock.tests.UsageThrowableTest.throwError":68,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":61,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":434,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":159,"org.easymock.samples.PartialClassMockTest.testGetArea":243,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":404,"org.easymock.tests.MockingTest.testInterfaceMocking":399,"org.easymock.tests2.CompareToTest.testLessOrEqual":378,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":88,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":295,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":391,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":110,"org.easymock.tests2.UsageTest.niceToStrict":44,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":273,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":304,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":185,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":442,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":118,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":266,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":204,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":286,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":287,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":31,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":270,"org.easymock.tests.UsageOverloadedMethodTest.overloading":66,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":84,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":249,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":140,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":65,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":53,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":9,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":396,"org.easymock.tests2.EasyMockSupportClassTest.testAll":341,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":108,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":126,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":47,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":37,"org.easymock.tests2.CaptureTest.testCaptureAll":223,"org.easymock.tests.MockNameTest.defaultName":392,"org.easymock.tests2.UsageConstraintsTest.testMatches":358,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":401,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":158,"org.easymock.samples.ExampleTest.voteForRemovals":174,"org.easymock.tests.UsageVarargTest.allKinds":106,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":160,"org.easymock.samples.BasicClassMockTest.testPrintContent":181,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":38,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":74,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":262,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":430,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":81,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":376,"org.easymock.tests2.UsageConstraintsTest.greaterThan":250,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":331,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":245,"org.easymock.samples.ExampleTest.voteForRemoval":171,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":213,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":384,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":188,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":335,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":311,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":201,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":70,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":76,"org.easymock.tests2.CaptureTest.testCaptureFirst":13,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":375,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":310,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":202,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":194,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":395,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":136,"org.easymock.tests2.UsageTest.moreThanOneArgument":190,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":51,"org.easymock.tests2.CaptureTest.testCapture2_2446744":261,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":322,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":105,"org.easymock.tests.GenericTest.testBridgedEquals":17,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":271,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":268,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":290,"org.easymock.tests.UsageExpectAndReturnTest.longType":132,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":35,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":199,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":127,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":15,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":255,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":334,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":125,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":155,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":292,"org.easymock.tests.UsageCallCountTest.tooManyCalls":233,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":288,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":137,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":444,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":114,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":73,"org.easymock.tests.MockingTest.testNiceClassMocking":41,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":346,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":14,"org.easymock.tests2.UsageConstraintsTest.testContains":357,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":381,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":50,"org.easymock.tests2.UsageConstraintsTest.testFind":29,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":67,"org.easymock.tests.MockTypeTest.fromEasyMockClass":383,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":240,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":353,"org.easymock.tests.UsageExpectAndReturnTest.object":139,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":340,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":443,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":206,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":101,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":21,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":389,"org.easymock.tests.UsageTest.exactCallCountByLastCall":96,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":272,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":107,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":309,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":397,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":238,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":19,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":145,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":97,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":83,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":426,"org.easymock.tests2.EasyMockSupportTest.testVerify":367,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":239,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":82,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":285,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":45,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":446,"org.easymock.tests.UsageVarargTest.varargCharAccepted":100,"org.easymock.tests2.CaptureTest.testCaptureMultiple":1,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":225,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":327,"org.easymock.tests2.UsageTest.openCallCountByLastCall":191,"org.easymock.tests.DefaultClassInstantiatorTest.object":42,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":209,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":274,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":284,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":387,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":380,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":116,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":71,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":439,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":425,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":244,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":115,"org.easymock.tests.CapturesMatcherTest.test":379,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":146,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":291,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":344,"org.easymock.tests2.UsageTest.resumeIfFailure":193,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":79,"org.easymock.tests2.StubTest.stubWithReturnValue":216,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":18,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":138,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":256,"org.easymock.tests2.SerializationTest.testAllMockedMethod":60,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":320,"org.easymock.samples.SupportTest.voteForRemovals":179,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":267,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":16,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":428,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":121,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":57,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":326,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":363,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":398,"org.easymock.tests.UsageExpectAndThrowTest.object":119,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":253,"org.easymock.tests2.DelegateToTest.testWrongClass":221,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":85,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":86,"org.easymock.tests.UsageStrictMockTest.range":166,"org.easymock.samples.ConstructorCalledMockTest.testTax":276,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":423,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":366,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":345,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":269,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":120,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":186,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":411,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":234,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":32,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":263,"org.easymock.tests2.CaptureTest.testCaptureNone":224,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":296,"org.easymock.tests.UsageUnorderedTest.message":149,"org.easymock.tests.UsageVerifyTest.twoReturns":162,"org.easymock.tests.UsageVarargTest.varargByteAccepted":104,"org.easymock.tests2.ThreadingTest.testThreadSafe":212,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":232,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":390,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":180,"org.easymock.tests2.CaptureTest.testCapture_2617107":3,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":415,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":153,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":324,"org.easymock.tests2.UsageConstraintsTest.any":247,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":408,"org.easymock.tests2.StubTest.stub":52,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":293,"org.easymock.tests.UsageExpectAndThrowTest.longType":112,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":78,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":325,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":407,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":227,"org.easymock.tests2.SerializationTest.testClass":58,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":198,"org.easymock.tests.LimitationsTest.mockNativeMethod":301,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":148,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":303,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":438,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":230,"org.easymock.tests2.NameTest.nameForMocksControl":371,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":440,"org.easymock.tests2.MockedExceptionTest.testMockedException":49,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":95,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":421,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":113,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":330,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":336,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":187,"org.easymock.tests.MockingTest.testNicePartialClassMocking":329,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":339,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":436,"org.easymock.tests2.CaptureTest.testCaptureLast":8,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":414,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":26,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":351,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":254,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":420,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":129,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":117,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":259,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":359,"org.easymock.samples.ExampleTest.removeNonExistingDocument":419,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":441,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":405,"org.easymock.tests.UsageStrictMockTest.differentMethods":167,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":427,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":214,"org.easymock.tests.UsageExpectAndThrowTest.floatType":111,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":55,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":196,"org.easymock.tests.UsageVerifyTest.twoThrows":161,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":343,"org.easymock.samples.ExampleTest.voteAgainstRemoval":172,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":294,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":315,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":183,"org.easymock.tests2.UsageConstraintsTest.testNotNull":184,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":75,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":373,"org.easymock.tests2.UsageTest.defaultResetToNice":362,"org.easymock.samples.ExampleTest.voteAgainstRemovals":169,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":144,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":316,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":437,"org.easymock.tests.UsageVarargTest.differentLength":299,"org.easymock.tests2.CallbackTest.callback":211,"org.easymock.tests2.UsageConstraintsTest.equals":422,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":278,"org.easymock.tests.UsageTest.openCallCountByLastCall":94,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":354,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":152,"org.easymock.tests.UsageCallCountTest.tooFewCalls":231,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":348,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":34,"org.easymock.tests.UsageThrowableTest.throwCheckedException":72,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":264,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":236,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":350,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":63,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":347,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":410,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":349,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":365,"org.easymock.tests.ObjectMethodsTest.testHashCode":388,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":23,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":215,"org.easymock.tests2.NameTest.nameForNiceMock":370,"org.easymock.tests2.DependencyTest.testInterfaceMocking":217,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":22,"org.easymock.samples.ExampleTest.addDocument":173,"org.easymock.tests2.DelegateToTest.testStubDelegate":220,"org.easymock.tests2.AnswerTest.stubAnswer":197,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":164,"org.easymock.tests.UsageVarargTest.varargLongAccepted":103,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":168,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":313,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":147,"org.easymock.tests.UsageExpectAndReturnTest.floatType":131,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":372,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":277,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":432,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":394,"org.easymock.tests.UsageThrowableTest.noUpperLimit":69,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":251,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":355,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":6,"org.easymock.tests2.SerializationTest.test":59,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":282,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":130,"org.easymock.tests2.UsageConstraintsTest.testSame":246,"org.easymock.samples.SupportTest.addDocument":178,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":406,"org.easymock.tests.GenericTest.testPackageScope":302,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":417,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":308,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":431,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":400,"org.easymock.tests2.NameTest.nameForMock":368,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":141,"org.easymock.tests2.UsageStrictMockTest.differentMethods":229,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":281,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":64,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":133,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":123,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":386,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":333,"org.easymock.tests2.MockedExceptionTest.testRealException":374,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":385,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":424,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":318,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":226,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":317,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":412,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":151,"org.easymock.tests2.NameTest.nameForStrictMock":369,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":275,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":352,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":54,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":252,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":257,"org.easymock.tests2.UsageStrictMockTest.range":228,"org.easymock.tests2.UsageConstraintsTest.lessThan":360,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":429,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":200,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":312,"org.easymock.tests2.CaptureTest.testCaptureRightOne":11,"org.easymock.tests2.UsageConstraintsTest.testOr":30,"org.easymock.tests.UsageRangeTest.combination":237,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":182,"org.easymock.tests.UsageTest.wrongArguments":298,"org.easymock.tests2.MockBuilderTest.testWithConstructor":279,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":134,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":142,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":305,"org.easymock.tests.UsageVarargTest.varargShortAccepted":102,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":283,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":382,"org.easymock.tests2.UsageConstraintsTest.cmpTo":248,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":364,"org.easymock.tests2.CompareToTest.testLessThan":377,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":307,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":192,"org.easymock.tests2.CaptureTest.testCaptureFromStub":12,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":402,"org.easymock.tests.UsageTest.unexpectedCallWithArray":265,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":241,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":289,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":280,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":143,"org.easymock.tests2.CaptureTest.testCapture":10,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":165,"org.easymock.tests2.UsageConstraintsTest.constraints":356,"org.easymock.samples.ExampleTest.addAndChangeDocument":175,"org.easymock.tests.UsageStrictMockTest.testVerify":242,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":177,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":163,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":36,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":7,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":89,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":135,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":90,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":297,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":98,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":205}}]

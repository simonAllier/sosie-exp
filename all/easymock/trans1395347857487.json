[{"transplant":{"position":"org.easymock.internal.MocksControl:197","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1831","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(double , double))","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:37","sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:61","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(org.easymock.internal.matchers.Equals.getExpected(), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[1,2],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,1,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,0,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:390","sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"failures":[131],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:188","sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:43","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"equals\", new java.lang.Class[]{ java.lang.Object.java.lang.Object })","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:320","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[259,260],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","shouldBeUsedInOneThread":"threadSafe"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[261],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"arg"}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[15,16,18,19,20,21,22,23,262,29,30,31,32,33,34,53,58,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,124,128,129,138,163,169,176,230,231,232,233],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[14,15,16,33,34,44,47,48,1,84,90,91,118,119,120,121,122,123,126,127,128,129,130,154,156,160,161,162,188,189,194,195,199,200,201,202,203,204,205,206,207,208,209,263,210,211,212,213,214,215,216,217,0,218,219,220,264,221,222,223,224,245,246,247,248,249,250,251,252,253,254,255,256,257,258],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Any:29","sourceCode":"new org.easymock.internal.matchers.Any()","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[265,266,267,268,269,270,271,272,273,274,259,275,276,277,278,279,280,281,282,283,284,285,286,287,3,4,5,6,7,8,288,289,290,291,292,293,294,295,296,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,297,298,299,262,300,24,301,302,303,304,25,26,305,27,306,307,308,309,310,28,311,29,30,31,32,33,34,35,36,37,312,38,39,313,40,41,42,43,44,314,45,46,315,316,47,48,49,50,51,52,317,318,319,53,54,55,56,57,58,59,60,61,320,321,322,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,323,324,325,326,327,328,329,330,331,332,82,83,1,84,85,86,87,88,89,90,91,333,334,335,336,337,338,339,92,340,341,342,343,344,345,346,347,348,93,349,350,351,352,353,354,355,356,357,358,359,360,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,361,126,127,128,129,130,362,131,363,364,365,366,367,368,132,133,134,135,136,369,137,138,139,140,141,142,143,144,370,145,371,372,373,374,375,376,377,378,379,146,380,381,382,147,148,383,384,385,386,149,150,151,152,153,154,155,156,157,158,159,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,160,412,161,162,163,413,164,165,166,167,414,415,168,416,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,417,418,188,419,420,189,421,190,422,423,424,191,425,426,427,428,429,430,431,432,433,434,435,436,437,192,193,194,195,196,197,198,438,439,440,441,200,201,202,203,442,204,205,206,207,208,209,263,210,211,212,213,214,215,216,217,0,218,219,220,264,221,222,223,224,225,443,444,445,446,447,448,449,450,451,452,453,454,455,226,456,457,227,228,229,230,231,232,233,458,459,460,461,462,463,464,465,466,467,468,469,234,235,236,470,237,238,471,472,239,240,260,241,242,243,473,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[165,422,424],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,17,18,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,50,51,52,54,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,84,87,88,89,90,91,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,371,372,373,374,375,376,377,378,379,146,147,148,383,384,151,152,155,156,157,158,159,390,393,403,409,160,161,162,163,164,165,166,167,168,416,170,171,173,174,177,180,182,184,185,186,187,188,189,190,191,425,426,427,428,429,430,431,432,433,434,435,436,437,193,194,197,198,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,0,218,219,220,221,222,223,224,225,449,226,227,228,229,230,231,232,233,463,234,235,236,470,237,238,471,472,239,240,241,242,244,245,246,247,248,250,251,252,253,254,255,258],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:192","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"failures":[474],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:93","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[265,266,267,268,269,270,271,272,273,274,259,275,276,277,278,279,280,281,282,283,284,285,286,287,3,4,5,6,7,8,288,289,290,291,292,293,294,295,296,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,297,298,299,262,300,24,301,302,303,304,25,26,305,27,306,307,308,309,310,28,311,29,30,31,32,33,34,35,36,37,312,38,39,313,40,41,42,43,44,314,45,46,315,316,47,48,49,50,51,52,317,318,319,53,54,55,56,57,58,59,60,61,320,321,322,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,323,324,325,475,326,327,328,329,330,331,476,332,82,83,1,84,85,86,87,88,89,90,91,333,334,335,336,337,338,339,92,340,341,342,343,344,345,346,347,348,93,349,350,351,352,353,354,355,356,357,358,359,360,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,361,126,127,128,129,130,362,131,363,364,365,366,367,368,132,133,134,135,136,369,137,138,139,140,141,142,143,144,370,145,371,372,373,374,374,375,375,376,377,378,379,146,477,380,381,478,382,147,148,383,479,384,385,386,149,480,150,151,152,153,154,155,156,157,158,159,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,160,412,161,162,163,413,164,165,166,167,414,415,168,416,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,417,418,188,419,420,189,421,190,422,423,424,191,425,426,427,428,429,430,431,432,433,434,435,436,437,192,193,194,195,196,197,198,438,439,440,441,199,200,201,202,203,442,204,205,206,207,208,209,263,210,211,212,213,214,215,216,217,0,218,219,220,264,221,222,223,224,225,443,481,444,445,446,447,448,449,450,451,452,453,454,455,226,456,457,227,228,229,230,231,232,233,458,459,460,461,462,463,464,465,466,467,468,469,234,235,236,470,237,238,471,472,239,240,260,241,242,243,473,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[177],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"failures":[340],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[280,286,3,5,6,7,8,288,289,290,292,293,295,296,9,10,11,12,14,15,16,17,18,19,20,21,22,23,297,298,299,262,300,24,301,29,30,31,32,33,34,35,36,37,38,39,313,40,41,42,43,44,45,47,48,49,50,51,52,317,318,319,53,54,55,56,57,58,59,60,61,320,321,322,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,324,82,83,1,84,85,86,87,88,89,90,91,333,334,335,336,337,339,92,341,342,343,344,356,357,358,359,360,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,361,126,127,128,129,130,362,132,133,134,135,136,369,137,138,139,140,141,142,143,144,145,371,372,373,376,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,416,169,170,171,172,173,174,175,176,177,178,179,180,181,182,184,191,425,426,427,428,429,430,431,432,433,434,435,436,437,192,193,194,195,196,197,198,200,201,202,203,204,205,206,207,208,209,263,210,211,212,213,214,215,216,217,0,218,219,220,264,221,222,223,224,225,449,450,226,456,457,227,228,229,230,231,232,233,463,464,235,472,260,241,242,243,473,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:62","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>()","type":"CtAssignmentImpl"},"failures":[14,15,33,44,47,1,84,90,91,118,119,120,121,122,126,127,128,129,130,154,160,161,188,194,199,200,201,202,203,204,205,206,207,208,209,263,210,211,212,213,214,215,216,217,0,218,219,220,264,221,222,223,224,245,246,247,248,249,250,251,252,253,254,255,256,257,258],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:155","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:416","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[189],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:61","sourceCode":"throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int))","type":"CtThrowImpl"},"failures":[482],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:118","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"result"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":203,"org.easymock.tests2.UsageTest.argumentsOrdered":179,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":53,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":435,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":464,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":259,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":174,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":376,"org.easymock.tests2.DelegateToTest.testReturnException":241,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":30,"org.easymock.tests.MockingTest.testPartialClassMocking":25,"org.easymock.tests.MockClassControlTest.testToString":363,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":413,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":324,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":424,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":397,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":393,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":62,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":416,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":209,"org.easymock.tests2.UsageTest.wrongArguments":172,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":126,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":455,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":11,"org.easymock.samples.ExampleTest.answerVsDelegate":140,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":294,"org.easymock.tests2.UsageConstraintsTest.testNull":205,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":307,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":185,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":434,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":368,"org.easymock.tests2.CaptureTest.testPrimitive":248,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":130,"org.easymock.tests.UsageTest.moreThanOneArgument":54,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":81,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":184,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":134,"org.easymock.tests.UsageTest.argumentsOrdered":60,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":356,"org.easymock.tests.UsageVarargTest.varargIntAccepted":37,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":279,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":118,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":146,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":468,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":148,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":267,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":122,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":449,"org.easymock.tests.ReplayStateInvalidUsageTest.times":352,"org.easymock.tests2.DependencyTest.testClassMocking":414,"org.easymock.tests2.AnswerTest.answer":226,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":263,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":281,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":159,"org.easymock.tests2.CaptureTest.testAnd":245,"org.easymock.tests2.UsageTest.strictResetToDefault":170,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":478,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":189,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":133,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":429,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":116,"org.easymock.tests2.DelegateToTest.testDelegate":244,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":360,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":77,"org.easymock.tests.LimitationsTest.mockFinalMethod":311,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":33,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":52,"org.easymock.tests2.DependencyTest.testClassMockingSupport":415,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":339,"org.easymock.tests2.CaptureTest.testCapture1_2446744":249,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":418,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":75,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":157,"org.easymock.tests.UsageThrowableTest.throwError":16,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":347,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":293,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":469,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":136,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":411,"org.easymock.samples.PartialClassMockTest.testGetArea":377,"org.easymock.tests.MockingTest.testInterfaceMocking":305,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":348,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":119,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":318,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":398,"org.easymock.tests2.UsageTest.niceToStrict":173,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":63,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":338,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":265,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":147,"org.easymock.tests2.MockBuilderTest.testCreateMock":386,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":406,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":452,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":2,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":71,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":430,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":322,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":3,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":9,"org.easymock.tests.UsageOverloadedMethodTest.overloading":137,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":408,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":402,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":214,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":262,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":105,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":369,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":213,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":254,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":312,"org.easymock.tests2.EasyMockSupportClassTest.testAll":390,"org.easymock.tests.MockClassControlTest.testEquals":367,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":46,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":79,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":158,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":50,"org.easymock.tests2.CaptureTest.testCaptureAll":246,"org.easymock.tests.MockNameTest.defaultName":344,"org.easymock.tests2.UsageConstraintsTest.testMatches":215,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":135,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":345,"org.easymock.samples.ExampleTest.voteForRemovals":144,"org.easymock.tests.UsageVarargTest.allKinds":44,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":123,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":51,"org.easymock.samples.BasicClassMockTest.testPrintContent":379,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":22,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":192,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":473,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":465,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":34,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":476,"org.easymock.tests2.UsageConstraintsTest.greaterThan":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":391,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":115,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":422,"org.easymock.samples.ExampleTest.voteForRemoval":141,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":332,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":423,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":152,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":295,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":417,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":169,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":13,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":385,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":272,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":427,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":18,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":388,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":29,"org.easymock.tests2.CaptureTest.testCaptureFirst":258,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":260,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":271,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":428,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":181,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":301,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":101,"org.easymock.tests2.UsageTest.moreThanOneArgument":171,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":154,"org.easymock.tests2.CaptureTest.testCapture2_2446744":257,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":282,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":43,"org.easymock.tests.GenericTest.testBridgedEquals":316,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":482,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":289,"org.easymock.tests.UsageExpectAndReturnTest.longType":97,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":425,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":48,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":80,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":264,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":361,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":78,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":132,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":342,"org.easymock.tests.UsageCallCountTest.tooManyCalls":290,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":407,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":102,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":454,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":67,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":21,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":237,"org.easymock.tests.MockingTest.testNiceClassMocking":308,"org.easymock.tests.MockingTest.testClassMocking":303,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":4,"org.easymock.tests2.UsageConstraintsTest.testContains":212,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":232,"org.easymock.tests2.UsageConstraintsTest.testFind":204,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":138,"org.easymock.tests.MockTypeTest.fromEasyMockClass":292,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":161,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":82,"org.easymock.tests.UsageExpectAndReturnTest.object":104,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":188,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":453,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":433,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":39,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":336,"org.easymock.tests.UsageTest.exactCallCountByLastCall":61,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":14,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":270,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":323,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":357,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":443,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":110,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":35,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":299,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":459,"org.easymock.tests.MockClassControlTest.testHashCode":366,"org.easymock.tests2.EasyMockSupportTest.testVerify":437,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":400,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":358,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":297,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":321,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":156,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":199,"org.easymock.tests.UsageVarargTest.varargCharAccepted":38,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":475,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":193,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":287,"org.easymock.tests2.UsageTest.openCallCountByLastCall":175,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":436,"org.easymock.tests.DefaultClassInstantiatorTest.object":326,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":320,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":334,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":401,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":69,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":19,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":447,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":458,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":421,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":365,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":68,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":111,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":341,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":409,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":364,"org.easymock.tests2.UsageTest.resumeIfFailure":180,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":291,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":32,"org.easymock.tests2.StubTest.stubWithReturnValue":163,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":479,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":103,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":221,"org.easymock.tests2.SerializationTest.testAllMockedMethod":236,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":280,"org.easymock.samples.SupportTest.voteForRemovals":373,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":314,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":461,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":74,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":286,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":456,"org.easymock.tests.UsageExpectAndThrowTest.object":72,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":325,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":219,"org.easymock.tests2.DelegateToTest.testWrongClass":243,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":90,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":91,"org.easymock.tests.UsageStrictMockTest.range":86,"org.easymock.samples.ConstructorCalledMockTest.testTax":374,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":440,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":432,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":470,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":73,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":383,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":387,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":59,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":354,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":10,"org.easymock.tests2.CaptureTest.testCaptureNone":253,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":319,"org.easymock.tests.UsageUnorderedTest.message":47,"org.easymock.tests.UsageVerifyTest.twoReturns":125,"org.easymock.tests.UsageVarargTest.varargByteAccepted":42,"org.easymock.tests2.ThreadingTest.testThreadSafe":151,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":404,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":8,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":337,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":378,"org.easymock.tests2.CaptureTest.testCapture_2617107":247,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":340,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":129,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":284,"org.easymock.tests2.UsageConstraintsTest.any":210,"org.easymock.tests2.StubTest.stub":162,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":351,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":343,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":31,"org.easymock.tests.UsageExpectAndThrowTest.longType":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":285,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":330,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":350,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":195,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":463,"org.easymock.tests2.SerializationTest.testClass":234,"org.easymock.tests.LimitationsTest.mockNativeMethod":28,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":113,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":315,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":446,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":198,"org.easymock.tests2.NameTest.nameForMocksControl":167,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":448,"org.easymock.tests2.MockedExceptionTest.testMockedException":231,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":392,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":58,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":412,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":27,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":66,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":182,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":384,"org.easymock.tests.MockingTest.testNicePartialClassMocking":26,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":187,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":444,"org.easymock.tests2.CaptureTest.testCaptureLast":252,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":92,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":208,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":240,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":220,"org.easymock.tests.MockingTest.testTwoMocks":304,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":94,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":70,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":178,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":223,"org.easymock.samples.ExampleTest.removeNonExistingDocument":370,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":451,"org.easymock.tests.UsageStrictMockTest.differentMethods":87,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":93,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":460,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":328,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":153,"org.easymock.tests2.MockBuilderTest.testCreateMockString":150,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":362,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":394,"org.easymock.tests.UsageExpectAndThrowTest.floatType":64,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":389,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":227,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":481,"org.easymock.tests.UsageVerifyTest.twoThrows":124,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":298,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":403,"org.easymock.samples.ExampleTest.voteAgainstRemoval":142,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":275,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":317,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":190,"org.easymock.tests.LimitationsTest.privateConstructor":310,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":261,"org.easymock.tests2.UsageConstraintsTest.testNotNull":222,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":23,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":230,"org.easymock.tests2.UsageTest.defaultResetToNice":177,"org.easymock.samples.ExampleTest.voteAgainstRemovals":139,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":109,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":276,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":445,"org.easymock.tests.UsageVarargTest.differentLength":313,"org.easymock.tests2.CallbackTest.callback":191,"org.easymock.tests2.UsageConstraintsTest.equals":442,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":419,"org.easymock.tests.UsageTest.openCallCountByLastCall":57,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":200,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":128,"org.easymock.tests.UsageCallCountTest.tooFewCalls":6,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":471,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":12,"org.easymock.tests.UsageThrowableTest.throwCheckedException":20,"org.easymock.tests.MockingTest.testStrictClassMocking":302,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":15,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":239,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":450,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":238,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":353,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":472,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":229,"org.easymock.tests.ObjectMethodsTest.testHashCode":335,"org.easymock.tests2.NameTest.nameForNiceMock":166,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":155,"org.easymock.tests2.DependencyTest.testInterfaceMocking":168,"org.easymock.samples.ExampleTest.addDocument":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":405,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":410,"org.easymock.tests2.DelegateToTest.testStubDelegate":242,"org.easymock.tests2.AnswerTest.stubAnswer":228,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":84,"org.easymock.tests.UsageVarargTest.varargLongAccepted":41,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":88,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":274,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":112,"org.easymock.tests.UsageExpectAndReturnTest.floatType":96,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":225,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":375,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":467,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":0,"org.easymock.tests.UsageThrowableTest.noUpperLimit":17,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":300,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":201,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":438,"org.easymock.tests2.SerializationTest.test":235,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":250,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":327,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":95,"org.easymock.tests2.UsageConstraintsTest.testSame":206,"org.easymock.samples.SupportTest.addDocument":372,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":395,"org.easymock.tests.GenericTest.testPackageScope":45,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":359,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":269,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":466,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":306,"org.easymock.tests2.NameTest.nameForMock":164,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":106,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":480,"org.easymock.tests2.UsageStrictMockTest.differentMethods":197,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":420,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":98,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":76,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":333,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":117,"org.easymock.tests2.MockedExceptionTest.testRealException":233,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":296,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":441,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":278,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":194,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":277,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":127,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":355,"org.easymock.tests2.NameTest.nameForStrictMock":165,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":382,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":160,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":186,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":439,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":218,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":329,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":380,"org.easymock.tests2.UsageStrictMockTest.range":196,"org.easymock.tests2.UsageConstraintsTest.lessThan":224,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":462,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":426,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":273,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":399,"org.easymock.tests2.CaptureTest.testCaptureRightOne":255,"org.easymock.tests2.UsageConstraintsTest.testOr":207,"org.easymock.tests.UsageRangeTest.combination":114,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":183,"org.easymock.tests.UsageTest.wrongArguments":56,"org.easymock.tests2.MockBuilderTest.testWithConstructor":477,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":396,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":131,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":99,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":107,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":266,"org.easymock.tests.UsageVarargTest.varargShortAccepted":40,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":331,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":288,"org.easymock.tests2.UsageConstraintsTest.cmpTo":211,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":457,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":268,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":176,"org.easymock.tests2.CaptureTest.testCaptureFromStub":256,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":346,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":381,"org.easymock.tests.UsageTest.unexpectedCallWithArray":55,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":1,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":7,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":474,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":108,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":85,"org.easymock.tests2.UsageConstraintsTest.constraints":202,"org.easymock.samples.ExampleTest.addAndChangeDocument":145,"org.easymock.tests.UsageStrictMockTest.testVerify":89,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":371,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":83,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":49,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":251,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":120,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":100,"org.easymock.tests.LimitationsTest.abstractClass":309,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":121,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":24,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":431,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":36}}]

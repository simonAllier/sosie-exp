[{"transplant":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[1,2,3,4],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:65","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double)","type":"CtInvocationImpl"},"failures":[5,6,7,8,9,10],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:269","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","type":"CtThrowImpl"},"failures":[11,12,13,14],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:53","sourceCode":"return true","type":"CtReturnImpl"},"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"failures":[45,46,47,48,49,50,51,52,53,54,55,56],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[1,3,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,91,92,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ClassProxyFactory:168","failures":[3,114,115,57,58,59,60,61,62,116,64,117,118,119,120,121,122,123,124,78,79,80,81,82,83,84,125,85,86,87,88,126,89,127,128,90,91,92,93,94,95,98,129,130,131,132,133,134,135,136,137,99,138,139,101,102,140,104,105,106,107,108,109,141,142,143,144,110,111,112,113,145],"status":-1,"binaryOperator":"java.lang.reflect.Method[] != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[146,1,2,3,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,30,162,163,164,165,0,31,32,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,57,58,59,60,182,61,62,63,64,65,66,67,183,184,68,69,71,72,73,74,75,76,77,15,16,17,18,19,20,21,22,23,24,25,26,27,28,78,79,185,80,81,82,83,84,85,86,87,88,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,127,128,90,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,33,228,229,230,231,55,232,233,234,235,236,237,238,56,91,92,93,94,95,239,240,241,242,243,244,245,246,247,248,249,250,251,252,5,6,253,254,255,256,257,258,7,259,260,261,262,263,264,8,265,266,267,268,98,269,270,34,35,271,272,36,37,273,274,275,276,277,278,279,280,281,282,283,284,285,38,99,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,9,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,101,102,332,39,40,333,334,335,10,336,337,338,339,41,340,341,342,343,344,345,346,347,29,29,348,349,43,350,351,44,352,353,111,112,113],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.internal.LastControl:70","failures":[146,1,2,3,147,148,149,150,151,354,355,152,153,154,155,156,157,158,356,15,16,17,18,19,20,21,22,23,24,25,26,27,28,84,186,187,188,189,190,191,192,193,194,195,357,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,223,226,239,240,248,249,250,251,252,281,282,283,284,285,38,314,9,319,331,43,350],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:202","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[146,1,2,151,354,355,152,153,154,155,156,157,158,159,160,161,162,163,164,165,0,31,32,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,57,58,59,60,182,61,62,63,64,65,66,67,183,184,69,71,73,74,76,15,16,17,18,19,20,21,22,23,24,25,26,27,28,78,79,185,80,81,82,84,86,87,88,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,127,128,90,213,214,358,215,216,217,359,218,219,220,221,222,223,224,225,226,227,33,228,229,231,232,233,234,235,237,238,91,91,92,92,93,360,361,362,239,240,241,242,243,363,248,249,250,251,252,5,6,253,254,255,256,257,258,7,259,260,261,262,263,264,8,265,266,267,268,98,269,270,271,272,36,37,273,364,11,12,274,275,277,280,281,282,283,284,285,38,99,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,365,366,306,307,308,309,310,311,312,313,314,9,367,368,369,315,316,317,318,319,320,321,322,323,324,325,327,328,329,330,331,101,103,332,39,40,333,334,335,10,336,337,338,339,370,371,13,14,345,372,346,347,348,349,350,351,44,352,353,111,112,113,373,374,375,376,377],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"control"}},{"position":"org.easymock.internal.matchers.EqualsWithDelta:40","failures":[204],"status":-1,"binaryOperator":"(((java.lang.Number.doubleValue()) - (java.lang.Number.doubleValue())) <= (java.lang.Number.doubleValue())) && ((java.lang.Number.doubleValue()) <= ((java.lang.Number.doubleValue()) + (java.lang.Number.doubleValue())))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:194","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n    return java.lang.Number.byteValue();\n} else if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","type":"CtIfImpl"},"failures":[153,57,58,59,60,182,61,62,63,64,65,66,67,69,71,73,74,76,78,185,80,82,216,222,231,232,234,235,237,91,91,92,92,93,5,6,253,254,255,7,259,8,265,266,267,268,282,283,285,99,314,9,333,334,10,111,112,113],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:60","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>, java.lang.Short.java.lang.Short)","type":"CtInvocationImpl"},"failures":[281],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1397","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[205,206],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:321","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Throwable.getClass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[45,46,47,378,379,146,380,381,48,382,383,49,1,2,3,147,148,149,150,151,354,355,152,153,154,384,385,155,156,157,386,158,159,160,161,30,162,163,164,165,0,31,32,166,167,114,387,388,389,115,390,391,168,169,170,171,172,173,174,175,176,177,178,179,180,181,57,58,59,60,392,182,61,62,393,63,394,395,116,396,397,64,398,117,65,118,119,399,400,120,401,402,121,403,66,122,123,404,405,124,67,406,407,408,409,410,411,412,183,184,68,413,69,70,414,415,71,72,73,416,74,417,418,75,76,419,77,356,15,16,17,18,19,20,21,22,23,24,25,26,27,28,78,79,185,80,81,82,83,420,84,421,125,85,86,87,88,126,89,186,187,188,189,422,190,191,192,193,194,195,357,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,127,128,90,213,50,51,52,423,424,214,425,426,53,427,428,54,358,215,216,217,359,218,219,220,221,222,223,224,225,226,227,33,228,229,230,231,55,232,233,234,235,236,237,429,238,56,91,92,93,94,95,360,361,362,239,240,241,242,243,244,245,246,247,363,248,249,250,251,252,96,430,431,432,433,97,434,435,5,6,253,254,255,256,257,258,7,259,260,261,262,263,264,8,265,266,267,268,98,269,270,34,35,271,272,36,37,273,364,11,12,436,437,274,275,276,277,278,279,280,281,282,283,284,285,38,438,129,130,131,132,133,134,439,135,440,441,442,443,444,445,446,447,448,449,450,451,452,136,137,99,138,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,365,366,453,306,307,308,309,310,311,312,313,314,9,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,367,470,471,472,473,474,368,475,476,369,477,478,479,480,481,482,100,315,316,317,318,319,320,321,322,323,483,324,325,326,327,328,329,330,331,139,101,102,103,140,104,105,106,107,108,109,141,142,332,39,40,333,334,335,10,336,337,484,338,339,485,370,41,371,13,14,486,340,341,342,343,344,345,372,346,347,348,349,43,350,351,44,352,353,487,143,144,110,111,112,488,113,489,490,145,373,374,375,376,377],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[45,46,47,378,379,146,380,381,48,382,383,49,1,2,3,147,148,149,150,151,354,355,152,153,154,384,385,155,156,157,386,158,159,160,161,30,162,163,164,165,0,31,32,166,167,114,387,388,389,115,390,391,168,169,170,171,172,173,174,175,176,177,178,179,180,181,57,58,59,60,392,182,61,62,393,63,394,395,116,396,397,64,398,117,65,118,119,399,400,120,401,402,121,403,66,122,123,404,405,124,67,406,407,408,409,410,411,412,183,184,68,413,69,70,414,415,71,72,73,416,74,417,418,75,76,419,77,356,15,16,17,18,19,20,21,22,23,24,25,26,27,28,78,79,185,80,81,82,83,420,84,421,125,85,86,87,88,126,89,186,187,188,189,422,190,191,192,193,194,195,357,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,127,128,90,213,50,51,52,423,424,214,425,426,53,427,428,54,358,215,216,217,359,218,219,220,221,222,223,224,225,226,227,33,228,229,230,231,55,232,233,234,235,236,237,429,238,56,91,92,93,94,95,360,361,362,239,240,241,242,243,244,245,246,247,363,248,249,250,251,252,96,430,431,432,433,97,434,435,5,6,253,254,255,256,257,258,7,259,260,261,262,263,264,8,265,266,267,268,98,269,270,34,35,271,272,36,37,273,364,11,12,436,437,274,275,276,277,278,279,280,281,282,283,284,285,38,438,129,130,131,132,133,134,439,135,440,441,442,443,444,445,446,447,448,449,450,451,452,136,137,99,138,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,365,366,453,306,307,308,309,310,311,312,313,314,9,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,367,470,471,472,473,474,368,475,476,369,477,478,479,480,481,482,100,315,316,317,318,319,320,321,322,323,483,324,325,326,327,328,329,330,331,139,101,102,103,140,104,105,106,107,108,109,141,142,332,39,40,333,334,335,10,336,337,484,338,339,485,370,41,371,13,14,486,340,341,342,343,344,345,372,346,347,348,349,43,350,351,44,352,353,487,143,144,110,111,112,488,113,489,490,145,373,374,375,376,377],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:102","sourceCode":"if (!boolean) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove();\n    throw new java.lang.IllegalStateException(java.lang.String);\n} ","type":"CtIfImpl"},"failures":[357],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:39","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[491,492,493],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:906","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[206],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:126","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[218],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:185","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:195","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"parameterTypes":"candidateParameters","i":"i"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[444],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1471","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[139,140],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[494,203],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:229","failures":[65],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:39","sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","type":"CtInvocationImpl"},"failures":[161,30,31,32,495,496,497,498,270,34,35,36,37,499,500,501,43],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:301","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[79],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[358,359],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[129,130,131,132,134,135],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:44","failures":[45,46,47,378,379,146,380,381,48,382,383,49,1,2,3,147,148,149,150,151,354,355,152,153,154,384,385,155,156,157,386,158,159,160,161,30,162,163,164,165,0,31,32,166,167,114,387,388,115,390,391,168,169,170,171,172,173,174,175,176,177,178,179,180,181,57,58,59,60,392,182,61,62,393,63,394,116,396,397,64,398,117,65,118,119,399,400,120,401,402,121,403,66,122,123,404,405,124,67,406,407,408,409,410,411,412,183,184,68,69,70,415,71,72,73,74,417,418,75,76,77,356,15,16,17,18,19,20,21,22,23,24,25,26,27,28,78,79,185,80,81,82,83,420,84,421,125,85,86,87,88,126,89,502,491,503,504,492,493,186,187,188,189,422,190,191,192,193,194,195,357,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,127,128,90,213,50,51,52,423,424,214,425,426,53,427,428,54,358,215,216,217,359,218,219,505,220,221,222,223,224,225,226,227,33,228,229,230,231,55,232,233,234,235,236,237,429,238,56,91,92,93,94,95,360,361,362,239,240,241,242,243,244,245,246,247,363,248,249,250,251,252,96,430,431,432,433,97,434,435,5,6,253,254,255,256,257,258,7,259,260,261,262,263,264,8,265,266,267,268,98,269,270,34,35,271,272,36,37,273,364,11,12,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,436,437,274,275,276,277,278,279,280,281,282,283,284,285,38,129,130,131,132,133,134,135,440,441,442,443,444,445,446,447,448,449,450,451,452,136,137,99,138,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,365,366,453,306,307,308,309,310,311,312,313,314,9,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,367,470,471,472,473,474,368,475,476,369,477,478,479,480,481,482,100,315,316,317,318,319,320,321,322,323,483,324,325,326,327,328,329,330,331,139,101,102,103,140,104,105,106,107,108,109,141,142,332,39,40,333,334,335,10,336,337,484,338,339,485,370,41,371,13,14,340,341,342,343,344,345,372,346,347,348,349,43,350,351,44,352,353,487,143,144,110,111,112,488,113,489,490,145,373,374,375,376,377],"status":-1,"binaryOperator":"(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:180","failures":[1,63,394,416,418,528,529,530,531,532],"status":-1,"binaryOperator":"(java.lang.Class<?>[].int) != (java.lang.Object[].int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[1,59,62,393,63,394,116,396,397,64,398,117,65,118,119,399,400,120,401,402,121,403,66,122,123,404,405,124,67,406,407,413,414,416,418,533,419,534,535,91,92],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[1,59,62,393,63,394,116,396,397,64,398,117,65,118,119,399,400,120,401,402,121,403,66,122,123,404,405,124,67,406,407,413,414,416,418,533,419,534,535,91,92],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[45,46,47,378,379,146,380,381,48,382,383,49,1,2,3,147,148,149,150,151,354,355,152,153,154,384,385,155,156,157,386,158,159,160,161,30,162,163,164,165,0,31,32,166,167,114,115,390,391,168,169,170,171,172,173,174,175,176,177,178,179,180,181,57,58,59,60,182,61,62,63,394,395,116,396,397,64,398,117,65,118,119,399,400,120,401,402,121,403,66,122,123,404,405,124,67,406,407,408,409,410,411,412,183,184,68,413,69,70,414,415,71,72,73,416,74,418,75,76,419,77,356,15,16,17,18,19,20,21,22,23,24,25,26,27,28,78,79,185,80,81,82,83,420,84,421,125,85,86,87,88,126,89,186,187,188,189,422,190,191,192,193,194,195,357,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,127,128,90,213,50,51,52,423,424,214,425,426,53,427,428,54,358,215,216,217,359,218,219,220,221,222,223,224,225,226,227,33,228,229,230,231,55,232,233,234,235,236,237,429,238,56,91,91,92,92,93,94,95,360,361,362,239,240,241,242,243,244,245,246,247,363,248,249,250,251,252,96,432,433,97,434,435,5,6,253,254,255,256,257,258,7,259,260,261,262,263,264,8,265,266,267,268,98,269,270,34,35,271,272,36,37,273,364,11,12,436,437,274,275,276,277,278,279,280,281,282,283,284,285,38,438,129,130,131,132,133,134,439,135,440,441,442,443,444,445,446,447,448,449,450,451,452,136,137,99,138,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,365,366,453,306,307,308,309,310,311,312,313,314,9,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,367,470,471,472,473,474,368,475,476,369,477,478,479,480,481,482,100,315,316,317,318,319,320,321,322,323,483,324,325,326,327,328,329,330,331,139,101,102,103,140,104,105,106,107,108,109,141,142,332,39,40,333,334,335,10,336,337,484,338,339,485,370,41,371,13,14,340,341,342,343,344,345,372,346,347,348,349,43,350,351,44,352,353,487,143,144,110,111,112,488,113,489,490,145,373,374,375,376,377],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[161,409,410,411,412,226,228,229,270,436,274,275,332,39,40,350,352,353],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":189,"org.easymock.tests2.UsageTest.argumentsOrdered":32,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":269,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":178,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":425,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":464,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":163,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":55,"org.easymock.tests2.DelegateToTest.testReturnException":215,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":316,"org.easymock.tests.MockingTest.testPartialClassMocking":111,"org.easymock.tests.MockClassControlTest.testToString":106,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":408,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":369,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":472,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":89,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":400,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":65,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":286,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":156,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":527,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":528,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":195,"org.easymock.tests2.UsageTest.wrongArguments":30,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":248,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":49,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":246,"org.easymock.samples.ExampleTest.answerVsDelegate":233,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":97,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":490,"org.easymock.tests2.UsageConstraintsTest.testNull":191,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":80,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":177,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":142,"org.easymock.tests2.CaptureTest.testPrimitive":18,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":252,"org.easymock.tests.UsageTest.moreThanOneArgument":270,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":305,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":185,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":335,"org.easymock.tests.UsageTest.argumentsOrdered":37,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":373,"org.easymock.tests.UsageVarargTest.varargIntAccepted":323,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":469,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":281,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":68,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":428,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":388,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":72,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":456,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":285,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":511,"org.easymock.tests.ReplayStateInvalidUsageTest.times":449,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":146,"org.easymock.tests2.DependencyTest.testClassMocking":384,"org.easymock.tests2.AnswerTest.answer":151,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":357,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":470,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":150,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":431,"org.easymock.tests2.CaptureTest.testAnd":15,"org.easymock.tests2.UsageTest.strictResetToDefault":160,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":414,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":85,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":334,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":172,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":346,"org.easymock.tests2.DelegateToTest.testDelegate":218,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":377,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":510,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":301,"org.easymock.tests.LimitationsTest.mockFinalMethod":138,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":319,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":344,"org.easymock.tests2.DependencyTest.testClassMockingSupport":385,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":365,"org.easymock.tests2.CaptureTest.testCapture1_2446744":19,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":420,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":299,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":148,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":443,"org.easymock.tests.UsageThrowableTest.throwError":306,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":433,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":486,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":54,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":336,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":534,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":407,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":514,"org.easymock.samples.PartialClassMockTest.testGetArea":93,"org.easymock.tests.MockingTest.testInterfaceMocking":488,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":444,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":282,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":361,"org.easymock.tests2.UsageTest.niceToStrict":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":120,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":100,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":287,"org.easymock.tests2.ThreadingTest.testChangeDefault":505,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":454,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":71,"org.easymock.tests2.MockBuilderTest.testCreateMock":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":404,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":48,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":495,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":295,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":173,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":430,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":14,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":436,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":244,"org.easymock.tests.UsageOverloadedMethodTest.overloading":242,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":403,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":124,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":200,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":339,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":241,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":261,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":199,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":24,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":483,"org.easymock.tests.MockClassControlTest.testEquals":141,"org.easymock.tests2.EasyMockSupportClassTest.testAll":64,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":102,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":496,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":303,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":149,"org.easymock.tests2.CaptureTest.testCaptureAll":16,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":342,"org.easymock.tests.MockNameTest.defaultName":440,"org.easymock.tests2.UsageConstraintsTest.testMatches":201,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":441,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":10,"org.easymock.samples.ExampleTest.voteForRemovals":237,"org.easymock.tests.UsageVarargTest.allKinds":331,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":332,"org.easymock.samples.BasicClassMockTest.testPrintContent":95,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":343,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":312,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":224,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":426,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":320,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":359,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":532,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":439,"org.easymock.tests2.UsageConstraintsTest.greaterThan":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":398,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":372,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":88,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":515,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":135,"org.easymock.samples.ExampleTest.voteForRemoval":234,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":126,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":220,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":434,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":389,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":83,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":507,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":159,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":98,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":418,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":461,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":170,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":308,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":396,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":315,"org.easymock.tests2.CaptureTest.testCaptureFirst":28,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":358,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":460,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":171,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":167,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":41,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":258,"org.easymock.tests2.UsageTest.moreThanOneArgument":161,"org.easymock.tests2.CaptureTest.testCapture2_2446744":27,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":222,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":471,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":76,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":330,"org.easymock.tests.GenericTest.testBridgedEquals":140,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":279,"org.easymock.tests.UsageExpectAndReturnTest.longType":254,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":168,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":340,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":304,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":208,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":363,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":302,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":11,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":333,"org.easymock.tests.UsageCallCountTest.tooManyCalls":280,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":274,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":405,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":7,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":383,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":291,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":311,"org.easymock.tests.MockingTest.testNiceClassMocking":145,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":58,"org.easymock.tests.MockingTest.testClassMocking":144,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":437,"org.easymock.tests2.UsageConstraintsTest.testContains":198,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":90,"org.easymock.tests2.UsageConstraintsTest.testFind":190,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":243,"org.easymock.tests.MockTypeTest.fromEasyMockClass":432,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":158,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":348,"org.easymock.tests.UsageExpectAndReturnTest.object":260,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":84,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":382,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":176,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":529,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":325,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":481,"org.easymock.tests.UsageTest.exactCallCountByLastCall":273,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":459,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":476,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":374,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":501,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":394,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":265,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":321,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":338,"org.easymock.tests.MockClassControlTest.testHashCode":109,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":51,"org.easymock.tests2.EasyMockSupportTest.testVerify":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":402,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":375,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":13,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":337,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":147,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":356,"org.easymock.tests.UsageVarargTest.varargCharAccepted":324,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":438,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":225,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":475,"org.easymock.tests2.UsageTest.openCallCountByLastCall":164,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":179,"org.easymock.tests.DefaultClassInstantiatorTest.object":129,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":371,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":479,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":42,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":121,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":293,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":309,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":378,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":50,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":513,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":108,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":86,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":292,"org.easymock.tests.CapturesMatcherTest.test":29,"org.easymock.tests.ReplayStateInvalidCallsTest.times":519,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":266,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":364,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":520,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":67,"org.easymock.tests2.UsageTest.resumeIfFailure":166,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":96,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":387,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":318,"org.easymock.tests2.StubTest.stubWithReturnValue":184,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":416,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":209,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":259,"org.easymock.tests2.SerializationTest.testAllMockedMethod":3,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":367,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":497,"org.easymock.samples.SupportTest.voteForRemovals":231,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":139,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":423,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":298,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":4,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":368,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":354,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":477,"org.easymock.tests.UsageExpectAndThrowTest.object":296,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":206,"org.easymock.tests2.DelegateToTest.testWrongClass":217,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":517,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":314,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":9,"org.easymock.tests.UsageStrictMockTest.range":44,"org.easymock.samples.ConstructorCalledMockTest.testTax":91,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":390,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":175,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":57,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":297,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":73,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":451,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":116,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":36,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":245,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":499,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":509,"org.easymock.tests2.CaptureTest.testCaptureNone":23,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":362,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":491,"org.easymock.tests.UsageUnorderedTest.message":38,"org.easymock.tests.UsageVerifyTest.twoReturns":40,"org.easymock.tests.UsageVarargTest.varargByteAccepted":329,"org.easymock.tests2.ThreadingTest.testThreadSafe":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":122,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":277,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":482,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":94,"org.easymock.tests2.CaptureTest.testCapture_2617107":17,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":498,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":453,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":473,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":251,"org.easymock.tests2.UsageConstraintsTest.any":196,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":448,"org.easymock.tests2.StubTest.stub":183,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":12,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":474,"org.easymock.tests.UsageExpectAndThrowTest.longType":289,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":317,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":133,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":447,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":227,"org.easymock.tests2.SerializationTest.testClass":1,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":214,"org.easymock.tests.LimitationsTest.mockNativeMethod":99,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":103,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":268,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":47,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":525,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":229,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":503,"org.easymock.tests2.NameTest.nameForMocksControl":412,"org.easymock.tests2.MockedExceptionTest.testMockedException":128,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":379,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":117,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":272,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":386,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":113,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":290,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":78,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":74,"org.easymock.tests.MockingTest.testNicePartialClassMocking":112,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":82,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":45,"org.easymock.tests2.CaptureTest.testCaptureLast":22,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":366,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":524,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":62,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":194,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":207,"org.easymock.tests.MockingTest.testTwoMocks":110,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":521,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":393,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":5,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":294,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":31,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":211,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":493,"org.easymock.samples.ExampleTest.removeNonExistingDocument":429,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":445,"org.easymock.tests.UsageStrictMockTest.differentMethods":352,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":381,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":52,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":492,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":131,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":221,"org.easymock.tests2.MockBuilderTest.testCreateMockString":77,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":118,"org.easymock.tests.UsageExpectAndThrowTest.floatType":288,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":202,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":397,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":152,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":395,"org.easymock.tests.UsageVerifyTest.twoThrows":39,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":66,"org.easymock.samples.ExampleTest.voteAgainstRemoval":235,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":465,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":360,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":87,"org.easymock.tests.LimitationsTest.privateConstructor":137,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":535,"org.easymock.tests2.UsageConstraintsTest.testNotNull":210,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":127,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":313,"org.easymock.tests2.UsageTest.defaultResetToNice":0,"org.easymock.samples.ExampleTest.voteAgainstRemovals":232,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":466,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":8,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":46,"org.easymock.tests.UsageVarargTest.differentLength":326,"org.easymock.tests2.CallbackTest.callback":181,"org.easymock.tests2.UsageConstraintsTest.equals":422,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":421,"org.easymock.tests.UsageTest.openCallCountByLastCall":271,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":186,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":250,"org.easymock.tests.UsageCallCountTest.tooFewCalls":275,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":60,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":247,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":504,"org.easymock.tests.UsageThrowableTest.throwCheckedException":310,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":500,"org.easymock.tests.MockingTest.testStrictClassMocking":143,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":61,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":240,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":59,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":380,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":450,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":182,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":154,"org.easymock.tests.ObjectMethodsTest.testHashCode":480,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":523,"org.easymock.tests2.NameTest.nameForNiceMock":411,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":223,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":518,"org.easymock.tests2.DependencyTest.testInterfaceMocking":155,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":530,"org.easymock.samples.ExampleTest.addDocument":236,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":123,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":406,"org.easymock.tests2.DelegateToTest.testStubDelegate":216,"org.easymock.tests2.AnswerTest.stubAnswer":153,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":350,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":417,"org.easymock.tests.UsageVarargTest.varargLongAccepted":328,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":353,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":463,"org.easymock.tests.UsageExpectAndReturnTest.floatType":253,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":267,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":63,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":92,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":485,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":427,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":204,"org.easymock.tests.UsageThrowableTest.noUpperLimit":307,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":187,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":114,"org.easymock.tests2.SerializationTest.test":2,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":20,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":130,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":6,"org.easymock.tests2.UsageConstraintsTest.testSame":192,"org.easymock.samples.SupportTest.addDocument":230,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":392,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":508,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":446,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":119,"org.easymock.tests.GenericTest.testPackageScope":101,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":376,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":458,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":53,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":489,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":506,"org.easymock.tests2.NameTest.nameForMock":409,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":262,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":419,"org.easymock.tests2.UsageStrictMockTest.differentMethods":228,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":125,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":255,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":300,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":478,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":347,"org.easymock.tests2.MockedExceptionTest.testRealException":213,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":435,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":468,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":391,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":467,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":226,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":452,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":249,"org.easymock.tests2.NameTest.nameForStrictMock":410,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":415,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":157,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":81,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":115,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":132,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":205,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":69,"org.easymock.tests2.UsageStrictMockTest.range":33,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":512,"org.easymock.tests2.UsageConstraintsTest.lessThan":212,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":424,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":531,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":462,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":401,"org.easymock.tests2.CaptureTest.testCaptureRightOne":25,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":502,"org.easymock.tests2.UsageConstraintsTest.testOr":193,"org.easymock.tests.UsageRangeTest.combination":345,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":79,"org.easymock.tests.UsageTest.wrongArguments":35,"org.easymock.tests2.MockBuilderTest.testWithConstructor":413,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":399,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":105,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":256,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":455,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":263,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":134,"org.easymock.tests.UsageVarargTest.varargShortAccepted":327,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":278,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":526,"org.easymock.tests2.UsageConstraintsTest.cmpTo":197,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":355,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":516,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":457,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":165,"org.easymock.tests2.CaptureTest.testCaptureFromStub":26,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":442,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":70,"org.easymock.tests.UsageTest.unexpectedCallWithArray":34,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":522,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":43,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":276,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":533,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":264,"org.easymock.tests2.UsageConstraintsTest.constraints":188,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":351,"org.easymock.samples.ExampleTest.addAndChangeDocument":238,"org.easymock.tests.UsageStrictMockTest.testVerify":487,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":56,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":349,"org.easymock.tests2.CompareToTest.testGreateThan":494,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":341,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":21,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":283,"org.easymock.tests.LimitationsTest.abstractClass":136,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":257,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":284,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":370,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":174,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":322}}]

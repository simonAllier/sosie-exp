[{"transplant":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if (java.lang.Object == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"actual","actual":"actual"}},{"position":"org.easymock.EasyMock:786","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[1,2],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:250","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[3],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMockSupport:52","sourceCode":"new java.util.ArrayList<org.easymock.IMocksControl>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:109","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[4,5,6,7,8,9],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:357","sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:100","sourceCode":"return this","type":"CtReturnImpl"},"failures":[45,46,47,48],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:304","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[49,50,51,52,53],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"return java.lang.reflect.Field.getType().isAssignableFrom(org.easymock.internal.Injection.getMock().getClass())","type":"CtReturnImpl"},"failures":[54,55,56,57],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.StartsWith:40","sourceCode":"java.lang.StringBuffer.append(((\"startsWith(\\\"\" + (java.lang.String)) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[58],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[59,60,61,62,41,63,64],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:246","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[65],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[66,67,68,69,70,71,72,73],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"failures":[74,75,76,77],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"position":"org.easymock.EasyMock:1471","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[78,79,80,81],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1235","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[82,83,66,67,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,69,70,71,78,79,80,110,10,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,59,131,132,133,134,135,136,60,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,0,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,45,46,47,179,180,181,182,183,184,185,186,187,188,72,189,190,191,192,193,194,195,196,48,197,198,199,200,6,201,202,203,204,205,206,207,208,209,210,211,212,213,214,61,215,216,217,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,218,219,220,221,35,222,62,36,37,38,39,40,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,41,263,264,265,42,63,266,267,268,64,269,270,271,272,273,73,274,43,275,276,44],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.InstanceOf:40","sourceCode":"java.lang.StringBuffer.append(((\"isA(\" + (java.lang.Class<?>.getName())) + \")\"))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:40","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>.getName(), java.lang.Double.java.lang.Class<java.lang.Double>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ObjectMethodsFilter:98","failures":[277,86,87,88,89,90,91,278,93,95,97,98,99,100,69,112,113,116,117,59,132,133,134,135,137,138,139,140,147,0,279,280,281,282,172,283,284,75,285,76,286,46,47,287,77,288,179,289,290,291,292,197,293,294,295,296,6,201,202,203,204,205,297,206,207,298,210,211,299,300,259,262,41,263,63,266,9,267,269,270,271,301,302,303,304,305,306,307,308,309,310,275,311],"status":-1,"binaryOperator":"(java.lang.String) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:202","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:194","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n    return java.lang.Number.byteValue();\n} else if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[78,79,80,81],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1079","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[1,198],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","failures":[312,313,78,314,315,316,317,318,319,320,321,322,323,181,324,325,182,326,327,328,329,330,331,332,333,334,183,335,336,337,338,339,184,340,341],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1333","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidClassProxyFactory:58","sourceCode":"throw new java.lang.RuntimeException((\"Failed to mock \" + java.lang.Class<T>) , java.io.IOException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1483","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1816","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:82","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[342,55,343,344,345,57,346,347],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:106","failures":[348,349,350,74,178,45],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:225","sourceCode":"final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[163],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:137","sourceCode":"return java.util.List<T>.toString()","type":"CtReturnImpl"},"failures":[351],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"failures":[1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericType":"genericType"}},{"transplant":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:275","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[66,352,67,68,69,70,71,72,353,73],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[354,355,356,357,358,359,82,83,66,360,352,67,84,68,277,85,86,87,88,89,90,54,361,362,363,342,91,278,55,364,343,344,365,92,93,94,95,96,97,98,366,99,100,101,102,103,104,105,106,107,108,109,367,368,69,70,369,71,78,79,80,110,10,111,112,113,114,370,115,116,117,371,372,373,374,375,376,377,378,118,119,120,121,122,123,124,125,126,127,128,379,129,130,59,131,132,133,134,135,136,60,65,137,138,139,140,380,141,142,143,381,144,382,145,146,147,148,383,149,150,151,152,153,154,384,155,156,157,158,159,160,0,161,162,163,164,165,166,167,168,169,170,385,279,280,281,282,171,172,173,174,175,176,386,387,177,388,389,283,74,178,284,390,75,285,391,76,286,392,393,45,394,46,395,47,396,320,287,77,397,288,56,398,399,400,345,179,289,57,401,346,347,402,403,404,180,405,321,322,323,181,324,325,182,326,327,328,329,330,331,332,333,334,183,335,336,337,338,339,184,340,341,185,186,187,188,72,189,190,191,192,406,193,407,408,194,195,196,48,409,290,410,411,291,292,412,413,414,415,416,417,418,419,420,197,421,422,423,424,425,426,427,428,429,3,49,430,11,12,13,431,432,433,434,435,50,51,52,1,198,199,436,2,437,438,293,294,295,439,440,441,296,200,6,201,202,203,204,205,442,443,444,445,297,446,206,207,208,209,298,210,211,447,448,449,14,450,451,452,53,453,454,455,456,457,353,458,459,460,461,462,463,464,465,466,467,212,213,214,61,215,468,216,217,469,470,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,471,472,218,473,474,299,475,476,477,219,220,478,221,479,480,481,35,222,62,36,37,38,39,40,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,482,483,484,485,486,487,488,489,490,244,245,246,247,248,249,250,251,491,252,253,300,254,255,256,257,258,259,492,260,261,262,41,263,493,264,265,42,63,266,9,267,268,64,269,270,271,494,495,496,497,301,302,498,303,499,500,304,305,306,307,308,272,273,73,309,274,43,310,275,311,276,501,502,503,504,44,505],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[506,507],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[65,389],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:63","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long)","type":"CtInvocationImpl"},"failures":[432,226,232,239,240,248],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:98","sourceCode":"return (java.lang.String) != null ? java.lang.String : \"EasyMock for \" + org.easymock.internal.MocksControl.(org.easymock.internal.MocksControl.getMockedType(java.lang.Object))","type":"CtReturnImpl"},"failures":[91,278,95,98,99,112,113,116,117,279,280,281,282,172,283,284,75,285,286,46,47,77,288,179,289,290,291,292,293,294,295,299,303,304,305,306,307,308],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":148,"org.easymock.tests2.UsageTest.argumentsOrdered":138,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":63,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":101,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":289,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":455,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":135,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":196,"org.easymock.tests2.DelegateToTest.testReturnException":141,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":502,"org.easymock.tests.MockingTest.testPartialClassMocking":219,"org.easymock.tests.MockClassControlTest.testToString":293,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":385,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":484,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":463,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":329,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":182,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":15,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":83,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":154,"org.easymock.tests2.UsageTest.wrongArguments":133,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":212,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":365,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":496,"org.easymock.samples.ExampleTest.answerVsDelegate":72,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":306,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":480,"org.easymock.tests2.UsageConstraintsTest.testNull":150,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":174,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":441,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":100,"org.easymock.tests2.CaptureTest.testPrimitive":121,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":215,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":34,"org.easymock.tests.UsageTest.moreThanOneArgument":266,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":173,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":433,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":468,"org.easymock.tests.UsageTest.argumentsOrdered":270,"org.easymock.tests.UsageVarargTest.varargIntAccepted":251,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":459,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":244,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":285,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":347,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":374,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":394,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":449,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":248,"org.easymock.tests.ReplayStateInvalidUsageTest.times":429,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":91,"org.easymock.tests2.DependencyTest.testClassMocking":358,"org.easymock.tests2.AnswerTest.answer":66,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":384,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":461,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":357,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":500,"org.easymock.tests2.CaptureTest.testAnd":118,"org.easymock.tests2.UsageTest.strictResetToDefault":131,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":392,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":283,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":432,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":96,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":260,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":470,"org.easymock.tests2.DelegateToTest.testDelegate":144,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":30,"org.easymock.tests.LimitationsTest.mockFinalMethod":473,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":44,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":490,"org.easymock.tests2.DependencyTest.testClassMockingSupport":359,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":301,"org.easymock.tests2.CaptureTest.testCapture1_2446744":122,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":387,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":28,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":355,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":423,"org.easymock.tests.UsageThrowableTest.throwError":35,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":305,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":474,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":402,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":435,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":341,"org.easymock.samples.PartialClassMockTest.testGetArea":48,"org.easymock.tests.MockingTest.testInterfaceMocking":478,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":424,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":245,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":444,"org.easymock.tests2.UsageTest.niceToStrict":134,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":16,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":330,"org.easymock.tests2.ThreadingTest.testChangeDefault":507,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":447,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":319,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":45,"org.easymock.tests2.MockBuilderTest.testCreateMock":287,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":337,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":364,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":24,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":4,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":97,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":499,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":13,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":297,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":494,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":316,"org.easymock.tests.UsageOverloadedMethodTest.overloading":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":334,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":339,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":159,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":43,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":234,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":264,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":158,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":127,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":491,"org.easymock.tests.MockClassControlTest.testEquals":440,"org.easymock.tests2.EasyMockSupportClassTest.testAll":181,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":199,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":32,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":348,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":488,"org.easymock.tests2.CaptureTest.testCaptureAll":119,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":356,"org.easymock.tests.MockNameTest.defaultName":299,"org.easymock.tests2.UsageConstraintsTest.testMatches":160,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":434,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":421,"org.easymock.samples.ExampleTest.voteForRemovals":192,"org.easymock.tests.UsageVarargTest.allKinds":258,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":262,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":489,"org.easymock.samples.BasicClassMockTest.testPrintContent":187,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":39,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":277,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":505,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":57,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":381,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":419,"org.easymock.tests2.UsageConstraintsTest.greaterThan":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":324,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":492,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":284,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":420,"org.easymock.samples.ExampleTest.voteForRemoval":189,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":390,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":105,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":307,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":375,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":386,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":59,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":276,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":320,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":53,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":94,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":322,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":501,"org.easymock.tests2.CaptureTest.testCaptureFirst":130,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":380,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":452,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":95,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":140,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":311,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":230,"org.easymock.tests2.UsageTest.moreThanOneArgument":132,"org.easymock.tests2.CaptureTest.testCapture2_2446744":129,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":107,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":462,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":77,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":257,"org.easymock.tests.GenericTest.testBridgedEquals":2,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":317,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":210,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":314,"org.easymock.tests.UsageExpectAndReturnTest.longType":226,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":486,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":92,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":33,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":493,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":166,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":31,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":431,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":51,"org.easymock.tests.UsageCallCountTest.tooManyCalls":211,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":206,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":338,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":231,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":344,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":20,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":38,"org.easymock.tests.MockingTest.testNiceClassMocking":481,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":112,"org.easymock.tests.MockingTest.testClassMocking":476,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":446,"org.easymock.tests2.UsageConstraintsTest.testContains":157,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":180,"org.easymock.tests2.UsageConstraintsTest.testFind":149,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":42,"org.easymock.tests.MockTypeTest.fromEasyMockClass":304,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":71,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":296,"org.easymock.tests.UsageExpectAndReturnTest.object":233,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":177,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":343,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":99,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":253,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":411,"org.easymock.tests.UsageTest.exactCallCountByLastCall":271,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":318,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":243,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":451,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":483,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":216,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":367,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":239,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":249,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":274,"org.easymock.tests.MockClassControlTest.testHashCode":439,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":398,"org.easymock.tests2.EasyMockSupportTest.testVerify":103,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":332,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":217,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":12,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":73,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":354,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":382,"org.easymock.tests.UsageVarargTest.varargCharAccepted":252,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":412,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":467,"org.easymock.tests2.UsageTest.openCallCountByLastCall":136,"org.easymock.tests.DefaultClassInstantiatorTest.object":413,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":102,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":312,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":11,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":290,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":22,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":333,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":36,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":350,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":363,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":56,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":74,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":295,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":21,"org.easymock.tests.CapturesMatcherTest.test":351,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":240,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":184,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":294,"org.easymock.tests2.UsageTest.resumeIfFailure":139,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":303,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":373,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":504,"org.easymock.tests2.StubTest.stubWithReturnValue":10,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":395,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":167,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":232,"org.easymock.tests2.SerializationTest.testAllMockedMethod":80,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":460,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":5,"org.easymock.samples.SupportTest.voteForRemovals":195,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":1,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":400,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":27,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":81,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":466,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":360,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":485,"org.easymock.tests.UsageExpectAndThrowTest.object":25,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":164,"org.easymock.tests2.DelegateToTest.testWrongClass":143,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":272,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":273,"org.easymock.samples.ConstructorCalledMockTest.testTax":407,"org.easymock.tests.UsageStrictMockTest.range":203,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":377,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":366,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":111,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":315,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":26,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":46,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":49,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":269,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":321,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":495,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":7,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":445,"org.easymock.tests2.CaptureTest.testCaptureNone":126,"org.easymock.tests.UsageUnorderedTest.message":197,"org.easymock.tests.UsageVerifyTest.twoReturns":263,"org.easymock.tests.UsageVarargTest.varargByteAccepted":256,"org.easymock.tests2.ThreadingTest.testThreadSafe":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":335,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":209,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":186,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":291,"org.easymock.tests2.CaptureTest.testCapture_2617107":120,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":498,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":464,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":61,"org.easymock.tests2.UsageConstraintsTest.any":155,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":428,"org.easymock.tests2.StubTest.stub":110,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":52,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":503,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":465,"org.easymock.tests.UsageExpectAndThrowTest.longType":18,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":417,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":427,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":87,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":179,"org.easymock.tests2.SerializationTest.testClass":78,"org.easymock.tests.LimitationsTest.mockNativeMethod":218,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":436,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":242,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":349,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":362,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":90,"org.easymock.tests2.NameTest.nameForMocksControl":282,"org.easymock.tests2.MockedExceptionTest.testMockedException":404,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":325,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":64,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":19,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":221,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":369,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":171,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":47,"org.easymock.tests.MockingTest.testNicePartialClassMocking":220,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":176,"org.easymock.tests2.CaptureTest.testCaptureLast":125,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":54,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":302,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":153,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":117,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":165,"org.easymock.tests.MockingTest.testTwoMocks":477,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":371,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":223,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":23,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":137,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":169,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":506,"org.easymock.samples.ExampleTest.removeNonExistingDocument":406,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":425,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":55,"org.easymock.tests.UsageStrictMockTest.differentMethods":204,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":399,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":415,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":106,"org.easymock.tests2.MockBuilderTest.testCreateMockString":288,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":437,"org.easymock.tests.UsageExpectAndThrowTest.floatType":17,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":326,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":0,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":323,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":67,"org.easymock.tests.UsageVerifyTest.twoThrows":41,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":368,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":309,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":183,"org.easymock.samples.ExampleTest.voteAgainstRemoval":190,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":456,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":443,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":178,"org.easymock.tests.LimitationsTest.privateConstructor":472,"org.easymock.tests2.UsageConstraintsTest.testNotNull":168,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":403,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":40,"org.easymock.tests2.UsageTest.defaultResetToNice":65,"org.easymock.samples.ExampleTest.voteAgainstRemovals":188,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":457,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":238,"org.easymock.tests.UsageVarargTest.differentLength":300,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":361,"org.easymock.tests2.CallbackTest.callback":69,"org.easymock.tests2.UsageConstraintsTest.equals":383,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":388,"org.easymock.tests.UsageTest.openCallCountByLastCall":268,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":145,"org.easymock.tests2.ConstraintsToStringTest.startsWithToString":58,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":214,"org.easymock.tests.UsageCallCountTest.tooFewCalls":207,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":114,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":497,"org.easymock.tests.UsageThrowableTest.throwCheckedException":37,"org.easymock.tests.MockingTest.testStrictClassMocking":475,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":8,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":482,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":116,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":113,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":278,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":3,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":115,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":68,"org.easymock.tests.ObjectMethodsTest.testHashCode":410,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":108,"org.easymock.tests2.NameTest.nameForNiceMock":281,"org.easymock.tests2.DependencyTest.testInterfaceMocking":82,"org.easymock.samples.ExampleTest.addDocument":191,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":336,"org.easymock.tests2.DelegateToTest.testStubDelegate":142,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":340,"org.easymock.tests2.AnswerTest.stubAnswer":84,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":201,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":396,"org.easymock.tests.UsageVarargTest.varargLongAccepted":255,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":205,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":454,"org.easymock.tests.UsageExpectAndReturnTest.floatType":225,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":241,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":109,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":408,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":162,"org.easymock.tests.UsageThrowableTest.noUpperLimit":222,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":310,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":346,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":146,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":372,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":123,"org.easymock.tests2.SerializationTest.test":79,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":414,"org.easymock.tests2.UsageConstraintsTest.testSame":151,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":224,"org.easymock.samples.SupportTest.addDocument":194,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":370,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":426,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":327,"org.easymock.tests.GenericTest.testPackageScope":198,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":469,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":450,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":401,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":479,"org.easymock.tests2.NameTest.nameForMock":279,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":235,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":397,"org.easymock.tests2.UsageStrictMockTest.differentMethods":89,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":389,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":227,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":29,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":409,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":261,"org.easymock.tests2.MockedExceptionTest.testRealException":405,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":308,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":458,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":378,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":86,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":353,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":430,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":213,"org.easymock.tests2.NameTest.nameForStrictMock":280,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":393,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":70,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":313,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":175,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":376,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":416,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":163,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":76,"org.easymock.tests2.UsageStrictMockTest.range":88,"org.easymock.tests2.UsageConstraintsTest.lessThan":170,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":345,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":453,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":93,"org.easymock.tests2.CaptureTest.testCaptureRightOne":128,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":331,"org.easymock.tests2.UsageConstraintsTest.testOr":152,"org.easymock.tests.UsageRangeTest.combination":259,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":172,"org.easymock.tests.UsageTest.wrongArguments":267,"org.easymock.tests2.MockBuilderTest.testWithConstructor":391,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":328,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":438,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":228,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":448,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":236,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":418,"org.easymock.tests.UsageVarargTest.varargShortAccepted":254,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":298,"org.easymock.tests2.UsageConstraintsTest.cmpTo":156,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":352,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":14,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":60,"org.easymock.tests2.CaptureTest.testCaptureFromStub":379,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":422,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":286,"org.easymock.tests.UsageTest.unexpectedCallWithArray":9,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":6,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":208,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":237,"org.easymock.tests2.UsageConstraintsTest.constraints":147,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":202,"org.easymock.samples.ExampleTest.addAndChangeDocument":193,"org.easymock.tests.UsageStrictMockTest.testVerify":442,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":185,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":200,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":487,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":124,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":246,"org.easymock.tests.LimitationsTest.abstractClass":471,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":229,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":247,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":275,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":98,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":250}}]

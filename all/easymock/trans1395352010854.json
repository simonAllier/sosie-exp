[{"transplantationPoint":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[1,1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:63","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long)","type":"CtInvocationImpl"},"failures":[108,109,110,111,112,113],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"failures":[114,115,116,117,118,119,120,121,122,123,124,125],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:320","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[126,127],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:32","sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:92","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:153","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[162,163],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Contains:40","sourceCode":"java.lang.StringBuffer.append(((\"contains(\\\"\" + (java.lang.String)) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[164],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[165,166,167,168,169,170,171,1,2,172,3,173,174,175,4,5,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,162,163,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,8,9,236,10,11,12,13,14,17,18,19,20,23,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,25,26,29,30,31,32,34,35,36,255,256,257,258,259,260,261,262,263,264,265,266,267,37,38,39,268,269,40,41,42,43,270,44,45,46,271,47,51,54,64,70,272,273,274,275,276,277,128,278,279,280,281,74,75,282,108,283,284,285,286,287,288,289,290,291,292,293,294,295,296,109,297,298,299,300,301,110,302,303,304,305,306,307,111,112,308,309,310,311,312,313,129,314,315,316,317,318,130,319,320,321,88,89,90,322,323,324,97,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,113,107,356,357,358,131,359,360,361,362,363,364,365,366,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,367,152,368,369,153,154,155,156,157,370,371,161,372],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[165,166,167,168,169,170,171,1,2,172,3,173,174,175,4,5,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,162,163,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,8,9,236,10,11,12,13,14,17,18,19,20,23,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,25,26,29,30,31,32,34,35,36,255,256,257,258,259,260,261,262,263,264,265,266,267,37,38,39,268,269,40,41,42,43,270,44,45,46,271,47,51,54,64,70,272,273,274,275,276,277,128,278,279,280,281,74,75,282,108,283,284,285,286,287,288,289,290,291,292,293,294,295,296,109,297,298,299,300,301,110,302,303,304,305,306,307,111,112,308,309,310,311,312,313,129,314,315,316,317,318,130,319,320,321,88,89,90,373,373,322,323,324,97,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,113,107,356,357,358,131,359,360,361,362,363,364,365,366,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,367,152,368,369,153,154,155,156,157,370,371,161,372],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[204],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"expected","actual":"expected","this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[46,271,47,374],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[73,77],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[198,210,215],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[165,167,168,170,3,175,176,177,183,185,186,192,193,194,195,196,197,198,199,200,162,163,201,202,203,204,205,206,207,208,209,210,211,212,214,215,216,217,218,219,221,222,225,226,227,228,230,231,232,234,8,9,236,10,11,12,14,18,19,20,23,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,26,29,31,32,35,255,256,257,259,261,262,263,266,267,39,269,40,41,42,43,270,44,45,46,271,51,54,64,70,273,128,74,76,289,291,292,294,295,296,109,297,298,299,300,301,110,302,303,304,305,306,307,111,112,308,309,315,375,316,317,376,318,319,320,377,378,379,380,381,88,89,90,382,383,384,322,323,324,97,332,333,336,337,340,352,353,354,355,113,356,357,359,360,361,152,369,153,154,155,156,157,385],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[78,79,80,81,83,84],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[208,386],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[162],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[387],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[165,166,167,168,169,170,171,1,2,172,3,173,174,175,4,5,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,162,163,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,8,9,236,10,11,12,13,14,17,18,19,20,23,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,25,26,29,30,31,32,34,35,36,255,256,257,258,259,260,261,262,263,264,265,266,267,37,38,39,268,269,40,41,42,43,270,44,45,46,271,47,51,54,64,70,272,273,274,275,276,277,128,278,279,280,281,74,75,282,108,283,284,285,286,287,288,289,290,291,292,293,294,295,296,109,297,298,299,300,301,110,302,303,304,305,306,307,111,112,308,309,310,311,312,313,129,314,315,316,317,318,130,319,320,321,88,89,90,373,373,322,323,324,97,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,113,107,356,357,358,131,359,360,361,362,363,364,365,366,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,367,152,368,369,153,154,155,156,157,370,371,161,372],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[165,166,167,168,169,170,388,171,1,1,2,2,172,3,173,174,175,4,5,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,162,163,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,389,8,9,236,10,11,12,13,14,17,18,19,20,23,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,25,26,29,30,31,32,34,35,36,255,256,257,258,259,260,261,262,263,264,265,266,267,37,38,39,268,269,40,41,42,43,270,44,45,46,271,47,51,54,64,70,390,391,392,393,272,273,274,275,276,277,128,278,279,280,281,74,75,282,108,283,284,285,78,286,287,288,289,290,291,292,293,394,294,295,296,109,297,298,299,300,301,110,302,303,304,305,306,307,111,112,308,309,310,311,312,313,129,314,315,375,316,317,318,130,319,320,321,88,89,90,322,323,324,395,396,397,97,398,399,325,326,327,328,329,330,331,400,401,402,403,404,405,406,407,408,409,410,411,99,100,101,102,103,104,105,106,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,113,107,356,357,358,131,359,360,361,362,363,364,365,366,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,367,152,368,369,153,154,155,156,157,370,371,161,385,372],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"failures":[277,412,131],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:411","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[73],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"transplant":{"position":"org.easymock.internal.LastControl:39","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:93","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":196,"org.easymock.tests2.UsageTest.argumentsOrdered":265,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":332,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":252,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":127,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":260,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":173,"org.easymock.tests2.DelegateToTest.testReturnException":272,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":311,"org.easymock.tests.MockingTest.testPartialClassMocking":88,"org.easymock.tests.MockClassControlTest.testToString":101,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":376,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":22,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":58,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":132,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":54,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":177,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":163,"org.easymock.tests2.UsageTest.wrongArguments":258,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":356,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":119,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":280,"org.easymock.samples.ExampleTest.answerVsDelegate":166,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":94,"org.easymock.tests2.UsageConstraintsTest.testNull":198,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":10,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":106,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":251,"org.easymock.tests2.CaptureTest.testPrimitive":221,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":359,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":151,"org.easymock.tests.UsageTest.moreThanOneArgument":333,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":236,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":283,"org.easymock.tests.UsageTest.argumentsOrdered":339,"org.easymock.tests.UsageVarargTest.varargIntAccepted":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":412,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":352,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":25,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":30,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":113,"org.easymock.tests.ReplayStateInvalidUsageTest.times":408,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":192,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":387,"org.easymock.tests2.AnswerTest.answer":232,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":191,"org.easymock.tests2.CaptureTest.testAnd":218,"org.easymock.tests2.UsageTest.strictResetToDefault":256,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":17,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":108,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":246,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":316,"org.easymock.tests2.DelegateToTest.testDelegate":275,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":147,"org.easymock.tests.LimitationsTest.mockFinalMethod":98,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":129,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":366,"org.easymock.tests2.CaptureTest.testCapture1_2446744":222,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":145,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":189,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":402,"org.easymock.tests.UsageThrowableTest.throwError":152,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":125,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":285,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":72,"org.easymock.samples.PartialClassMockTest.testGetArea":3,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":403,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":353,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":383,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":133,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":59,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":92,"org.easymock.tests2.UsageTest.niceToStrict":259,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":29,"org.easymock.tests2.MockBuilderTest.testCreateMock":34,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":67,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":118,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":141,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":247,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":160,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":398,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":278,"org.easymock.tests.UsageOverloadedMethodTest.overloading":323,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":69,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":161,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":205,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":303,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":322,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":204,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":227,"org.easymock.tests.MockClassControlTest.testEquals":105,"org.easymock.tests2.EasyMockSupportClassTest.testAll":51,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":75,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":149,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":190,"org.easymock.tests2.CaptureTest.testCaptureAll":219,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":364,"org.easymock.tests2.UsageConstraintsTest.testMatches":206,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":400,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":284,"org.easymock.samples.ExampleTest.voteForRemovals":170,"org.easymock.tests.UsageVarargTest.allKinds":351,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":318,"org.easymock.samples.BasicClassMockTest.testPrintContent":5,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":365,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":156,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":181,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":123,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":314,"org.easymock.tests2.UsageConstraintsTest.greaterThan":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":52,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":375,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":20,"org.easymock.samples.ExampleTest.voteForRemoval":167,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":84,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":21,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":238,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":13,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":107,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":255,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":33,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":244,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":49,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":310,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":126,"org.easymock.tests2.CaptureTest.testCaptureFirst":231,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":245,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":267,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":372,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":300,"org.easymock.tests2.CaptureTest.testCapture2_2446744":230,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":240,"org.easymock.tests2.UsageTest.moreThanOneArgument":257,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":35,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":350,"org.easymock.tests.GenericTest.testBridgedEquals":77,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":330,"org.easymock.tests.UsageExpectAndReturnTest.longType":109,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":242,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":362,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":150,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":213,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":148,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":282,"org.easymock.tests.UsageCallCountTest.tooManyCalls":331,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":325,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":68,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":301,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":137,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":155,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":41,"org.easymock.tests.MockingTest.testNiceClassMocking":91,"org.easymock.tests.MockingTest.testClassMocking":86,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":399,"org.easymock.tests2.UsageConstraintsTest.testContains":203,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":39,"org.easymock.tests2.UsageConstraintsTest.testFind":197,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":324,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":180,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":286,"org.easymock.tests.UsageExpectAndReturnTest.object":302,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":14,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":250,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":345,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":397,"org.easymock.tests.UsageTest.exactCallCountByLastCall":340,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":320,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":24,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":111,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":341,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":371,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":120,"org.easymock.tests.MockClassControlTest.testHashCode":104,"org.easymock.tests2.EasyMockSupportTest.testVerify":254,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":61,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":159,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":370,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":188,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":389,"org.easymock.tests.UsageVarargTest.varargCharAccepted":344,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":182,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":381,"org.easymock.tests2.UsageTest.openCallCountByLastCall":261,"org.easymock.tests.DefaultClassInstantiatorTest.object":78,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":253,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":158,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":395,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":139,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":62,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":153,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":103,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":18,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":138,"org.easymock.tests.CapturesMatcherTest.test":373,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":112,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":102,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":70,"org.easymock.tests2.UsageTest.resumeIfFailure":266,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":93,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":313,"org.easymock.tests2.StubTest.stubWithReturnValue":128,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":110,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":214,"org.easymock.tests2.SerializationTest.testAllMockedMethod":47,"org.easymock.samples.SupportTest.voteForRemovals":175,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":73,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":144,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":374,"org.easymock.tests.UsageExpectAndThrowTest.object":142,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":211,"org.easymock.tests2.DelegateToTest.testWrongClass":274,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":360,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":361,"org.easymock.samples.ConstructorCalledMockTest.testTax":1,"org.easymock.tests.UsageStrictMockTest.range":291,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":249,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":40,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":143,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":31,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":410,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":48,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":338,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":279,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":384,"org.easymock.tests2.CaptureTest.testCaptureNone":226,"org.easymock.tests.UsageUnorderedTest.message":367,"org.easymock.tests.UsageVerifyTest.twoReturns":319,"org.easymock.tests.UsageVarargTest.varargByteAccepted":349,"org.easymock.tests2.ThreadingTest.testThreadSafe":237,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":65,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":328,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":4,"org.easymock.tests2.CaptureTest.testCapture_2617107":220,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":131,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":379,"org.easymock.tests2.UsageConstraintsTest.any":201,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":407,"org.easymock.tests2.StubTest.stub":277,"org.easymock.tests.UsageExpectAndThrowTest.longType":135,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":312,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":380,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":82,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":406,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":184,"org.easymock.tests2.SerializationTest.testClass":46,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":269,"org.easymock.tests.LimitationsTest.mockNativeMethod":97,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":76,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":309,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":115,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":187,"org.easymock.tests2.NameTest.nameForMocksControl":393,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":116,"org.easymock.tests2.MockedExceptionTest.testMockedException":38,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":53,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":337,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":179,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":136,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":90,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":8,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":32,"org.easymock.tests.MockingTest.testNicePartialClassMocking":89,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":12,"org.easymock.tests2.CaptureTest.testCaptureLast":225,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":162,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":45,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":212,"org.easymock.tests.MockingTest.testTwoMocks":87,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":294,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":140,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":264,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":216,"org.easymock.samples.ExampleTest.removeNonExistingDocument":388,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":404,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":117,"org.easymock.tests.UsageStrictMockTest.differentMethods":292,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":121,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":80,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":239,"org.easymock.tests2.MockBuilderTest.testCreateMockString":36,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":99,"org.easymock.tests.UsageExpectAndThrowTest.floatType":134,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":55,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":207,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":50,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":233,"org.easymock.tests.UsageVerifyTest.twoThrows":130,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":64,"org.easymock.samples.ExampleTest.voteAgainstRemoval":168,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":378,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":382,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":19,"org.easymock.tests.LimitationsTest.privateConstructor":96,"org.easymock.tests2.UsageConstraintsTest.testNotNull":215,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":157,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":37,"org.easymock.tests2.UsageTest.defaultResetToNice":263,"org.easymock.samples.ExampleTest.voteAgainstRemovals":165,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":307,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":114,"org.easymock.tests.UsageVarargTest.differentLength":346,"org.easymock.tests2.CallbackTest.callback":276,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":15,"org.easymock.tests.UsageTest.openCallCountByLastCall":336,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":193,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":358,"org.easymock.tests.UsageCallCountTest.tooFewCalls":326,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":43,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":281,"org.easymock.tests.UsageThrowableTest.throwCheckedException":154,"org.easymock.tests.MockingTest.testStrictClassMocking":85,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":44,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":321,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":42,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":409,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":270,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":235,"org.easymock.tests.ObjectMethodsTest.testHashCode":396,"org.easymock.tests2.NameTest.nameForNiceMock":392,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":241,"org.easymock.tests2.DependencyTest.testInterfaceMocking":176,"org.easymock.samples.ExampleTest.addDocument":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":66,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":71,"org.easymock.tests2.DelegateToTest.testStubDelegate":273,"org.easymock.tests2.AnswerTest.stubAnswer":234,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":289,"org.easymock.tests.UsageVarargTest.varargLongAccepted":348,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":293,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":377,"org.easymock.tests.UsageExpectAndReturnTest.floatType":296,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":308,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":23,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":2,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":209,"org.easymock.tests.UsageThrowableTest.noUpperLimit":368,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":194,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":6,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":223,"org.easymock.tests2.SerializationTest.test":271,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":79,"org.easymock.tests2.UsageConstraintsTest.testSame":199,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":295,"org.easymock.samples.SupportTest.addDocument":174,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":405,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":56,"org.easymock.tests.GenericTest.testPackageScope":74,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":124,"org.easymock.tests2.NameTest.nameForMock":390,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":304,"org.easymock.tests2.UsageStrictMockTest.differentMethods":186,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":16,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":297,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":146,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":317,"org.easymock.tests2.MockedExceptionTest.testRealException":268,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":183,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":411,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":357,"org.easymock.tests2.NameTest.nameForStrictMock":391,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":28,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":178,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":11,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":7,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":81,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":210,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":26,"org.easymock.tests2.UsageStrictMockTest.range":185,"org.easymock.tests2.UsageConstraintsTest.lessThan":217,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":122,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":60,"org.easymock.tests2.CaptureTest.testCaptureRightOne":228,"org.easymock.tests2.UsageConstraintsTest.testOr":200,"org.easymock.tests.UsageRangeTest.combination":315,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":9,"org.easymock.tests.UsageTest.wrongArguments":335,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":57,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":100,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":298,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":305,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":83,"org.easymock.tests.UsageVarargTest.varargShortAccepted":347,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":329,"org.easymock.tests2.UsageConstraintsTest.cmpTo":202,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":262,"org.easymock.tests2.CaptureTest.testCaptureFromStub":229,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":401,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":27,"org.easymock.tests.UsageTest.unexpectedCallWithArray":334,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":288,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":327,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":306,"org.easymock.tests2.CaptureTest.testCapture":0,"org.easymock.tests2.UsageConstraintsTest.constraints":195,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":290,"org.easymock.samples.ExampleTest.addAndChangeDocument":171,"org.easymock.tests.UsageStrictMockTest.testVerify":394,"org.easymock.tests2.ConstraintsToStringTest.containsToString":164,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":172,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":287,"org.easymock.tests2.CompareToTest.testGreateThan":386,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":363,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":224,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":354,"org.easymock.tests.LimitationsTest.abstractClass":95,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":299,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":385,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":355,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":248,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":342}}]

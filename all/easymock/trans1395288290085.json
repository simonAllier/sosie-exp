[{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:92","sourceCode":"for (final org.easymock.internal.Range org.easymock.internal.Range : java.util.LinkedList<org.easymock.internal.Range>) {\n    int += org.easymock.internal.Range.getMinimum();\n    if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n        int = java.lang.Integer.int;\n    } else {\n        int += org.easymock.internal.Range.getMaximum();\n    }\n}","type":"CtForEachImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"java.lang.Integer.MAX_VALUE":"min"}},{"position":"org.easymock.internal.matchers.Equals:54","failures":[240],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1205","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[77,78],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[8,37,241,69,70,73,74,75,76,81,83,84,86,87,92,93,94,242,243,244,245,246,247,248,140,249,250,251,252,253,152,153,156,203,204,205,206,207,208,254,235,236],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","answer":"value"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:250","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:122","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:53","sourceCode":"return false","type":"CtReturnImpl"},"failures":[85],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[37,255,256,115,257,258,259,260,261,262,154,263,264,265,266,267,239,268],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:141","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[269],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:201","failures":[33,270,106,107,271,272,109,273,110,111,112,113,274,117,118,119,133,275,276,277],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[66,278,279,68,124,280],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[74,281,88,92],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[37,56,282,255,256,115,257,154,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,283,182,284,285,286,287,288,263,225,228,229,289,290,264,265,266,267,239,268],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[33,34,35,291],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:88","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[292,293,294,295,296,297,0,1,2,298,299,3,4,5,6,7,8,9,10,11,12,300,301,302,303,304,13,305,306,307,308,309,310,14,15,16,17,18,19,20,311,21,22,23,24,25,26,27,312,313,28,30,31,314,32,34,35,36,37,38,39,41,42,315,316,317,318,319,45,46,47,48,320,49,50,51,52,53,54,241,321,55,56,57,58,59,60,61,322,282,323,62,63,64,65,324,66,67,278,279,68,325,69,70,71,72,240,73,74,75,76,77,78,281,79,80,81,82,83,84,85,86,87,88,89,90,326,91,92,93,94,327,95,96,97,98,99,100,101,102,103,104,270,328,105,329,330,106,107,108,331,271,272,109,273,332,110,333,111,112,334,113,274,335,336,337,338,339,114,340,341,342,343,344,345,255,256,115,257,346,347,116,348,117,349,350,351,352,118,353,354,355,356,357,119,120,121,122,123,124,125,126,127,128,358,129,130,131,132,133,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,134,374,375,376,377,378,379,380,381,382,383,258,384,385,386,387,244,245,246,247,248,259,260,261,388,135,136,275,389,390,391,392,393,394,395,396,397,137,138,139,140,141,142,143,144,398,399,400,401,145,402,146,147,148,149,403,150,151,249,404,405,406,250,251,407,262,408,409,410,411,412,413,252,414,415,416,417,253,418,419,420,421,152,153,154,155,156,422,423,424,425,426,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,427,428,177,429,430,431,432,433,434,435,436,437,283,181,182,284,285,286,287,288,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,263,438,439,440,441,442,443,444,445,204,205,206,207,208,209,210,211,446,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,254,447,227,228,229,230,448,231,449,289,232,233,234,450,451,452,453,454,455,456,276,457,458,277,459,460,235,236,461,462,280,290,463,237,464,238,264,265,266,267,239,268],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[330,179],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[10,59,62,63,134,139,142,465,225,226,448,231,232,233],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:108","failures":[37,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,283,284,285,286,287,288,225,228,290,239],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:33","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>.getName(), java.lang.Boolean.java.lang.Class<java.lang.Boolean>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:42","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[466,467,468],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"expected"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"delegateTo"}},{"position":"org.easymock.EasyMock:1000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:93","sourceCode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[292,293,294,295,296,297,0,1,2,298,299,3,4,5,6,7,8,9,10,11,12,300,301,302,303,304,13,305,306,307,308,309,310,14,15,16,17,18,19,20,311,21,22,23,24,25,469,470,471,472,473,474,26,475,27,312,313,28,29,476,30,31,314,32,33,34,35,36,37,38,39,40,41,477,42,43,44,315,316,478,479,317,318,319,45,46,47,48,320,49,50,51,52,53,54,241,321,55,56,57,58,59,60,61,322,282,323,62,63,64,65,324,66,67,278,279,68,325,69,70,71,72,240,73,74,75,76,77,78,281,79,80,81,82,83,84,85,86,87,88,89,90,326,91,92,93,94,327,95,96,97,98,99,100,101,102,103,104,270,328,105,480,329,330,106,107,108,331,271,272,109,273,332,110,333,111,112,481,482,334,113,274,335,336,337,338,339,114,340,341,342,343,344,345,255,256,115,257,346,347,483,116,484,348,117,349,350,485,486,351,487,488,352,489,118,353,354,355,356,357,119,490,491,120,121,122,123,124,125,126,127,128,358,129,242,243,130,131,132,133,359,360,361,362,363,364,366,367,368,369,370,371,373,134,374,375,376,377,378,379,380,381,382,383,258,384,385,386,387,244,245,246,247,248,259,260,261,388,135,136,275,389,390,391,392,393,394,395,396,397,137,138,139,140,141,142,143,144,398,399,400,401,145,402,146,147,148,149,403,150,151,249,404,405,406,250,251,407,262,408,409,410,411,412,413,252,414,415,416,417,253,418,419,420,421,152,153,154,155,156,422,423,424,425,426,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,427,428,177,429,430,431,432,433,178,179,434,180,435,436,437,283,181,182,284,285,286,287,288,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,263,438,439,440,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,441,442,443,444,445,204,205,206,207,208,209,210,211,446,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,254,447,227,228,229,230,448,231,449,289,232,233,234,450,451,452,453,454,455,456,276,514,515,457,458,277,459,460,235,236,461,462,280,290,463,237,464,238,264,265,266,267,239,268],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"in":"in"}},{"transplant":{"position":"org.easymock.EasyMock:1708","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"failures":[374,375,376,377,378,379,380,381,382,383,258,384,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,441],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:40","sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:41","sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[292,293,294,295,296,297,0,1,2,298,299,3,4,5,6,7,8,9,10,11,12,300,301,302,303,304,13,305,306,307,308,309,310,14,15,16,17,18,19,20,311,21,22,23,24,25,26,27,312,313,28,29,476,516,30,31,314,32,33,34,35,36,37,38,39,40,41,477,42,43,44,315,316,478,479,517,317,318,319,45,46,47,48,320,49,50,51,52,53,54,241,321,55,56,57,58,59,60,61,322,282,323,62,63,64,65,324,66,67,278,279,68,325,69,70,71,72,240,73,74,75,76,77,78,281,79,80,81,82,83,84,85,86,87,88,89,90,326,91,92,93,94,327,95,96,97,98,99,100,101,102,103,104,270,328,105,480,329,330,106,107,108,331,271,272,518,109,273,519,332,110,333,111,520,112,481,482,334,113,521,274,335,336,337,338,339,114,340,341,342,343,344,345,255,256,115,257,346,347,483,116,484,348,117,349,350,485,486,351,487,488,352,489,118,353,354,355,356,357,119,490,491,120,121,122,123,124,125,126,127,128,358,129,242,243,130,131,132,133,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,134,374,375,376,377,378,379,380,381,382,383,258,384,385,386,387,244,245,246,247,248,259,260,261,388,135,136,275,389,390,391,392,393,394,395,396,397,137,138,139,140,141,142,143,144,398,399,400,401,145,402,146,147,148,149,403,150,151,249,404,405,406,250,251,407,262,408,409,410,411,412,413,252,414,415,416,417,253,418,419,420,421,152,153,154,155,156,422,423,424,425,426,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,427,428,177,429,522,430,431,432,433,178,179,434,180,435,436,437,283,181,182,284,285,286,287,288,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,263,438,439,440,441,442,443,444,445,204,205,206,207,208,209,210,211,446,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,254,447,227,228,229,230,448,231,449,289,232,233,234,450,451,452,453,454,455,456,276,514,515,457,458,277,459,460,235,236,461,462,280,290,463,237,464,238,264,265,266,267,239,268],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[313,379,438,440],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:364","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[404,423],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"equalsMethod","equalsMethod":"equalsMethod"}},{"position":"org.easymock.internal.ReflectionUtils:194","failures":[476,523,524,525,526,527,520],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[481],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[298,4,5,407],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[292,293,294,295,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,311,21,22,23,24,25,26,27,312,313,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,320,49,50,51,52,53,54,241,321,55,56,57,58,59,60,61,322,282,323,62,63,64,65,66,67,278,68,325,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,326,91,92,93,94,95,96,97,98,99,100,101,102,103,104,270,105,330,106,107,108,272,109,110,333,111,112,334,113,274,114,255,256,115,257,116,117,118,119,120,121,122,123,124,125,126,127,128,358,129,242,242,243,243,130,131,132,133,360,361,362,366,134,374,375,376,377,378,379,380,381,382,383,258,384,244,245,246,247,248,135,136,390,391,392,393,394,395,396,397,137,138,139,140,141,142,143,144,398,145,402,146,147,148,149,403,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,283,181,182,284,285,286,287,288,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,263,441,442,443,444,445,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,447,227,228,229,230,448,231,449,289,232,233,234,450,451,452,453,235,236,461,280,290,237,464,238,264,265,266,267,239,268],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1848","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[72,76],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[29,33,35,38,39,40,41,43,44,99,100,102,103,104,270,105,330,106,107,108,271,272,109,273,110,333,111,112,334,113,274,115,116,117,118,119,121,122,242,242,243,243,133,364,135,136,275,390,391,392,393,394,395,177,433,178,179,180,276,277,238],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"position":"org.easymock.ConstructorArgs:77","failures":[528],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:185","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"position":"org.easymock.EasyMock:853","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:48","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.specification.version\")","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:39","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","type":"CtReturnImpl"},"failures":[529],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:52","failures":[2,8,10,11,56,58,59,322,282,62,63,65,68,74,75,79,80,92,93,95,96,97,98,124,134,139,140,142,143,147,149,151,423,424,182,209,219,220,224,225,226,228,229,230,231,449,289,232,233,234],"status":-1,"binaryOperator":"(int) == (int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[292,293,294,295,296,297,0,1,2,298,299,3,4,5,6,7,8,9,10,11,12,300,301,302,303,304,13,305,306,307,308,309,310,14,15,16,17,18,19,20,311,21,22,23,24,25,26,27,312,313,28,29,476,516,30,31,314,32,33,34,35,36,37,38,39,40,41,477,42,43,44,315,316,478,479,517,317,318,319,45,46,47,48,320,49,50,51,52,53,54,241,321,55,56,57,58,59,60,61,322,282,323,62,63,64,65,324,66,67,278,279,68,325,69,70,71,72,240,73,74,75,76,77,78,281,79,80,81,82,83,84,85,86,87,88,89,90,326,91,92,93,94,327,95,96,97,98,99,100,101,102,103,104,270,328,105,480,329,330,106,107,108,331,271,272,518,109,273,519,332,110,333,111,520,112,481,482,334,113,521,274,335,336,337,338,339,114,340,341,342,343,344,345,255,256,115,257,346,347,483,116,484,348,117,349,350,485,486,351,487,488,352,489,118,353,354,355,356,357,119,490,491,120,121,122,123,124,125,126,127,128,358,129,242,243,130,131,132,133,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,134,374,375,376,377,378,379,380,381,382,383,258,384,385,386,387,244,245,246,247,248,259,260,261,388,135,136,275,389,390,391,392,393,394,395,396,397,137,138,139,140,141,142,143,144,398,399,400,401,145,402,146,147,148,149,403,150,151,249,404,405,406,250,251,407,262,408,409,410,411,412,413,252,414,415,416,417,253,418,419,420,421,152,153,154,155,156,422,423,424,425,426,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,427,428,177,429,522,430,431,432,433,178,179,434,180,435,436,437,283,181,182,284,285,286,287,288,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,263,438,439,440,441,442,443,444,445,204,205,206,207,208,209,210,211,446,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,254,447,227,228,229,230,448,231,449,289,232,233,234,450,451,452,453,454,455,456,276,514,515,457,458,277,459,460,235,236,461,462,280,290,463,237,464,238,264,265,266,267,239,268],"status":-1,"binaryOperator":"(int >= 1)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:224","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[456],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:176","failures":[29,530,523,524,525,526,527,531],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"failures":[247,183,184,191,198,236],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[400,439,254],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[476,523,524,525,526,527,520],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:53","failures":[62,240,232],"status":-1,"binaryOperator":"(java.lang.Object == null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[8,11,12,58,95,96,97,98,140,143,144,145,146,147,224,225,226,230],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":72,"org.easymock.tests.ClassInstantiatorFactoryTest.getJVM":529,"org.easymock.tests2.UsageTest.argumentsOrdered":63,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":229,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":23,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":340,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":410,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":61,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":132,"org.easymock.tests2.DelegateToTest.testReturnException":66,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":265,"org.easymock.tests.MockingTest.testPartialClassMocking":178,"org.easymock.tests.MockClassControlTest.testToString":392,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":327,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":439,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":253,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":486,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":157,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":117,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":1,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":513,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":523,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":78,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":152,"org.easymock.tests2.UsageTest.wrongArguments":59,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":310,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":452,"org.easymock.samples.ExampleTest.answerVsDelegate":124,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":277,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":436,"org.easymock.tests2.UsageConstraintsTest.testNull":74,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":102,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":397,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":22,"org.easymock.tests2.CaptureTest.testPrimitive":48,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":156,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":176,"org.easymock.tests.UsageTest.moreThanOneArgument":230,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":101,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":246,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":422,"org.easymock.tests.UsageTest.argumentsOrdered":233,"org.easymock.tests.UsageVarargTest.varargIntAccepted":211,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":414,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":204,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":527,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":272,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":479,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":344,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":333,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":405,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":208,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":497,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":13,"org.easymock.tests.ReplayStateInvalidUsageTest.times":382,"org.easymock.tests2.DependencyTest.testClassMocking":296,"org.easymock.tests2.AnswerTest.answer":2,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":281,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":416,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":295,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":515,"org.easymock.tests2.CaptureTest.testAnd":45,"org.easymock.tests2.UsageTest.strictResetToDefault":57,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":519,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":330,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":245,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":18,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":222,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":426,"org.easymock.tests2.DelegateToTest.testDelegate":68,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":496,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":172,"org.easymock.tests.LimitationsTest.mockFinalMethod":429,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":239,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":445,"org.easymock.tests2.DependencyTest.testClassMockingSupport":297,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":454,"org.easymock.tests2.CaptureTest.testCapture1_2446744":320,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":328,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":170,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":293,"org.easymock.tests.UsageThrowableTest.throwError":283,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":376,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":458,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":522,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":345,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":248,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":491,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":500,"org.easymock.samples.PartialClassMockTest.testGetArea":133,"org.easymock.tests.MockingTest.testInterfaceMocking":434,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":377,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":205,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":400,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":158,"org.easymock.tests2.UsageTest.niceToStrict":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":351,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":364,"org.easymock.tests2.ThreadingTest.testChangeDefault":475,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":528,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":249,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":110,"org.easymock.tests2.MockBuilderTest.testCreateMock":334,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":355,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":307,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":166,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":19,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":514,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":387,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":145,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":450,"org.easymock.tests.UsageOverloadedMethodTest.overloading":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":489,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":357,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":83,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":290,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":447,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":194,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":82,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":53,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":446,"org.easymock.tests.MockClassControlTest.testEquals":396,"org.easymock.tests2.EasyMockSupportClassTest.testAll":116,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":136,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":468,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":174,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":443,"org.easymock.tests2.CaptureTest.testCaptureAll":46,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":294,"org.easymock.tests.MockNameTest.defaultName":430,"org.easymock.tests2.UsageConstraintsTest.testMatches":84,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":247,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":374,"org.easymock.samples.ExampleTest.voteForRemovals":128,"org.easymock.tests.UsageVarargTest.allKinds":219,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":224,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":444,"org.easymock.samples.BasicClassMockTest.testPrintContent":122,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":287,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":6,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":268,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":279,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":341,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":531,"org.easymock.tests2.UsageConstraintsTest.greaterThan":86,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":372,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":484,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":221,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":108,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":501,"org.easymock.samples.ExampleTest.voteForRemoval":125,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":373,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":27,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":331,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":459,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":517,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":270,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":493,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":56,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":238,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":482,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":262,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":16,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":347,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":264,"org.easymock.tests2.CaptureTest.testCaptureFirst":55,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":324,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":407,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":17,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":65,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":464,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":190,"org.easymock.tests2.UsageTest.moreThanOneArgument":58,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":313,"org.easymock.tests2.CaptureTest.testCapture2_2446744":321,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":417,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":113,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":218,"org.easymock.tests.GenericTest.testBridgedEquals":389,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":150,"org.easymock.tests.UsageExpectAndReturnTest.longType":186,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":441,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":14,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":175,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":254,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":326,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":173,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":244,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":260,"org.easymock.tests.UsageCallCountTest.tooManyCalls":151,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":146,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":356,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":191,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":309,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":162,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":286,"org.easymock.tests.MockingTest.testNiceClassMocking":437,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":39,"org.easymock.tests.MockingTest.testClassMocking":432,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":402,"org.easymock.tests2.UsageConstraintsTest.testContains":81,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":115,"org.easymock.tests2.UsageConstraintsTest.testFind":73,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":228,"org.easymock.tests.MockTypeTest.fromEasyMockClass":457,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":137,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":32,"org.easymock.tests.UsageExpectAndReturnTest.object":193,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":105,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":308,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":21,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":524,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":213,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":362,"org.easymock.tests.UsageTest.exactCallCountByLastCall":234,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":203,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":251,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":438,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":423,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":476,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":199,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":209,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":280,"org.easymock.tests.MockClassControlTest.testHashCode":395,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":336,"org.easymock.tests2.EasyMockSupportTest.testVerify":25,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":488,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":466,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":424,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":461,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":386,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":292,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":325,"org.easymock.tests.UsageVarargTest.varargCharAccepted":212,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":365,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":7,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":421,"org.easymock.tests2.UsageTest.openCallCountByLastCall":322,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":24,"org.easymock.tests.DefaultClassInstantiatorTest.object":366,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":385,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":360,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":465,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":352,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":284,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":303,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":335,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":499,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":394,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":106,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":163,"org.easymock.tests.ReplayStateInvalidCallsTest.times":505,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":200,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":259,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":506,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":467,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":119,"org.easymock.tests2.UsageTest.resumeIfFailure":64,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":276,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":478,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":267,"org.easymock.tests2.StubTest.stubWithReturnValue":37,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":520,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":91,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":192,"org.easymock.tests2.SerializationTest.testAllMockedMethod":35,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":415,"org.easymock.samples.SupportTest.voteForRemovals":131,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":388,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":338,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":169,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":291,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":420,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":298,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":440,"org.easymock.tests.UsageExpectAndThrowTest.object":167,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":89,"org.easymock.tests2.DelegateToTest.testWrongClass":278,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":503,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":235,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":236,"org.easymock.tests.UsageStrictMockTest.range":142,"org.easymock.samples.ConstructorCalledMockTest.testTax":242,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":318,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":311,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":38,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":168,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":111,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":232,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":258,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":346,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":451,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":495,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":401,"org.easymock.tests2.CaptureTest.testCaptureNone":52,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":470,"org.easymock.tests.UsageUnorderedTest.message":134,"org.easymock.tests.UsageVerifyTest.twoReturns":226,"org.easymock.tests.UsageVarargTest.varargByteAccepted":217,"org.easymock.tests2.ThreadingTest.testThreadSafe":26,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":353,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":149,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":121,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":363,"org.easymock.tests2.CaptureTest.testCapture_2617107":47,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":456,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":418,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":155,"org.easymock.tests2.UsageConstraintsTest.any":79,"org.easymock.tests2.StubTest.stub":36,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":381,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":261,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":419,"org.easymock.tests.UsageExpectAndThrowTest.longType":160,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":266,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":370,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":380,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":9,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":114,"org.easymock.tests2.SerializationTest.testClass":33,"org.easymock.tests.LimitationsTest.mockNativeMethod":177,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":202,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":275,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":302,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":511,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":12,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":471,"org.easymock.tests2.NameTest.nameForMocksControl":98,"org.easymock.tests2.MockedExceptionTest.testMockedException":256,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":348,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":289,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":180,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":161,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":314,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":99,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":112,"org.easymock.tests.MockingTest.testNicePartialClassMocking":179,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":104,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":530,"org.easymock.tests2.CaptureTest.testCaptureLast":51,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":300,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":455,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":510,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":44,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":77,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":90,"org.easymock.tests.MockingTest.testTwoMocks":433,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":507,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":315,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":183,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":165,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":62,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":93,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":474,"org.easymock.samples.ExampleTest.removeNonExistingDocument":358,"org.easymock.tests.UsageStrictMockTest.differentMethods":143,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":306,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":378,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":337,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":473,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":368,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":312,"org.easymock.tests2.MockBuilderTest.testCreateMockString":274,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":390,"org.easymock.tests.UsageExpectAndThrowTest.floatType":159,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":349,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":85,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":483,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":3,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":516,"org.easymock.tests.UsageVerifyTest.twoThrows":225,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":462,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":118,"org.easymock.samples.ExampleTest.voteAgainstRemoval":126,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":411,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":399,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":107,"org.easymock.tests.LimitationsTest.privateConstructor":428,"org.easymock.tests2.UsageConstraintsTest.testNotNull":92,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":255,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":288,"org.easymock.tests2.UsageTest.defaultResetToNice":323,"org.easymock.samples.ExampleTest.voteAgainstRemovals":123,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":412,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":198,"org.easymock.tests.UsageVarargTest.differentLength":214,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":301,"org.easymock.tests2.CallbackTest.callback":30,"org.easymock.tests2.UsageConstraintsTest.equals":240,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":480,"org.easymock.tests.UsageTest.openCallCountByLastCall":449,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":69,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":154,"org.easymock.tests.UsageCallCountTest.tooFewCalls":147,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":41,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":453,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":472,"org.easymock.tests.UsageThrowableTest.throwCheckedException":285,"org.easymock.tests.MockingTest.testStrictClassMocking":431,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":43,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":263,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":40,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":305,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":383,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":42,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":5,"org.easymock.tests.ObjectMethodsTest.testHashCode":361,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":526,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":509,"org.easymock.tests2.NameTest.nameForNiceMock":97,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":28,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":504,"org.easymock.tests2.DependencyTest.testInterfaceMocking":0,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":525,"org.easymock.samples.ExampleTest.addDocument":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":354,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":490,"org.easymock.tests2.DelegateToTest.testStubDelegate":67,"org.easymock.tests2.AnswerTest.stubAnswer":4,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":140,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":481,"org.easymock.tests.UsageVarargTest.varargLongAccepted":216,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":144,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":409,"org.easymock.tests.UsageExpectAndReturnTest.floatType":185,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":201,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":29,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":243,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":463,"org.easymock.tests.UsageThrowableTest.noUpperLimit":181,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":87,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":343,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":70,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":316,"org.easymock.tests2.SerializationTest.test":34,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":49,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":367,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":184,"org.easymock.tests2.UsageConstraintsTest.testSame":75,"org.easymock.samples.SupportTest.addDocument":130,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":477,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":494,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":379,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":350,"org.easymock.tests.GenericTest.testPackageScope":135,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":425,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":250,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":342,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":435,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":492,"org.easymock.tests2.NameTest.nameForMock":95,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":195,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":521,"org.easymock.tests2.UsageStrictMockTest.differentMethods":11,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":329,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":187,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":171,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":359,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":223,"org.easymock.tests2.MockedExceptionTest.testRealException":257,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":460,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":252,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":319,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":269,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":413,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":8,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":384,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":153,"org.easymock.tests2.NameTest.nameForStrictMock":96,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":332,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":31,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":103,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":317,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":88,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":369,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":109,"org.easymock.tests2.UsageStrictMockTest.range":10,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":498,"org.easymock.tests2.UsageConstraintsTest.lessThan":94,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":339,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":408,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":15,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":487,"org.easymock.tests2.CaptureTest.testCaptureRightOne":54,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":469,"org.easymock.tests2.UsageConstraintsTest.testOr":76,"org.easymock.tests.UsageRangeTest.combination":220,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":100,"org.easymock.tests.UsageTest.wrongArguments":231,"org.easymock.tests2.MockBuilderTest.testWithConstructor":518,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":485,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":391,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":188,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":404,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":196,"org.easymock.tests.UsageVarargTest.varargShortAccepted":215,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":371,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":403,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":512,"org.easymock.tests2.UsageConstraintsTest.cmpTo":80,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":299,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":502,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":406,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":282,"org.easymock.tests2.CaptureTest.testCaptureFromStub":241,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":375,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":273,"org.easymock.tests.UsageTest.unexpectedCallWithArray":448,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":508,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":139,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":148,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":197,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":141,"org.easymock.tests2.UsageConstraintsTest.constraints":71,"org.easymock.samples.ExampleTest.addAndChangeDocument":129,"org.easymock.tests.UsageStrictMockTest.testVerify":398,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":120,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":138,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":442,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":50,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":206,"org.easymock.tests.LimitationsTest.abstractClass":427,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":189,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":207,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":237,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":20,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":210}}]

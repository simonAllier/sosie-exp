[{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:183","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1543","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.Compare:52","failures":[2],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[3,4,5,6,7],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[8,9,10,11,12,13],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:280","failures":[0,14,15,1,16,17,18,19],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[20,21,22,23,24],"status":-1,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:83","sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[8,25,26,27,28,29,30,31,32,11,33,34,35,36,37],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arguments":"arguments"}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[33,38,39,37,40],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:59","sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection","obj":"obj","targetField":"targetField"}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[16],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[84,85,86,87],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[88,89,90,91,92],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[93,94,95,96,97,98],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[99,100,101,102,103,104,105,106,107,108,109],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"paramType"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[8,9,10,11,12,13],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:230","sourceCode":"throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:124","failures":[110,111,112,113,114,41,115,8,25,116,42,26,27,117,118,118,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,63,139,140,141,142,143,144,145,0,64,29,146,147,65,30,148,149,66,67,150,151,31,32,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,68,174,175,176,69,70,177,178,179,180,181,21,22,71,72,73,74,75,76,182,183,184,185,186,187,188,11,189,190,33,38,191,192,193,194,195,196,197,198,199,200,201,202,14,203,204,205,206,207,208,209,210,211,212,213,77,214,215,34,216,217,218,78,219,35,36,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,39,241,242,243,244,245,246,247,248,249,250,251,252,84,253,254,255,256,85,257,2,258,259,260,261,262,263,264,265,266,86,267,268,269,270,271,272,273,274,79,80,81,82,275,276,277,278,279,280,281,282,283,1,16,17,19,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,37,40,310,311,83,312,313,107,314,315,316,108,317,318,319,320,321,322,323,324,325,326,327,328,329,330],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:160","sourceCode":"return java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:158","sourceCode":"if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n    java.lang.reflect.Field.setAccessible(true);\n    return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n} ","type":"CtIfImpl"},"failures":[331,332],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"f":"f","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"failures":[333],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"failures":[334],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[101,335,336,337,338,339,284,287,106],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:140","sourceCode":"java.lang.StringBuilder.append(\":\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[340,31,32,33,37],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[8,25,26,27,341,28,135,136,137,142,29,30,31,32,11,33,38,342,343,34,35,36,220,223,228,229,230,297,37,40],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:332","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[217,237,2],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Null:35","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[256],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[101,335,336,337,338,344,345,284,106],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[244,258,264,346],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.Compare:52","failures":[2],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[317,319,320,321,322,323,324,326,347,327,328,330],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[348,217,237,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.EasyMock:1988","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.RecordState:222","failures":[349,350,351,352],"status":-1,"binaryOperator":"(\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[353,354,355],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[356,357,358],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[101,336,337,338,344,345,106],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[20,21,22,23,24],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidSupport:34","sourceCode":"return org.easymock.internal.AndroidSupport.boolean","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[246,247,249,251,252,359,260,265,317,319,327],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:682","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[360,361],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":247,"org.easymock.tests2.UsageTest.argumentsOrdered":36,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":41,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":298,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":74,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":217,"org.easymock.tests2.StubTest.stubWithReturnValue":83,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":101,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":264,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":201,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":161,"org.easymock.tests2.SerializationTest.testAllMockedMethod":286,"org.easymock.tests2.DelegateToTest.testReturnException":1,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":72,"org.easymock.tests.MockingTest.testPartialClassMocking":139,"org.easymock.samples.SupportTest.voteForRemovals":213,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":13,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":20,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":55,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":355,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":302,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":43,"org.easymock.tests.UsageExpectAndThrowTest.object":53,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":261,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":232,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":336,"org.easymock.tests2.DelegateToTest.testWrongClass":17,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":192,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":193,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":84,"org.easymock.tests2.UsageTest.wrongArguments":34,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":148,"org.easymock.samples.ConstructorCalledMockTest.testTax":208,"org.easymock.tests.UsageStrictMockTest.range":33,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":185,"org.easymock.samples.ExampleTest.answerVsDelegate":14,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":295,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":312,"org.easymock.tests2.UsageConstraintsTest.testNull":249,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":236,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":54,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":297,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":226,"org.easymock.tests2.CaptureTest.testPrimitive":320,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":150,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":62,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":6,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":26,"org.easymock.tests.UsageTest.moreThanOneArgument":115,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":235,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":184,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":9,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":112,"org.easymock.tests2.CaptureTest.testCaptureNone":325,"org.easymock.tests.UsageUnorderedTest.message":30,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":342,"org.easymock.tests.UsageVerifyTest.twoReturns":32,"org.easymock.tests.UsageVarargTest.varargByteAccepted":127,"org.easymock.tests2.ThreadingTest.testThreadSafe":277,"org.easymock.tests.UsageTest.argumentsOrdered":27,"org.easymock.tests.UsageVarargTest.varargIntAccepted":121,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":134,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":354,"org.easymock.tests2.CaptureTest.testCapture_2617107":319,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":194,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":345,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":222,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":67,"org.easymock.tests2.UsageConstraintsTest.any":253,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":225,"org.easymock.tests2.StubTest.stub":311,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":198,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":5,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":73,"org.easymock.tests.UsageExpectAndThrowTest.longType":46,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":348,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":309,"org.easymock.tests2.SerializationTest.testClass":284,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":283,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":305,"org.easymock.tests.LimitationsTest.mockNativeMethod":182,"org.easymock.tests2.AnswerTest.answer":267,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":23,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":171,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":359,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":91,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":274,"org.easymock.tests2.CaptureTest.testAnd":317,"org.easymock.tests2.UsageTest.strictResetToDefault":214,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":310,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":39,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":100,"org.easymock.tests2.MockedExceptionTest.testMockedException":80,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":111,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":292,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":143,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":42,"org.easymock.tests2.DelegateToTest.testDelegate":19,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":47,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":141,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":233,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":227,"org.easymock.tests.MockingTest.testNicePartialClassMocking":140,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":58,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":238,"org.easymock.tests2.CaptureTest.testCaptureLast":324,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":75,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":352,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":252,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":108,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":262,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":181,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":351,"org.easymock.tests2.CaptureTest.testCapture1_2446744":321,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":109,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":152,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":56,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":272,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":51,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":35,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":266,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":353,"org.easymock.tests.UsageThrowableTest.throwError":172,"org.easymock.tests.UsageStrictMockTest.differentMethods":38,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":95,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":279,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":343,"org.easymock.tests2.MockBuilderTest.testCreateMockString":230,"org.easymock.tests.UsageExpectAndThrowTest.floatType":45,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":114,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":2,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":268,"org.easymock.tests.UsageVerifyTest.twoThrows":31,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":349,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":303,"org.easymock.samples.PartialClassMockTest.testGetArea":200,"org.easymock.tests2.CompareToTest.testLessOrEqual":346,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":195,"org.easymock.samples.ExampleTest.voteAgainstRemoval":204,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":242,"org.easymock.tests2.UsageTest.niceToStrict":216,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":44,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":105,"org.easymock.tests2.UsageConstraintsTest.testNotNull":265,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":79,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":70,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":356,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":224,"org.easymock.tests2.MockBuilderTest.testCreateMock":228,"org.easymock.tests2.UsageTest.defaultResetToNice":219,"org.easymock.samples.ExampleTest.voteAgainstRemovals":202,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":90,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":167,"org.easymock.tests.UsageVarargTest.differentLength":124,"org.easymock.tests2.CallbackTest.callback":282,"org.easymock.tests.UsageTest.openCallCountByLastCall":116,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":52,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":12,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":293,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":244,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":66,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":183,"org.easymock.tests.UsageCallCountTest.tooFewCalls":132,"org.easymock.tests.UsageOverloadedMethodTest.overloading":147,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":85,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":64,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":314,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":146,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":163,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":331,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":256,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":326,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":186,"org.easymock.tests.UsageThrowableTest.throwCheckedException":175,"org.easymock.tests2.EasyMockSupportClassTest.testAll":301,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":22,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":60,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":10,"org.easymock.tests2.CaptureTest.testCaptureAll":318,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":273,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":179,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":316,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":63,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":107,"org.easymock.tests2.UsageConstraintsTest.testMatches":257,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":315,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":270,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":113,"org.easymock.tests2.CompareToTest.testGreateOrEqual":87,"org.easymock.samples.ExampleTest.voteForRemovals":206,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":344,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":281,"org.easymock.tests.UsageVarargTest.allKinds":129,"org.easymock.tests2.DependencyTest.testInterfaceMocking":231,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":151,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":338,"org.easymock.samples.BasicClassMockTest.testPrintContent":211,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":180,"org.easymock.samples.ExampleTest.addDocument":205,"org.easymock.tests2.DelegateToTest.testStubDelegate":16,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":69,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":306,"org.easymock.tests2.AnswerTest.stubAnswer":269,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":76,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":18,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":189,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":339,"org.easymock.tests2.UsageConstraintsTest.greaterThan":258,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":334,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":243,"org.easymock.tests.UsageVarargTest.varargLongAccepted":126,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":191,"org.easymock.samples.ExampleTest.voteForRemoval":203,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":98,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":278,"org.easymock.tests.UsageExpectAndReturnTest.floatType":154,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":170,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":287,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":239,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":209,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":350,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":259,"org.easymock.tests.UsageThrowableTest.noUpperLimit":173,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":245,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":77,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":130,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":322,"org.easymock.tests2.SerializationTest.test":285,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":335,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":332,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":7,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":290,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":94,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":68,"org.easymock.tests2.UsageConstraintsTest.testSame":250,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":153,"org.easymock.samples.SupportTest.addDocument":212,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":71,"org.easymock.tests2.CaptureTest.testCaptureFirst":330,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":15,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":291,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":221,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":29,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":159,"org.easymock.tests.GenericTest.testPackageScope":21,"org.easymock.tests2.CaptureTest.testCapture2_2446744":329,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":280,"org.easymock.tests2.UsageTest.moreThanOneArgument":215,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":229,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":92,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":128,"org.easymock.tests.GenericTest.testBridgedEquals":24,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":136,"org.easymock.tests.UsageExpectAndReturnTest.longType":155,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":288,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":177,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":361,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":61,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":164,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":263,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":59,"org.easymock.tests2.UsageStrictMockTest.differentMethods":40,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":103,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":4,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":110,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":156,"org.easymock.tests.UsageCallCountTest.tooManyCalls":137,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":57,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":144,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":131,"org.easymock.tests2.MockedExceptionTest.testRealException":82,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":160,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":308,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":48,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":149,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":176,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":313,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":360,"org.easymock.tests2.UsageConstraintsTest.testContains":255,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":81,"org.easymock.tests2.UsageConstraintsTest.testFind":248,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":65,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":358,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":275,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":237,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":276,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":187,"org.easymock.tests.UsageExpectAndReturnTest.object":162,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":260,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":96,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":240,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":223,"org.easymock.tests2.UsageStrictMockTest.range":37,"org.easymock.tests2.UsageConstraintsTest.lessThan":86,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":296,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":337,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":123,"org.easymock.tests.UsageTest.exactCallCountByLastCall":117,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":138,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":333,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":289,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":89,"org.easymock.tests2.CaptureTest.testCaptureRightOne":327,"org.easymock.tests2.UsageConstraintsTest.testOr":251,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":106,"org.easymock.tests.UsageRangeTest.combination":142,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":234,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":119,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":168,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":0,"org.easymock.tests.UsageTest.wrongArguments":25,"org.easymock.tests2.MockBuilderTest.testWithConstructor":99,"org.easymock.tests2.EasyMockSupportTest.testVerify":300,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":157,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":88,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":165,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":97,"org.easymock.tests.UsageVarargTest.varargShortAccepted":125,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":145,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":341,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":271,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":135,"org.easymock.tests2.UsageConstraintsTest.cmpTo":254,"org.easymock.tests.UsageVarargTest.varargCharAccepted":122,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":307,"org.easymock.tests2.UsageTest.openCallCountByLastCall":218,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":78,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":357,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":299,"org.easymock.tests.DefaultClassInstantiatorTest.object":93,"org.easymock.tests2.CaptureTest.testCaptureFromStub":328,"org.easymock.tests.UsageTest.unexpectedCallWithArray":8,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":28,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":50,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":11,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":174,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":133,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":102,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":166,"org.easymock.tests2.CaptureTest.testCapture":347,"org.easymock.tests2.UsageConstraintsTest.constraints":246,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":241,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":190,"org.easymock.samples.ExampleTest.addAndChangeDocument":207,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":49,"org.easymock.tests.CapturesMatcherTest.test":118,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":169,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":3,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":304,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":188,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":178,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":323,"org.easymock.tests2.UsageTest.resumeIfFailure":220,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":196,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":158,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":197,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":340,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":294,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":120}}]

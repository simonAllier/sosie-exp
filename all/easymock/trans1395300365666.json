[{"transplant":{"position":"org.easymock.EasyMock:1361","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:81","sourceCode":"return org.easymock.internal.Results.getMainInterval().contains(org.easymock.internal.Results.getCallCount())","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[64,65,66,203],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1149","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[204],"status":-1,"binaryOperator":"(\"\" + int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[205,206],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[207,208],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[209,210,19,211,63,212,213,214,215,216,217,218,219,220,221,161,222],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[1,5,6,8,223,224,225,34,69,83,226,227,228,229,230,231,232,233,234,235,236,237,238,239,94,95,240,241,242,243,244,98,99,100,245,246,247,248,249,250,251,164,165,166,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,181,182,183,271],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:136","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[70],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Same:37","failures":[73],"status":-1,"binaryOperator":"(java.lang.Object) == java.lang.Object","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","type":"CtReturnImpl"},"failures":[99,100,182,183],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[8,272,273,274,275,239,240,241,96,99,100,125,249,276,277,278,165,166,279,280,281,258,261,262,263,264,266,269,182,183],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"org.easymock.internal.AndroidSupport.boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:140","sourceCode":"java.lang.StringBuilder.append(\":\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[99,165,166,282,182],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[227,234,252,254,261,269],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[283,84],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[214,284],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:94","failures":[41,42,43,44,50,285,69,70,71,72,73,74,75,76,204,77,86,87,90,91],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:183","sourceCode":"final java.lang.SecurityException java.lang.SecurityException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:53","sourceCode":"java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection)","type":"CtInvocationImpl"},"failures":[286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[302,303,304,305,306,307,308,309,64],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:51","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,6,310,7,8,9,10,11,311,312,313,314,13,209,210,19,211,315,20,21,316,317,22,24,318,28,29,30,319,320,31,32,33,321,322,323,324,34,39,40,41,42,43,44,325,45,46,47,48,49,50,285,326,51,52,56,59,60,327,328,61,62,63,64,65,67,68,69,70,71,72,73,74,75,76,204,77,78,79,80,81,82,83,84,85,86,87,88,329,89,90,91,92,237,93,238,239,94,95,330,331,332,240,241,96,242,243,97,244,98,99,100,245,101,333,334,335,336,102,103,213,208,104,337,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,338,339,340,341,342,343,344,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,345,346,347,149,150,151,152,153,154,155,348,349,246,350,351,247,248,249,214,215,216,157,217,352,353,158,354,159,160,276,277,278,250,251,218,219,220,221,161,222,355,356,357,358,359,360,361,362,363,364,162,163,365,366,367,368,369,164,165,166,370,371,372,373,374,259,260,261,262,375,376,263,264,265,266,167,168,169,170,171,267,172,173,174,175,176,377,378,379,380,381,382,268,180,269,270,181,182,183,271,383,384,284,205,206,385,187,188,189,190,191,192,193,194,195,196,198,201,202],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,6,310,7,8,9,10,11,311,312,313,314,12,223,13,14,15,16,17,386,18,209,210,19,211,20,21,316,22,387,23,24,388,25,389,26,27,274,275,28,29,30,31,32,33,321,322,323,324,34,35,36,37,38,39,40,41,42,43,44,325,45,46,47,48,49,50,285,326,51,52,53,54,55,56,57,58,59,60,327,328,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,237,93,238,239,94,95,330,331,332,240,241,96,242,243,97,244,98,99,100,245,101,102,103,213,208,104,390,391,392,393,394,395,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,341,342,343,344,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,248,156,396,157,217,352,353,158,354,159,160,251,218,219,220,221,161,222,364,162,163,365,366,367,368,369,164,165,166,370,371,372,373,374,259,260,261,262,375,376,263,264,265,266,167,168,169,170,171,172,173,174,175,176,177,178,179,378,379,380,381,382,268,180,269,270,181,182,183,271,383,184,185,186,187,188,397,397,398,398,189,190,191,192,193,194,195,196,197,198,199,200,201,202],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:83","failures":[239,240,241,99,249,165,166,281,258,261,262,263,264,266,269,182],"status":-1,"binaryOperator":"java.lang.Object[] == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[0,2,3,4,5,7,9,10,12,13,14,16,19,20,21,316,22,23,24,25,26,27,274,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,325,45,46,49,50,52,53,54,55,56,57,58,59,327,328,61,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,237,93,238,239,94,95,330,331,240,241,242,243,244,98,99,100,245,101,102,103,208,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,248,156,157,360,361,364,163,365,366,367,368,369,164,165,166,259,260,262,375,376,263,264,265,266,268,269,270,181,182,183,271,184,185,186,187,188,189,190,191,192,194,197,202],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[399,400,401],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,310,7,8,9,10,11,12,223,13,14,15,16,402,17,386,224,18,225,209,210,19,211,20,21,316,22,23,24,388,272,25,389,26,27,273,274,275,28,29,30,31,32,33,321,322,323,324,34,35,36,37,38,39,40,41,42,43,44,325,45,46,47,48,49,50,285,326,51,52,53,54,55,56,57,58,59,60,328,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,329,89,90,91,92,237,93,238,239,94,95,330,331,332,240,241,96,242,243,97,244,98,99,100,245,101,102,103,213,208,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,341,342,343,344,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,349,350,351,249,156,157,217,158,354,159,160,276,277,278,218,219,220,221,161,222,364,162,163,365,366,367,368,369,164,165,166,370,371,372,373,374,259,260,261,262,375,376,263,264,265,266,167,168,169,170,171,267,172,173,174,175,176,177,178,179,378,379,380,381,382,268,180,269,270,181,182,183,271,184,185,186,385,187,188,397,398,189,190,191,192,193,194,195,196,197,198,199,200,201,202],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:180","failures":[23,302,303,304,403,404,305,306,307,405,308,406,64],"status":-1,"binaryOperator":"(java.lang.Class<?>[].int) != (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[209,210,19,211,63,237,331,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,351,217,218,219,220,221,161,222,364,163,365,366,367,368,369,165,259,376,188],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:230","sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[407],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:122","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[12,223,14,15,16,402,17,386,224,18,225,19,23,388,408,272,409,25,389,26,27,273,274,410,275,411,412,413,35,36,37,38,52,53,54,55,57,58,64,66,156,396,414,415,177,178,416,179,417,184,185,186,397,397,398,398,197,199,200],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,310,7,8,9,10,11,12,223,13,14,15,16,402,17,386,224,18,225,209,210,19,211,20,21,316,22,23,24,388,272,25,389,26,27,273,274,275,28,29,30,31,32,33,321,322,323,324,34,35,36,37,38,39,40,41,42,43,44,325,45,46,47,48,49,50,285,326,51,52,53,54,55,56,57,58,59,60,328,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,329,89,90,91,92,237,93,238,239,94,95,330,331,332,240,241,96,242,243,97,244,98,99,100,245,101,102,103,213,208,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,341,342,343,344,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,349,350,351,249,156,157,217,158,354,159,160,276,277,278,218,219,220,221,161,222,364,162,163,365,366,367,368,369,164,165,166,370,371,372,373,374,259,260,261,262,375,376,263,264,265,266,167,168,169,170,171,267,172,173,174,175,176,177,178,179,378,379,380,381,382,268,180,269,270,181,182,183,271,184,185,186,385,187,188,397,398,189,190,191,192,193,194,195,196,197,198,199,200,201,202],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"lock":"lock"}},{"transplant":{"position":"org.easymock.internal.Results:64","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[23,302],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:109","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[237,331,163,165,259,376],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[418,419],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:52","failures":[99,100,360,361,164,182,183],"status":-1,"binaryOperator":"(int) == (int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[283,84],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[17,386,387,39,40,41,42,43,44,325,45,46,47,48,49,50,285,326,51,328,62,67,68,69,70,71,72,73,74,75,76,204,77,78,79,80,81,82,83,84,85,86,87,88,329,89,90,91,92,237,244,98,102,103,213,208,104,149,150,151,152,153,154,155,348,157,217,161,222,266,167,176,377,269,270],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[214,284],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[64,65,66,203],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"(((java.util.Comparator<? super T>) + \"(\") + (T))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:194","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n    return java.lang.Number.byteValue();\n} else if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","type":"CtIfImpl"},"failures":[12,13,14,16,21,23,272,25,26,27,274,32,35,36,37,38,52,53,54,55,56,57,58,328,129,130,131,132,133,137,138,144,145,146,147,148,149,150,153,154,155,156,378,379,381,184,185,186,397,397,398,398,197],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.EasyMock:2000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[64,65,66,203],"status":-1,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":70,"org.easymock.tests2.UsageTest.argumentsOrdered":241,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":259,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":9,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":333,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":95,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":198,"org.easymock.tests2.DelegateToTest.testReturnException":20,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":219,"org.easymock.tests.MockingTest.testPartialClassMocking":184,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":384,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":105,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":36,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":29,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":305,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":76,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":102,"org.easymock.tests2.UsageTest.wrongArguments":239,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":293,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":343,"org.easymock.samples.ExampleTest.answerVsDelegate":190,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":415,"org.easymock.tests2.UsageConstraintsTest.testNull":72,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":14,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":8,"org.easymock.tests2.CaptureTest.testPrimitive":44,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":104,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":124,"org.easymock.tests.UsageTest.moreThanOneArgument":260,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":13,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":380,"org.easymock.tests.UsageTest.argumentsOrdered":264,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":359,"org.easymock.tests.UsageVarargTest.varargIntAccepted":169,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_NotFound":407,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":235,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":149,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":388,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":309,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":300,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":389,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":153,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":230,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":24,"org.easymock.tests2.AnswerTest.answer":30,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":204,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":324,"org.easymock.tests2.CaptureTest.testAnd":41,"org.easymock.tests2.UsageTest.strictResetToDefault":93,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":386,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":379,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":127,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":4,"org.easymock.tests2.DelegateToTest.testDelegate":22,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":363,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":120,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":161,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":374,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":250,"org.easymock.tests2.CaptureTest.testCapture1_2446744":325,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":118,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":322,"org.easymock.tests.UsageThrowableTest.throwError":364,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":356,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":280,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":301,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":382,"org.easymock.samples.PartialClassMockTest.testGetArea":197,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":391,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":150,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":339,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":106,"org.easymock.tests2.UsageTest.niceToStrict":94,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":401,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":25,"org.easymock.tests2.MockBuilderTest.testCreateMock":273,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":290,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":114,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":227,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":5,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":206,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":352,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":341,"org.easymock.tests.UsageOverloadedMethodTest.overloading":187,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":81,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":351,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":385,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":140,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":80,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":49,"org.easymock.tests2.EasyMockSupportClassTest.testAll":35,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":178,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":122,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":232,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":411,"org.easymock.tests2.CaptureTest.testCaptureAll":42,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":323,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":372,"org.easymock.tests.MockNameTest.defaultName":334,"org.easymock.tests2.UsageConstraintsTest.testMatches":82,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":337,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":381,"org.easymock.samples.ExampleTest.voteForRemovals":194,"org.easymock.tests.UsageVarargTest.allKinds":176,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":164,"org.easymock.samples.BasicClassMockTest.testPrintContent":200,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":373,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":368,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":243,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":222,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":297,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":317,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":406,"org.easymock.tests2.UsageConstraintsTest.greaterThan":84,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":126,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":225,"org.easymock.samples.ExampleTest.voteForRemoval":191,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":60,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":357,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":402,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":179,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":237,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":304,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":212,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":2,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":163,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":218,"org.easymock.tests2.CaptureTest.testCaptureFirst":51,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":315,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":3,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":242,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":249,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":136,"org.easymock.tests2.UsageTest.moreThanOneArgument":238,"org.easymock.tests2.CaptureTest.testCapture2_2446744":326,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":328,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":274,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":175,"org.easymock.tests.GenericTest.testBridgedEquals":419,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":277,"org.easymock.tests.UsageExpectAndReturnTest.longType":132,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":0,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":370,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":410,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":123,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":329,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":348,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":121,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":215,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":378,"org.easymock.tests.UsageCallCountTest.tooManyCalls":278,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":253,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":158,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":137,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":292,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":110,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":367,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":53,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":408,"org.easymock.tests2.UsageConstraintsTest.testContains":79,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":353,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":19,"org.easymock.tests2.UsageConstraintsTest.testFind":71,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":188,"org.easymock.tests.MockTypeTest.fromEasyMockClass":355,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":40,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":268,"org.easymock.tests.UsageExpectAndReturnTest.object":139,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":17,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":291,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":7,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":171,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":306,"org.easymock.tests.UsageTest.exactCallCountByLastCall":265,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":157,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":360,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":257,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":302,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":167,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":145,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":350,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":294,"org.easymock.tests2.EasyMockSupportTest.testVerify":11,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":229,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":361,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":205,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":349,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":281,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":321,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":387,"org.easymock.tests.UsageVarargTest.varargCharAccepted":170,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":97,"org.easymock.tests2.UsageTest.openCallCountByLastCall":330,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":399,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":10,"org.easymock.tests.DefaultClassInstantiatorTest.object":377,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":284,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":345,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":258,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":112,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":365,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":224,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":111,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":146,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":214,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":38,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":231,"org.easymock.tests2.UsageTest.resumeIfFailure":96,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":414,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":221,"org.easymock.tests2.StubTest.stubWithReturnValue":63,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":303,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":138,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":89,"org.easymock.tests2.SerializationTest.testAllMockedMethod":66,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":335,"org.easymock.samples.SupportTest.voteForRemovals":202,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":234,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":418,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":117,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":203,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":336,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":319,"org.easymock.tests.UsageExpectAndThrowTest.object":115,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":87,"org.easymock.tests2.DelegateToTest.testWrongClass":316,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":154,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":155,"org.easymock.samples.ConstructorCalledMockTest.testTax":397,"org.easymock.tests.UsageStrictMockTest.range":182,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":310,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":52,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":116,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":26,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":263,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":342,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":252,"org.easymock.tests2.CaptureTest.testCaptureNone":48,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":340,"org.easymock.tests.UsageUnorderedTest.message":266,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":279,"org.easymock.tests.UsageVerifyTest.twoReturns":166,"org.easymock.tests.UsageVarargTest.varargByteAccepted":174,"org.easymock.tests2.ThreadingTest.testThreadSafe":59,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":160,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":199,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":347,"org.easymock.tests2.CaptureTest.testCapture_2617107":43,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":236,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":208,"org.easymock.tests2.UsageConstraintsTest.any":77,"org.easymock.tests2.StubTest.stub":62,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":216,"org.easymock.tests.UsageExpectAndThrowTest.longType":108,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":220,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":393,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":98,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":101,"org.easymock.tests2.SerializationTest.testClass":64,"org.easymock.tests.LimitationsTest.mockNativeMethod":156,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":416,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":148,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":413,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":287,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":245,"org.easymock.tests2.NameTest.nameForMocksControl":314,"org.easymock.tests2.MockedExceptionTest.testMockedException":210,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":288,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":376,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":186,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":109,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":12,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":27,"org.easymock.tests.MockingTest.testNicePartialClassMocking":185,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":16,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":404,"org.easymock.tests2.CaptureTest.testCaptureLast":47,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":251,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":58,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":75,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":88,"org.easymock.tests.MockingTest.testTwoMocks":417,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":129,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":113,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":240,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":91,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":392,"org.easymock.tests.UsageStrictMockTest.differentMethods":183,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":289,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":295,"org.easymock.tests2.ConstraintsToStringTest.andToString":233,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":327,"org.easymock.tests2.MockBuilderTest.testCreateMockString":275,"org.easymock.tests.UsageExpectAndThrowTest.floatType":107,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":83,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":31,"org.easymock.tests.UsageVerifyTest.twoThrows":165,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":37,"org.easymock.samples.ExampleTest.voteAgainstRemoval":192,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":338,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":18,"org.easymock.tests2.UsageConstraintsTest.testNotNull":90,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":209,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":369,"org.easymock.tests2.UsageTest.defaultResetToNice":332,"org.easymock.samples.ExampleTest.voteAgainstRemovals":189,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":144,"org.easymock.tests.UsageVarargTest.differentLength":267,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":286,"org.easymock.tests2.CallbackTest.callback":34,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":255,"org.easymock.tests.UsageTest.openCallCountByLastCall":375,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":67,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":213,"org.easymock.tests.UsageCallCountTest.tooFewCalls":354,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":55,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":344,"org.easymock.tests.UsageThrowableTest.throwCheckedException":366,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":254,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":57,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":217,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":54,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":318,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":394,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":56,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":33,"org.easymock.tests.ObjectMethodsTest.testHashCode":346,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":308,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":61,"org.easymock.tests2.NameTest.nameForNiceMock":313,"org.easymock.tests2.DependencyTest.testInterfaceMocking":28,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":307,"org.easymock.samples.ExampleTest.addDocument":193,"org.easymock.tests2.DelegateToTest.testStubDelegate":21,"org.easymock.tests2.AnswerTest.stubAnswer":32,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":270,"org.easymock.tests.UsageVarargTest.varargLongAccepted":173,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":271,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":147,"org.easymock.tests.UsageExpectAndReturnTest.floatType":131,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":23,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":398,"org.easymock.tests2.ConstraintsToStringTest.orToString":226,"org.easymock.tests.UsageThrowableTest.noUpperLimit":162,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":85,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":247,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":299,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":68,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":45,"org.easymock.tests2.SerializationTest.test":65,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":130,"org.easymock.tests2.UsageConstraintsTest.testSame":73,"org.easymock.samples.SupportTest.addDocument":201,"org.easymock.tests.GenericTest.testPackageScope":177,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":362,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":298,"org.easymock.tests2.NameTest.nameForMock":311,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":141,"org.easymock.tests2.UsageStrictMockTest.differentMethods":100,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":133,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":119,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":128,"org.easymock.tests2.MockedExceptionTest.testRealException":211,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":358,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":256,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":403,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":244,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":395,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":103,"org.easymock.tests2.NameTest.nameForStrictMock":312,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":400,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":39,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":15,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":86,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":272,"org.easymock.tests2.UsageStrictMockTest.range":99,"org.easymock.tests2.UsageConstraintsTest.lessThan":92,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":296,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":405,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":1,"org.easymock.tests2.CaptureTest.testCaptureRightOne":50,"org.easymock.tests2.UsageConstraintsTest.testOr":74,"org.easymock.tests.UsageRangeTest.combination":125,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":223,"org.easymock.tests.UsageTest.wrongArguments":262,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":396,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":134,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":142,"org.easymock.tests.UsageVarargTest.varargShortAccepted":172,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":276,"org.easymock.tests2.UsageConstraintsTest.cmpTo":78,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":320,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":207,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":331,"org.easymock.tests2.CaptureTest.testCaptureFromStub":285,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":390,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":409,"org.easymock.tests.UsageTest.unexpectedCallWithArray":261,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":269,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":159,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":143,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":181,"org.easymock.tests2.UsageConstraintsTest.constraints":69,"org.easymock.samples.ExampleTest.addAndChangeDocument":195,"org.easymock.tests2.ConstraintsToStringTest.notToString":228,"org.easymock.tests.UsageStrictMockTest.testVerify":383,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":196,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":180,"org.easymock.tests2.CompareToTest.testGreateThan":283,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":371,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":46,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":412,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":151,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":135,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":152,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":248,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":168,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":6,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":282}}]

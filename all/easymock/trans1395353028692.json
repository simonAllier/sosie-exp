[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","type":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:140","sourceCode":"java.lang.StringBuilder.append(\":\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[3,4],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[1],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.EasyMockProperties:67","failures":[5],"status":-1,"binaryOperator":"(\"Failed to read \" + java.lang.String)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[7],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[1,2],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.EndsWith:40","failures":[8],"status":-1,"binaryOperator":"(\"endsWith(\\\"\" + (java.lang.String))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[9,10],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"this.java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,6,24,25,26,27,28,29,30,31,32,33],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","toStringMethod":"hashCodeMethod","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[32],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:161","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    return java.lang.reflect.Constructor<T>;\n} ","type":"CtIfImpl"},"failures":[34,35,36,37,38,39,40,41,42],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[5,43,44,45],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"in":"in"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:249","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"cls"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if (java.lang.Object == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:45","sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"expected":"actual","actual":"actual"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[46,47],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"toStringMethod","equalsMethod":"toStringMethod"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1361","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:214","sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[1],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"failures":[66,67,68,69],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[70,71,72],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[73,74,75,76,77,78,79,80,1,2,81,82,83,84,85,66,86,87,88,89,90,91,67,92,93,94,95,68,48,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,56,118,119,120,121,122,123,124,125,126,127,128,4,129,130],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[131,132],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1803","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:129","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Double>(double))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,11,163,12,13,164,165,166,14,15,35,16,17,167,18,36,168,37,38,169,19,20,170,21,22,171,172,173,174,175,176,23,177,178,179,180,113,181,182,6,183,184,24,185,25,26,27,186,28,29,30,31,187,188,189,190,191,192,193,194,195,196,197,198,199,200,32,33,201,202,203,204,205,206,207,46,208,209,210,47,211,212,213,213,214,214,215],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1581","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(boolean[]))","type":"CtInvocationImpl"},"failures":[85],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":76,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":34,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":93,"org.easymock.tests2.SerializationTest.testAllMockedMethod":168,"org.easymock.tests.MockingTest.testPartialClassMocking":197,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":46,"org.easymock.tests.MockClassControlTest.testToString":28,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":25,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":145,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":141,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":91,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":39,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":129,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":130,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":2,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":118,"org.easymock.samples.ConstructorCalledMockTest.testTax":213,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":33,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":169,"org.easymock.tests2.UsageConstraintsTest.testNull":78,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":177,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":14,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":188,"org.easymock.tests2.CaptureTest.testPrimitive":100,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":122,"org.easymock.tests.UsageTest.moreThanOneArgument":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":135,"org.easymock.tests2.CaptureTest.testCaptureNone":105,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":43,"org.easymock.tests.UsageUnorderedTest.message":4,"org.easymock.tests.UsageVerifyTest.twoReturns":61,"org.easymock.tests2.ConstraintsToStringTest.endsWithToString":8,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":152,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":211,"org.easymock.tests2.CaptureTest.testCapture_2617107":99,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":124,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":11,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":121,"org.easymock.tests2.UsageConstraintsTest.any":82,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":166,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":128,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":205,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":71,"org.easymock.tests2.SerializationTest.testClass":36,"org.easymock.tests.LimitationsTest.mockNativeMethod":191,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":210,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":81,"org.easymock.tests2.CaptureTest.testAnd":97,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":174,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":50,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":6,"org.easymock.tests2.NameTest.nameForMocksControl":55,"org.easymock.tests2.MockedExceptionTest.testMockedException":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":140,"org.easymock.tests2.DelegateToTest.testDelegate":0,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":199,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":176,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":15,"org.easymock.tests.MockingTest.testNicePartialClassMocking":198,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":179,"org.easymock.tests.LimitationsTest.mockFinalMethod":192,"org.easymock.tests2.CaptureTest.testCaptureLast":104,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":116,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":22,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":1,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":67,"org.easymock.tests.MockingTest.testTwoMocks":196,"org.easymock.tests2.CaptureTest.testCapture1_2446744":101,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":95,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":45,"org.easymock.tests.UsageStrictMockTest.differentMethods":57,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":203,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":10,"org.easymock.tests2.MockBuilderTest.testCreateMockString":18,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":27,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":142,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":137,"org.easymock.tests.UsageVerifyTest.twoThrows":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":159,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":151,"org.easymock.samples.PartialClassMockTest.testGetArea":215,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":125,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":184,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":26,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":146,"org.easymock.tests.LimitationsTest.privateConstructor":190,"org.easymock.tests2.UsageConstraintsTest.testNotNull":94,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":160,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":165,"org.easymock.tests2.MockBuilderTest.testCreateMock":16,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":154,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":181,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":73,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":63,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":120,"org.easymock.tests.UsageCallCountTest.tooFewCalls":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":150,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":156,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":66,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":170,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":85,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":106,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":44,"org.easymock.tests2.EasyMockSupportClassTest.testAll":138,"org.easymock.tests.MockClassControlTest.testEquals":187,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":209,"org.easymock.tests.MockingTest.testStrictClassMocking":194,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":171,"org.easymock.tests2.CaptureTest.testCaptureAll":98,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":21,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":115,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":20,"org.easymock.tests2.UsageConstraintsTest.testMatches":86,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":132,"org.easymock.tests2.NameTest.nameForNiceMock":54,"org.easymock.tests.UsageVarargTest.allKinds":123,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":59,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":41,"org.easymock.samples.BasicClassMockTest.testPrintContent":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":153,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":158,"org.easymock.tests2.AnswerTest.stubAnswer":131,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":56,"org.easymock.tests2.UsageConstraintsTest.greaterThan":88,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":42,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":7,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":139,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":24,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":58,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":207,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":9,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":185,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":37,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":180,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":214,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":89,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":193,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":74,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":133,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":102,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":35,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":202,"org.easymock.tests2.UsageConstraintsTest.testSame":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":136,"org.easymock.tests2.CaptureTest.testCaptureFirst":110,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":143,"org.easymock.tests.GenericTest.testPackageScope":208,"org.easymock.tests2.UsageTest.moreThanOneArgument":51,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":96,"org.easymock.tests2.CaptureTest.testCapture2_2446744":109,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":17,"org.easymock.tests.GenericTest.testBridgedEquals":47,"org.easymock.tests2.NameTest.nameForMock":52,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":167,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":92,"org.easymock.tests2.UsageStrictMockTest.differentMethods":49,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":182,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":72,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":64,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":155,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":48,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":119,"org.easymock.tests.MockingTest.testNiceClassMocking":200,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":19,"org.easymock.tests.MockingTest.testClassMocking":195,"org.easymock.tests2.UsageConstraintsTest.testContains":84,"org.easymock.tests2.NameTest.nameForStrictMock":53,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":163,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":162,"org.easymock.tests2.UsageConstraintsTest.testFind":77,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":164,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":111,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":178,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":112,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":134,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":204,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":90,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":3,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":113,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":12,"org.easymock.tests2.UsageConstraintsTest.lessThan":68,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":172,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":40,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":114,"org.easymock.tests2.CaptureTest.testCaptureRightOne":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":147,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":5,"org.easymock.tests2.UsageConstraintsTest.testOr":80,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":38,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":23,"org.easymock.tests.MockClassControlTest.testHashCode":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":144,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":186,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":148,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":70,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":206,"org.easymock.tests2.UsageConstraintsTest.cmpTo":83,"org.easymock.tests2.CompareToTest.testLessThan":69,"org.easymock.tests.DefaultClassInstantiatorTest.object":201,"org.easymock.tests2.CaptureTest.testCaptureFromStub":108,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":13,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":149,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":117,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":175,"org.easymock.tests2.UsageConstraintsTest.constraints":75,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":30,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":183,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":157,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":103,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":126,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":173,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":32,"org.easymock.tests.LimitationsTest.abstractClass":189,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":127}}]

[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:108","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","position":"org.easymock.internal.DefaultClassInstantiator:117","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","position":"org.easymock.internal.RecordState:257","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:261","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"proxy":"proxy"},"name":"add","transplant":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","position":"org.easymock.internal.MocksControl:185","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Proxy.java.lang.reflect.Proxy.isProxyClass(V.getClass())) {\n    return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]));\n} ","position":"org.easymock.internal.MocksControl:182","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:355","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","position":"org.easymock.internal.matchers.CompareTo:41","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.BridgeMethodResolver:213","type":"CtReturnImpl"},"status":-2},{"failures":[0,1],"binaryOperator":"int < 0","name":"removeConditional","position":"org.easymock.internal.matchers.LessThan:39","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw java.lang.reflect.InvocationTargetException.getCause()","position":"org.easymock.internal.Result:89","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException)","position":"org.easymock.internal.DefaultClassInstantiator:60","type":"CtThrowImpl"},"status":-2},{"failures":[2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = true","position":"org.easymock.internal.AndroidSupport:27","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","position":"org.easymock.internal.AndroidSupport:29","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","position":"org.easymock.internal.ClassProxyFactory:208","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","position":"org.easymock.internal.MocksControl:390","type":"CtNewClassImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>()","position":"org.easymock.internal.MocksBehavior:122","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","position":"org.easymock.internal.BridgeMethodResolver:88","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksBehavior.lastBehaviorList().addExpected(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result, org.easymock.internal.Range)","position":"org.easymock.internal.MocksBehavior:61","type":"CtInvocationImpl"},"status":-2},{"failures":[111],"variableMapping":{"name":"prefix"},"name":"replace","transplant":{"sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:410","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","position":"org.easymock.EasyMock:1802","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"try {\n    java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ClassProxyFactory:194","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","position":"org.easymock.internal.ClassProxyFactory:196","type":"CtAssignmentImpl"},"status":-2},{"failures":[2,2,112,4,113,114,115,116,117,10,118,119,120,121,122,123,124,125,126,20,22,25,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,37,39,142,143,144,145,146,147,148,149,150,151,152,153,0,154,155,156,44,157,158,159,160,161,162,163,48,164,165,166,167,168,169,170,171,49,51,172,54,62,64,70,71,73,78,90,106,173,174,175,176,177,178,179,180],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:572","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.UnorderedBehavior:79","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.Invocation:214","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:226","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","position":"org.easymock.internal.RecordState:96","type":"CtInvocationImpl"},"status":-2},{"failures":[181],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:681","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.TestSubject != null) {\n    org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n    continue;\n} ","position":"org.easymock.internal.Injector:108","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:183","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.internal.IProxyFactory","position":"org.easymock.internal.MocksControl:137","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","position":"org.easymock.internal.MocksControl:136","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.MocksBehavior:109","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    final boolean boolean = !(boolean);\n    final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount();\n    final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation));\n    if ((boolean && boolean) && (!boolean)) {\n        continue;\n    } \n    final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount());\n    java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage);\n}","position":"org.easymock.internal.UnorderedBehavior:84","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return \"Answer returning \" + java.lang.Object","position":"org.easymock.internal.Result:68","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount()","position":"org.easymock.internal.UnorderedBehavior:86","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return (((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName()))) && (java.lang.StackTraceElement[][2].getMethodName().equals(\"invoke\"))","position":"org.easymock.internal.ClassProxyFactory:157","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new (\"<\") {\n    @java.lang.Override\n    public boolean matchResult(final int result) {\n        return int < 0;\n    }\n}","position":"org.easymock.LogicalOperator:24","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","position":"org.easymock.internal.RecordState:166","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.ConstructorArgs:56","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount()","position":"org.easymock.internal.UnorderedBehavior:86","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))","position":"org.easymock.internal.UnorderedBehavior:87","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:231","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:109","type":"CtTryImpl"},"status":-2},{"failures":[182,183,150,184,185],"variableMapping":{"result":"result"},"name":"replace","transplant":{"sourceCode":"return int == 0","position":"org.easymock.internal.matchers.CompareEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int <= 0","position":"org.easymock.internal.matchers.LessOrEqual:39","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"result":"genericType","java.lang.Object.class":"java.lang.Object.class"},"name":"replace","transplant":{"sourceCode":"return java.lang.reflect.Type != null ? java.lang.reflect.Type : this.java.lang.Object.java.lang.Object","position":"org.easymock.internal.BridgeMethodResolver:223","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:220","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(long))","position":"org.easymock.EasyMock:1542","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","position":"org.easymock.internal.RecordState:176","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"constructorArgs":"constructorArgs"},"name":"add","transplant":{"sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","position":"org.easymock.internal.MockBuilder:121","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","position":"org.easymock.internal.MockBuilder:143","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:195","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"actual","substring":"prefix"},"name":"add","transplant":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && ((((java.lang.String)(java.lang.Object)).indexOf(this.java.lang.String)) >= 0)","position":"org.easymock.internal.matchers.Contains:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).startsWith(java.lang.String))","position":"org.easymock.internal.matchers.StartsWith:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"number":"number"},"name":"add","transplant":{"sourceCode":"return java.lang.Number","position":"org.easymock.internal.RecordState:207","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.byteValue()","position":"org.easymock.internal.RecordState:195","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","position":"org.easymock.internal.RecordState:133","type":"CtInvocationImpl"},"status":-2},{"failures":[131,135,186,162],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.MocksBehavior:124","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:90","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:81","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"typeVariableMap":"typeVariableMap","this":"this","genericType":"genericInterface"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:255","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:288","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","position":"org.easymock.internal.LastControl:49","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:65","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ClassProxyFactory:137","type":"CtInvocationImpl"},"status":-2},{"failures":[143,145],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (!(org.easymock.IArgumentMatcher.matches(java.lang.Object))) {\n    return false;\n} ","position":"org.easymock.internal.matchers.And:39","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.IArgumentMatcher.matches(java.lang.Object)) {\n    return true;\n} ","position":"org.easymock.internal.matchers.Or:39","type":"CtIfImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","position":"org.easymock.internal.BridgeMethodResolver:334","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"new org.easymock.internal.Range(1)","position":"org.easymock.internal.MocksControl:380","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","position":"org.easymock.internal.MocksControl:390","type":"CtNewClassImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>.getName(), java.lang.Character.java.lang.Class<java.lang.Character>)","position":"org.easymock.internal.MethodSerializationWrapper:36","type":"CtInvocationImpl"},"status":0},{"failures":[187,130,188,189,190,191],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.ArgumentToString:46","type":"mutation","status":-1},{"failures":[183],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1348","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1176","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isVarArgs()) {\n    int = java.lang.Math.java.lang.Math.min(int, ((java.lang.Class<?>[].int) - 1));\n} ","position":"org.easymock.internal.Invocation:136","type":"CtIfImpl"},"status":-2},{"failures":[192,2,2,3,3,193,194,195,196,197,198,199,200,201,202,4,5,6,203,204,205,206,207,208,7,113,209,114,210,211,115,212,116,213,117,187,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,118,230,231,232,233,234,119,235,236,237,120,238,239,121,240,241,122,242,243,244,245,123,246,247,124,248,249,250,125,251,252,253,254,126,255,256,257,20,21,22,23,25,258,127,259,128,260,129,261,262,263,264,265,266,130,267,268,131,269,132,270,271,272,273,274,275,276,277,278,279,280,281,133,282,134,283,135,186,136,284,285,286,287,137,288,138,289,139,290,291,140,292,293,294,141,295,296,297,298,34,37,38,39,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,182,142,183,143,320,144,321,145,322,146,323,181,147,324,148,325,149,326,150,327,151,328,152,329,184,153,111,0,330,331,154,332,333,155,334,335,336,337,338,339,156,340,44,45,46,157,341,342,158,343,344,345,159,346,347,160,348,161,349,162,350,163,47,351,48,352,164,353,165,354,166,355,356,167,357,168,358,169,359,360,361,362,363,364,365,366,367,170,368,369,171,370,49,50,51,52,172,53,54,371,372,57,58,61,63,64,67,69,70,373,71,72,73,75,78,79,80,81,87,90,100,106,374,173,109,375,174,376,175,377,176,378,177,379,178,380,179,180,381,382,383,384],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","position":"org.easymock.internal.RecordState:124","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.closeMethod()","position":"org.easymock.internal.RecordState:76","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    com.google.dexmaker.stock.ProxyBuilder<T> com.google.dexmaker.stock.ProxyBuilder<T> = com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.forClass(java.lang.Class<T>).handler(org.easymock.internal.AndroidClassProxyFactory.MockHandler);\n    if (org.easymock.ConstructorArgs != null) {\n        com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs());\n    } else {\n        try {\n            org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n            java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n            java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n            com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n        } catch (java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n        }\n    }\n    return com.google.dexmaker.stock.ProxyBuilder<T>.build();\n} catch (java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException((\"Failed to mock \" + java.lang.Class<T>) , java.io.IOException);\n}","position":"org.easymock.internal.AndroidClassProxyFactory:39","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Constructor<?>.getModifiers())) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:175","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()))","position":"org.easymock.internal.Injector:90","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","position":"org.easymock.internal.BridgeMethodResolver:93","type":"CtIfImpl"},"status":-2},{"failures":[265,131,269,281,333,160,162,350,352,67,174,176,378,178],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","position":"org.easymock.internal.MocksControl:190","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:154","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.ClassProxyFactory:116","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final int int = int","position":"org.easymock.internal.MocksBehavior:84","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:773","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Captures:53","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.NoSuchFieldException java.lang.NoSuchFieldException","position":"org.easymock.internal.Injector:206","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","position":"org.easymock.internal.Result:88","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Class<T>.isInterface()) && (java.lang.reflect.Method[] != null)) {\n    throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\");\n} ","position":"org.easymock.internal.MocksControl:105","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1976","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","position":"org.easymock.internal.matchers.Equals:37","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ClassProxyFactory:194","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","position":"org.easymock.internal.matchers.And:48","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","position":"org.easymock.internal.RecordState:162","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final int int = (java.lang.Object[].int) - 1","position":"org.easymock.internal.Invocation:60","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1420","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"methodArgs":"org.easymock.internal.Invocation.NO_ARGS"},"name":"add","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.DefaultClassInstantiator:130","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!boolean) {\n    return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:53","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:137","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1543","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.objenesis.ObjenesisHelper.org.objenesis.ObjenesisHelper.newInstance(java.lang.Class<?>)","position":"org.easymock.internal.ObjenesisClassInstantiator:26","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType();\n    if (java.lang.Class<?>.isPrimitive()) {\n        throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n    } \n    return ;\n} ","position":"org.easymock.internal.RecordState:243","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.Capture<T>.reset()","position":"org.easymock.Capture:118","type":"CtInvocationImpl"},"status":-2},{"failures":[192,193,385,386,387,388,389,390,391,392,393,394],"variableMapping":{"f":"targetField"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:159","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.InjectionTarget:58","type":"CtTryImpl"},"status":-1},{"failures":[47,48],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeObject(null)","position":"org.easymock.internal.ClassProxyFactory:130","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.ClassProxyFactory:127","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:269","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:221","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return (((this.java.lang.Object) == null) && ((org.easymock.internal.matchers.Equals.java.lang.Object) == null)) || (((this.java.lang.Object) != null) && (this.java.lang.Object.equals(org.easymock.internal.matchers.Equals.java.lang.Object)))","position":"org.easymock.internal.matchers.Equals:57","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.reset();\n}","position":"org.easymock.EasyMockSupport:551","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"default :\n    throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));","position":"org.easymock.Capture:123","type":"CtCaseImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:122","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType())","position":"org.easymock.internal.BridgeMethodResolver:329","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(short.short, java.lang.Short.java.lang.Short)","position":"org.easymock.internal.ReflectionUtils:35","type":"CtInvocationImpl"},"status":-2},{"failures":[395,396],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","position":"org.easymock.EasyMock:2125","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()))","position":"org.easymock.internal.Injector:233","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.ObjectMethodsFilter:121","type":"CtInvocationImpl"},"status":-2},{"failures":[87,375],"variableMapping":{"controls":"controls"},"name":"add","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : this.java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.verify();\n}","position":"org.easymock.EasyMockSupport:561","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToDefault();\n}","position":"org.easymock.EasyMockSupport:583","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.add(new org.easymock.internal.ExpectedInvocationAndResults(org.easymock.internal.ExpectedInvocation , org.easymock.internal.Results))","position":"org.easymock.internal.UnorderedBehavior:46","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","position":"org.easymock.internal.MethodSerializationWrapper:69","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:285","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:257","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.Results.add(org.easymock.internal.Result, org.easymock.internal.Range)","position":"org.easymock.internal.UnorderedBehavior:45","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Invocation:131","type":"CtReturnImpl"},"status":-2},{"failures":[397,271,398],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","position":"org.easymock.internal.Results:40","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:337","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(java.lang.Object[], 0, java.lang.Object[], 0, int)","position":"org.easymock.internal.Invocation:63","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"continue","position":"org.easymock.ConstructorArgs:69","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","position":"org.easymock.internal.EasyMockProperties:63","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Double>(double))","position":"org.easymock.EasyMock:1012","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","position":"org.easymock.internal.LastControl:48","type":"CtIfImpl"},"status":-2},{"failures":[2,3,399,400,401,76],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","position":"org.easymock.internal.MockBuilder:159","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:150","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","position":"org.easymock.internal.ReplayState:149","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","position":"org.easymock.internal.DefaultClassInstantiator:94","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.io.ObjectInputStream.readObject()","position":"org.easymock.internal.DefaultClassInstantiator:203","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"\\'\")","position":"org.easymock.internal.ArgumentToString:41","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:171","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(\"\\n  Unexpected method call \").append(org.easymock.internal.Invocation.toString())","position":"org.easymock.internal.MocksBehavior:120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(double.double, java.lang.Double.java.lang.Double)","position":"org.easymock.internal.ReflectionUtils:40","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return int","position":"org.easymock.internal.ErrorMessage:44","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:110","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","position":"org.easymock.EasyMock:1927","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return !(java.util.List<T>.isEmpty())","position":"org.easymock.Capture:67","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.doubleValue()","position":"org.easymock.internal.RecordState:205","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.Injector:75","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","position":"org.easymock.internal.MocksControl:149","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","position":"org.easymock.internal.RecordState:292","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","position":"org.easymock.internal.ReflectionUtils:152","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:85","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.replay();\n}","position":"org.easymock.EasyMockSupport:541","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","position":"org.easymock.internal.LastControl:86","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.util.List<org.easymock.internal.UnorderedBehavior>.isEmpty()) || (!(org.easymock.internal.MocksBehavior.lastBehaviorList().allowsExpectedInvocation(org.easymock.internal.ExpectedInvocation, boolean)))) {\n    java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean));\n} ","position":"org.easymock.internal.MocksBehavior:74","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:336","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","position":"org.easymock.internal.EasyMockProperties:69","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1291","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"position":"position","behaviorLists":"behaviorLists"},"name":"add","transplant":{"sourceCode":"if (!(this.java.util.List<org.easymock.internal.UnorderedBehavior>.get(this.int).verify())) {\n    break;\n} ","position":"org.easymock.internal.MocksBehavior:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.UnorderedBehavior org.easymock.internal.UnorderedBehavior : java.util.List<org.easymock.internal.UnorderedBehavior>.subList(int, java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : org.easymock.internal.UnorderedBehavior.getMessages(null)) {\n        org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0);\n    }\n}","position":"org.easymock.internal.MocksBehavior:167","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","position":"org.easymock.internal.DefaultClassInstantiator:136","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Number.longValue()","position":"org.easymock.internal.RecordState:201","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:233","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"leq\"","position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String","position":"org.easymock.LogicalOperator:62","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.internal.ReflectionUtils:122","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","position":"org.easymock.internal.ReflectionUtils:96","type":"CtForEachImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":141,"org.easymock.tests2.MockedExceptionTest.testRealException":157,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":266,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":91,"org.easymock.tests.UsageVarargTest.varargIntAccepted":248,"org.easymock.tests.LimitationsTest.mockFinalMethod":35,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":182,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":13,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":109,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":102,"org.easymock.tests.UsageCallCountTest.tooManyCalls":139,"org.easymock.tests.UsageVarargTest.allKinds":126,"org.easymock.tests2.StubTest.stubWithReturnValue":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":108,"org.easymock.tests2.CaptureTest.testCaptureAll":165,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":291,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":326,"org.easymock.tests2.CaptureTest.testAnd":353,"org.easymock.tests.UsageStrictMockTest.testVerify":270,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":237,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":205,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":8,"org.easymock.tests.MockClassControlTest.testToString":12,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":49,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":176,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":242,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":313,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":164,"org.easymock.tests.UsageThrowableTest.throwError":292,"org.easymock.samples.SupportTest.addDocument":194,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":211,"org.easymock.tests2.StubTest.stub":374,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":274,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":390,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":128,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":113,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":388,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":319,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":83,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":82,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":254,"org.easymock.tests.UsageExpectAndThrowTest.object":238,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":364,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":104,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":227,"org.easymock.tests2.UsageTest.moreThanOneArgument":154,"org.easymock.tests.UsageVarargTest.varargByteAccepted":253,"org.easymock.tests.MockClassControlTest.testEquals":16,"org.easymock.tests.UsageTest.wrongArguments":214,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":239,"org.easymock.tests2.UsageTest.defaultResetToNice":336,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":189,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":190,"org.easymock.tests.MockingTest.testNiceClassMocking":24,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":46,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":365,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":64,"org.easymock.tests2.MockBuilderTest.testCreateMock":66,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":366,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":299,"org.easymock.samples.ExampleTest.voteAgainstRemovals":196,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":160,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":204,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":282,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":255,"org.easymock.tests2.CaptureTest.testCapture1_2446744":355,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":346,"org.easymock.samples.ExampleTest.voteForRemoval":198,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":138,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":208,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":222,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":115,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":132,"org.easymock.tests2.CaptureTest.testCaptureRightOne":169,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":306,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":368,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":73,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":133,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":276,"org.easymock.tests2.UsageConstraintsTest.cmpTo":147,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":29,"org.easymock.tests2.MockedExceptionTest.testMockedException":45,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":184,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":245,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":262,"org.easymock.samples.PartialClassMockTest.testGetArea":4,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":283,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":257,"org.easymock.samples.ConstructorCalledMockTest.testTax":2,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":42,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":170,"org.easymock.tests2.UsageTest.argumentsOrdered":338,"org.easymock.samples.ExampleTest.removeNonExistingDocument":112,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":27,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":370,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":224,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":305,"org.easymock.tests2.AnswerTest.answer":367,"org.easymock.tests.MockingTest.testNicePartialClassMocking":22,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":267,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":260,"org.easymock.tests2.CompareToTest.testLessThan":1,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":264,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":275,"org.easymock.tests.UsageExpectAndThrowTest.longType":233,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":100,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":177,"org.easymock.tests.UsageTest.argumentsOrdered":218,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":63,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":143,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":318,"org.easymock.tests2.MockBuilderTest.testCreateMockString":68,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":114,"org.easymock.tests2.NameTest.nameForStrictMock":382,"org.easymock.tests2.CaptureTest.testCaptureNone":168,"org.easymock.tests2.SerializationTest.testClass":47,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":5,"org.easymock.tests2.EasyMockSupportTest.testVerify":180,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":62,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":119,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":329,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":330,"org.easymock.tests.GenericTest.testBridgedEquals":40,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":67,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":317,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":146,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":172,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":69,"org.easymock.tests2.UsageConstraintsTest.testOr":145,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":363,"org.easymock.tests.MockClassControlTest.testHashCode":15,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":386,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":9,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":140,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":298,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":312,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":261,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":50,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":52,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":88,"org.easymock.tests2.UsageConstraintsTest.testSame":321,"org.easymock.tests2.UsageTest.resumeIfFailure":339,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":284,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":53,"org.easymock.tests.UsageOverloadedMethodTest.overloading":256,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":76,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":96,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":280,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":3,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":38,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":95,"org.easymock.tests.UsageTest.openCallCountByLastCall":215,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":235,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":279,"org.easymock.tests2.NameTest.nameForNiceMock":383,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":396,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":134,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":129,"org.easymock.tests2.CaptureTest.testPrimitive":166,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":373,"org.easymock.samples.BasicClassMockTest.testPrintContent":6,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":136,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":258,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":78,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":289,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":342,"org.easymock.tests2.UsageStrictMockTest.differentMethods":350,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":97,"org.easymock.tests.MockingTest.testClassMocking":19,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":376,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":39,"org.easymock.tests2.CaptureTest.testCaptureLast":357,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":231,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":288,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":372,"org.easymock.tests.UsageStrictMockTest.range":131,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":98,"org.easymock.tests.UsageTest.unexpectedCallWithArray":187,"org.easymock.samples.ExampleTest.addDocument":200,"org.easymock.tests2.UsageConstraintsTest.lessThan":0,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":217,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":203,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":273,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":397,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":41,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":31,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":191,"org.easymock.tests2.UsageStrictMockTest.range":162,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":54,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":123,"org.easymock.tests.UsageTest.moreThanOneArgument":117,"org.easymock.tests2.UsageTest.openCallCountByLastCall":334,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":58,"org.easymock.tests.UsageStrictMockTest.differentMethods":269,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":26,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":43,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":234,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":220,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":300,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":89,"org.easymock.tests2.DependencyTest.testClassMockingSupport":56,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":75,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":268,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":392,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":122,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":212,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":192,"org.easymock.tests2.UsageConstraintsTest.testContains":324,"org.easymock.tests2.UsageConstraintsTest.testFind":320,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":356,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":399,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":28,"org.easymock.samples.ExampleTest.addAndChangeDocument":202,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":57,"org.easymock.tests.UsageVarargTest.varargCharAccepted":249,"org.easymock.tests2.CaptureTest.testCaptureFromStub":359,"org.easymock.tests.UsageVerifyTest.twoThrows":135,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":394,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":209,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":250,"org.easymock.tests2.DelegateToTest.testReturnException":344,"org.easymock.tests2.CompareToTest.testLessOrEqual":185,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":110,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":155,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":179,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":36,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":348,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":285,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":30,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":358,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":121,"org.easymock.tests2.UsageConstraintsTest.testMatches":149,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":272,"org.easymock.tests.LimitationsTest.abstractClass":32,"org.easymock.tests2.UsageConstraintsTest.testNull":144,"org.easymock.tests2.EasyMockSupportClassTest.testAll":87,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":401,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":7,"org.easymock.tests2.UsageConstraintsTest.greaterThan":150,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":247,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":151,"org.easymock.tests.UsageExpectAndReturnTest.object":310,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":379,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":163,"org.easymock.tests2.DelegateToTest.testWrongClass":159,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":188,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":236,"org.easymock.samples.ExampleTest.voteAgainstRemoval":199,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":297,"org.easymock.tests.UsageVarargTest.varargShortAccepted":251,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":277,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":259,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":86,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":10,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":391,"org.easymock.tests2.SerializationTest.testAllMockedMethod":48,"org.easymock.tests2.NameTest.nameForMocksControl":384,"org.easymock.tests.MockingTest.testStrictClassMocking":18,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":210,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":156,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":94,"org.easymock.tests.LimitationsTest.mockNativeMethod":34,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":221,"org.easymock.tests2.DelegateToTest.testStubDelegate":345,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":207,"org.easymock.tests.UsageUnorderedTest.message":290,"org.easymock.samples.ExampleTest.answerVsDelegate":197,"org.easymock.tests.UsageCallCountTest.tooFewCalls":137,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":309,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":103,"org.easymock.tests.UsageVerifyTest.twoReturns":186,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":120,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":304,"org.easymock.tests2.DependencyTest.testInterfaceMocking":371,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":375,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":226,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":175,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":322,"org.easymock.tests.MockingTest.testTwoMocks":20,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":287,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":44,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":92,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":311,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":51,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":85,"org.easymock.tests.UsageThrowableTest.throwCheckedException":295,"org.easymock.samples.ExampleTest.voteForRemovals":201,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":294,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":325,"org.easymock.tests.ReplayStateInvalidUsageTest.times":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":93,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":206,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":228,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":72,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":213,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":301,"org.easymock.tests2.UsageConstraintsTest.any":181,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":387,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":308,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":380,"org.easymock.tests.LimitationsTest.privateConstructor":33,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":158,"org.easymock.tests2.CallbackTest.callback":352,"org.easymock.tests2.NameTest.nameForMock":381,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":400,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":148,"org.easymock.tests2.SerializationTest.test":351,"org.easymock.tests.UsageExpectAndReturnTest.longType":303,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":167,"org.easymock.tests2.CaptureTest.testCaptureFirst":361,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":328,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":225,"org.easymock.tests2.UsageTest.niceToStrict":333,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":223,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":84,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":240,"org.easymock.tests2.UsageTest.strictResetToDefault":331,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":80,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":116,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":230,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":307,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":341,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":60,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":74,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":71,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":124,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":327,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":118,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":23,"org.easymock.tests2.DelegateToTest.testDelegate":347,"org.easymock.tests2.UsageConstraintsTest.testNotNull":153,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":349,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":340,"org.easymock.tests2.CaptureTest.testCapture_2617107":354,"org.easymock.tests2.ThreadingTest.testThreadSafe":362,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":335,"org.easymock.tests.UsageThrowableTest.noUpperLimit":293,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":178,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":174,"org.easymock.tests.UsageExpectAndReturnTest.floatType":302,"org.easymock.tests2.UsageTest.wrongArguments":332,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":323,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":14,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":65,"org.easymock.samples.SupportTest.voteForRemovals":195,"org.easymock.tests.UsageRangeTest.combination":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":99,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":296,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":111,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":152,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":105,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":389,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":161,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":314,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":241,"org.easymock.tests.UsageExpectAndThrowTest.floatType":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":101,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":70,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":315,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":385,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":77,"org.easymock.tests.UsageTest.exactCallCountByLastCall":219,"org.easymock.tests2.AnswerTest.stubAnswer":171,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":378,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":90,"org.easymock.tests.MockingTest.testPartialClassMocking":21,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":316,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":337,"org.easymock.tests2.UsageConstraintsTest.constraints":183,"org.easymock.tests.UsageVarargTest.varargLongAccepted":252,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":263,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":79,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":81,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":130,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":244,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":106,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":278,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":59,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":246,"org.easymock.tests2.DependencyTest.testClassMocking":55,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":17,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":127,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":377,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":11,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":142,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":61,"org.easymock.tests.DefaultClassInstantiatorTest.object":25,"org.easymock.tests.UsageVarargTest.differentLength":125,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":271,"org.easymock.tests2.CaptureTest.testCapture2_2446744":360,"org.easymock.tests.GenericTest.testPackageScope":37}}]

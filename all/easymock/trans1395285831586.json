[{"transplant":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:51","sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection"}},{"position":"org.easymock.internal.MockBuilder:201","failures":[8,9,10,11,12,13,13,14,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[38,39,40,41,42,43],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareTo:41","failures":[44],"status":-1,"binaryOperator":"(java.lang.Object instanceof java.lang.Comparable)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:89","failures":[45,46,19,28,29],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:945","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Integer>(int))","type":"CtInvocationImpl"},"failures":[47,48,49],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:96","sourceCode":"return java.lang.Class<?>.getConstructors()[0]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:89","sourceCode":"try {\n    return java.lang.Class<?>.getConstructor(new java.lang.Class[0]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    if ((java.lang.Class<?>.getConstructors().int) == 0) {\n        throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n    } \n    return java.lang.Class<?>.getConstructors()[0];\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","type":"CtReturnImpl"},"failures":[50,51,52,53],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMockSupport:480","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"delegateTo"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[54],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Captures:53","failures":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[47,70,48,71,72],"status":-1,"binaryOperator":"int <= 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:305","failures":[73,74,75],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[76,77,78,79],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"position":"org.easymock.internal.MockBuilder:205","failures":[8,9,10,11,12,13,14,15,80,16,17,81,18,19,82,20,83,21,22,23,84,24,85,25,26,27,28,29,30,31,32,33,34,86,35,36,37],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (this.java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[55,87,56,57,58,59,60,61,62,63,64,65,88,66,67,68,69],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"values":"values"}},{"position":"org.easymock.EasyMock:1361","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"hashCodeMethod","equalsMethod":"hashCodeMethod"}},{"position":"org.easymock.internal.LastControl:92","failures":[70,89,90,91,92,54,56,58,66],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:305","failures":[93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,73,74,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,75,170,50,51,171,172,173,174,175,176,177,178,12,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,16,19,20,21,24,194,195,196,197,198,199,200,201,202,28,29,203,47,204,70,89,205,206,207,90,91,76,208,209,210,211,77,212,213,48,214,54,49,215,216,71,217,218,78,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,32,234,33,235,236,237,238,239,240,241,242,243,244,245,246,247,35,36,37,248,249,52,53,250,251,252,253,254,255,256,257,56,57,58,59,60,63,64,65,66,68,69],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:346","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[197],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"failures":[258,140,141,148,155,172],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:259","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[219],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:117","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Find:41","sourceCode":"java.lang.StringBuffer.append(((\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[259],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:65","sourceCode":"java.util.Properties.load(java.io.InputStream)","type":"CtInvocationImpl"},"failures":[260,261,262,263,264,265],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"in":"in"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[266,267,268,258,269,93,94,270,271,95,96,272,273,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,118,119,120,121,122,123,125,126,127,128,129,293,131,132,133,294,134,135,295,296,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,297,161,162,163,164,165,166,298,299,300,301,302,167,303,304,305,306,307,168,308,169,309,310,311,312,313,314,315,170,316,50,51,317,171,172,174,175,176,177,178,318,12,319,179,180,181,182,320,183,321,13,14,322,323,324,184,185,186,187,325,188,326,189,190,191,327,328,192,193,15,16,19,82,20,21,84,24,25,194,195,196,197,198,199,200,201,26,202,329,28,29,203,47,204,70,89,205,206,207,90,91,76,208,209,210,211,77,212,213,48,214,54,49,215,216,71,217,218,78,219,330,220,221,331,332,333,334,31,335,222,336,337,338,339,223,224,225,226,227,228,229,230,231,232,233,32,234,340,33,235,236,237,238,239,240,241,242,243,244,245,246,341,247,35,36,37,248,342,343,249,344,52,53,345,346,250,251,252,253,254,255,256,257,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"failures":[258,140,141,148,155,172],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.internal.DefaultClassInstantiator:93","failures":[38,39,42],"status":-1,"binaryOperator":"(java.lang.Class<?>.getConstructors().int) == 0","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1594","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","type":"CtInvocationImpl"},"failures":[211],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:289","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[10],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"position":"org.easymock.internal.matchers.NotNull:36","failures":[216,217,337,339],"status":-1,"binaryOperator":"java.lang.Object != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","sourceCode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[38,39,40,41,42,43],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":89,"org.easymock.tests2.UsageTest.argumentsOrdered":328,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":93,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":245,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":307,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":326,"org.easymock.tests2.StubTest.stubWithReturnValue":250,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":83,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":319,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":71,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":149,"org.easymock.tests2.SerializationTest.testAllMockedMethod":340,"org.easymock.tests2.DelegateToTest.testReturnException":230,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":305,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":75,"org.easymock.tests.MockingTest.testPartialClassMocking":120,"org.easymock.samples.SupportTest.voteForRemovals":184,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":10,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":30,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":110,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":35,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":98,"org.easymock.tests.UsageExpectAndThrowTest.object":108,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":195,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":49,"org.easymock.tests2.DelegateToTest.testWrongClass":232,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":171,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":172,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":76,"org.easymock.tests2.UsageTest.wrongArguments":325,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":134,"org.easymock.tests.UsageStrictMockTest.range":50,"org.easymock.samples.ConstructorCalledMockTest.testTax":13,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":311,"org.easymock.samples.ExampleTest.answerVsDelegate":180,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":242,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":251,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":9,"org.easymock.tests2.UsageConstraintsTest.testNull":206,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":199,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":109,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":244,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":20,"org.easymock.tests2.CaptureTest.testPrimitive":59,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":136,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":272,"org.easymock.tests.UsageTest.moreThanOneArgument":94,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":117,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":310,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":198,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":268,"org.easymock.tests2.CaptureTest.testCaptureNone":64,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":261,"org.easymock.tests.UsageUnorderedTest.message":294,"org.easymock.tests.UsageVerifyTest.twoReturns":139,"org.easymock.tests.UsageVarargTest.varargByteAccepted":282,"org.easymock.tests2.ThreadingTest.testThreadSafe":223,"org.easymock.tests.UsageTest.argumentsOrdered":273,"org.easymock.tests.UsageVarargTest.varargIntAccepted":276,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":289,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":322,"org.easymock.tests2.CaptureTest.testCapture_2617107":58,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":174,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":15,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":296,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":3,"org.easymock.tests2.UsageConstraintsTest.any":208,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":82,"org.easymock.tests2.StubTest.stub":346,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":178,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":306,"org.easymock.tests.UsageExpectAndThrowTest.longType":101,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":344,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":229,"org.easymock.tests2.SerializationTest.testClass":32,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":248,"org.easymock.tests.LimitationsTest.mockNativeMethod":169,"org.easymock.tests2.AnswerTest.answer":219,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":11,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":159,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":92,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":334,"org.easymock.tests2.CaptureTest.testAnd":56,"org.easymock.tests2.UsageTest.strictResetToDefault":186,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":345,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":329,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":81,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":262,"org.easymock.tests2.MockedExceptionTest.testMockedException":335,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":4,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":267,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":239,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":125,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":96,"org.easymock.tests2.DelegateToTest.testDelegate":233,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":338,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":102,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":122,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":196,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":21,"org.easymock.tests.MockingTest.testNicePartialClassMocking":121,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":113,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":201,"org.easymock.tests2.CompareToTest.testNotComparable":44,"org.easymock.tests2.CaptureTest.testCaptureLast":63,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":168,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":74,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":257,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":91,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":302,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":215,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":73,"org.easymock.tests2.CaptureTest.testCapture1_2446744":60,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":140,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":111,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":332,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":106,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":327,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":218,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":265,"org.easymock.tests.UsageThrowableTest.throwError":160,"org.easymock.tests.UsageStrictMockTest.differentMethods":51,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":5,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":264,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":40,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":225,"org.easymock.tests2.MockBuilderTest.testCreateMockString":25,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":269,"org.easymock.tests.UsageExpectAndThrowTest.floatType":100,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":213,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":330,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":86,"org.easymock.tests.UsageVerifyTest.twoThrows":138,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":36,"org.easymock.samples.PartialClassMockTest.testGetArea":12,"org.easymock.tests2.CompareToTest.testLessOrEqual":72,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":175,"org.easymock.samples.ExampleTest.voteAgainstRemoval":182,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":173,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":29,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":99,"org.easymock.tests2.UsageTest.niceToStrict":188,"org.easymock.tests2.UsageConstraintsTest.testNotNull":217,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":31,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":166,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":19,"org.easymock.tests2.MockBuilderTest.testCreateMock":84,"org.easymock.tests2.UsageTest.defaultResetToNice":191,"org.easymock.samples.ExampleTest.voteAgainstRemovals":179,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":155,"org.easymock.tests.UsageVarargTest.differentLength":279,"org.easymock.tests2.CallbackTest.callback":228,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":27,"org.easymock.tests.UsageTest.openCallCountByLastCall":95,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":107,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":240,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":47,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":309,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":295,"org.easymock.tests.UsageCallCountTest.tooFewCalls":287,"org.easymock.tests.UsageOverloadedMethodTest.overloading":132,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":77,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":129,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":254,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":131,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":151,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":211,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":65,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":312,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":263,"org.easymock.tests.UsageThrowableTest.throwCheckedException":163,"org.easymock.tests2.EasyMockSupportClassTest.testAll":247,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":303,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":115,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":333,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":300,"org.easymock.tests2.CaptureTest.testCaptureAll":57,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":256,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":119,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":253,"org.easymock.tests2.UsageConstraintsTest.testMatches":212,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":255,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":221,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":258,"org.easymock.tests2.CompareToTest.testGreateOrEqual":79,"org.easymock.samples.ExampleTest.voteForRemovals":183,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":227,"org.easymock.tests.UsageVarargTest.allKinds":284,"org.easymock.tests2.DependencyTest.testInterfaceMocking":194,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":137,"org.easymock.samples.BasicClassMockTest.testPrintContent":323,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":301,"org.easymock.samples.ExampleTest.addDocument":320,"org.easymock.tests2.DelegateToTest.testStubDelegate":231,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":165,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":342,"org.easymock.tests2.AnswerTest.stubAnswer":220,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":308,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":1,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":170,"org.easymock.tests2.UsageConstraintsTest.greaterThan":48,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":22,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":124,"org.easymock.tests.UsageVarargTest.varargLongAccepted":281,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":203,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":317,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":43,"org.easymock.samples.ExampleTest.voteForRemoval":181,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":224,"org.easymock.tests.UsageExpectAndReturnTest.floatType":142,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":158,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":26,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":33,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":14,"org.easymock.tests.UsageThrowableTest.noUpperLimit":297,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":214,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":2,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":285,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":204,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":185,"org.easymock.tests2.SerializationTest.test":234,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":61,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":23,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":237,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":39,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":161,"org.easymock.tests2.UsageConstraintsTest.testSame":207,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":141,"org.easymock.samples.SupportTest.addDocument":324,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":304,"org.easymock.tests2.CaptureTest.testCaptureFirst":69,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":238,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":193,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":293,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":147,"org.easymock.tests.GenericTest.testPackageScope":167,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":226,"org.easymock.tests2.CaptureTest.testCapture2_2446744":68,"org.easymock.tests2.UsageTest.moreThanOneArgument":187,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":24,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":283,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":291,"org.easymock.tests.UsageExpectAndReturnTest.longType":143,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":298,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":235,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":116,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":152,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":216,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":85,"org.easymock.tests2.UsageStrictMockTest.differentMethods":53,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":114,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":266,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":144,"org.easymock.tests.UsageCallCountTest.tooManyCalls":292,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":112,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":126,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":286,"org.easymock.tests2.MockedExceptionTest.testRealException":336,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":148,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":7,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":249,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":103,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":135,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":164,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":252,"org.easymock.tests2.UsageConstraintsTest.testContains":210,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":46,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":222,"org.easymock.tests2.UsageConstraintsTest.testFind":205,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":133,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":18,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":337,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":200,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":339,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":313,"org.easymock.tests.UsageExpectAndReturnTest.object":150,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":54,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":41,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":202,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":16,"org.easymock.tests2.UsageStrictMockTest.range":52,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":6,"org.easymock.tests2.UsageConstraintsTest.lessThan":78,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":243,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":278,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":0,"org.easymock.tests.UsageTest.exactCallCountByLastCall":97,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":45,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":118,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":236,"org.easymock.tests2.CaptureTest.testCaptureRightOne":66,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":260,"org.easymock.tests2.ConstraintsToStringTest.findToString":259,"org.easymock.tests2.UsageConstraintsTest.testOr":90,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":34,"org.easymock.tests.UsageRangeTest.combination":123,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":274,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":197,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":156,"org.easymock.tests.UsageTest.wrongArguments":271,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":128,"org.easymock.tests2.MockBuilderTest.testWithConstructor":80,"org.easymock.tests2.EasyMockSupportTest.testVerify":341,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":145,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":153,"org.easymock.tests.UsageVarargTest.varargShortAccepted":280,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":42,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":127,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":331,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":290,"org.easymock.tests2.UsageConstraintsTest.cmpTo":209,"org.easymock.tests.UsageVarargTest.varargCharAccepted":277,"org.easymock.tests2.CaptureTest.testCaptureMultiple":87,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":343,"org.easymock.tests2.UsageTest.openCallCountByLastCall":189,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":190,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":246,"org.easymock.tests.DefaultClassInstantiatorTest.object":38,"org.easymock.tests2.CaptureTest.testCaptureFromStub":67,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":17,"org.easymock.tests.UsageTest.unexpectedCallWithArray":270,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":105,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":315,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":162,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":288,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":154,"org.easymock.tests2.CaptureTest.testCapture":88,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":316,"org.easymock.tests2.UsageConstraintsTest.constraints":70,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":28,"org.easymock.samples.ExampleTest.addAndChangeDocument":321,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":104,"org.easymock.tests.CapturesMatcherTest.test":55,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":157,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":318,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":314,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":37,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":299,"org.easymock.tests2.UsageTest.resumeIfFailure":192,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":62,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":176,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":8,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":146,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":130,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":177,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":275,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":241}}]

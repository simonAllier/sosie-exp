[{"transplantationPoint":{"position":"org.easymock.EasyMock:1802","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:280","failures":[1,2,3,4,5,6],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:40","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[7],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[8,9,10,11,12,13,14,15,16,17,18],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:216","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[19],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.StartsWith:40","sourceCode":"java.lang.StringBuffer.append(((\"startsWith(\\\"\" + (java.lang.String)) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[20],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","type":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,63,64,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:126","sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[78],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"otherArgument":"actual","myArgument":"actual"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[33,79,34,80],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:226","sourceCode":"try {\n    net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"mockClass"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[81,21,23,24,82,25,26,27,28,83,29,30,84,32,33,34,35,36,37,38,39,40,41,85,86,42,43,44,45,87,88,89,90,91,46,92,93,94,49,50,95,96,97,98,51,99,100,52,101,102,103,104,105,106,107,108,109,53,110,111,112,113,114,54,115,116,55,56,57,58,59,60,61,62,63,63,64,64,65,117,66,67,68,118,119,120,121,122,123,124,125,70,71,126,127,72,128,73,129,130,131,132,133,134,135,136,137,74,75,76,77,138],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:72","sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","type":"CtReturnImpl"},"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,40,47,65,68,70,71],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:233","failures":[139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,8,9,158,10,159,11,12,160,13,161,162,163,164,165,166,167,168,169,14,170,171,172,173,15,0,174,23,25,27,28,30,33,79,34,35,36,175,37,38,39,41,43,44,45,176,177,178,179,180,181,1,2,3,182,4,16,183,17,184,185,186,187,188,189,190,18,191,192,193,194,195,196,197,93,94,49,198,50,199,200,201,202,203,204,205,51,52,53,54,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,55,56,57,58,230,59,60,61,62,63,63,64,64,231,65,232,233,234,235,5,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,66,67,68,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,72,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,73,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,75,76,77,375,6,376,377],"status":-1,"binaryOperator":"(org.easymock.internal.ExpectedInvocation) == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[378,83,33,379,380,381,382,383,50,95],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[203,210,216,217,384,320,323,326,385,332,335,336,368,369,386],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[33,79,34,80],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[387,388,389],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:83","sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arguments":"arguments"}},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[390,391,392,393,209,210,216,217,394,395,396,323,331,385,332,335,336],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1633","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(float[]))","type":"CtInvocationImpl"},"failures":[164],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[8,9,158,10,159,11,12,160,13,161,14,170,15,0,16,183,17,184,18,191],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[397,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,8,9,398,158,10,159,11,12,160,13,161,162,163,164,165,166,167,168,169,14,170,171,172,173,15,0,174,21,23,24,82,25,26,27,28,83,29,30,32,33,79,34,35,36,175,37,38,39,40,399,41,85,86,42,43,44,45,87,88,400,401,402,403,176,177,178,179,180,181,1,2,3,182,4,16,183,17,184,185,186,187,188,189,190,18,191,192,193,89,90,404,405,406,407,194,195,196,197,93,94,49,198,50,95,199,200,201,202,203,204,205,96,97,98,51,99,100,52,101,102,103,104,105,106,107,108,109,53,110,111,112,113,114,54,115,116,408,409,410,411,412,206,413,414,415,416,417,418,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,419,420,421,422,423,226,424,425,426,427,428,429,227,430,228,229,55,56,57,58,230,59,60,61,62,63,64,231,65,232,233,234,235,5,236,237,238,239,431,240,241,242,243,244,245,246,247,248,249,250,251,252,253,432,254,433,255,256,257,258,259,260,261,434,262,263,264,265,266,267,268,269,117,66,67,68,118,270,271,272,273,274,275,276,277,278,279,280,435,436,437,438,439,440,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,119,69,120,121,122,123,124,125,301,441,302,303,304,305,442,306,307,70,443,444,71,445,446,308,309,447,310,311,448,449,450,451,452,453,454,455,456,457,458,459,460,461,126,127,72,128,312,313,314,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,315,478,479,480,481,482,316,483,317,318,319,320,484,485,486,487,488,321,322,323,324,325,326,327,328,329,73,330,331,385,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,489,490,491,492,129,130,131,132,133,134,135,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,493,19,494,367,368,369,370,371,372,373,374,495,136,137,74,75,76,496,77,497,498,138,375,499,6,376,500,377,386],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[33,79,34,80],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Any:36","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:121","sourceCode":"if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n    if (!(java.lang.Object.equals(java.lang.Object))) {\n        return false;\n    } \n} else {\n    if (java.lang.Object != java.lang.Object) {\n        return false;\n    } \n}","type":"CtIfImpl"},"failures":[501],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[84],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"methodName"}},{"transplant":{"position":"org.easymock.internal.MocksControl:146","sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:147","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[86,208],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[390,392,394,395,323,385],"status":-1,"binaryOperator":"int < (java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:225","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[21,26,40,88,93,52],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[168,502],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[390,392,394,395,323,385],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"value"}},{"transplant":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[45],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","name":"name","this":"this"}},{"transplant":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:159","sourceCode":"final java.lang.ClassCastException java.lang.ClassCastException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[218,271,273,457,478],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,63,64,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[269,277],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:972","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[83,33],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[503],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Same:37","failures":[159],"status":-1,"binaryOperator":"(java.lang.Object) == java.lang.Object","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[117,118],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[8,9,10,11,12,13,14,15,16,17,18],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"failures":[117,118],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:181","sourceCode":"return false","type":"CtReturnImpl"},"failures":[378,33,504,379,380,381,505,506,383,95],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[156,157,8,9,158,10,159,11,12,160,13,161,162,163,164,165,166,167,168,169,14,170,171,172,173,15,0,174,21,41,42,179,181,16,183,17,184,185,186,187,188,189,190,18,191,192,193,507,196,201,202,227,228,229,249,250,251,252,253,269,274,275,276,277,278,279,280,308,309,320,484,323,324,345,346],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"this.org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[459],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","threadSafe":"shouldBeUsedInOneThread"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":9,"org.easymock.tests2.UsageTest.argumentsOrdered":217,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":330,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":153,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":424,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":472,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":212,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":231,"org.easymock.tests2.DelegateToTest.testReturnException":1,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":342,"org.easymock.tests.MockingTest.testPartialClassMocking":75,"org.easymock.tests.MockClassControlTest.testToString":120,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":397,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":254,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":480,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":88,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":104,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":52,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":281,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":195,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":379,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":160,"org.easymock.tests2.UsageTest.wrongArguments":210,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":276,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":418,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":491,"org.easymock.samples.ExampleTest.answerVsDelegate":5,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":71,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":498,"org.easymock.tests2.UsageConstraintsTest.testNull":10,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":37,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":152,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":125,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":91,"org.easymock.tests2.CaptureTest.testPrimitive":184,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":280,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":300,"org.easymock.tests.UsageTest.moreThanOneArgument":331,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":175,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":372,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":447,"org.easymock.tests.UsageTest.argumentsOrdered":336,"org.easymock.tests.UsageVarargTest.varargIntAccepted":261,"org.easymock.tests.InvocationTest.testEquals":501,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":477,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":249,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":506,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":21,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":428,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":26,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":464,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":253,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":388,"org.easymock.tests.ReplayStateInvalidUsageTest.times":458,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":206,"org.easymock.tests2.DependencyTest.testClassMocking":406,"org.easymock.tests2.AnswerTest.answer":220,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":13,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":478,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":403,"org.easymock.tests2.CaptureTest.testAnd":16,"org.easymock.tests2.UsageTest.strictResetToDefault":208,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":42,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":371,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":147,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":272,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":449,"org.easymock.tests2.DelegateToTest.testDelegate":4,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":296,"org.easymock.tests.LimitationsTest.mockFinalMethod":128,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":345,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":488,"org.easymock.tests2.DependencyTest.testClassMockingSupport":407,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":493,"org.easymock.tests2.CaptureTest.testCapture1_2446744":185,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":399,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":294,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":401,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":452,"org.easymock.tests.UsageThrowableTest.throwError":241,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":444,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":429,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":374,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":116,"org.easymock.samples.PartialClassMockTest.testGetArea":65,"org.easymock.tests.MockingTest.testInterfaceMocking":496,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":453,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":250,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":313,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":440,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":105,"org.easymock.tests2.UsageTest.niceToStrict":211,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":282,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":462,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":25,"org.easymock.tests2.MockBuilderTest.testCreateMock":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":112,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":415,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":390,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":290,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":148,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":319,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":301,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":489,"org.easymock.tests.UsageOverloadedMethodTest.overloading":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":114,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":109,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":165,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":376,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":256,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":358,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":164,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":190,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":434,"org.easymock.tests.MockClassControlTest.testEquals":124,"org.easymock.tests2.EasyMockSupportClassTest.testAll":51,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":67,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":391,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":298,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":46,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":486,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":402,"org.easymock.tests2.CaptureTest.testCaptureAll":183,"org.easymock.tests.MockNameTest.defaultName":495,"org.easymock.tests2.UsageConstraintsTest.testMatches":166,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":450,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":373,"org.easymock.samples.ExampleTest.voteForRemovals":239,"org.easymock.tests.UsageVarargTest.allKinds":269,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":367,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":487,"org.easymock.samples.BasicClassMockTest.testPrintContent":62,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":247,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":199,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":425,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":182,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":346,"org.easymock.tests2.UsageConstraintsTest.greaterThan":168,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":383,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":99,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":271,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":45,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":135,"org.easymock.samples.ExampleTest.voteForRemoval":236,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":177,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":87,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":84,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":445,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":40,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":73,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":207,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":83,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":469,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":145,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":97,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":341,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":181,"org.easymock.tests2.CaptureTest.testCaptureFirst":193,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":468,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":146,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":219,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":386,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":354,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":179,"org.easymock.tests2.CaptureTest.testCapture2_2446744":192,"org.easymock.tests2.UsageTest.moreThanOneArgument":209,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":479,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":30,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":268,"org.easymock.tests.GenericTest.testBridgedEquals":118,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":306,"org.easymock.tests.UsageExpectAndReturnTest.longType":350,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":484,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":143,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":31,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":299,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":172,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":255,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":297,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":339,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":370,"org.easymock.tests.UsageCallCountTest.tooManyCalls":307,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":389,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":113,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":355,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":417,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":286,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":246,"org.easymock.tests.MockingTest.testNiceClassMocking":138,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":56,"org.easymock.tests.MockingTest.testClassMocking":137,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":441,"org.easymock.tests2.UsageConstraintsTest.testContains":163,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":22,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":49,"org.easymock.tests2.UsageConstraintsTest.testFind":158,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":258,"org.easymock.tests.MockTypeTest.fromEasyMockClass":443,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":228,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":321,"org.easymock.tests.UsageExpectAndReturnTest.object":357,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":41,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":416,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":151,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":263,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":380,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":438,"org.easymock.tests.UsageTest.exactCallCountByLastCall":337,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":274,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":467,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":432,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":310,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":396,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":95,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":259,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":363,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":6,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":420,"org.easymock.tests.MockClassControlTest.testHashCode":123,"org.easymock.tests2.EasyMockSupportTest.testVerify":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":107,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":387,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":311,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":318,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":375,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":400,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":507,"org.easymock.tests.UsageVarargTest.varargCharAccepted":262,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":200,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":483,"org.easymock.tests2.UsageTest.openCallCountByLastCall":213,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":154,"org.easymock.tests.DefaultClassInstantiatorTest.object":129,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":317,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":436,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":384,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":108,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":288,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":92,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":244,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":411,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":419,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":122,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":43,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":287,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":364,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":338,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":54,"org.easymock.tests2.UsageTest.resumeIfFailure":218,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":70,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":344,"org.easymock.tests2.StubTest.stubWithReturnValue":197,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":378,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":173,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":356,"org.easymock.tests2.SerializationTest.testAllMockedMethod":34,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":315,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":392,"org.easymock.samples.SupportTest.voteForRemovals":234,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":117,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":422,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":293,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":80,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":316,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":221,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":433,"org.easymock.tests.UsageExpectAndThrowTest.object":291,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":170,"org.easymock.tests2.DelegateToTest.testWrongClass":3,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":308,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":309,"org.easymock.samples.ConstructorCalledMockTest.testTax":63,"org.easymock.tests.UsageStrictMockTest.range":326,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":404,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":150,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":55,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":292,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":27,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":460,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":96,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":335,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":490,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":394,"org.easymock.tests2.CaptureTest.testCaptureNone":189,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":314,"org.easymock.tests.UsageUnorderedTest.message":320,"org.easymock.tests.UsageVerifyTest.twoReturns":369,"org.easymock.tests.UsageVarargTest.varargByteAccepted":267,"org.easymock.tests2.ThreadingTest.testThreadSafe":176,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":110,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":305,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":439,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":61,"org.easymock.tests2.CaptureTest.testCapture_2617107":17,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":393,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":494,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":481,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":279,"org.easymock.tests2.UsageConstraintsTest.any":161,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":457,"org.easymock.tests2.StubTest.stub":196,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":340,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":482,"org.easymock.tests.UsageExpectAndThrowTest.longType":284,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":343,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":133,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":456,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":202,"org.easymock.tests2.SerializationTest.testClass":33,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":226,"org.easymock.tests.LimitationsTest.mockNativeMethod":72,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":68,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":366,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":410,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":48,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":205,"org.easymock.tests2.NameTest.nameForMocksControl":142,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":412,"org.easymock.tests2.MockedExceptionTest.testMockedException":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":100,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":334,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":430,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":77,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":285,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":35,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":28,"org.easymock.tests.MockingTest.testNicePartialClassMocking":76,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":39,"org.easymock.tests2.CompareToTest.testNotComparable":78,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":504,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":408,"org.easymock.tests2.CaptureTest.testCaptureLast":188,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":19,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":12,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":60,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":171,"org.easymock.tests.MockingTest.testTwoMocks":74,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":503,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":347,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":289,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":216,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":0,"org.easymock.samples.ExampleTest.removeNonExistingDocument":431,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":454,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":414,"org.easymock.tests.UsageStrictMockTest.differentMethods":327,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":421,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":131,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":178,"org.easymock.tests2.MockBuilderTest.testCreateMockString":32,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":119,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":101,"org.easymock.tests.UsageExpectAndThrowTest.floatType":283,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":167,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":98,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":223,"org.easymock.tests.UsageVerifyTest.twoThrows":368,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":499,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":53,"org.easymock.samples.ExampleTest.voteAgainstRemoval":237,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":473,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":312,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":44,"org.easymock.tests.LimitationsTest.privateConstructor":127,"org.easymock.tests2.UsageConstraintsTest.testNotNull":15,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":93,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":248,"org.easymock.tests2.UsageTest.defaultResetToNice":215,"org.easymock.samples.ExampleTest.voteAgainstRemovals":235,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":474,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":362,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":409,"org.easymock.tests.UsageVarargTest.differentLength":264,"org.easymock.tests2.CallbackTest.callback":229,"org.easymock.tests2.UsageConstraintsTest.equals":398,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":85,"org.easymock.tests.UsageTest.openCallCountByLastCall":333,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":156,"org.easymock.tests2.ConstraintsToStringTest.startsWithToString":20,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":278,"org.easymock.tests.UsageCallCountTest.tooFewCalls":303,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":58,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":492,"org.easymock.tests.UsageThrowableTest.throwCheckedException":245,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":395,"org.easymock.tests.MockingTest.testStrictClassMocking":136,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":59,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":275,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":413,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":57,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":459,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":230,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":225,"org.easymock.tests.ObjectMethodsTest.testHashCode":437,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":505,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":180,"org.easymock.tests2.NameTest.nameForNiceMock":141,"org.easymock.tests2.DependencyTest.testInterfaceMocking":194,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":381,"org.easymock.samples.ExampleTest.addDocument":238,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":111,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":115,"org.easymock.tests2.DelegateToTest.testStubDelegate":2,"org.easymock.tests2.AnswerTest.stubAnswer":224,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":324,"org.easymock.tests.UsageVarargTest.varargLongAccepted":266,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":328,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":471,"org.easymock.tests.UsageExpectAndReturnTest.floatType":349,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":365,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":50,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":64,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":500,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":427,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":169,"org.easymock.tests.UsageThrowableTest.noUpperLimit":242,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":157,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":89,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":186,"org.easymock.tests2.SerializationTest.test":79,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":130,"org.easymock.tests2.UsageConstraintsTest.testSame":159,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":348,"org.easymock.samples.SupportTest.addDocument":233,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":455,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":102,"org.easymock.tests.GenericTest.testPackageScope":66,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":448,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":466,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":426,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":497,"org.easymock.tests2.NameTest.nameForMock":139,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":359,"org.easymock.tests2.UsageStrictMockTest.differentMethods":204,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":86,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":351,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":295,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":435,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":273,"org.easymock.tests2.MockedExceptionTest.testRealException":198,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":446,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":476,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":405,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":475,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":201,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":461,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":277,"org.easymock.tests2.NameTest.nameForStrictMock":140,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":82,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":227,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":38,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":90,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":132,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":14,"org.easymock.tests.ErrorMessageTest.testGetters":7,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":23,"org.easymock.tests2.UsageStrictMockTest.range":203,"org.easymock.tests2.UsageConstraintsTest.lessThan":174,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":423,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":81,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":470,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":144,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":382,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":106,"org.easymock.tests2.CaptureTest.testCaptureRightOne":18,"org.easymock.tests2.UsageConstraintsTest.testOr":11,"org.easymock.tests.UsageRangeTest.combination":270,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":36,"org.easymock.tests.UsageTest.wrongArguments":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":103,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":69,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":352,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":463,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":360,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":134,"org.easymock.tests.UsageVarargTest.varargShortAccepted":265,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":442,"org.easymock.tests2.UsageConstraintsTest.cmpTo":162,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":222,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":465,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":214,"org.easymock.tests2.CaptureTest.testCaptureFromStub":191,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":451,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":24,"org.easymock.tests.UsageTest.unexpectedCallWithArray":385,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":323,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":304,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":361,"org.easymock.tests2.UsageConstraintsTest.constraints":8,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":325,"org.easymock.samples.ExampleTest.addAndChangeDocument":240,"org.easymock.tests.UsageStrictMockTest.testVerify":329,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":232,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":322,"org.easymock.tests2.CompareToTest.testGreateThan":502,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":485,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":187,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":47,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":251,"org.easymock.tests.LimitationsTest.abstractClass":126,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":353,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":252,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":377,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":149,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":260}}]

[{"failures":[],"variableMapping":{"mockedMethods":"mockedMethods"},"name":"add","transplant":{"sourceCode":"if ((this.java.util.Set<java.lang.reflect.Method>) == null) {\n    this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","position":"org.easymock.internal.MockBuilder:71","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n    java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n}","position":"org.easymock.internal.ClassProxyFactory:136","type":"CtForEachImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-5418279681566430252L","position":"org.easymock.internal.RecordState:31","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.BridgeMethodResolver:80","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Integer>(int))","position":"org.easymock.EasyMock:852","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs)","position":"org.easymock.internal.MocksControl:114","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments()","position":"org.easymock.internal.BridgeMethodResolver:319","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.matchers.CompareTo:42","type":"CtReturnImpl"},"status":-2},{"failures":[0,1],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","position":"org.easymock.internal.Results:40","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:364","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Float>(float))","position":"org.easymock.EasyMock:746","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type == null) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:335","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","position":"org.easymock.internal.DefaultClassInstantiator:192","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","position":"org.easymock.internal.ReflectionUtils:96","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:79","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:320","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-5160559075998939348L","position":"org.easymock.internal.matchers.Not:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-8447010713532143168L","position":"org.easymock.internal.matchers.CompareTo:30","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],"variableMapping":{"this":"this","buffer":"buffer","value":"value"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:44","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:40","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","position":"org.easymock.internal.RecordState:310","type":"CtReturnImpl"},"status":-2},{"failures":[19,20,21,22,23,24,25],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.ReflectionUtils:184","type":"mutation","status":-1},{"failures":[],"variableMapping":{"suid":"this"},"name":"replace","transplant":{"sourceCode":"return java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:198","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n    java.lang.reflect.Field.setAccessible(true);\n    return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n} ","position":"org.easymock.internal.DefaultClassInstantiator:158","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","control":"lastControl"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","position":"org.easymock.internal.MockInvocationHandler:38","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","position":"org.easymock.EasyMock:557","type":"CtIfImpl"},"status":0},{"failures":[26,27,28],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:170","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:122","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMock:520","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Number java.lang.Number = ((java.lang.Number)(java.lang.Object))","position":"org.easymock.internal.RecordState:193","type":"CtLocalVariableImpl"},"status":-2},{"failures":[29,30,31,32],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","position":"org.easymock.internal.MethodSerializationWrapper:69","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:25","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.HashSet<java.lang.String>()","position":"org.easymock.internal.InjectionPlan:38","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{"arg":"this"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass();\n} catch (final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException) {\n    net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader());\n    java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass();\n}","position":"org.easymock.internal.ClassProxyFactory:174","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<org.easymock.IMocksControl>.add(org.easymock.IMocksControl)","position":"org.easymock.EasyMockSupport:481","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","position":"org.easymock.internal.RecordState:340","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:68","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:76","type":"CtReturnImpl"},"status":-2},{"failures":[33],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:417","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return int <= 0","position":"org.easymock.LogicalOperator:33","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredField(java.lang.String);\n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n    return null;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return null;\n}","position":"org.easymock.internal.Injector:204","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","position":"org.easymock.internal.MocksControl:185","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-6785245714002503134L","position":"org.easymock.internal.matchers.Contains:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[34],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.UnorderedBehavior:103","type":"CtReturnImpl"},"status":-1},{"failures":[35,25],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","position":"org.easymock.internal.MockBuilder:121","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","position":"org.easymock.internal.MockBuilder:143","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{"method":"result"},"name":"add","transplant":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"continue","position":"org.easymock.internal.UnorderedBehavior:90","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object[][int] = java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int)","position":"org.easymock.internal.Invocation:74","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{"varArgsCount":"length","nonVarArgsCount":"length"},"name":"replace","transplant":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[int + int]","position":"org.easymock.internal.Invocation:62","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[java.lang.Class<?>[].int]","position":"org.easymock.internal.DefaultClassInstantiator:109","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.MocksControl.classProxyFactory":"cached"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory()","position":"org.easymock.internal.MocksControl:147","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","position":"org.easymock.internal.MocksControl:136","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","position":"org.easymock.internal.MocksControl:390","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","position":"org.easymock.internal.ReflectionUtils:230","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(java.lang.Object[], 0, java.lang.Object[], 0, int)","position":"org.easymock.internal.Invocation:63","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:346","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","position":"org.easymock.internal.ClassProxyFactory:169","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"new org.easymock.internal.Range(1)","position":"org.easymock.internal.MocksControl:380","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","position":"org.easymock.internal.MocksControl:390","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Class<?>.getDeclaredField(java.lang.String)","position":"org.easymock.internal.Injector:205","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredField(java.lang.String);\n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n    return null;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return null;\n}","position":"org.easymock.internal.Injector:204","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())))","position":"org.easymock.internal.DefaultClassInstantiator:193","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:893","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"method"},"name":"replace","transplant":{"sourceCode":"final boolean boolean = java.lang.reflect.Method.isAccessible()","position":"org.easymock.internal.DefaultClassInstantiator:185","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean boolean = ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) && org.easymock.internal.ClassProxyFactory.(org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable()))","position":"org.easymock.internal.AndroidClassProxyFactory:84","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"throwable":"throwable"},"name":"add","transplant":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:314","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:317","type":"CtIfImpl"},"status":0},{"failures":[36,37],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.String java.lang.String = org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(org.easymock.EasyMock.java.lang.String)","position":"org.easymock.internal.MocksControl:128","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:97","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","position":"org.easymock.internal.ClassProxyFactory:251","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-6785245714002503134L","position":"org.easymock.internal.matchers.Contains:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:440","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","position":"org.easymock.internal.BridgeMethodResolver:318","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.MocksControl.MockType(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.internal.MocksControl:49","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1372","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((70 * (((java.util.List<org.easymock.internal.UnorderedBehavior>.size()) - (int)) + 1)))","position":"org.easymock.internal.MocksBehavior:164","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    synchronized(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) {\n        if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n            org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n        } \n    }\n} ","position":"org.easymock.internal.EasyMockProperties:44","type":"CtIfImpl"},"status":-2},{"failures":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],"binaryOperator":"java.lang.Throwable == null","name":"negateConditional","position":"org.easymock.internal.RecordState:262","type":"mutation","status":-1},{"failures":[92,93,94,95,96,42,2,97,43,98,99,100,101,102,103,70,104,105,106,107,108,109,110,111,112,113,114,115,78,79,80,81,82,83,84,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,85,150,11,151,152,86,153,154,155,156,89,157,158,159,30,31,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,26,91,185,186,187,188,189,190,191,192,193,194,195,196],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"},"name":"add","transplant":{"sourceCode":"this.boolean = true","position":"org.easymock.internal.AndroidSupport:27","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:140","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Double>(double))","position":"org.easymock.EasyMock:919","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[java.lang.Class<?>[].int]","position":"org.easymock.internal.DefaultClassInstantiator:109","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    java.lang.Object[][int] = java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int);\n}","position":"org.easymock.internal.Invocation:73","type":"CtForImpl"},"status":-2},{"failures":[127,131],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:110","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1582","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = java.lang.reflect.Method.getParameterTypes()","position":"org.easymock.internal.BridgeMethodResolver:189","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"binaryOperator":"(java.lang.String + \".\") + java.lang.String","name":"math","position":"org.easymock.internal.Invocation:154","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:68","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Invocation:204","type":"CtReturnImpl"},"status":-2},{"failures":[197,198,199,200,201,202,203,204,205,206,207,208,44,45,46,47,49,209,210,105,211,106,212,213,153,156,87,88,89,90,214,215,216,217,160,218,219,220,192,221],"variableMapping":{"endPosition":"position","behaviorLists":"behaviorLists"},"name":"add","transplant":{"sourceCode":"if (int == (this.java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    int--;\n} ","position":"org.easymock.internal.MocksBehavior:114","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.UnorderedBehavior org.easymock.internal.UnorderedBehavior : java.util.List<org.easymock.internal.UnorderedBehavior>.subList(int, java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    if (!(org.easymock.internal.UnorderedBehavior.verify())) {\n        boolean = false;\n        break;\n    } \n}","position":"org.easymock.internal.MocksBehavior:154","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long)","position":"org.easymock.internal.RecordState:63","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:50","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"array":"array"},"name":"replace","transplant":{"sourceCode":"return ((java.lang.Object[])(java.lang.Object))","position":"org.easymock.internal.Invocation:70","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.Object[]) {\n    return ((java.lang.Object[])(java.lang.Object));\n} ","position":"org.easymock.internal.Invocation:69","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"paramTypes":"paramTypes","name":"name","clazz":"searchType"},"name":"add","transplant":{"sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ReflectionUtils:227","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:412","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(long))","position":"org.easymock.EasyMock:1542","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:346","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:224","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:293","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-5048595127450771363L","position":"org.easymock.internal.matchers.Captures:32","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n} ","position":"org.easymock.internal.EasyMockProperties:47","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (java.lang.String) != null ? java.lang.String : \"EasyMock for \" + org.easymock.internal.MocksControl.(org.easymock.internal.MocksControl.getMockedType(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.resetToNice()","position":"org.easymock.EasyMockSupport:573","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:372","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((70 * ((int - int) + 1)))","position":"org.easymock.internal.MocksBehavior:119","type":"CtLocalVariableImpl"},"status":-2},{"failures":[222,223,224,225,226,227,228,229,230,231,232,233,234,235,38,236,92,237,93,94,39,40,95,238,239,240,241,199,200,201,202,96,41,42,2,3,4,97,43,5,6,98,204,205,206,207,208,242,99,100,101,102,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,243,244,245,246,247,248,249,250,251,252,253,254,255,256,103,70,257,258,259,260,104,261,209,210,105,211,106,262,263,7,107,264,108,109,265,212,266,267,268,269,270,271,1,272,273,274,71,72,73,110,111,112,113,114,74,115,75,76,77,275,276,277,278,279,280,281,282,283,284,285,78,286,79,80,81,82,83,84,287,288,289,290,291,292,293,116,117,118,294,295,119,120,121,122,123,296,297,298,299,300,124,125,126,127,128,129,130,131,132,133,301,134,135,136,137,138,139,140,141,142,143,144,145,302,146,147,148,149,85,150,11,12,151,34,152,86,153,13,14,154,155,156,303,87,88,89,90,214,215,216,217,304,305,306,307,308,309,310,311,312,313,157,314,158,159,315,31,316,160,317,161,162,318,163,164,319,320,165,166,167,168,169,170,171,172,173,174,321,175,176,322,323,324,325,326,327,328,177,178,329,330,91,185,186,187,188,189,190,191,192,193,194,195,196,221,331,28,332,333],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>()","position":"org.easymock.internal.LastControl:39","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:51","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(java.util.Properties.remove(java.lang.String)));\n} ","position":"org.easymock.internal.EasyMockProperties:119","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:90","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()","position":"org.easymock.internal.Injector:116","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToNice();\n}","position":"org.easymock.EasyMockSupport:572","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:42","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((this.java.lang.Object[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:114","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.getControlForLastCall()","position":"org.easymock.EasyMock:538","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Integer>(int))","position":"org.easymock.EasyMock:759","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Exception java.lang.Exception","position":"org.easymock.ConstructorArgs:71","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:59","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Integer>(int))","position":"org.easymock.EasyMock:945","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:147","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : org.easymock.internal.Invocation.getArguments()) {\n    java.util.List<org.easymock.IArgumentMatcher>.add(new org.easymock.internal.matchers.Equals(java.lang.Object));\n}","position":"org.easymock.internal.ExpectedInvocation:61","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","position":"org.easymock.internal.Range:75","type":"CtReturnImpl"},"status":-2},{"failures":[220],"variableMapping":{"toMock":"toMock","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:104","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:466","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","position":"org.easymock.internal.EasyMockProperties:64","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : org.easymock.internal.Invocation.getArguments()) {\n    java.util.List<org.easymock.IArgumentMatcher>.add(new org.easymock.internal.matchers.Equals(java.lang.Object));\n}","position":"org.easymock.internal.ExpectedInvocation:61","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:126","type":"CtInvocationImpl"},"status":-2},{"failures":[334,179,183,184],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:92","type":"CtInvocationImpl"},"status":-1},{"failures":[222,223,224,225,226,227,228,229,230,231,232,335,336,337,92,338,93,94,40,95,96,2,4,5,6,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,245,246,247,248,249,251,252,253,254,255,103,339,340,341,258,259,260,104,261,262,263,7,107,264,108,109,110,114,74,115,278,279,283,284,285,286,79,287,342,343,289,290,291,292,116,117,118,119,121,122,296,297,298,299,300,124,127,129,132,133,134,135,137,138,140,141,143,144,145,146,147,149,150,11,12,151,34,13,14,156,89,304,305,307,308,311,312,313,157,314,158,159,30,31,32,316,160,161,162,318,163,319,320,165,166,167,168,171,172,173,175,176,324,325,326,327,344,345,346,328,347,348,177,178,179,349,350,351,352,329,353,181,354,182,184,355,356,357,358,91,35,185,186,187,188,189,190,191,193,194,195,196,221],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"int += 1","position":"org.easymock.internal.Results:68","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:97","type":"CtOperatorAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((70 * ((int - int) + 1)))","position":"org.easymock.internal.MocksBehavior:119","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:354","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:105","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","position":"org.easymock.internal.EasyMockProperties:67","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","position":"org.easymock.internal.MockBuilder:139","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Float.java.lang.Class<java.lang.Float>.getName(), java.lang.Float.java.lang.Class<java.lang.Float>)","position":"org.easymock.internal.MethodSerializationWrapper:39","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:150","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:252","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:253","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new java.util.HashSet<java.lang.String>()","position":"org.easymock.internal.InjectionPlan:38","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:360","type":"CtTryImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","position":"org.easymock.internal.ReplayState:149","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"))","position":"org.easymock.internal.BridgeMethodResolver:94","type":"CtThrowImpl"},"status":0},{"failures":[359],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:127","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type)","position":"org.easymock.internal.BridgeMethodResolver:327","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:242","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.BridgeMethodResolver:142","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.replay()","position":"org.easymock.EasyMockSupport:542","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1134","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1080","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Double>(double))","position":"org.easymock.EasyMock:826","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"type":"org.easymock.MockType.DEFAULT"},"name":"replace","transplant":{"sourceCode":"return new org.easymock.internal.MocksControl(org.easymock.MockType)","position":"org.easymock.EasyMock:491","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMockSupport:519","type":"CtReturnImpl"},"status":-2},{"failures":[227,235,307,309,311],"variableMapping":{"lastResult":"lastResult"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","position":"org.easymock.internal.RecordState:129","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.RecordState:324","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:135","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.getControlForLastCall()","position":"org.easymock.EasyMock:551","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:242","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","position":"org.easymock.internal.RecordState:245","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","position":"org.easymock.internal.RecordState:133","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","position":"org.easymock.internal.RecordState:152","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.ExpectedInvocation:58","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<org.easymock.IArgumentMatcher> != null) {\n    if ((java.util.List<org.easymock.IArgumentMatcher>.size()) != (org.easymock.internal.Invocation.getArguments().int)) {\n        throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"));\n    } \n    return java.util.List<org.easymock.IArgumentMatcher>;\n} ","position":"org.easymock.internal.ExpectedInvocation:45","type":"CtIfImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":80,"org.easymock.tests2.MockedExceptionTest.testRealException":90,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":182,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":264,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":263,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":65,"org.easymock.tests.UsageVarargTest.varargIntAccepted":247,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":96,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":23,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":124,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":35,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":222,"org.easymock.tests2.UsageConstraintsTest.testContains":136,"org.easymock.tests.UsageCallCountTest.tooManyCalls":282,"org.easymock.tests2.UsageConstraintsTest.testFind":128,"org.easymock.tests2.StubTest.stubWithReturnValue":91,"org.easymock.tests.UsageVarargTest.allKinds":255,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":319,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":202,"org.easymock.tests2.CaptureTest.testCaptureAll":162,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":284,"org.easymock.samples.ExampleTest.addAndChangeDocument":232,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":218,"org.easymock.tests.UsageVarargTest.varargCharAccepted":248,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":21,"org.easymock.tests2.CaptureTest.testCaptureFromStub":169,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":20,"org.easymock.tests.UsageVerifyTest.twoThrows":74,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":94,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":249,"org.easymock.tests2.DelegateToTest.testReturnException":307,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":25,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":34,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":140,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":196,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":33,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":313,"org.easymock.tests2.CaptureTest.testAnd":161,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":77,"org.easymock.tests.UsageStrictMockTest.testVerify":212,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":58,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":167,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":235,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":62,"org.easymock.tests2.UsageConstraintsTest.testMatches":139,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":205,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":270,"org.easymock.tests2.UsageConstraintsTest.testNull":129,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":327,"org.easymock.tests2.EasyMockSupportClassTest.testAll":355,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":190,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":66,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":122,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":160,"org.easymock.tests.UsageThrowableTest.throwError":78,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":338,"org.easymock.tests2.UsageConstraintsTest.greaterThan":141,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":245,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":95,"org.easymock.samples.SupportTest.addDocument":224,"org.easymock.tests2.StubTest.stub":330,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":1,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":104,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":93,"org.easymock.tests.UsageExpectAndReturnTest.object":119,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":143,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":193,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":300,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":27,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":254,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":315,"org.easymock.tests.UsageExpectAndThrowTest.object":60,"org.easymock.tests2.DelegateToTest.testWrongClass":309,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":174,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":37,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":8,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":46,"org.easymock.tests2.UsageTest.moreThanOneArgument":11,"org.easymock.tests.UsageVarargTest.varargByteAccepted":253,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":57,"org.easymock.tests.UsageTest.wrongArguments":4,"org.easymock.samples.ExampleTest.voteAgainstRemoval":229,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":207,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":83,"org.easymock.tests.UsageVarargTest.varargShortAccepted":251,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":274,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":61,"org.easymock.tests2.UsageTest.defaultResetToNice":153,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":9,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":268,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":15,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":89,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":260,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":223,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":321,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":350,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":175,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":334,"org.easymock.tests2.SerializationTest.testAllMockedMethod":32,"org.easymock.tests2.NameTest.nameForMocksControl":333,"org.easymock.samples.ExampleTest.voteAgainstRemovals":226,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":36,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":312,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":234,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":112,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":40,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":256,"org.easymock.tests2.CaptureTest.testCapture1_2446744":164,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":155,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":99,"org.easymock.tests.LimitationsTest.mockNativeMethod":287,"org.easymock.tests2.DelegateToTest.testStubDelegate":308,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":236,"org.easymock.tests.UsageUnorderedTest.message":283,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":310,"org.easymock.samples.ExampleTest.answerVsDelegate":227,"org.easymock.samples.ExampleTest.voteForRemoval":228,"org.easymock.tests.UsageCallCountTest.tooFewCalls":277,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":295,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":279,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":324,"org.easymock.tests.UsageVerifyTest.twoReturns":115,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":59,"org.easymock.tests2.DependencyTest.testInterfaceMocking":177,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":293,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":92,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":185,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":18,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":45,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":100,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":188,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":24,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":217,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":132,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":199,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":265,"org.easymock.tests.MockingTest.testTwoMocks":257,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":117,"org.easymock.tests2.CaptureTest.testCaptureRightOne":168,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":276,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":200,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":87,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":323,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":354,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":111,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":273,"org.easymock.tests2.UsageConstraintsTest.cmpTo":135,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":275,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":120,"org.easymock.tests.MockTypeTest.fromEasyMockClass":238,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":345,"org.easymock.tests2.MockedExceptionTest.testMockedException":88,"org.easymock.tests.UsageThrowableTest.throwCheckedException":81,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":69,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":105,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":146,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":239,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":114,"org.easymock.samples.PartialClassMockTest.testGetArea":335,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":79,"org.easymock.samples.ExampleTest.voteForRemovals":231,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":70,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":138,"org.easymock.samples.ConstructorCalledMockTest.testTax":197,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":38,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":47,"org.easymock.tests2.UsageTest.argumentsOrdered":14,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":181,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":322,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":42,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":326,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":102,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":116,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":204,"org.easymock.tests2.AnswerTest.answer":176,"org.easymock.tests.MockingTest.testNicePartialClassMocking":340,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":107,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":290,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":0,"org.easymock.tests2.UsageConstraintsTest.any":134,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":294,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":19,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":261,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":106,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":272,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":195,"org.easymock.tests.UsageExpectAndThrowTest.longType":53,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":241,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":67,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":305,"org.easymock.tests2.CallbackTest.callback":316,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":357,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":192,"org.easymock.tests2.NameTest.nameForMock":331,"org.easymock.tests.UsageTest.argumentsOrdered":6,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":127,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":349,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":137,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":299,"org.easymock.tests2.NameTest.nameForStrictMock":28,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":39,"org.easymock.tests.MockNameTest.defaultName":288,"org.easymock.tests2.CaptureTest.testCaptureNone":166,"org.easymock.tests2.SerializationTest.test":31,"org.easymock.tests.UsageExpectAndReturnTest.longType":292,"org.easymock.tests2.SerializationTest.testClass":30,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":320,"org.easymock.tests2.CaptureTest.testCaptureFirst":171,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":144,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":336,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":44,"org.easymock.tests2.UsageTest.niceToStrict":151,"org.easymock.tests2.EasyMockSupportTest.testVerify":221,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":266,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":208,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":101,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":219,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":262,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":55,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":302,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":85,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":63,"org.easymock.tests2.UsageTest.strictResetToDefault":150,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":184,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":298,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":351,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":41,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":50,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":133,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":118,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":328,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":214,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":142,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":246,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":353,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":352,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":49,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":341,"org.easymock.tests2.UsageConstraintsTest.testOr":131,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":173,"org.easymock.tests2.DelegateToTest.testDelegate":311,"org.easymock.tests2.UsageConstraintsTest.testNotNull":147,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":314,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":156,"org.easymock.tests2.CaptureTest.testCapture_2617107":318,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":84,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":121,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":285,"org.easymock.tests2.ThreadingTest.testThreadSafe":172,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":86,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":210,"org.easymock.tests.UsageThrowableTest.noUpperLimit":286,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":344,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":346,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":194,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":186,"org.easymock.tests.UsageExpectAndReturnTest.floatType":291,"org.easymock.tests2.UsageTest.wrongArguments":12,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":301,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":216,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":16,"org.easymock.tests2.UsageConstraintsTest.testSame":130,"org.easymock.tests2.UsageTest.resumeIfFailure":154,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":76,"org.easymock.tests.UsageOverloadedMethodTest.overloading":103,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":347,"org.easymock.tests.UsageRangeTest.combination":110,"org.easymock.samples.SupportTest.voteForRemovals":225,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":240,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":82,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":303,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":73,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":198,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":148,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":343,"org.easymock.tests.UsageTest.openCallCountByLastCall":97,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":56,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":72,"org.easymock.tests2.NameTest.nameForNiceMock":332,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":317,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":113,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":145,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":209,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":157,"org.easymock.tests2.CaptureTest.testPrimitive":163,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":329,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":123,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":64,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":75,"org.easymock.samples.BasicClassMockTest.testPrintContent":337,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":201,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":258,"org.easymock.tests.UsageExpectAndThrowTest.floatType":52,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":220,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":180,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":281,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":296,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":304,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":213,"org.easymock.tests2.UsageStrictMockTest.differentMethods":159,"org.easymock.tests.UsageTest.exactCallCountByLastCall":98,"org.easymock.tests2.AnswerTest.stubAnswer":325,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":187,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":191,"org.easymock.tests2.CaptureTest.testCaptureLast":165,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":51,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":280,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":278,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":178,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":356,"org.easymock.tests.UsageStrictMockTest.range":108,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":43,"org.easymock.tests.InvocationTest.testEquals":359,"org.easymock.tests.UsageTest.unexpectedCallWithArray":3,"org.easymock.tests.MockingTest.testPartialClassMocking":339,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":297,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":13,"org.easymock.tests2.UsageConstraintsTest.constraints":126,"org.easymock.samples.ExampleTest.addDocument":230,"org.easymock.tests2.UsageConstraintsTest.lessThan":149,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":237,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":215,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":5,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":233,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":211,"org.easymock.tests.UsageVarargTest.varargLongAccepted":252,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":271,"org.easymock.tests.ObjectMethodsTest.testHashCode":267,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":183,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":26,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":306,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":7,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":17,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":68,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":358,"org.easymock.tests2.UsageStrictMockTest.range":158,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":348,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":206,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":243,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":244,"org.easymock.tests.UsageTest.moreThanOneArgument":2,"org.easymock.tests2.UsageTest.openCallCountByLastCall":152,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":259,"org.easymock.tests.UsageStrictMockTest.differentMethods":109,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":22,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":189,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":125,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":203,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":179,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":54,"org.easymock.tests.UsageVarargTest.differentLength":250,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":269,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":29,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":242,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":10,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":289,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":48,"org.easymock.tests2.CaptureTest.testCapture2_2446744":170,"org.easymock.tests.GenericTest.testPackageScope":342}}]

[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:122","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","position":"org.easymock.internal.MocksControl:206","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"ret":"ret"},"name":"replace","transplant":{"sourceCode":"return java.lang.reflect.Constructor<T>","position":"org.easymock.internal.ReflectionUtils:162","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    return java.lang.reflect.Constructor<T>;\n} ","position":"org.easymock.internal.ReflectionUtils:161","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:986","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:122","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:116","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(\":\")","position":"org.easymock.internal.MocksBehavior:140","type":"CtInvocationImpl"},"status":-2},{"failures":[0,0,1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"variableMapping":{"value":"lastInvocationUsed","checkOrder":"lastInvocationUsed"},"name":"replace","transplant":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:140","type":"CtAssignmentImpl"},"status":-1},{"failures":[36],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","position":"org.easymock.EasyMock:693","type":"CtReturnImpl"},"status":-1},{"failures":[37,38,39,40,41],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:986","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return new org.easymock.internal.Result(org.easymock.IAnswer<?> , false)","position":"org.easymock.internal.Result:102","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.ExpectedInvocationAndResults>()","position":"org.easymock.internal.UnorderedBehavior:29","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","position":"org.easymock.internal.RecordState:292","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException)","position":"org.easymock.internal.DefaultClassInstantiator:45","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\") + (org.easymock.internal.Invocation.getMethod())) + \"]\") , java.lang.IllegalArgumentException)","position":"org.easymock.internal.Result:86","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.getArguments()","position":"org.easymock.internal.ExpectedInvocation:49","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","position":"org.easymock.internal.LastControl:93","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","position":"org.easymock.internal.RecordState:77","type":"CtLocalVariableImpl"},"status":-2},{"failures":[0,0,1,1,42],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Number.longValue()","position":"org.easymock.internal.RecordState:201","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number","position":"org.easymock.internal.RecordState:207","type":"CtReturnImpl"},"status":-1},{"failures":[43],"variableMapping":{"qualifier":"methodName","this":"methodName"},"name":"replace","transplant":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","position":"org.easymock.internal.InjectionPlan:61","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:90","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:301","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:440","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:105","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.ReflectionUtils:198","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:137","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","position":"org.easymock.internal.Range:37","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.Invocation:105","type":"CtThrowImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1507","type":"mutation","return":"return 0","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ExpectedInvocationAndResults.getResults().add(org.easymock.internal.Result, org.easymock.internal.Range)","position":"org.easymock.internal.UnorderedBehavior:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String","position":"org.easymock.internal.Invocation:148","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.Injector:129","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:344","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:212","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:786","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:260","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","position":"org.easymock.EasyMock:2039","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(double))","position":"org.easymock.EasyMock:1506","type":"CtInvocationImpl"},"status":-2},{"failures":[44,0,0,1,1,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,2,3,65,66,4,67,68,69,70,5,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,6,7,8,9,10,11,12,13,14,15,138,139,140,16,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,17,18,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,19,20,37,210,21,22,23,24,38,211,36,212,25,213,26,27,214,28,29,30,215,216,217,218,31,32,33,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,34,249,250,251,252,253,254,255,256,257,39,258,40,259,260,261,262,263,264,265,41,35,266,267,268,269,270,271,272,273,274,42,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329],"binaryOperator":"org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null","name":"negateConditional","position":"org.easymock.internal.RecordState:85","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1318","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"boolean = true","position":"org.easymock.internal.Injection:74","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","position":"org.easymock.internal.AndroidSupport:29","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:372","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Long java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:187","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(\"\\n  Unexpected method call \")","position":"org.easymock.internal.MocksBehavior:120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()","position":"org.easymock.internal.ArgumentToString:87","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:356","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","position":"org.easymock.internal.MocksControl:248","type":"CtInvocationImpl"},"status":-2},{"failures":[330,331],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","position":"org.easymock.internal.EasyMockProperties:128","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","position":"org.easymock.internal.ReflectionUtils:95","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:88","type":"CtLocalVariableImpl"},"status":-2},{"failures":[44,45,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,64,2,3,65,66,4,67,5,71,72,73,75,76,77,78,79,80,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,6,7,8,9,10,138,139,140,16,141,142,143,144,145,332,333,149,150,151,152,153,154,155,156,158,159,160,161,163,164,165,17,18,166,167,168,169,170,171,172,173,174,175,176,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,19,20,37,210,21,22,23,24,38,211,334,36,212,25,213,26,27,214,28,29,30,215,216,217,218,31,32,33,219,220,221,222,223,224,225,226,227,228,229,230,231,232,40,260,262,264,41,272],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean))","position":"org.easymock.internal.MocksBehavior:75","type":"CtInvocationImpl"},"status":-1},{"failures":[],"binaryOperator":"((\"endsWith(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"math","position":"org.easymock.internal.matchers.EndsWith:40","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:363","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.String java.lang.String = java.lang.reflect.Method.getName()","position":"org.easymock.internal.Invocation:143","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:109","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1952","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(java.lang.Object + \" isn\\'t of type \")","name":"removeConditional","position":"org.easymock.ConstructorArgs:87","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.LinkedList<org.easymock.internal.Range>.add(org.easymock.internal.Range)","position":"org.easymock.internal.Results:44","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","position":"org.easymock.internal.MockInvocationHandler:36","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:572","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","position":"org.easymock.EasyMock:1927","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new java.lang.Class[]{ java.lang.Class<?> }","position":"org.easymock.internal.BridgeMethodResolver:378","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection)","position":"org.easymock.internal.Injector:170","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(((\"contains(\\\"\" + (java.lang.String)) + \"\\\")\"))","position":"org.easymock.internal.matchers.Contains:40","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException)","position":"org.easymock.internal.ClassProxyFactory:210","type":"CtThrowImpl"},"status":0},{"failures":[44,0,1,45,46,47,48,49,50,51,52,53,55,56,57,58,62,64,2,3,4,67,68,69,70,5,73,82,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,335,120,121,122,123,124,126,127,128,129,130,132,133,134,135,136,6,7,8,9,10,11,12,13,14,15,139,16,143,144,145,149,150,151,152,153,154,155,156,157,158,159,160,161,17,18,167,168,174,175,176,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,19,20,37,210,21,22,23,24,38,211,36,212,25,213,26,27,214,28,29,30,215,216,218,31,32,33,220,221,223,224,227,230,232,233,234,235,236,237,238,239,240,241,242,243,244,246,248,34,251,252,253,254,255,256,257,39,258,40,259,261,262,263,264,265,41,267,268,269,272,273,274,42,275,276,277,278,279,280,281,282,283,284,285,287,288,289,290,294,296,297,298,299,301,302,304,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.replay()","position":"org.easymock.internal.MocksControl:212","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:221","type":"CtTryImpl"},"status":-1},{"failures":[62,73,75,78,79,153,154,155,221,222,228,229,326,328,329],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"boolean boolean = true","position":"org.easymock.internal.MocksBehavior:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount()","position":"org.easymock.internal.UnorderedBehavior:86","type":"CtLocalVariableImpl"},"status":-1},{"failures":[],"variableMapping":{"genericType":"genericType"},"name":"add","transplant":{"sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","position":"org.easymock.ConstructorArgs:60","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object[][int] = java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int)","position":"org.easymock.internal.Invocation:74","type":"CtAssignmentImpl"},"status":-2},{"failures":[336,337,338,339,340,341,342],"variableMapping":{"length":"i","arguments":"objs"},"name":"replace","transplant":{"sourceCode":"if (int != int) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:114","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:193","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","position":"org.easymock.internal.RecordState:281","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ObjectMethodsFilter:115","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","position":"org.easymock.EasyMock:1746","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return !(org.easymock.IArgumentMatcher.matches(java.lang.Object))","position":"org.easymock.internal.matchers.Not:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5699326678580460103L","position":"org.easymock.internal.Result:77","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:98","type":"CtReturnImpl"},"status":-2},{"failures":[343,336,337,338,344,339,340,345,253,341,346,347,348,312,342],"variableMapping":{"constructor":"ret"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Constructor<T> == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","position":"org.easymock.internal.MockBuilder:159","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","position":"org.easymock.internal.ReflectionUtils:149","type":"CtIfImpl"},"status":-1},{"failures":[253,346,348],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:127","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{"method":"m"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.Result:83","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(java.lang.Object[], 0, java.lang.Object[], int, int)","position":"org.easymock.internal.Invocation:64","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.get(java.lang.Class<?>)","position":"org.easymock.internal.RecordState:229","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","position":"org.easymock.internal.matchers.Captures:43","type":"CtInvocationImpl"},"status":-2},{"failures":[0,0,1,1,56,57,58,64,349,350,81,82,83,84,85,86,87,88,351,352,353,134,135,136,354,137,355,356,357,358,359,360,361,362,174,363,364,175,176,365,366,367,368,233,234,235,253,255,276,277,278,279,281,282,285,286,369,370,287,288,289,290,346,291,292,293,294,295,297,298,299,300,301,371,372,302,303,304,305,373,374,375,376,377,306,378,379,307,380,381,382,383,384,385,386,387,388,308,389,390,391,392,393,309,394,395,312,342],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.core.CollectionUtils.net.sf.cglib.core.CollectionUtils.filter(java.util.List, new net.sf.cglib.core.VisibilityPredicate(java.lang.Class , true))","position":"org.easymock.internal.ClassProxyFactory:266","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.ArrayList<org.easymock.IArgumentMatcher>()","position":"org.easymock.internal.ExpectedInvocation:60","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new (\"<\") {\n    @java.lang.Override\n    public boolean matchResult(final int result) {\n        return int < 0;\n    }\n}","position":"org.easymock.LogicalOperator:24","type":"CtNewClassImpl"},"status":-2},{"failures":[241,396],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","position":"org.easymock.internal.LastControl:133","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:117","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1634","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final net.sf.cglib.proxy.Enhancer net.sf.cglib.proxy.Enhancer = new net.sf.cglib.proxy.Enhancer() {\n    /** \n     * Filter all private constructors but do not check that there are\n     * some left\n     */\n@java.lang.SuppressWarnings(value = \"rawtypes\")\n    @java.lang.Override\n    protected void filterConstructors(final java.lang.Class sc, final java.util.List constructors) {\n        net.sf.cglib.core.CollectionUtils.net.sf.cglib.core.CollectionUtils.filter(java.util.List, new net.sf.cglib.core.VisibilityPredicate(java.lang.Class , true));\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:257","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(double , double))","position":"org.easymock.EasyMock:1831","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","position":"org.easymock.internal.BridgeMethodResolver:266","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasResults())) {\n        continue;\n    } \n    if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n        continue;\n    } \n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.ExpectedInvocationAndResults.getResults().next();\n    org.easymock.internal.Invocation.validateCaptures();\n    return org.easymock.internal.Result;\n} finally {\n    org.easymock.internal.Invocation.clearCaptures();\n}","position":"org.easymock.internal.UnorderedBehavior:51","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1291","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = org.easymock.internal.Injector.org.easymock.internal.Injector.injectByName(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan.getQualifiedInjections())","position":"org.easymock.internal.Injector:152","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"bridgeMethod"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:70","type":"CtAssertImpl"},"status":0},{"failures":[],"variableMapping":{"expected":"obj"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:90","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Long>(long))","position":"org.easymock.EasyMock:865","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Long>(long))","position":"org.easymock.EasyMock:1051","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1832","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:88","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"proxy":"proxy"},"name":"add","transplant":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","position":"org.easymock.internal.MocksControl:183","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Proxy.java.lang.reflect.Proxy.isProxyClass(V.getClass())) {\n    return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]));\n} ","position":"org.easymock.internal.MocksControl:182","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:170","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.ClassProxyFactory:127","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:180","type":"CtReturnImpl"},"status":-2},{"failures":[212,301],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.CompareEqual<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:1877","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"args":"args","proxy":"proxy","method":"method","control":"control"},"name":"add","transplant":{"sourceCode":"return this.org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]))","position":"org.easymock.internal.MockInvocationHandler:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","position":"org.easymock.internal.MockInvocationHandler:36","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"arg":"value"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.matchers.Captures<java.lang.Object>.setPotentialValue(java.lang.Object)","position":"org.easymock.internal.Invocation:162","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"in":"in"},"name":"add","transplant":{"sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","position":"org.easymock.internal.EasyMockProperties:63","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.InputStream.close()","position":"org.easymock.internal.EasyMockProperties:70","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","position":"org.easymock.internal.MocksControl:343","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:63","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"expected","expected":"expected"},"name":"add","transplant":{"sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","position":"org.easymock.internal.matchers.Equals:37","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (((this.java.lang.Object) == null) && ((org.easymock.internal.matchers.Equals.java.lang.Object) == null)) || (((this.java.lang.Object) != null) && (this.java.lang.Object.equals(org.easymock.internal.matchers.Equals.java.lang.Object)))","position":"org.easymock.internal.matchers.Equals:57","type":"CtReturnImpl"},"status":0},{"failures":[44,45,46,47,48,49,50,51,52,53,55,56,57,58,64,2,3,4,5,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,126,127,128,129,130,132,134,135,136,6,7,8,9,10,139,141,142,143,149,154,155,160,161,17,18,167,168,174,175,176,189,190,191,192,194,195,196,199,201,202,204,205,206,207,208,19,210,22,38,211,36,212,213,26,214,28,30,215,216,218,31,33,220,223,224,232,235,241,242,243,244,246,248,249,250,251,253,254,255,256,257,39,258,40,259,261,262,263,264,265,41,267,268,269,272,273,274,42,275,276,277,278,279,280,281,282,283,284,287,289,290,294,296,297,298,299,301,304,306,307,308,309,311,312,313,314,315,316,317,318,319,321,322,323,324,325],"binaryOperator":"(int <= (int))","name":"conditionalBoundary","position":"org.easymock.internal.Range:79","type":"mutation","status":-1},{"failures":[],"variableMapping":{"position":"position","behaviorLists":"behaviorLists"},"name":"add","transplant":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((70 * (((java.util.List<org.easymock.internal.UnorderedBehavior>.size()) - (int)) + 1)))","position":"org.easymock.internal.MocksBehavior:164","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.Result org.easymock.internal.Result = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).addActual(org.easymock.internal.Invocation)","position":"org.easymock.internal.MocksBehavior:87","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(long))","position":"org.easymock.EasyMock:1542","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.Object[])(java.lang.Object))","position":"org.easymock.internal.Invocation:70","type":"CtReturnImpl"},"status":-2},{"failures":[44,45,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.Injector:71","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field)","position":"org.easymock.internal.Injector:109","type":"CtInvocationImpl"},"status":-1},{"failures":[413,414,415],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.matchers.Same:43","type":"CtInvocationImpl"},"status":-1},{"failures":[66,310],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","position":"org.easymock.internal.RecordState:146","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = java.lang.Math.java.lang.Math.min(int, ((java.lang.Class<?>[].int) - 1))","position":"org.easymock.internal.Invocation:137","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:371","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:107","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"boolean boolean = true","position":"org.easymock.internal.MocksBehavior:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = !(boolean)","position":"org.easymock.internal.UnorderedBehavior:85","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"status":0},{"failures":[0,1,416,417,312],"variableMapping":{"paramType":"paramType","arg":"arg","this":"this"},"name":"replace","transplant":{"sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","position":"org.easymock.ConstructorArgs:64","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:59","type":"CtIfImpl"},"status":-1},{"failures":[418],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","position":"org.easymock.internal.RecordState:161","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","position":"org.easymock.internal.RecordState:116","type":"CtInvocationImpl"},"status":-1},{"failures":[214,224],"variableMapping":{"this":"this","mock":"mock"},"name":"replace","transplant":{"sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","position":"org.easymock.EasyMock:2053","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","position":"org.easymock.EasyMock:2096","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.StringBuffer.toString()","position":"org.easymock.internal.ExpectedInvocation:113","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:52","type":"CtAssignmentImpl"},"status":-2},{"failures":[419,232,257],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:365","type":"CtReturnImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":169,"org.easymock.tests2.MockedExceptionTest.testRealException":236,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":139,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":380,"org.easymock.tests.UsageVarargTest.varargIntAccepted":122,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":340,"org.easymock.tests.LimitationsTest.mockFinalMethod":363,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":19,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":84,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":312,"org.easymock.tests.UsageCallCountTest.tooManyCalls":164,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":390,"org.easymock.tests.UsageVarargTest.allKinds":130,"org.easymock.tests2.StubTest.stubWithReturnValue":311,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":395,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":70,"org.easymock.tests2.CaptureTest.testCaptureAll":258,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":17,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":414,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":337,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":214,"org.easymock.tests2.CaptureTest.testAnd":39,"org.easymock.tests.UsageStrictMockTest.testVerify":145,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":108,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":60,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":349,"org.easymock.tests.MockClassControlTest.testToString":83,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":276,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":187,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":318,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":116,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":202,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":257,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":345,"org.easymock.tests.UsageThrowableTest.throwError":166,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":4,"org.easymock.samples.SupportTest.addDocument":46,"org.easymock.tests2.StubTest.stub":310,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":332,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":181,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":405,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":9,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":2,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":403,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":208,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":374,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":373,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":129,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":416,"org.easymock.tests.UsageExpectAndThrowTest.object":110,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":270,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":392,"org.easymock.tests2.UsageTest.moreThanOneArgument":221,"org.easymock.tests.UsageVarargTest.varargByteAccepted":128,"org.easymock.tests.MockClassControlTest.testEquals":87,"org.easymock.tests.UsageTest.wrongArguments":75,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":92,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":148,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":408,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":111,"org.easymock.tests2.UsageTest.defaultResetToNice":227,"org.easymock.tests.MockingTest.testNiceClassMocking":354,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":235,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":271,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":290,"org.easymock.tests2.MockBuilderTest.testCreateMock":291,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":272,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":177,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":182,"org.easymock.samples.ExampleTest.voteAgainstRemovals":48,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":247,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":151,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":131,"org.easymock.tests2.CaptureTest.testCapture1_2446744":260,"org.easymock.samples.ExampleTest.voteForRemoval":50,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":161,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":62,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":341,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":67,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":144,"org.easymock.tests2.CaptureTest.testCaptureRightOne":41,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":195,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":178,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":418,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":299,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":150,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":179,"org.easymock.tests2.UsageConstraintsTest.cmpTo":212,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":331,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":358,"org.easymock.tests2.MockedExceptionTest.testMockedException":234,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":13,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":119,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":218,"org.easymock.samples.PartialClassMockTest.testGetArea":56,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":153,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":133,"org.easymock.samples.ConstructorCalledMockTest.testTax":0,"org.easymock.tests2.UsageTest.argumentsOrdered":229,"org.easymock.samples.ExampleTest.removeNonExistingDocument":54,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":275,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":356,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":194,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":89,"org.easymock.tests2.AnswerTest.answer":273,"org.easymock.tests.MockingTest.testNicePartialClassMocking":135,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":16,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":10,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":336,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":15,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":333,"org.easymock.tests.UsageExpectAndThrowTest.longType":103,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":308,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":320,"org.easymock.tests.UsageTest.argumentsOrdered":79,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":210,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":289,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":207,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":65,"org.easymock.tests2.MockBuilderTest.testCreateMockString":293,"org.easymock.tests2.NameTest.nameForStrictMock":327,"org.easymock.tests2.CaptureTest.testCaptureNone":264,"org.easymock.tests2.SerializationTest.testClass":253,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":57,"org.easymock.tests2.EasyMockSupportTest.testVerify":325,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":146,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":410,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":288,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":105,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":217,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":219,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":206,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":292,"org.easymock.tests.GenericTest.testBridgedEquals":366,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":211,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":280,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":294,"org.easymock.tests2.UsageConstraintsTest.testOr":24,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":43,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":269,"org.easymock.tests.MockClassControlTest.testHashCode":86,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":398,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":18,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":173,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":201,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":350,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":343,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":12,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":277,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":394,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":378,"org.easymock.tests2.UsageConstraintsTest.testSame":23,"org.easymock.tests2.UsageTest.resumeIfFailure":230,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":415,"org.easymock.tests.UsageOverloadedMethodTest.overloading":132,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":281,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":371,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":419,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":400,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":401,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":385,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":1,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":176,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":384,"org.easymock.tests.UsageTest.openCallCountByLastCall":76,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":106,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":184,"org.easymock.tests2.NameTest.nameForNiceMock":328,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":409,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":152,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":11,"org.easymock.tests2.CaptureTest.testPrimitive":259,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":296,"org.easymock.samples.BasicClassMockTest.testPrintContent":58,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":6,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":302,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":163,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":241,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":157,"org.easymock.tests2.UsageStrictMockTest.differentMethods":251,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":386,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":315,"org.easymock.tests.MockingTest.testClassMocking":352,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":365,"org.easymock.tests2.CaptureTest.testCaptureLast":263,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":101,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":162,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":160,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":284,"org.easymock.tests.UsageStrictMockTest.range":142,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":77,"org.easymock.tests.UsageTest.unexpectedCallWithArray":74,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":387,"org.easymock.samples.ExampleTest.addDocument":52,"org.easymock.tests2.UsageConstraintsTest.lessThan":33,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":63,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":78,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":59,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":367,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":360,"org.easymock.tests2.UsageStrictMockTest.range":250,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":282,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":91,"org.easymock.tests.UsageTest.moreThanOneArgument":73,"org.easymock.tests2.UsageTest.openCallCountByLastCall":225,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":413,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":286,"org.easymock.tests.UsageStrictMockTest.differentMethods":143,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":355,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":368,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":104,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":189,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":379,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":330,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":141,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":301,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":407,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":115,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":5,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":44,"org.easymock.tests2.UsageConstraintsTest.testContains":25,"org.easymock.tests2.UsageConstraintsTest.testFind":21,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":261,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":357,"org.easymock.samples.ExampleTest.addAndChangeDocument":55,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":285,"org.easymock.tests.UsageVarargTest.varargCharAccepted":123,"org.easymock.tests2.CaptureTest.testCaptureFromStub":35,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":338,"org.easymock.tests.UsageVerifyTest.twoThrows":154,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":412,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":3,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":124,"org.easymock.tests2.DelegateToTest.testReturnException":243,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":224,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":342,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":324,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":248,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":364,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":396,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":188,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":359,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":265,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":112,"org.easymock.tests2.UsageConstraintsTest.testMatches":27,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":90,"org.easymock.tests2.UsageConstraintsTest.testNull":22,"org.easymock.tests.LimitationsTest.abstractClass":361,"org.easymock.tests2.EasyMockSupportClassTest.testAll":306,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":64,"org.easymock.tests2.UsageConstraintsTest.greaterThan":28,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":120,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":183,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":30,"org.easymock.tests.UsageExpectAndReturnTest.object":199,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":321,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":252,"org.easymock.tests2.DelegateToTest.testWrongClass":245,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":107,"org.easymock.samples.ExampleTest.voteAgainstRemoval":51,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":172,"org.easymock.tests.UsageVarargTest.varargShortAccepted":126,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":8,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":45,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":377,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":81,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":406,"org.easymock.tests2.SerializationTest.testAllMockedMethod":255,"org.easymock.tests2.NameTest.nameForMocksControl":329,"org.easymock.tests.MockingTest.testStrictClassMocking":351,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":66,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":231,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":383,"org.easymock.tests.LimitationsTest.mockNativeMethod":174,"org.easymock.tests2.DelegateToTest.testStubDelegate":244,"org.easymock.tests.UsageUnorderedTest.message":165,"org.easymock.samples.ExampleTest.answerVsDelegate":49,"org.easymock.tests.UsageCallCountTest.tooFewCalls":159,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":198,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":274,"org.easymock.tests.UsageVerifyTest.twoReturns":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":391,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":344,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":109,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":193,"org.easymock.tests2.DependencyTest.testInterfaceMocking":283,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":313,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":95,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":316,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":240,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":38,"org.easymock.tests.MockingTest.testTwoMocks":353,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":158,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":68,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":233,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":156,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":381,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":200,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":278,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":411,"org.easymock.tests.UsageThrowableTest.throwCheckedException":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":376,"org.easymock.samples.ExampleTest.voteForRemovals":53,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":168,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":26,"org.easymock.tests.ReplayStateInvalidUsageTest.times":185,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":61,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":97,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":382,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":298,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":72,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":347,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":190,"org.easymock.tests2.UsageConstraintsTest.any":36,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":399,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":197,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":323,"org.easymock.tests.LimitationsTest.privateConstructor":362,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":242,"org.easymock.tests2.CallbackTest.callback":256,"org.easymock.tests2.NameTest.nameForMock":326,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":213,"org.easymock.tests2.SerializationTest.test":254,"org.easymock.tests.UsageExpectAndReturnTest.longType":192,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":262,"org.easymock.tests2.CaptureTest.testCaptureFirst":267,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":215,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":335,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":94,"org.easymock.tests2.UsageTest.niceToStrict":223,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":93,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":138,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":113,"org.easymock.tests2.UsageTest.strictResetToDefault":220,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":375,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":304,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":71,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":100,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":196,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":237,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":300,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":370,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":29,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":121,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":297,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":99,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":136,"org.easymock.tests2.DelegateToTest.testDelegate":246,"org.easymock.tests2.UsageConstraintsTest.testNotNull":31,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":249,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":232,"org.easymock.tests2.CaptureTest.testCapture_2617107":40,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":186,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":402,"org.easymock.tests2.ThreadingTest.testThreadSafe":268,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":226,"org.easymock.tests.UsageThrowableTest.noUpperLimit":167,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":322,"org.easymock.tests.UsageExpectAndReturnTest.floatType":191,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":314,"org.easymock.tests2.UsageTest.wrongArguments":222,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":334,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":239,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":85,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":346,"org.easymock.samples.SupportTest.voteForRemovals":47,"org.easymock.tests.UsageRangeTest.combination":149,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":171,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":388,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":32,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":393,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":348,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":404,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":34,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":203,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":114,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":69,"org.easymock.tests.UsageExpectAndThrowTest.floatType":102,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":389,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":204,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":295,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":397,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":372,"org.easymock.tests.UsageTest.exactCallCountByLastCall":80,"org.easymock.tests2.AnswerTest.stubAnswer":42,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":319,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":307,"org.easymock.tests.MockingTest.testPartialClassMocking":134,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":205,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":228,"org.easymock.tests2.UsageConstraintsTest.constraints":37,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":238,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":209,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":14,"org.easymock.tests.UsageVarargTest.varargLongAccepted":127,"org.easymock.tests.ObjectMethodsTest.testHashCode":147,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":303,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":305,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":140,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":118,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":309,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":369,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":7,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":88,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":317,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":339,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":20,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":82,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":287,"org.easymock.tests.DefaultClassInstantiatorTest.object":137,"org.easymock.tests.UsageVarargTest.differentLength":125,"org.easymock.tests2.CaptureTest.testCapture2_2446744":266,"org.easymock.tests.GenericTest.testPackageScope":175,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":417}}]

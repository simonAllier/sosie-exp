[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:707","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.Capture<T>.setValue(T)","position":"org.easymock.internal.matchers.Captures:57","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","position":"org.easymock.internal.matchers.Equals:37","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object) == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","position":"org.easymock.internal.ReflectionUtils:149","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","position":"org.easymock.internal.ArgumentToString:39","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2039","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","position":"org.easymock.internal.DefaultClassInstantiator:126","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:259","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.InjectionTarget:58","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","position":"org.easymock.internal.MockBuilder:164","type":"CtThrowImpl"},"status":-2},{"failures":[0,1,2,3,4,5],"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","position":"org.easymock.internal.DefaultClassInstantiator:111","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int])","position":"org.easymock.internal.DefaultClassInstantiator:115","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","position":"org.easymock.EasyMock:2106","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","position":"org.easymock.internal.RecordState:332","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:201","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.String + \".\") + java.lang.String","position":"org.easymock.internal.Invocation:154","type":"CtReturnImpl"},"status":-2},{"failures":[6,7],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return int >= 0","position":"org.easymock.LogicalOperator:45","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int]","position":"org.easymock.internal.BridgeMethodResolver:323","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1361","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ((java.lang.String)(java.util.Properties.remove(java.lang.String)))","position":"org.easymock.internal.EasyMockProperties:120","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","position":"org.easymock.EasyMock:1554","type":"CtInvocationImpl"},"status":-2},{"failures":[8],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (((java.lang.Number.doubleValue()) - (java.lang.Number.doubleValue())) <= (java.lang.Number.doubleValue())) && ((java.lang.Number.doubleValue()) <= ((java.lang.Number.doubleValue()) + (java.lang.Number.doubleValue())))","position":"org.easymock.internal.matchers.EqualsWithDelta:40","type":"CtReturnImpl"},"status":-1},{"failures":[9,10,11,7,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"variableMapping":{"position":"currentPosition"},"name":"replace","transplant":{"sourceCode":"int++","position":"org.easymock.internal.MocksBehavior:94","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:71","type":"CtOperatorAssignmentImpl"},"status":-1},{"failures":[],"binaryOperator":"(((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM()))","name":"math","position":"org.easymock.internal.ClassProxyFactory:230","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"-4859402739599754147L","position":"org.easymock.internal.matchers.Compare:32","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"public static class MockMethodInterceptor implements java.io.Serializable , net.sf.cglib.proxy.MethodInterceptor {\n    private static final long serialVersionUID = -9054190871232972342L;\n\n    private final java.lang.reflect.InvocationHandler handler;\n\n    private transient java.util.Set<java.lang.reflect.Method> mockedMethods;\n\n    public MockMethodInterceptor(final java.lang.reflect.InvocationHandler handler) {\n        this.java.lang.reflect.InvocationHandler = java.lang.reflect.InvocationHandler;\n    }\n\n    public java.lang.Object intercept(final java.lang.Object obj, java.lang.reflect.Method method, final java.lang.Object[] args, final net.sf.cglib.proxy.MethodProxy proxy) throws java.lang.Throwable {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n            return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n        } \n        if ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) {\n            if (org.easymock.internal.ClassProxyFactory.org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable())) {\n                return java.lang.Object;\n            } \n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n        } \n        if (((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))) {\n            return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[]);\n        } \n        return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n    }\n\n    public void setMockedMethods(final java.lang.reflect.Method... mockedMethods) {\n        this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[]));\n    }\n\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    private void readObject(final java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        java.io.ObjectInputStream.defaultReadObject();\n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()));\n        if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n            return ;\n        } \n        java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size());\n        for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n            try {\n                java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n            } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n                throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n            }\n        }\n    }\n\n    private void writeObject(final java.io.ObjectOutputStream stream) throws java.io.IOException {\n        java.io.ObjectOutputStream.defaultWriteObject();\n        if ((java.util.Set<java.lang.reflect.Method>) == null) {\n            java.io.ObjectOutputStream.writeObject(null);\n            return ;\n        } \n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = new java.util.HashSet<org.easymock.internal.MethodSerializationWrapper>(java.util.Set<java.lang.reflect.Method>.size());\n        for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n            java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n        }\n        java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>);\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:51","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:119","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:416","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"proxy":"proxy"},"name":"add","transplant":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","position":"org.easymock.internal.MocksControl:183","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","position":"org.easymock.internal.MocksControl:185","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.Object[][((java.lang.Object[].int) - 1)]) == null) {\n    return java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:56","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:204","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","position":"org.easymock.internal.AndroidSupport:29","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:57","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:85","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","position":"org.easymock.internal.MockBuilder:79","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","position":"org.easymock.internal.DefaultClassInstantiator:140","type":"CtInvocationImpl"},"status":-2},{"failures":[47],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:380","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:434","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(byte))","position":"org.easymock.EasyMock:1482","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","position":"org.easymock.internal.RecordState:144","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"-4859402739599754147L","position":"org.easymock.internal.matchers.Compare:32","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2689588759855326190L","position":"org.easymock.internal.matchers.NotNull:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","position":"org.easymock.internal.LastControl:126","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1304","type":"CtInvocationImpl"},"status":-2},{"failures":[48,49,50,51,52],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"Nothing captured yet\"","position":"org.easymock.Capture:132","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String)","position":"org.easymock.internal.EasyMockProperties:101","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:167","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1471","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"default :\n    throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));","position":"org.easymock.Capture:123","type":"CtCaseImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.String java.lang.String = java.lang.Object.toString()","position":"org.easymock.internal.Invocation:150","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Compare<T>(T , java.util.Comparator<? super T> , org.easymock.LogicalOperator))","position":"org.easymock.EasyMock:1901","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","position":"org.easymock.internal.MockBuilder:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:127","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"genericInterface":"genericInterface","typeVariableMap":"typeVariableMap","this":"this"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:288","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:289","type":"CtInvocationImpl"},"status":0},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1555","type":"mutation","return":"return 0","status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:159","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"-3483500330975410177L","position":"org.easymock.internal.RuntimeExceptionWrapper:23","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"<any>\")","position":"org.easymock.internal.matchers.Any:40","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Any:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","position":"org.easymock.internal.RecordState:96","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","position":"org.easymock.internal.RecordState:152","type":"CtInvocationImpl"},"status":0},{"failures":[53,54,55],"variableMapping":{"controls":"controls"},"name":"add","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : this.java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.replay();\n}","position":"org.easymock.EasyMockSupport:541","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.reset();\n}","position":"org.easymock.EasyMockSupport:551","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{"cls":"type","type":"type"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:261","type":"CtAssignmentImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.String java.lang.String = java.lang.reflect.Method.getName()","position":"org.easymock.internal.Invocation:143","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"binaryOperator":"((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\")","name":"math","position":"org.easymock.internal.ReflectionUtils:152","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(\", \")","position":"org.easymock.internal.ArgumentToString:91","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:118","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:603","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","position":"org.easymock.internal.ReflectionUtils:96","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1384","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:362","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.reset()","position":"org.easymock.EasyMockSupport:552","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:255","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.BridgeMethodResolver:193","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:86","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","position":"org.easymock.internal.RecordState:300","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","position":"org.easymock.internal.InjectionPlan:61","type":"CtThrowImpl"},"status":-2},{"failures":[],"binaryOperator":"((\"contains(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"math","position":"org.easymock.internal.matchers.Contains:40","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:123","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods()","position":"org.easymock.internal.ReflectionUtils:94","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","position":"org.easymock.internal.RecordState:85","type":"CtIfImpl"},"status":-2},{"failures":[56,57,58,59,60,61,62,63,64,65,66,67,68,53,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,9,100,101,102,103,10,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,11,119,120,7,8,121,122,123,124,125,126,127,12,128,129,130,131,13,132,133,134,135,136,137,138,139,140,48,141,142,143,144,145,146,147,148,149,14,150,15,151,152,153,154,155,156,157,47,158,159,160,161,162,54,163,164,55,165,16,166,167,168,169,170,17,18,171,172,173,174,19,175,176,177,178,179,180,181,182,183,184,185,186,20,21,187,188,189,22,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,23,260,260,261,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,24,284,285,286,25,287,26,288,27,28,289,29,30,290,31,291,32,292,33,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,34,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,35,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,36,438,439,440,37,441,38,442,39,40,443,41,42,444,43,445,44,446,45,447,448,449,450,46,451,0,1,2,3,452,4,453,5,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:136","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:109","type":"CtTryImpl"},"status":-1},{"failures":[10,104,105,106,108,109,110,111,112,113,114,115,116,117,118,11,119,120,7,8,121,122,123,124,125,126,127,12,130,141,14,15,165,16,166,167,168,169,170,17,18,171,172,173,174,19,355,356,360,361,362,363,364,369,371,372,373,374,375,396,397,415,416,46,483],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new java.util.HashMap<java.lang.String, java.lang.Class<?>>(10)","position":"org.easymock.internal.MethodSerializationWrapper:30","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<org.easymock.IArgumentMatcher> != null) {\n    if ((java.util.List<org.easymock.IArgumentMatcher>.size()) != (org.easymock.internal.Invocation.getArguments().int)) {\n        throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"));\n    } \n    return java.util.List<org.easymock.IArgumentMatcher>;\n} ","position":"org.easymock.internal.ExpectedInvocation:45","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"\\'\")","position":"org.easymock.internal.ArgumentToString:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:358","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","position":"org.easymock.internal.DefaultClassInstantiator:94","type":"CtThrowImpl"},"status":0},{"failures":[144,149,236],"variableMapping":{"toMock":"toMock","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:136","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:190","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"in":"in"},"name":"add","transplant":{"sourceCode":"java.io.InputStream.close()","position":"org.easymock.internal.EasyMockProperties:70","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","position":"org.easymock.internal.EasyMockProperties:69","type":"CtTryImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","position":"org.easymock.EasyMockSupport:508","type":"CtLocalVariableImpl"},"status":-2},{"failures":[95,99],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","position":"org.easymock.internal.RecordState:281","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"actual":"mock","expected":"mock"},"name":"replace","transplant":{"sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","position":"org.easymock.internal.matchers.Equals:37","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((this.java.lang.Object.equals(org.easymock.internal.Invocation.java.lang.Object)) && (this.java.lang.reflect.Method.equals(org.easymock.internal.Invocation.java.lang.reflect.Method))) && org.easymock.internal.Invocation.(equalArguments(org.easymock.internal.Invocation.java.lang.Object[]))","position":"org.easymock.internal.Invocation:99","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1026","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return float","position":"org.easymock.EasyMock:1409","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"injection":"injection"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.Injection.getAnnotation()","position":"org.easymock.internal.InjectionPlan:49","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection)","position":"org.easymock.internal.InjectionPlan:53","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.ErrorMessage.isMatching()) {\n    int++;\n} ","position":"org.easymock.internal.MocksBehavior:131","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:256","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    final boolean boolean = !(boolean);\n    final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount();\n    final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation));\n    if ((boolean && boolean) && (!boolean)) {\n        continue;\n    } \n    final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount());\n    java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage);\n}","position":"org.easymock.internal.UnorderedBehavior:84","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.Range org.easymock.internal.Range : java.util.LinkedList<org.easymock.internal.Range>) {\n    int += org.easymock.internal.Range.getMinimum();\n    if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n        int = java.lang.Integer.int;\n    } else {\n        int += org.easymock.internal.Range.getMaximum();\n    }\n}","position":"org.easymock.internal.Results:92","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","position":"org.easymock.internal.InjectionPlan:36","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:195","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.easymock.internal.MocksControl(org.easymock.MockType)","position":"org.easymock.EasyMock:491","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMockSupport:519","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Method = java.io.ObjectStreamClass.java.io.ObjectStreamClass.getDeclaredMethod(java.lang.String, new java.lang.Class[]{ java.lang.Class.java.lang.Class });\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"));\n}","position":"org.easymock.internal.DefaultClassInstantiator:180","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.matchers.Null()","position":"org.easymock.internal.matchers.Null:29","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","position":"org.easymock.internal.LastControl:119","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:116","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"state":"state","value":"answer"},"name":"add","transplant":{"sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:257","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:284","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.Invocation:214","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","position":"org.easymock.internal.ReflectionUtils:230","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.replay()","position":"org.easymock.internal.MocksControl:212","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"Nothing captured yet\"","position":"org.easymock.Capture:132","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<T>.toString()","position":"org.easymock.Capture:137","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"org.easymock.internal.MocksControl != null","name":"removeConditional","position":"org.easymock.internal.LastControl:48","type":"mutation","status":0},{"failures":[97],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","position":"org.easymock.internal.RecordState:176","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","position":"org.easymock.internal.EasyMockProperties:63","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(java.util.Properties.remove(java.lang.String)));\n} ","position":"org.easymock.internal.EasyMockProperties:119","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((org.easymock.internal.Result == null) && (boolean)) {\n    org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()));\n} ","position":"org.easymock.internal.MocksBehavior:97","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"case FIRST :\n    if (!org.easymock.Capture<T>.(hasCaptured())) {\n        java.util.List<T>.add(T);\n    } \n    break;","position":"org.easymock.Capture:111","type":"CtCaseImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Number.byteValue()","position":"org.easymock.internal.RecordState:195","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int < 0","position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()))","position":"org.easymock.internal.Injector:233","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0]","position":"org.easymock.internal.BridgeMethodResolver:353","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:287","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final net.sf.cglib.proxy.Enhancer net.sf.cglib.proxy.Enhancer = org.easymock.internal.ClassProxyFactory.createEnhancer(java.lang.Class<T>)","position":"org.easymock.internal.ClassProxyFactory:165","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","position":"org.easymock.internal.ReflectionUtils:95","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Character>(org.easymock.Capture<java.lang.Character>))","position":"org.easymock.EasyMock:1999","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:109","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"cls"},"name":"replace","transplant":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:249","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:853","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","position":"org.easymock.internal.MockBuilder:68","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).getMessages(org.easymock.internal.Invocation)","position":"org.easymock.internal.MocksBehavior:128","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:72","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1647","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","position":"org.easymock.internal.ReflectionUtils:188","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\")","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:191","type":"mutation","status":-2},{"failures":[142,211,484,224,260,261],"variableMapping":{"constructorArgs":"constructorArgs"},"name":"replace","transplant":{"sourceCode":"if ((this.org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","position":"org.easymock.internal.MockBuilder:210","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:163","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:123","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.ExpectedInvocation:64","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-3018631689416120154L","position":"org.easymock.internal.matchers.EqualsWithDelta:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{"injection":"injection"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.Injection.getAnnotation()","position":"org.easymock.internal.InjectionPlan:49","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n    org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection);\n    java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField());\n} ","position":"org.easymock.internal.Injector:169","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int += org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:55","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.internal.ReflectionUtils:185","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.matchers.Captures<?>>(0)","position":"org.easymock.internal.Invocation:44","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:154","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:183","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":338,"org.easymock.tests2.MockedExceptionTest.testRealException":154,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":72,"org.easymock.tests.UsageVarargTest.varargIntAccepted":474,"org.easymock.tests.LimitationsTest.mockFinalMethod":379,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":10,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":90,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":410,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":83,"org.easymock.tests.UsageCallCountTest.tooManyCalls":278,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":385,"org.easymock.tests2.CompareToTest.testGreateThan":6,"org.easymock.tests2.StubTest.stubWithReturnValue":94,"org.easymock.tests.UsageVarargTest.allKinds":483,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":89,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":432,"org.easymock.tests2.CaptureTest.testCaptureAll":16,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":355,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":120,"org.easymock.tests2.CaptureTest.testAnd":165,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":92,"org.easymock.tests.UsageStrictMockTest.testVerify":401,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":39,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":303,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":294,"org.easymock.tests.MockClassControlTest.testToString":409,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":226,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":392,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":159,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":44,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":290,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":199,"org.easymock.tests.UsageThrowableTest.throwError":335,"org.easymock.samples.SupportTest.addDocument":263,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":375,"org.easymock.tests2.StubTest.stub":93,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":434,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":386,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":194,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":48,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":363,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":371,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":183,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":332,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":293,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":334,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":148,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":482,"org.easymock.tests.UsageExpectAndThrowTest.object":443,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":187,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":85,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":367,"org.easymock.tests2.UsageTest.moreThanOneArgument":240,"org.easymock.tests.UsageVarargTest.varargByteAccepted":481,"org.easymock.tests.MockClassControlTest.testEquals":413,"org.easymock.tests.UsageTest.wrongArguments":457,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":282,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":423,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":198,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":41,"org.easymock.tests2.UsageTest.defaultResetToNice":246,"org.easymock.tests.MockingTest.testNiceClassMocking":354,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":153,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":188,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":220,"org.easymock.tests2.MockBuilderTest.testCreateMock":222,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":189,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":382,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":387,"org.easymock.samples.ExampleTest.voteAgainstRemovals":253,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":128,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":197,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":302,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":465,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":343,"org.easymock.tests2.CaptureTest.testCapture1_2446744":168,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":99,"org.easymock.samples.ExampleTest.voteForRemoval":255,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":58,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":275,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":306,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":359,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":219,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":400,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":429,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":26,"org.easymock.tests2.CaptureTest.testCaptureRightOne":172,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":383,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":62,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":139,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":464,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":384,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":436,"org.easymock.tests2.UsageConstraintsTest.cmpTo":116,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":50,"org.easymock.tests.MockTypeTest.fromEasyMockClass":295,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":452,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":203,"org.easymock.tests2.MockedExceptionTest.testMockedException":152,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":125,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":404,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":447,"org.easymock.samples.PartialClassMockTest.testGetArea":262,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":417,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":318,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":34,"org.easymock.samples.ConstructorCalledMockTest.testTax":260,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":61,"org.easymock.tests2.UsageTest.argumentsOrdered":248,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":59,"org.easymock.samples.ExampleTest.removeNonExistingDocument":259,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":2,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":65,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":381,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":287,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":279,"org.easymock.tests2.AnswerTest.answer":60,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":204,"org.easymock.tests.MockingTest.testNicePartialClassMocking":349,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":397,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":364,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":406,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":435,"org.easymock.tests.UsageExpectAndThrowTest.longType":440,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":299,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":446,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":81,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":161,"org.easymock.tests.UsageTest.argumentsOrdered":461,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":106,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":218,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":33,"org.easymock.tests2.MockBuilderTest.testCreateMockString":225,"org.easymock.tests2.NameTest.nameForStrictMock":235,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":373,"org.easymock.tests2.CaptureTest.testCaptureNone":18,"org.easymock.tests2.SerializationTest.testClass":101,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":317,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":331,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":425,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":251,"org.easymock.tests.MockingTest.testInterfaceMocking":350,"org.easymock.tests2.EasyMockSupportTest.testVerify":55,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":421,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":201,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":217,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":441,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":353,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":124,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":238,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":223,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":292,"org.easymock.tests.GenericTest.testBridgedEquals":471,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":113,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":230,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":134,"org.easymock.tests2.UsageConstraintsTest.testOr":111,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":21,"org.easymock.tests.MockClassControlTest.testHashCode":412,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":176,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":233,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":30,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":297,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":342,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":356,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":403,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":88,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":227,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":229,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":49,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":69,"org.easymock.tests2.UsageConstraintsTest.testSame":110,"org.easymock.tests2.UsageTest.resumeIfFailure":249,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":268,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":231,"org.easymock.tests.UsageOverloadedMethodTest.overloading":344,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":142,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":298,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":179,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":181,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":77,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":310,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":261,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":76,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":469,"org.easymock.tests.UsageTest.openCallCountByLastCall":458,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":38,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":309,"org.easymock.tests2.NameTest.nameForNiceMock":236,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":389,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":200,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":466,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":402,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":136,"org.easymock.tests2.CaptureTest.testPrimitive":167,"org.easymock.samples.BasicClassMockTest.testPrintContent":252,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":267,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":360,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":144,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":14,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":277,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":271,"org.easymock.tests2.UsageStrictMockTest.differentMethods":132,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":78,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":157,"org.easymock.tests.MockingTest.testClassMocking":346,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":470,"org.easymock.tests2.CaptureTest.testCaptureLast":17,"org.easymock.tests2.UsageConstraintsTest.equals":107,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":276,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":438,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":274,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":209,"org.easymock.tests.UsageStrictMockTest.range":35,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":459,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":79,"org.easymock.tests.UsageTest.unexpectedCallWithArray":456,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":314,"org.easymock.samples.ExampleTest.addDocument":257,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":352,"org.easymock.tests2.UsageConstraintsTest.lessThan":12,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":307,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":460,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":301,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":433,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":323,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":56,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":5,"org.easymock.tests2.MockBuilderTest.testWithConstructor":211,"org.easymock.tests2.UsageStrictMockTest.range":13,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":232,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":281,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":448,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":316,"org.easymock.tests.UsageTest.moreThanOneArgument":455,"org.easymock.tests2.UsageTest.openCallCountByLastCall":244,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":212,"org.easymock.tests.UsageStrictMockTest.differentMethods":399,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":1,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":320,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":57,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":37,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":357,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":24,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":70,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":141,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":196,"org.easymock.tests2.DependencyTest.testClassMockingSupport":207,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":398,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":445,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":415,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":178,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":266,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":426,"org.easymock.tests2.UsageConstraintsTest.testContains":117,"org.easymock.tests2.UsageConstraintsTest.testFind":108,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":169,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":484,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":3,"org.easymock.samples.ExampleTest.addAndChangeDocument":23,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":210,"org.easymock.tests.UsageVarargTest.varargCharAccepted":476,"org.easymock.tests2.CaptureTest.testCaptureFromStub":173,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":205,"org.easymock.tests.UsageVerifyTest.twoThrows":418,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":372,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":477,"org.easymock.tests2.DelegateToTest.testReturnException":96,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":91,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":243,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":164,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":129,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":150,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":467,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":269,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":4,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":393,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":171,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":42,"org.easymock.tests2.UsageConstraintsTest.testMatches":119,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":321,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":322,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":333,"org.easymock.tests2.UsageConstraintsTest.testNull":109,"org.easymock.tests.LimitationsTest.abstractClass":376,"org.easymock.tests2.EasyMockSupportClassTest.testAll":53,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":453,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":300,"org.easymock.tests2.UsageConstraintsTest.greaterThan":7,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":472,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":388,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":121,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":162,"org.easymock.tests.UsageExpectAndReturnTest.object":289,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":133,"org.easymock.tests2.DelegateToTest.testWrongClass":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":313,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":442,"org.easymock.samples.ExampleTest.voteAgainstRemoval":256,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":341,"org.easymock.tests.UsageVarargTest.varargShortAccepted":479,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":437,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":424,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":185,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":362,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":68,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":407,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":195,"org.easymock.tests2.SerializationTest.testAllMockedMethod":103,"org.easymock.tests2.NameTest.nameForMocksControl":237,"org.easymock.tests.MockingTest.testStrictClassMocking":345,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":374,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":250,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":75,"org.easymock.tests2.DelegateToTest.testStubDelegate":97,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":358,"org.easymock.tests.LimitationsTest.mockNativeMethod":378,"org.easymock.tests.UsageUnorderedTest.message":46,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":305,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":325,"org.easymock.samples.ExampleTest.answerVsDelegate":254,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":428,"org.easymock.tests.UsageCallCountTest.tooFewCalls":273,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":28,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":84,"org.easymock.tests.UsageVerifyTest.twoReturns":419,"org.easymock.tests2.ThreadingTest.testChangeDefault":52,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":25,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":40,"org.easymock.tests2.DependencyTest.testInterfaceMocking":208,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":324,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":155,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":326,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":366,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":47,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":193,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":112,"org.easymock.tests.MockingTest.testTwoMocks":347,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":272,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":430,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":151,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":270,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":73,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":29,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":228,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":202,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":67,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":330,"org.easymock.tests.UsageThrowableTest.throwCheckedException":339,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":296,"org.easymock.samples.ExampleTest.voteForRemovals":258,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":337,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":11,"org.easymock.tests.ReplayStateInvalidUsageTest.times":390,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":74,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":304,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":368,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":138,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":454,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":311,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":284,"org.easymock.tests2.UsageConstraintsTest.any":115,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":177,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":312,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":27,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":315,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":163,"org.easymock.tests.LimitationsTest.privateConstructor":377,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":15,"org.easymock.tests2.CallbackTest.callback":22,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":224,"org.easymock.tests2.NameTest.nameForMock":234,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":319,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":118,"org.easymock.tests.MockNameTest.defaultName":380,"org.easymock.tests2.SerializationTest.test":102,"org.easymock.tests.UsageExpectAndReturnTest.longType":286,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":170,"org.easymock.tests2.CaptureTest.testCaptureFirst":19,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":122,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":450,"org.easymock.tests2.UsageTest.niceToStrict":242,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":365,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":283,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":427,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":394,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":451,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":66,"org.easymock.tests2.UsageTest.strictResetToDefault":239,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":444,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":146,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":416,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":36,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":288,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":190,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":140,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":215,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":8,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":137,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":473,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":370,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":351,"org.easymock.tests2.DelegateToTest.testDelegate":9,"org.easymock.tests2.UsageConstraintsTest.testNotNull":126,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":131,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":214,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":180,"org.easymock.tests2.CaptureTest.testCapture_2617107":166,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":328,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":391,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":182,"org.easymock.tests2.ThreadingTest.testThreadSafe":20,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":329,"org.easymock.tests.UsageThrowableTest.noUpperLimit":336,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":475,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":54,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":156,"org.easymock.tests.UsageExpectAndReturnTest.floatType":285,"org.easymock.tests2.UsageTest.wrongArguments":241,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":114,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":192,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":411,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":221,"org.easymock.samples.SupportTest.voteForRemovals":264,"org.easymock.tests.UsageRangeTest.combination":463,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":80,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":340,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":127,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":123,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":86,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":186,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":130,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":31,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":43,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":431,"org.easymock.tests.UsageExpectAndThrowTest.floatType":439,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":82,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":51,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":135,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":291,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":175,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":143,"org.easymock.tests.UsageTest.exactCallCountByLastCall":462,"org.easymock.tests2.AnswerTest.stubAnswer":64,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":160,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":71,"org.easymock.tests.MockingTest.testPartialClassMocking":348,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":32,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":247,"org.easymock.tests2.UsageConstraintsTest.constraints":105,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":191,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":100,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":405,"org.easymock.tests.UsageVarargTest.varargLongAccepted":480,"org.easymock.tests.ObjectMethodsTest.testHashCode":422,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":145,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":147,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":396,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":45,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":87,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":308,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":213,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":449,"org.easymock.tests2.DependencyTest.testClassMocking":206,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":361,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":414,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":420,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":184,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":158,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":104,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":408,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":216,"org.easymock.tests.DefaultClassInstantiatorTest.object":0,"org.easymock.tests.UsageVarargTest.differentLength":478,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":327,"org.easymock.tests2.CaptureTest.testCapture2_2446744":174,"org.easymock.tests.GenericTest.testPackageScope":468}}]

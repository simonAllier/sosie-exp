[{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[0,1,2,3],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,40,41,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"equalsMethod"}},{"transplant":{"position":"org.easymock.EasyMock:2124","sourceCode":"if (org.easymock.internal.Invocation == null) {\n    throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:61","sourceCode":"org.easymock.internal.MocksBehavior.lastBehaviorList().addExpected(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result, org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,6,149,150,151,152,153,154,155,10,11,12,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,15,16,203,21,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,39,221,222,223,224,225,226,227,228,42,43,229,230,231,232,233,234,235,236,237,238,239,240,241,242,48,50,51,243,244,56,57,245,58,59,60,62,67,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,73,276,277,278,279,280,281,282,283,284,285,286,287,288,74,289,75,76,290,291,292,293,294,295,296,297,298,299,300,301,83,86,96,102,302,303,304,305,306,307,308,309,310,105,106,107,108,311,109,110,312,313,314,315,316,317,318,319,320,321,322,323,324],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[325,326,292,298],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[248,249,253,254,327,265,312,314,322],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:411","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[14],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[14],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","delegateTo":"delegateTo"}},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:299","sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[254],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","failures":[40,41,328,329,330,52,331,332,333,334,74,76,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,110,335],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.Compare:52","failures":[262],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:75","sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","type":"CtReturnImpl"},"failures":[112,113,116,117,166,172,173,174,205,206,208,209,233,234,239,240,336,337,338,339,304,306,307],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1013","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[23,24,25,26,28,29],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1672","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(short[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[340,341,312,313,314,315,316,317,318,319,320,321,342,322,343,323,324],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[344,113,116,117,345,166,173,174,205,208,234,239,240,306],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[272,346],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:280","failures":[160,223,285,286,287,288],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"failures":[347],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:274","failures":[159,223,273,348,349,274,275,350,276,277,283],"status":-1,"binaryOperator":"org.easymock.IAnswer<?> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1928","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[344,351,352,205,353,354],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockMethodInterceptor:127","sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:123","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[74,289,75],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stream":"stream"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"failures":[40,41,328,329,330,52,331,332,355,356,357,63,74,76,77],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.RecordState:298","sourceCode":"return ","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[205,206,208,209,358,58,60,304,306,307],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"failures":[359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:85","failures":[251,327,265,270],"status":-1,"binaryOperator":"(java.util.Stack<org.easymock.IArgumentMatcher> != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:142","failures":[18],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.RecordState:85","failures":[381,382,383,384,385,111,112,344,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,386,144,145,146,147,148,6,387,388,149,150,151,152,389,153,154,155,390,10,11,12,156,391,157,158,159,160,161,162,392,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,393,394,395,396,397,15,16,398,399,400,401,203,402,21,403,404,405,406,407,408,409,410,411,412,413,414,23,415,416,417,418,419,420,326,421,204,205,206,207,208,209,210,358,211,212,31,32,33,34,35,36,37,38,215,216,217,218,219,220,39,221,222,223,224,225,226,227,422,228,40,40,41,41,42,43,229,230,231,232,233,234,235,236,237,238,423,239,240,241,242,44,45,48,49,50,51,53,54,55,243,244,56,57,245,58,59,60,61,62,65,66,67,68,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,350,424,425,426,427,71,72,73,428,276,277,278,279,280,281,282,283,284,285,286,287,288,74,289,75,76,290,291,292,293,294,295,296,429,297,298,299,300,301,336,337,338,339,83,86,96,102,302,430,303,304,305,306,307,308,309,310,431,105,106,107,108,311,109,110,312,313,314,315,316,317,318,319,320,321,322,343,323,324],"status":-1,"binaryOperator":"org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"(((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:853","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1607","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(char[]))","type":"CtInvocationImpl"},"failures":[259],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MocksBehavior:200","failures":[280],"status":-1,"binaryOperator":"(((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:281","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":249,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":111,"org.easymock.tests2.UsageTest.argumentsOrdered":240,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":299,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":369,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":236,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":221,"org.easymock.tests2.DelegateToTest.testReturnException":285,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":399,"org.easymock.tests.MockingTest.testPartialClassMocking":10,"org.easymock.tests.MockClassControlTest.testToString":33,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":70,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":377,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":90,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":119,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":86,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":244,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":255,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":167,"org.easymock.tests2.UsageTest.wrongArguments":234,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":417,"org.easymock.samples.ExampleTest.answerVsDelegate":223,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":5,"org.easymock.tests2.UsageConstraintsTest.testNull":251,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":58,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":38,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":298,"org.easymock.tests2.CaptureTest.testPrimitive":315,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":171,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":138,"org.easymock.tests.UsageTest.moreThanOneArgument":112,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":245,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":383,"org.easymock.tests.UsageTest.argumentsOrdered":117,"org.easymock.tests.UsageVarargTest.varargIntAccepted":141,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":374,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":215,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":44,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":49,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":361,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":219,"org.easymock.tests.ReplayStateInvalidUsageTest.times":411,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":302,"org.easymock.tests2.AnswerTest.answer":273,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":375,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":427,"org.easymock.tests2.CaptureTest.testAnd":312,"org.easymock.tests2.UsageTest.strictResetToDefault":232,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":65,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":329,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":382,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":157,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":294,"org.easymock.tests2.DelegateToTest.testDelegate":288,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":134,"org.easymock.tests.LimitationsTest.mockFinalMethod":22,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":203,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":397,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":2,"org.easymock.tests2.CaptureTest.testCapture1_2446744":316,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":132,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":425,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":405,"org.easymock.tests.UsageThrowableTest.throwError":195,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":385,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":355,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":333,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":104,"org.easymock.samples.PartialClassMockTest.testGetArea":39,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":406,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":216,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":120,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":91,"org.easymock.tests2.UsageTest.niceToStrict":235,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":359,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":48,"org.easymock.tests2.MockBuilderTest.testCreateMock":53,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":99,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":128,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":353,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":295,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":387,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":415,"org.easymock.tests.UsageOverloadedMethodTest.overloading":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":101,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":95,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":161,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":260,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":186,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":163,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":259,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":321,"org.easymock.tests.MockClassControlTest.testEquals":37,"org.easymock.tests2.EasyMockSupportClassTest.testAll":83,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":16,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":136,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":426,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":395,"org.easymock.tests2.CaptureTest.testCaptureAll":313,"org.easymock.tests2.UsageConstraintsTest.testMatches":261,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":403,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":384,"org.easymock.samples.ExampleTest.voteForRemovals":227,"org.easymock.tests.UsageVarargTest.allKinds":148,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":172,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":396,"org.easymock.samples.BasicClassMockTest.testPrintContent":43,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":201,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":430,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":402,"org.easymock.tests2.UsageConstraintsTest.greaterThan":263,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":84,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":391,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":68,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":29,"org.easymock.samples.ExampleTest.voteForRemoval":224,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":69,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":279,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":61,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":6,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":231,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":52,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":366,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":292,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":81,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":398,"org.easymock.tests2.CaptureTest.testCaptureFirst":324,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":365,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":293,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":242,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":392,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":182,"org.easymock.tests2.UsageTest.moreThanOneArgument":233,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":281,"org.easymock.tests2.CaptureTest.testCapture2_2446744":323,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":54,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":376,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":147,"org.easymock.tests.GenericTest.testBridgedEquals":18,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":153,"org.easymock.tests.UsageExpectAndReturnTest.longType":178,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":393,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":290,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":137,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":268,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":135,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":381,"org.easymock.tests.UsageCallCountTest.tooManyCalls":154,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":100,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":183,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":124,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":200,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":106,"org.easymock.tests.MockingTest.testNiceClassMocking":13,"org.easymock.tests.MockingTest.testClassMocking":8,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":388,"org.easymock.tests2.UsageConstraintsTest.testContains":258,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":73,"org.easymock.tests2.UsageConstraintsTest.testFind":250,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":165,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":421,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":277,"org.easymock.tests.UsageExpectAndReturnTest.object":185,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":62,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":297,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":143,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":326,"org.easymock.tests.UsageTest.exactCallCountByLastCall":118,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":155,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":364,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":213,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":77,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":191,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":139,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":160,"org.easymock.tests.MockClassControlTest.testHashCode":36,"org.easymock.tests2.EasyMockSupportTest.testVerify":301,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":93,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":214,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":159,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":424,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":431,"org.easymock.tests.UsageVarargTest.varargCharAccepted":142,"org.easymock.tests2.CaptureTest.testCaptureMultiple":341,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":303,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":380,"org.easymock.tests2.UsageTest.openCallCountByLastCall":237,"org.easymock.tests.DefaultClassInstantiatorTest.object":23,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":300,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":419,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":345,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":126,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":94,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":198,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":35,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":66,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":125,"org.easymock.tests.CapturesMatcherTest.test":340,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":102,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":34,"org.easymock.tests2.UsageTest.resumeIfFailure":241,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":4,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":401,"org.easymock.tests2.StubTest.stubWithReturnValue":310,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":330,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":184,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":269,"org.easymock.tests2.SerializationTest.testAllMockedMethod":75,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":357,"org.easymock.samples.SupportTest.voteForRemovals":230,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":354,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":14,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":131,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":348,"org.easymock.tests.UsageExpectAndThrowTest.object":129,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":266,"org.easymock.tests2.DelegateToTest.testWrongClass":287,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":211,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":212,"org.easymock.samples.ConstructorCalledMockTest.testTax":40,"org.easymock.tests.UsageStrictMockTest.range":208,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":429,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":105,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":130,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":50,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":413,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":80,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":416,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":351,"org.easymock.tests2.CaptureTest.testCaptureNone":320,"org.easymock.tests.UsageUnorderedTest.message":166,"org.easymock.tests.UsageVerifyTest.twoReturns":174,"org.easymock.tests.UsageVarargTest.varargByteAccepted":146,"org.easymock.tests2.ThreadingTest.testThreadSafe":278,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":97,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":152,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":42,"org.easymock.tests2.CaptureTest.testCapture_2617107":314,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":170,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":378,"org.easymock.tests2.UsageConstraintsTest.any":256,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":410,"org.easymock.tests2.StubTest.stub":309,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":400,"org.easymock.tests.UsageExpectAndThrowTest.longType":122,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":379,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":27,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":409,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":305,"org.easymock.tests2.SerializationTest.testClass":74,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":284,"org.easymock.tests.LimitationsTest.mockNativeMethod":21,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":17,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":194,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":308,"org.easymock.tests2.NameTest.nameForMocksControl":339,"org.easymock.tests2.MockedExceptionTest.testMockedException":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":85,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":115,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":123,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":12,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":56,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":51,"org.easymock.tests.MockingTest.testNicePartialClassMocking":11,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":60,"org.easymock.tests2.CaptureTest.testCaptureLast":319,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":3,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":110,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":254,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":267,"org.easymock.tests.MockingTest.testTwoMocks":9,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":335,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":175,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":127,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":239,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":271,"org.easymock.samples.ExampleTest.removeNonExistingDocument":422,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":407,"org.easymock.tests.UsageStrictMockTest.differentMethods":209,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":25,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":280,"org.easymock.tests2.MockBuilderTest.testCreateMockString":55,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":31,"org.easymock.tests.UsageExpectAndThrowTest.floatType":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":87,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":262,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":82,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":274,"org.easymock.tests.UsageVerifyTest.twoThrows":173,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":0,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":96,"org.easymock.samples.ExampleTest.voteAgainstRemoval":225,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":370,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":67,"org.easymock.tests.LimitationsTest.privateConstructor":20,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":334,"org.easymock.tests2.UsageConstraintsTest.testNotNull":270,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":71,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":202,"org.easymock.tests2.UsageTest.defaultResetToNice":423,"org.easymock.samples.ExampleTest.voteAgainstRemovals":222,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":190,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":371,"org.easymock.tests.UsageVarargTest.differentLength":386,"org.easymock.tests2.CallbackTest.callback":283,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":63,"org.easymock.tests.UsageTest.openCallCountByLastCall":114,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":246,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":169,"org.easymock.tests.UsageCallCountTest.tooFewCalls":150,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":108,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":418,"org.easymock.tests.UsageThrowableTest.throwCheckedException":199,"org.easymock.tests.MockingTest.testStrictClassMocking":7,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":352,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":390,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":109,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":107,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":412,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":311,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":350,"org.easymock.tests.ObjectMethodsTest.testHashCode":420,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":282,"org.easymock.tests2.NameTest.nameForNiceMock":338,"org.easymock.tests2.DependencyTest.testInterfaceMocking":243,"org.easymock.samples.ExampleTest.addDocument":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":103,"org.easymock.tests2.DelegateToTest.testStubDelegate":286,"org.easymock.tests2.AnswerTest.stubAnswer":275,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":206,"org.easymock.tests.UsageVarargTest.varargLongAccepted":145,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":368,"org.easymock.tests.UsageExpectAndReturnTest.floatType":177,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":193,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":76,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":41,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":1,"org.easymock.tests.UsageThrowableTest.noUpperLimit":196,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":264,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":247,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":78,"org.easymock.tests2.SerializationTest.test":289,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":317,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":24,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":176,"org.easymock.tests2.UsageConstraintsTest.testSame":252,"org.easymock.samples.SupportTest.addDocument":229,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":408,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":88,"org.easymock.tests.GenericTest.testPackageScope":15,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":363,"org.easymock.tests2.NameTest.nameForMock":336,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":187,"org.easymock.tests2.UsageStrictMockTest.differentMethods":307,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":332,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":64,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":179,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":133,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":325,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":158,"org.easymock.tests2.MockedExceptionTest.testRealException":428,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":373,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":356,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":304,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":372,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":414,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":168,"org.easymock.tests2.NameTest.nameForStrictMock":337,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":47,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":276,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":59,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":79,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":26,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":265,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":45,"org.easymock.tests2.UsageStrictMockTest.range":306,"org.easymock.tests2.UsageConstraintsTest.lessThan":272,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":291,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":367,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":92,"org.easymock.tests2.CaptureTest.testCaptureRightOne":322,"org.easymock.tests2.UsageConstraintsTest.testOr":253,"org.easymock.tests.UsageRangeTest.combination":156,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":57,"org.easymock.tests.UsageTest.wrongArguments":113,"org.easymock.tests2.MockBuilderTest.testWithConstructor":328,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":89,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":32,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":180,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":188,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":360,"org.easymock.tests.UsageVarargTest.varargShortAccepted":144,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":28,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":389,"org.easymock.tests2.UsageConstraintsTest.cmpTo":257,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":349,"org.easymock.tests2.CompareToTest.testLessThan":346,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":362,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":238,"org.easymock.tests2.CaptureTest.testCaptureFromStub":343,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":404,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":46,"org.easymock.tests.UsageTest.unexpectedCallWithArray":344,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":205,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":151,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":331,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":189,"org.easymock.tests2.CaptureTest.testCapture":342,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":207,"org.easymock.tests2.UsageConstraintsTest.constraints":248,"org.easymock.samples.ExampleTest.addAndChangeDocument":228,"org.easymock.tests.UsageStrictMockTest.testVerify":358,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":220,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":204,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":394,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":318,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":217,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":181,"org.easymock.tests.LimitationsTest.abstractClass":19,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":162,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":218,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":140,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":296}}]

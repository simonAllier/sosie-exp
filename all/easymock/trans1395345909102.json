[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"failures":[0,1],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"qualifier"}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:361","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:32","sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:105","sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[25,26,27,28],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (int)","type":"CtReturnImpl"},"failures":[29,3,30,31,32,33,34,35,36,37,38,39,16,40,41,42,43,44,45,46],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[47],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","sourceCode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )","type":"CtDoImpl"},"failures":[48,49,50,51,52],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"leafClass"}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:127","sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","type":"CtTryImpl"},"failures":[53,54],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:81","sourceCode":"java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[48,49,50,51,52],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[55],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[56,57],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[55],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:120","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"type","type":"type"}},{"transplant":{"position":"org.easymock.internal.Invocation:183","sourceCode":"final java.lang.SecurityException java.lang.SecurityException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:95","sourceCode":"return java.lang.StringBuilder.toString()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[58],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[59,60],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:213","sourceCode":"return true","type":"CtReturnImpl"},"failures":[48,52],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"this.org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[61,62],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","answer":"answer"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ObjectMethodsFilter:98","failures":[63,29,64,2,3,65,66,67,5,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,30,31,57,88,32,33,89,90,91,92,93,94,95,96,34,35,36,37,97,98,38,39,99,15,16,100,17,18,40,41,25,26,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,42,120,43,44,45,121,122,123,46,27,28,124,125],"status":-1,"binaryOperator":"(java.lang.String) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:102","sourceCode":"if (!boolean) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove();\n    throw new java.lang.IllegalStateException(java.lang.String);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"message","key":"message"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:110","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[126,127],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:225","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[128,72,79,129],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:52","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:57","sourceCode":"try {\n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.IMocksBehavior.addActual(org.easymock.internal.Invocation);\n    try {\n        return org.easymock.internal.Result.answer();\n    } catch (final java.lang.Throwable java.lang.Throwable) {\n        if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n            throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n        } \n        throw java.lang.Throwable;\n    }\n} finally {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation();\n}","type":"CtTryImpl"},"failures":[130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,63,151,29,64,2,3,65,152,153,154,155,66,156,4,5,55,6,157,7,8,158,159,160,161,9,162,163,10,68,164,11,47,165,166,167,168,169,12,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,69,190,191,192,193,128,194,70,195,196,71,197,198,199,200,201,202,203,73,204,74,205,75,76,206,77,78,207,208,209,79,80,210,129,82,83,84,85,86,87,211,30,31,57,88,13,14,212,32,33,89,90,213,214,215,216,91,217,93,94,218,219,95,96,220,221,222,223,224,225,226,227,228,229,230,97,231,232,233,234,235,236,49,50,237,238,239,240,241,98,242,38,39,99,15,16,100,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,17,269,270,18,40,41,271,272,273,274,275,276,277,20,278,111,112,279,280,113,114,115,119,42,120,43,21,22,44,45,121,281,282,283,284,285,122,286,287,288,289,290,291,292,293,294,295,296,297,298,60,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,46,328,329,330,331,332,333,334,335,126,127,336,125],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:204","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[58],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"failures":[140,189,190,191,193,197,201,80,210,82,83,85,217,93,94,218,219,95,96,223,224,225,226,228,273,274,275,278,292],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:228","sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"failures":[131,140,148,150,29,2,3,156,4,5,55,6,157,7,8,158,159,160,9,162,163,10,68,164,11,47,165,166,168,169,12,170,172,174,175,178,179,180,181,184,187,188,192,196,198,199,203,73,204,75,76,78,208,210,211,30,57,13,14,89,228,230,97,232,39,15,16,243,244,247,249,250,251,252,254,255,256,257,259,260,261,262,267,17,337,269,270,18,40,271,277,20,119,42,21,22,291,292,293,294,295,297,298,300,301,302,308,309,312,314,315,316,317,319,320,321,322,324,325,326,327,328,331,332,333,334,335],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:39","sourceCode":"return int <= 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"failures":[5,159,163,170,338],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":55,"org.easymock.tests2.UsageTest.argumentsOrdered":33,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":119,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":207,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":266,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":92,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":88,"org.easymock.tests2.StubTest.stubWithReturnValue":232,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":252,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":141,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":168,"org.easymock.tests2.SerializationTest.testAllMockedMethod":222,"org.easymock.tests2.DelegateToTest.testReturnException":227,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":264,"org.easymock.tests.MockingTest.testPartialClassMocking":273,"org.easymock.samples.SupportTest.voteForRemovals":143,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":48,"org.easymock.tests.MockClassControlTest.testToString":116,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":1,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":320,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":72,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":308,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":224,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":61,"org.easymock.tests.UsageExpectAndThrowTest.object":318,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":147,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":165,"org.easymock.tests2.DelegateToTest.testWrongClass":229,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":301,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":302,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":159,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":297,"org.easymock.tests2.UsageTest.wrongArguments":31,"org.easymock.tests.UsageStrictMockTest.range":15,"org.easymock.samples.ConstructorCalledMockTest.testTax":137,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":235,"org.easymock.samples.ExampleTest.answerVsDelegate":131,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":206,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":217,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":107,"org.easymock.tests2.UsageConstraintsTest.testNull":157,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":319,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":191,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":82,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":78,"org.easymock.tests2.CaptureTest.testPrimitive":174,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":300,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":327,"org.easymock.tests.UsageTest.moreThanOneArgument":42,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":44,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":234,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":190,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":239,"org.easymock.tests2.CaptureTest.testCaptureNone":179,"org.easymock.tests.UsageUnorderedTest.message":46,"org.easymock.tests.UsageVerifyTest.twoReturns":41,"org.easymock.tests.UsageVarargTest.varargByteAccepted":288,"org.easymock.tests2.ThreadingTest.testThreadSafe":198,"org.easymock.tests.UsageTest.argumentsOrdered":45,"org.easymock.tests.UsageVarargTest.varargIntAccepted":283,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":280,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":102,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":144,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":291,"org.easymock.tests2.CaptureTest.testCapture_2617107":173,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":79,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":299,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":129,"org.easymock.tests2.UsageConstraintsTest.any":160,"org.easymock.tests2.StubTest.stub":231,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":295,"org.easymock.tests.UsageExpectAndThrowTest.longType":311,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":265,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":64,"org.easymock.tests2.SerializationTest.testClass":220,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":91,"org.easymock.tests.LimitationsTest.mockNativeMethod":278,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":66,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":262,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":51,"org.easymock.tests2.AnswerTest.answer":185,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":155,"org.easymock.tests2.CaptureTest.testAnd":171,"org.easymock.tests2.UsageTest.strictResetToDefault":211,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":70,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":65,"org.easymock.tests2.NameTest.nameForMocksControl":37,"org.easymock.tests2.MockedExceptionTest.testMockedException":214,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":238,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":269,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":205,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":22,"org.easymock.tests2.DelegateToTest.testDelegate":230,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":312,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":275,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":149,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":189,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":83,"org.easymock.tests.MockingTest.testNicePartialClassMocking":274,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":323,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":193,"org.easymock.tests2.CaptureTest.testCaptureLast":178,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":267,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":26,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":96,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":158,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":307,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":166,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":25,"org.easymock.tests2.CaptureTest.testCapture1_2446744":175,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":243,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":321,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":316,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":153,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":32,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":12,"org.easymock.tests.UsageThrowableTest.throwError":328,"org.easymock.tests.UsageStrictMockTest.differentMethods":16,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":106,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":54,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":200,"org.easymock.tests2.MockBuilderTest.testCreateMockString":86,"org.easymock.tests.UsageExpectAndThrowTest.floatType":310,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":241,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":68,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":186,"org.easymock.tests.UsageVerifyTest.twoThrows":40,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":27,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":225,"org.easymock.samples.PartialClassMockTest.testGetArea":140,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":292,"org.easymock.samples.ExampleTest.voteAgainstRemoval":133,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":196,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":309,"org.easymock.tests2.UsageTest.niceToStrict":57,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":103,"org.easymock.tests2.UsageConstraintsTest.testNotNull":169,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":335,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":213,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":210,"org.easymock.tests2.UsageTest.defaultResetToNice":212,"org.easymock.tests2.MockBuilderTest.testCreateMock":84,"org.easymock.samples.ExampleTest.voteAgainstRemovals":130,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":258,"org.easymock.tests.UsageVarargTest.differentLength":122,"org.easymock.tests2.CallbackTest.callback":97,"org.easymock.tests.UsageTest.openCallCountByLastCall":21,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":317,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":75,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":156,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":110,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":233,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":60,"org.easymock.tests.UsageCallCountTest.tooFewCalls":112,"org.easymock.tests.UsageOverloadedMethodTest.overloading":277,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":336,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":163,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":276,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":254,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":218,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":162,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":180,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":236,"org.easymock.tests.UsageThrowableTest.throwCheckedException":332,"org.easymock.tests2.EasyMockSupportClassTest.testAll":223,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":50,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":325,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":305,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":154,"org.easymock.tests2.CaptureTest.testCaptureAll":172,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":272,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":95,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":94,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":67,"org.easymock.tests.MockNameTest.defaultName":123,"org.easymock.tests2.UsageConstraintsTest.testMatches":10,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":219,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":188,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":240,"org.easymock.tests2.CompareToTest.testGreateOrEqual":338,"org.easymock.samples.ExampleTest.voteForRemovals":135,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":202,"org.easymock.tests2.NameTest.nameForNiceMock":36,"org.easymock.tests.UsageVarargTest.allKinds":290,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":18,"org.easymock.tests2.DependencyTest.testInterfaceMocking":146,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":306,"org.easymock.samples.BasicClassMockTest.testPrintContent":145,"org.easymock.samples.ExampleTest.addDocument":134,"org.easymock.tests2.DelegateToTest.testStubDelegate":228,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":334,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":63,"org.easymock.tests2.AnswerTest.stubAnswer":187,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":268,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":39,"org.easymock.tests2.UsageConstraintsTest.greaterThan":164,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":337,"org.easymock.tests.UsageVarargTest.varargLongAccepted":287,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":71,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":100,"org.easymock.samples.ExampleTest.voteForRemoval":132,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":199,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":261,"org.easymock.tests.UsageExpectAndReturnTest.floatType":245,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":58,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":108,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":197,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":128,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":138,"org.easymock.tests.UsageThrowableTest.noUpperLimit":329,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":11,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":28,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":296,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":87,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":4,"org.easymock.tests2.SerializationTest.test":221,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":176,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":59,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":204,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":330,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":244,"org.easymock.tests2.UsageConstraintsTest.testSame":7,"org.easymock.samples.SupportTest.addDocument":142,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":263,"org.easymock.tests2.CaptureTest.testCaptureFirst":184,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":62,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":74,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":90,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":125,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":250,"org.easymock.tests.GenericTest.testPackageScope":49,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":201,"org.easymock.tests2.UsageTest.moreThanOneArgument":30,"org.easymock.tests2.CaptureTest.testCapture2_2446744":183,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":85,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":289,"org.easymock.tests.GenericTest.testBridgedEquals":52,"org.easymock.tests2.NameTest.nameForMock":34,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":114,"org.easymock.tests.UsageExpectAndReturnTest.longType":246,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":303,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":203,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":326,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":255,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":167,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":324,"org.easymock.tests2.UsageStrictMockTest.differentMethods":3,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":237,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":56,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":247,"org.easymock.tests.UsageCallCountTest.tooManyCalls":115,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":322,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":270,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":111,"org.easymock.tests2.MockedExceptionTest.testRealException":216,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":251,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":109,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":313,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":29,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":333,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":298,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":93,"org.easymock.tests2.UsageConstraintsTest.testContains":9,"org.easymock.tests2.NameTest.nameForStrictMock":35,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":215,"org.easymock.tests2.UsageConstraintsTest.testFind":6,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":20,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":148,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":192,"org.easymock.tests.MockTypeTest.fromEasyMockClass":105,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":98,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":150,"org.easymock.tests.UsageExpectAndReturnTest.object":253,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":47,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":194,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":80,"org.easymock.tests2.UsageStrictMockTest.range":2,"org.easymock.tests2.UsageConstraintsTest.lessThan":170,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":77,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":285,"org.easymock.tests.UsageTest.exactCallCountByLastCall":121,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":271,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":73,"org.easymock.tests2.CaptureTest.testCaptureRightOne":181,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":53,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":23,"org.easymock.tests2.UsageConstraintsTest.testOr":8,"org.easymock.tests.UsageRangeTest.combination":17,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":281,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":259,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":69,"org.easymock.tests.UsageTest.wrongArguments":43,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":127,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":248,"org.easymock.tests2.EasyMockSupportTest.testVerify":209,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":256,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":19,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":24,"org.easymock.tests.UsageVarargTest.varargShortAccepted":286,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":126,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":113,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":152,"org.easymock.tests2.UsageConstraintsTest.cmpTo":161,"org.easymock.tests.UsageVarargTest.varargCharAccepted":284,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":151,"org.easymock.tests2.UsageTest.openCallCountByLastCall":13,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":14,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":208,"org.easymock.tests2.CaptureTest.testCaptureFromStub":182,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":81,"org.easymock.tests.UsageTest.unexpectedCallWithArray":120,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":101,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":315,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":331,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":38,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":279,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":0,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":257,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":195,"org.easymock.tests2.UsageConstraintsTest.constraints":5,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":99,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":118,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":314,"org.easymock.samples.ExampleTest.addAndChangeDocument":136,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":260,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":139,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":242,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":226,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":117,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":304,"org.easymock.tests2.UsageTest.resumeIfFailure":89,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":177,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":293,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":249,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":104,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":294,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":124,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":282,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":76}}]

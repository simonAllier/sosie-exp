[{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:760","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockStatement:42","sourceCode":"org.easymock.EasyMockSupport.org.easymock.EasyMockSupport.injectMocks(java.lang.Object)","type":"CtInvocationImpl"},"failures":[4,5,6,7],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"this.org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"position":"org.easymock.ConstructorArgs:50","failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,13,48,49,50,51,52,53,54,55,56,16,57,58,19,20],"status":-1,"binaryOperator":"(java.lang.Object[].int) != (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:60","failures":[48,49,50,51,52,54,55,56,57,58,20],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1964","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[8],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1789","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","type":"CtInvocationImpl"},"failures":[59],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"regex","key":"regex"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"failures":[60,61],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockMethodInterceptor:130","sourceCode":"java.io.ObjectOutputStream.writeObject(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:121","sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","type":"CtInvocationImpl"},"failures":[13,62,63],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stream":"stream"}},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:275","sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1421","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1191","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[110,111,112,113,114,115,116,117,118,119,120,4,21,21,22,22,121,122,5,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,123,124,125,126,127,128,8,129,130,9,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,84,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,85,193,86,87,88,89,90,91,194,195,196,197,198,199,92,200,201,202,203,93,204,205,206,207,94,208,209,210,95,96,97,98,99,100,211,212,213,101,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,0,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,102,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,10,330,331,332,11,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,23,26,28,29,31,32,35,36,37,38,39,41,44,45,46,47,354,103,104,105,106,355,1,356,357,2,3,13,62,63,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,6,373,374,375,376,377,378,48,379,380,381,382,383,384,385,386,387,388,389,390,14,391,392,16,17,393,394,395,396,107,397,398,399,400,401,402,108,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,109,422,423,424,425,426,7,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,59,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,19,20],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"delegateTo"}},{"position":"org.easymock.ConstructorArgs:77","failures":[465],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1235","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[110,111,112,113,114,116,120,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,156,157,158,161,162,85,86,87,88,89,90,91,194,195,197,198,199,92,200,93,204,206,207,94,208,209,210,215,217,219,220,221,222,223,224,229,230,232,269,102,293,294,295,296,297,313,314,317,322,324,325,327,335,336,337,338,339,340,341,344,345,349,351,352,353,29,39,45,354,105,355,357,2,3,13,62,358,360,466,361,362,467,365,366,6,468,469,48,379,380,381,49,384,385,386,388,14,392,470,471,107,397,398,399,400,401,402,108,404,405,407,408,410,411,412,413,414,419,420,109,7,433,434,435,436,438,439,440,441,442,443,445,446,447,448,449,59,450,451,452,453,454,455,457,458,459,460,462,464,19],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:48","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.specification.version\")","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[167,171],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:185","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"position":"org.easymock.internal.LastControl:48","failures":[],"status":0,"binaryOperator":"org.easymock.internal.MocksControl != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Same:42","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:49","sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","type":"CtInvocationImpl"},"failures":[472,473,474,475,476],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:140","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"position":"org.easymock.EasyMock:1319","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"this.org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[64,65,68,70,71,72,73,75,76,77,78,80,81,82,83,197,92,93,94,99,239,102,107,108,109],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"throwable":"throwable","state":"state"}},{"position":"org.easymock.internal.matchers.Same:37","failures":[440],"status":-1,"binaryOperator":"(java.lang.Object) == java.lang.Object","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[110,111,112,113,114,115,116,117,118,119,120,4,21,22,121,122,5,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,123,124,125,126,127,128,8,129,130,9,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,84,159,160,161,162,163,164,165,477,166,167,168,169,170,171,478,172,479,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,85,193,86,87,88,89,90,91,194,195,196,197,198,199,92,200,480,481,482,201,483,202,484,203,93,204,205,206,207,94,208,209,210,95,96,97,98,99,100,211,212,213,101,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,0,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,102,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,485,329,10,330,331,332,11,333,334,12,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,354,103,104,105,106,355,1,356,357,2,3,13,62,63,358,359,360,466,361,362,486,363,467,364,365,366,367,368,369,370,371,372,6,373,374,375,376,377,378,468,469,48,379,487,380,381,49,50,382,488,489,490,491,383,384,385,386,387,388,492,54,389,493,55,390,14,391,392,56,470,15,16,17,471,58,18,393,494,495,496,394,395,396,107,397,398,399,400,401,402,108,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,497,498,419,420,421,109,422,423,424,425,426,7,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,59,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,19,20,499],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[111,112,113,114,115,116,118,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,129,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,84,165,173,174,175,176,177,178,179,180,181,186,85,193,86,87,88,89,90,91,194,195,196,197,198,199,92,200,93,204,205,206,207,94,208,209,210,95,96,97,98,99,100,215,217,218,219,220,221,222,223,224,225,229,230,232,259,260,261,262,263,264,269,102,270,271,272,273,274,285,293,294,295,296,297,301,302,303,305,306,308,309,310,311,312,313,314,317,320,322,323,324,325,326,327,329,331,11,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,103,104,105,106,355,357,2,3,13,62,63,469,48,381,49,488,489,490,491,384,385,386,388,492,14,391,471,18,107,397,398,399,400,401,402,108,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,421,109,433,434,435,436,438,439,440,441,442,443,445,446,447,448,449,59,450,451,452,453,454,455,457,458,459,460,461,462,464,19],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:219","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[12,18],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1802","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[459],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:176","sourceCode":"return false","type":"CtReturnImpl"},"failures":[500,501,502,503,504,505,506,19],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[335,337,338,339,340,341,342,344,61,345,346,348],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[335,337,345,435,436,439,441,442,444,453,458],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[199,92,200,204,220,223,224,259,261,262,488,489,490,491,398,410,413,414],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:352","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[65,71,77,81,83,133,135,141,147,151,153,93,253,339,347],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:117","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Invocation:212","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[453],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":436,"org.easymock.tests2.UsageTest.argumentsOrdered":405,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":93,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":365,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":245,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":401,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":5,"org.easymock.tests2.DelegateToTest.testReturnException":384,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":96,"org.easymock.tests.MockingTest.testPartialClassMocking":229,"org.easymock.tests.MockClassControlTest.testToString":187,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":382,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":127,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":12,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":254,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":33,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":29,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":64,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":420,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":501,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":443,"org.easymock.tests2.UsageTest.wrongArguments":399,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":194,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":378,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":175,"org.easymock.samples.ExampleTest.answerVsDelegate":112,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":202,"org.easymock.tests2.UsageConstraintsTest.testNull":439,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":234,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":325,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":192,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":364,"org.easymock.tests2.CaptureTest.testPrimitive":338,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":198,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":83,"org.easymock.tests.UsageTest.moreThanOneArgument":204,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":324,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":272,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":160,"org.easymock.tests.UsageTest.argumentsOrdered":209,"org.easymock.tests.UsageVarargTest.varargIntAccepted":303,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":250,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":293,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":505,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":492,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":495,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":431,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":391,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":238,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":297,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":6,"org.easymock.tests.ReplayStateInvalidUsageTest.times":289,"org.easymock.tests2.DependencyTest.testClassMocking":497,"org.easymock.tests2.AnswerTest.answer":355,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":444,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":252,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":418,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":482,"org.easymock.tests2.CaptureTest.testAnd":335,"org.easymock.tests2.UsageTest.strictResetToDefault":397,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":55,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":331,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":271,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":156,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":361,"org.easymock.tests2.DelegateToTest.testDelegate":388,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":164,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":79,"org.easymock.tests.LimitationsTest.mockFinalMethod":318,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":99,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":181,"org.easymock.tests2.DependencyTest.testClassMockingSupport":498,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":319,"org.easymock.tests2.CaptureTest.testCapture1_2446744":339,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":485,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":77,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":416,"org.easymock.tests.UsageThrowableTest.throwError":85,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":283,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":483,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":479,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":432,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":274,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":47,"org.easymock.samples.PartialClassMockTest.testGetArea":110,"org.easymock.tests.MockingTest.testInterfaceMocking":231,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":284,"org.easymock.tests2.CompareToTest.testLessOrEqual":476,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":294,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":124,"org.easymock.tests2.UsageTest.niceToStrict":400,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":34,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":65,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":280,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":465,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":236,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":14,"org.easymock.tests2.MockBuilderTest.testCreateMock":17,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":42,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":375,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":73,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":362,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":481,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":300,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":259,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":173,"org.easymock.tests.UsageOverloadedMethodTest.overloading":269,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":44,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":38,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":449,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":101,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":145,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":268,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":448,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":344,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":304,"org.easymock.tests.MockClassControlTest.testEquals":191,"org.easymock.tests2.EasyMockSupportClassTest.testAll":26,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":130,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":81,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":417,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":179,"org.easymock.tests2.CaptureTest.testCaptureAll":336,"org.easymock.tests.MockNameTest.defaultName":132,"org.easymock.tests2.UsageConstraintsTest.testMatches":59,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":273,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":281,"org.easymock.samples.ExampleTest.voteForRemovals":116,"org.easymock.tests.UsageVarargTest.allKinds":312,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":199,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":180,"org.easymock.samples.BasicClassMockTest.testPrintContent":122,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":90,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":408,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":428,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":387,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":100,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":506,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":478,"org.easymock.tests2.UsageConstraintsTest.greaterThan":451,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":27,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":155,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":333,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":172,"org.easymock.samples.ExampleTest.voteForRemoval":113,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":334,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":350,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":484,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":496,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":328,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":165,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":107,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":16,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":242,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":360,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":24,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":95,"org.easymock.tests2.CaptureTest.testCaptureFirst":348,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":383,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":0,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":466,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":407,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":216,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":141,"org.easymock.tests2.UsageTest.moreThanOneArgument":398,"org.easymock.tests2.CaptureTest.testCapture2_2446744":347,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":352,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":471,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":253,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":311,"org.easymock.tests.GenericTest.testBridgedEquals":131,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":266,"org.easymock.tests.UsageExpectAndReturnTest.longType":137,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":177,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":358,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":82,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":456,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":159,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":80,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":183,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":270,"org.easymock.tests.UsageCallCountTest.tooManyCalls":267,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":261,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":43,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":142,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":377,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":69,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":89,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":469,"org.easymock.tests.MockingTest.testNiceClassMocking":235,"org.easymock.tests.MockingTest.testClassMocking":227,"org.easymock.tests2.UsageConstraintsTest.testContains":447,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":260,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":105,"org.easymock.tests2.UsageConstraintsTest.testFind":438,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":102,"org.easymock.tests.MockTypeTest.fromEasyMockClass":201,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":464,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":217,"org.easymock.tests.UsageExpectAndReturnTest.object":144,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":329,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":376,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":467,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":502,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":306,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":278,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":53,"org.easymock.tests.UsageTest.exactCallCountByLastCall":210,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":158,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":241,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":161,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":126,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":20,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":150,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":301,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":213,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":423,"org.easymock.tests.MockClassControlTest.testHashCode":190,"org.easymock.tests2.EasyMockSupportTest.testVerify":367,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":36,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":162,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":211,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":299,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":415,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":461,"org.easymock.tests.UsageVarargTest.varargCharAccepted":305,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":477,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":409,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":258,"org.easymock.tests2.UsageTest.openCallCountByLastCall":402,"org.easymock.tests.DefaultClassInstantiatorTest.object":166,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":366,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":298,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":276,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":37,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":71,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":87,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":371,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":422,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":189,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":332,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":70,"org.easymock.tests.CapturesMatcherTest.test":60,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":151,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":182,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":188,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":45,"org.easymock.tests2.UsageTest.resumeIfFailure":406,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":480,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":494,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":98,"org.easymock.tests2.StubTest.stubWithReturnValue":109,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":56,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":457,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":143,"org.easymock.tests2.SerializationTest.testAllMockedMethod":63,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":251,"org.easymock.samples.SupportTest.voteForRemovals":120,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":8,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":425,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":76,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":257,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":1,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":128,"org.easymock.tests.UsageExpectAndThrowTest.object":74,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":454,"org.easymock.tests2.DelegateToTest.testWrongClass":386,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":313,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":314,"org.easymock.samples.ConstructorCalledMockTest.testTax":21,"org.easymock.tests.UsageStrictMockTest.range":222,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":395,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":363,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":468,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":75,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":392,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":23,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":208,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":291,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":174,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":125,"org.easymock.tests2.CaptureTest.testCaptureNone":343,"org.easymock.tests.UsageUnorderedTest.message":133,"org.easymock.tests.UsageVerifyTest.twoReturns":200,"org.easymock.tests.UsageVarargTest.varargByteAccepted":310,"org.easymock.tests2.ThreadingTest.testThreadSafe":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":40,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":264,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":121,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":279,"org.easymock.tests2.CaptureTest.testCapture_2617107":337,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":321,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":197,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":255,"org.easymock.tests2.UsageConstraintsTest.any":445,"org.easymock.tests2.StubTest.stub":421,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":288,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":184,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":97,"org.easymock.tests.UsageExpectAndThrowTest.longType":67,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":256,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":170,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":287,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":411,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":7,"org.easymock.tests2.SerializationTest.testClass":13,"org.easymock.tests.LimitationsTest.mockNativeMethod":317,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":153,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":9,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":370,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":414,"org.easymock.tests2.NameTest.nameForMocksControl":491,"org.easymock.tests2.MockedExceptionTest.testMockedException":104,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":372,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":28,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":94,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":463,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":68,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":232,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":322,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":470,"org.easymock.tests.MockingTest.testNicePartialClassMocking":230,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":327,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":500,"org.easymock.tests2.CompareToTest.testCompareEqual":474,"org.easymock.tests2.CaptureTest.testCaptureLast":342,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":368,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":320,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":442,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":49,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":455,"org.easymock.tests.MockingTest.testTwoMocks":228,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":50,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":134,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":72,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":404,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":459,"org.easymock.samples.ExampleTest.removeNonExistingDocument":117,"org.easymock.tests.UsageStrictMockTest.differentMethods":223,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":285,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":374,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":424,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":168,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":351,"org.easymock.tests2.MockBuilderTest.testCreateMockString":18,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":30,"org.easymock.tests.UsageExpectAndThrowTest.floatType":66,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":450,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":25,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":357,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":499,"org.easymock.tests.UsageVerifyTest.twoThrows":92,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":39,"org.easymock.samples.ExampleTest.voteAgainstRemoval":114,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":123,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":246,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":11,"org.easymock.tests.LimitationsTest.privateConstructor":316,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":52,"org.easymock.tests2.UsageConstraintsTest.testNotNull":458,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":103,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":91,"org.easymock.tests2.UsageTest.defaultResetToNice":403,"org.easymock.samples.ExampleTest.voteAgainstRemovals":111,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":247,"org.easymock.tests.UsageVarargTest.differentLength":307,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":369,"org.easymock.tests2.CallbackTest.callback":354,"org.easymock.tests2.UsageConstraintsTest.equals":437,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":10,"org.easymock.tests.UsageTest.openCallCountByLastCall":207,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":433,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":196,"org.easymock.tests.UsageCallCountTest.tooFewCalls":262,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":379,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":176,"org.easymock.tests.UsageThrowableTest.throwCheckedException":88,"org.easymock.tests.MockingTest.testStrictClassMocking":226,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":84,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":381,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":48,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":373,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":290,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":380,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":3,"org.easymock.tests2.CompareToTest.testGreateOrEqual":475,"org.easymock.tests.ObjectMethodsTest.testHashCode":277,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":504,"org.easymock.tests2.NameTest.nameForNiceMock":490,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":353,"org.easymock.tests2.DependencyTest.testInterfaceMocking":419,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":503,"org.easymock.samples.ExampleTest.addDocument":115,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":41,"org.easymock.tests2.DelegateToTest.testStubDelegate":385,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":46,"org.easymock.tests2.AnswerTest.stubAnswer":2,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":220,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":15,"org.easymock.tests.UsageVarargTest.varargLongAccepted":309,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":224,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":244,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":152,"org.easymock.tests.UsageExpectAndReturnTest.floatType":136,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":19,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":22,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":452,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":430,"org.easymock.tests.UsageThrowableTest.noUpperLimit":193,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":214,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":434,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":393,"org.easymock.tests2.SerializationTest.test":62,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":340,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":167,"org.easymock.tests2.UsageConstraintsTest.testSame":440,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":135,"org.easymock.samples.SupportTest.addDocument":119,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":487,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":31,"org.easymock.tests.GenericTest.testPackageScope":129,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":163,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":240,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":429,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":233,"org.easymock.tests2.NameTest.nameForMock":488,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":146,"org.easymock.tests2.UsageStrictMockTest.differentMethods":413,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":58,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":330,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":138,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":78,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":275,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":157,"org.easymock.tests2.MockedExceptionTest.testRealException":106,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":203,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":396,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":249,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":410,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":248,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":195,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":292,"org.easymock.tests2.NameTest.nameForStrictMock":489,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":390,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":462,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":326,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":394,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":453,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":169,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":389,"org.easymock.tests2.UsageStrictMockTest.range":412,"org.easymock.tests2.UsageConstraintsTest.lessThan":460,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":426,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":243,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":35,"org.easymock.tests2.CaptureTest.testCaptureRightOne":345,"org.easymock.tests2.UsageConstraintsTest.testOr":441,"org.easymock.tests.UsageRangeTest.combination":154,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":323,"org.easymock.tests.UsageTest.wrongArguments":206,"org.easymock.tests2.MockBuilderTest.testWithConstructor":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":32,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":186,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":139,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":147,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":237,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":171,"org.easymock.tests.UsageVarargTest.varargShortAccepted":308,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":265,"org.easymock.tests2.UsageConstraintsTest.cmpTo":446,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":356,"org.easymock.tests2.CompareToTest.testLessThan":472,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":239,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":108,"org.easymock.tests2.CaptureTest.testCaptureFromStub":346,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":282,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":493,"org.easymock.tests.UsageTest.unexpectedCallWithArray":205,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":219,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":263,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":57,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":148,"org.easymock.tests2.CaptureTest.testCapture":61,"org.easymock.tests2.UsageConstraintsTest.constraints":435,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":221,"org.easymock.samples.ExampleTest.addAndChangeDocument":118,"org.easymock.tests.UsageStrictMockTest.testVerify":225,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":4,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":218,"org.easymock.tests2.CompareToTest.testGreateThan":473,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":178,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":341,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":295,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":140,"org.easymock.tests.LimitationsTest.abstractClass":315,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":215,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":296,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":486,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":302}}]

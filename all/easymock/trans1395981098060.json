[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.MocksControl","position":"org.easymock.internal.MockInvocationHandler:52","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock)","position":"org.easymock.internal.Injector:112","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","position":"org.easymock.internal.ObjectMethodsFilter:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","position":"org.easymock.internal.MocksControl:385","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:112","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:252","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","position":"org.easymock.internal.ClassProxyFactory:217","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.UnorderedBehavior:62","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","position":"org.easymock.internal.MocksControl:146","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.AndroidSupport.org.easymock.internal.AndroidSupport.isAndroid()) {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.AndroidClassProxyFactory();\n} ","position":"org.easymock.internal.MocksControl:141","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(java.lang.Object[], 0, java.lang.Object[], int, int)","position":"org.easymock.internal.Invocation:64","type":"CtInvocationImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"int--","position":"org.easymock.internal.MocksBehavior:115","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int <= int ; int++) {\n    final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).getMessages(org.easymock.internal.Invocation);\n    java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>);\n    for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : java.util.List<org.easymock.internal.ErrorMessage>) {\n        if (org.easymock.internal.ErrorMessage.isMatching()) {\n            int++;\n        } \n    }\n}","position":"org.easymock.internal.MocksBehavior:127","type":"CtForImpl"},"status":-1},{"failures":[],"variableMapping":{"arg":"value"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:293","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","position":"org.easymock.internal.MocksControl:183","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.Injection:50","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","position":"org.easymock.internal.Results:40","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","position":"org.easymock.internal.MocksControl:285","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Double>(double))","position":"org.easymock.EasyMock:733","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.Injector:75","type":"CtLocalVariableImpl"},"status":-2},{"failures":[14],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1204","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","position":"org.easymock.internal.ObjectMethodsFilter:45","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getMockedType(java.lang.Object)","position":"org.easymock.internal.Invocation:157","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","position":"org.easymock.internal.LastControl:104","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:364","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","position":"org.easymock.internal.RecordState:281","type":"CtThrowImpl"},"status":-2},{"failures":[3,15],"variableMapping":{"buffer":"buffer"},"name":"add","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","position":"org.easymock.internal.ArgumentToString:39","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(org.easymock.internal.matchers.Equals.getExpected(), java.lang.StringBuffer)","position":"org.easymock.internal.matchers.ArrayEquals:61","type":"CtInvocationImpl"},"status":-1},{"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,0,63,64,1,2,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,3,159,160,4,5,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,6,7,228,229,230,231,232,233,234,235,236,237,238,239,8,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,9,331,332,333,334,335,10,11,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,12,13,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,14,499,500,501,502,503,504,505,506,507,508],"variableMapping":{"in":"in"},"name":"add","transplant":{"sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","position":"org.easymock.internal.EasyMockProperties:69","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","position":"org.easymock.internal.EasyMockProperties:62","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.set(java.lang.Object, java.lang.Object)","position":"org.easymock.internal.Injector:131","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan)","position":"org.easymock.internal.Injector:82","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Type instanceof java.lang.Class<?> ? ((java.lang.Class<?>)(java.lang.reflect.Type)) : null","position":"org.easymock.internal.BridgeMethodResolver:362","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Fail to instantiate mock for \" + java.lang.Class<T>)","name":"removeConditional","position":"org.easymock.internal.ClassProxyFactory:230","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"))","position":"org.easymock.internal.DefaultClassInstantiator:183","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:251","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.get(java.lang.Class<?>)","position":"org.easymock.internal.RecordState:229","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","position":"org.easymock.internal.RecordState:340","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new java.lang.Class[]{ java.lang.Class<?> }","position":"org.easymock.internal.BridgeMethodResolver:378","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","position":"org.easymock.ConstructorArgs:57","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:155","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ","position":"org.easymock.internal.MocksBehavior:194","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(char[]))","position":"org.easymock.EasyMock:1607","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MockInvocationHandler:41","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:54","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.MethodSerializationWrapper:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object[][((java.lang.Object[].int) - 1)]) == null) {\n    return java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:56","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.UnorderedBehavior:103","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.easymock.internal.MocksBehavior:156","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:210","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.ExpectedInvocationAndResult>()","position":"org.easymock.internal.MocksBehavior:33","type":"CtNewClassImpl"},"status":-2},{"failures":[17,17,18,18,41,42,45,58,85,147,148,149,150,151,152,153,154,155,156,159,240,241,299,300,304,305,306,307,313,315,316,318,319,325,326,327,369,399],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.RecordState.closeMethod()","position":"org.easymock.internal.RecordState:76","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","position":"org.easymock.internal.RecordState:133","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int))","position":"org.easymock.ConstructorArgs:61","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:317","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","position":"org.easymock.internal.MockBuilder:236","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String","position":"org.easymock.LogicalOperator:62","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<org.easymock.internal.UnorderedBehavior>.isEmpty()) || (!(org.easymock.internal.MocksBehavior.lastBehaviorList().allowsExpectedInvocation(org.easymock.internal.ExpectedInvocation, boolean)))) {\n    java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean));\n} ","position":"org.easymock.internal.MocksBehavior:74","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","position":"org.easymock.internal.MocksControl:390","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.RecordState:324","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<T>.add(T)","position":"org.easymock.Capture:109","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.io.DataOutputStream java.io.DataOutputStream = new java.io.DataOutputStream(java.io.ByteArrayOutputStream)","position":"org.easymock.internal.DefaultClassInstantiator:135","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName()))) && (java.lang.StackTraceElement[][2].getMethodName().equals(\"invoke\"))","position":"org.easymock.internal.ClassProxyFactory:157","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:269","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"cstr":"cstr"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","position":"org.easymock.internal.ClassProxyFactory:205","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","position":"org.easymock.internal.ClassProxyFactory:207","type":"CtAssignmentImpl"},"status":0},{"failures":[16,19,20,21,22,23,24,25,26,27,29,30,31,32,33,35,36,38,40,41,42,43,44,45,58,60,61,0,63,64,1,2,65,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,116,117,119,120,121,122,123,124,125,126,127,128,129,133,134,136,147,148,149,150,151,157,158,3,159,160,4,5,161,162,194,195,223,224,225,226,227,6,7,231,233,234,235,236,238,239,8,240,241,242,243,244,245,246,247,248,249,252,255,256,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,299,300,301,302,304,305,306,307,308,309,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,9,331,332,333,334,335,10,11,336,337,343,352,358,360,362,363,364,366,367,368,369,370,12,13,371,372,373,374,375,381,388,389,390,391,392,393,394,395,396,397,398,400,401,402,404,405,406,407,408,411,412,413,414,415,416,417,419,420,421,425,426,428,431,433,434,438,440,441,442,443,444,445,448,452,453,454,460,463,473,479,482,483,484,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1458","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:185","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:81","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","position":"org.easymock.Capture:79","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","position":"org.easymock.ConstructorArgs:57","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Long>(long))","position":"org.easymock.EasyMock:1051","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes())","position":"org.easymock.internal.DefaultClassInstantiator:53","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"Delegated to \" + java.lang.Object","position":"org.easymock.internal.Result:95","type":"CtReturnImpl"},"status":-2},{"failures":[302,307],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1458","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1304","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.Injector:129","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.ObjectMethodsFilter:107","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","position":"org.easymock.internal.RecordState:106","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","position":"org.easymock.internal.RecordState:86","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","position":"org.easymock.EasyMock:2039","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n    java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n} else {\n    java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n}","position":"org.easymock.internal.Injector:123","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-7104607303959381785L","position":"org.easymock.internal.matchers.Find:28","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.IArgumentMatcher.matches(java.lang.Object)) {\n    return true;\n} ","position":"org.easymock.internal.matchers.Or:39","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.internal.MocksControl.MockType(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.internal.MocksControl:48","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","position":"org.easymock.internal.DefaultClassInstantiator:138","type":"CtInvocationImpl"},"status":-2},{"failures":[509],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"))","position":"org.easymock.internal.DefaultClassInstantiator:191","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:81","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ","position":"org.easymock.internal.RecordState:266","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:203","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<T>.toString()","position":"org.easymock.Capture:137","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1290","type":"CtInvocationImpl"},"status":0},{"failures":[16,17,17,18,18,19,20,21,22,24,25,26,27,29,30,31,32,34,37,38,40,41,42,43,44,45,58,60,61,0,63,64,1,2,65,79,80,81,83,85,112,113,115,116,117,119,120,121,122,123,124,125,126,127,128,129,133,134,136,147,148,149,150,151,152,153,154,155,156,157,158,3,159,160,4,5,161,162,185,191,194,195,199,200,223,224,225,226,227,6,7,229,230,231,233,234,235,236,238,239,8,240,241,242,243,244,245,246,247,248,249,252,255,256,257,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,299,300,301,302,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,9,331,332,333,334,335,10,11,336,337,343,352,363,367,368,369,370,12,13,371,372,373,374,381,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,404,405,406,407,408,412,414,415,416,417,419,420,421,425,426,428,431,433,434,438,440,441,442,443,444,445,448,452,453,454,460,463,473,479,482,483,484,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Invocation.getMethod()","position":"org.easymock.internal.ExpectedInvocation:117","type":"CtReturnImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class.java.lang.Class.forName(\"dalvik.system.PathClassLoader\")","position":"org.easymock.internal.AndroidSupport:26","type":"CtInvocationImpl"},"status":-2},{"failures":[16,17,17,18,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,35,36,38,40,41,42,43,44,45,58,59,60,61,0,63,64,1,2,65,79,80,81,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,116,117,119,120,121,122,123,124,125,126,127,128,129,133,134,136,147,148,149,150,151,152,153,154,155,156,157,158,3,159,160,4,5,161,162,185,191,194,195,198,199,200,223,224,225,226,227,6,7,228,229,230,231,233,234,235,236,238,239,8,240,241,242,243,244,245,246,247,248,249,252,255,256,257,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,299,300,301,302,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,9,331,332,333,334,335,10,11,336,337,343,350,351,352,353,358,360,361,362,363,364,365,366,367,368,369,370,12,13,371,372,373,374,375,381,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,404,405,406,407,408,409,410,411,412,413,414,415,416,417,419,420,421,425,426,428,431,433,434,438,440,441,442,443,444,445,448,452,453,454,460,463,473,479,482,483,484,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502],"binaryOperator":"(org.easymock.internal.ExpectedInvocation) == null","name":"removeConditional","position":"org.easymock.internal.RecordState:233","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ThrowingAnswer() , true)","position":"org.easymock.internal.Result:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.util.LinkedList<org.easymock.internal.Range>.size()) ; int++) {\n    final org.easymock.internal.Range org.easymock.internal.Range = java.util.LinkedList<org.easymock.internal.Range>.get(int);\n    if (org.easymock.internal.Range.hasOpenCount()) {\n        int += 1;\n        return java.util.List<org.easymock.internal.Result>.get(int);\n    } \n    int += org.easymock.internal.Range.getMaximum();\n    if (int > (int)) {\n        int += 1;\n        return java.util.List<org.easymock.internal.Result>.get(int);\n    } \n}","position":"org.easymock.internal.Results:65","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","position":"org.easymock.internal.LastControl:65","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.Injector:129","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"suid":"this"},"name":"add","transplant":{"sourceCode":"return java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:198","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null))","position":"org.easymock.internal.DefaultClassInstantiator:160","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","position":"org.easymock.EasyMock:1470","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","position":"org.easymock.internal.Range:67","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type != null) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} ","position":"org.easymock.internal.BridgeMethodResolver:338","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"values":"values"},"name":"add","transplant":{"sourceCode":"if (this.java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","position":"org.easymock.Capture:79","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<T>.clear()","position":"org.easymock.Capture:60","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:47","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:41","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:920","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion()","position":"org.easymock.internal.ClassInstantiatorFactory:52","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.reset();\n}","position":"org.easymock.EasyMockSupport:551","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"(int)++","position":"org.easymock.internal.MocksBehavior:94","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.Mock == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:113","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","position":"org.easymock.internal.RecordState:106","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:137","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:46","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.ReplayState:65","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.Invocation:84","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","position":"org.easymock.internal.InjectionPlan:52","type":"CtInvocationImpl"},"status":-2},{"failures":[17,17,18,18,30,31,32,40,46,51,67,132,133,134,136,252,255,256,257,510,511,512,352,372,374,414,415,416,417,420,421,427,513,428,429,431,432,433,434,437,438,514,439,440,441,443,444,445,446,448,451,452,453,454,460,463,473,479,484],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.ReflectionUtils:93","type":"CtWhileImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])","position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:51","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.util.List<org.easymock.IArgumentMatcher>.size()) != (org.easymock.internal.Invocation.getArguments().int)) {\n    throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"));\n} ","position":"org.easymock.internal.ExpectedInvocation:46","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.ConstructorArgs:56","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","position":"org.easymock.internal.MockBuilder:236","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:72","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"delegate":"handler","args":"args","method":"method","obj":"obj"},"name":"add","transplant":{"sourceCode":"return this.java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:93","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n    return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:67","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:25","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","position":"org.easymock.internal.MocksControl:206","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:90","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.RecordState:191","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int int = 0","position":"org.easymock.internal.Results:90","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","position":"org.easymock.internal.MockBuilder:128","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final boolean boolean = !(boolean)","position":"org.easymock.internal.UnorderedBehavior:85","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","position":"org.easymock.internal.ErrorMessage:49","type":"CtIfImpl"},"status":-2},{"failures":[60,61,0,1,2,65,112,113,121,157,3,159,160,4,5,161,227,6,7,8,301,317,328,330,9,331,332,10,11,337,367,369,370,12,13,371,375,452,454,487,491,492,495],"variableMapping":{"it":"it","buffer":"result"},"name":"replace","transplant":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.And:49","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.ExpectedInvocation:108","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:123","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<java.lang.reflect.Field>","position":"org.easymock.internal.InjectionPlan:79","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(float.float, java.lang.Float.java.lang.Float)","position":"org.easymock.internal.ReflectionUtils:39","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:256","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.Invocation:84","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.ClassProxyFactory:118","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:906","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.org.easymock.EasyMockSupport.injectMocks(java.lang.Object)","position":"org.easymock.internal.EasyMockStatement:42","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException)","position":"org.easymock.internal.ClassProxyFactory:214","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","position":"org.easymock.internal.ClassProxyFactory:204","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:29","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Boolean.java.lang.Boolean.valueOf(java.lang.String)) {\n    throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"));\n} ","position":"org.easymock.internal.MocksControl:130","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:164","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","position":"org.easymock.Capture:117","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","position":"org.easymock.internal.ArgumentToString:37","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:48","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Byte>(org.easymock.Capture<java.lang.Byte>))","position":"org.easymock.EasyMock:1987","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ","position":"org.easymock.internal.ClassProxyFactory:131","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"maximum":"length","minimum":"length"},"name":"add","transplant":{"sourceCode":"return (this.int) == (this.int)","position":"org.easymock.internal.Range:52","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object[].int) != (java.util.List<org.easymock.IArgumentMatcher>.size())) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:90","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"pt":"type","typeVariableMap":"typeVariableMap","this":"this"},"name":"add","transplant":{"sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:284","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","position":"org.easymock.internal.BridgeMethodResolver:318","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1361","type":"CtReturnImpl"},"status":0},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":245,"org.easymock.tests2.MockedExceptionTest.testRealException":353,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":158,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":464,"org.easymock.tests.UsageVarargTest.varargIntAccepted":117,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":209,"org.easymock.tests.LimitationsTest.mockFinalMethod":253,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":299,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":69,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":484,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":506,"org.easymock.tests.UsageCallCountTest.tooManyCalls":239,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":262,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":475,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":422,"org.easymock.tests.UsageVarargTest.allKinds":126,"org.easymock.tests2.StubTest.stubWithReturnValue":483,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":481,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":57,"org.easymock.tests2.CaptureTest.testCaptureAll":389,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":240,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":317,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":510,"org.easymock.tests2.CaptureTest.testAnd":388,"org.easymock.tests.UsageStrictMockTest.testVerify":162,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":100,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":35,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":46,"org.easymock.tests.MockClassControlTest.testToString":68,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":414,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":269,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":491,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":203,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":108,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":285,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":381,"org.easymock.tests.UsageThrowableTest.throwError":242,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":218,"org.easymock.samples.SupportTest.addDocument":20,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":45,"org.easymock.tests2.StubTest.stub":482,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":194,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":263,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":376,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":150,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":447,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":221,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":41,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":190,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":346,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":291,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":456,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":512,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":192,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":455,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":125,"org.easymock.tests.UsageExpectAndThrowTest.object":102,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":405,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":88,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":477,"org.easymock.tests2.UsageTest.moreThanOneArgument":330,"org.easymock.tests.UsageVarargTest.varargByteAccepted":124,"org.easymock.tests.MockClassControlTest.testEquals":72,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":511,"org.easymock.tests.UsageTest.wrongArguments":0,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":201,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":77,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":166,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":380,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":103,"org.easymock.tests2.UsageTest.defaultResetToNice":335,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":15,"org.easymock.tests.MockingTest.testNiceClassMocking":139,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":352,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":406,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":434,"org.easymock.tests2.MockBuilderTest.testCreateMock":437,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":407,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":513,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":259,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":264,"org.easymock.samples.ExampleTest.voteAgainstRemovals":22,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":367,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":34,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":379,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":225,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":127,"org.easymock.tests2.CaptureTest.testCapture1_2446744":392,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":365,"org.easymock.samples.ExampleTest.voteForRemoval":24,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":296,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":236,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":38,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":81,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":54,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":161,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":278,"org.easymock.tests2.CaptureTest.testCaptureRightOne":398,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":260,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":410,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":445,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":224,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":196,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":261,"org.easymock.tests2.UsageConstraintsTest.cmpTo":312,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":507,"org.easymock.tests.MockTypeTest.fromEasyMockClass":49,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":144,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":385,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":435,"org.easymock.tests2.MockedExceptionTest.testMockedException":351,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":111,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":154,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":324,"org.easymock.samples.PartialClassMockTest.testGetArea":30,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":227,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":176,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":129,"org.easymock.samples.ConstructorCalledMockTest.testTax":17,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":418,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":293,"org.easymock.tests2.UsageTest.argumentsOrdered":11,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":47,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":409,"org.easymock.samples.ExampleTest.removeNonExistingDocument":28,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":297,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":142,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":413,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":85,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":277,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":74,"org.easymock.tests2.AnswerTest.answer":408,"org.easymock.tests.MockingTest.testNicePartialClassMocking":134,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":386,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":159,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":151,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":156,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":195,"org.easymock.tests.UsageExpectAndThrowTest.longType":95,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":53,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":109,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":473,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":493,"org.easymock.tests.UsageTest.argumentsOrdered":2,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":302,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":433,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":290,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":43,"org.easymock.tests2.MockBuilderTest.testCreateMockString":439,"org.easymock.tests2.NameTest.nameForStrictMock":500,"org.easymock.tests2.CaptureTest.testCaptureNone":396,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":175,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":189,"org.easymock.tests2.SerializationTest.testClass":372,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":168,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":31,"org.easymock.tests.MockingTest.testInterfaceMocking":135,"org.easymock.tests2.EasyMockSupportTest.testVerify":498,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":164,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":383,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":432,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":97,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":138,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":323,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":328,"org.easymock.tests.GenericTest.testBridgedEquals":258,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":289,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":438,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":309,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":419,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":440,"org.easymock.tests2.UsageConstraintsTest.testOr":307,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":404,"org.easymock.tests.MockClassControlTest.testHashCode":71,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":339,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":14,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":51,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":241,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":249,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":284,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":153,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":415,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":417,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":480,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":504,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":461,"org.easymock.tests2.UsageConstraintsTest.testSame":306,"org.easymock.tests2.UsageTest.resumeIfFailure":336,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":204,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":229,"org.easymock.tests.UsageOverloadedMethodTest.overloading":128,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":420,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":52,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":449,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":342,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":469,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":200,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":18,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":256,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":468,"org.easymock.tests.UsageTest.openCallCountByLastCall":63,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":98,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":199,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":266,"org.easymock.tests2.NameTest.nameForNiceMock":501,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":382,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":226,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":152,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":208,"org.easymock.tests2.CaptureTest.testPrimitive":391,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":442,"org.easymock.samples.BasicClassMockTest.testPrintContent":32,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":228,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":147,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":451,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":238,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":358,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":232,"org.easymock.tests2.UsageStrictMockTest.differentMethods":13,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":470,"org.easymock.tests.MockingTest.testClassMocking":131,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":488,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":257,"org.easymock.tests2.CaptureTest.testCaptureLast":395,"org.easymock.tests2.UsageConstraintsTest.equals":303,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":514,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":93,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":237,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":235,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":426,"org.easymock.tests.UsageStrictMockTest.range":4,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":64,"org.easymock.tests.UsageTest.unexpectedCallWithArray":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":471,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":172,"org.easymock.samples.ExampleTest.addDocument":26,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":137,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":39,"org.easymock.tests2.UsageConstraintsTest.lessThan":327,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":1,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":33,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":193,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":361,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":181,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":292,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":146,"org.easymock.tests2.UsageStrictMockTest.range":12,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":421,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":76,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":112,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":174,"org.easymock.tests.UsageTest.moreThanOneArgument":61,"org.easymock.tests2.UsageTest.openCallCountByLastCall":333,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":428,"org.easymock.tests.UsageStrictMockTest.differentMethods":5,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":141,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":178,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":295,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":96,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":79,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":272,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":90,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":462,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":503,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":160,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":378,"org.easymock.tests2.DependencyTest.testClassMockingSupport":424,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":448,"org.easymock.tests.ReplayStateInvalidCallsTest.times":214,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":107,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":58,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":341,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":16,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":82,"org.easymock.tests2.UsageConstraintsTest.testContains":313,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":216,"org.easymock.tests2.UsageConstraintsTest.testFind":304,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":393,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":143,"org.easymock.samples.ExampleTest.addAndChangeDocument":29,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":427,"org.easymock.tests.UsageVarargTest.varargCharAccepted":119,"org.easymock.tests2.CaptureTest.testCaptureFromStub":399,"org.easymock.tests.UsageVerifyTest.twoThrows":6,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":48,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":387,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":42,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":120,"org.easymock.tests2.DelegateToTest.testReturnException":362,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":332,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":485,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":497,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":254,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":359,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":368,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":230,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":145,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":270,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":397,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":104,"org.easymock.tests2.UsageConstraintsTest.testMatches":316,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":75,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":179,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":509,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":180,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":191,"org.easymock.tests.LimitationsTest.abstractClass":250,"org.easymock.tests2.UsageConstraintsTest.testNull":305,"org.easymock.tests2.EasyMockSupportClassTest.testAll":460,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":40,"org.easymock.tests2.UsageConstraintsTest.greaterThan":318,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":115,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":265,"org.easymock.tests.UsageExpectAndReturnTest.object":282,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":320,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":494,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":371,"org.easymock.tests2.DelegateToTest.testWrongClass":364,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":171,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":215,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":99,"org.easymock.samples.ExampleTest.voteAgainstRemoval":25,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":248,"org.easymock.tests.UsageVarargTest.varargShortAccepted":122,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":197,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":167,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":348,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":149,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":19,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":459,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":66,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":377,"org.easymock.tests2.SerializationTest.testAllMockedMethod":374,"org.easymock.tests2.NameTest.nameForMocksControl":502,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":206,"org.easymock.tests.MockingTest.testStrictClassMocking":130,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":44,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":337,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":467,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":80,"org.easymock.tests.LimitationsTest.mockNativeMethod":252,"org.easymock.tests2.DelegateToTest.testStubDelegate":363,"org.easymock.tests.UsageUnorderedTest.message":8,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":37,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":183,"org.easymock.samples.ExampleTest.answerVsDelegate":23,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":84,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":220,"org.easymock.tests.UsageCallCountTest.tooFewCalls":234,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":281,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":411,"org.easymock.tests.UsageVerifyTest.twoReturns":7,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":476,"org.easymock.tests2.ThreadingTest.testChangeDefault":403,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":101,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":182,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":276,"org.easymock.tests2.DependencyTest.testInterfaceMocking":425,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":486,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":87,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":184,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":489,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":357,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":308,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":505,"org.easymock.tests.MockingTest.testTwoMocks":132,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":233,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":55,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":350,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":231,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":465,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":283,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":416,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":384,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":188,"org.easymock.tests.UsageThrowableTest.throwCheckedException":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":458,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":50,"org.easymock.samples.ExampleTest.voteForRemovals":27,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":244,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":315,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":222,"org.easymock.tests.ReplayStateInvalidUsageTest.times":267,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":36,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":89,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":466,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":444,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":60,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":169,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":273,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":294,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":170,"org.easymock.tests2.UsageConstraintsTest.any":311,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":340,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":173,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":496,"org.easymock.tests.LimitationsTest.privateConstructor":251,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":211,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":360,"org.easymock.tests2.CallbackTest.callback":375,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":217,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":177,"org.easymock.tests2.NameTest.nameForMock":499,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":314,"org.easymock.tests.MockNameTest.defaultName":271,"org.easymock.tests2.SerializationTest.test":373,"org.easymock.tests.UsageExpectAndReturnTest.longType":275,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":394,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":210,"org.easymock.tests2.CaptureTest.testCaptureFirst":401,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":114,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":321,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":86,"org.easymock.tests2.UsageTest.niceToStrict":331,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":78,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":83,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":157,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":105,"org.easymock.tests2.UsageTest.strictResetToDefault":329,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":457,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":453,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":59,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":92,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":279,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":354,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":430,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":446,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":116,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":319,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":443,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":91,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":136,"org.easymock.tests2.DelegateToTest.testDelegate":366,"org.easymock.tests2.UsageConstraintsTest.testNotNull":325,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":370,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":343,"org.easymock.tests2.CaptureTest.testCapture_2617107":390,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":186,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":268,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":345,"org.easymock.tests2.ThreadingTest.testThreadSafe":402,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":187,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":334,"org.easymock.tests.UsageThrowableTest.noUpperLimit":243,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":118,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":495,"org.easymock.tests.UsageExpectAndReturnTest.floatType":274,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":487,"org.easymock.tests2.UsageTest.wrongArguments":9,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":310,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":356,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":70,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":436,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":212,"org.easymock.samples.SupportTest.voteForRemovals":21,"org.easymock.tests.UsageRangeTest.combination":223,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":472,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":326,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":322,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":478,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":349,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":369,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":286,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":106,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":56,"org.easymock.tests.UsageExpectAndThrowTest.floatType":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":474,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":287,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":441,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":508,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":338,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":450,"org.easymock.tests.UsageTest.exactCallCountByLastCall":65,"org.easymock.tests2.AnswerTest.stubAnswer":412,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":492,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":202,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":213,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":463,"org.easymock.tests.MockingTest.testPartialClassMocking":133,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":288,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":10,"org.easymock.tests2.UsageConstraintsTest.constraints":301,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":355,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":298,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":207,"org.easymock.tests.UsageVarargTest.varargLongAccepted":123,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":155,"org.easymock.tests.ObjectMethodsTest.testHashCode":165,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":452,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":454,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":3,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":110,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":198,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":479,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":113,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":429,"org.easymock.tests2.DependencyTest.testClassMocking":423,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":73,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":148,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":163,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":347,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":490,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":67,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":300,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":431,"org.easymock.tests.DefaultClassInstantiatorTest.object":140,"org.easymock.tests.UsageVarargTest.differentLength":121,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":185,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":219,"org.easymock.tests2.CaptureTest.testCapture2_2446744":400,"org.easymock.tests.GenericTest.testPackageScope":255}}]

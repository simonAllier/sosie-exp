[{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[22,23,24,25,26,27,28,29,30,31,32],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,45,46,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result","name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","type":"CtInvocationImpl"},"failures":[92,92,30,93,31,94,95,96,97,98,99,100,32,101,102,103],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[104,105],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:632","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:360","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[106,107,108,109,110,111,112,113,114,115,116,117,22,118,119,25,120,121,122,123],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[124],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"bridgeMethod"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[125,126,127,128,129,130,131],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Injector:89","sourceCode":"if (!(org.easymock.internal.Injection.isMatched())) {\n    throw new java.lang.RuntimeException(java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:51","sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","type":"CtIfImpl"},"failures":[132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"injection":"injection","fieldName":"qualifier","this":"qualifier"}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:189","sourceCode":"return this.boolean","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:82","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"isThreadSafe":"matched"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:168","sourceCode":"return this","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:351","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[17,110],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[158],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[26],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:176","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[159],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:946","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[160,161,162,163,109,112,164,165,166,167,168,169,170,171,172,116],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"failures":[173],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:172","failures":[34,57],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:58","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>, java.lang.Boolean.java.lang.Boolean)","type":"CtInvocationImpl"},"failures":[162,163,109,174,175,176,177,111,178,179,180,181,182,55,183,184,72,74,77,79,80,81,171,172,116],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:41","sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","type":"CtTryImpl"},"failures":[185,186,187],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[188],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[189,190],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:340","sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[191],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"failures":[192],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[193,194,106,195,196,197,198,199,200,201,35,202,203,204,205,37,38,39,40,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,41,42,222,223,224,225,226,161,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,162,109,248,249,250,251,252,253,254,255,256,174,257,258,259,260,261,175,176,177,262,263,264,265,266,267,111,178,179,180,268,269,270,271,272,112,164,165,181,273,274,44,275,276,182,277,278,279,113,280,281,282,283,284,285,286,51,55,56,287,288,289,290,291,292,293,189,294,295,296,297,298,299,300,183,301,170,302,303,304,305,71,306,73,74,75,77,78,80,307,308,171,116,309,105,117,22,23,118,24,119,25,26,310,311,312,120,159,313,121,314,315,122,28,316,317,318,29,123,319,82,320,321,322,323,324,325,83,326,84,327,85,87,88,90,91,328,329,330,30,93,31,94,96,97,98,99,100,32,103],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"parameterType","type":"parameterType"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[33,34,35,36,37,38,39,40,41,42,43,331,332,44,333,334,335,336,45,45,46,46,47,48,49,51,53,54,55,56,57,58,59,60,62,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,337,82,83,84,85,86,87,88,89,90,91],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:70","sourceCode":"java.io.InputStream.close()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:65","sourceCode":"java.util.Properties.load(java.io.InputStream)","type":"CtInvocationImpl"},"failures":[338,339,340,341,342,343],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"in":"in"}},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arg":"mock"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":23,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":209,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":10,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":303,"org.easymock.tests2.StubTest.stubWithReturnValue":296,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":125,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":318,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":260,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":133,"org.easymock.tests2.SerializationTest.testAllMockedMethod":85,"org.easymock.tests2.DelegateToTest.testReturnException":328,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":207,"org.easymock.tests.MockingTest.testPartialClassMocking":37,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":124,"org.easymock.tests.MockClassControlTest.testToString":333,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":149,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":337,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":18,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":227,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":68,"org.easymock.tests.UsageExpectAndThrowTest.object":237,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":166,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":316,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":184,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":126,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":250,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":251,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":310,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":181,"org.easymock.samples.ConstructorCalledMockTest.testTax":45,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":145,"org.easymock.tests.UsageStrictMockTest.range":163,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":200,"org.easymock.samples.ExampleTest.answerVsDelegate":281,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":86,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":34,"org.easymock.tests2.UsageConstraintsTest.testNull":24,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":238,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":73,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":57,"org.easymock.tests2.CaptureTest.testPrimitive":94,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":274,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":246,"org.easymock.tests.UsageTest.moreThanOneArgument":161,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":306,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":199,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":182,"org.easymock.tests2.CaptureTest.testCaptureNone":99,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":339,"org.easymock.tests.UsageUnorderedTest.message":160,"org.easymock.tests.UsageVerifyTest.twoReturns":165,"org.easymock.tests.UsageVarargTest.varargByteAccepted":219,"org.easymock.tests2.ThreadingTest.testThreadSafe":287,"org.easymock.tests.UsageVarargTest.varargIntAccepted":214,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":197,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":15,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":268,"org.easymock.tests2.CaptureTest.testCapture_2617107":31,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":51,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":130,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":19,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":156,"org.easymock.tests2.UsageConstraintsTest.any":311,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":56,"org.easymock.tests2.StubTest.stub":295,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":2,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":272,"org.easymock.tests.UsageExpectAndThrowTest.longType":230,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":208,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":20,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":185,"org.easymock.tests2.SerializationTest.testClass":84,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":151,"org.easymock.tests.LimitationsTest.mockNativeMethod":40,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":139,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":188,"org.easymock.tests2.AnswerTest.answer":320,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":267,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":43,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":27,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":16,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":293,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":65,"org.easymock.tests2.CaptureTest.testAnd":30,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":136,"org.easymock.tests2.UsageTest.strictResetToDefault":301,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":309,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":78,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":340,"org.easymock.tests2.NameTest.nameForMocksControl":300,"org.easymock.tests2.MockedExceptionTest.testMockedException":325,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":138,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":276,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":179,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":108,"org.easymock.tests2.DelegateToTest.testDelegate":330,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":231,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":39,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":190,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":71,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":58,"org.easymock.tests.MockingTest.testNicePartialClassMocking":38,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":242,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":75,"org.easymock.tests2.CaptureTest.testCaptureLast":98,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":134,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":210,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":91,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":26,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":317,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":226,"org.easymock.tests.MockingTest.testTwoMocks":36,"org.easymock.tests2.CaptureTest.testCapture1_2446744":95,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":252,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":240,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":291,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":235,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":123,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":343,"org.easymock.tests.UsageStrictMockTest.differentMethods":109,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":141,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":148,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":342,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":191,"org.easymock.tests2.MockBuilderTest.testCreateMockString":62,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":157,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":332,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":278,"org.easymock.tests.UsageExpectAndThrowTest.floatType":229,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":314,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":321,"org.easymock.tests.UsageVerifyTest.twoThrows":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":69,"org.easymock.samples.PartialClassMockTest.testGetArea":47,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":269,"org.easymock.samples.ExampleTest.voteAgainstRemoval":283,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":11,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":80,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":331,"org.easymock.tests2.UsageTest.niceToStrict":302,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":228,"org.easymock.tests2.UsageConstraintsTest.testNotNull":29,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":324,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":0,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":55,"org.easymock.tests2.UsageTest.defaultResetToNice":304,"org.easymock.tests2.MockBuilderTest.testCreateMock":59,"org.easymock.samples.ExampleTest.voteAgainstRemovals":280,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":263,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":12,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":135,"org.easymock.tests2.CallbackTest.callback":307,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":142,"org.easymock.tests.UsageTest.openCallCountByLastCall":107,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":236,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":105,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":193,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":198,"org.easymock.tests.UsageCallCountTest.tooFewCalls":195,"org.easymock.tests.UsageOverloadedMethodTest.overloading":279,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":313,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":89,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":175,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":159,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":186,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":100,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":201,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":341,"org.easymock.tests2.EasyMockSupportClassTest.testAll":67,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":42,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":244,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":63,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":292,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":224,"org.easymock.tests2.CaptureTest.testCaptureAll":93,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":90,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":88,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":140,"org.easymock.tests2.UsageConstraintsTest.testMatches":121,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":323,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":277,"org.easymock.samples.ExampleTest.voteForRemovals":285,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":129,"org.easymock.tests2.NameTest.nameForNiceMock":299,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":289,"org.easymock.tests.UsageVarargTest.allKinds":221,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":112,"org.easymock.tests2.DependencyTest.testInterfaceMocking":183,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":128,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":225,"org.easymock.samples.BasicClassMockTest.testPrintContent":49,"org.easymock.samples.ExampleTest.addDocument":284,"org.easymock.tests2.DelegateToTest.testStubDelegate":329,"org.easymock.tests2.AnswerTest.stubAnswer":322,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":211,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":153,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":162,"org.easymock.tests2.UsageConstraintsTest.greaterThan":315,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":178,"org.easymock.tests.UsageVarargTest.varargLongAccepted":218,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":81,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":248,"org.easymock.samples.ExampleTest.voteForRemoval":282,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":9,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":288,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":266,"org.easymock.tests.UsageExpectAndReturnTest.floatType":254,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":82,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":76,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":46,"org.easymock.tests.UsageThrowableTest.noUpperLimit":203,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":122,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":155,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":35,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":117,"org.easymock.tests2.SerializationTest.test":327,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":96,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":7,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":187,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":204,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":253,"org.easymock.tests2.UsageConstraintsTest.testSame":119,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":206,"org.easymock.tests2.CaptureTest.testCaptureFirst":103,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":158,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":6,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":258,"org.easymock.tests.GenericTest.testPackageScope":41,"org.easymock.tests2.CaptureTest.testCapture2_2446744":102,"org.easymock.tests2.UsageTest.moreThanOneArgument":170,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":60,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":17,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":4,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":154,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":220,"org.easymock.tests2.NameTest.nameForMock":297,"org.easymock.tests.UsageExpectAndReturnTest.longType":255,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":222,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":245,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":61,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":176,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":243,"org.easymock.tests2.UsageStrictMockTest.differentMethods":116,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":275,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":256,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":241,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":180,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":106,"org.easymock.tests2.MockedExceptionTest.testRealException":326,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":259,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":14,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":144,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":232,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":13,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":171,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":273,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":87,"org.easymock.tests2.NameTest.nameForStrictMock":298,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":194,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":52,"org.easymock.tests2.UsageConstraintsTest.testContains":120,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":83,"org.easymock.tests2.UsageConstraintsTest.testFind":118,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":113,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":189,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":74,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":294,"org.easymock.tests.UsageExpectAndReturnTest.object":261,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":28,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":167,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":77,"org.easymock.tests.ErrorMessageTest.testGetters":168,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":53,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":143,"org.easymock.tests2.UsageStrictMockTest.range":172,"org.easymock.tests2.UsageConstraintsTest.lessThan":319,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":216,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":127,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":150,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":202,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":5,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":8,"org.easymock.tests2.CaptureTest.testCaptureRightOne":32,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":338,"org.easymock.tests2.UsageConstraintsTest.testOr":25,"org.easymock.tests.UsageRangeTest.combination":111,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":131,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":264,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":212,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":72,"org.easymock.tests.MockClassControlTest.testHashCode":336,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":147,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":44,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":174,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":1,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":177,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":110,"org.easymock.tests.UsageVarargTest.varargShortAccepted":217,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":290,"org.easymock.tests2.UsageConstraintsTest.cmpTo":312,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":104,"org.easymock.tests.UsageVarargTest.varargCharAccepted":215,"org.easymock.tests2.CompareToTest.testLessThan":192,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":308,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":3,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":21,"org.easymock.tests2.UsageTest.openCallCountByLastCall":114,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":115,"org.easymock.tests2.CaptureTest.testCaptureFromStub":101,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":54,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":173,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":234,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":66,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":196,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":137,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":146,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":262,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":335,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":79,"org.easymock.tests2.UsageConstraintsTest.constraints":22,"org.easymock.samples.ExampleTest.addAndChangeDocument":286,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":233,"org.easymock.tests.CapturesMatcherTest.test":92,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":265,"org.easymock.tests.UsageStrictMockTest.testVerify":249,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":132,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":334,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":70,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":223,"org.easymock.tests2.UsageTest.resumeIfFailure":305,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":97,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":270,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":64,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":257,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":33,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":271,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":205,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":213,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":169}}]

[{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:93","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[36,37,38],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[39,40,41,42],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[43,44,45,46,47,48,49,50,51,52],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"clazz":"parameterType"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:151","sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:93","sourceCode":"if (int == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[53,54,55,56],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"length":"i","clazz":"primitiveType"}},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[57,58],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[59,60],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:173","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[61,62,63],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Same:41","sourceCode":"java.lang.StringBuffer.append(\"same(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String)","type":"CtInvocationImpl"},"failures":[64,2,65,66,13,16,17,67,68,69,70,21,71,23,72,73,24,25,74,29,30,31,75,76,77,34],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:64","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:323","sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:209","sourceCode":"if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"exception":"candidateParameter","throwableClass":"candidateParameter"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[43,44,46,47,48,50,51],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:177","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[60],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"failures":[78,79,80],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1471","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"failures":[81,82],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1927","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","type":"CtInvocationImpl"},"failures":[83],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:986","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[84],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"failures":[85],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[86],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"failures":[87],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:95","sourceCode":"return java.lang.StringBuilder.toString()","type":"CtReturnImpl"},"failures":[2,65,13,16,17,21,23,72,24,25,88,89,90,26,28,29,30,31,34],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1092","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"substring","key":"substring"}},{"transplant":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.NameTest.nameForStrictMock":68,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":87,"org.easymock.tests2.UsageTest.argumentsOrdered":17,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":27,"org.easymock.tests.MockingTest.testNicePartialClassMocking":58,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":15,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":62,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":44,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":50,"org.easymock.tests2.NameTest.nameForNiceMock":69,"org.easymock.tests2.SerializationTest.testAllMockedMethod":55,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":20,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":40,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":86,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":76,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":73,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":84,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":48,"org.easymock.tests2.UsageStrictMockTest.range":2,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":39,"org.easymock.tests2.DelegateToTest.testStubDelegate":60,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":36,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":0,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":56,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":81,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":71,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":47,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":52,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":75,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":7,"org.easymock.tests.UsageTest.exactCallCountByLastCall":32,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":16,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":46,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":49,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":8,"org.easymock.tests.UsageStrictMockTest.differentMethods":72,"org.easymock.tests2.UsageTest.wrongArguments":13,"org.easymock.tests.UsageStrictMockTest.range":23,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":43,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":5,"org.easymock.tests.UsageTest.wrongArguments":29,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":89,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":4,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":42,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":12,"org.easymock.tests.UsageVerifyTest.twoThrows":24,"org.easymock.tests2.SerializationTest.test":54,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":11,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":41,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":90,"org.easymock.tests2.CaptureTest.testPrimitive":83,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":80,"org.easymock.tests.UsageTest.moreThanOneArgument":74,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":30,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":82,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":59,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":37,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":18,"org.easymock.tests.UsageUnorderedTest.message":34,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":88,"org.easymock.tests2.UsageTest.niceToStrict":14,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":35,"org.easymock.tests2.UsageTest.moreThanOneArgument":66,"org.easymock.tests.UsageVerifyTest.twoReturns":25,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":61,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":63,"org.easymock.tests.UsageTest.argumentsOrdered":31,"org.easymock.tests.UsageVarargTest.differentLength":33,"org.easymock.tests2.CallbackTest.callback":19,"org.easymock.tests.UsageTest.unexpectedCallWithArray":28,"org.easymock.tests2.NameTest.nameForMock":67,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":26,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":51,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":21,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":9,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":38,"org.easymock.tests2.UsageStrictMockTest.differentMethods":65,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":85,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":78,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":22,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":1,"org.easymock.tests2.UsageConstraintsTest.constraints":3,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":6,"org.easymock.tests2.SerializationTest.testClass":53,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":79,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":57,"org.easymock.tests2.NameTest.nameForMocksControl":70,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":45,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":64,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":77,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":10}}]

[{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"failures":[0,1,2],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[3,4,5],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[6,7],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:759","sourceCode":"org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Integer>(int))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:113","sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"failures":[8,9],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"i","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[10,11,12],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:91","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:67","sourceCode":"final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"expected"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>).append(\")\")","type":"CtInvocationImpl"},"failures":[13],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.ConstructorArgs:54","failures":[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:73","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[55,56,57,58,59,60],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:49","sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","type":"CtInvocationImpl"},"failures":[61,62,63,64,65],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[6,7],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1163","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[66,67,68,69,70,71],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:138","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[24,72,53,54],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[73],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[74],"status":-1,"binaryOperator":"(\"\" + int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[66,67,68,69,70,71],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1507","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[75,21,76,77],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[0,78],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1385","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[79,80,81,82,83,84,85,86,87,88,89,90,91],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[66,67,68,69,70,71],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:176","failures":[53,92,93,94,95,96,97,98],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:46","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"invocation":"invocation","this":"this"}},{"position":"org.easymock.internal.matchers.Compare:53","failures":[99],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[100],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:164","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1319","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:907","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","shouldBeUsedInOneThread":"threadSafe"}},{"position":"org.easymock.internal.ClassProxyFactory:168","failures":[101,73,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,8,6,124,125,126,7,127,128,129,14,15,130,131,132,133,134,135,136,137,138,139,140,141,142,55,56,10,143,11,144,145,146,147,18,148,149,19,77,28,31,33,35,36,39,42,45,46,49],"status":-1,"binaryOperator":"java.lang.reflect.Method[] != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareTo:42","failures":[150],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[151,152,153,154],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[155],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[3,4,5],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[68,156,99,70,71],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:156","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"verified":"org.easymock.internal.AndroidSupport.isAndroid"}},{"position":"org.easymock.internal.RecordState:280","failures":[157,158,159,160,161,162,163,164],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":149,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":18,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":82,"org.easymock.tests2.CompareToTest.testGreateOrEqual":64,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":24,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":96,"org.easymock.tests2.SerializationTest.testAllMockedMethod":77,"org.easymock.tests2.DelegateToTest.testReturnException":160,"org.easymock.tests.MockingTest.testPartialClassMocking":120,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":79,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":71,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":95,"org.easymock.samples.BasicClassMockTest.testPrintContent":129,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":73,"org.easymock.tests.MockClassControlTest.testToString":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":46,"org.easymock.tests2.DelegateToTest.testStubDelegate":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":51,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":11,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":38,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":75,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":163,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":34,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":81,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":152,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":32,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":10,"org.easymock.tests2.DelegateToTest.testWrongClass":162,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":93,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":127,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":143,"org.easymock.samples.ConstructorCalledMockTest.testTax":14,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":139,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":53,"org.easymock.samples.ExampleTest.answerVsDelegate":158,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":15,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":146,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":101,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":87,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":144,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":136,"org.easymock.tests2.SerializationTest.test":76,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":112,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":25,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":6,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":29,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":67,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":159,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":90,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":153,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":36,"org.easymock.tests.GenericTest.testPackageScope":102,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":154,"org.easymock.tests.UsageVerifyTest.twoReturns":80,"org.easymock.tests.GenericTest.testBridgedEquals":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":45,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":128,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":1,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":97,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":0,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":27,"org.easymock.tests2.StubTest.stub":2,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":141,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":126,"org.easymock.tests2.SerializationTest.testClass":21,"org.easymock.tests.LimitationsTest.mockNativeMethod":115,"org.easymock.tests2.AnswerTest.answer":91,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":74,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":48,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":59,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":142,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":23,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":72,"org.easymock.tests2.MockedExceptionTest.testMockedException":132,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":86,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":147,"org.easymock.tests.MockingTest.testNiceClassMocking":123,"org.easymock.tests.MockingTest.testClassMocking":118,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":33,"org.easymock.tests2.NameTest.nameForStrictMock":12,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":84,"org.easymock.tests2.DelegateToTest.testDelegate":164,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":122,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":134,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":133,"org.easymock.tests.MockingTest.testNicePartialClassMocking":121,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":138,"org.easymock.tests2.CompareToTest.testNotComparable":150,"org.easymock.tests.LimitationsTest.mockFinalMethod":116,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":5,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":137,"org.easymock.tests2.CompareToTest.testCompareEqual":63,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":92,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":145,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":125,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":100,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":19,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":140,"org.easymock.tests.MockingTest.testTwoMocks":119,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":20,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":94,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":9,"org.easymock.tests.UsageTest.exactCallCountByLastCall":85,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":40,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":151,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":54,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":135,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":157,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":124,"org.easymock.tests2.MockBuilderTest.testWithConstructor":22,"org.easymock.tests.MockClassControlTest.testHashCode":110,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":37,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":106,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":35,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":41,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":7,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":16,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":52,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":44,"org.easymock.samples.PartialClassMockTest.testGetArea":130,"org.easymock.tests2.CompareToTest.testLessOrEqual":65,"org.easymock.tests2.CompareToTest.testLessThan":61,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":39,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":78,"org.easymock.tests.LimitationsTest.privateConstructor":114,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":17,"org.easymock.tests2.UsageTest.openCallCountByLastCall":88,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":131,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":89,"org.easymock.tests.DefaultClassInstantiatorTest.object":8,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":4,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":3,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":47,"org.easymock.tests.UsageTest.unexpectedCallWithArray":69,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":156,"org.easymock.tests.UsageTest.openCallCountByLastCall":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":42,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":70,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":60,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":66,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":26,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":109,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":43,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":49,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":55,"org.easymock.tests.CapturesMatcherTest.test":13,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":148,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":155,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":108,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":50,"org.easymock.tests2.CompareToTest.testGreateThan":62,"org.easymock.tests.MockClassControlTest.testEquals":111,"org.easymock.tests2.EasyMockSupportClassTest.testAll":31,"org.easymock.tests.LimitationsTest.abstractClass":113,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":103,"org.easymock.tests.MockingTest.testStrictClassMocking":117,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":68,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":58}}]

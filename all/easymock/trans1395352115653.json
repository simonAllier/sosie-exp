[{"transplant":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[46],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,272,6,273,274,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,275,276,277,278,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,279,65,66,67,68,69,70,71,72,73,74,75,76,280,77,281,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,282,100,101,283,102,103,284,104,285,105,106,107,108,109,110,111,112,113,114,115,116,117,286,287,118,288,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,289,290,291,292,145,146,293,294,295,296,297,298,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,299,300,301,302,176,303,177,178,179,180,181,182,183,184,304,191,192,193,194,195,196,305,306,307,197,198,308,199,200,201,202,309,203,204,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,205,206,330,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,331,332,333,334,335,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,268,269,270,271,336],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:244","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[145,337,338,194],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:72","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[46],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:84","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[272,275,276,277,278,25,71,280,281,87,94,99,282,283,284,285,113,286,287,119,289,290,291,292,298,155,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Matches:36","sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).matches(java.lang.String))","type":"CtReturnImpl"},"failures":[42],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[22,23,281,152,153],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Null:39","sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","type":"CtInvocationImpl"},"failures":[339],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[340,69,70],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[69,70],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"answer":"answer"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"name":"org.easymock.internal.LastControl.NO_MATCHERS_FOUND"}},{"transplant":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:88","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,272,6,7,8,9,10,11,12,13,341,342,14,15,343,344,345,346,16,347,17,18,19,20,21,22,23,24,275,276,277,278,348,349,350,351,352,25,353,354,355,356,357,358,26,27,28,29,359,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,279,65,66,67,340,360,68,69,70,361,71,72,73,74,75,76,280,362,77,363,281,78,79,80,364,365,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,282,100,366,367,101,283,102,103,284,104,285,105,106,107,108,109,110,111,112,113,114,115,116,117,286,287,118,288,368,369,370,371,372,119,373,374,375,376,377,378,120,121,123,124,379,128,129,380,381,130,382,131,383,384,385,386,132,387,388,389,390,391,133,392,134,135,136,137,393,138,139,140,394,141,142,143,144,289,290,291,292,395,145,146,337,396,293,294,295,296,297,397,298,398,399,400,401,402,403,404,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,299,300,301,302,176,303,177,178,179,180,405,406,407,181,182,183,184,304,408,409,410,411,185,412,413,414,415,416,417,186,418,419,420,187,421,422,423,188,189,190,424,425,426,427,428,429,430,431,432,433,434,435,436,437,338,194,195,196,438,305,306,307,439,440,441,442,443,444,445,446,447,448,197,449,198,308,199,200,201,202,309,203,204,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,450,451,452,205,206,330,207,208,209,210,211,212,213,214,215,453,216,217,218,219,220,221,222,223,224,225,226,227,228,454,455,229,230,231,232,233,234,235,236,331,332,333,334,335,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,456,266,267,457,458,459,460,461,268,462,269,270,463,271,336],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1815","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EndsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[27],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"failures":[464],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"arg"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[395,145,146,337,396],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:140","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[281,365,136],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[465],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:39","sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[466,467,149,468,469,330],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[470,471,472,473,474,475,476,477,478,464,479,480,481,482,483,122,126,379],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnValue":"arg","returnedType":"paramType"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[258,261],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:242","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[313],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[81,470,474,484,127,485,486,487,488,489],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[127,128,129,490],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1530","sourceCode":"org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(int))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:117","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"failures":[147],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"i","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[491,492],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:43","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"equals\", new java.lang.Class[]{ java.lang.Object.java.lang.Object })","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:55","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[379],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:34","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":29,"org.easymock.tests2.UsageTest.argumentsOrdered":115,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":205,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":97,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":419,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":110,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":9,"org.easymock.tests2.DelegateToTest.testReturnException":138,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":300,"org.easymock.tests.MockingTest.testPartialClassMocking":191,"org.easymock.tests.MockClassControlTest.testToString":324,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":392,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":406,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":424,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":365,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":131,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":237,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":15,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":485,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":35,"org.easymock.tests2.UsageTest.wrongArguments":108,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":230,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":358,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":291,"org.easymock.samples.ExampleTest.answerVsDelegate":1,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":444,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":434,"org.easymock.tests2.UsageConstraintsTest.testNull":31,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":74,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":96,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":329,"org.easymock.tests2.CaptureTest.testPrimitive":57,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":234,"org.easymock.tests.UsageTest.moreThanOneArgument":206,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":256,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":73,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":295,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":456,"org.easymock.tests.UsageTest.argumentsOrdered":211,"org.easymock.tests.UsageVarargTest.varargIntAccepted":215,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":423,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":224,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":282,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":377,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":283,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":412,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":228,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":25,"org.easymock.tests.ReplayStateInvalidUsageTest.times":318,"org.easymock.tests2.DependencyTest.testClassMocking":341,"org.easymock.tests2.AnswerTest.answer":67,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":36,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":189,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":278,"org.easymock.tests2.CaptureTest.testAnd":54,"org.easymock.tests2.UsageTest.strictResetToDefault":106,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":473,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":281,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":294,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":179,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":91,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":458,"org.easymock.tests2.DelegateToTest.testDelegate":141,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":252,"org.easymock.tests.LimitationsTest.mockFinalMethod":449,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":176,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":335,"org.easymock.tests2.DependencyTest.testClassMockingSupport":342,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":408,"org.easymock.tests2.CaptureTest.testCapture1_2446744":58,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":362,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":250,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":276,"org.easymock.tests.UsageThrowableTest.throwError":258,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":312,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":443,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":378,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":297,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":477,"org.easymock.samples.PartialClassMockTest.testGetArea":8,"org.easymock.tests.MockingTest.testInterfaceMocking":432,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":313,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":225,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":437,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":440,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":385,"org.easymock.tests2.UsageTest.niceToStrict":109,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":238,"org.easymock.tests2.ThreadingTest.testChangeDefault":491,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":483,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":411,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":101,"org.easymock.tests2.MockBuilderTest.testCreateMock":284,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":389,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":355,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":466,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":246,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":92,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":461,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":198,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":289,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":480,"org.easymock.tests.UsageOverloadedMethodTest.overloading":195,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":391,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":41,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":270,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":167,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":194,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":40,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":63,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":453,"org.easymock.tests2.EasyMockSupportClassTest.testAll":130,"org.easymock.tests.MockClassControlTest.testEquals":328,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":146,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":254,"org.easymock.tests2.CaptureTest.testCaptureAll":55,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":277,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":333,"org.easymock.tests.MockNameTest.defaultName":455,"org.easymock.tests2.UsageConstraintsTest.testMatches":42,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":296,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":310,"org.easymock.samples.ExampleTest.voteForRemovals":5,"org.easymock.tests.UsageVarargTest.allKinds":223,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":181,"org.easymock.samples.BasicClassMockTest.testPrintContent":13,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":334,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":264,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":18,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":394,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":303,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":374,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":489,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":403,"org.easymock.tests2.UsageConstraintsTest.greaterThan":44,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":178,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":80,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":404,"org.easymock.samples.ExampleTest.voteForRemoval":2,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":83,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":364,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":445,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":280,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":105,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":229,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":484,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":417,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":89,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":260,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":381,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":299,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":393,"org.easymock.tests2.CaptureTest.testCaptureFirst":66,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":416,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":90,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":117,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":336,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":163,"org.easymock.tests2.UsageTest.moreThanOneArgument":107,"org.easymock.tests2.CaptureTest.testCapture2_2446744":65,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":190,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":104,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":222,"org.easymock.tests.GenericTest.testBridgedEquals":396,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":481,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":464,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":203,"org.easymock.tests.UsageExpectAndReturnTest.longType":159,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":87,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":331,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":255,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":454,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":49,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":253,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":451,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":293,"org.easymock.tests.UsageCallCountTest.tooManyCalls":204,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":390,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":164,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":357,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":242,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":263,"org.easymock.tests.MockingTest.testNiceClassMocking":435,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":121,"org.easymock.tests.MockingTest.testClassMocking":430,"org.easymock.tests2.UsageConstraintsTest.testContains":39,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":308,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":118,"org.easymock.tests2.UsageConstraintsTest.testFind":30,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":196,"org.easymock.tests.MockTypeTest.fromEasyMockClass":442,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":147,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":17,"org.easymock.tests.UsageExpectAndReturnTest.object":166,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":77,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":356,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":95,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":486,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":217,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":307,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":482,"org.easymock.tests.UsageTest.exactCallCountByLastCall":212,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":184,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":415,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":405,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":266,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":470,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":172,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":213,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":269,"org.easymock.tests.MockClassControlTest.testHashCode":327,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":369,"org.easymock.tests2.EasyMockSupportTest.testVerify":99,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":267,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":460,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":268,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":275,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":361,"org.easymock.tests.UsageVarargTest.varargCharAccepted":216,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":397,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":19,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":428,"org.easymock.tests2.UsageTest.openCallCountByLastCall":111,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":98,"org.easymock.tests.DefaultClassInstantiatorTest.object":298,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":459,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":305,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":386,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":244,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":261,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":351,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":368,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":78,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":326,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":243,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":173,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":450,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":133,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":325,"org.easymock.tests2.UsageTest.resumeIfFailure":116,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":441,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":302,"org.easymock.tests2.StubTest.stubWithReturnValue":144,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":474,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":165,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":50,"org.easymock.tests2.SerializationTest.testAllMockedMethod":129,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":188,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":467,"org.easymock.samples.SupportTest.voteForRemovals":11,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":395,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":371,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":249,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":490,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":427,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":340,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":407,"org.easymock.tests.UsageExpectAndThrowTest.object":247,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":47,"org.easymock.tests2.DelegateToTest.testWrongClass":140,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":235,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":236,"org.easymock.tests.UsageStrictMockTest.range":152,"org.easymock.samples.ConstructorCalledMockTest.testTax":273,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":345,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":94,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":120,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":479,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":248,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":102,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":210,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":320,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":380,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":290,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":468,"org.easymock.tests2.CaptureTest.testCaptureNone":62,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":338,"org.easymock.tests.UsageUnorderedTest.message":257,"org.easymock.tests.UsageVerifyTest.twoReturns":183,"org.easymock.tests.UsageVarargTest.varargByteAccepted":221,"org.easymock.tests2.ThreadingTest.testThreadSafe":82,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":387,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":202,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":439,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":12,"org.easymock.tests2.CaptureTest.testCapture_2617107":56,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":410,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":425,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":233,"org.easymock.tests2.UsageConstraintsTest.any":37,"org.easymock.tests2.StubTest.stub":143,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":317,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":452,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":426,"org.easymock.tests.UsageExpectAndThrowTest.longType":240,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":301,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":401,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":316,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":21,"org.easymock.tests2.SerializationTest.testClass":127,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":119,"org.easymock.tests.LimitationsTest.mockNativeMethod":197,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":175,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":337,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":350,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":24,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":465,"org.easymock.tests2.NameTest.nameForMocksControl":137,"org.easymock.tests2.MockedExceptionTest.testMockedException":287,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":352,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":382,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":209,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":193,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":241,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":347,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":71,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":103,"org.easymock.tests.MockingTest.testNicePartialClassMocking":192,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":76,"org.easymock.tests2.CaptureTest.testCaptureLast":61,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":348,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":409,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":126,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":34,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":48,"org.easymock.tests.MockingTest.testTwoMocks":431,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":379,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":156,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":245,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":114,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":52,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":492,"org.easymock.samples.ExampleTest.removeNonExistingDocument":272,"org.easymock.tests.UsageStrictMockTest.differentMethods":153,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":314,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":354,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":370,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":399,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":84,"org.easymock.tests2.MockBuilderTest.testCreateMockString":285,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":322,"org.easymock.tests.UsageExpectAndThrowTest.floatType":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":383,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":43,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":68,"org.easymock.tests.UsageVerifyTest.twoThrows":182,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":462,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":132,"org.easymock.samples.ExampleTest.voteAgainstRemoval":3,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":436,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":420,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":79,"org.easymock.tests.LimitationsTest.privateConstructor":448,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":478,"org.easymock.tests2.UsageConstraintsTest.testNotNull":51,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":265,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":286,"org.easymock.tests2.UsageTest.defaultResetToNice":113,"org.easymock.samples.ExampleTest.voteAgainstRemovals":0,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":187,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":171,"org.easymock.tests.UsageVarargTest.differentLength":218,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":349,"org.easymock.tests2.CallbackTest.callback":142,"org.easymock.tests2.UsageConstraintsTest.equals":359,"org.easymock.tests.UsageTest.openCallCountByLastCall":208,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":26,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":232,"org.easymock.tests.UsageCallCountTest.tooFewCalls":200,"org.easymock.tests2.ConstraintsToStringTest.nullToString":339,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":123,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":292,"org.easymock.tests.UsageThrowableTest.throwCheckedException":262,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":469,"org.easymock.tests.MockingTest.testStrictClassMocking":429,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":125,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":304,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":122,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":353,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":319,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":124,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":70,"org.easymock.tests.ObjectMethodsTest.testHashCode":306,"org.easymock.tests2.NameTest.nameForNiceMock":136,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":86,"org.easymock.tests2.DependencyTest.testInterfaceMocking":14,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":487,"org.easymock.samples.ExampleTest.addDocument":4,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":388,"org.easymock.tests2.DelegateToTest.testStubDelegate":139,"org.easymock.tests2.AnswerTest.stubAnswer":69,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":150,"org.easymock.tests.UsageVarargTest.varargLongAccepted":220,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":418,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":174,"org.easymock.tests.UsageExpectAndReturnTest.floatType":158,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":81,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":274,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":463,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":45,"org.easymock.tests.UsageThrowableTest.noUpperLimit":259,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":376,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":27,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":343,"org.easymock.tests2.SerializationTest.test":128,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":59,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":398,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":157,"org.easymock.tests2.UsageConstraintsTest.testSame":32,"org.easymock.samples.SupportTest.addDocument":10,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":315,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":384,"org.easymock.tests.GenericTest.testPackageScope":145,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":457,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":414,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":375,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":433,"org.easymock.tests2.NameTest.nameForMock":134,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":168,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":476,"org.easymock.tests2.UsageStrictMockTest.differentMethods":23,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":363,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":160,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":251,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":438,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":180,"org.easymock.tests2.MockedExceptionTest.testRealException":288,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":446,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":422,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":346,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":421,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":20,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":231,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":321,"org.easymock.tests2.NameTest.nameForStrictMock":135,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":367,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":471,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":16,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":75,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":344,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":400,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":46,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":100,"org.easymock.tests2.UsageStrictMockTest.range":22,"org.easymock.tests2.UsageConstraintsTest.lessThan":53,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":372,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":488,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":186,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":88,"org.easymock.tests2.CaptureTest.testCaptureRightOne":64,"org.easymock.tests2.UsageConstraintsTest.testOr":33,"org.easymock.tests.UsageRangeTest.combination":177,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":72,"org.easymock.tests.UsageTest.wrongArguments":207,"org.easymock.tests2.MockBuilderTest.testWithConstructor":472,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":323,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":161,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":185,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":169,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":402,"org.easymock.tests.UsageVarargTest.varargShortAccepted":219,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":309,"org.easymock.tests2.UsageConstraintsTest.cmpTo":38,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":360,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":413,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":112,"org.easymock.tests2.CaptureTest.testCaptureFromStub":279,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":311,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":366,"org.easymock.tests.UsageTest.unexpectedCallWithArray":330,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":149,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":201,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":475,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":170,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":151,"org.easymock.tests2.UsageConstraintsTest.constraints":28,"org.easymock.samples.ExampleTest.addAndChangeDocument":6,"org.easymock.tests.UsageStrictMockTest.testVerify":155,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":7,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":148,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":332,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":60,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":226,"org.easymock.tests.LimitationsTest.abstractClass":447,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":162,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":227,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":271,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":93,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":214}}]

[{"failures":[0,1],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.DefaultClassInstantiator:111","type":"mutation","status":-1},{"failures":[],"variableMapping":{"arguments":"newArgs"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","position":"org.easymock.internal.ArgumentToString:83","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(java.lang.Object[], 0, java.lang.Object[], int, int)","position":"org.easymock.internal.Invocation:64","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-2485406702001842607L","position":"org.easymock.internal.matchers.LessOrEqual:26","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<java.lang.reflect.Field>","position":"org.easymock.internal.Injector:200","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:90","type":"CtIfImpl"},"status":-2},{"failures":[2,3,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330],"binaryOperator":"org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null","name":"negateConditional","position":"org.easymock.internal.RecordState:85","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:583","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.SecurityException java.lang.SecurityException","position":"org.easymock.internal.Injector:208","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.Object java.lang.Object","position":"org.easymock.internal.Injector:122","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = org.easymock.internal.matchers.Equals.getExpected()","position":"org.easymock.internal.matchers.ArrayEquals:35","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<T>","position":"org.easymock.Capture:95","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","position":"org.easymock.internal.BridgeMethodResolver:246","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.createTypeVariableMap(java.lang.reflect.Method.getDeclaringClass())","position":"org.easymock.internal.BridgeMethodResolver:111","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ExpectedInvocationAndResults.getResults().add(org.easymock.internal.Result, org.easymock.internal.Range)","position":"org.easymock.internal.UnorderedBehavior:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.IArgumentMatcher.matches(java.lang.Object)) {\n    return true;\n} ","position":"org.easymock.internal.matchers.Or:39","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:98","type":"CtReturnImpl"},"status":-2},{"failures":[331],"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","position":"org.easymock.internal.BridgeMethodResolver:321","type":"mutation","status":-1},{"failures":[],"variableMapping":{"result":"bound","bound":"result"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:355","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)))","position":"org.easymock.internal.BridgeMethodResolver:359","type":"CtAssignmentImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"boolean boolean = ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) && org.easymock.internal.ClassProxyFactory.(org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable()))","position":"org.easymock.internal.AndroidClassProxyFactory:84","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:747","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return float","position":"org.easymock.EasyMock:1409","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Long>(long))","position":"org.easymock.EasyMock:958","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[])","position":"org.easymock.internal.ClassProxyFactory:94","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:79","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-3483500330975410177L","position":"org.easymock.internal.RuntimeExceptionWrapper:23","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.matchers.Captures<?> org.easymock.internal.matchers.Captures<?> : java.util.Collection<org.easymock.internal.matchers.Captures<?>>) {\n    org.easymock.internal.matchers.Captures<?>.setPotentialValue(null);\n}","position":"org.easymock.internal.Invocation:173","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-6785245714002503134L","position":"org.easymock.internal.matchers.Contains:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-8447010713532143168L","position":"org.easymock.internal.matchers.CompareTo:30","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[25,28,39,42,43,96,112,115,129,143,144,146,147,148,149,150,194,206,217,218,219,223,224,242,244,252,264,275,312,315,316,318,319,320,322,323],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.Object != null","position":"org.easymock.internal.matchers.NotNull:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object.equals(java.lang.Object)","position":"org.easymock.internal.matchers.Equals:40","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))) {\n    return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = java.lang.Integer.int","position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"f":"f","host":"host","testSubject":"host"},"name":"replace","transplant":{"sourceCode":"try {\n    java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.Injector:73","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.set(java.lang.Object, java.lang.Object)","position":"org.easymock.internal.Injector:131","type":"CtInvocationImpl"},"status":-2},{"failures":[21,35,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,97,129,143,146,147,148,149,150,228,229,230,231,312],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:289","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:265","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"delegateTo":"java.lang.Object.class"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.Injector:65","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int)","position":"org.easymock.internal.MocksBehavior:144","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","position":"org.easymock.internal.ReflectionUtils:149","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","position":"org.easymock.internal.BridgeMethodResolver:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:202","type":"CtInvocationImpl"},"status":-2},{"failures":[249,250,251],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.Invocation:210","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Long>(long))","position":"org.easymock.EasyMock:865","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:36","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass()","position":"org.easymock.internal.ClassProxyFactory:175","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","position":"org.easymock.internal.DefaultClassInstantiator:93","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\")","name":"math","position":"org.easymock.internal.DelegatingAnswer:86","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","position":"org.easymock.internal.InjectionTarget:59","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"arg":"value"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:293","type":"CtTryImpl"},"status":-2},{"failures":[332,288,304,305],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:92","type":"CtInvocationImpl"},"status":-1},{"failures":[331,333],"name":"returnValue","position":"org.easymock.internal.BridgeMethodResolver:213","type":"mutation","return":"return true","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1291","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return float","position":"org.easymock.EasyMock:1409","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:170","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:323","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.easymock.internal.EasyMockStatement(org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object) , java.lang.Object)","position":"org.easymock.EasyMockRunner:38","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","position":"org.easymock.internal.RecordState:171","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","position":"org.easymock.internal.MockBuilder:139","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","position":"org.easymock.internal.ReflectionUtils:95","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:93","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:164","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.ClassLoader java.lang.ClassLoader = null","position":"org.easymock.internal.EasyMockProperties:126","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int))","position":"org.easymock.ConstructorArgs:61","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return int","position":"org.easymock.EasyMock:1305","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:328","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)))","position":"org.easymock.Capture:124","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-4434322855124959723L","position":"org.easymock.internal.ThrowableWrapper:23","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[2,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,24,25,26,27,28,29,34,36,37,40,41,44,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,106,113,115,116,117,118,119,124,128,129,130,134,135,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,190,192,195,196,197,198,200,201,203,204,206,207,208,209,210,211,213,214,215,216,218,219,220,221,226,227,230,236,237,238,239,240,241,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,288,290,291,295,296,297,298,299,300,302,305,307,308,309,310,312,313,314,315,316,317,318,319,320,322,323,324,325,326],"variableMapping":{"initialPosition":"currentPosition","position":"currentPosition"},"name":"replace","transplant":{"sourceCode":"int = int","position":"org.easymock.internal.MocksBehavior:105","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:71","type":"CtOperatorAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1647","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","position":"org.easymock.internal.ReplayState:68","type":"CtInvocationImpl"},"status":-2},{"failures":[334],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","position":"org.easymock.internal.RecordState:263","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:90","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-504083241204488174L","position":"org.easymock.internal.matchers.GreaterOrEqual:26","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-8447010713532143168L","position":"org.easymock.internal.matchers.CompareTo:30","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.isEmpty()) || (!(this.boolean))) {\n    return true;\n} else {\n    final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.get(((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size()) - 1)).getExpectedInvocation();\n    return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation);\n}","position":"org.easymock.internal.UnorderedBehavior:104","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int = int","position":"org.easymock.internal.MocksBehavior:105","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1928","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","position":"org.easymock.internal.RecordState:263","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ObjectMethodsFilter:115","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((org.easymock.internal.Result == null) && (boolean)) {\n    org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()));\n} ","position":"org.easymock.internal.MocksBehavior:97","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl() : org.easymock.EasyMockSupport.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"bridgeMethod","bridgeMethod":"bridgeMethod"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","position":"org.easymock.internal.BridgeMethodResolver:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:90","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Float>(org.easymock.Capture<java.lang.Float>))","position":"org.easymock.EasyMock:1963","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:109","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"bridgeMethod":"m"},"name":"add","transplant":{"sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:70","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.ObjectMethodsFilter:75","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","position":"org.easymock.internal.RecordState:151","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1420","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","position":"org.easymock.ConstructorArgs:64","type":"CtTryImpl"},"status":-2},{"failures":[7,8,10,11,13,16,22,25,26,29,30,34,35,36,37,40,41,44,95,96,97,98,99,100,102,103,104,105,106,115,117,118,124,125,126,127,128,130,141,142,143,145,146,147,148,149,150,151,152,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,218,220,221,222,225,226,227,230,239,244,246,247,249,250,253,254,255,256,257,258,261,262,263,264,266,267,268,269,270,271,272,273,275,277,278,279,280,281,282,283,284,285,287,288,290,291,293,295,296,297,298,299,300,302,304,305,306,307,308,309,310,312,313,314,315,316,317,318,319,320,321,322,323,324,325],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","position":"org.easymock.internal.RecordState:102","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:84","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T> , this)","position":"org.easymock.EasyMockSupport:497","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"searchType":"searchType","paramTypes":"paramTypes","name":"name","this":"this"},"name":"add","transplant":{"sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.ReflectionUtils:93","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:412","type":"CtWhileImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","position":"org.easymock.EasyMock:2079","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","position":"org.easymock.internal.MocksControl:79","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isVarArgs()) {\n    int = java.lang.Math.java.lang.Math.min(int, ((java.lang.Class<?>[].int) - 1));\n} ","position":"org.easymock.internal.Invocation:136","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"i":"i","arguments":"arguments"},"name":"add","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = this.java.lang.Object[][int]","position":"org.easymock.internal.Invocation:118","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double.valueOf(0))","position":"org.easymock.internal.RecordState:52","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:471","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:582","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.ObjectMethodsFilter:60","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()","position":"org.easymock.internal.ArgumentToString:87","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount())","position":"org.easymock.internal.UnorderedBehavior:93","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:93","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Float>(float))","position":"org.easymock.EasyMock:1025","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1080","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.List<java.lang.reflect.Method>.size()])","position":"org.easymock.internal.BridgeMethodResolver:441","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:84","type":"CtLocalVariableImpl"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,24,25,26,27,28,29,34,35,36,37,40,41,44,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,106,107,108,109,110,111,113,115,116,117,118,119,124,126,127,128,129,130,133,134,135,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,218,219,220,221,225,226,227,228,229,230,231,236,237,238,239,240,241,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,288,290,291,295,296,297,298,299,300,302,305,307,308,309,310,311,312,313,314,315,316,317,318,319,320,322,323,324,325,326],"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","position":"org.easymock.internal.ExpectedInvocation:93","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1647","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","position":"org.easymock.EasyMock:1092","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.StringBuilder.toString()","position":"org.easymock.internal.ArgumentToString:95","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    java.lang.Object[][int] = java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int);\n}","position":"org.easymock.internal.Invocation:73","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeLong(java.lang.Long.longValue())","position":"org.easymock.internal.DefaultClassInstantiator:144","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Invocation:204","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:126","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","position":"org.easymock.internal.RecordState:133","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","position":"org.easymock.internal.Range:41","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","position":"org.easymock.internal.InjectionPlan:61","type":"CtThrowImpl"},"status":-2},{"failures":[189,254,256,264],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","position":"org.easymock.EasyMockSupport:480","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IArgumentMatcher org.easymock.IArgumentMatcher : java.util.List<org.easymock.IArgumentMatcher>) {\n    if (!(org.easymock.IArgumentMatcher.matches(java.lang.Object))) {\n        return false;\n    } \n}","position":"org.easymock.internal.matchers.And:38","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:259","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.easymock.IExpectationSetters<T>)(org.easymock.internal.MocksControl))","position":"org.easymock.EasyMock:562","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ClassProxyFactory:120","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.ClassProxyFactory:200","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","position":"org.easymock.internal.ClassInstantiatorFactory:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","position":"org.easymock.internal.ClassProxyFactory:205","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","position":"org.easymock.internal.ClassProxyFactory:207","type":"CtAssignmentImpl"},"status":-2},{"failures":[8,9,10,11,12,13,15,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,335,84,85,86,87,88,90,91,92,93,94,96,97,98,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,278,279,282,283,284,286,288,289,293,294,295,296,297,298,299,300,302,303,305,311,312,313,327,328,329,330],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.ExpectedInvocationAndResult>()","position":"org.easymock.internal.MocksBehavior:33","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","position":"org.easymock.EasyMock:2011","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","position":"org.easymock.EasyMock:2024","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"boolean = false","position":"org.easymock.internal.MocksBehavior:156","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","position":"org.easymock.EasyMock:2067","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(boolean.boolean, java.lang.Boolean.java.lang.Boolean)","position":"org.easymock.internal.ReflectionUtils:33","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","position":"org.easymock.internal.Range:45","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:112","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation> java.util.Stack<org.easymock.internal.Invocation> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.get()","position":"org.easymock.internal.LastControl:123","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.IMocksBehavior.addActual(org.easymock.internal.Invocation)","position":"org.easymock.internal.ReplayState:58","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:224","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:192","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Long>(long))","position":"org.easymock.EasyMock:865","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:198","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","position":"org.easymock.internal.RecordState:152","type":"CtInvocationImpl"},"status":-2},{"failures":[43,117,224,246],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return boolean","position":"org.easymock.internal.ErrorMessage:36","type":"CtReturnImpl"},"status":-1},{"failures":[332,336],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","position":"org.easymock.internal.MockBuilder:164","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","position":"org.easymock.internal.MockBuilder:69","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:221","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeLong(java.lang.Long.longValue())","position":"org.easymock.internal.DefaultClassInstantiator:144","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","position":"org.easymock.internal.BridgeMethodResolver:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:98","type":"CtIfImpl"},"status":-2},{"failures":[39,42,43,114,117,118,129,130,140,217,223,224,246,247],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","position":"org.easymock.internal.MocksBehavior:137","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int)","position":"org.easymock.internal.MocksBehavior:144","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:46","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","position":"org.easymock.internal.ClassProxyFactory:207","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","position":"org.easymock.internal.ReplayState:62","type":"CtIfImpl"},"status":-2},{"failures":[30,31,32,33,53,54,55,56,57,218,222,227,232,233,234,235,253,286,289,290,291,301,303,316,318,319,321,322],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()))","position":"org.easymock.internal.MocksBehavior:98","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Float>(float))","position":"org.easymock.EasyMock:932","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":146,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":116,"org.easymock.tests2.MockedExceptionTest.testRealException":231,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":302,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":113,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":79,"org.easymock.tests.UsageVarargTest.varargIntAccepted":86,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":34,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":187,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":2,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":48,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":313,"org.easymock.tests2.UsageConstraintsTest.testContains":199,"org.easymock.tests.UsageCallCountTest.tooManyCalls":139,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":157,"org.easymock.tests2.UsageConstraintsTest.testFind":191,"org.easymock.tests.UsageVarargTest.allKinds":94,"org.easymock.tests2.StubTest.stubWithReturnValue":312,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":259,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":33,"org.easymock.tests2.CaptureTest.testCaptureAll":255,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":141,"org.easymock.samples.ExampleTest.addAndChangeDocument":15,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":286,"org.easymock.tests.UsageVarargTest.varargCharAccepted":87,"org.easymock.tests2.CaptureTest.testCaptureFromStub":265,"org.easymock.tests.UsageVerifyTest.twoThrows":129,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":26,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":88,"org.easymock.tests2.DelegateToTest.testReturnException":238,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":219,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":203,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":325,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":243,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":331,"org.easymock.tests2.CaptureTest.testAnd":254,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":1,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":165,"org.easymock.tests.UsageStrictMockTest.testVerify":120,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":72,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":20,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":263,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":76,"org.easymock.tests2.UsageConstraintsTest.testMatches":202,"org.easymock.tests.MockClassControlTest.testToString":47,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":54,"org.easymock.tests2.UsageConstraintsTest.testNull":192,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":277,"org.easymock.tests2.EasyMockSupportClassTest.testAll":307,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":164,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":319,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":80,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":179,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":253,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":24,"org.easymock.tests.UsageThrowableTest.throwError":143,"org.easymock.tests2.UsageConstraintsTest.greaterThan":204,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":84,"org.easymock.samples.SupportTest.addDocument":6,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":29,"org.easymock.tests2.StubTest.stub":311,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":160,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":158,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":105,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":25,"org.easymock.tests.UsageExpectAndReturnTest.object":176,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":185,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":206,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":322,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":93,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":248,"org.easymock.tests.UsageExpectAndThrowTest.object":74,"org.easymock.tests2.DelegateToTest.testWrongClass":240,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":270,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":60,"org.easymock.tests2.UsageTest.moreThanOneArgument":216,"org.easymock.tests.UsageVarargTest.varargByteAccepted":92,"org.easymock.tests.MockClassControlTest.testEquals":51,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":71,"org.easymock.samples.ExampleTest.voteAgainstRemoval":11,"org.easymock.tests.UsageTest.wrongArguments":39,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":56,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":149,"org.easymock.tests.UsageVarargTest.varargShortAccepted":90,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":123,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":75,"org.easymock.tests2.UsageTest.defaultResetToNice":222,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":230,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":104,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":5,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":271,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":291,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":45,"org.easymock.tests2.MockBuilderTest.testCreateMock":292,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":272,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":332,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":154,"org.easymock.tests2.SerializationTest.testAllMockedMethod":251,"org.easymock.tests2.NameTest.nameForMocksControl":330,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":159,"org.easymock.samples.ExampleTest.voteAgainstRemovals":8,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":242,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":126,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":28,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":95,"org.easymock.tests2.CaptureTest.testCapture1_2446744":258,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":226,"org.easymock.tests.LimitationsTest.mockNativeMethod":151,"org.easymock.tests2.DelegateToTest.testStubDelegate":239,"org.easymock.tests.UsageUnorderedTest.message":140,"org.easymock.samples.ExampleTest.answerVsDelegate":9,"org.easymock.samples.ExampleTest.voteForRemoval":10,"org.easymock.tests.UsageCallCountTest.tooFewCalls":134,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":175,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":136,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":274,"org.easymock.tests.UsageVerifyTest.twoReturns":130,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":73,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":170,"org.easymock.tests2.DependencyTest.testInterfaceMocking":284,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":22,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":314,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":59,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":317,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":235,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":195,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":30,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":119,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":172,"org.easymock.tests2.CaptureTest.testCaptureRightOne":264,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":133,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":31,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":155,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":228,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":300,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":125,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":156,"org.easymock.tests2.UsageConstraintsTest.cmpTo":198,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":131,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":177,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":279,"org.easymock.tests2.MockedExceptionTest.testMockedException":229,"org.easymock.tests.UsageThrowableTest.throwCheckedException":147,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":83,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":109,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":210,"org.easymock.samples.PartialClassMockTest.testGetArea":16,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":128,"org.easymock.samples.ExampleTest.voteForRemovals":13,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":145,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":97,"org.easymock.samples.ConstructorCalledMockTest.testTax":3,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":201,"org.easymock.tests.ReplayStateInvalidUsageTest.times":162,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":21,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":61,"org.easymock.tests2.UsageTest.argumentsOrdered":224,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":299,"org.easymock.samples.ExampleTest.removeNonExistingDocument":14,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":36,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":276,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":171,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":53,"org.easymock.tests2.AnswerTest.answer":273,"org.easymock.tests.MockingTest.testNicePartialClassMocking":99,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":115,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":167,"org.easymock.tests2.UsageConstraintsTest.any":197,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":174,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":106,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":111,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":324,"org.easymock.tests.UsageExpectAndThrowTest.longType":67,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":81,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":237,"org.easymock.tests2.CallbackTest.callback":252,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":309,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":321,"org.easymock.tests2.NameTest.nameForMock":327,"org.easymock.tests.UsageTest.argumentsOrdered":43,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":190,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":290,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":200,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":184,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":27,"org.easymock.tests2.MockBuilderTest.testCreateMockString":294,"org.easymock.tests2.NameTest.nameForStrictMock":328,"org.easymock.tests2.CaptureTest.testCaptureNone":262,"org.easymock.tests2.SerializationTest.test":250,"org.easymock.tests.UsageExpectAndReturnTest.longType":169,"org.easymock.tests2.SerializationTest.testClass":249,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":260,"org.easymock.tests2.CaptureTest.testCaptureFirst":267,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":207,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":17,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":58,"org.easymock.tests2.UsageTest.niceToStrict":218,"org.easymock.tests2.EasyMockSupportTest.testVerify":326,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":121,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":57,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":289,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":112,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":69,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":209,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":214,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":77,"org.easymock.tests2.UsageTest.strictResetToDefault":215,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":183,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":293,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":305,"org.easymock.tests.GenericTest.testBridgedEquals":333,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":35,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":64,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":196,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":173,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":281,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":232,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":301,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":85,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":205,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":298,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":295,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":63,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":100,"org.easymock.tests2.UsageConstraintsTest.testOr":194,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":334,"org.easymock.tests2.DelegateToTest.testDelegate":241,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":269,"org.easymock.tests2.UsageConstraintsTest.testNotNull":211,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":245,"org.easymock.tests.MockClassControlTest.testHashCode":50,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":227,"org.easymock.tests2.CaptureTest.testCapture_2617107":256,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":163,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":142,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":150,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":178,"org.easymock.tests2.ThreadingTest.testThreadSafe":268,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":221,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":108,"org.easymock.tests.UsageThrowableTest.noUpperLimit":144,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":278,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":280,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":323,"org.easymock.tests.UsageExpectAndReturnTest.floatType":168,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":315,"org.easymock.tests2.UsageTest.wrongArguments":217,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":234,"org.easymock.tests2.UsageConstraintsTest.testSame":193,"org.easymock.tests2.UsageTest.resumeIfFailure":225,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":49,"org.easymock.tests.UsageOverloadedMethodTest.overloading":96,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":282,"org.easymock.samples.SupportTest.voteForRemovals":7,"org.easymock.tests.UsageRangeTest.combination":124,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":148,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":4,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":212,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":153,"org.easymock.tests.UsageTest.openCallCountByLastCall":40,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":70,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":161,"org.easymock.tests2.NameTest.nameForNiceMock":329,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":127,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":208,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":107,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":244,"org.easymock.tests2.CaptureTest.testPrimitive":257,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":297,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":180,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":78,"org.easymock.samples.BasicClassMockTest.testPrintContent":18,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":32,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":102,"org.easymock.tests.UsageExpectAndThrowTest.floatType":66,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":303,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":138,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":181,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":236,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":296,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":132,"org.easymock.tests2.UsageStrictMockTest.differentMethods":247,"org.easymock.tests.UsageTest.exactCallCountByLastCall":44,"org.easymock.tests2.AnswerTest.stubAnswer":275,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":316,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":320,"org.easymock.tests2.CaptureTest.testCaptureLast":261,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":336,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":65,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":137,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":135,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":285,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":308,"org.easymock.tests.UsageStrictMockTest.range":117,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":41,"org.easymock.tests.UsageTest.unexpectedCallWithArray":38,"org.easymock.tests.MockingTest.testPartialClassMocking":98,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":182,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":223,"org.easymock.tests2.UsageConstraintsTest.constraints":189,"org.easymock.samples.ExampleTest.addDocument":12,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":23,"org.easymock.tests2.UsageConstraintsTest.lessThan":213,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":233,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":42,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":19,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":186,"org.easymock.tests.UsageVarargTest.varargLongAccepted":91,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":110,"org.easymock.tests.ObjectMethodsTest.testHashCode":122,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":304,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":306,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":114,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":82,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":310,"org.easymock.tests2.UsageStrictMockTest.range":246,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":283,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":55,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":335,"org.easymock.tests.UsageTest.moreThanOneArgument":37,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":52,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":103,"org.easymock.tests2.UsageTest.openCallCountByLastCall":220,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":287,"org.easymock.tests.UsageStrictMockTest.differentMethods":118,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":0,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":318,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":46,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":188,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":288,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":68,"org.easymock.tests.DefaultClassInstantiatorTest.object":101,"org.easymock.tests.UsageVarargTest.differentLength":89,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":166,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":62,"org.easymock.tests2.CaptureTest.testCapture2_2446744":266,"org.easymock.tests.GenericTest.testPackageScope":152}}]

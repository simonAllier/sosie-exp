[{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1726","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:206","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[172,173,174,175,176,177],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareEqual:39","failures":[178,68,89],"status":-1,"binaryOperator":"int == 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:355","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[179,180],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[172,173,174,175,176,177],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[76],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:49","sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","type":"CtInvocationImpl"},"failures":[181,182,178,183,184],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[1,2,3,185,4,186,5,187,6,7,188,8,9,10,11,12,13,14,15,17,18,19,20,189,21,22,23,24,25,26,190,191,192,27,28,193,194,29,30,31,32,33,34,35,36,37,38,195,39,40,196,197,41,42,43,44,45,46,47,48,49,198,50,199,51,52,200,201,54,55,202,56,203,204,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,205,79,80,81,82,83,84,85,86,87,88,89,91,94,95,96,98,99,100,101,102,103,206,207,208,104,209,105,106,210,107,211,212,108,213,109,214,110,215,216,217,112,218,113,114,219,220,221,222,223,224,225,115,116,226,227,117,228,180,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,118,119,120,121,122,249,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,250,251,252,253,254,255,256,257,258,259,155,157,158,159,260,160,161,162,163,164,165,261,166,167,262,263,168,169,170,264,265,266,171,267,268],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:82","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])));\n} ","type":"CtIfImpl"},"failures":[269,270,271,1,2,3,272,273,185,4,274,275,5,187,6,7,188,8,276,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,190,191,192,27,28,194,29,30,31,32,33,34,35,36,37,38,195,39,40,196,197,41,42,43,44,277,45,46,47,48,49,198,50,199,51,52,53,200,201,54,55,278,202,56,203,279,204,57,58,59,60,61,62,63,64,65,66,280,67,68,69,70,71,72,73,74,75,76,77,78,205,79,80,81,82,83,84,85,86,87,88,89,281,90,91,92,282,283,93,284,94,95,96,97,285,98,286,287,288,99,289,100,101,102,103,104,209,105,106,107,211,290,290,291,291,108,109,292,293,294,295,296,297,214,298,299,300,301,302,303,304,305,306,307,308,110,111,309,310,311,312,313,314,315,217,112,218,113,114,219,316,317,318,220,319,320,115,116,226,227,117,321,228,180,322,323,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,118,324,119,120,121,122,249,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,325,326,327,328,329,330,331,150,151,152,153,154,259,155,156,157,158,159,260,160,332,161,162,163,164,165,333,261,166,167,262,263,168,334,335,336,337,338,339,340,341,342,343,344,169,170,264,265,266,171,267,345,346,347,348,268,349],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"method","finalizeMethod":"method"}},{"transplant":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:46","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>, java.lang.Byte.java.lang.Byte.valueOf(((byte)(0))))","type":"CtInvocationImpl"},"failures":[269,270,271,350,351,352,1,2,3,272,273,185,4,274,275,186,5,187,6,7,188,353,354,355,356,357,8,276,358,359,360,361,362,9,10,11,12,13,14,15,16,17,18,19,20,189,21,22,23,24,25,26,363,364,190,191,365,192,27,28,193,194,29,30,31,32,33,366,34,35,36,367,368,369,370,371,37,38,195,39,40,196,197,41,42,43,44,277,45,46,47,48,49,198,50,199,51,52,53,200,201,54,55,278,202,56,203,279,204,372,57,58,59,60,373,61,62,63,64,65,66,280,67,68,69,70,71,72,73,74,75,76,77,78,205,79,80,81,82,374,375,376,377,378,83,84,85,86,87,88,379,380,89,381,382,281,90,91,92,383,282,283,384,93,284,385,386,94,387,95,388,96,389,390,391,97,392,285,393,394,395,396,397,98,286,398,399,400,401,402,287,288,99,289,403,404,405,100,406,407,101,408,409,410,411,412,413,414,415,416,102,417,418,419,420,421,103,422,0,206,207,208,104,209,105,106,210,107,423,211,290,291,212,108,213,109,292,293,294,295,296,297,424,172,173,174,175,425,176,426,177,214,427,428,429,430,431,432,433,434,435,436,437,438,298,299,300,301,302,303,304,305,306,307,308,439,110,215,111,309,440,441,310,311,312,442,313,314,315,216,217,112,218,113,114,219,443,316,317,318,444,445,220,221,222,223,446,224,225,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,319,463,179,464,465,466,320,467,115,116,226,227,117,321,228,180,322,323,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,468,469,118,470,324,471,472,473,119,120,474,121,475,476,477,122,249,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,325,478,326,479,327,328,329,330,331,150,151,152,153,154,250,251,252,480,253,254,481,255,256,257,258,259,155,156,157,158,159,260,160,332,161,162,163,164,165,333,261,166,167,262,263,168,334,335,336,482,337,338,483,339,484,485,340,341,342,343,344,169,170,264,486,265,266,487,171,488,267,345,346,347,348,268,349],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:79","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"failures":[186,187,6,7,188,12,18,19,20,189,193,38,195,196,197,41,42,46,198,199,200,201,205,94,206,207,208,104,105,106,210,107,211,212,108,213,214,215,216,217,218,113,114,219,221,222,223,224,225,226,249,250,251,252,253,254,255,256,257,258,259,261,262,263,337,338,267],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"this.org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[5,29,277,57,58,61,62,63,64,69,71,72,74,75,80,81,82,290,291,427,301,302,303,304,305,112,447,451,452,461,464,115,116,117,149,150,151,152,153,154,332,169,170],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","delegateTo":"value"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:122","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[27,28,193],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1531","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[26,363,489,490,491,492,493,494,495,27,388,390,496,497],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:193","sourceCode":"if (!(this.boolean)) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:217","sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[1,2,185,186,187,6,7,188,8,9,10,11,12,13,14,15,17,18,19,20,189,24,25,26,190,27,28,193,30,31,32,33,34,35,36,37,38,195,39,196,197,41,42,43,44,46,48,198,50,199,200,201,202,203,204,60,65,66,67,68,70,73,76,77,78,205,79,83,84,85,86,87,88,89,91,94,95,96,98,99,100,101,102,103,206,207,208,104,105,106,210,107,211,212,108,213,109,214,110,215,216,217,218,113,114,219,221,222,223,224,225,115,116,226,227,231,232,234,239,244,118,119,120,121,122,249,124,125,126,127,128,131,132,134,139,144,250,251,252,253,254,255,256,257,258,259,155,260,161,162,261,262,263,337,338,264,265,266,171,267],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"shouldBeUsedInOneThread":"lastInvocationUsed"}},{"position":"org.easymock.internal.Invocation:195","failures":[353,354,355,356,357,8,276,358,359,360,361,362,12,15,17,30,31,36,375,376,377,378,84,281,92,282,283,284,96,97,285,393,394,395,396,397,98,286,398,399,400,401,402,404,405,406,408,411,412,417,419,420,498,339,341,343],"status":-1,"binaryOperator":"(((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[27,28,193,499],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[27,28,193,499],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"position":"org.easymock.internal.RecordState:99","failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:642","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[67,149],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Contains:40","sourceCode":"java.lang.StringBuffer.append(((\"contains(\\\"\" + (java.lang.String)) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[500],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[363,490,491,492,495,388],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"parameterType"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[27,28,193,499],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:231","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[405],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[26,363,490,491,492,501,495,27,388,390],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[502,503,504],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"failures":[5,6,7,217,112,113,114,443],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:305","failures":[1,2,3,4,274,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,190,27,28,29,30,31,32,33,34,35,36,37,38,195,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,202,56,203,204,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,205,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,209,105,106,107,108,109,110,112,113,114,319,115,116,117,321,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,325,150,151,152,153,154,250,155,156,157,158,159,260,160,161,162,163,164,165,166,167,168,337,338,169,170,264,265,266,171,268],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[505,506],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[37,195,44,59,60,62,64,65,280,76,80],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MocksControl:190","failures":[275,6,7,10,12,14,15,18,19,20,190,44,50,199,201,60,65,66,67,70,76,77,78,79,84,91,97,214,315,113,114,122,249,124,125,126,127,128,155,260,162,263],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[27,28,193,499],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[5,29,277,57,58,61,62,63,64,69,71,72,74,75,76,80,81,82,290,290,291,291,427,301,302,303,304,305,112,447,451,452,461,464,115,116,117,149,150,151,152,153,154,332,169,170],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[507,508],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:92","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[509,510,27,379,90,91,507,93,94,95,96,97,508,285,109,441,339,342],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[511,512,217,513,514,333],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[193,30,33,368,369,83,84,86,87,88,89,382,281,92,383,282,288,99,403,100,407,408,409,412,415,417,418,421,207,208,172,173,174,175,425,176,177,110,215,309,440,441,310,311,312,442,313,314,468,469,118,470,471,472,473,477,267],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"interceptor":"interceptor","mockedMethods":"mockedMethods"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"failures":[269,270,271,350,1,2,3,185,4,274,275,186,5,187,6,7,188,8,9,10,11,12,13,14,15,16,17,18,19,20,189,21,22,24,25,26,190,191,192,27,28,193,194,29,30,31,32,33,34,35,36,37,38,195,39,40,196,197,41,42,43,44,277,45,46,47,48,49,198,50,199,51,52,53,200,201,54,55,202,56,203,204,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,205,79,80,81,82,83,84,85,86,87,88,379,89,281,90,91,92,283,93,94,387,95,96,391,97,285,98,287,288,99,289,100,101,102,103,206,207,208,104,209,105,106,210,107,211,290,291,212,108,213,109,214,301,302,303,304,305,110,215,315,216,217,112,218,113,114,219,220,221,222,223,446,224,225,115,116,226,227,117,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,118,119,120,121,122,249,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,325,327,328,329,330,331,150,151,152,153,154,250,251,252,253,254,481,255,256,257,258,259,155,157,158,159,260,160,161,162,163,164,165,333,261,166,167,262,263,168,334,335,336,482,169,170,264,265,266,488,267,345,346,347,348,268,349],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":60,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":164,"org.easymock.tests2.UsageTest.argumentsOrdered":201,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":19,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":286,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":457,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":199,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":213,"org.easymock.tests2.DelegateToTest.testReturnException":202,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":346,"org.easymock.tests.MockingTest.testPartialClassMocking":119,"org.easymock.tests.MockClassControlTest.testToString":310,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":374,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":326,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":464,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":411,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":101,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":229,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":2,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":490,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":66,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":115,"org.easymock.tests2.UsageTest.wrongArguments":198,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":362,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":336,"org.easymock.samples.ExampleTest.answerVsDelegate":209,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":342,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":476,"org.easymock.tests2.UsageConstraintsTest.testNull":62,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":86,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":18,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":314,"org.easymock.tests2.CaptureTest.testPrimitive":39,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":117,"org.easymock.tests.UsageTest.moreThanOneArgument":165,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":248,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":85,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":303,"org.easymock.tests.UsageTest.argumentsOrdered":263,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":321,"org.easymock.tests.UsageVarargTest.varargIntAccepted":252,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":462,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":150,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":494,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":283,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":401,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":387,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":449,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":154,"org.easymock.tests.ReplayStateInvalidUsageTest.times":435,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":8,"org.easymock.tests2.DependencyTest.testClassMocking":351,"org.easymock.tests2.AnswerTest.answer":3,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":463,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":350,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":485,"org.easymock.tests2.CaptureTest.testAnd":37,"org.easymock.tests2.UsageTest.strictResetToDefault":48,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":385,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":281,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":302,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":157,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":13,"org.easymock.tests2.DelegateToTest.testDelegate":204,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":323,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":244,"org.easymock.tests.LimitationsTest.mockFinalMethod":470,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":268,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":331,"org.easymock.tests2.DependencyTest.testClassMockingSupport":352,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":337,"org.easymock.tests2.CaptureTest.testCapture1_2446744":40,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":380,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":242,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":270,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":429,"org.easymock.tests.UsageThrowableTest.throwError":122,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":341,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":498,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":402,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":305,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":0,"org.easymock.samples.PartialClassMockTest.testGetArea":109,"org.easymock.tests.MockingTest.testInterfaceMocking":474,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":430,"org.easymock.tests2.CompareToTest.testLessOrEqual":184,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":151,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":317,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":412,"org.easymock.tests2.UsageTest.niceToStrict":50,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":230,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":297,"org.easymock.tests2.ThreadingTest.testChangeDefault":506,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":504,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":447,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":94,"org.easymock.tests2.MockBuilderTest.testCreateMock":391,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":419,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":359,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":511,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":238,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":14,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":484,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":300,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":444,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":334,"org.easymock.tests.UsageOverloadedMethodTest.overloading":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":421,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":416,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":71,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":266,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":161,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":140,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":70,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":43,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":480,"org.easymock.tests2.EasyMockSupportClassTest.testAll":100,"org.easymock.tests.MockClassControlTest.testEquals":313,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":215,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":246,"org.easymock.tests2.CaptureTest.testCaptureAll":38,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":271,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":329,"org.easymock.tests.MockNameTest.defaultName":324,"org.easymock.tests2.UsageConstraintsTest.testMatches":72,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":427,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":304,"org.easymock.samples.ExampleTest.voteForRemovals":107,"org.easymock.tests.UsageVarargTest.allKinds":259,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":159,"org.easymock.samples.BasicClassMockTest.testPrintContent":208,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":330,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":127,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":275,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":398,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":279,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":349,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":495,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":426,"org.easymock.tests2.UsageConstraintsTest.greaterThan":74,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":406,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":156,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":92,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":177,"org.easymock.samples.ExampleTest.voteForRemoval":105,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":22,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":383,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":343,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":379,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":47,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":267,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":390,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":454,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":11,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":123,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":404,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":345,"org.easymock.tests2.CaptureTest.testCaptureFirst":46,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":278,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":453,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":12,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":55,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":488,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":136,"org.easymock.tests2.CaptureTest.testCapture2_2446744":45,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":24,"org.easymock.tests2.UsageTest.moreThanOneArgument":49,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":179,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":97,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":258,"org.easymock.tests.GenericTest.testBridgedEquals":309,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":224,"org.easymock.tests.UsageExpectAndReturnTest.longType":132,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":9,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":327,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":508,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":247,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":205,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":332,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":245,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":301,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":307,"org.easymock.tests.UsageCallCountTest.tooManyCalls":225,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":220,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":420,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":137,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":361,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":234,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":126,"org.easymock.tests.MockingTest.testNiceClassMocking":477,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":31,"org.easymock.tests.MockingTest.testClassMocking":472,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":507,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":445,"org.easymock.tests2.UsageConstraintsTest.testContains":69,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":99,"org.easymock.tests2.UsageConstraintsTest.testFind":61,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":163,"org.easymock.tests.MockTypeTest.fromEasyMockClass":340,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":192,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":315,"org.easymock.tests.UsageExpectAndReturnTest.object":139,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":89,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":360,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":17,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":491,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":254,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":295,"org.easymock.tests.UsageTest.exactCallCountByLastCall":168,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":452,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":478,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":228,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":363,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":145,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":250,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":265,"org.easymock.tests.MockClassControlTest.testHashCode":442,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":394,"org.easymock.tests2.EasyMockSupportTest.testVerify":189,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":414,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":180,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":264,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":299,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":269,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":372,"org.easymock.tests.UsageVarargTest.varargCharAccepted":253,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":424,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":186,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":467,"org.easymock.tests2.UsageTest.openCallCountByLastCall":51,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":502,"org.easymock.tests.DefaultClassInstantiatorTest.object":172,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":20,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":298,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":415,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":236,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":124,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":356,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":393,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":90,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":312,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":235,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":146,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":306,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":103,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":311,"org.easymock.tests2.UsageTest.resumeIfFailure":54,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":339,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":348,"org.easymock.tests2.StubTest.stubWithReturnValue":29,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":388,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":138,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":79,"org.easymock.tests2.SerializationTest.testAllMockedMethod":193,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":319,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":497,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":512,"org.easymock.samples.SupportTest.voteForRemovals":108,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":439,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":396,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":241,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":499,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":320,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":272,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":479,"org.easymock.tests.UsageExpectAndThrowTest.object":239,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":77,"org.easymock.tests2.DelegateToTest.testWrongClass":203,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":169,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":170,"org.easymock.tests.UsageStrictMockTest.range":113,"org.easymock.samples.ConstructorCalledMockTest.testTax":290,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":370,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":16,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":30,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":240,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":95,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":437,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":403,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":262,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":335,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":513,"org.easymock.tests2.CaptureTest.testCaptureNone":42,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":318,"org.easymock.tests.UsageUnorderedTest.message":214,"org.easymock.tests.UsageVerifyTest.twoReturns":160,"org.easymock.tests.UsageVarargTest.varargByteAccepted":257,"org.easymock.tests2.ThreadingTest.testThreadSafe":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":417,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":223,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":207,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":296,"org.easymock.tests2.CaptureTest.testCapture_2617107":195,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":483,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":465,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":227,"org.easymock.tests2.UsageConstraintsTest.any":67,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":434,"org.easymock.tests2.StubTest.stub":194,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":308,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":466,"org.easymock.tests.UsageExpectAndThrowTest.longType":232,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":347,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":425,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":433,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":187,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":98,"org.easymock.tests2.SerializationTest.testClass":27,"org.easymock.tests.LimitationsTest.mockNativeMethod":118,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":148,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":111,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":510,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":355,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":188,"org.easymock.tests2.NameTest.nameForMocksControl":378,"org.easymock.tests2.MockedExceptionTest.testMockedException":288,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":357,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":407,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":167,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":121,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":233,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":365,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":83,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":96,"org.easymock.tests.MockingTest.testNicePartialClassMocking":120,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":88,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":489,"org.easymock.tests2.CompareToTest.testCompareEqual":178,"org.easymock.tests2.CaptureTest.testCaptureLast":41,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":353,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":338,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":36,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":65,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":78,"org.easymock.tests.MockingTest.testTwoMocks":473,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":367,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":129,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":237,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":200,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":81,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":505,"org.easymock.samples.ExampleTest.removeNonExistingDocument":423,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":431,"org.easymock.tests.UsageStrictMockTest.differentMethods":114,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":358,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":395,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":174,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":23,"org.easymock.tests2.MockBuilderTest.testCreateMockString":285,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":440,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":408,"org.easymock.tests.UsageExpectAndThrowTest.floatType":231,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":73,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":405,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":185,"org.easymock.tests.UsageVerifyTest.twoThrows":260,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":364,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":486,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":102,"org.easymock.samples.ExampleTest.voteAgainstRemoval":106,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":458,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":316,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":91,"org.easymock.tests.LimitationsTest.privateConstructor":469,"org.easymock.tests2.UsageConstraintsTest.testNotNull":80,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":128,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":287,"org.easymock.tests2.UsageTest.defaultResetToNice":53,"org.easymock.samples.ExampleTest.voteAgainstRemovals":104,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":459,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":144,"org.easymock.tests.UsageVarargTest.differentLength":481,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":354,"org.easymock.tests2.CallbackTest.callback":190,"org.easymock.tests2.UsageConstraintsTest.equals":373,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":381,"org.easymock.tests.UsageTest.openCallCountByLastCall":166,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":57,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":226,"org.easymock.tests.UsageCallCountTest.tooFewCalls":221,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":33,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":482,"org.easymock.tests.UsageThrowableTest.throwCheckedException":125,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":514,"org.easymock.tests.MockingTest.testStrictClassMocking":471,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":35,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":325,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":32,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":276,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":436,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":34,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":274,"org.easymock.tests2.CompareToTest.testGreateOrEqual":183,"org.easymock.tests.ObjectMethodsTest.testHashCode":294,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":493,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":25,"org.easymock.tests2.NameTest.nameForNiceMock":377,"org.easymock.tests2.DependencyTest.testInterfaceMocking":1,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":492,"org.easymock.samples.ExampleTest.addDocument":210,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":418,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":422,"org.easymock.tests2.DelegateToTest.testStubDelegate":56,"org.easymock.tests2.AnswerTest.stubAnswer":4,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":112,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":389,"org.easymock.tests.UsageVarargTest.varargLongAccepted":256,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":219,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":456,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":147,"org.easymock.tests.UsageExpectAndReturnTest.floatType":131,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":26,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":291,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":487,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":400,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":75,"org.easymock.tests.UsageThrowableTest.noUpperLimit":249,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":58,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":368,"org.easymock.tests2.SerializationTest.test":28,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":196,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":173,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":130,"org.easymock.tests2.UsageConstraintsTest.testSame":63,"org.easymock.samples.SupportTest.addDocument":212,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":366,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":432,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":409,"org.easymock.tests.GenericTest.testPackageScope":110,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":322,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":451,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":399,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":475,"org.easymock.tests2.NameTest.nameForMock":375,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":141,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":392,"org.easymock.tests2.UsageStrictMockTest.differentMethods":7,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":382,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":133,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":243,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":292,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":158,"org.easymock.tests2.MockedExceptionTest.testRealException":289,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":344,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":461,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":371,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":496,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":460,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":5,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":438,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":116,"org.easymock.tests2.NameTest.nameForStrictMock":376,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":386,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":503,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":191,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":87,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":369,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":175,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":76,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":93,"org.easymock.tests2.UsageStrictMockTest.range":6,"org.easymock.tests2.UsageConstraintsTest.lessThan":82,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":397,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":501,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":455,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":413,"org.easymock.tests2.CaptureTest.testCaptureRightOne":44,"org.easymock.tests2.UsageConstraintsTest.testOr":64,"org.easymock.tests.UsageRangeTest.combination":155,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":84,"org.easymock.tests.UsageTest.wrongArguments":261,"org.easymock.tests2.MockBuilderTest.testWithConstructor":384,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":410,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":441,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":134,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":448,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":142,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":176,"org.easymock.tests.UsageVarargTest.varargShortAccepted":255,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":446,"org.easymock.tests2.UsageConstraintsTest.cmpTo":68,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":273,"org.easymock.tests2.CompareToTest.testLessThan":181,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":450,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":52,"org.easymock.tests2.CaptureTest.testCaptureFromStub":277,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":428,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":284,"org.easymock.tests.UsageTest.unexpectedCallWithArray":333,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":217,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":222,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":143,"org.easymock.tests2.UsageConstraintsTest.constraints":59,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":218,"org.easymock.samples.ExampleTest.addAndChangeDocument":211,"org.easymock.tests2.ConstraintsToStringTest.containsToString":500,"org.easymock.tests.UsageStrictMockTest.testVerify":443,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":206,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":216,"org.easymock.tests2.CompareToTest.testGreateThan":182,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":328,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":197,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":509,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":152,"org.easymock.tests.LimitationsTest.abstractClass":468,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":135,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":171,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":153,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":15,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":251}}]

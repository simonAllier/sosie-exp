[{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[0,1,2,3],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[4,5,6,7,8,9],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[10,11],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:180","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[25,26],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:89","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[27],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[28,29,30],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.EasyMock:1725","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:93","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"failures":[31,28,32,29,33,30,34,35,13,14,22],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[31,28,32,29,33,35,13,36,14,19,37,22,24,38,39,40,41],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[42,43],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>).append(\")\")","type":"CtInvocationImpl"},"failures":[44],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:60","sourceCode":"return org.easymock.internal.Result.answer()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:59","sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","type":"CtTryImpl"},"failures":[45,46],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1459","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:206","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[47],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:107","failures":[48,49,50,51,51,52,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,25,67,68,69,70,71,0,2,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,47,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,26,143,144,145,42,146,147,148,43,149,150],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Not:40","sourceCode":"java.lang.StringBuffer.append(\"not(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[4,151,5,152,153,154,155,156,6,7,157,158,8,159,160,161,9],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[126,127,128,129,130],"status":-1,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.LogicalOperator:62","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[4,151,5,152,153,154,155,156,6,7,157,158,8,159,160,161,9],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:213","sourceCode":"return org.easymock.internal.RecordState.createNumberObject(java.lang.Object, java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"expected":"o"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[162],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[163,164,165,166,167,168,169],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:32","sourceCode":"new java.util.concurrent.locks.ReentrantLock()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:196","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"failures":[170,162],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[126],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:759","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Integer>(int))","type":"CtInvocationImpl"},"failures":[31,171,172,173],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[34],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[31,28,174,32,175,29,33,171,30,176,34,177,35,178,13,36,14,15,22,23],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"count":"count","stack":"stack","this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[0,1,2,3],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[0,1,2,3],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[179,163,180,181,182,183,184,185,186,187,48,49,50,188,189,51,51,52,52,190,191,192,193,194,195,53,54,55,45,10,11,196,197,198,31,28,199,174,32,175,29,33,171,30,176,200,201,202,172,203,204,205,206,34,177,207,208,209,35,178,173,210,211,56,57,212,213,214,215,216,217,218,219,220,221,222,61,63,64,65,66,67,68,223,164,224,165,166,167,13,36,14,15,16,17,18,19,37,20,22,23,225,24,0,1,2,226,227,228,229,230,231,232,170,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,153,154,252,253,254,255,162,155,156,256,257,74,75,258,76,259,260,261,262,263,264,265,78,79,266,80,81,82,83,84,85,86,87,88,89,90,91,267,268,269,270,271,272,273,274,275,276,277,278,93,94,279,280,95,98,100,101,103,104,107,108,109,110,111,113,116,117,118,47,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,119,120,121,122,123,309,124,310,311,125,126,127,128,129,130,312,313,314,315,316,131,132,133,134,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,38,370,371,372,373,374,375,376,377,135,136,137,138,139,140,141,142,378,379,380,381,382,383,384,385,386,387,388,389,390,143,391,392,393,394,395,396,158,8,159,397,398,160,161,399,400,401,402,403,404,144,145,42,146,147,148,43,149,150,405,406,407,408,409,410,411,412,413,414,39,40,41,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,168,46,432,433,434,435,436,437,9,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,169,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:35","sourceCode":"new java.lang.ThreadLocal<org.easymock.internal.MocksControl>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"failures":[316,320,326,333,334,338],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[475,476,477],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.EasyMock:946","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[179,163,180,181,182,183,185,190,191,194,478,479,480,481,53,54,55,45,10,196,197,198,31,28,174,32,175,29,33,171,176,200,201,202,172,203,204,205,206,34,177,207,209,35,178,173,210,56,213,214,215,216,217,220,221,222,59,64,65,164,224,167,13,36,14,15,17,18,19,37,20,22,24,0,1,2,226,227,237,251,153,252,253,162,256,73,74,76,77,260,261,264,265,78,266,80,81,82,84,87,89,281,282,283,284,285,286,287,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,122,123,124,127,128,312,313,314,315,316,133,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,359,360,361,363,364,366,367,368,369,38,371,372,136,381,382,383,384,385,392,393,394,395,158,150,405,406,407,408,409,410,414,39,415,426,427,428,429,433,437,438,441,442,443,444,445,446,447,448,450,451],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:352","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[344,469],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[31,14,22],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[31,204,61,68,69,71,229,232,482,233,237,250,154,252,253,155,156,256,257,259,262,263,264,79,88,90,365,483,484,396,8,159,160,161,399,411,412,413,419,426,436,9,439,440,441,445,446,485,486],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MocksControl:190","failures":[28,33,171,176,202,34,177,207,209,22,487,234,235,253,156,79,89,370,371,373,374,375,376,377,161,419,445,450],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[193,478,352,423,425],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[0,1,2,3],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[223,224,461],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[457],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Injector:72","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[48,49,50,51,51,52,52,55,56,488,58,489,59,60,61,62,64,65,66,25,68,69,70,71,0,2,72,73,74,75,76,77,78,79,80,81,82,83,84,87,88,89,90,98,101,111,117,121,122,123,124,127,128,129,133,136,26,143,150],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"this.java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"failures":[],"status":-2,"name":"add","type":"adrStmt","variableMapping":{"lock":"lock"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":28,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":396,"org.easymock.tests2.UsageTest.argumentsOrdered":156,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":234,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":244,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":461,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":253,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":186,"org.easymock.tests2.DelegateToTest.testReturnException":164,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":282,"org.easymock.tests.MockingTest.testPartialClassMocking":122,"org.easymock.tests.MockClassControlTest.testToString":137,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":195,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":424,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":470,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":92,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":105,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":101,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":289,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":211,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":171,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":414,"org.easymock.tests2.UsageTest.wrongArguments":154,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":278,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":394,"org.easymock.samples.ExampleTest.answerVsDelegate":163,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":143,"org.easymock.tests2.UsageConstraintsTest.testNull":32,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":311,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":80,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":142,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":233,"org.easymock.tests2.CaptureTest.testPrimitive":15,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":415,"org.easymock.tests.UsageTest.moreThanOneArgument":158,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":308,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":266,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":339,"org.easymock.tests.UsageTest.argumentsOrdered":161,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":342,"org.easymock.tests.UsageVarargTest.varargIntAccepted":361,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":466,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":312,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":59,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":248,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":169,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":316,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":476,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":272,"org.easymock.tests.ReplayStateInvalidUsageTest.times":355,"org.easymock.tests2.AnswerTest.answer":217,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":30,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":468,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":216,"org.easymock.tests2.CaptureTest.testAnd":13,"org.easymock.tests2.UsageTest.strictResetToDefault":251,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":87,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":338,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":428,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":231,"org.easymock.tests2.DelegateToTest.testDelegate":167,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":346,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":304,"org.easymock.tests.LimitationsTest.mockFinalMethod":134,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":285,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":385,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":416,"org.easymock.tests2.CaptureTest.testCapture1_2446744":16,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":302,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":214,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":349,"org.easymock.tests.UsageThrowableTest.throwError":370,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":486,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":249,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":341,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":47,"org.easymock.samples.PartialClassMockTest.testGetArea":50,"org.easymock.tests.MockingTest.testInterfaceMocking":309,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":350,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":313,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":379,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":144,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":106,"org.easymock.tests2.UsageTest.niceToStrict":252,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":290,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":452,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":64,"org.easymock.tests2.MockBuilderTest.testCreateMock":68,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":114,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":275,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":4,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":298,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":232,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":422,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":405,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":392,"org.easymock.tests.UsageOverloadedMethodTest.overloading":450,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":110,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":172,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":46,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":449,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":328,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":202,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":20,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":362,"org.easymock.tests.MockClassControlTest.testEquals":141,"org.easymock.tests2.EasyMockSupportClassTest.testAll":98,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":128,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":151,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":306,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":488,"org.easymock.tests2.CaptureTest.testCaptureAll":36,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":215,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":383,"org.easymock.tests.MockNameTest.defaultName":386,"org.easymock.tests2.UsageConstraintsTest.testMatches":203,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":340,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":347,"org.easymock.samples.ExampleTest.voteForRemovals":183,"org.easymock.tests.UsageVarargTest.allKinds":38,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":444,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":384,"org.easymock.samples.BasicClassMockTest.testPrintContent":49,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":376,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":259,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":166,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":245,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":286,"org.easymock.tests2.UsageConstraintsTest.greaterThan":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":99,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":427,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":90,"org.easymock.samples.ExampleTest.voteForRemoval":180,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":149,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":191,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":91,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":83,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":150,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":250,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":67,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":458,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":230,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":372,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":96,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":281,"org.easymock.tests2.CaptureTest.testCaptureFirst":24,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":223,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":457,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":487,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":257,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":434,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":324,"org.easymock.tests2.UsageTest.moreThanOneArgument":153,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":193,"org.easymock.tests2.CaptureTest.testCapture2_2446744":225,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":469,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":69,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":369,"org.easymock.tests.GenericTest.testBridgedEquals":130,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":412,"org.easymock.tests.UsageExpectAndReturnTest.longType":320,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":228,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":381,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":70,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":307,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":435,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":208,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":305,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":388,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":337,"org.easymock.tests.UsageCallCountTest.tooManyCalls":413,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":477,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":407,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":115,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":325,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":277,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":294,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":375,"org.easymock.tests.MockingTest.testNiceClassMocking":125,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":73,"org.easymock.tests.MockingTest.testClassMocking":120,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":406,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":60,"org.easymock.tests2.UsageConstraintsTest.testContains":201,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":55,"org.easymock.tests2.UsageConstraintsTest.testFind":174,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":451,"org.easymock.tests.MockTypeTest.fromEasyMockClass":390,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":436,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":196,"org.easymock.tests.UsageExpectAndReturnTest.object":327,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":84,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":276,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":364,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":403,"org.easymock.tests.UsageTest.exactCallCountByLastCall":399,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":287,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":456,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":423,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":343,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":157,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":57,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":333,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":359,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":168,"org.easymock.tests.MockClassControlTest.testHashCode":140,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":239,"org.easymock.tests2.EasyMockSupportTest.testVerify":236,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":108,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":475,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":344,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":430,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":421,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":483,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":213,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":212,"org.easymock.tests.UsageVarargTest.varargCharAccepted":363,"org.easymock.tests2.CaptureTest.testCaptureMultiple":12,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":260,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":474,"org.easymock.tests2.UsageTest.openCallCountByLastCall":254,"org.easymock.tests.DefaultClassInstantiatorTest.object":145,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":235,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":420,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":401,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":109,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":296,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":373,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":270,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":238,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":139,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":88,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":295,"org.easymock.tests.CapturesMatcherTest.test":44,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":334,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":387,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":138,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":117,"org.easymock.tests2.UsageTest.resumeIfFailure":256,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":26,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":284,"org.easymock.tests2.StubTest.stubWithReturnValue":227,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":209,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":326,"org.easymock.tests2.SerializationTest.testAllMockedMethod":2,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":467,"org.easymock.samples.SupportTest.voteForRemovals":189,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":5,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":126,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":241,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":301,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":3,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":473,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":218,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":425,"org.easymock.tests.UsageExpectAndThrowTest.object":299,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":177,"org.easymock.tests2.DelegateToTest.testWrongClass":165,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":447,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":448,"org.easymock.tests.UsageStrictMockTest.range":440,"org.easymock.samples.ConstructorCalledMockTest.testTax":51,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":279,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":170,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":72,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":300,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":66,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":160,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":95,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":357,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":393,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":6,"org.easymock.tests2.CaptureTest.testCaptureNone":37,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":380,"org.easymock.tests.UsageUnorderedTest.message":419,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":485,"org.easymock.tests.UsageVerifyTest.twoReturns":446,"org.easymock.tests.UsageVarargTest.varargByteAccepted":368,"org.easymock.tests2.ThreadingTest.testThreadSafe":190,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":112,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":410,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":404,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":48,"org.easymock.tests2.CaptureTest.testCapture_2617107":14,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":152,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":418,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":471,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":41,"org.easymock.tests2.UsageConstraintsTest.any":176,"org.easymock.tests2.StubTest.stub":226,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":354,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":389,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":472,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":283,"org.easymock.tests.UsageExpectAndThrowTest.longType":292,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":148,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":353,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":262,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":243,"org.easymock.tests.LimitationsTest.mockNativeMethod":133,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":129,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":336,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":489,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":269,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":265,"org.easymock.tests2.NameTest.nameForMocksControl":481,"org.easymock.tests2.MockedExceptionTest.testMockedException":54,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":100,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":398,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":124,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":11,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":293,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":78,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":25,"org.easymock.tests.MockingTest.testNicePartialClassMocking":123,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":82,"org.easymock.tests2.CaptureTest.testCaptureLast":19,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":267,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":417,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":33,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":77,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":207,"org.easymock.tests.MockingTest.testTwoMocks":121,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":317,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":297,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":155,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":178,"org.easymock.samples.ExampleTest.removeNonExistingDocument":184,"org.easymock.tests.UsageStrictMockTest.differentMethods":441,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":274,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":351,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":240,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":146,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":192,"org.easymock.tests2.MockBuilderTest.testCreateMockString":71,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":135,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":102,"org.easymock.tests.UsageExpectAndThrowTest.floatType":291,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":204,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":97,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":220,"org.easymock.tests.UsageVerifyTest.twoThrows":445,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":431,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":111,"org.easymock.samples.ExampleTest.voteAgainstRemoval":181,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":462,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":378,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":89,"org.easymock.tests.LimitationsTest.privateConstructor":132,"org.easymock.tests2.UsageConstraintsTest.testNotNull":35,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":53,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":377,"org.easymock.tests2.UsageTest.defaultResetToNice":162,"org.easymock.samples.ExampleTest.voteAgainstRemovals":179,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":463,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":332,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":268,"org.easymock.tests.UsageVarargTest.differentLength":365,"org.easymock.tests2.CallbackTest.callback":237,"org.easymock.tests2.UsageConstraintsTest.equals":199,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":85,"org.easymock.tests.UsageTest.openCallCountByLastCall":397,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":197,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":40,"org.easymock.tests.UsageCallCountTest.tooFewCalls":408,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":75,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":395,"org.easymock.tests.UsageThrowableTest.throwCheckedException":374,"org.easymock.tests.MockingTest.testStrictClassMocking":119,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":7,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":76,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":288,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":74,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":273,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":356,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":258,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":222,"org.easymock.tests.ObjectMethodsTest.testHashCode":402,"org.easymock.tests2.NameTest.nameForNiceMock":480,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":194,"org.easymock.tests2.DependencyTest.testInterfaceMocking":210,"org.easymock.samples.ExampleTest.addDocument":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":118,"org.easymock.tests2.DelegateToTest.testStubDelegate":224,"org.easymock.tests2.AnswerTest.stubAnswer":221,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":438,"org.easymock.tests.UsageVarargTest.varargLongAccepted":367,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":442,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":460,"org.easymock.tests.UsageExpectAndReturnTest.floatType":319,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":335,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":56,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":52,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":432,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":206,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":247,"org.easymock.tests.UsageThrowableTest.noUpperLimit":371,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":198,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":93,"org.easymock.tests2.SerializationTest.test":1,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":17,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":42,"org.easymock.tests2.UsageConstraintsTest.testSame":175,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":318,"org.easymock.samples.SupportTest.addDocument":188,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":352,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":103,"org.easymock.tests.GenericTest.testPackageScope":127,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":345,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":455,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":246,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":310,"org.easymock.tests2.NameTest.nameForMock":478,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":329,"org.easymock.tests2.UsageStrictMockTest.differentMethods":264,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":86,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":321,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":303,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":400,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":429,"org.easymock.tests2.MockedExceptionTest.testRealException":45,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":391,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":465,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":464,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":261,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":39,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":358,"org.easymock.tests2.NameTest.nameForStrictMock":479,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":63,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":10,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":81,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":94,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":147,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":34,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":61,"org.easymock.tests2.UsageStrictMockTest.range":263,"org.easymock.tests2.UsageConstraintsTest.lessThan":173,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":242,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":27,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":459,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":107,"org.easymock.tests2.CaptureTest.testCaptureRightOne":22,"org.easymock.tests2.UsageConstraintsTest.testOr":29,"org.easymock.tests.UsageRangeTest.combination":426,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":79,"org.easymock.tests.UsageTest.wrongArguments":159,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":104,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":136,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":322,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":453,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":330,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":43,"org.easymock.tests.UsageVarargTest.varargShortAccepted":366,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":411,"org.easymock.tests2.UsageConstraintsTest.cmpTo":200,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":219,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":454,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":255,"org.easymock.tests2.CaptureTest.testCaptureFromStub":23,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":348,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":62,"org.easymock.tests.UsageTest.unexpectedCallWithArray":8,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":9,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":409,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":331,"org.easymock.tests2.CaptureTest.testCapture":21,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":439,"org.easymock.tests2.UsageConstraintsTest.constraints":31,"org.easymock.samples.ExampleTest.addAndChangeDocument":185,"org.easymock.tests.UsageStrictMockTest.testVerify":443,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":187,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":437,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":382,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":18,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":58,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":314,"org.easymock.tests.LimitationsTest.abstractClass":131,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":323,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":433,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":315,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":482,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":360}}]

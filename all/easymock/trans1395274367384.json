[{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:40","sourceCode":"return this.org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,142,143,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"control":"control","args":"args","proxy":"proxy","method":"method"}},{"position":"org.easymock.EasyMock:814","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[179,180,184,185,273,196,262,274,269],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[275,276,277],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:93","failures":[278,279,280],"status":-1,"binaryOperator":"(java.lang.Class<?>.getConstructors().int) == 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.NotNull:36","failures":[281,200,213,214],"status":-1,"binaryOperator":"java.lang.Object != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:91","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[179,180,181,182,183,184,185,186,273,187,196,197,200,201,262,263,274,264,269,270],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1976","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:93","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:77","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[279,280],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[7,282,283,114,284,285],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[15,16,17,48,68,104,105,106,107,108,109,286,209,210,211,212,254],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[287,204,207,208],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"failures":[288],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:48","failures":[0,1,2,3,4,5,6,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,142,143,143,144,145,146,147,149,151,152,153,156,157,158,159,160,161,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,249,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[179,180,182,184,185,273,196,200,262,274,269],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[289,290,42,291,49,50,51,102,292,103,110,293,135,142,142,143,143,294,295,296,297,158,298,159,299,160,161,162,163,300,164,167,168,170,171,172,301,173,302,174,175,176,211,303,304,228,305,230,243,244,245,246,255,256,257,258,260,261],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"this.java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[289,290,42,102,292,306,110,307,308,309,310,311,312,294,295,296,158,298,160,161,162,163,164,167,168,170,171,172,173,302,176,313,211,314,305,243,255,258],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","toStringMethod":"equalsMethod","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[289,290,42,315,316,291,49,50,51,317,318,102,292,103,306,319,320,110,321,278,279,322,323,324,280,325,307,326,293,308,309,310,327,311,312,135,142,142,143,143,294,295,296,158,298,328,159,299,160,161,329,162,163,164,167,168,170,171,172,301,173,330,331,302,174,175,176,332,313,209,210,211,228,305,230,333,334,335,336,337,338,243,339,340,244,341,342,343,344,345,346,347,348,349,245,350,351,352,353,354,246,355,356,255,256,257,258,260,261],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:246","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:66","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,357,14,358,289,359,360,361,362,290,363,364,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,365,366,367,368,369,370,41,371,372,373,374,375,42,376,377,43,378,379,380,44,45,46,381,47,48,315,316,291,49,50,382,51,383,384,317,52,53,54,55,56,385,57,58,386,59,387,60,61,62,63,64,388,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,389,390,391,392,393,318,102,292,103,306,104,105,106,107,108,109,319,320,110,321,394,395,396,397,398,399,400,401,402,403,404,405,406,278,279,322,323,324,280,407,325,408,409,410,411,412,413,287,286,414,415,416,417,418,419,420,421,111,422,423,424,425,426,112,427,428,429,430,431,432,433,434,435,436,307,113,437,114,115,116,117,118,438,439,119,120,121,122,123,124,125,126,127,128,129,440,326,293,308,309,310,327,311,312,130,131,132,133,134,441,135,442,136,137,138,139,443,140,444,141,142,143,294,295,445,144,145,146,147,148,149,150,151,152,153,154,155,156,157,296,446,158,298,447,328,159,299,160,448,161,449,329,162,163,450,164,451,452,165,166,167,168,169,170,171,172,301,453,173,330,331,302,174,175,176,332,313,177,178,179,180,454,181,182,183,184,185,186,273,187,188,189,190,191,192,193,194,195,196,197,198,281,199,200,201,202,203,204,205,206,207,208,455,456,457,458,209,210,211,212,213,314,214,215,216,217,218,219,220,459,460,461,462,463,221,464,465,466,467,468,469,222,223,224,225,226,227,228,229,305,230,333,470,231,232,233,234,235,236,237,238,239,240,241,242,471,472,473,474,475,476,334,477,478,479,335,480,481,336,337,338,243,339,340,244,341,342,343,344,345,346,347,348,349,245,350,351,352,353,354,246,355,356,482,483,484,485,486,247,487,488,489,490,491,492,248,493,249,250,251,252,494,253,254,495,255,256,257,258,496,259,260,261,497,262,263,274,264,265,498,499,266,267,268,269,270,271,272],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:721","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareTo:42","failures":[500],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[448,329,501,502,503,504,228,230,333],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[7,282,283,114,284,285],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value"}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[505,506,507,508,509,275,276,277],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[510,228,229,305],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[25,29,30,32,35,78,82,83,85,88,414,117,118,125,128,129,251,252],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[7,8,11,12,511,65,72,73,114,117,148,154,155,251],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[7,8,11,12,511,387,65,72,73,114,117,148,154,155,251],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1878","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:191","sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>;\n    try {\n        java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n    } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n        throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n    }\n    T T;\n    try {\n        java.lang.reflect.Constructor<?>.setAccessible(true);\n        T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n    } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n    } catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n        throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n    }\n    return T;\n} else {\n    net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory;\n    try {\n        net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n    } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n    }\n    net.sf.cglib.proxy.Factory.getCallback(0);\n    return ((T)(net.sf.cglib.proxy.Factory));\n}","type":"CtIfImpl"},"failures":[289,290,42,315,316,291,49,50,51,317,318,102,292,103,306,319,110,406,278,279,322,323,324,280,407,325,326,293,308,309,310,327,311,312,135,142,142,143,143,294,295,296,446,158,298,447,328,159,299,160,448,161,329,162,163,450,164,167,168,170,171,172,301,173,330,331,302,174,175,176,332,313,177,209,210,211,228,305,230,333,470,334,335,336,337,338,243,339,340,244,341,342,343,344,345,346,347,348,349,245,350,351,352,353,354,246,355,356,255,256,257,258,260,261],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"finalizeMethod","method":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:122","sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","type":"CtReturnImpl"},"failures":[453,512,513],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:280","failures":[57,137,222,223,224,225,226,227],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.InjectionPlan:51","failures":[441,442,459,460,461,462,463,221,464,465,466,467,468,469,482,483,484,485,486,247,487,488,489,490,491,492],"status":-1,"binaryOperator":"(java.lang.String.length()) != 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1802","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[201],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":180,"org.easymock.tests2.UsageTest.argumentsOrdered":155,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":5,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":241,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":464,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":416,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":150,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":442,"org.easymock.tests2.DelegateToTest.testReturnException":223,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":105,"org.easymock.tests.MockingTest.testPartialClassMocking":49,"org.easymock.tests.MockClassControlTest.testToString":308,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":472,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":14,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":424,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":344,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":21,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":244,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":166,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":501,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":186,"org.easymock.tests2.UsageTest.wrongArguments":148,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":66,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":492,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":430,"org.easymock.samples.ExampleTest.answerVsDelegate":137,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":290,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":384,"org.easymock.tests2.UsageConstraintsTest.testNull":182,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":170,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":240,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":312,"org.easymock.tests2.CaptureTest.testPrimitive":264,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":70,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":40,"org.easymock.tests.UsageTest.moreThanOneArgument":6,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":169,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":2,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":125,"org.easymock.tests.UsageTest.argumentsOrdered":12,"org.easymock.tests.UsageVarargTest.varargIntAccepted":367,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":421,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":130,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":296,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":478,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":468,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":299,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":410,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":134,"org.easymock.tests.ReplayStateInvalidUsageTest.times":402,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":247,"org.easymock.tests2.DependencyTest.testClassMocking":451,"org.easymock.tests2.AnswerTest.answer":203,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":273,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":422,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":458,"org.easymock.tests2.CaptureTest.testAnd":262,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":360,"org.easymock.tests2.UsageTest.strictResetToDefault":146,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":447,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":302,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":1,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":54,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":235,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":129,"org.easymock.tests2.DelegateToTest.testDelegate":227,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":36,"org.easymock.tests.LimitationsTest.mockFinalMethod":321,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":108,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":393,"org.easymock.tests2.DependencyTest.testClassMockingSupport":452,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":63,"org.easymock.tests2.CaptureTest.testCapture1_2446744":265,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":453,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":34,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":456,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":396,"org.easymock.tests.UsageThrowableTest.throwError":94,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":362,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":469,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":440,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":4,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":356,"org.easymock.samples.PartialClassMockTest.testGetArea":135,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":397,"org.easymock.tests.MockingTest.testInterfaceMocking":382,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":131,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":122,"org.easymock.tests2.UsageTest.niceToStrict":149,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":22,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":307,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":345,"org.easymock.tests2.ThreadingTest.testChangeDefault":513,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":408,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":275,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":159,"org.easymock.tests2.MockBuilderTest.testCreateMock":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":352,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":489,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":30,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":284,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":236,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":359,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":20,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":376,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":428,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":507,"org.easymock.tests.UsageOverloadedMethodTest.overloading":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":354,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":191,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":58,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":60,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":85,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":190,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":268,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":368,"org.easymock.tests2.EasyMockSupportClassTest.testAll":243,"org.easymock.tests.MockClassControlTest.testEquals":311,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":292,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":38,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":303,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":457,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":391,"org.easymock.tests2.CaptureTest.testCaptureAll":263,"org.easymock.tests.MockNameTest.defaultName":381,"org.easymock.tests2.UsageConstraintsTest.testMatches":192,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":394,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":3,"org.easymock.samples.ExampleTest.voteForRemovals":140,"org.easymock.tests.UsageVarargTest.allKinds":375,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":71,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":392,"org.easymock.samples.BasicClassMockTest.testPrintContent":295,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":100,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":248,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":465,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":109,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":226,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":504,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":407,"org.easymock.tests2.UsageConstraintsTest.greaterThan":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":339,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":53,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":176,"org.easymock.samples.ExampleTest.voteForRemoval":138,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":325,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":216,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":332,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":363,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":479,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":301,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":145,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":42,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":329,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":286,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":233,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":337,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":104,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":222,"org.easymock.tests2.CaptureTest.testCaptureFirst":272,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":287,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":234,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":157,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":387,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":81,"org.easymock.tests2.UsageTest.moreThanOneArgument":147,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":218,"org.easymock.tests2.CaptureTest.testCapture2_2446744":271,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":423,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":163,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":374,"org.easymock.tests.GenericTest.testBridgedEquals":306,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":508,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":505,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":45,"org.easymock.tests.UsageExpectAndReturnTest.longType":77,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":389,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":231,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":39,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":300,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":124,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":281,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":37,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":0,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":16,"org.easymock.tests.UsageCallCountTest.tooManyCalls":46,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":43,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":353,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":82,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":491,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":26,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":99,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":256,"org.easymock.tests.MockingTest.testNiceClassMocking":317,"org.easymock.tests.MockingTest.testClassMocking":316,"org.easymock.tests2.UsageConstraintsTest.testContains":189,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":297,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":377,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":211,"org.easymock.tests2.UsageConstraintsTest.testFind":181,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":62,"org.easymock.tests.MockTypeTest.fromEasyMockClass":361,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":113,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":214,"org.easymock.tests.UsageExpectAndReturnTest.object":84,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":173,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":490,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":239,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":502,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":370,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":435,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":509,"org.easymock.tests.UsageTest.exactCallCountByLastCall":13,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":47,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":413,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":126,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":357,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":333,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":90,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":365,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":57,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":460,"org.easymock.tests.MockClassControlTest.testHashCode":327,"org.easymock.tests2.EasyMockSupportTest.testVerify":471,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":347,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":127,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":19,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":56,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":455,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":495,"org.easymock.tests.UsageVarargTest.varargCharAccepted":369,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":406,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":493,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":427,"org.easymock.tests2.UsageTest.openCallCountByLastCall":151,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":242,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":276,"org.easymock.tests.DefaultClassInstantiatorTest.object":278,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":18,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":433,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":511,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":348,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":97,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":485,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":459,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":174,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":310,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":27,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":91,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":15,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":246,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":309,"org.easymock.tests2.UsageTest.resumeIfFailure":156,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":289,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":477,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":107,"org.easymock.tests2.StubTest.stubWithReturnValue":254,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":448,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":83,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":199,"org.easymock.tests2.SerializationTest.testAllMockedMethod":305,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":111,"org.easymock.samples.SupportTest.voteForRemovals":144,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":285,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":318,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":462,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":33,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":510,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":112,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":204,"org.easymock.tests.UsageExpectAndThrowTest.object":31,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":358,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":197,"org.easymock.tests2.DelegateToTest.testWrongClass":225,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":119,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":120,"org.easymock.samples.ConstructorCalledMockTest.testTax":142,"org.easymock.tests.UsageStrictMockTest.range":117,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":480,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":238,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":255,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":506,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":32,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":160,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":404,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":11,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":336,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":429,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":282,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":123,"org.easymock.tests2.CaptureTest.testCaptureNone":267,"org.easymock.tests.UsageUnorderedTest.message":65,"org.easymock.tests.UsageVerifyTest.twoReturns":73,"org.easymock.tests.UsageVarargTest.varargByteAccepted":373,"org.easymock.tests2.ThreadingTest.testThreadSafe":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":350,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":380,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":436,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":294,"org.easymock.tests2.CaptureTest.testCapture_2617107":274,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":388,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":425,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":69,"org.easymock.tests2.UsageConstraintsTest.any":187,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":401,"org.easymock.tests2.StubTest.stub":253,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":17,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":426,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":106,"org.easymock.tests.UsageExpectAndThrowTest.longType":24,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":324,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":400,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":250,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":221,"org.easymock.tests2.SerializationTest.testClass":228,"org.easymock.tests.LimitationsTest.mockNativeMethod":110,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":103,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":93,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":484,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":494,"org.easymock.tests2.NameTest.nameForMocksControl":476,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":486,"org.easymock.tests2.MockedExceptionTest.testMockedException":210,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":340,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":10,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":25,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":51,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":314,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":167,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":161,"org.easymock.tests.MockingTest.testNicePartialClassMocking":50,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":172,"org.easymock.tests2.CompareToTest.testNotComparable":500,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":482,"org.easymock.tests2.CaptureTest.testCaptureLast":266,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":64,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":185,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":261,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":198,"org.easymock.tests.MockingTest.testTwoMocks":291,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":497,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":74,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":29,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":154,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":201,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":512,"org.easymock.samples.ExampleTest.removeNonExistingDocument":444,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":488,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":398,"org.easymock.tests.UsageStrictMockTest.differentMethods":118,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":461,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":322,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":217,"org.easymock.tests2.MockBuilderTest.testCreateMockString":164,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":326,"org.easymock.tests.UsageExpectAndThrowTest.floatType":23,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":341,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":338,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":206,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":470,"org.easymock.tests.UsageVerifyTest.twoThrows":72,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":385,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":245,"org.easymock.samples.ExampleTest.voteAgainstRemoval":139,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":417,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":121,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":175,"org.easymock.tests.LimitationsTest.privateConstructor":320,"org.easymock.tests2.UsageConstraintsTest.testNotNull":200,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":101,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":209,"org.easymock.tests2.UsageTest.defaultResetToNice":153,"org.easymock.samples.ExampleTest.voteAgainstRemovals":136,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":418,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":89,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":483,"org.easymock.tests.UsageVarargTest.differentLength":41,"org.easymock.tests2.CallbackTest.callback":220,"org.easymock.tests2.UsageConstraintsTest.equals":454,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":330,"org.easymock.tests.UsageTest.openCallCountByLastCall":9,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":177,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":68,"org.easymock.tests.UsageCallCountTest.tooFewCalls":378,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":258,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":431,"org.easymock.tests.UsageThrowableTest.throwCheckedException":98,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":283,"org.easymock.tests.MockingTest.testStrictClassMocking":315,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":48,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":260,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":487,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":257,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":403,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":259,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":208,"org.easymock.tests.ObjectMethodsTest.testHashCode":434,"org.easymock.tests2.NameTest.nameForNiceMock":475,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":219,"org.easymock.tests2.DependencyTest.testInterfaceMocking":165,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":503,"org.easymock.samples.ExampleTest.addDocument":443,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":351,"org.easymock.tests2.DelegateToTest.testStubDelegate":224,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":355,"org.easymock.tests2.AnswerTest.stubAnswer":207,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":115,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":449,"org.easymock.tests.UsageVarargTest.varargLongAccepted":372,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":438,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":415,"org.easymock.tests.UsageExpectAndReturnTest.floatType":76,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":92,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":230,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":143,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":467,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":386,"org.easymock.tests.UsageThrowableTest.noUpperLimit":95,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":195,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":178,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":334,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":498,"org.easymock.tests2.SerializationTest.test":229,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":279,"org.easymock.tests2.UsageConstraintsTest.testSame":183,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":75,"org.easymock.samples.SupportTest.addDocument":445,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":496,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":399,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":342,"org.easymock.tests.GenericTest.testPackageScope":102,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":128,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":412,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":466,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":383,"org.easymock.tests2.NameTest.nameForMock":473,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":86,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":450,"org.easymock.tests2.UsageStrictMockTest.differentMethods":252,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":331,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":78,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":35,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":432,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":55,"org.easymock.tests2.MockedExceptionTest.testRealException":212,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":364,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":481,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":420,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":419,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":249,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":405,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":67,"org.easymock.tests2.NameTest.nameForStrictMock":474,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":328,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":213,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":277,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":171,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":335,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":196,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":323,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":158,"org.easymock.tests2.UsageStrictMockTest.range":251,"org.easymock.tests2.UsageConstraintsTest.lessThan":202,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":463,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":414,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":232,"org.easymock.tests2.CaptureTest.testCaptureRightOne":269,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":346,"org.easymock.tests2.UsageConstraintsTest.testOr":184,"org.easymock.tests.UsageRangeTest.combination":52,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":168,"org.easymock.tests.UsageTest.wrongArguments":8,"org.easymock.tests2.MockBuilderTest.testWithConstructor":446,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":343,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":293,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":79,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":409,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":87,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":280,"org.easymock.tests.UsageVarargTest.varargShortAccepted":371,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":44,"org.easymock.tests2.UsageConstraintsTest.cmpTo":188,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":205,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":411,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":152,"org.easymock.tests2.CaptureTest.testCaptureFromStub":270,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":395,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":298,"org.easymock.tests.UsageTest.unexpectedCallWithArray":7,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":114,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":379,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":288,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":88,"org.easymock.tests2.UsageConstraintsTest.constraints":179,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":116,"org.easymock.samples.ExampleTest.addAndChangeDocument":141,"org.easymock.tests.UsageStrictMockTest.testVerify":439,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":441,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":437,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":390,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":499,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":132,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":304,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":80,"org.easymock.tests.LimitationsTest.abstractClass":319,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":133,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":59,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":237,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":366}}]

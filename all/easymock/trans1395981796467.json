[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-6785245714002503134L","position":"org.easymock.internal.matchers.Contains:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1176","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:207","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:633","type":"mutation","return":"return 0","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Class<?>[][int].isPrimitive()","position":"org.easymock.internal.Invocation:139","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.Mock.java.lang.String()","position":"org.easymock.internal.Injection:67","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","position":"org.easymock.internal.RecordState:161","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result == null) && (boolean)) {\n    org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()));\n} ","position":"org.easymock.internal.MocksBehavior:97","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","position":"org.easymock.EasyMock:1554","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:80","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int]);\n    if (java.lang.Class<?> != null) {\n        java.lang.Class<?>[][int] = java.lang.Class<?>;\n    } else {\n        java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n    }\n}","position":"org.easymock.internal.MethodSerializationWrapper:67","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","position":"org.easymock.internal.ClassProxyFactory:269","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:174","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","position":"org.easymock.internal.ErrorMessage:57","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.Injector:65","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:251","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","position":"org.easymock.EasyMock:1079","type":"CtInvocationImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,35,36,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"variableMapping":{"method":"method","finalizeMethod":"method"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","position":"org.easymock.internal.ObjectMethodsFilter:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n    return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:67","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"result":"length"},"name":"replace","transplant":{"sourceCode":"return int >= 0","position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:180","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(org.easymock.internal.Range.hasFixedCount())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"));\n} ","position":"org.easymock.internal.Results:39","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Results.add(org.easymock.internal.Result, org.easymock.internal.Range)","position":"org.easymock.internal.UnorderedBehavior:45","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-2485406702001842607L","position":"org.easymock.internal.matchers.LessOrEqual:26","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","position":"org.easymock.internal.ClassProxyFactory:169","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","position":"org.easymock.internal.MethodSerializationWrapper:69","type":"CtIfImpl"},"status":-2},{"failures":[54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,12,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","position":"org.easymock.internal.LastControl:73","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","position":"org.easymock.internal.LastControl:61","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IArgumentMatcher org.easymock.IArgumentMatcher : java.util.List<org.easymock.IArgumentMatcher>) {\n    if (org.easymock.IArgumentMatcher.matches(java.lang.Object)) {\n        return true;\n    } \n}","position":"org.easymock.internal.matchers.Or:38","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1495","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.internal.Injection>","position":"org.easymock.internal.InjectionPlan:87","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:122","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!boolean) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove();\n    throw new java.lang.IllegalStateException(java.lang.String);\n} ","position":"org.easymock.internal.LastControl:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","position":"org.easymock.internal.ReplayState:48","type":"CtInvocationImpl"},"status":-2},{"failures":[120,121,122,123,0,1,2,3,4,124,125,126,127,128,5,129,130,55,58,60,63,64,66,67,69,70,72,73,75,76,77,78,79,80,82,131,83,132,133,134,135,6,7,136,8,9,10,12,15,84,85,20,137,138,139,140,141,142,143,144,145,146,147,148,86,87,88,89,90,91,92,93,94,95,96,98,99,149,150,151,152,100,153,154,155,156,157,24,25,26,29,30,31,32,158,33,34,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,37,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,40,203,204,205,206,207,208,209,210,211,212,213,214,215,41,42,43,101,102,103,104,105,106,107,108,109,110,111,112,113,44,216,115,217,218,219,220,116,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,118,243,244,245,246,51,247,248,249,250,251,252,253,254,255,256,119],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.Range.getMinimum()","position":"org.easymock.internal.Results:93","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:55","type":"CtOperatorAssignmentImpl"},"status":-1},{"failures":[83,134,135,161,257,115,219,220,258,221,222,259,244],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.verify()","position":"org.easymock.internal.MocksControl:222","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:133","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","position":"org.easymock.Capture:135","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:1064","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:471","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:233","type":"CtReturnImpl"},"status":0},{"failures":[260],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","position":"org.easymock.internal.MockBuilder:159","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Float>(float))","position":"org.easymock.EasyMock:1025","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int > 0","position":"org.easymock.LogicalOperator:51","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:226","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:57","type":"CtAssignmentImpl"},"status":-2},{"failures":[124,18,19,20,261,159,262,205,206,208,209,210,211,212,213,263,264,265,266,267,108,268,111,112,117,221,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,269],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","position":"org.easymock.internal.Range:41","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","position":"org.easymock.internal.ReplayState:63","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"-5418279681566430252L","position":"org.easymock.internal.RecordState:31","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-8447010713532143168L","position":"org.easymock.internal.matchers.CompareTo:30","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:285","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:603","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Void.java.lang.Class<java.lang.Void>, null)","position":"org.easymock.internal.RecordState:44","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-1951159588262854559L","position":"org.easymock.internal.ExpectedInvocationAndResult:25","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1177","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:113","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{"invocation":"invocation","this":"this","lock":"lock"},"name":"add","transplant":{"sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    this.java.util.concurrent.locks.ReentrantLock.unlock();\n}","position":"org.easymock.internal.ReplayState:45","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.IMocksBehavior.isThreadSafe()) {\n    java.util.concurrent.locks.ReentrantLock.lock();\n    try {\n        return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n    } finally {\n        java.util.concurrent.locks.ReentrantLock.unlock();\n    }\n} ","position":"org.easymock.internal.ReplayState:42","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass()","position":"org.easymock.internal.ClassProxyFactory:175","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Constructor<?>.getModifiers())) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:175","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:269","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.MocksControl org.easymock.internal.MocksControl = org.easymock.internal.LastControl.org.easymock.internal.LastControl.lastControl()","position":"org.easymock.EasyMock:556","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>, java.lang.Boolean.java.lang.Boolean)","position":"org.easymock.internal.RecordState:58","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:80","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1384","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1803","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:613","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"boolean = false","position":"org.easymock.internal.MocksBehavior:156","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:167","type":"CtAssignmentImpl"},"status":-2},{"failures":[120,121,122,123,0,1,2,3,4,270,124,125,126,127,128,5,129,130,55,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,131,83,132,133,134,135,6,7,136,8,9,10,12,15,84,85,20,137,138,139,140,141,142,143,144,145,146,147,148,86,87,88,89,90,91,92,93,94,95,96,98,99,149,150,151,152,100,153,154,155,156,157,24,25,26,29,30,31,32,158,33,34,159,160,161,162,163,271,262,272,164,165,166,167,168,169,170,171,172,173,37,174,175,176,177,273,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,40,203,204,205,206,207,208,209,210,211,212,213,214,215,263,41,42,43,101,102,103,104,105,106,107,108,109,110,111,112,113,44,216,115,217,218,219,220,116,258,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,118,243,244,274,269,245,246,275,276,51,247,248,249,250,251,252,253,254,255,256,119],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.Results:65","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","position":"org.easymock.internal.RecordState:234","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","position":"org.easymock.internal.InjectionPlan:34","type":"CtNewClassImpl"},"status":-2},{"failures":[120,121,122,123,0,1,2,3,4,124,125,126,127,128,5,129,130,55,58,60,63,64,66,67,69,70,72,73,75,76,77,78,79,80,82,131,83,132,133,134,135,6,7,136,8,9,10,12,15,84,85,20,137,138,139,140,141,142,143,144,145,146,147,148,86,87,88,89,90,91,92,93,94,95,96,98,99,149,150,151,152,100,153,154,155,156,157,24,25,26,29,30,31,32,158,33,34,159,160,161,162,163,271,262,164,165,166,167,168,169,170,171,172,173,37,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,40,203,204,205,206,207,208,209,210,211,212,213,214,215,263,41,42,43,101,102,103,104,105,106,107,108,109,110,111,112,113,44,216,115,217,218,219,220,116,258,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,118,243,244,274,269,245,246,51,247,248,249,250,251,252,253,254,255,256,119],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"int += org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:71","type":"CtOperatorAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:185","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.reflect.Field == null) || (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0)","position":"org.easymock.internal.Injector:224","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"entry":"entry"},"name":"add","transplant":{"sourceCode":"final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.ExpectedInvocationAndResults.getResults().next()","position":"org.easymock.internal.UnorderedBehavior:60","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount())","position":"org.easymock.internal.UnorderedBehavior:93","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.ConstructorArgs:94","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-6657694947057597484L","position":"org.easymock.internal.matchers.Matches:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1747","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:90","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.RecordState:324","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","position":"org.easymock.internal.DefaultClassInstantiator:155","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:206","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1878","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>;\n    try {\n        java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n    } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n        throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n    }\n    T T;\n    try {\n        java.lang.reflect.Constructor<?>.setAccessible(true);\n        T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n    } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n    } catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n        throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n    }\n    return T;\n} else {\n    net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory;\n    try {\n        net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n    } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n    }\n    net.sf.cglib.proxy.Factory.getCallback(0);\n    return ((T)(net.sf.cglib.proxy.Factory));\n}","position":"org.easymock.internal.ClassProxyFactory:191","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = org.easymock.internal.matchers.Equals.getExpected()","position":"org.easymock.internal.matchers.ArrayEquals:35","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:323","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:430","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.easymock.internal.Result(new DelegatingAnswer() , false)","position":"org.easymock.internal.Result:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.MocksBehavior:70","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ReturningAnswer() , true)","position":"org.easymock.internal.Result:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","position":"org.easymock.internal.ErrorMessage:54","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.ClassProxyFactory:90","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:344","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"behavior":"behavior"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","position":"org.easymock.internal.ReplayState:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","position":"org.easymock.internal.RecordState:332","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<org.easymock.internal.Injection>","position":"org.easymock.internal.InjectionPlan:95","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMockSupport:519","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:301","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(java.lang.Object[], 0, java.lang.Object[], int, int)","position":"org.easymock.internal.Invocation:64","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"))","position":"org.easymock.internal.DefaultClassInstantiator:183","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"method","equalsMethod":"method"},"name":"add","transplant":{"sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.Invocation:211","type":"CtAssignmentImpl"},"status":0},{"failures":[294,126,295],"variableMapping":{"state":"state","value":"delegateTo"},"name":"add","transplant":{"sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:293","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","position":"org.easymock.internal.MocksControl:318","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"actual":"actual","expected":"actual","this":"this"},"name":"add","transplant":{"sourceCode":"return java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:51","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:49","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","position":"org.easymock.internal.MockBuilder:236","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:54","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1582","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(float , float))","position":"org.easymock.EasyMock:1847","type":"CtInvocationImpl"},"status":-2},{"failures":[120,121,122,123,0,1,2,3,4,124,125,126,128,5,129,130,55,58,60,63,64,66,67,69,70,72,73,75,76,77,79,80,82,296,131,83,132,133,134,135,6,7,136,8,9,10,12,14,15,16,84,85,20,137,138,139,140,141,142,143,144,145,146,147,148,86,87,88,89,91,92,93,94,95,96,99,149,150,151,153,154,155,156,157,22,24,25,26,27,29,30,31,32,158,33,34,297,298,299,300,159,160,161,301,162,163,302,303,164,165,166,167,168,169,170,171,172,173,37,174,175,176,177,304,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,40,257,207,208,215,41,42,43,101,102,103,104,105,106,107,108,109,110,111,112,113,44,305,216,114,115,217,218,219,220,116,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,118,243,244,306,307,308,245,246,51,247,248,249,250,251,252,309,253,254,255,256,119],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:97","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:622","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.Range.hasFixedCount())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"));\n} ","position":"org.easymock.internal.Results:39","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","position":"org.easymock.internal.ClassProxyFactory:217","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:44","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","position":"org.easymock.internal.ReflectionUtils:95","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","position":"org.easymock.internal.MockBuilder:79","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.InjectionTarget:56","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","position":"org.easymock.internal.RecordState:245","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","position":"org.easymock.internal.ReflectionUtils:188","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:301","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:253","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:411","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader())","position":"org.easymock.internal.ClassProxyFactory:183","type":"CtInvocationImpl"},"status":0},{"failures":[120,121,122,123,1,2,3,4,124,125,126,127,128,5,129,55,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,296,83,132,133,134,135,6,136,8,10,84,85,20,137,139,140,141,142,144,146,147,86,87,88,89,90,91,92,95,96,149,150,152,100,153,154,155,156,157,24,25,26,27,29,30,31,32,158,33,34,159,160,161,301,162,163,271,262,302,303,164,167,168,169,170,172,37,175,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,257,206,208,209,210,211,212,213,215,263,41,42,43,101,102,103,104,105,106,107,109,110,112,113,44,305,114,115,217,218,219,220,116,258,221,222,310,311,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,118,243,244,306,274,269,307,308,245,246,275,276],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","position":"org.easymock.internal.RecordState:146","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:183","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","position":"org.easymock.internal.ReflectionUtils:230","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1162","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1471","type":"mutation","return":"return false","status":0},{"failures":[],"variableMapping":{"result":"result"},"name":"add","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:118","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","position":"org.easymock.internal.ReflectionUtils:96","type":"CtForEachImpl"},"status":-2},{"failures":[18,19,20,261,264,265,266,267,108,268,111,117],"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","position":"org.easymock.internal.RecordState:153","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:84","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T> , this)","position":"org.easymock.EasyMockSupport:497","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.closeMethod()","position":"org.easymock.internal.RecordState:84","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((this.java.lang.Object.equals(org.easymock.internal.Invocation.java.lang.Object)) && (this.java.lang.reflect.Method.equals(org.easymock.internal.Invocation.java.lang.reflect.Method))) && org.easymock.internal.Invocation.(equalArguments(org.easymock.internal.Invocation.java.lang.Object[]))","position":"org.easymock.internal.Invocation:99","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.Long java.lang.Long = org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializableUID(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:142","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = org.easymock.internal.Injector.org.easymock.internal.Injector.injectByName(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan.getQualifiedInjections())","position":"org.easymock.internal.Injector:152","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","position":"org.easymock.internal.RecordState:257","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","position":"org.easymock.EasyMock:560","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:77","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:430","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","position":"org.easymock.internal.RecordState:146","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:827","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double)","position":"org.easymock.internal.RecordState:65","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2087349195182278608L","position":"org.easymock.internal.AssertionErrorWrapper:23","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","position":"org.easymock.internal.RecordState:292","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:388","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","position":"org.easymock.internal.LastControl:124","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean || (org.easymock.internal.AndroidClassProxyFactory.MockHandler.(isMocked(java.lang.reflect.Method)) && (!java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers()))))) {\n    return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:88","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n    break;\n} ","position":"org.easymock.internal.BridgeMethodResolver:199","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>[][int].isPrimitive()","position":"org.easymock.internal.Invocation:139","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","constructorArgs":"constructorArgs","this":"this","mockedMethods":"mockedMethods"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:440","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:466","type":"CtReturnImpl"},"status":-2},{"failures":[50,51,247,52,53],"variableMapping":{"result":"bridgeMethod","bridgeMethod":"bridgeMethod"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","position":"org.easymock.internal.BridgeMethodResolver:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:79","type":"CtForEachImpl"},"status":-1},{"failures":[133,218,221,222],"variableMapping":{"callCount":"matches"},"name":"add","transplant":{"sourceCode":"int += 1","position":"org.easymock.internal.Results:68","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int++","position":"org.easymock.internal.MocksBehavior:132","type":"CtUnaryOperatorImpl"},"status":-1},{"failures":[312],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new java.util.ArrayList<org.easymock.IMocksControl>(5)","position":"org.easymock.EasyMockSupport:52","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.matchers.Or:50","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:281","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:289","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.matchers.Captures<?>.validateCapture()","position":"org.easymock.internal.Invocation:168","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:63","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","position":"org.easymock.internal.EasyMockProperties:89","type":"CtReturnImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":209,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":12,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":217,"org.easymock.tests2.MockedExceptionTest.testRealException":261,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":287,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":216,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":238,"org.easymock.tests.UsageVarargTest.varargIntAccepted":250,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":116,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":55,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":4,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":46,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":177,"org.easymock.tests2.UsageConstraintsTest.testContains":68,"org.easymock.tests.UsageCallCountTest.tooManyCalls":182,"org.easymock.tests2.UsageConstraintsTest.testFind":59,"org.easymock.tests.UsageVarargTest.allKinds":119,"org.easymock.tests2.StubTest.stubWithReturnValue":124,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":91,"org.easymock.tests2.CaptureTest.testCaptureAll":87,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":101,"org.easymock.samples.ExampleTest.addAndChangeDocument":173,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":21,"org.easymock.tests.UsageVarargTest.varargCharAccepted":251,"org.easymock.tests2.CaptureTest.testCaptureFromStub":97,"org.easymock.tests.UsageVerifyTest.twoThrows":221,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":292,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":110,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":252,"org.easymock.tests2.DelegateToTest.testReturnException":125,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":163,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":72,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":147,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":50,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":131,"org.easymock.tests2.CaptureTest.testAnd":86,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":231,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":95,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":204,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":38,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":235,"org.easymock.tests2.UsageConstraintsTest.testMatches":71,"org.easymock.tests.MockClassControlTest.testToString":45,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":295,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":260,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":29,"org.easymock.tests2.UsageConstraintsTest.testNull":60,"org.easymock.tests2.EasyMockSupportClassTest.testAll":0,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":142,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":196,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":239,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":155,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":40,"org.easymock.tests.UsageThrowableTest.throwError":206,"org.easymock.tests2.UsageConstraintsTest.greaterThan":73,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":248,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":113,"org.easymock.samples.SupportTest.addDocument":174,"org.easymock.tests2.StubTest.stub":270,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":310,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":285,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":106,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":109,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":283,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":75,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":144,"org.easymock.tests.UsageExpectAndReturnTest.object":193,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":202,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":17,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":256,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":135,"org.easymock.tests.UsageExpectAndThrowTest.object":233,"org.easymock.tests2.DelegateToTest.testWrongClass":127,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":152,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":266,"org.easymock.tests2.UsageTest.moreThanOneArgument":161,"org.easymock.tests.UsageVarargTest.varargByteAccepted":255,"org.easymock.tests.MockClassControlTest.testEquals":48,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":230,"org.easymock.samples.ExampleTest.voteAgainstRemoval":170,"org.easymock.tests.UsageTest.wrongArguments":306,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":212,"org.easymock.tests.UsageVarargTest.varargShortAccepted":253,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":288,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":234,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":20,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":105,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":100,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":176,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":26,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":153,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":286,"org.easymock.tests2.SerializationTest.testAllMockedMethod":130,"org.easymock.tests2.NameTest.nameForMocksControl":300,"org.easymock.samples.ExampleTest.voteAgainstRemovals":167,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":296,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":275,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":112,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":214,"org.easymock.tests2.CaptureTest.testCapture1_2446744":90,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":164,"org.easymock.tests.LimitationsTest.mockNativeMethod":44,"org.easymock.tests2.DelegateToTest.testStubDelegate":126,"org.easymock.tests.UsageUnorderedTest.message":118,"org.easymock.samples.ExampleTest.answerVsDelegate":168,"org.easymock.samples.ExampleTest.voteForRemoval":169,"org.easymock.tests.UsageCallCountTest.tooFewCalls":178,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":192,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":121,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":180,"org.easymock.tests.UsageVerifyTest.twoReturns":222,"org.easymock.tests2.DependencyTest.testInterfaceMocking":156,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":187,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":232,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":137,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":257,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":265,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":140,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":63,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":220,"org.easymock.tests2.CaptureTest.testCaptureRightOne":96,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":189,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":273,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":18,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":10,"org.easymock.tests2.UsageConstraintsTest.cmpTo":67,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":304,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":194,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":31,"org.easymock.tests2.MockedExceptionTest.testMockedException":19,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":291,"org.easymock.tests.UsageThrowableTest.throwCheckedException":210,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":79,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":242,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":293,"org.easymock.samples.PartialClassMockTest.testGetArea":37,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":258,"org.easymock.samples.ExampleTest.voteForRemovals":172,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":208,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":263,"org.easymock.samples.ConstructorCalledMockTest.testTax":35,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":70,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":205,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":267,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":9,"org.easymock.tests2.UsageTest.argumentsOrdered":303,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":243,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":123,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":188,"org.easymock.tests2.AnswerTest.answer":120,"org.easymock.tests.MockingTest.testNicePartialClassMocking":42,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":115,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":184,"org.easymock.tests2.UsageConstraintsTest.any":66,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":279,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":191,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":107,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":311,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":146,"org.easymock.tests.UsageExpectAndThrowTest.longType":226,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":85,"org.easymock.tests2.CallbackTest.callback":154,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":2,"org.easymock.tests2.NameTest.nameForMock":297,"org.easymock.tests.UsageTest.argumentsOrdered":308,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":25,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":58,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":69,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":201,"org.easymock.tests2.MockBuilderTest.testCreateMockString":28,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":111,"org.easymock.tests2.NameTest.nameForStrictMock":298,"org.easymock.tests2.CaptureTest.testCaptureNone":94,"org.easymock.tests2.SerializationTest.test":129,"org.easymock.tests.UsageExpectAndReturnTest.longType":186,"org.easymock.tests2.SerializationTest.testClass":5,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":92,"org.easymock.tests2.CaptureTest.testCaptureFirst":99,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":76,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":259,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":165,"org.easymock.tests2.EasyMockSupportTest.testVerify":148,"org.easymock.tests2.UsageTest.niceToStrict":162,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":264,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":290,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":305,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":228,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":78,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":159,"org.easymock.tests2.UsageTest.strictResetToDefault":160,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":236,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":15,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":27,"org.easymock.tests.GenericTest.testBridgedEquals":53,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":200,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":117,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":223,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":64,"org.easymock.tests2.ConstraintsToStringTest.orToString":312,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":158,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":190,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":11,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":8,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":74,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":249,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":6,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":268,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":43,"org.easymock.tests2.UsageConstraintsTest.testOr":62,"org.easymock.tests2.DelegateToTest.testDelegate":128,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":151,"org.easymock.tests2.UsageConstraintsTest.testNotNull":80,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":132,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":149,"org.easymock.tests2.CaptureTest.testCapture_2617107":88,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":278,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":39,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":102,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":195,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":213,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":282,"org.easymock.tests2.ThreadingTest.testThreadSafe":150,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":262,"org.easymock.tests.UsageThrowableTest.noUpperLimit":207,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":30,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":32,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":145,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":138,"org.easymock.tests.UsageExpectAndReturnTest.floatType":185,"org.easymock.tests2.UsageTest.wrongArguments":301,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":65,"org.easymock.tests2.UsageConstraintsTest.testSame":61,"org.easymock.tests2.UsageTest.resumeIfFailure":272,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":47,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":33,"org.easymock.tests.UsageOverloadedMethodTest.overloading":215,"org.easymock.samples.SupportTest.voteForRemovals":175,"org.easymock.tests.UsageRangeTest.combination":246,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":211,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":280,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":281,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":36,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":81,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":247,"org.easymock.tests.UsageTest.openCallCountByLastCall":274,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":229,"org.easymock.tests2.NameTest.nameForNiceMock":299,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":289,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":276,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":77,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":284,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":83,"org.easymock.tests2.CaptureTest.testPrimitive":89,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":136,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":197,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":237,"org.easymock.samples.BasicClassMockTest.testPrintContent":166,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":103,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":13,"org.easymock.tests.UsageExpectAndThrowTest.floatType":225,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":7,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":84,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":181,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":198,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":277,"org.easymock.tests2.UsageStrictMockTest.differentMethods":134,"org.easymock.tests.UsageTest.exactCallCountByLastCall":245,"org.easymock.tests2.AnswerTest.stubAnswer":122,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":139,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":52,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":143,"org.easymock.tests2.CaptureTest.testCaptureLast":93,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":224,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":179,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":1,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":157,"org.easymock.tests.UsageStrictMockTest.range":218,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":269,"org.easymock.tests.MockingTest.testPartialClassMocking":41,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":199,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":302,"org.easymock.tests2.UsageConstraintsTest.constraints":57,"org.easymock.samples.ExampleTest.addDocument":171,"org.easymock.tests2.UsageConstraintsTest.lessThan":82,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":307,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":54,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":203,"org.easymock.tests.UsageVarargTest.varargLongAccepted":254,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":14,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":16,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":294,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":114,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":241,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":3,"org.easymock.tests2.UsageStrictMockTest.range":133,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":34,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":23,"org.easymock.tests.UsageTest.moreThanOneArgument":244,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":49,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":104,"org.easymock.tests2.UsageTest.openCallCountByLastCall":271,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":22,"org.easymock.tests.UsageStrictMockTest.differentMethods":219,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":141,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":56,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":24,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":227,"org.easymock.tests.UsageVarargTest.differentLength":309,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":183,"org.easymock.tests2.CaptureTest.testCapture2_2446744":98,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":108,"org.easymock.tests.GenericTest.testPackageScope":51}}]

[{"failures":[0],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"Nothing captured yet\"","position":"org.easymock.Capture:132","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:202","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:192","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:137","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-5554816464613350531L","position":"org.easymock.internal.ExpectedInvocation:32","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-9054190871232972342L","position":"org.easymock.internal.ClassProxyFactory:53","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","position":"org.easymock.internal.MockBuilder:236","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","position":"org.easymock.internal.RecordState:234","type":"CtThrowImpl"},"status":-2},{"failures":[1,2,3],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"\\'\")","position":"org.easymock.internal.ArgumentToString:41","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return \"Answer returning \" + java.lang.Object","position":"org.easymock.internal.Result:68","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","position":"org.easymock.internal.RecordState:125","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:90","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.easymock.internal.Invocation.(toStringIsDefined(java.lang.Object))) {\n    return java.lang.String;\n} ","position":"org.easymock.internal.Invocation:147","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan)","position":"org.easymock.internal.Injector:66","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.set(java.lang.Object, java.lang.Object)","position":"org.easymock.internal.Injector:131","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","position":"org.easymock.internal.ReflectionUtils:96","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:224","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:317","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"lastInvocation":"lastInvocation"},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = this.org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:251","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:212","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.Invocation:221","type":"CtInvocationImpl"},"status":-2},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,49,50,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor })","position":"org.easymock.internal.ClassProxyFactory:189","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","position":"org.easymock.internal.MocksControl:136","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","position":"org.easymock.internal.MocksControl:146","type":"CtTryImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ObjectMethodsFilter:55","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","position":"org.easymock.internal.BridgeMethodResolver:194","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:85","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","position":"org.easymock.internal.ClassProxyFactory:204","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor });\n    if (org.easymock.ConstructorArgs != null) {\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>;\n        try {\n            java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n        } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n            throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n        }\n        T T;\n        try {\n            java.lang.reflect.Constructor<?>.setAccessible(true);\n            T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n        } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n        } catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n        }\n        return T;\n    } else {\n        net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory;\n        try {\n            net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n        }\n        net.sf.cglib.proxy.Factory.getCallback(0);\n        return ((T)(net.sf.cglib.proxy.Factory));\n    }\n} finally {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null);\n}","position":"org.easymock.internal.ClassProxyFactory:188","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>;\n    try {\n        java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n    } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n        throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n    }\n    T T;\n    try {\n        java.lang.reflect.Constructor<?>.setAccessible(true);\n        T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n    } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n    } catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n        throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n    }\n    return T;\n} else {\n    net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory;\n    try {\n        net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n    } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n    }\n    net.sf.cglib.proxy.Factory.getCallback(0);\n    return ((T)(net.sf.cglib.proxy.Factory));\n}","position":"org.easymock.internal.ClassProxyFactory:191","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","position":"org.easymock.EasyMock:1594","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Field.getType().isAssignableFrom(org.easymock.internal.Injection.getMock().getClass())","position":"org.easymock.internal.InjectionTarget:46","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:268","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.LinkedList<org.easymock.internal.Range>.add(org.easymock.internal.Range)","position":"org.easymock.internal.Results:44","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:93","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = int","position":"org.easymock.internal.MocksBehavior:84","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return (int) == (java.lang.Integer.int)","position":"org.easymock.internal.Range:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (this.java.lang.Object[].int) ; int++) {\n    final java.lang.Object java.lang.Object = this.java.lang.Object[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n        if (!(java.lang.Object.equals(java.lang.Object))) {\n            return false;\n        } \n    } else {\n        if (java.lang.Object != java.lang.Object) {\n            return false;\n        } \n    }\n}","position":"org.easymock.internal.Invocation:117","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","position":"org.easymock.internal.RecordState:292","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:430","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","position":"org.easymock.internal.EasyMockProperties:67","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && ((((java.lang.String)(java.lang.Object)).indexOf(java.lang.String)) >= 0)","position":"org.easymock.internal.matchers.Contains:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","position":"org.easymock.internal.ErrorMessage:51","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","position":"org.easymock.internal.matchers.CompareTo:49","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.AndroidSupport.boolean","position":"org.easymock.internal.AndroidSupport:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.Invocation:84","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:52","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:894","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.reset();\n}","position":"org.easymock.EasyMockSupport:551","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method);\n}","position":"org.easymock.internal.MockBuilder:104","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:284","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","position":"org.easymock.internal.MocksControl:131","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(char.char, java.lang.Character.java.lang.Character)","position":"org.easymock.internal.ReflectionUtils:36","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"bridgeMethod":"bridgeMethod"},"name":"add","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:73","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Class<?> java.lang.Class<?> : java.lang.Class<?>[]) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:168","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = java.lang.Object[].int","position":"org.easymock.internal.Invocation:61","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)","position":"org.easymock.internal.RecordState:336","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.ObjectMethodsFilter:107","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:123","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:353","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.Exception java.lang.Exception","position":"org.easymock.ConstructorArgs:71","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = int","position":"org.easymock.internal.MocksBehavior:102","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.UnorderedBehavior:105","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:351","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Field.set(java.lang.Object, java.lang.Object)","position":"org.easymock.internal.Injector:131","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:154","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"callCount":"length"},"name":"replace","transplant":{"sourceCode":"this.int += 1","position":"org.easymock.internal.Results:68","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = java.lang.Math.java.lang.Math.min(int, ((java.lang.Class<?>[].int) - 1))","position":"org.easymock.internal.Invocation:137","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.Result:63","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","position":"org.easymock.internal.MockBuilder:72","type":"CtAssignmentImpl"},"status":-2},{"failures":[75,76,77,78,79,80],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:38","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:50","type":"CtInvocationImpl"},"status":-1},{"failures":[81,82,83,84,85,86,87,88,89,90,91,92],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.Mock.java.lang.String()","position":"org.easymock.internal.Injection:67","type":"CtReturnImpl"},"status":-1},{"failures":[93,94,95,5,6,7,8,9,96,97,98,99,100,10,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,12,13,132,14,15,16,18,21,22,23,29,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,31,34,36,37,39,41,42,43,44,166,45,46,167,168,169,170,171,172,173,174,175,176,177,178,179,180,51,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,58,59,60,216,217,218,219,220,221,222,223,224,225,226,227,62,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,72],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:297","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:289","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","position":"org.easymock.Capture:134","type":"CtIfImpl"},"status":-2},{"failures":[156,163,265],"variableMapping":{"toMock":"toMock","this":"this","type":"type"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:344","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:365","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (java.lang.Object) == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1432","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:268","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:210","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:197","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:289","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.Class<?>.getSigners()) != null) {\n    net.sf.cglib.proxy.Enhancer.setNamingPolicy(org.easymock.internal.ClassProxyFactory.net.sf.cglib.core.NamingPolicy);\n} ","position":"org.easymock.internal.ClassProxyFactory:273","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return net.sf.cglib.proxy.Enhancer","position":"org.easymock.internal.ClassProxyFactory:278","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","position":"org.easymock.EasyMock:2052","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:51","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1709","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"org.easymock.internal.Results:90","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.io.IOException java.io.IOException","position":"org.easymock.internal.EasyMockProperties:66","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1162","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1013","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException)","position":"org.easymock.internal.ClassProxyFactory:210","type":"CtThrowImpl"},"status":-2},{"failures":[266],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.matchers.And:54","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next()","position":"org.easymock.internal.matchers.Or:49","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.Injector:132","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = new java.util.HashSet<org.easymock.internal.MethodSerializationWrapper>(java.util.Set<java.lang.reflect.Method>.size())","position":"org.easymock.internal.ClassProxyFactory:134","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:78","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","position":"org.easymock.EasyMock:2125","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.UnorderedBehavior:63","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(float , float))","position":"org.easymock.EasyMock:1847","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","position":"org.easymock.internal.ReplayState:62","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:180","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","position":"org.easymock.internal.ErrorMessage:49","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","position":"org.easymock.internal.MethodSerializationWrapper:72","type":"CtAssignmentImpl"},"status":-2},{"failures":[0],"variableMapping":{"maximum":"result","minimum":"result"},"name":"replace","transplant":{"sourceCode":"return int == int","position":"org.easymock.internal.Range:52","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int == 0","position":"org.easymock.internal.matchers.CompareEqual:39","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass()","position":"org.easymock.internal.ClassProxyFactory:175","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class.java.lang.Class.forName(\"dalvik.system.PathClassLoader\")","position":"org.easymock.internal.AndroidSupport:26","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"status":-2},{"failures":[96,27,28,29,267,268,269,270,271,272,273,274,275,224,276,277,232],"variableMapping":{"state":"state"},"name":"add","transplant":{"sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:325","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"case ALL :\n    java.util.List<T>.add(T);\n    break;","position":"org.easymock.Capture:108","type":"CtCaseImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"continue","position":"org.easymock.internal.UnorderedBehavior:90","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass();\n} catch (final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException) {\n    net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader());\n    java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass();\n}","position":"org.easymock.internal.ClassProxyFactory:174","type":"CtTryImpl"},"status":-2},{"failures":[],"binaryOperator":"(70 * (((java.util.List<org.easymock.internal.UnorderedBehavior>.size()) - (int)) + 1))","name":"math","position":"org.easymock.internal.MocksBehavior:164","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","position":"org.easymock.EasyMock:1518","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"and(\")","position":"org.easymock.internal.matchers.And:47","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection)","position":"org.easymock.internal.Injector:170","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:174","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:52","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return float","position":"org.easymock.EasyMock:1409","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>()","position":"org.easymock.internal.MocksBehavior:122","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).getMessages(org.easymock.internal.Invocation)","position":"org.easymock.internal.MocksBehavior:128","type":"CtLocalVariableImpl"},"status":-2},{"failures":[278,96,279,280,129,281,130,131,282,14,15,16,23,26,283,27,284,285,162,168,55,286,287,288,79,228,289,229,230,290,291,261,262,263,264,292,293,294,295,296,297,298,299,300,301,302],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1764","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:104","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ObjectMethodsFilter:115","type":"CtThrowImpl"},"status":-2},{"failures":[129,130,131,303,304,305,306,169,307,308,309,205,79,228,229,230,233,234,235,310,257,311,312,313],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    final boolean boolean = !(boolean);\n    final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount();\n    final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation));\n    if ((boolean && boolean) && (!boolean)) {\n        continue;\n    } \n    final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount());\n    java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage);\n}","position":"org.easymock.internal.UnorderedBehavior:84","type":"CtForEachImpl"},"status":-1},{"failures":[13,25,314,303],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:136","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:155","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (org.easymock.internal.Injection == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:189","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection)","position":"org.easymock.internal.Injector:170","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:682","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:259","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final int int = int","position":"org.easymock.internal.MocksBehavior:84","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Long>(org.easymock.Capture<java.lang.Long>))","position":"org.easymock.EasyMock:1951","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"status":0},{"failures":[315],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","position":"org.easymock.internal.MockBuilder:160","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","position":"org.easymock.internal.ReflectionUtils:72","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"args":"args","org.easymock.internal.Invocation.NO_ARGS":"args"},"name":"add","transplant":{"sourceCode":"return java.lang.Object[] == null ? java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:57","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.Object java.lang.Object","position":"org.easymock.internal.Injector:122","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.io.DataOutputStream java.io.DataOutputStream = new java.io.DataOutputStream(java.io.ByteArrayOutputStream)","position":"org.easymock.internal.DefaultClassInstantiator:135","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.EasyMock.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:466","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.regex.Pattern.java.util.regex.Pattern.compile(java.lang.String).matcher(((java.lang.String)(java.lang.Object)))","position":"org.easymock.internal.matchers.Find:37","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:115","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1263","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"method"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.Invocation:221","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","position":"org.easymock.internal.Range:37","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:224","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.UnorderedBehavior org.easymock.internal.UnorderedBehavior : java.util.List<org.easymock.internal.UnorderedBehavior>.subList(int, java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    if (!(org.easymock.internal.UnorderedBehavior.verify())) {\n        boolean = false;\n        break;\n    } \n}","position":"org.easymock.internal.MocksBehavior:154","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>))","position":"org.easymock.internal.AndroidClassProxyFactory:53","type":"CtThrowImpl"},"status":-2},{"failures":[93,316,317,318,94,95,5,6,7,8,9,278,96,319,97,98,99,320,100,10,101,11,102,103,104,105,106,107,108,109,110,111,321,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,279,280,129,281,130,131,282,12,13,132,14,15,16,17,18,20,21,22,23,26,283,27,28,29,267,133,134,135,136,137,138,139,140,141,142,143,144,322,145,146,147,148,149,284,285,150,151,152,153,323,154,155,156,157,158,159,160,161,162,324,325,326,327,163,164,165,30,31,34,35,36,37,38,39,40,41,42,43,44,166,45,46,303,304,305,306,167,168,169,307,170,328,171,172,173,308,309,174,175,47,48,176,177,178,179,329,180,330,49,49,50,50,51,331,181,332,333,268,269,270,334,335,336,337,338,339,340,341,342,343,344,345,346,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,54,202,347,203,204,348,205,349,350,351,352,353,354,206,355,207,208,209,210,211,212,213,214,215,57,58,59,60,216,217,218,356,315,219,220,221,222,223,272,273,274,275,224,276,225,226,277,357,227,62,358,287,288,79,228,289,229,230,290,291,359,360,361,362,363,231,232,233,234,235,364,365,366,367,368,369,370,371,372,373,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,374,375,310,256,257,80,311,258,259,312,313,260,261,262,263,264,72,73,74,292,293,294,295,296,297,298,299,300,301,302],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1348","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","position":"org.easymock.internal.MockInvocationHandler:37","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","position":"org.easymock.internal.ReplayState:59","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:57","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","position":"org.easymock.internal.LastControl:61","type":"CtIfImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":208,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":18,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":88,"org.easymock.tests2.MockedExceptionTest.testRealException":267,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":289,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":288,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":251,"org.easymock.tests.UsageVarargTest.varargIntAccepted":294,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":231,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":102,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":9,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":66,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":333,"org.easymock.tests2.UsageConstraintsTest.testContains":114,"org.easymock.tests.UsageCallCountTest.tooManyCalls":341,"org.easymock.tests2.UsageConstraintsTest.testFind":106,"org.easymock.tests2.StubTest.stubWithReturnValue":96,"org.easymock.tests.UsageVarargTest.allKinds":302,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":284,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":368,"org.easymock.tests2.CaptureTest.testCaptureAll":146,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":216,"org.easymock.samples.ExampleTest.addAndChangeDocument":330,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":30,"org.easymock.tests.UsageVarargTest.varargCharAccepted":295,"org.easymock.tests2.CaptureTest.testCaptureFromStub":323,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":92,"org.easymock.tests.UsageVerifyTest.twoThrows":234,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":226,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":296,"org.easymock.tests2.DelegateToTest.testReturnException":97,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":328,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":118,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":2,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":144,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":280,"org.easymock.tests2.CaptureTest.testAnd":145,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":270,"org.easymock.tests.UsageStrictMockTest.testVerify":291,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":244,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":152,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":203,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":52,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":248,"org.easymock.tests2.UsageConstraintsTest.testMatches":117,"org.easymock.tests.MockClassControlTest.testToString":65,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":343,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":354,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":41,"org.easymock.tests2.UsageConstraintsTest.testNull":107,"org.easymock.tests2.EasyMockSupportClassTest.testAll":5,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":138,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":195,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":252,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":163,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":54,"org.easymock.tests.UsageThrowableTest.throwError":206,"org.easymock.tests2.UsageConstraintsTest.greaterThan":119,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":292,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":227,"org.easymock.samples.SupportTest.addDocument":331,"org.easymock.tests2.StubTest.stub":278,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":370,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":222,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":225,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":85,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":121,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":141,"org.easymock.tests.UsageExpectAndReturnTest.object":192,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":201,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":25,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":24,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":301,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":282,"org.easymock.tests.UsageExpectAndThrowTest.object":246,"org.easymock.tests2.DelegateToTest.testWrongClass":99,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":159,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":77,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":274,"org.easymock.tests2.UsageTest.moreThanOneArgument":169,"org.easymock.tests.UsageVarargTest.varargByteAccepted":300,"org.easymock.tests.MockClassControlTest.testEquals":69,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":243,"org.easymock.samples.ExampleTest.voteAgainstRemoval":179,"org.easymock.tests.UsageTest.wrongArguments":311,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":345,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":211,"org.easymock.tests.UsageVarargTest.varargShortAccepted":298,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":89,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":373,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":247,"org.easymock.tests2.UsageTest.defaultResetToNice":173,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":78,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":75,"org.easymock.tests.MockingTest.testNiceClassMocking":61,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":29,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":221,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":160,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":332,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":37,"org.easymock.tests2.MockBuilderTest.testCreateMock":38,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":63,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":161,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":87,"org.easymock.tests2.SerializationTest.testAllMockedMethod":11,"org.easymock.tests2.NameTest.nameForMocksControl":306,"org.easymock.samples.ExampleTest.voteAgainstRemovals":176,"org.easymock.tests2.CompareToTest.testCompareEqual":0,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":279,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":347,"org.easymock.tests.MockingTest.testStrictClassMocking":55,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":263,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":357,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":213,"org.easymock.tests2.CaptureTest.testCapture1_2446744":149,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":175,"org.easymock.tests.LimitationsTest.mockNativeMethod":62,"org.easymock.tests2.DelegateToTest.testStubDelegate":98,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":356,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":3,"org.easymock.tests.UsageUnorderedTest.message":310,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":348,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":320,"org.easymock.samples.ExampleTest.answerVsDelegate":177,"org.easymock.samples.ExampleTest.voteForRemoval":178,"org.easymock.tests.UsageCallCountTest.tooFewCalls":336,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":191,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":318,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":338,"org.easymock.tests.UsageVerifyTest.twoReturns":235,"org.easymock.tests2.DependencyTest.testInterfaceMocking":164,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":186,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":245,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":133,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":205,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":273,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":136,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":315,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":327,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":110,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":290,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":365,"org.easymock.tests.MockingTest.testTwoMocks":57,"org.easymock.tests2.CaptureTest.testCaptureRightOne":153,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":188,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":335,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":366,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":27,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":317,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":16,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":262,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":372,"org.easymock.tests2.UsageConstraintsTest.cmpTo":113,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":334,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":193,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":43,"org.easymock.tests2.MockedExceptionTest.testMockedException":28,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":91,"org.easymock.tests.UsageThrowableTest.throwCheckedException":209,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":125,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":255,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":361,"org.easymock.samples.PartialClassMockTest.testGetArea":51,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":233,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":271,"org.easymock.samples.ExampleTest.voteForRemovals":180,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":207,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":215,"org.easymock.samples.ConstructorCalledMockTest.testTax":49,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":116,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":204,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":275,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":15,"org.easymock.tests2.UsageTest.argumentsOrdered":309,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":316,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":256,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":95,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":358,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":187,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":342,"org.easymock.tests2.AnswerTest.answer":93,"org.easymock.tests.MockingTest.testNicePartialClassMocking":59,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":228,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":183,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":82,"org.easymock.tests2.UsageConstraintsTest.any":112,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":190,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":223,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":363,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":371,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":143,"org.easymock.tests.UsageExpectAndThrowTest.longType":239,"org.easymock.tests2.CallbackTest.callback":162,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":253,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":7,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":140,"org.easymock.tests2.NameTest.nameForMock":303,"org.easymock.tests.UsageTest.argumentsOrdered":313,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":36,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":105,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":115,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":200,"org.easymock.tests2.MockBuilderTest.testCreateMockString":40,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":277,"org.easymock.tests2.NameTest.nameForStrictMock":304,"org.easymock.tests2.CaptureTest.testCaptureNone":151,"org.easymock.tests2.SerializationTest.test":101,"org.easymock.tests.UsageExpectAndReturnTest.longType":185,"org.easymock.tests2.SerializationTest.testClass":10,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":285,"org.easymock.tests2.CaptureTest.testCaptureFirst":155,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":122,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":47,"org.easymock.tests2.UsageTest.niceToStrict":170,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":272,"org.easymock.tests2.EasyMockSupportTest.testVerify":322,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":90,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":346,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":35,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":364,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":287,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":241,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":124,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":167,"org.easymock.tests2.UsageTest.strictResetToDefault":168,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":249,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":22,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":39,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":199,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":232,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":236,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":111,"org.easymock.tests2.ConstraintsToStringTest.orToString":266,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":166,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":189,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":324,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":17,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":33,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":14,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":120,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":293,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":12,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":276,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":60,"org.easymock.tests2.UsageConstraintsTest.testOr":109,"org.easymock.tests2.DelegateToTest.testDelegate":100,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":158,"org.easymock.tests2.UsageConstraintsTest.testNotNull":126,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":281,"org.easymock.tests.MockClassControlTest.testHashCode":68,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":156,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":81,"org.easymock.tests2.CaptureTest.testCapture_2617107":147,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":314,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":53,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":84,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":194,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":212,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":217,"org.easymock.tests2.ThreadingTest.testThreadSafe":157,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":172,"org.easymock.tests.UsageThrowableTest.noUpperLimit":355,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":360,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":42,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":44,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":142,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":134,"org.easymock.tests.UsageExpectAndReturnTest.floatType":184,"org.easymock.tests2.UsageTest.wrongArguments":307,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":321,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":326,"org.easymock.tests2.UsageConstraintsTest.testSame":108,"org.easymock.tests2.UsageTest.resumeIfFailure":174,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":67,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":269,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":45,"org.easymock.tests.UsageOverloadedMethodTest.overloading":214,"org.easymock.samples.SupportTest.voteForRemovals":181,"org.easymock.tests.UsageRangeTest.combination":261,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":265,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":210,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":83,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":352,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":50,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":127,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":73,"org.easymock.tests.UsageTest.openCallCountByLastCall":258,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":242,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":351,"org.easymock.tests2.NameTest.nameForNiceMock":305,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":264,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":123,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":86,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":359,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":129,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":132,"org.easymock.tests2.CaptureTest.testPrimitive":148,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":196,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":250,"org.easymock.samples.BasicClassMockTest.testPrintContent":48,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":268,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":367,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":219,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":20,"org.easymock.tests.UsageExpectAndThrowTest.floatType":238,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":13,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":26,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":197,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":340,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":19,"org.easymock.tests2.UsageStrictMockTest.differentMethods":131,"org.easymock.tests.UsageTest.exactCallCountByLastCall":260,"org.easymock.tests2.AnswerTest.stubAnswer":94,"org.easymock.tests.MockingTest.testClassMocking":56,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":135,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":74,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":139,"org.easymock.tests2.CaptureTest.testCaptureLast":150,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":237,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":339,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":337,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":6,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":165,"org.easymock.tests.UsageStrictMockTest.range":229,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":259,"org.easymock.tests.UsageTest.unexpectedCallWithArray":80,"org.easymock.tests.MockingTest.testPartialClassMocking":58,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":198,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":308,"org.easymock.tests2.UsageConstraintsTest.constraints":104,"org.easymock.samples.ExampleTest.addDocument":329,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":286,"org.easymock.tests2.UsageConstraintsTest.lessThan":128,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":349,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":325,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":312,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":202,"org.easymock.tests.UsageVarargTest.varargLongAccepted":299,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":362,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":369,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":21,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":23,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":319,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":79,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":76,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":254,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":8,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":350,"org.easymock.tests2.UsageStrictMockTest.range":130,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":46,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":32,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":344,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":374,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":375,"org.easymock.tests.UsageTest.moreThanOneArgument":257,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":1,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":70,"org.easymock.tests2.UsageTest.openCallCountByLastCall":171,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":220,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":31,"org.easymock.tests.UsageStrictMockTest.differentMethods":230,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":137,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":64,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":103,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":34,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":4,"org.easymock.tests.DefaultClassInstantiatorTest.object":71,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":240,"org.easymock.tests.UsageVarargTest.differentLength":297,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":353,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":218,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":182,"org.easymock.tests2.CaptureTest.testCapture2_2446744":154,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":224,"org.easymock.tests.GenericTest.testPackageScope":72}}]

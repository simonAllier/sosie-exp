[{"position":"org.easymock.internal.ArgumentToString:47","failures":[0,1,2,3,4,5],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[6,7,8,9],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","type":"CtInvocationImpl"},"failures":[10,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[25,0,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,3,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:235","failures":[72,73,74,75,76,77,78,79,80,81,82,83,7,84,85],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:49","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:204","sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:194","sourceCode":"try {\n    java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:196","sourceCode":"java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"args":"args","mockClass":"mockClass","cstr":"cstr"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:44","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Void.java.lang.Class<java.lang.Void>, null)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:181","failures":[76,86,87,88,89,90,91,92,7,85],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.matchers.Captures:53","failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[93],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,72,72,73,73,116,117,118,54,119,120,121,122,123,55,56,57,124,58,125,126,127,128,129,130,59,131,60,132,133,7,9,84,134,135,136,137,138,139,140,141,142,143],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:933","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"failures":[144,145],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"position":"org.easymock.EasyMock:1531","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:34","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[146,147,148,149,150,25,151,152,153,29,154,155,98,99,100,36,156,157,158,159,160,161,162,163,164,165,166,39,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,101,103,105,194,42,43,195,196,197,198,199,200,201,202,203,204,115,205,206,207,208,72,72,73,73,209,46,210,211,48,212,213,214,52,53,54,120,122,123,56,215,216,124,58,217,125,126,127,129,59,131,60,218,219,61,220,221,222,223,224,225,226,227,228,229,230,231,232,62,233,234,235,236,237,238,239,240,241,242,133,243,244,245,246,247,248,249,7,8,84,250,64,251,252,253,65,66,254,255,67,256,257,134,135,136,137,258,259,70,71,260,138,139,140,141,261,142,143,11,12,14,15,18,19,20,21,22,23,24],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:91","sourceCode":"if (!(java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).verify())) {\n    break;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:36","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksControl:190","failures":[28,161,37,38,187,262,189,190,191,192,193,49,51,58,131,220,225,226,227,230,235,236,237,238,252,256,257,21],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:49","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Integer.java.lang.Class<java.lang.Integer>, java.lang.Integer.java.lang.Integer.valueOf(0))","type":"CtInvocationImpl"},"failures":[263,264,265,201,217,266,267,133,268,246,93,269,249,270,271,272,261],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[273,274],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[74,75,76,78,79,275,276,85,140,143,277],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"this.java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"failures":[146,147,148,149,150,25,151,0,26,152,153,27,28,29,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,32,303,304,305,306,307,96,308,309,310,311,33,34,35,155,312,98,99,100,36,157,158,313,314,315,316,160,161,162,37,163,164,317,318,165,166,38,39,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,262,188,189,190,191,192,193,319,320,321,263,322,101,102,323,324,325,326,327,328,105,329,330,331,332,40,333,3,194,41,42,43,334,195,196,200,201,202,203,204,335,115,336,205,337,206,207,338,208,339,72,73,116,117,340,209,46,210,211,47,48,49,212,213,214,50,51,52,53,118,54,120,121,122,123,55,56,57,215,216,124,58,217,125,126,127,128,129,130,59,131,60,218,219,61,220,221,222,223,224,225,226,227,228,229,230,231,232,62,233,234,235,236,237,341,238,239,240,241,342,343,242,344,345,346,347,348,266,267,133,268,349,350,243,244,246,247,63,248,269,249,270,272,7,8,9,84,250,64,251,252,253,65,66,254,255,67,256,257,351,134,135,136,137,258,68,352,259,69,70,71,353,354,260,138,139,140,141,261,142,143,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lock":"lock"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[26,27,28,29,280,281,283,288,293,298,299,300,301,302,32,303,304,305,306,307,96,355,309,310,311,34,35,98,99,100,36,313,314,315,159,160,161,37,163,164,317,318,38,39,169,170,172,177,182,187,262,188,189,190,191,192,193,101,102,105,40,333,3,194,41,42,43,334,356,335,115,336,205,337,206,207,338,208,339,116,117,340,209,46,210,47,48,49,50,51,53,54,120,122,123,56,215,216,124,58,217,125,126,127,129,131,220,222,225,226,357,227,228,230,62,235,236,237,341,238,239,342,343,133,246,247,63,248,269,270,272,7,8,9,84,250,64,251,252,253,65,66,255,67,256,257,351,358,359,360,361,134,135,136,137,258,68,352,259,69,70,71,353,138,139,140,141,261,142,143,11,12,13,14,16,17,18,19,20,21,24],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"failures":[146,147,148,149,150,25,151,0,26,152,153,27,28,29,154,362,363,364,365,366,367,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,32,303,304,305,306,307,96,355,368,308,309,310,311,33,34,35,155,312,97,98,99,100,36,156,157,158,313,369,314,315,370,159,316,160,161,162,371,372,37,163,164,317,318,165,166,38,39,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,262,188,189,190,191,192,193,319,320,321,263,322,101,102,103,323,324,325,326,327,328,105,373,374,329,330,331,332,40,333,3,194,41,42,43,334,356,195,196,375,197,198,199,376,377,378,379,380,200,201,202,203,204,335,115,336,205,337,206,207,338,208,339,72,72,73,73,116,117,340,209,46,210,211,47,48,49,212,213,214,50,51,52,53,118,54,120,121,122,123,55,56,57,215,216,124,58,217,125,126,127,128,129,130,59,131,60,218,219,61,220,221,222,223,224,225,226,357,227,228,229,230,231,232,62,233,234,235,236,237,341,238,239,240,241,342,381,382,343,242,344,345,346,347,348,266,267,133,268,349,350,243,244,245,246,247,63,248,93,269,249,270,271,272,7,8,9,84,250,64,251,252,253,65,66,254,255,67,256,257,351,358,359,360,361,134,135,136,137,258,68,352,259,69,70,71,353,354,260,138,139,140,141,261,142,143,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"method":"candidateMethod"}},{"position":"org.easymock.EasyMock:2124","failures":[337,342,343,242,349,350],"status":-1,"binaryOperator":"org.easymock.internal.Invocation == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1263","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[58,130,60,140,277],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:157","sourceCode":"final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:122","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.EasyMock:1079","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[76,123,77,55,57,124,87,88,89,383,92,349,7,8,84,85,250],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:346","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[384,376,379,380],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"transplant":{"position":"org.easymock.internal.matchers.Or:47","sourceCode":"java.lang.StringBuffer.append(\"or(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[10],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:337","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[385,386,373],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:52","sourceCode":"java.lang.StringBuffer.append(\"]\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[387,38,39,42,70],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[312,317,323,324,325,326,327,328,266,267,133,268,260],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[0,1,2,3,4,5],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[72,73,74,75,76,77,78,79,275,276,7,84,85,388,389,390,134,391,392,135,393,394,395,396,397,398,399,400,401,136,402,403,404,405,406,137,407,408,140,143,277],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:47","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Short.java.lang.Class<java.lang.Short>, java.lang.Short.java.lang.Short.valueOf(((short)(0))))","type":"CtInvocationImpl"},"failures":[321,200],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":220,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":25,"org.easymock.tests2.UsageTest.argumentsOrdered":51,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":256,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":49,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":336,"org.easymock.tests2.DelegateToTest.testReturnException":269,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":324,"org.easymock.tests.MockingTest.testPartialClassMocking":98,"org.easymock.tests.MockClassControlTest.testToString":109,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":154,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":132,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":396,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":135,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":278,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":216,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":87,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":226,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":163,"org.easymock.tests2.UsageTest.wrongArguments":47,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":331,"org.easymock.samples.ExampleTest.answerVsDelegate":337,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":95,"org.easymock.tests2.UsageConstraintsTest.testNull":222,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":125,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":114,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":67,"org.easymock.tests2.CaptureTest.testPrimitive":14,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":165,"org.easymock.tests.UsageTest.moreThanOneArgument":151,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":297,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":217,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":148,"org.easymock.tests.UsageTest.argumentsOrdered":28,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":376,"org.easymock.tests.UsageVarargTest.varargIntAccepted":300,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":200,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":118,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":91,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":121,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":204,"org.easymock.tests.ReplayStateInvalidUsageTest.times":385,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":258,"org.easymock.tests2.AnswerTest.answer":342,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":357,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":348,"org.easymock.tests2.CaptureTest.testAnd":11,"org.easymock.tests2.UsageTest.strictResetToDefault":210,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":130,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":75,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":147,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":157,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":253,"org.easymock.tests2.DelegateToTest.testDelegate":272,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":380,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":293,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":327,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":322,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":371,"org.easymock.tests2.CaptureTest.testCapture1_2446744":15,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":291,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":346,"org.easymock.tests.UsageThrowableTest.throwError":187,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":45,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":150,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":80,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":275,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":408,"org.easymock.samples.PartialClassMockTest.testGetArea":115,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":201,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":397,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":106,"org.easymock.tests2.UsageTest.niceToStrict":48,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":279,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":120,"org.easymock.tests2.MockBuilderTest.testCreateMock":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":404,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":4,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":287,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":65,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":367,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":355,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":329,"org.easymock.tests.UsageOverloadedMethodTest.overloading":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":406,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":401,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":231,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":315,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":178,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":160,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":230,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":20,"org.easymock.tests2.EasyMockSupportClassTest.testAll":134,"org.easymock.tests.MockClassControlTest.testEquals":113,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":102,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":295,"org.easymock.tests2.CaptureTest.testCaptureAll":12,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":321,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":347,"org.easymock.tests2.UsageConstraintsTest.testMatches":232,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":149,"org.easymock.samples.ExampleTest.voteForRemovals":208,"org.easymock.tests.UsageVarargTest.allKinds":307,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":166,"org.easymock.samples.BasicClassMockTest.testPrintContent":117,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":263,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":192,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":68,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":271,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":328,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":92,"org.easymock.tests2.UsageConstraintsTest.greaterThan":233,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":391,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":156,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":60,"org.easymock.samples.ExampleTest.voteForRemoval":206,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":244,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":128,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":96,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":46,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":77,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":251,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":188,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":389,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":323,"org.easymock.tests2.CaptureTest.testCaptureFirst":24,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":93,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":252,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":53,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":316,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":174,"org.easymock.tests2.CaptureTest.testCapture2_2446744":23,"org.easymock.tests2.UsageTest.moreThanOneArgument":211,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":246,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":56,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":306,"org.easymock.tests.GenericTest.testBridgedEquals":104,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":34,"org.easymock.tests.UsageExpectAndReturnTest.longType":170,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":250,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":319,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":274,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":296,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":199,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":341,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":294,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":146,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":363,"org.easymock.tests.UsageCallCountTest.tooManyCalls":35,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":308,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":405,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":175,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":283,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":191,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":139,"org.easymock.tests2.UsageConstraintsTest.testContains":229,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":273,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":368,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":133,"org.easymock.tests2.UsageConstraintsTest.testFind":221,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":162,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":40,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":350,"org.easymock.tests.UsageExpectAndReturnTest.object":177,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":129,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":255,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":88,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":302,"org.easymock.tests.UsageTest.exactCallCountByLastCall":29,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":155,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":377,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":85,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":183,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":298,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":314,"org.easymock.tests.MockClassControlTest.testHashCode":112,"org.easymock.tests2.EasyMockSupportTest.testVerify":351,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":399,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":378,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":313,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":366,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":30,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":345,"org.easymock.tests.UsageVarargTest.varargCharAccepted":301,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":352,"org.easymock.tests2.UsageTest.openCallCountByLastCall":212,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":257,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":365,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":400,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":285,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":189,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":111,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":59,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":284,"org.easymock.tests.CapturesMatcherTest.test":10,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":184,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":362,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":137,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":110,"org.easymock.tests2.UsageTest.resumeIfFailure":52,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":94,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":326,"org.easymock.tests2.StubTest.stubWithReturnValue":260,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":76,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":176,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":238,"org.easymock.tests2.SerializationTest.testAllMockedMethod":9,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":373,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":82,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":5,"org.easymock.samples.SupportTest.voteForRemovals":209,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":290,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":6,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":374,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":381,"org.easymock.tests.UsageExpectAndThrowTest.object":288,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":236,"org.easymock.tests2.DelegateToTest.testWrongClass":270,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":195,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":196,"org.easymock.tests.UsageStrictMockTest.range":42,"org.easymock.samples.ConstructorCalledMockTest.testTax":72,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":254,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":138,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":289,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":388,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":27,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":330,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":1,"org.easymock.tests2.CaptureTest.testCaptureNone":19,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":198,"org.easymock.tests.UsageUnorderedTest.message":37,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":44,"org.easymock.tests.UsageVerifyTest.twoReturns":39,"org.easymock.tests.UsageVarargTest.varargByteAccepted":305,"org.easymock.tests2.ThreadingTest.testThreadSafe":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":402,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":311,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":116,"org.easymock.tests2.CaptureTest.testCapture_2617107":13,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":318,"org.easymock.tests2.UsageConstraintsTest.any":227,"org.easymock.tests2.StubTest.stub":354,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":364,"org.easymock.tests.UsageExpectAndThrowTest.longType":281,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":325,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":144,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":69,"org.easymock.tests2.SerializationTest.testClass":7,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":248,"org.easymock.tests.LimitationsTest.mockNativeMethod":105,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":186,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":103,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":353,"org.easymock.tests2.NameTest.nameForMocksControl":361,"org.easymock.tests2.MockedExceptionTest.testMockedException":267,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":392,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":153,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":100,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":282,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":124,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":123,"org.easymock.tests.MockingTest.testNicePartialClassMocking":99,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":127,"org.easymock.tests2.CaptureTest.testCaptureLast":18,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":86,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":372,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":143,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":225,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":237,"org.easymock.tests.MockingTest.testTwoMocks":97,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":277,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":167,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":286,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":50,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":240,"org.easymock.tests.UsageStrictMockTest.differentMethods":43,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":245,"org.easymock.tests2.MockBuilderTest.testCreateMockString":57,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":393,"org.easymock.tests.UsageExpectAndThrowTest.floatType":280,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":390,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":343,"org.easymock.tests.UsageVerifyTest.twoThrows":38,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":136,"org.easymock.samples.ExampleTest.voteAgainstRemoval":207,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":375,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":131,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":276,"org.easymock.tests2.UsageConstraintsTest.testNotNull":239,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":193,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":266,"org.easymock.tests2.UsageTest.defaultResetToNice":214,"org.easymock.samples.ExampleTest.voteAgainstRemovals":205,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":386,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":182,"org.easymock.tests.UsageVarargTest.differentLength":32,"org.easymock.tests2.CallbackTest.callback":63,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":83,"org.easymock.tests.UsageTest.openCallCountByLastCall":152,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":218,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":317,"org.easymock.tests.UsageCallCountTest.tooFewCalls":309,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":141,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":332,"org.easymock.tests.UsageThrowableTest.throwCheckedException":190,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":2,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":142,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":312,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":140,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":261,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":344,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":90,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":247,"org.easymock.tests2.NameTest.nameForNiceMock":360,"org.easymock.tests2.DependencyTest.testInterfaceMocking":215,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":89,"org.easymock.samples.ExampleTest.addDocument":338,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":403,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":407,"org.easymock.tests2.DelegateToTest.testStubDelegate":249,"org.easymock.tests2.AnswerTest.stubAnswer":242,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":194,"org.easymock.tests.UsageVarargTest.varargLongAccepted":304,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":334,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":185,"org.easymock.tests.UsageExpectAndReturnTest.floatType":169,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":84,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":73,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":234,"org.easymock.tests.UsageThrowableTest.noUpperLimit":262,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":370,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":219,"org.easymock.tests2.SerializationTest.test":8,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":16,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":145,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":264,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":168,"org.easymock.tests2.UsageConstraintsTest.testSame":223,"org.easymock.samples.SupportTest.addDocument":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":394,"org.easymock.tests.GenericTest.testPackageScope":101,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":379,"org.easymock.tests2.NameTest.nameForMock":358,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":179,"org.easymock.tests2.UsageStrictMockTest.differentMethods":71,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":79,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":171,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":292,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":158,"org.easymock.tests2.MockedExceptionTest.testRealException":268,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":81,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":259,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":164,"org.easymock.tests2.NameTest.nameForStrictMock":359,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":349,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":126,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":235,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":54,"org.easymock.tests2.UsageStrictMockTest.range":70,"org.easymock.tests2.UsageConstraintsTest.lessThan":241,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":384,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":64,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":383,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":398,"org.easymock.tests2.CaptureTest.testCaptureRightOne":21,"org.easymock.tests2.UsageConstraintsTest.testOr":224,"org.easymock.tests.UsageRangeTest.combination":36,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":58,"org.easymock.tests.UsageTest.wrongArguments":26,"org.easymock.tests2.MockBuilderTest.testWithConstructor":74,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":395,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":108,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":172,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":180,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":265,"org.easymock.tests.UsageVarargTest.varargShortAccepted":303,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":33,"org.easymock.tests2.UsageConstraintsTest.cmpTo":228,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":382,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":213,"org.easymock.tests2.CaptureTest.testCaptureFromStub":22,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":119,"org.easymock.tests.UsageTest.unexpectedCallWithArray":0,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":3,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":310,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":78,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":181,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":41,"org.easymock.tests2.UsageConstraintsTest.constraints":61,"org.easymock.samples.ExampleTest.addAndChangeDocument":339,"org.easymock.tests.UsageStrictMockTest.testVerify":356,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":335,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":333,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":320,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":17,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":202,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":173,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":159,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":203,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":387,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":66,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":299}}]

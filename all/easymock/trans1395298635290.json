[{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[0,1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.Range:83","failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,2,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"status":-1,"binaryOperator":"(int) == (java.lang.Integer.int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:122","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[58],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[59,60,61,62,63,64,65,66,67,68],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"failures":[69],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[70],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,3,59,88,89,90,91,92,93,94,95,96,97,98,99,100,4,101,102,103,104,5,105,106,107,108,109,6,110,111,112,113,114,115,116,7,117,118,8,119,9,120,121,122,123,124,125,10,11,126,12,13,14,15,16,127,128,129,130,17,131,132,133,134,135,136,18,137,138,19,139,20,21,140,141,22,23,142,24,25,143,26,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,0,177,178,179,180,181,182,183,184,185,186,27,2,28,29,67,187,188,189,190,191,192,193,30,31,32,33,194,195,34,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,35,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,36,269,270,37,38,39,271,40,41,42,43,44,45,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,46,47,48,49,294,295,50,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,51,317,318,52,53,54,55,56,319,320,321,322,323,324,57,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[104,108,118,340],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1608","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:93","sourceCode":"return this","type":"CtReturnImpl"},"failures":[159,175,176],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[341,342],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:321","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Throwable.getClass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"position":"org.easymock.internal.RecordState:183","failures":[73,74,75,76,77,78,80,81,82,83,84,85,86,87,3,59,88,89,91,92,93,94,95,96,97,98,99,100,4,101,102,103,104,5,105,106,107,108,109,6,110,111,112,113,114,115,116,7,117,118,8,119,9,120,125,10,11,126,13,14,15,16,127,128,17,131,133,134,135,136,18,137,138,19,139,20,140,141,22,23,26,144,146,147,148,149,152,153,154,155,156,159,161,162,166,168,169,171,177,178,179,180,181,182,183,184,185,186,67,187,190,193,30,31,32,33,194,195,34,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,229,231,232,242,243,244,245,246,247,249,250,251,252,35,253,254,255,268,36,269,270,37,38,39,41,42,45,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,293,46,47,48,49,294,295,50,296,297,298,299,300,301,307,308,309,310,311,51,318,53,54,55,56,319,333,334,335,336,338,339],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[139],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[343,344,345],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:41","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[346],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:138","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[60,347,67,68],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:83","failures":[21,24,25,32,348,349,271,40,43,44,48,49,306,51,52,55],"status":-1,"binaryOperator":"java.lang.Object[] == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:148","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[350,351,352],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[353,9,120],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[372,373,374,375,271,52],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:681","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[5],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:107","failures":[71,71,72,72,81,82,85,59,89,376,377,378,379,380,90,381,382,91,383,384,385,386,387,388,389,390,391,92,392,393,394,395,396,93,397,398,157,399,158,400,401,159,160,161,162,61,163,164,402,165,166,167,169,170,171,172,173,403,404,174,175,176,0,405,1,177,178,179,180,182,183,406,67,68,188,189,190,202,341,407,408,350,342,409,410,411,412,203,204,205,413,414,233,234,235,236,237,238,239,240,58,241,242,415,416,255,417,418,419,420,301,421],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[8],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:92","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[85,59,399,158,159,161,162,164,402,165,172,175,176,406,422,234,417,418],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"transplant":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"failures":[307],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:155","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","type":"CtTryImpl"},"failures":[351],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2110","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Double>(double))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[356,365],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:217","failures":[8,19,26,30,45,48,49,50,53],"status":-1,"binaryOperator":"((org.easymock.internal.Result) == null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[174],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","this":"this"}},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[71,71,72,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,3,59,88,89,376,377,423,424,378,90,382,91,384,385,388,389,390,391,92,393,396,93,397,398,94,425,95,96,97,98,99,426,100,4,101,102,103,104,427,5,105,106,107,108,109,6,110,111,112,113,114,115,116,7,117,118,8,353,428,119,9,120,121,122,123,124,125,10,11,126,12,13,14,15,16,127,128,129,130,17,131,132,133,134,135,429,136,18,137,430,138,19,139,20,21,140,141,22,23,142,24,25,143,26,144,145,146,148,149,151,153,154,155,156,431,158,401,159,160,161,61,163,166,167,168,169,170,171,172,173,403,404,174,175,176,0,405,179,180,181,182,184,185,432,354,355,356,357,186,433,358,359,360,361,362,67,68,434,363,364,365,366,187,435,367,368,369,370,371,188,189,190,191,192,193,30,31,32,33,194,195,34,196,197,198,199,436,200,201,202,341,407,408,350,342,409,410,411,412,203,204,437,205,438,439,413,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,440,441,442,443,226,227,228,444,414,229,230,231,232,233,234,235,236,237,238,239,240,58,241,242,415,416,445,446,447,243,244,245,448,246,247,248,249,250,251,252,35,253,254,449,255,256,257,258,259,260,261,262,263,264,265,266,267,268,36,269,270,37,38,39,271,40,41,42,43,44,45,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,46,47,48,49,450,451,452,453,418,454,455,456,457,294,295,50,296,297,298,299,300,419,420,301,421,302,458,303,304,459,305,306,307,308,309,310,311,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,312,313,314,315,316,484,485,486,51,317,318,52,53,54,55,56,319,320,321,322,323,324,57,325,487,488,489,490,491,326,327,328,329,330,331,332,333,334,335,336,337,338,339],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[188,189,190,191,34,201,266,269,455,456,457,467,321,322,323,324,57,325],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:44","sourceCode":"final java.io.IOException java.io.IOException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[71,72,96,97,100,4,101,102,106,108,109,110,111,7,117,118,129,30,34,200,253,254,268,36,37,307,308,309,310,311,53,326,327,328,329,330],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:288","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[430,462],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1471","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:139","sourceCode":"return java.lang.Class<?>[][int].isPrimitive()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[343,344,345],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[347,492,493,494,495],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[99],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.RecordState:191","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:106","sourceCode":"return org.easymock.IAnswer<?>.answer()","type":"CtReturnImpl"},"failures":[71,72,73,74,75,76,78,85,87,3,59,88,90,91,92,93,94,95,96,97,98,99,100,4,101,102,103,104,5,105,106,107,108,109,6,110,111,112,113,114,116,7,117,118,8,119,9,120,121,122,123,124,125,10,126,12,15,16,127,128,129,130,17,131,132,133,134,135,136,18,137,138,19,139,20,140,22,23,142,143,26,144,145,146,147,148,149,150,151,152,153,154,155,157,159,160,161,162,166,167,168,169,170,171,172,173,174,176,177,178,179,180,181,182,183,184,185,186,67,187,188,189,190,191,30,32,33,34,196,197,198,199,200,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,229,231,232,241,253,254,268,36,269,270,37,38,39,41,42,45,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,46,47,48,49,294,50,296,297,298,299,300,301,302,303,304,307,308,309,310,311,312,313,314,315,316,53,55,56,321,322,323,324,57,325,326,327,328,329,330],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:328","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[258,475,482],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[103],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:216","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1634","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,3,59,88,89,376,496,497,498,377,423,424,378,379,380,90,381,382,91,383,384,385,386,387,388,389,390,391,92,392,393,394,395,396,93,397,398,94,425,95,96,97,98,99,426,100,4,101,102,103,104,427,5,105,106,107,108,109,6,110,111,112,113,114,115,116,7,117,118,8,353,428,119,9,120,121,122,123,124,125,10,11,126,12,13,14,15,16,127,128,129,130,17,131,132,133,134,135,429,136,18,137,430,138,19,139,20,21,140,141,22,23,142,24,25,143,26,144,145,146,147,148,149,150,151,152,153,154,155,156,431,157,499,158,400,500,401,159,160,161,60,162,501,61,163,164,502,165,166,167,168,169,170,171,172,503,173,403,404,174,175,176,0,405,1,177,178,179,180,504,181,182,183,505,506,507,184,185,432,354,355,356,357,186,433,358,359,360,361,362,508,27,2,28,29,67,68,509,434,363,364,365,366,187,435,367,368,369,370,371,188,189,190,191,192,193,30,31,32,33,194,195,34,196,197,198,199,436,200,201,510,202,341,407,408,350,342,511,409,410,411,412,203,204,437,205,438,439,413,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,440,441,442,443,226,227,228,444,414,229,230,231,232,233,234,235,236,237,238,239,240,58,241,242,415,416,445,446,447,243,244,245,448,246,247,248,249,250,251,252,35,253,254,512,449,255,256,257,258,259,260,261,262,263,264,265,266,267,268,36,269,270,37,38,39,271,40,41,42,43,44,45,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,46,47,48,49,450,451,452,417,513,514,453,515,418,516,454,455,456,457,294,295,50,296,297,298,299,300,419,420,301,421,302,458,303,304,459,305,306,307,308,309,310,311,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,312,313,314,315,316,484,485,486,51,317,318,52,53,54,55,56,319,320,321,322,323,324,57,325,487,488,489,490,491,326,327,328,329,330,331,332,333,334,335,336,337,338,339],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[59,88,89,517],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[98,99,102,103,427,112,125,11,128],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:220","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","type":"CtIfImpl"},"failures":[58,416],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:124","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[59,88,89],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":99,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":38,"org.easymock.tests2.UsageTest.argumentsOrdered":25,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":154,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":435,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":470,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":141,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":84,"org.easymock.tests2.DelegateToTest.testReturnException":136,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":322,"org.easymock.tests.MockingTest.testPartialClassMocking":203,"org.easymock.tests.MockClassControlTest.testToString":235,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":508,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":446,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":479,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":1,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":386,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":91,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":272,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":185,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":62,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":104,"org.easymock.tests2.UsageTest.wrongArguments":21,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":268,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":362,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":198,"org.easymock.samples.ExampleTest.answerVsDelegate":74,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":418,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":439,"org.easymock.tests2.UsageConstraintsTest.testNull":4,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":169,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":153,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":240,"org.easymock.tests2.CaptureTest.testPrimitive":126,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":37,"org.easymock.tests.UsageTest.moreThanOneArgument":39,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":291,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":168,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":328,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":487,"org.easymock.tests.UsageTest.argumentsOrdered":44,"org.easymock.tests.UsageVarargTest.varargIntAccepted":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":475,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":307,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":495,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":157,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":497,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":370,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":160,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":462,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":311,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":186,"org.easymock.tests.ReplayStateInvalidUsageTest.times":264,"org.easymock.tests2.DependencyTest.testClassMocking":506,"org.easymock.tests2.AnswerTest.answer":8,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":477,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":124,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":514,"org.easymock.tests2.CaptureTest.testAnd":125,"org.easymock.tests2.UsageTest.strictResetToDefault":139,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":500,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":174,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":327,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":148,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":231,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":491,"org.easymock.tests2.DelegateToTest.testDelegate":138,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":287,"org.easymock.tests.LimitationsTest.mockFinalMethod":421,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":57,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":316,"org.easymock.tests2.DependencyTest.testClassMockingSupport":507,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":440,"org.easymock.tests2.CaptureTest.testCapture1_2446744":12,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":503,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":285,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":122,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":258,"org.easymock.tests.UsageThrowableTest.throwError":294,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":515,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":512,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":371,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":330,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":398,"org.easymock.samples.PartialClassMockTest.testGetArea":85,"org.easymock.tests.MockingTest.testInterfaceMocking":437,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":259,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":308,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":451,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":414,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":387,"org.easymock.tests2.UsageTest.niceToStrict":140,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":273,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":460,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":343,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":159,"org.easymock.tests2.MockBuilderTest.testCreateMock":163,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":394,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":359,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":281,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":372,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":149,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":513,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":486,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":331,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":196,"org.easymock.tests.UsageOverloadedMethodTest.overloading":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":396,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":391,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":108,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":304,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":217,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":292,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":107,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":351,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":127,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":448,"org.easymock.tests2.EasyMockSupportClassTest.testAll":90,"org.easymock.tests.MockClassControlTest.testEquals":239,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":242,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":289,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":123,"org.easymock.tests2.CaptureTest.testCaptureAll":10,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":314,"org.easymock.tests.MockNameTest.defaultName":436,"org.easymock.tests2.UsageConstraintsTest.testMatches":109,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":256,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":329,"org.easymock.samples.ExampleTest.voteForRemovals":78,"org.easymock.tests.UsageVarargTest.allKinds":35,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":47,"org.easymock.samples.BasicClassMockTest.testPrintContent":82,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":315,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":299,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":192,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":430,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":325,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":367,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":511,"org.easymock.tests2.UsageConstraintsTest.greaterThan":110,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":66,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":381,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":230,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":0,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":409,"org.easymock.samples.ExampleTest.voteForRemoval":75,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":405,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":132,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":516,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":498,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":172,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":19,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":255,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":61,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":467,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":146,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":379,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":321,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":429,"org.easymock.tests2.CaptureTest.testCaptureFirst":17,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":466,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":147,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":26,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":306,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":213,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":134,"org.easymock.tests2.CaptureTest.testCapture2_2446744":130,"org.easymock.tests2.UsageTest.moreThanOneArgument":20,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":478,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":164,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":252,"org.easymock.tests.GenericTest.testBridgedEquals":416,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":338,"org.easymock.tests.UsageExpectAndReturnTest.longType":209,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":144,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":312,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":402,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":290,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":449,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":115,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":288,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":456,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":326,"org.easymock.tests.UsageCallCountTest.tooManyCalls":339,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":333,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":395,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":214,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":361,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":277,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":298,"org.easymock.tests.MockingTest.testNiceClassMocking":413,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":178,"org.easymock.tests.MockingTest.testClassMocking":411,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":399,"org.easymock.tests2.UsageConstraintsTest.testContains":106,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":332,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":190,"org.easymock.tests2.UsageConstraintsTest.testFind":100,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":46,"org.easymock.tests.MockTypeTest.fromEasyMockClass":453,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":95,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":317,"org.easymock.tests.UsageExpectAndReturnTest.object":216,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":173,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":360,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":152,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":63,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":247,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":228,"org.easymock.tests.UsageTest.exactCallCountByLastCall":45,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":200,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":465,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":488,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":445,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":68,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":222,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":243,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":303,"org.easymock.tests.MockClassControlTest.testHashCode":238,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":363,"org.easymock.tests2.EasyMockSupportTest.testVerify":156,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":389,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":489,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":485,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":302,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":121,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":348,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":431,"org.easymock.tests.UsageVarargTest.varargCharAccepted":246,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":510,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":193,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":483,"org.easymock.tests2.UsageTest.openCallCountByLastCall":22,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":155,"org.easymock.tests.DefaultClassInstantiatorTest.object":202,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":344,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":484,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":226,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":390,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":279,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":296,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":356,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":434,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":175,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":237,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":278,"org.easymock.tests.CapturesMatcherTest.test":346,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":223,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":455,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":93,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":236,"org.easymock.tests2.UsageTest.resumeIfFailure":143,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":417,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":496,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":324,"org.easymock.tests2.StubTest.stubWithReturnValue":34,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":60,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":116,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":215,"org.easymock.tests2.SerializationTest.testAllMockedMethod":89,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":476,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":492,"org.easymock.samples.SupportTest.voteForRemovals":87,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":373,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":58,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":365,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":284,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":517,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":482,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":353,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":447,"org.easymock.tests.UsageExpectAndThrowTest.object":282,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":113,"org.easymock.tests2.DelegateToTest.testWrongClass":137,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":253,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":254,"org.easymock.tests.UsageStrictMockTest.range":55,"org.easymock.samples.ConstructorCalledMockTest.testTax":71,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":423,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":151,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":177,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":283,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":161,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":43,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":266,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":378,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":197,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":374,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":452,"org.easymock.tests2.CaptureTest.testCaptureNone":16,"org.easymock.tests.UsageUnorderedTest.message":51,"org.easymock.tests.UsageVerifyTest.twoReturns":49,"org.easymock.tests.UsageVarargTest.varargByteAccepted":251,"org.easymock.tests2.ThreadingTest.testThreadSafe":131,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":392,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":336,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":444,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":81,"org.easymock.tests2.CaptureTest.testCapture_2617107":11,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":442,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":480,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":270,"org.easymock.tests2.UsageConstraintsTest.any":5,"org.easymock.tests2.StubTest.stub":195,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":263,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":457,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":481,"org.easymock.tests.UsageExpectAndThrowTest.longType":275,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":323,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":350,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":262,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":31,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":187,"org.easymock.tests2.SerializationTest.testClass":59,"org.easymock.tests.LimitationsTest.mockNativeMethod":301,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":415,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":225,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":422,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":355,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":194,"org.easymock.tests2.NameTest.nameForMocksControl":29,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":70,"org.easymock.tests2.MockedExceptionTest.testMockedException":189,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":357,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":382,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":42,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":425,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":205,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":276,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":166,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":162,"org.easymock.tests.MockingTest.testNicePartialClassMocking":204,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":171,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":493,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":432,"org.easymock.tests2.CaptureTest.testCaptureLast":15,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":441,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":183,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":103,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":114,"org.easymock.tests.MockingTest.testTwoMocks":412,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":505,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":206,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":280,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":24,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":117,"org.easymock.samples.ExampleTest.removeNonExistingDocument":79,"org.easymock.tests.UsageStrictMockTest.differentMethods":56,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":260,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":358,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":364,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":407,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":133,"org.easymock.tests2.MockBuilderTest.testCreateMockString":165,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":233,"org.easymock.tests.UsageExpectAndThrowTest.floatType":274,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":383,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":6,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":380,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":119,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":509,"org.easymock.tests.UsageVerifyTest.twoThrows":48,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":458,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":92,"org.easymock.samples.ExampleTest.voteAgainstRemoval":76,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":471,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":450,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":176,"org.easymock.tests.LimitationsTest.privateConstructor":420,"org.easymock.tests2.UsageConstraintsTest.testNotNull":7,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":188,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":300,"org.easymock.tests2.UsageTest.defaultResetToNice":142,"org.easymock.samples.ExampleTest.voteAgainstRemovals":73,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":472,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":221,"org.easymock.tests.UsageVarargTest.differentLength":248,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":354,"org.easymock.tests2.CallbackTest.callback":3,"org.easymock.tests2.UsageConstraintsTest.equals":426,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":403,"org.easymock.tests.UsageTest.openCallCountByLastCall":41,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":96,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":269,"org.easymock.tests.UsageCallCountTest.tooFewCalls":334,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":180,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":199,"org.easymock.tests.UsageThrowableTest.throwCheckedException":297,"org.easymock.tests.MockingTest.testStrictClassMocking":410,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":375,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":182,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":201,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":433,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":179,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":265,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":181,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":120,"org.easymock.tests.ObjectMethodsTest.testHashCode":227,"org.easymock.tests2.CompareToTest.testGreateOrEqual":340,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":494,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":135,"org.easymock.tests2.NameTest.nameForNiceMock":28,"org.easymock.tests2.DependencyTest.testInterfaceMocking":184,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":64,"org.easymock.samples.ExampleTest.addDocument":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":397,"org.easymock.tests2.DelegateToTest.testStubDelegate":18,"org.easymock.tests2.AnswerTest.stubAnswer":9,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":53,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":501,"org.easymock.tests.UsageVarargTest.varargLongAccepted":250,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":319,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":469,"org.easymock.tests.UsageExpectAndReturnTest.floatType":208,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":224,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":67,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":72,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":459,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":111,"org.easymock.tests.UsageThrowableTest.noUpperLimit":295,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":369,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":97,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":376,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":13,"org.easymock.tests2.SerializationTest.test":88,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":352,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":341,"org.easymock.tests2.UsageConstraintsTest.testSame":101,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":207,"org.easymock.samples.SupportTest.addDocument":86,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":504,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":261,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":384,"org.easymock.tests.GenericTest.testPackageScope":241,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":490,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":464,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":368,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":438,"org.easymock.tests2.NameTest.nameForMock":27,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":218,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":502,"org.easymock.tests2.UsageStrictMockTest.differentMethods":33,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":404,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":210,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":286,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":443,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":232,"org.easymock.tests2.MockedExceptionTest.testRealException":191,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":454,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":474,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":424,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":473,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":30,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":36,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":267,"org.easymock.tests2.NameTest.nameForStrictMock":2,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":401,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":94,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":345,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":170,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":377,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":408,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":112,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":158,"org.easymock.tests2.UsageStrictMockTest.range":32,"org.easymock.tests2.UsageConstraintsTest.lessThan":118,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":366,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":468,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":145,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":388,"org.easymock.tests2.CaptureTest.testCaptureRightOne":128,"org.easymock.tests2.UsageConstraintsTest.testOr":102,"org.easymock.tests.UsageRangeTest.combination":229,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":167,"org.easymock.tests.UsageTest.wrongArguments":40,"org.easymock.tests2.MockBuilderTest.testWithConstructor":499,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":385,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":234,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":211,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":461,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":219,"org.easymock.tests.UsageVarargTest.varargShortAccepted":249,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":342,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":337,"org.easymock.tests2.UsageConstraintsTest.cmpTo":105,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":428,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":463,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":23,"org.easymock.tests2.CaptureTest.testCaptureFromStub":129,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":257,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":400,"org.easymock.tests.UsageTest.unexpectedCallWithArray":271,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":52,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":335,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":220,"org.easymock.tests2.CaptureTest.testCapture":69,"org.easymock.tests2.UsageConstraintsTest.constraints":98,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":54,"org.easymock.samples.ExampleTest.addAndChangeDocument":80,"org.easymock.tests.UsageStrictMockTest.testVerify":320,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":83,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":318,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":313,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":14,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":406,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":309,"org.easymock.tests.LimitationsTest.abstractClass":419,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":212,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":305,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":310,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":150,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":244}}]

[{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"failures":[0,1,2,3],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[4,5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,4,5,111,112,113,114,0,115,116,117,118,119,120,1,121,122,123,124,2,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"position":"org.easymock.internal.Range:44","failures":[187,188,7,8,189,9,10,190,11,191,192,193,194,195,196,197,12,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,13,227,14,228,229,230,231,232,233,234,235,15,16,236,17,237,238,239,240,241,242,243,244,245,246,247,248,18,19,249,20,250,251,252,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,41,42,272,273,43,44,274,275,276,277,278,45,279,46,280,47,48,49,50,51,52,53,54,55,56,281,282,283,284,285,286,287,288,57,58,59,60,289,290,291,292,293,61,294,62,63,64,65,66,67,295,296,297,298,299,300,301,302,303,304,305,306,68,307,69,70,308,309,71,310,72,311,312,73,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,74,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,75,76,77,78,79,80,81,364,365,82,83,366,367,84,368,369,370,371,372,85,373,86,87,88,89,90,91,374,375,92,376,377,378,93,94,95,379,380,96,97,98,99,381,100,101,102,6,103,104,105,106,382,107,108,109,110,4,5,383,111,112,113,114,0,115,116,117,118,119,120,1,121,122,123,124,2,125,384,385,386,387,388,389,390,391,392,126,127,128,129,130,131,132,133,134,135,136,137,393,394,395,138,396,397,398,399,400,139,140,401,141,142,143,144,145,402,403,146,147,148,149,404,150,151,152,405,153,406,407,408,154,409,155,410,156,411,412,413,157,414,415,158,416,417,418,159,419,420,421,422,423,160,161,162,163,164,424,425,426,427,428,165,429,430,431,432,433,434,435,436,166,437,167,168,438,439,440,169,441,442,170,443,444,445,446,447,448,171,449,450,172,451,452,453,454,455,456,457,458,459,173,460,461,462,463,464,174,465,466,467,468,469,470,471,472,473,474,475,476,175,477,478,479,480,481,482,483,484,176,177,178,179,180,485,181,486,182,183,184,487,488,185,186],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[193,193,194,194,195,196,12,237,238,239,240,241,242,243,244,245,246,247,248,18,19,20,252,278,45,279,46,280,295,296,297,298,299,300,301,302,303,319,326,327,74,328,356,361,86,87,89,90,91,374,92,376,377,378,93,94,95,379,380,96,97,98,99,101,102,125,384,385,386,390,394,395,138,139,401,152,405,153,406,407,408,154,409,155,410,156,412,413,157,414,415,446,447,448,171,449,450,172,451,452,453,454,455,456,457,458,459,173,460,461,462,463,464,174,465,466],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"equalsMethod"}},{"position":"org.easymock.internal.matchers.Equals:54","failures":[382],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[187,188,7,8,189,9,10,190,11,191,192,193,194,195,196,197,12,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,13,227,14,228,229,230,231,232,233,234,235,15,16,236,17,237,238,239,240,241,242,243,244,245,246,247,248,18,19,249,20,250,251,252,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,41,42,272,273,43,44,274,275,276,277,278,45,279,46,280,47,48,49,50,51,52,53,54,55,56,281,282,283,284,285,286,287,288,57,58,59,60,289,290,291,292,293,61,294,62,63,64,65,66,67,295,296,297,298,299,300,301,302,303,304,305,306,68,307,69,70,308,309,71,310,72,311,312,73,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,74,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,75,76,77,78,79,80,81,364,365,82,83,366,367,84,368,369,370,371,372,85,373,86,87,88,89,90,91,374,375,92,376,377,378,93,94,95,379,380,96,97,98,99,381,100,101,102,6,103,104,105,106,382,107,108,109,110,4,5,383,111,112,113,114,0,115,116,117,118,119,120,1,121,122,123,124,2,125,384,385,386,387,388,389,390,391,392,126,127,128,129,130,131,132,133,134,135,136,137,393,394,395,138,396,397,398,399,400,139,140,401,141,142,143,144,145,402,403,146,147,148,149,404,150,151,152,405,153,406,407,408,154,409,155,410,156,411,412,413,157,414,415,158,416,417,418,159,419,420,421,422,423,160,161,162,163,164,424,425,426,427,428,165,429,430,431,432,433,434,435,436,166,437,167,168,438,439,440,169,441,442,170,443,444,445,446,447,448,171,449,450,172,451,452,453,454,455,456,457,458,459,173,460,461,462,463,464,174,465,466,467,468,469,470,471,472,473,474,475,476,175,477,478,479,480,481,482,483,484,176,177,178,179,180,485,181,486,182,183,184,487,488,185,186],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.LastControl:124","failures":[397],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:971","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[120],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Results:90","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:69","sourceCode":"continue","type":"CtContinueImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:222","failures":[286,287,369,372],"status":-1,"binaryOperator":"(\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[489,490,491,306,81,364,365,366,367,492,493,494,495,180,485,487,488],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:327","sourceCode":"return false","type":"CtReturnImpl"},"failures":[266,267,270,271],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[259,496,268,497,498,47,304,306,307,69,70,310,72,334,353,354,355,80,364,365,366,367,84,87,93,95,105,116,127,131,132,135,400,153,413,157,415,435,437,167,168,178,485,181,486,487,488,185,186],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[377,184],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:53","sourceCode":"return false","type":"CtReturnImpl"},"failures":[116],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[499],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","type":"CtAssignmentImpl"},"failures":[500,501],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:340","sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[161,162],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.RecordState:262","failures":[198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,265,266,267,269,270,271,272,273,56,60,61,62,63,64,65,66,67,310,320,321,322,323,324,325,80,83,371,394,395,138,396,169,178,183],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[239,243],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:86","sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","type":"CtReturnImpl"},"failures":[296,301,316],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[502,139,140,401],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:103","sourceCode":"final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:125","sourceCode":"final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int])","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.CompareTo:42","failures":[503],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockMethodInterceptor:127","sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:124","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[139,140,401],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1964","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[193,193,194,194,195,196,12,238,239,240,241,242,243,245,246,247,248,18,19,20,252,278,45,279,46,280,295,296,298,299,300,301,302,303,326,327,74,328,356,361,86,87,89,90,91,374,92,376,377,378,93,94,95,379,380,96,97,98,99,101,102,504,505,506,125,384,386,390,394,395,138,139,401,507,152,153,406,408,154,409,155,156,412,413,157,508,415,446,447,448,171,449,450,172,451,452,453,454,455,456,457,458,459,173,460,461,462,463,464,174,465,466],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[509,510,511,512,513,125,384,139,410,412],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:223","failures":[374,380,394,152,409,172],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1445","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1349","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"failures":[193,194,12,278,46,376,94,125,384,385,139,405,407,154,410,411,412,413,414,172,173],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:126","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:104","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method);\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[288,68,70,308,71,310,72,81,85,166,168,438,180],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:44","sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","type":"CtThrowImpl"},"failures":[259,47,304,306,307,69,70,310,72,334,353,354,355,80,364,365,366,367,84,87,93,95,105,116,127,131,132,135,400,153,413,157,415,162,435,437,167,168,178,485,181,486,487,488,185,186],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[4],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:280","failures":[189,370,442,170,443,445],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[193,193,194,194,195,196,12,238,239,240,241,242,243,245,246,247,248,18,19,20,252,278,45,279,46,280,295,296,297,298,299,300,301,302,303,319,326,327,74,328,356,361,86,87,89,90,91,374,92,376,377,378,93,94,95,379,380,96,97,98,99,101,102,514,125,384,386,390,394,395,138,139,401,152,515,153,406,408,154,409,155,156,412,413,157,516,415,446,447,448,171,449,450,172,451,452,453,454,455,456,457,458,459,173,460,461,462,463,464,174,465,466],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[238,239,240,241,243,245],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:218","failures":[193,194,12,172,173],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":106,"org.easymock.tests2.UsageTest.argumentsOrdered":488,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":80,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":136,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":477,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":227,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":486,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":197,"org.easymock.tests2.DelegateToTest.testReturnException":442,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":321,"org.easymock.tests.MockingTest.testPartialClassMocking":18,"org.easymock.tests.MockClassControlTest.testToString":298,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":467,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":73,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":235,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":380,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":454,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":172,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":198,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":177,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":509,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":5,"org.easymock.tests2.UsageTest.wrongArguments":485,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":41,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":434,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":284,"org.easymock.samples.ExampleTest.answerVsDelegate":189,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":361,"org.easymock.tests2.UsageConstraintsTest.testNull":108,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":251,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":89,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":135,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":303,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":504,"org.easymock.tests2.CaptureTest.testPrimitive":144,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":43,"org.easymock.tests.UsageTest.moreThanOneArgument":81,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":217,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":88,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":291,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":44,"org.easymock.tests.UsageTest.argumentsOrdered":367,"org.easymock.tests.UsageVarargTest.varargIntAccepted":255,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":231,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":75,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":152,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":481,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":388,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":409,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":220,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":79,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":165,"org.easymock.tests.ReplayStateInvalidUsageTest.times":343,"org.easymock.tests2.DependencyTest.testClassMocking":483,"org.easymock.tests2.AnswerTest.answer":158,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":383,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":233,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":423,"org.easymock.tests2.CaptureTest.testAnd":141,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":358,"org.easymock.tests2.UsageTest.strictResetToDefault":179,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":407,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":378,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":290,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":130,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":49,"org.easymock.tests2.DelegateToTest.testDelegate":445,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":277,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":213,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_BackToDefault":500,"org.easymock.tests.LimitationsTest.mockFinalMethod":328,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":324,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":333,"org.easymock.tests2.DependencyTest.testClassMockingSupport":484,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":286,"org.easymock.tests2.CaptureTest.testCapture1_2446744":145,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":375,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":211,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":421,"org.easymock.tests.UsageThrowableTest.throwError":61,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":337,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":360,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":482,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":268,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":466,"org.easymock.samples.PartialClassMockTest.testGetArea":12,"org.easymock.tests.MockingTest.testInterfaceMocking":249,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":338,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":76,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":52,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":455,"org.easymock.tests2.UsageTest.niceToStrict":181,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":199,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":319,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":218,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":154,"org.easymock.tests2.MockBuilderTest.testCreateMock":413,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":462,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":431,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":492,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":207,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":131,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":357,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":271,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":347,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":282,"org.easymock.tests.UsageOverloadedMethodTest.overloading":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":464,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":459,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":0,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":371,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":32,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":54,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":499,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":114,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":148,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":256,"org.easymock.tests2.EasyMockSupportClassTest.testAll":171,"org.easymock.tests.MockClassControlTest.testEquals":302,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":279,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":493,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":215,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":505,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":422,"org.easymock.tests2.CaptureTest.testCaptureAll":142,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":331,"org.easymock.tests.MockNameTest.defaultName":311,"org.easymock.tests2.UsageConstraintsTest.testMatches":115,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":292,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":335,"org.easymock.samples.ExampleTest.voteForRemovals":11,"org.easymock.tests.UsageVarargTest.allKinds":264,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":71,"org.easymock.samples.BasicClassMockTest.testPrintContent":196,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":332,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":66,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":435,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":478,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":444,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":325,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":513,"org.easymock.tests2.UsageConstraintsTest.greaterThan":117,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":244,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":449,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":48,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":95,"org.easymock.samples.ExampleTest.voteForRemoval":9,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":245,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":161,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":379,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":508,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":362,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":389,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":374,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":178,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":295,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":412,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":225,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":128,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":447,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":320,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":441,"org.easymock.tests2.CaptureTest.testCaptureFirst":151,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":224,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":129,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":186,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":373,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":28,"org.easymock.tests2.UsageTest.moreThanOneArgument":180,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":163,"org.easymock.tests2.CaptureTest.testCapture2_2446744":150,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":157,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":234,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":263,"org.easymock.tests.GenericTest.testBridgedEquals":280,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":354,"org.easymock.tests.UsageExpectAndReturnTest.longType":24,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":126,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":329,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":516,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":216,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":121,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":281,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":214,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":266,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":289,"org.easymock.tests.UsageCallCountTest.tooManyCalls":355,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":463,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":29,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":433,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":203,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":65,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":97,"org.easymock.tests.MockingTest.testNiceClassMocking":252,"org.easymock.tests.MockingTest.testClassMocking":247,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":515,"org.easymock.tests2.UsageConstraintsTest.testContains":113,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":348,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":138,"org.easymock.tests2.UsageConstraintsTest.testFind":107,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":56,"org.easymock.tests.MockTypeTest.fromEasyMockClass":359,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":399,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":304,"org.easymock.tests.UsageExpectAndReturnTest.object":31,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":92,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":432,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":134,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":510,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":258,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":317,"org.easymock.tests.UsageTest.exactCallCountByLastCall":84,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":59,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":223,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":274,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":312,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":491,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":384,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":37,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":253,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":370,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":473,"org.easymock.tests.MockClassControlTest.testHashCode":301,"org.easymock.tests2.EasyMockSupportTest.testVerify":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":457,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":275,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":270,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":368,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":497,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":420,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":439,"org.easymock.tests.UsageVarargTest.varargCharAccepted":257,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":237,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":436,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":17,"org.easymock.tests2.UsageTest.openCallCountByLastCall":182,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":137,"org.easymock.tests.DefaultClassInstantiatorTest.object":238,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":269,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":315,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":498,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":458,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":205,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":506,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":63,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":427,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":472,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":93,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":300,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":204,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":38,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":174,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":299,"org.easymock.tests2.UsageTest.resumeIfFailure":185,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":356,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":387,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":323,"org.easymock.tests2.StubTest.stubWithReturnValue":169,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":410,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":122,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":30,"org.easymock.tests2.SerializationTest.testAllMockedMethod":401,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":232,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":494,"org.easymock.samples.SupportTest.voteForRemovals":7,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":278,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":475,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":210,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":502,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":236,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":416,"org.easymock.tests.UsageExpectAndThrowTest.object":208,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":313,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":120,"org.easymock.tests2.DelegateToTest.testWrongClass":443,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":57,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":58,"org.easymock.tests.UsageStrictMockTest.range":69,"org.easymock.samples.ConstructorCalledMockTest.testTax":193,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":391,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":133,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":96,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":209,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":446,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":345,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":366,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":283,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":489,"org.easymock.tests2.CaptureTest.testCaptureNone":147,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":53,"org.easymock.tests.UsageUnorderedTest.message":334,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":496,"org.easymock.tests.UsageVerifyTest.twoReturns":72,"org.easymock.tests.UsageVarargTest.varargByteAccepted":262,"org.easymock.tests2.ThreadingTest.testThreadSafe":160,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":460,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":352,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":195,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":318,"org.easymock.tests2.CaptureTest.testCapture_2617107":143,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":495,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":288,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":15,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":273,"org.easymock.tests2.UsageConstraintsTest.any":111,"org.easymock.tests2.StubTest.stub":440,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":342,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":267,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":16,"org.easymock.tests.UsageExpectAndThrowTest.longType":201,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":322,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":242,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":341,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":437,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":175,"org.easymock.tests2.SerializationTest.testClass":139,"org.easymock.tests.LimitationsTest.mockNativeMethod":74,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":46,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":40,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":426,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":438,"org.easymock.tests2.NameTest.nameForMocksControl":471,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":428,"org.easymock.tests2.MockedExceptionTest.testMockedException":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":450,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":83,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":398,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":20,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":202,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":86,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":156,"org.easymock.tests.MockingTest.testNicePartialClassMocking":19,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":91,"org.easymock.tests2.CompareToTest.testNotComparable":503,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":424,"org.easymock.tests2.CaptureTest.testCaptureLast":146,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":287,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":102,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":4,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":1,"org.easymock.tests.MockingTest.testTwoMocks":248,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":6,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":21,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":206,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":487,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":124,"org.easymock.samples.ExampleTest.removeNonExistingDocument":191,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":430,"org.easymock.tests.UsageStrictMockTest.differentMethods":70,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":339,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":474,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":240,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":162,"org.easymock.tests2.MockBuilderTest.testCreateMockString":415,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":296,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":451,"org.easymock.tests.UsageExpectAndThrowTest.floatType":200,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":448,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":418,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":385,"org.easymock.tests.UsageVerifyTest.twoThrows":310,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":173,"org.easymock.samples.ExampleTest.voteAgainstRemoval":10,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":14,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":51,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":94,"org.easymock.tests.LimitationsTest.privateConstructor":327,"org.easymock.tests2.UsageConstraintsTest.testNotNull":123,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":394,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":67,"org.easymock.tests2.UsageTest.defaultResetToNice":184,"org.easymock.samples.ExampleTest.voteAgainstRemovals":8,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":36,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":228,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":425,"org.easymock.tests.UsageVarargTest.differentLength":259,"org.easymock.tests2.CallbackTest.callback":400,"org.easymock.tests2.UsageConstraintsTest.equals":382,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":376,"org.easymock.tests.UsageTest.openCallCountByLastCall":82,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":103,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":272,"org.easymock.tests.UsageCallCountTest.tooFewCalls":350,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":99,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":285,"org.easymock.tests.UsageThrowableTest.throwCheckedException":64,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":490,"org.easymock.tests.MockingTest.testStrictClassMocking":246,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":101,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":60,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":429,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":98,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":344,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":100,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":419,"org.easymock.tests.ObjectMethodsTest.testHashCode":316,"org.easymock.tests2.NameTest.nameForNiceMock":470,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":164,"org.easymock.tests2.DependencyTest.testInterfaceMocking":176,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":511,"org.easymock.samples.ExampleTest.addDocument":190,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":461,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":465,"org.easymock.tests2.DelegateToTest.testStubDelegate":170,"org.easymock.tests2.AnswerTest.stubAnswer":159,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":68,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":411,"org.easymock.tests.UsageVarargTest.varargLongAccepted":261,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":308,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":13,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":39,"org.easymock.tests.UsageExpectAndReturnTest.floatType":23,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":125,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":194,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":480,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":118,"org.easymock.tests.UsageThrowableTest.noUpperLimit":294,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":372,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":104,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":386,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":402,"org.easymock.tests2.SerializationTest.test":140,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":239,"org.easymock.tests2.UsageConstraintsTest.testSame":109,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":22,"org.easymock.samples.SupportTest.addDocument":188,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_Overriden":501,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":381,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":452,"org.easymock.tests.GenericTest.testPackageScope":45,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":222,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":479,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":250,"org.easymock.tests2.NameTest.nameForMock":468,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":33,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":414,"org.easymock.tests2.UsageStrictMockTest.differentMethods":168,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":377,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":25,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":212,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":314,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":50,"org.easymock.tests2.MockedExceptionTest.testRealException":396,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":363,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":392,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":230,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":166,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":229,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":42,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":346,"org.easymock.tests2.NameTest.nameForStrictMock":469,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":408,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":397,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":90,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":390,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":119,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":241,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":153,"org.easymock.tests2.UsageStrictMockTest.range":167,"org.easymock.tests2.UsageConstraintsTest.lessThan":2,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":476,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":507,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":512,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":127,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":456,"org.easymock.tests2.CaptureTest.testCaptureRightOne":149,"org.easymock.tests2.UsageConstraintsTest.testOr":110,"org.easymock.tests.UsageRangeTest.combination":47,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":87,"org.easymock.tests.UsageTest.wrongArguments":365,"org.easymock.tests2.MockBuilderTest.testWithConstructor":405,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":453,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":297,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":26,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":34,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":219,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":243,"org.easymock.tests.UsageVarargTest.varargShortAccepted":260,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":353,"org.easymock.tests2.UsageConstraintsTest.cmpTo":112,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":417,"org.easymock.tests2.CompareToTest.testLessThan":3,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":221,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":183,"org.easymock.tests2.CaptureTest.testCaptureFromStub":404,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":336,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":406,"org.easymock.tests.UsageTest.unexpectedCallWithArray":364,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":306,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":351,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":35,"org.easymock.tests2.UsageConstraintsTest.constraints":105,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":307,"org.easymock.samples.ExampleTest.addAndChangeDocument":192,"org.easymock.tests.UsageStrictMockTest.testVerify":309,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":187,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":305,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":330,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":403,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":514,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":77,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":27,"org.easymock.tests.LimitationsTest.abstractClass":326,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":78,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":85,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":132,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":254}}]

[{"transplantationPoint":{"position":"org.easymock.EasyMock:1470","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","type":"CtInvocationImpl"},"failures":[0,1,2],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"failures":[17,18],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[19,20,21,22,9,11],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[23,24,25,26],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:304","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[27,28,29,30,31],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1204","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[1],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[32],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1107","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,0,49,50,51,52,1,53,54,55,56,57,58,59,60,61,62,2,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,23,24,25,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,32,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,3,130,131,132,133,134,135,136,137,138,139,4,140,141,142,143,144,5,6,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,8,247,248,249,250,251,252,253,9,254,255,10,256,257,258,259,260,11,12,261,262,13,14,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,15,16,295,296,297,298,299,300,301,302,303,304,305,306],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,0,49,50,51,52,1,53,54,55,56,57,58,59,60,61,62,2,63,64,66,67,68,69,71,72,74,75,77,23,24,79,80,81,82,83,84,86,88,89,90,95,96,32,97,98,307,99,100,101,308,102,103,104,106,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,3,130,132,133,134,135,136,137,138,139,140,142,143,144,145,146,147,309,310,148,149,150,151,152,153,154,155,156,157,158,159,160,161,164,164,165,165,167,170,171,172,173,174,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,311,312,191,192,193,205,313,207,314,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,244,245,315,316,317,318,319,246,320,321,322,323,324,325,326,327,8,254,10,256,258,259,260,261,262,263,29,30,31,264,265,266,267,268,269,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,328,294,15,16,295,296,297,298,299,300,301,302,303,304,305,329],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:355","sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[330],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:78","sourceCode":"org.easymock.internal.ExpectedInvocation = new org.easymock.internal.ExpectedInvocation(org.easymock.internal.Invocation , java.util.List<org.easymock.IArgumentMatcher>)","type":"CtAssignmentImpl"},"failures":[331,332,333,334,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,0,49,50,51,52,1,53,335,54,55,56,57,58,59,60,61,62,2,63,64,65,66,67,68,69,71,72,74,75,77,23,24,25,79,80,81,82,83,84,86,88,89,90,95,96,32,97,98,307,99,100,101,308,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,3,130,131,132,133,134,135,136,137,138,139,4,140,141,142,143,144,5,6,145,146,147,309,310,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,164,165,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,311,312,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,313,207,314,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,336,237,238,239,240,242,243,244,245,316,317,246,320,321,322,323,324,325,326,327,8,252,253,9,254,255,10,256,257,337,258,259,260,12,261,262,13,14,263,29,30,31,264,265,266,267,268,269,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,338,328,294,15,16,295,296,297,298,299,300,301,302,303,339,304,305,340,329],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[302],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[61,341],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:720","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[53],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:801","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:206","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[70,71,342,343,72,73,74,75,76,77,78,85,88,89,344,121,133,134,135,167,330,313,345,346],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[70,71,72,73,74,75,76,77,78,23,25,79,80,82,83,84,85,86,87,88,89,90,123,125,132,133,134,135,155,156,157,158,160,161,162,163,164,164,165,165,167,205,206,313,347,246,258,348,300,301,302],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1976","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[178,181],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"position":"org.easymock.internal.BridgeMethodResolver:94","failures":[],"status":0,"binaryOperator":"(\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:357","sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:89","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[349],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"m"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:184","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[343],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[102],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:44","sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","type":"CtThrowImpl"},"failures":[34,38,39,42,48,60,71,76,77,78,80,88,90,32,126,129,3,130,137,4,140,141,5,6,145,146,154,199,207,241,242,243,8,252,9,255,10,256,259,11,12,13,14,263,15,16],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:47","sourceCode":"throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"))","type":"CtThrowImpl"},"failures":[335],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[350,119],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:252","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"failures":[120,121,122,123,124,137,143,178,180,181,182,183,184,185,193,211,214,215,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,259,262,264,265,266,267,268,269,15,305],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[351,352,353,354,355,356,357],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:38","sourceCode":"new java.util.HashSet<java.lang.String>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksBehavior:200","failures":[32],"status":-1,"binaryOperator":"(((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1079","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","type":"CtInvocationImpl"},"failures":[48,1,2,105],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[128,130,131,139,221,225,226,228,231,254,256,257,260,358,294,15,16,329],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,0,49,50,51,52,1,53,54,55,56,57,58,59,60,61,62,2,63,64,66,67,68,69,71,72,74,75,77,23,24,79,80,81,82,83,84,86,88,89,90,95,96,32,97,98,307,99,100,101,308,102,103,104,106,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,3,130,132,133,134,135,136,137,138,139,140,142,143,144,145,146,147,309,310,148,149,150,151,152,153,154,155,156,157,158,159,160,161,164,164,165,165,167,170,171,172,173,174,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,359,311,360,312,191,192,193,205,313,207,314,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,244,245,315,316,317,318,319,246,320,321,322,323,324,325,326,327,8,254,10,256,258,259,260,261,262,263,29,30,31,264,265,266,267,268,269,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,328,294,15,16,295,296,297,298,299,300,301,302,303,304,305,329],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[361,362,363],"status":-1,"binaryOperator":"java.lang.String == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[53,58,69,364],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ErrorMessage:50","failures":[8,365],"status":-1,"binaryOperator":"int == 1","name":"removeConditional","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[103,105,106,107,108,109,110,112,366,113,114,116],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:218","failures":[72,367,368,76,78,23,369,89,344,125,357,133,134,164,165,167,330,313],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:92","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[370,71,72,74,75,77,371,78,23,85,88,89,372,373,167,347,345,346],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":0,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":259,"org.easymock.tests2.UsageTest.argumentsOrdered":6,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":43,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":267,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":141,"org.easymock.tests2.StubTest.stubWithReturnValue":120,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":351,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":283,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":66,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":166,"org.easymock.tests2.SerializationTest.testAllMockedMethod":25,"org.easymock.tests2.DelegateToTest.testReturnException":99,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":323,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":265,"org.easymock.tests.MockingTest.testPartialClassMocking":300,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":20,"org.easymock.samples.SupportTest.voteForRemovals":170,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":330,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":311,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":344,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":229,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":26,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":324,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":217,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":133,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":309,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":360,"org.easymock.tests.UsageExpectAndThrowTest.object":227,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":63,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":118,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":352,"org.easymock.tests2.DelegateToTest.testWrongClass":101,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":244,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":245,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":53,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":212,"org.easymock.tests2.UsageTest.wrongArguments":4,"org.easymock.tests.UsageStrictMockTest.range":10,"org.easymock.samples.ConstructorCalledMockTest.testTax":164,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":272,"org.easymock.samples.ExampleTest.answerVsDelegate":172,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":40,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":346,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":155,"org.easymock.tests2.UsageConstraintsTest.testNull":50,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":228,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":82,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":74,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":42,"org.easymock.tests2.CaptureTest.testPrimitive":106,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":216,"org.easymock.tests.UsageTest.moreThanOneArgument":260,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":236,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":13,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":27,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":271,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":81,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":297,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":21,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":322,"org.easymock.tests2.CaptureTest.testCaptureNone":111,"org.easymock.tests.UsageUnorderedTest.message":8,"org.easymock.tests.UsageVerifyTest.twoReturns":16,"org.easymock.tests.UsageVarargTest.varargByteAccepted":202,"org.easymock.tests2.ThreadingTest.testThreadSafe":95,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":315,"org.easymock.tests.UsageTest.argumentsOrdered":14,"org.easymock.tests.UsageVarargTest.varargIntAccepted":196,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":240,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":162,"org.easymock.tests2.CaptureTest.testCapture_2617107":105,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":186,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":356,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":70,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":358,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":215,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":73,"org.easymock.tests2.UsageConstraintsTest.any":54,"org.easymock.tests2.StubTest.stub":119,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":31,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":190,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":266,"org.easymock.tests.UsageExpectAndThrowTest.longType":220,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":129,"org.easymock.tests2.SerializationTest.testClass":23,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":151,"org.easymock.tests.LimitationsTest.mockNativeMethod":246,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":136,"org.easymock.tests2.DependencyTest.testClassMocking":17,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":313,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":293,"org.easymock.tests2.AnswerTest.answer":147,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":335,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":94,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":373,"org.easymock.tests2.CaptureTest.testAnd":103,"org.easymock.tests2.UsageTest.strictResetToDefault":138,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":87,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":131,"org.easymock.tests2.NameTest.nameForMocksControl":334,"org.easymock.tests2.MockedExceptionTest.testMockedException":122,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":296,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":208,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":37,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":262,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":319,"org.easymock.tests2.DelegateToTest.testDelegate":102,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":302,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":221,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":79,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":75,"org.easymock.tests.MockingTest.testNicePartialClassMocking":301,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":232,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":84,"org.easymock.tests2.CaptureTest.testCaptureLast":110,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":268,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":328,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":1,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":161,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":251,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":64,"org.easymock.tests.MockingTest.testTwoMocks":348,"org.easymock.tests2.DependencyTest.testClassMockingSupport":18,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":338,"org.easymock.tests2.CaptureTest.testCapture1_2446744":107,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":362,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":274,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":230,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":225,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":92,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":5,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":68,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":361,"org.easymock.tests.UsageThrowableTest.throwError":178,"org.easymock.tests.UsageStrictMockTest.differentMethods":256,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":32,"org.easymock.tests2.MockBuilderTest.testCreateMockString":78,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":299,"org.easymock.tests.UsageExpectAndThrowTest.floatType":219,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":60,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":148,"org.easymock.tests.UsageVerifyTest.twoThrows":15,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":339,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":134,"org.easymock.samples.PartialClassMockTest.testGetArea":167,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":187,"org.easymock.samples.ExampleTest.voteAgainstRemoval":174,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":321,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":320,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":89,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":218,"org.easymock.tests2.UsageTest.niceToStrict":140,"org.easymock.tests2.ThreadingTest.testChangeDefault":363,"org.easymock.tests2.UsageConstraintsTest.testNotNull":67,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":121,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":185,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":72,"org.easymock.tests2.MockBuilderTest.testCreateMock":76,"org.easymock.tests2.UsageTest.defaultResetToNice":144,"org.easymock.samples.ExampleTest.voteAgainstRemovals":171,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":289,"org.easymock.tests.UsageVarargTest.differentLength":199,"org.easymock.tests2.CallbackTest.callback":154,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":369,"org.easymock.tests.UsageTest.openCallCountByLastCall":261,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":226,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":19,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":38,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":46,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":327,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":336,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":270,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":214,"org.easymock.tests.UsageCallCountTest.tooFewCalls":238,"org.easymock.tests.UsageOverloadedMethodTest.overloading":192,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":305,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":58,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":285,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":158,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":191,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":57,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":112,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":273,"org.easymock.tests.UsageThrowableTest.throwCheckedException":182,"org.easymock.tests2.EasyMockSupportClassTest.testAll":132,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":206,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":234,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":22,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":249,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":93,"org.easymock.tests2.CaptureTest.testCaptureAll":104,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":211,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":160,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":157,"org.easymock.tests2.UsageConstraintsTest.testMatches":59,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":159,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":150,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":298,"org.easymock.tests2.CompareToTest.testGreateOrEqual":364,"org.easymock.samples.ExampleTest.voteForRemovals":176,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":355,"org.easymock.tests2.NameTest.nameForNiceMock":333,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":98,"org.easymock.tests.UsageVarargTest.allKinds":204,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":294,"org.easymock.tests2.DependencyTest.testInterfaceMocking":117,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":354,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":250,"org.easymock.samples.BasicClassMockTest.testPrintContent":163,"org.easymock.samples.ExampleTest.addDocument":175,"org.easymock.tests2.DelegateToTest.testStubDelegate":100,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":184,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":126,"org.easymock.tests2.AnswerTest.stubAnswer":149,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":308,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":269,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":254,"org.easymock.tests2.UsageConstraintsTest.greaterThan":61,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":367,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":314,"org.easymock.tests.UsageVarargTest.varargLongAccepted":201,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":90,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":257,"org.easymock.samples.ExampleTest.voteForRemoval":173,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":96,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":292,"org.easymock.tests.UsageExpectAndReturnTest.floatType":276,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":85,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":125,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":165,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":340,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":62,"org.easymock.tests.UsageThrowableTest.noUpperLimit":179,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":258,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":47,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":137,"org.easymock.tests2.SerializationTest.test":24,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":108,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":368,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":28,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":35,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":180,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":275,"org.easymock.tests2.UsageConstraintsTest.testSame":51,"org.easymock.samples.SupportTest.addDocument":169,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":264,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":307,"org.easymock.tests2.CaptureTest.testCaptureFirst":116,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":36,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":146,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":306,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":281,"org.easymock.tests.GenericTest.testPackageScope":205,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":97,"org.easymock.tests2.CaptureTest.testCapture2_2446744":115,"org.easymock.tests2.UsageTest.moreThanOneArgument":139,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":318,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":77,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":203,"org.easymock.tests2.NameTest.nameForMock":331,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":242,"org.easymock.tests.UsageExpectAndReturnTest.longType":277,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":247,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":33,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":371,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":286,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":235,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":312,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":65,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":233,"org.easymock.tests2.UsageStrictMockTest.differentMethods":130,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":295,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":30,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":278,"org.easymock.tests.UsageCallCountTest.tooManyCalls":243,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":231,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":209,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":237,"org.easymock.tests2.MockedExceptionTest.testRealException":124,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":282,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":222,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":128,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":213,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":183,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":156,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":370,"org.easymock.tests2.NameTest.nameForStrictMock":332,"org.easymock.tests2.UsageConstraintsTest.testContains":56,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":123,"org.easymock.tests2.UsageConstraintsTest.testFind":49,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":193,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":343,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":152,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":83,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":252,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":153,"org.easymock.tests.UsageExpectAndReturnTest.object":284,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":365,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":2,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":86,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":71,"org.easymock.tests2.UsageStrictMockTest.range":3,"org.easymock.tests2.UsageConstraintsTest.lessThan":69,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":41,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":353,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":198,"org.easymock.tests.UsageTest.exactCallCountByLastCall":263,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":349,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":210,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":34,"org.easymock.tests2.CaptureTest.testCaptureRightOne":113,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":359,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":316,"org.easymock.tests2.UsageConstraintsTest.testOr":52,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":357,"org.easymock.tests.UsageRangeTest.combination":207,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":290,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":194,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":80,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":304,"org.easymock.tests.UsageTest.wrongArguments":12,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":347,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":279,"org.easymock.tests2.EasyMockSupportTest.testVerify":45,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":287,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":317,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":326,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":303,"org.easymock.tests.UsageVarargTest.varargShortAccepted":200,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":241,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":91,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":350,"org.easymock.tests2.UsageConstraintsTest.cmpTo":55,"org.easymock.tests.UsageVarargTest.varargCharAccepted":197,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":310,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":127,"org.easymock.tests2.UsageTest.openCallCountByLastCall":142,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":143,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":44,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":325,"org.easymock.tests2.CaptureTest.testCaptureFromStub":114,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":342,"org.easymock.tests.UsageTest.unexpectedCallWithArray":11,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":7,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":224,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":9,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":181,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":239,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":288,"org.easymock.tests2.CaptureTest.testCapture":366,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":255,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":88,"org.easymock.tests2.UsageConstraintsTest.constraints":48,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":223,"org.easymock.samples.ExampleTest.addAndChangeDocument":177,"org.easymock.tests.UsageStrictMockTest.testVerify":337,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":291,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":29,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":168,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":253,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":135,"org.easymock.tests2.CompareToTest.testGreateThan":341,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":248,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":109,"org.easymock.tests2.UsageTest.resumeIfFailure":145,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":372,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":188,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":345,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":280,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":329,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":189,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":195,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":39}}]

[{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:228","sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:84","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"equalsMethod","equalsMethod":"equalsMethod"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[153,154,155],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"failures":[156,1,157,158,159,160,161,162,163,15,19,20,164,165,22,23,166,24,167,168,169,170,25,171,172,173,174,26,175,176,177,178,179,43,180,181,182,183,81,184,185,142,186],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[121,187,188,189],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (this.java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"position":"org.easymock.EasyMock:1555","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg"}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[190],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:181","failures":[102,191,192,193,194,195,196,197,198,199],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[70,72,79,200,119,201,202,120,203,126,204],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[205,206,207,208,209,210,211,212,213,157,158,159,160,161,162,214,215,216,217,218,219,2,3,4,6,163,7,220,221,10,222,223,224,225,226,11,12,227,14,15,21,164,165,22,23,166,24,167,168,169,170,25,171,172,173,174,26,175,176,177,178,27,28,29,30,31,32,33,34,35,36,228,229,230,231,232,233,234,235,236,237,238,239,37,38,44,45,46,47,240,241,48,49,242,50,243,244,245,246,51,247,248,249,250,52,251,252,253,254,255,256,257,258,259,57,58,59,260,261,60,61,62,63,64,65,66,67,262,68,69,70,71,72,73,74,75,76,77,78,79,80,182,183,81,184,263,185,82,84,85,86,87,88,264,89,265,266,267,268,269,270,91,92,93,94,95,96,97,98,271,272,273,274,99,275,276,101,102,103,104,105,106,107,108,109,110,111,277,112,113,114,115,116,117,278,279,280,281,200,119,282,201,283,202,120,121,122,123,284,124,187,285,125,286,287,126,127,128,130,204,288,188,131,289,132,290,133,134,135,136,137,138,139,140,141,291,143,292,145,146,293,294,295,296,150,151,152,297,298],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.ConstructorArgs:77","failures":[299,153],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[300],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"methodName","key":"methodName"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:121","sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:130","sourceCode":"java.io.ObjectOutputStream.writeObject(null)","type":"CtInvocationImpl"},"failures":[104],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"position":"org.easymock.internal.matchers.StartsWith:40","failures":[301],"status":-1,"binaryOperator":"(\"startsWith(\\\"\" + (java.lang.String))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[161,302,2,163,13,15,16,17,18,19,20,164,165,22,23,166,24,167,168,169,170,25,171,172,173,174,26,175,176,177,178,43,180,181,303,304,305,185,142,186],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:231","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[306,307],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[308],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"type":"type"}},{"position":"org.easymock.internal.matchers.Equals:37","failures":[205,206,207,208,209,211,212,156,1,213,157,158,159,160,161,162,219,2,3,5,6,163,7,220,9,309,221,10,12,13,14,15,16,17,18,19,20,310,164,165,22,23,166,24,167,168,169,170,25,171,172,173,174,26,175,176,177,178,27,28,29,30,31,32,33,34,35,36,228,229,230,231,232,233,234,235,41,42,43,240,241,48,49,242,50,243,244,245,246,51,247,248,249,250,52,251,252,253,254,180,255,311,181,56,57,58,59,61,62,63,64,65,66,67,262,68,69,70,71,76,77,79,80,263,185,83,86,89,269,270,312,91,99,275,100,313,276,101,102,103,105,106,107,108,109,110,111,112,113,114,115,117,278,118,279,119,201,202,120,204,131,132,133,134,135,140,141,291,142,143,292,145,146,314,186,294,149,151,152,297],"status":-1,"binaryOperator":"(this.java.lang.Object) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocationAndResults:46","sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","type":"CtReturnImpl"},"failures":[219,2,3,8,220,309,221,310,44,255,53,54,55,265,266,267,268,275,313,276,292,144,147,148],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:233","failures":[315,316,317,205,206,207,208,209,211,212,156,1,213,157,158,159,160,161,162,318,319,320,302,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,219,2,3,4,5,6,163,341,7,8,220,9,309,221,10,222,223,224,225,226,11,12,342,13,14,15,16,17,18,19,20,310,21,164,165,22,23,166,24,167,168,169,170,25,171,172,173,174,26,175,176,177,178,27,28,29,30,31,343,32,33,34,35,36,228,229,344,345,346,230,179,231,232,233,234,235,236,238,239,37,38,39,40,41,42,43,44,45,46,47,347,348,349,240,241,48,49,242,50,243,244,245,246,51,247,248,249,250,52,251,252,253,254,180,255,53,311,181,54,55,56,303,304,305,350,57,58,59,260,260,261,261,60,61,62,63,64,65,66,67,262,68,69,70,71,72,73,351,74,75,76,77,78,79,352,353,80,182,183,81,184,263,185,82,83,84,85,86,87,88,354,89,355,265,266,267,268,269,270,312,90,91,92,93,94,95,96,97,98,356,99,275,100,313,276,101,102,103,104,105,106,107,108,109,110,111,277,112,113,114,115,116,357,117,278,118,358,279,280,281,200,119,282,201,283,202,120,121,203,122,123,284,124,187,285,125,286,287,126,127,128,129,130,204,288,188,131,359,132,133,134,307,135,136,137,138,139,140,141,291,142,143,292,144,145,146,314,186,293,147,148,294,149,295,296,150,151,360,361,152,297,298],"status":-1,"binaryOperator":"(org.easymock.internal.ExpectedInvocation) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[323,360,297,298],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:623","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:41","sourceCode":"java.lang.StringBuffer.append(\"same(\")","type":"CtInvocationImpl"},"failures":[362,363,364],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1177","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:51","sourceCode":"java.lang.StringBuffer.append(\", \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[365,362,366],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[327,357,278],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[367,102,103,104],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":119,"org.easymock.tests2.UsageTest.argumentsOrdered":148,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":180,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":114,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":160,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":327,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":146,"org.easymock.tests2.StubTest.stubWithReturnValue":185,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":191,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":246,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":61,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":130,"org.easymock.tests2.SerializationTest.testAllMockedMethod":104,"org.easymock.tests2.DelegateToTest.testReturnException":117,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":333,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":158,"org.easymock.tests.MockingTest.testPartialClassMocking":45,"org.easymock.samples.SupportTest.voteForRemovals":69,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":315,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":336,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":306,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":172,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":367,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":339,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":137,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":164,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":360,"org.easymock.tests.UsageExpectAndThrowTest.object":25,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":127,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":141,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":194,"org.easymock.tests2.DelegateToTest.testWrongClass":118,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":228,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":229,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":121,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":211,"org.easymock.tests2.UsageTest.wrongArguments":144,"org.easymock.tests.UsageStrictMockTest.range":309,"org.easymock.samples.ConstructorCalledMockTest.testTax":260,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":258,"org.easymock.samples.ExampleTest.answerVsDelegate":63,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":277,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":92,"org.easymock.tests2.UsageConstraintsTest.testNull":201,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":85,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":171,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":113,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":133,"org.easymock.tests2.CaptureTest.testPrimitive":73,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":213,"org.easymock.tests.UsageTest.moreThanOneArgument":255,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":54,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":178,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":257,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":84,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":233,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":349,"org.easymock.tests2.CaptureTest.testCaptureNone":77,"org.easymock.tests.UsageUnorderedTest.message":310,"org.easymock.tests.UsageVerifyTest.twoReturns":3,"org.easymock.tests.UsageVarargTest.varargByteAccepted":34,"org.easymock.tests2.ThreadingTest.testThreadSafe":269,"org.easymock.tests.UsageTest.argumentsOrdered":55,"org.easymock.tests.UsageVarargTest.varargIntAccepted":29,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":38,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":58,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":332,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":205,"org.easymock.tests2.CaptureTest.testCapture_2617107":72,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":289,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":198,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":337,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":1,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":290,"org.easymock.tests2.UsageConstraintsTest.any":122,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":320,"org.easymock.tests2.StubTest.stub":263,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":346,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":209,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":338,"org.easymock.tests.UsageExpectAndThrowTest.longType":23,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":159,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":366,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":100,"org.easymock.tests2.SerializationTest.testClass":102,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":131,"org.easymock.tests.LimitationsTest.mockNativeMethod":21,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":135,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":190,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":342,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":254,"org.easymock.tests2.AnswerTest.answer":151,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":203,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":334,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":274,"org.easymock.tests2.CaptureTest.testAnd":70,"org.easymock.tests2.UsageTest.strictResetToDefault":143,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":264,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":101,"org.easymock.tests2.NameTest.nameForMocksControl":268,"org.easymock.tests2.MockedExceptionTest.testMockedException":183,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":232,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":225,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":109,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":181,"org.easymock.tests2.DelegateToTest.testDelegate":279,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":47,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":166,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":82,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":134,"org.easymock.tests.MockingTest.testNicePartialClassMocking":46,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":26,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":87,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":193,"org.easymock.tests2.CaptureTest.testCaptureLast":76,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":161,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":0,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":98,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":120,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":218,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":128,"org.easymock.tests2.CaptureTest.testCapture1_2446744":351,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":240,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":173,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":272,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":169,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":147,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":288,"org.easymock.tests.UsageThrowableTest.throwError":13,"org.easymock.tests.UsageStrictMockTest.differentMethods":221,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":312,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":235,"org.easymock.tests.UsageExpectAndThrowTest.floatType":22,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":125,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":152,"org.easymock.tests.UsageVerifyTest.twoThrows":2,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":138,"org.easymock.samples.PartialClassMockTest.testGetArea":60,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":206,"org.easymock.samples.ExampleTest.voteAgainstRemoval":65,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":348,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":328,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":89,"org.easymock.tests2.UsageTest.niceToStrict":145,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":165,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":299,"org.easymock.tests2.UsageConstraintsTest.testNotNull":204,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":20,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":182,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":318,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":153,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":132,"org.easymock.tests2.UsageTest.defaultResetToNice":293,"org.easymock.samples.ExampleTest.voteAgainstRemovals":62,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":329,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":52,"org.easymock.tests.UsageVarargTest.differentLength":343,"org.easymock.tests2.CallbackTest.callback":291,"org.easymock.tests.UsageTest.openCallCountByLastCall":311,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":170,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":110,"org.easymock.tests2.ConstraintsToStringTest.startsWithToString":301,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":280,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":305,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":236,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":256,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":156,"org.easymock.tests.UsageCallCountTest.tooFewCalls":239,"org.easymock.tests.UsageOverloadedMethodTest.overloading":6,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":43,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":187,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":247,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":95,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":5,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":124,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":78,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":259,"org.easymock.tests.UsageThrowableTest.throwCheckedException":17,"org.easymock.tests2.EasyMockSupportClassTest.testAll":136,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":12,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":364,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":176,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":273,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":216,"org.easymock.tests2.CaptureTest.testCaptureAll":71,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":97,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":179,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":94,"org.easymock.tests2.UsageConstraintsTest.testMatches":285,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":96,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":298,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":234,"org.easymock.tests2.CompareToTest.testGreateOrEqual":189,"org.easymock.samples.ExampleTest.voteForRemovals":67,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":197,"org.easymock.tests2.NameTest.nameForNiceMock":267,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":91,"org.easymock.tests.UsageVarargTest.allKinds":36,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":219,"org.easymock.tests2.DependencyTest.testInterfaceMocking":140,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":196,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":217,"org.easymock.samples.BasicClassMockTest.testPrintContent":59,"org.easymock.samples.ExampleTest.addDocument":66,"org.easymock.tests2.DelegateToTest.testStubDelegate":278,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":19,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":356,"org.easymock.tests2.AnswerTest.stubAnswer":297,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":358,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":162,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":220,"org.easymock.tests2.UsageConstraintsTest.greaterThan":286,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":199,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":224,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":355,"org.easymock.tests.UsageVarargTest.varargLongAccepted":33,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":10,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":326,"org.easymock.samples.ExampleTest.voteForRemoval":64,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":270,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":253,"org.easymock.tests.UsageExpectAndReturnTest.floatType":48,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":300,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":150,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":261,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":287,"org.easymock.tests.UsageThrowableTest.noUpperLimit":14,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":281,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":4,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":142,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":74,"org.easymock.tests2.SerializationTest.test":103,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":324,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":107,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":15,"org.easymock.tests2.UsageConstraintsTest.testSame":283,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":241,"org.easymock.samples.SupportTest.addDocument":68,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":157,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":357,"org.easymock.tests2.CaptureTest.testCaptureFirst":80,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":323,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":108,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":149,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":244,"org.easymock.tests.GenericTest.testPackageScope":11,"org.easymock.tests2.CaptureTest.testCapture2_2446744":353,"org.easymock.tests2.UsageTest.moreThanOneArgument":292,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":90,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":335,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":307,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":321,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":35,"org.easymock.tests.GenericTest.testBridgedEquals":308,"org.easymock.tests2.NameTest.nameForMock":265,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":39,"org.easymock.tests.UsageExpectAndReturnTest.longType":49,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":214,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":105,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":248,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":177,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":350,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":129,"org.easymock.tests2.UsageStrictMockTest.differentMethods":276,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":175,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":345,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":231,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":242,"org.easymock.tests.UsageCallCountTest.tooManyCalls":40,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":365,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":174,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":226,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":238,"org.easymock.tests2.MockedExceptionTest.testRealException":184,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":331,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":330,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":275,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":24,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":212,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":18,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":93,"org.easymock.tests2.UsageConstraintsTest.testContains":284,"org.easymock.tests2.NameTest.nameForStrictMock":266,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":237,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":81,"org.easymock.tests2.UsageConstraintsTest.testFind":282,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":163,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":295,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":155,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":86,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":341,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":296,"org.easymock.tests.UsageExpectAndReturnTest.object":51,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":126,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":88,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":359,"org.easymock.tests2.UsageStrictMockTest.range":313,"org.easymock.tests2.UsageConstraintsTest.lessThan":188,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":112,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":195,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":31,"org.easymock.tests.UsageTest.exactCallCountByLastCall":56,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":230,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":322,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":325,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":106,"org.easymock.tests2.CaptureTest.testCaptureRightOne":79,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":316,"org.easymock.tests2.UsageConstraintsTest.testOr":202,"org.easymock.tests.UsageRangeTest.combination":223,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":192,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":251,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":83,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":27,"org.easymock.tests.UsageTest.wrongArguments":53,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":42,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":227,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":50,"org.easymock.tests2.EasyMockSupportTest.testVerify":116,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":319,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":249,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":362,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":317,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":304,"org.easymock.tests.UsageVarargTest.varargShortAccepted":32,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":41,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":271,"org.easymock.tests2.UsageConstraintsTest.cmpTo":123,"org.easymock.tests.UsageVarargTest.varargCharAccepted":30,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":361,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":302,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":340,"org.easymock.tests2.UsageTest.openCallCountByLastCall":314,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":186,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":115,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":154,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":303,"org.easymock.tests2.CaptureTest.testCaptureFromStub":352,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":168,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":16,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":8,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":37,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":250,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":354,"org.easymock.tests2.UsageConstraintsTest.constraints":200,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":9,"org.easymock.samples.ExampleTest.addAndChangeDocument":262,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":167,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":252,"org.easymock.tests.UsageStrictMockTest.testVerify":222,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":344,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":57,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":363,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":7,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":139,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":215,"org.easymock.tests2.UsageTest.resumeIfFailure":294,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":75,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":207,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":243,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":208,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":44,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":28,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":111}}]

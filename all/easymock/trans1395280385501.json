[{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[0,1],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:364","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[2,3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:83","failures":[5,6,7,13,30,16,17,18,19,24,25,31,32,26,28],"status":-1,"binaryOperator":"java.lang.Object[] == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[33,34,30,35,36,26],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:217","sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[5,6,7,13,30,16,17,18,19,24,25,32,26,28],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ExpectedInvocation:75","failures":[37,38,39,40,41,42,43,44,45,46],"status":-1,"binaryOperator":"((((this.java.util.List<org.easymock.IArgumentMatcher>) == null) && ((org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>) == null)) || (((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>))))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[47,48,49,50],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"propertyFileName","key":"propertyFileName"}},{"transplant":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[51,37,38,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,4,5,87,88,89,90,91,6,7,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,8,9,10,11,120,121,122,123,124,125,126,127,128,129,130,131,51,37,38,52,39,40,41,42,43,132,53,54,133,44,134,135,136,137,138,139,140,141,142,143,144,145,146,147,55,56,57,58,59,60,61,62,64,148,149,150,151,152,45,1,153,65,66,154,46,155,67,68,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,12,173,13,14,174,175,176,177,178,179,180,181,182,183,184,185,186,187,187,188,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,15,30,16,228,229,17,18,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,19,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,23,24,25,320,321,322,323,324,325,326,327,328,329,31,330,331,332,333,334,335,336,337,338,339,340,26,27,341,28,29,342,343,344,345,346],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1121","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[167,168],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[249],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[347],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[65],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:47","sourceCode":"this.T = T","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[51,37,38,52,39,40,41,42,132,53,54,133,44,348],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[4,5,6,7,33,349,34,350,15,30,16,17,18,35,36,351,26],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[70,71,72,352],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[353,354],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:223","failures":[117,122,125,140,355,157],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[81,82,108,109,110,111,112,113,114,115,116,117,118,119,123,124,126,127,129,134,135,136,137,138,139,141,143,144,145,163,169,12,13,14,176,178,180,181,183,189,201,206,207,208,209,210,211,214,215,217,218,219,221,222,223,224,225,240,241,242,243,244,258,288,289,320,321,322,323,335,336,337,338,27,28,29,344,345,346],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"type":"returnedType"}},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[356,357,358,359,360],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[361,362,363,364,365,359,360],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[203,366],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[70,71,72,73,74,75,76,77,78,79,80,81,83,84,86,4,87,88,91,92,107,109,110,113,114,115,8,9,10,11,120,121,122,124,125,51,37,38,52,40,41,42,43,132,53,44,134,136,137,138,139,141,142,144,146,147,55,56,57,58,59,60,61,62,64,148,149,150,151,152,45,1,153,65,66,154,155,67,68,156,157,158,159,160,162,163,165,166,167,170,172,12,14,174,178,179,180,181,182,183,185,192,195,196,197,198,199,200,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,15,231,232,233,234,235,236,240,241,242,243,244,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,281,282,288,289,293,294,295,296,297,298,299,300,301,302,303,305,306,307,308,309,310,311,313,23,24,25,320,321,322,323,324,329,330,331,332,333,334,335,336,337,338,340,27,29,342,343,344,345,346],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.matchers.Find:41","failures":[367],"status":-1,"binaryOperator":"(\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"position":"org.easymock.internal.ObjectMethodsFilter:98","failures":[69,368,85,4,5,87,88,6,7,92,93,95,97,99,100,102,103,107,109,110,113,114,8,9,10,11,122,123,369,126,127,128,129,130,135,142,145,355,55,45,161,370,171,12,173,13,14,174,371,372,373,374,375,376,227,15,30,16,17,18,230,231,233,234,237,238,239,19,377,378,279,290,379,380,304,314,315,316,23,24,25,326,381,329,31,335,339,26,27,341,28,29,342],"status":-1,"binaryOperator":"(java.lang.String) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:173","failures":[163],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:120","sourceCode":"return ((java.lang.String)(java.util.Properties.remove(java.lang.String)))","type":"CtReturnImpl"},"failures":[382,141,383,384,142,143,144,145,385,355,386],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[88,138,45],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[387,110,113,126,374,380,314,315,316,388],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"proxy":"proxy"}},{"position":"org.easymock.internal.ExpectedInvocation:85","failures":[96,103,129,62,64,150,45,153,65,66,154,155,192,335],"status":-1,"binaryOperator":"((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod())))","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":56,"org.easymock.tests2.UsageTest.argumentsOrdered":7,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":227,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":104,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":370,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":88,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":177,"org.easymock.tests2.DelegateToTest.testReturnException":162,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":294,"org.easymock.tests.MockingTest.testPartialClassMocking":344,"org.easymock.tests.MockClassControlTest.testToString":314,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":355,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":117,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":259,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":20,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":82,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":363,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":62,"org.easymock.tests2.UsageTest.wrongArguments":5,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":201,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":199,"org.easymock.samples.ExampleTest.answerVsDelegate":179,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":374,"org.easymock.tests2.UsageConstraintsTest.testNull":58,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":137,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":103,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":319,"org.easymock.tests2.CaptureTest.testPrimitive":52,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":205,"org.easymock.tests.UsageTest.moreThanOneArgument":15,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":278,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":136,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":322,"org.easymock.tests.UsageTest.argumentsOrdered":18,"org.easymock.tests.UsageVarargTest.varargIntAccepted":301,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":240,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":122,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":360,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":125,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":244,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":69,"org.easymock.tests.ReplayStateInvalidUsageTest.times":254,"org.easymock.tests2.AnswerTest.answer":77,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":63,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":76,"org.easymock.tests2.CaptureTest.testAnd":51,"org.easymock.tests2.UsageTest.strictResetToDefault":86,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":142,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":321,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":98,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":337,"org.easymock.tests2.DelegateToTest.testDelegate":165,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":274,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":297,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":334,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":378,"org.easymock.tests2.CaptureTest.testCapture1_2446744":39,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":382,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":272,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":74,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":248,"org.easymock.tests.UsageThrowableTest.throwError":280,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":373,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":388,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":324,"org.easymock.samples.PartialClassMockTest.testGetArea":189,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":249,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":241,"org.easymock.tests2.UsageTest.niceToStrict":87,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":260,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":380,"org.easymock.tests2.ThreadingTest.testChangeDefault":386,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":124,"org.easymock.tests2.MockBuilderTest.testCreateMock":128,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":33,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":268,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":99,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":231,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":197,"org.easymock.tests.UsageOverloadedMethodTest.overloading":195,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":151,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":328,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":194,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":217,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":150,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":132,"org.easymock.tests2.EasyMockSupportClassTest.testAll":116,"org.easymock.tests.MockClassControlTest.testEquals":318,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":311,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":276,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":349,"org.easymock.tests2.CaptureTest.testCaptureAll":37,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":75,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":332,"org.easymock.tests.MockNameTest.defaultName":377,"org.easymock.tests2.UsageConstraintsTest.testMatches":152,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":246,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":323,"org.easymock.samples.ExampleTest.voteForRemovals":183,"org.easymock.tests.UsageVarargTest.allKinds":309,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":23,"org.easymock.samples.BasicClassMockTest.testPrintContent":191,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":333,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":286,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":171,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":298,"org.easymock.tests2.UsageConstraintsTest.greaterThan":1,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":336,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":145,"org.easymock.samples.ExampleTest.voteForRemoval":180,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":385,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":167,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":375,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":140,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":85,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":226,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":366,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":96,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":282,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":293,"org.easymock.tests2.CaptureTest.testCaptureFirst":44,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":97,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":93,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":31,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":213,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":169,"org.easymock.tests2.CaptureTest.testCapture2_2446744":133,"org.easymock.tests2.UsageTest.moreThanOneArgument":4,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":129,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":308,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":238,"org.easymock.tests.UsageExpectAndReturnTest.longType":209,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":94,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":330,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":277,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":46,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":275,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":320,"org.easymock.tests.UsageCallCountTest.tooManyCalls":239,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":233,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":214,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":264,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":285,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":109,"org.easymock.tests2.UsageConstraintsTest.testContains":149,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":232,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":159,"org.easymock.tests2.UsageConstraintsTest.testFind":57,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":196,"org.easymock.tests.MockTypeTest.fromEasyMockClass":372,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":84,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":339,"org.easymock.tests.UsageExpectAndReturnTest.object":216,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":141,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":102,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":303,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":364,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":292,"org.easymock.tests.UsageTest.exactCallCountByLastCall":230,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":192,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":3,"org.easymock.tests2.ConstraintsToStringTest.findToString":367,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":351,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":361,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":222,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":299,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":327,"org.easymock.tests.MockClassControlTest.testHashCode":317,"org.easymock.tests2.EasyMockSupportTest.testVerify":106,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":325,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":73,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":131,"org.easymock.tests.UsageVarargTest.varargCharAccepted":302,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":172,"org.easymock.tests2.UsageTest.openCallCountByLastCall":89,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":105,"org.easymock.tests.DefaultClassInstantiatorTest.object":245,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":354,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":290,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":32,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":266,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":283,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":143,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":316,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":265,"org.easymock.tests.CapturesMatcherTest.test":348,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":223,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":353,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":119,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":315,"org.easymock.tests2.UsageTest.resumeIfFailure":92,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":371,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":296,"org.easymock.tests2.StubTest.stubWithReturnValue":121,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":362,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":155,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":215,"org.easymock.tests2.SerializationTest.testAllMockedMethod":72,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":357,"org.easymock.samples.SupportTest.voteForRemovals":176,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":34,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":347,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":271,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":352,"org.easymock.tests.UsageExpectAndThrowTest.object":269,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":66,"org.easymock.tests2.DelegateToTest.testWrongClass":164,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":288,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":289,"org.easymock.samples.ConstructorCalledMockTest.testTax":187,"org.easymock.tests.UsageStrictMockTest.range":28,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":101,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":108,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":270,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":126,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":17,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":256,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":198,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":35,"org.easymock.tests2.CaptureTest.testCaptureNone":43,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":48,"org.easymock.tests.UsageUnorderedTest.message":19,"org.easymock.tests.UsageVerifyTest.twoReturns":25,"org.easymock.tests.UsageVarargTest.varargByteAccepted":307,"org.easymock.tests2.ThreadingTest.testThreadSafe":166,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":236,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":190,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":379,"org.easymock.tests2.CaptureTest.testCapture_2617107":38,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":350,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":204,"org.easymock.tests2.UsageConstraintsTest.any":64,"org.easymock.tests2.StubTest.stub":120,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":253,"org.easymock.tests.UsageExpectAndThrowTest.longType":262,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":295,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":252,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":173,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":161,"org.easymock.tests2.SerializationTest.testClass":70,"org.easymock.tests.LimitationsTest.mockNativeMethod":258,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":225,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":174,"org.easymock.tests2.NameTest.nameForMocksControl":11,"org.easymock.tests2.MockedExceptionTest.testMockedException":158,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":229,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":263,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":346,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":134,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":127,"org.easymock.tests.MockingTest.testNicePartialClassMocking":345,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":139,"org.easymock.tests2.CaptureTest.testCaptureLast":42,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":358,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":279,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":114,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":61,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":154,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":206,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":267,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":6,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":68,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":50,"org.easymock.samples.ExampleTest.removeNonExistingDocument":184,"org.easymock.tests.UsageStrictMockTest.differentMethods":29,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":250,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":168,"org.easymock.tests2.MockBuilderTest.testCreateMockString":130,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":312,"org.easymock.tests.UsageExpectAndThrowTest.floatType":261,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":45,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":78,"org.easymock.tests.UsageVerifyTest.twoThrows":24,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":326,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":118,"org.easymock.samples.ExampleTest.voteAgainstRemoval":181,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":144,"org.easymock.tests2.UsageConstraintsTest.testNotNull":67,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":157,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":287,"org.easymock.tests2.UsageTest.defaultResetToNice":91,"org.easymock.samples.ExampleTest.voteAgainstRemovals":178,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":221,"org.easymock.tests.UsageVarargTest.differentLength":304,"org.easymock.tests2.CallbackTest.callback":107,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":383,"org.easymock.tests.UsageTest.openCallCountByLastCall":228,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":146,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":203,"org.easymock.tests.UsageCallCountTest.tooFewCalls":234,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":111,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":200,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":49,"org.easymock.tests.UsageThrowableTest.throwCheckedException":284,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":36,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":113,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":193,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":110,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":368,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":255,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":112,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":80,"org.easymock.tests.ObjectMethodsTest.testHashCode":291,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":359,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":170,"org.easymock.tests2.NameTest.nameForNiceMock":10,"org.easymock.tests2.DependencyTest.testInterfaceMocking":81,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":365,"org.easymock.samples.ExampleTest.addDocument":182,"org.easymock.tests2.DelegateToTest.testStubDelegate":163,"org.easymock.tests2.AnswerTest.stubAnswer":79,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":27,"org.easymock.tests.UsageVarargTest.varargLongAccepted":306,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":342,"org.easymock.tests.UsageExpectAndReturnTest.floatType":208,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":224,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":115,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":188,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":153,"org.easymock.tests.UsageThrowableTest.noUpperLimit":281,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":381,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":147,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":387,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":40,"org.easymock.tests2.SerializationTest.test":71,"org.easymock.tests2.UsageConstraintsTest.testSame":59,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":207,"org.easymock.samples.SupportTest.addDocument":175,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":251,"org.easymock.tests.GenericTest.testPackageScope":310,"org.easymock.tests2.NameTest.nameForMock":8,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":218,"org.easymock.tests2.UsageStrictMockTest.differentMethods":14,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":384,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":210,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":273,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":338,"org.easymock.tests2.MockedExceptionTest.testRealException":160,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":376,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":356,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":12,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":202,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":257,"org.easymock.tests2.NameTest.nameForStrictMock":9,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":83,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":138,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":21,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":65,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":123,"org.easymock.tests2.UsageStrictMockTest.range":13,"org.easymock.tests2.UsageConstraintsTest.lessThan":156,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":95,"org.easymock.tests2.CaptureTest.testCaptureRightOne":53,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":47,"org.easymock.tests2.UsageConstraintsTest.testOr":60,"org.easymock.tests.UsageRangeTest.combination":335,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":135,"org.easymock.tests.UsageTest.wrongArguments":16,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":313,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":211,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":2,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":219,"org.easymock.tests.UsageVarargTest.varargShortAccepted":305,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":237,"org.easymock.tests2.UsageConstraintsTest.cmpTo":148,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":90,"org.easymock.tests2.CaptureTest.testCaptureFromStub":54,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":247,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":369,"org.easymock.tests.UsageTest.unexpectedCallWithArray":30,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":26,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":235,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":220,"org.easymock.tests2.UsageConstraintsTest.constraints":55,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":341,"org.easymock.samples.ExampleTest.addAndChangeDocument":185,"org.easymock.tests.UsageStrictMockTest.testVerify":343,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":186,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":340,"org.easymock.tests2.CompareToTest.testGreateThan":0,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":331,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":41,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":242,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":212,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":243,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":329,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":100,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":22,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":300}}]

[{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[0,1,2],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[3],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:48","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"toString\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:772","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Long>(long))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:100","sourceCode":"return this","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[4,5,5,6,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,0,1,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:34","sourceCode":"return this.boolean","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:36","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"matching"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:252","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:108","failures":[31,43,45,50,59,61,62,63,64,65,66,97,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,137,246,253,288],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (this.java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[300],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[206,207],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[149,150,152,153,301,291,293,294],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[99,149,190],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (int)","type":"CtReturnImpl"},"failures":[34,46,48,51,52,97,98,149,150,153,248,249,255,256,302,303,304,305,291,294],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:74","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"matched"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[186,187],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"failures":[],"status":-2,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:187","sourceCode":"java.lang.Long java.lang.Long","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[],"status":-2,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:129","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:344","sourceCode":"return this","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:182","sourceCode":"if (java.lang.reflect.Proxy.java.lang.reflect.Proxy.isProxyClass(V.getClass())) {\n    return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]));\n} ","type":"CtIfImpl"},"failures":[34,306,46,47,48,51,52,96,97,98,109,110,307,308,149,150,152,153,309,310,311,204,210,248,249,255,256,291,293,294],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[3,312],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[3],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[4,313,314,5,5,6,6,3,24,315,25,312,316,317,26,318,35,319,320,321,322,323,324,325,326,327,67,68,69,70,328,329,330,331,332,333,334,335,336,337,338,339,340,341,172,173,174,0,2,342,237,343,238,344,345,239,240,241,242,346,243,244,347,348,245,259,349,350,351,352,353,354,355,268,269,271,272,273,274,275,356,357,276,277,278,279,358,359,280,281,282,283,285,286,360,361,362,296,363,364,297,365,366,367,368,369,370,371,372,373,298,374,375,376,377,378,299,379,380],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"transplant":{"position":"org.easymock.internal.MocksControl:93","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[4,313,314,381,5,5,6,6,382,383,7,8,9,10,11,384,12,385,13,14,15,16,17,18,19,20,21,22,23,3,24,315,25,312,316,317,26,318,27,28,29,30,31,32,386,387,33,388,389,390,391,392,393,34,394,395,396,397,398,399,400,401,402,403,404,405,35,36,37,38,39,40,41,42,43,406,44,407,306,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,408,319,320,321,322,323,324,409,325,326,327,67,68,69,410,70,411,412,328,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,413,414,415,416,417,418,419,420,421,422,423,99,329,330,331,332,333,334,335,336,100,101,102,103,104,105,106,107,108,109,110,424,337,307,425,338,426,308,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,427,149,150,151,152,153,154,301,155,156,157,428,309,429,430,310,339,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,158,447,448,449,450,451,159,452,160,161,162,163,164,165,166,167,168,169,170,171,453,340,341,311,454,172,173,174,175,176,177,178,179,455,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,456,457,458,459,460,461,204,462,463,464,465,466,467,205,206,207,208,209,468,469,470,471,472,210,473,474,475,476,477,478,211,212,213,214,215,216,217,218,219,220,221,222,223,224,479,480,225,226,0,1,2,227,228,229,230,231,232,233,234,235,236,237,481,238,344,482,345,239,240,241,483,242,346,243,244,484,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,349,485,260,261,262,263,264,265,266,486,267,268,269,270,271,272,273,274,487,275,356,357,276,277,278,279,358,359,280,281,282,283,284,285,286,287,288,289,488,302,303,304,305,290,489,291,292,293,294,295,360,361,362,296,363,364,297,365,366,367,368,369,370,371,372,373,298,374,375,376,377,378,299,379,380],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1349","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"failures":[313,314,383,7,8,9,10,11,384,12,385,13,14,15,16,17,18,19,20,21,22,23,24,315,312,316,26,27,28,29,30,31,32,386,387,33,388,389,390,391,392,393,34,394,395,396,397,398,399,400,401,402,403,404,405,35,36,37,38,39,40,41,42,43,44,306,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,408,319,320,321,322,323,324,409,325,326,327,67,68,410,411,412,328,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,413,414,415,417,418,419,420,421,422,423,99,329,330,331,332,333,334,335,336,100,101,102,103,104,105,106,107,108,109,110,424,307,308,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,427,149,150,151,152,153,154,301,155,156,157,428,309,429,430,310,158,159,160,161,162,163,164,165,167,169,170,171,453,340,341,311,454,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,456,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,479,480,225,226,0,1,2,227,228,229,230,231,232,233,234,235,236,246,247,248,249,250,251,252,253,254,255,256,257,258,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,487,275,357,276,277,279,358,283,284,287,288,289,290,489,291,292,293,294,295,360,296,364,366,372,375,378],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:83","sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arguments":"arguments"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1789","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"regex","key":"regex"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":179,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":45,"org.easymock.tests2.UsageTest.argumentsOrdered":256,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":170,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":462,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":441,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":251,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":381,"org.easymock.tests2.DelegateToTest.testReturnException":228,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":28,"org.easymock.tests.MockingTest.testPartialClassMocking":68,"org.easymock.tests.MockClassControlTest.testToString":331,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":488,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":44,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":449,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":368,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":111,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":297,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":226,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":185,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":104,"org.easymock.tests2.UsageTest.wrongArguments":249,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":478,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":146,"org.easymock.samples.ExampleTest.answerVsDelegate":9,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":338,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":412,"org.easymock.tests2.UsageConstraintsTest.testNull":181,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":271,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":169,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":336,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":350,"org.easymock.tests2.CaptureTest.testPrimitive":214,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":108,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":130,"org.easymock.tests.UsageTest.moreThanOneArgument":46,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":270,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":38,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":14,"org.easymock.tests.UsageTest.argumentsOrdered":52,"org.easymock.tests.UsageVarargTest.varargIntAccepted":415,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":446,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":91,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":237,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":466,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":240,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":433,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":95,"org.easymock.tests.ReplayStateInvalidUsageTest.times":402,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":210,"org.easymock.tests2.DependencyTest.testClassMocking":479,"org.easymock.tests2.AnswerTest.answer":260,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":186,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":447,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":236,"org.easymock.tests2.CaptureTest.testAnd":211,"org.easymock.tests2.UsageTest.strictResetToDefault":247,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":482,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":276,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":37,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":164,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":102,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":18,"org.easymock.tests2.DelegateToTest.testDelegate":232,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":126,"org.easymock.tests.LimitationsTest.mockFinalMethod":318,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":31,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":23,"org.easymock.tests2.DependencyTest.testClassMockingSupport":480,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":109,"org.easymock.tests2.CaptureTest.testCapture1_2446744":215,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":487,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":124,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":234,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":396,"org.easymock.tests.UsageThrowableTest.throwError":59,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":425,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":467,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":40,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":380,"org.easymock.samples.PartialClassMockTest.testGetArea":4,"org.easymock.tests.MockingTest.testInterfaceMocking":410,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":397,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":92,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":156,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":112,"org.easymock.tests2.UsageTest.niceToStrict":250,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":339,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":369,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":431,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":239,"org.easymock.tests2.MockBuilderTest.testCreateMock":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":376,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":475,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":120,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":165,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":58,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":386,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":144,"org.easymock.tests.UsageOverloadedMethodTest.overloading":42,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":373,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":378,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":191,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":137,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":41,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":82,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":190,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":220,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":416,"org.easymock.tests2.EasyMockSupportClassTest.testAll":296,"org.easymock.tests.MockClassControlTest.testEquals":335,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":315,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":128,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":351,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":21,"org.easymock.tests2.CaptureTest.testCaptureAll":212,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":235,"org.easymock.tests.MockNameTest.defaultName":306,"org.easymock.tests2.UsageConstraintsTest.testMatches":192,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":394,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":39,"org.easymock.samples.ExampleTest.voteForRemovals":12,"org.easymock.tests.UsageVarargTest.allKinds":99,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":96,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":22,"org.easymock.samples.BasicClassMockTest.testPrintContent":314,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":65,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":290,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":463,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":32,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":231,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":409,"org.easymock.tests2.UsageConstraintsTest.greaterThan":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":363,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":101,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":279,"org.easymock.samples.ExampleTest.voteForRemoval":10,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":325,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":206,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":358,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":347,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":426,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":274,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":35,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":246,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":346,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":438,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":162,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":361,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":27,"org.easymock.tests2.CaptureTest.testCaptureFirst":224,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":227,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":437,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":163,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":258,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":140,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":78,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":208,"org.easymock.tests2.CaptureTest.testCapture2_2446744":223,"org.easymock.tests2.UsageTest.moreThanOneArgument":248,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":448,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":244,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":423,"org.easymock.tests.GenericTest.testBridgedEquals":312,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":392,"org.easymock.tests.UsageExpectAndReturnTest.longType":74,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":160,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":19,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":129,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":348,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":131,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":199,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":127,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":142,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":36,"org.easymock.tests.UsageCallCountTest.tooManyCalls":393,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":33,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":377,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":79,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":477,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":116,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":64,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":281,"org.easymock.tests.MockingTest.testNiceClassMocking":328,"org.easymock.tests.MockingTest.testClassMocking":327,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":387,"org.easymock.tests2.UsageConstraintsTest.testContains":189,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":343,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":174,"org.easymock.tests2.UsageConstraintsTest.testFind":180,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":43,"org.easymock.tests.MockTypeTest.fromEasyMockClass":307,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":148,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":267,"org.easymock.tests.UsageExpectAndReturnTest.object":81,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":275,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":476,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":168,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":418,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":430,"org.easymock.tests.UsageTest.exactCallCountByLastCall":53,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":54,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":436,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":406,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":15,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":349,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":413,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":87,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":136,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":458,"org.easymock.tests.MockClassControlTest.testHashCode":334,"org.easymock.tests2.EasyMockSupportTest.testVerify":453,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":371,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":16,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":134,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":57,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":233,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":456,"org.easymock.tests.UsageVarargTest.varargCharAccepted":417,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":408,"org.easymock.tests2.CaptureTest.testCaptureMultiple":300,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":489,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":452,"org.easymock.tests2.UsageTest.openCallCountByLastCall":252,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":171,"org.easymock.tests.DefaultClassInstantiatorTest.object":319,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":56,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":309,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":118,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":372,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":62,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":355,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":471,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":457,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":277,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":333,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":117,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":88,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":141,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":299,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":332,"org.easymock.tests2.UsageTest.resumeIfFailure":257,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":337,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":30,"org.easymock.tests2.StubTest.stubWithReturnValue":288,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":483,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":80,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":200,"org.easymock.tests2.SerializationTest.testAllMockedMethod":2,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":158,"org.easymock.samples.SupportTest.voteForRemovals":7,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":3,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":460,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":123,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":159,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":261,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":407,"org.easymock.tests.UsageExpectAndThrowTest.object":121,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":197,"org.easymock.tests2.DelegateToTest.testWrongClass":230,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":132,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":133,"org.easymock.tests.UsageStrictMockTest.range":152,"org.easymock.samples.ConstructorCalledMockTest.testTax":5,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":311,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":167,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":280,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":122,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":241,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":404,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":360,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":145,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":157,"org.easymock.tests2.CaptureTest.testCaptureNone":219,"org.easymock.tests.UsageUnorderedTest.message":34,"org.easymock.tests.UsageVerifyTest.twoReturns":98,"org.easymock.tests.UsageVarargTest.varargByteAccepted":422,"org.easymock.tests2.ThreadingTest.testThreadSafe":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":374,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":390,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":310,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":313,"org.easymock.tests2.CaptureTest.testCapture_2617107":213,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":424,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":450,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":107,"org.easymock.tests2.UsageConstraintsTest.any":187,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":401,"org.easymock.tests2.StubTest.stub":287,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":143,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":451,"org.easymock.tests.UsageExpectAndThrowTest.longType":114,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":29,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":323,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":400,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":292,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":204,"org.easymock.tests.LimitationsTest.mockNativeMethod":26,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":25,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":90,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":470,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":354,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":295,"org.easymock.tests2.NameTest.nameForMocksControl":305,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":472,"org.easymock.tests2.MockedExceptionTest.testMockedException":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":364,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":50,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":486,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":115,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":70,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":268,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":242,"org.easymock.tests.MockingTest.testNicePartialClassMocking":69,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":273,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":468,"org.easymock.tests2.CaptureTest.testCaptureLast":218,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":110,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":184,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":286,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":198,"org.easymock.tests.MockingTest.testTwoMocks":67,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":71,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":119,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":255,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":202,"org.easymock.samples.ExampleTest.removeNonExistingDocument":385,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":474,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":398,"org.easymock.tests.UsageStrictMockTest.differentMethods":153,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":459,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":321,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":207,"org.easymock.tests2.MockBuilderTest.testCreateMockString":245,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":329,"org.easymock.tests.UsageExpectAndThrowTest.floatType":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":365,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":362,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":263,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":485,"org.easymock.tests.UsageVerifyTest.twoThrows":97,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":135,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":298,"org.easymock.samples.ExampleTest.voteAgainstRemoval":11,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":442,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":155,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":278,"org.easymock.tests.LimitationsTest.privateConstructor":317,"org.easymock.tests2.UsageConstraintsTest.testNotNull":201,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":172,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":66,"org.easymock.tests2.UsageTest.defaultResetToNice":254,"org.easymock.samples.ExampleTest.voteAgainstRemovals":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":443,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":86,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":469,"org.easymock.tests.UsageVarargTest.differentLength":419,"org.easymock.tests2.CallbackTest.callback":289,"org.easymock.tests2.UsageConstraintsTest.equals":455,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":356,"org.easymock.tests.UsageTest.openCallCountByLastCall":49,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":176,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":106,"org.easymock.tests.UsageCallCountTest.tooFewCalls":388,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":283,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":147,"org.easymock.tests.UsageThrowableTest.throwCheckedException":63,"org.easymock.tests.MockingTest.testStrictClassMocking":326,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":55,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":285,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":473,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":282,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":403,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":284,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":265,"org.easymock.tests.ObjectMethodsTest.testHashCode":429,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":209,"org.easymock.tests2.NameTest.nameForNiceMock":304,"org.easymock.tests2.DependencyTest.testInterfaceMocking":225,"org.easymock.samples.ExampleTest.addDocument":384,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":375,"org.easymock.tests2.DelegateToTest.testStubDelegate":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":379,"org.easymock.tests2.AnswerTest.stubAnswer":264,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":150,"org.easymock.tests.UsageVarargTest.varargLongAccepted":421,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":440,"org.easymock.tests.UsageExpectAndReturnTest.floatType":73,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":89,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":259,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":6,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":465,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":138,"org.easymock.tests.UsageThrowableTest.noUpperLimit":60,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":195,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":177,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":340,"org.easymock.tests2.SerializationTest.test":1,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":216,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":320,"org.easymock.tests2.UsageConstraintsTest.testSame":182,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":72,"org.easymock.samples.SupportTest.addDocument":383,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":399,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":366,"org.easymock.tests.GenericTest.testPackageScope":24,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":17,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":435,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":464,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":411,"org.easymock.tests2.NameTest.nameForMock":302,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":83,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":484,"org.easymock.tests2.UsageStrictMockTest.differentMethods":294,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":357,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":75,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":125,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":428,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":103,"org.easymock.tests2.MockedExceptionTest.testRealException":175,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":308,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":454,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":445,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":444,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":291,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":405,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":105,"org.easymock.tests2.NameTest.nameForStrictMock":303,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":345,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":266,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":272,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":341,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":196,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":322,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":238,"org.easymock.tests2.UsageStrictMockTest.range":293,"org.easymock.tests2.UsageConstraintsTest.lessThan":203,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":352,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":461,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":342,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":439,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":161,"org.easymock.tests2.CaptureTest.testCaptureRightOne":221,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":370,"org.easymock.tests2.UsageConstraintsTest.testOr":183,"org.easymock.tests.UsageRangeTest.combination":100,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":269,"org.easymock.tests.UsageTest.wrongArguments":48,"org.easymock.tests2.MockBuilderTest.testWithConstructor":481,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":367,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":330,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":76,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":432,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":84,"org.easymock.tests.UsageVarargTest.varargShortAccepted":420,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":324,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":391,"org.easymock.tests2.UsageConstraintsTest.cmpTo":188,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":262,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":434,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":253,"org.easymock.tests2.CaptureTest.testCaptureFromStub":222,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":395,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":344,"org.easymock.tests.UsageTest.unexpectedCallWithArray":47,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":149,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":389,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":85,"org.easymock.tests2.UsageConstraintsTest.constraints":178,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":151,"org.easymock.samples.ExampleTest.addAndChangeDocument":13,"org.easymock.tests.UsageStrictMockTest.testVerify":301,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":382,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":427,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":20,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":217,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":93,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":353,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":77,"org.easymock.tests.LimitationsTest.abstractClass":316,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":139,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":94,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":414,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":166}}]

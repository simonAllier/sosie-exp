[{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"failures":[1],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"arg"}},{"position":"org.easymock.internal.LastControl:92","failures":[2,3,4,5,6,7,0,8,9],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[2,3,4,5,6,10,7,0,8,9,11],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:137","sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"result","matches":"i"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (int)","type":"CtReturnImpl"},"failures":[14,26,27,22,28],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:135","sourceCode":"java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:128","sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","type":"CtAssignmentImpl"},"failures":[29,30],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"failures":[31,32,33,34,35,36],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[37],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[38,39,40,41,42],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[2,3,4,5,6,10,7,0,8,9,11],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:117","sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"failures":[43,44],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:51","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Float.java.lang.Class<java.lang.Float>, java.lang.Float.java.lang.Float.valueOf(0))","type":"CtInvocationImpl"},"failures":[45,46,47,48,49,50,51,52,53,54,55,56,57],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:117","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[58,59,60,61,62,63,64,65],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,12,87,88,13,89,90,14,26,91,92,93,94,95,96,97,98,99,100,101,45,31,46,102,103,104,105,32,106,107,108,109,110,111,33,34,47,48,112,113,114,115,116,16,17,117,118,18,19,119,120,121,122,123,124,125,126,127,128,129,35,130,131,132,133,134,58,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,49,150,151,152,153,154,155,156,157,158,159,50,160,161,162,163,164,165,51,166,52,167,168,169,170,171,172,173,174,175,176,177,178,179,53,54,180,181,182,183,27,20,21,55,184,185,56,36,186,187,188,189,59,190,191,192,193,38,38,39,39,194,195,196,197,198,199,200,201,22,28,202,203,204,205,206,207,208,209,210,211,212,213,214,23,215,216,217,218,219,24,25,220,221,222,223,224,225,226,227,228,229,230,40,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,60,259,260,61,261,62,63,64,262,263,264,265,266,267,2,268,3,269,270,271,272,43,273,44,4,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,57,291,292,293,294,5,6,295,10,296,7,0,297,8,298,299,300,301,302,303,304,305,306,9,307,308,309,310,11,311,312,313,314,315,65],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[316,313,314,315],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[317,318,122,123,124,49,150,151,152,153,154,204],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[2,3,4,5,6,10,7,0,8,9,11],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:160","sourceCode":"if (boolean) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:217","sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[89,94,119,20,21,200,212,221,60],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"verified":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:217","sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[85,92,94,95,96,97,98,99,115,118,137,153,163,164,165,51,166,52,167,168,169,170,171,172,173,174,175,176,177,178,179,53,54,20,204,212,218],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:40","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[319,320],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"message":"key"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:45","sourceCode":"java.lang.StringBuffer.append(\"[\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:41","sourceCode":"org.easymock.IArgumentMatcher.appendTo(java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[321],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:48","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.specification.version\")","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1988","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:98","failures":[71,73,74,77,78,79,12,88,13,89,90,14,26,91,112,113,115,116,16,17,18,19,119,135,138,139,140,322,323,324,325,326,327,328,329,330,331,332,180,27,20,21,196,199,200,201,22,28,202,207,210,212,214,23,215,216,24,25,220,221,236,239,241,249,258,278,282,286,290,5,304,65],"status":-1,"binaryOperator":"(java.lang.String) != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:34","failures":[12,13,89,14,26,112,113,333,334,335,336,337,15,116,16,17,18,19,135,138,139,140,27,20,21,200,22,28,214,23,24,25,338,339,321,340,341,342,343,344,345,346,347],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[348,216,252,304],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:140","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Null:35","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[75,76,78,79,80,349,85,350,87,351,13,90,91,92,93,94,95,96,97,98,99,45,31,102,106,111,113,17,18,19,119,125,58,136,137,139,352,353,354,355,356,357,358,359,360,141,147,148,149,161,162,51,166,167,172,177,20,21,189,59,190,191,361,192,194,362,363,364,365,366,195,196,197,198,367,201,202,205,206,207,208,209,210,211,212,213,23,215,216,24,25,221,224,229,230,40,237,239,240,244,245,246,247,248,249,250,251,252,253,255,257,60,61,263,265,2,268,3,269,271,272,43,273,44,4,276,277,278,279,280,281,282,283,285,286,287,288,289,290,6,0,297,298,299,301,304,9,307,308,309,310,313,314,315],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"position":"org.easymock.internal.Range:44","failures":[66,67,68,69,70,71,72,73,74,75,76,77,78,79,37,80,349,81,368,369,82,83,84,85,86,12,370,371,372,373,350,374,348,375,376,377,317,378,379,380,87,381,88,351,13,89,90,14,26,91,382,92,93,94,95,96,97,98,99,100,101,45,31,46,102,103,104,105,32,106,107,108,109,110,111,33,34,47,48,112,113,383,384,114,385,115,116,16,17,117,118,18,19,119,386,387,388,389,390,391,392,318,393,394,395,396,397,398,399,400,120,401,402,403,404,405,121,406,122,123,124,125,126,127,128,129,35,130,131,132,133,134,58,135,136,137,138,139,140,352,353,354,407,355,356,322,357,358,359,360,141,142,143,144,408,323,409,410,324,325,145,411,412,146,147,148,413,149,414,415,416,49,150,151,152,153,154,155,156,157,158,159,417,418,419,326,420,327,421,328,50,160,329,422,423,330,331,332,424,425,426,161,162,163,164,165,51,166,52,167,168,169,170,171,172,173,174,175,176,177,178,179,53,54,180,181,182,183,27,20,21,427,55,184,185,428,429,430,431,432,433,434,435,436,56,36,186,187,188,189,59,190,191,361,192,437,193,38,39,194,362,363,364,365,366,195,438,439,440,441,442,196,443,444,445,446,447,448,449,450,197,198,199,367,200,201,22,28,202,203,204,451,452,453,454,455,456,457,205,206,207,208,458,209,210,211,459,212,213,214,23,215,216,217,218,219,24,25,220,221,222,223,224,225,226,227,228,229,230,40,460,461,462,231,232,233,234,235,463,236,464,465,466,237,238,239,467,240,468,469,241,242,470,243,471,472,473,244,474,475,245,476,477,478,479,480,481,482,483,484,246,485,486,487,488,489,247,490,491,248,249,250,251,252,253,254,492,255,493,494,495,256,257,258,496,497,60,259,260,61,261,62,63,498,64,262,263,264,265,266,267,2,268,3,269,270,271,272,43,273,44,4,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,499,500,501,502,503,504,290,505,506,507,508,509,510,511,57,291,292,293,294,5,6,512,295,10,296,7,0,297,8,298,299,300,301,302,303,304,305,306,9,307,308,309,310,11,311,312,313,314,315,65],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:79","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[316,313,314,315],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:173","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[233,495,497],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"this.java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"failures":[66,67,73,74,75,76,77,78,79,80,349,82,83,84,85,86,12,87,88,351,13,89,90,14,26,91,92,93,94,95,96,97,98,99,100,101,45,31,46,102,103,104,105,32,106,107,108,109,110,111,33,34,47,48,115,116,16,17,117,118,18,19,119,125,126,127,128,129,35,130,131,132,133,134,58,136,137,140,352,353,354,355,356,322,357,358,359,360,141,147,148,149,49,150,151,152,153,154,50,160,161,162,163,164,165,51,166,52,167,168,169,170,171,172,173,174,175,176,177,178,179,53,54,180,182,183,27,20,21,427,55,184,185,56,36,186,187,188,189,59,190,191,361,192,193,38,39,194,362,363,364,365,366,195,196,197,198,199,367,200,201,22,28,202,203,204,205,206,207,208,209,210,211,212,213,214,23,215,216,217,218,219,24,25,220,221,222,223,224,225,226,227,229,230,40,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,495,256,257,258,60,61,261,62,63,64,263,264,265,267,2,268,3,269,270,271,272,43,273,44,4,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,511,57,291,292,293,294,5,6,295,10,296,7,0,297,298,299,300,301,302,303,304,305,306,9,307,308,309,310,11,311,312,313,314,315,65],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"lock":"lock"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:199","sourceCode":"java.util.List<java.lang.reflect.Field>.addAll(java.util.Arrays.java.util.Arrays.asList(java.lang.Class<?>.getDeclaredFields()))","type":"CtInvocationImpl"},"failures":[362,363,438,443,500,505],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:36","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:117","sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[513,2,3,269,270,271,272,43,44,514,4,274,276],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1607","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(char[]))","type":"CtInvocationImpl"},"failures":[301],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":6,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":115,"org.easymock.tests2.UsageTest.argumentsOrdered":25,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":287,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":443,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":395,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":216,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":362,"org.easymock.tests2.DelegateToTest.testReturnException":263,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":150,"org.easymock.tests.MockingTest.testPartialClassMocking":147,"org.easymock.tests.MockClassControlTest.testToString":330,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":462,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":114,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":497,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":403,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":479,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":164,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":245,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":198,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":297,"org.easymock.tests2.UsageTest.wrongArguments":23,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":82,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":510,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":184,"org.easymock.samples.ExampleTest.answerVsDelegate":59,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":327,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":415,"org.easymock.tests2.UsageConstraintsTest.testNull":10,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":251,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":426,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":286,"org.easymock.tests2.CaptureTest.testPrimitive":269,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":86,"org.easymock.tests.UsageTest.moreThanOneArgument":116,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":54,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":250,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":186,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":155,"org.easymock.tests.UsageTest.argumentsOrdered":19,"org.easymock.tests.UsageVarargTest.varargIntAccepted":354,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":400,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":346,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":126,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":235,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":453,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":447,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":238,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":388,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":35,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":341,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":290,"org.easymock.tests.ReplayStateInvalidUsageTest.times":376,"org.easymock.tests2.DependencyTest.testClassMocking":449,"org.easymock.tests2.AnswerTest.answer":60,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":401,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":292,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":419,"org.easymock.tests2.CaptureTest.testAnd":2,"org.easymock.tests2.UsageTest.strictResetToDefault":213,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":495,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":465,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":36,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":182,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":281,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":159,"org.easymock.tests2.DelegateToTest.testDelegate":267,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":177,"org.easymock.tests.LimitationsTest.mockFinalMethod":381,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":153,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":134,"org.easymock.tests2.DependencyTest.testClassMockingSupport":450,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":112,"org.easymock.tests2.CaptureTest.testCapture1_2446744":270,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":492,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":175,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":57,"org.easymock.tests.UsageThrowableTest.throwError":92,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":372,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":420,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":448,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":369,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":188,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":41,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":491,"org.easymock.samples.PartialClassMockTest.testGetArea":194,"org.easymock.tests.MockingTest.testInterfaceMocking":413,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":373,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":127,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":480,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":165,"org.easymock.tests2.UsageTest.niceToStrict":215,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":325,"org.easymock.tests2.ThreadingTest.testChangeDefault":319,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":386,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":42,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":237,"org.easymock.tests2.MockBuilderTest.testCreateMock":241,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":487,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":507,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":171,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":339,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":282,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":418,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":70,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":71,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":427,"org.easymock.tests.UsageOverloadedMethodTest.overloading":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":489,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":484,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":137,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":302,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":161,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":107,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":301,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":44,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":407,"org.easymock.tests.MockClassControlTest.testEquals":425,"org.easymock.tests2.EasyMockSupportClassTest.testAll":244,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":349,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":179,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":343,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":132,"org.easymock.tests2.CaptureTest.testCaptureAll":268,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":291,"org.easymock.tests.MockNameTest.defaultName":329,"org.easymock.tests2.UsageConstraintsTest.testMatches":303,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":187,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":370,"org.easymock.samples.ExampleTest.voteForRemovals":192,"org.easymock.tests.UsageVarargTest.allKinds":141,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":27,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":133,"org.easymock.samples.BasicClassMockTest.testPrintContent":365,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":98,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":199,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":444,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":154,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":266,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":435,"org.easymock.tests2.UsageConstraintsTest.greaterThan":305,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":474,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":181,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":258,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":436,"org.easymock.samples.ExampleTest.voteForRemoval":190,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":496,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":227,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":421,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":454,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":254,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":125,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":212,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":469,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":318,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":279,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":472,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":49,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":262,"org.easymock.tests2.CaptureTest.testCaptureFirst":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":392,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":280,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":221,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":140,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":104,"org.easymock.tests2.UsageTest.moreThanOneArgument":214,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":229,"org.easymock.tests2.CaptureTest.testCapture2_2446744":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":402,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":242,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":360,"org.easymock.tests.GenericTest.testBridgedEquals":368,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":1,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":78,"org.easymock.tests.UsageExpectAndReturnTest.longType":31,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":130,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":277,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":53,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":145,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":309,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":178,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":123,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":56,"org.easymock.tests.UsageCallCountTest.tooManyCalls":79,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":334,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":73,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":488,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":105,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":509,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":167,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":97,"org.easymock.tests.MockingTest.testNiceClassMocking":416,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":206,"org.easymock.tests.MockingTest.testClassMocking":412,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":72,"org.easymock.tests2.UsageConstraintsTest.testContains":300,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":224,"org.easymock.tests2.UsageConstraintsTest.testFind":295,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":163,"org.easymock.tests.MockTypeTest.fromEasyMockClass":326,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":64,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":88,"org.easymock.tests.UsageExpectAndReturnTest.object":106,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":255,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":508,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":285,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":356,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":410,"org.easymock.tests.UsageTest.exactCallCountByLastCall":119,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":66,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":391,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":384,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":156,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":337,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":460,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":33,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":352,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":136,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":439,"org.easymock.tests.MockClassControlTest.testHashCode":424,"org.easymock.tests2.EasyMockSupportTest.testVerify":289,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":482,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":340,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":157,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":58,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":69,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":511,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":499,"org.easymock.tests.UsageVarargTest.varargCharAccepted":355,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":428,"org.easymock.tests2.CaptureTest.testCaptureMultiple":513,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":367,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":406,"org.easymock.tests2.UsageTest.openCallCountByLastCall":217,"org.easymock.tests.DefaultClassInstantiatorTest.object":429,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":288,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":68,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":323,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":15,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":483,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":169,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":95,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":503,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":438,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":256,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":332,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":168,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":34,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":247,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":331,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":342,"org.easymock.tests2.UsageTest.resumeIfFailure":220,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":417,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":452,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":152,"org.easymock.tests2.StubTest.stubWithReturnValue":204,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":467,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":32,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":310,"org.easymock.tests2.SerializationTest.testAllMockedMethod":315,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":120,"org.easymock.samples.SupportTest.voteForRemovals":195,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":345,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":37,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":441,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":174,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":316,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":121,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":259,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":385,"org.easymock.tests.UsageExpectAndThrowTest.object":172,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":307,"org.easymock.tests2.DelegateToTest.testWrongClass":265,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":50,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":160,"org.easymock.samples.ConstructorCalledMockTest.testTax":38,"org.easymock.tests.UsageStrictMockTest.range":14,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":456,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":284,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":205,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":173,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":471,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":18,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":317,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":55,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":333,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":144,"org.easymock.tests2.CaptureTest.testCaptureNone":273,"org.easymock.tests.UsageUnorderedTest.message":12,"org.easymock.tests.UsageVerifyTest.twoReturns":21,"org.easymock.tests.UsageVarargTest.varargByteAccepted":359,"org.easymock.tests2.ThreadingTest.testThreadSafe":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":485,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":76,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":324,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":364,"org.easymock.tests2.CaptureTest.testCapture_2617107":3,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":347,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":383,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":404,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":85,"org.easymock.tests2.UsageConstraintsTest.any":298,"org.easymock.tests2.StubTest.stub":203,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":375,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":124,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":405,"org.easymock.tests.UsageExpectAndThrowTest.longType":166,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":151,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":433,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":348,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":201,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":196,"org.easymock.tests2.SerializationTest.testClass":313,"org.easymock.tests.LimitationsTest.mockNativeMethod":87,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":48,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":81,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":502,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":202,"org.easymock.tests2.NameTest.nameForMocksControl":234,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":504,"org.easymock.tests2.MockedExceptionTest.testMockedException":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":475,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":118,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":498,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":149,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":52,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":248,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":240,"org.easymock.tests.MockingTest.testNicePartialClassMocking":148,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":253,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":500,"org.easymock.tests2.CaptureTest.testCaptureLast":43,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":113,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":0,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":211,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":308,"org.easymock.tests.MockingTest.testTwoMocks":146,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":459,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":100,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":170,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":24,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":311,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":320,"org.easymock.samples.ExampleTest.removeNonExistingDocument":437,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":506,"org.easymock.tests.UsageStrictMockTest.differentMethods":26,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":350,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":440,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":431,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":30,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":228,"org.easymock.tests2.ConstraintsToStringTest.andToString":344,"org.easymock.tests2.MockBuilderTest.testCreateMockString":243,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":422,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":476,"org.easymock.tests.UsageExpectAndThrowTest.floatType":51,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":473,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":61,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":461,"org.easymock.tests.UsageVerifyTest.twoThrows":20,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":135,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":246,"org.easymock.samples.ExampleTest.voteAgainstRemoval":191,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":396,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":142,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":257,"org.easymock.tests.LimitationsTest.privateConstructor":380,"org.easymock.tests2.UsageConstraintsTest.testNotNull":11,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":99,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":222,"org.easymock.tests2.UsageTest.defaultResetToNice":219,"org.easymock.samples.ExampleTest.voteAgainstRemovals":189,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":397,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":111,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":501,"org.easymock.tests.UsageVarargTest.differentLength":322,"org.easymock.tests2.CallbackTest.callback":65,"org.easymock.tests2.UsageConstraintsTest.equals":512,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":493,"org.easymock.tests.UsageTest.openCallCountByLastCall":117,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":293,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":84,"org.easymock.tests.UsageCallCountTest.tooFewCalls":74,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":208,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":185,"org.easymock.tests.UsageThrowableTest.throwCheckedException":96,"org.easymock.tests.MockingTest.testStrictClassMocking":411,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":335,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":67,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":210,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":505,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":207,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":377,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":209,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":62,"org.easymock.tests.ObjectMethodsTest.testHashCode":409,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":230,"org.easymock.tests2.NameTest.nameForNiceMock":233,"org.easymock.tests2.DependencyTest.testInterfaceMocking":197,"org.easymock.samples.ExampleTest.addDocument":361,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":486,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":490,"org.easymock.tests2.DelegateToTest.testStubDelegate":264,"org.easymock.tests2.AnswerTest.stubAnswer":261,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":89,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":468,"org.easymock.tests.UsageVarargTest.varargLongAccepted":358,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":91,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":394,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":47,"org.easymock.tests.UsageExpectAndReturnTest.floatType":45,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":40,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":39,"org.easymock.tests2.ConstraintsToStringTest.orToString":338,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":446,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":138,"org.easymock.tests.UsageThrowableTest.noUpperLimit":93,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":306,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":294,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":451,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":271,"org.easymock.tests2.SerializationTest.test":314,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":430,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":101,"org.easymock.tests2.UsageConstraintsTest.testSame":296,"org.easymock.samples.SupportTest.addDocument":366,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":458,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":374,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":477,"org.easymock.tests.GenericTest.testPackageScope":80,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":158,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":390,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":445,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":414,"org.easymock.tests2.NameTest.nameForMock":231,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":108,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":470,"org.easymock.tests2.UsageStrictMockTest.differentMethods":28,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":494,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":46,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":176,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":408,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":183,"org.easymock.tests2.MockedExceptionTest.testRealException":225,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":328,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":457,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":399,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":336,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":398,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":200,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":83,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":378,"org.easymock.tests2.NameTest.nameForStrictMock":232,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":466,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":63,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":252,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":455,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":432,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":9,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":236,"org.easymock.tests2.UsageStrictMockTest.range":22,"org.easymock.tests2.UsageConstraintsTest.lessThan":312,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":442,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":393,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":278,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":481,"org.easymock.tests2.CaptureTest.testCaptureRightOne":4,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":29,"org.easymock.tests2.UsageConstraintsTest.testOr":7,"org.easymock.tests.UsageRangeTest.combination":180,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":249,"org.easymock.tests.UsageTest.wrongArguments":17,"org.easymock.tests2.MockBuilderTest.testWithConstructor":463,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":478,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":423,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":102,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":387,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":109,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":434,"org.easymock.tests.UsageVarargTest.varargShortAccepted":357,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":77,"org.easymock.tests2.UsageConstraintsTest.cmpTo":299,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":260,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":389,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":218,"org.easymock.tests2.CaptureTest.testCaptureFromStub":274,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":371,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":464,"org.easymock.tests.UsageTest.unexpectedCallWithArray":16,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":13,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":75,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":110,"org.easymock.tests2.CaptureTest.testCapture":514,"org.easymock.tests2.UsageConstraintsTest.constraints":5,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":90,"org.easymock.samples.ExampleTest.addAndChangeDocument":193,"org.easymock.tests2.ConstraintsToStringTest.notToString":321,"org.easymock.tests.UsageStrictMockTest.testVerify":382,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":363,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":351,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":131,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":272,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":128,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":103,"org.easymock.tests.LimitationsTest.abstractClass":379,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":139,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":129,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":283,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":353}}]

[{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:62","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>()","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:622","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[31,57],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"equalsMethod","method":"equalsMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[67,68,69,70,71,72,0,73,74,75,1,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,16,91,92,93,94,95,96,97,98,99,100,101,102,103,48,49,50,51,52,54,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,59,65,66,123,124,125,126,127,128,129,130,131,132,133],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"returnedType"}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:148","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[134,135,136],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[137,138],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[89,37,139],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[140,141],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"failures":[142,143],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[144,67,68,145,69,70,146,71,147,148,149,150,72,151,152,153,154,155,156,157,73,74,75,158,1,77,159,160,161,162,163,78,79,80,81,82,83,84,2,3,4,5,7,8,9,10,11,12,15,85,87,88,89,90,16,164,92,17,18,165,166,167,168,169,170,171,172,173,174,94,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,191,192,193,194,195,196,197,198,199,96,200,97,98,201,202,203,139,141,204,100,101,102,103,205,206,207,208,209,210,211,48,49,50,51,52,212,213,214,54,105,215,216,217,218,219,220,55,221,222,223,224,225,226,227,228,229,106,107,108,109,110,111,230,231,112,113,232,114,115,116,233,117,118,119,120,121,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,122,57,255,256,257,258,259,59,60,63,260,261,262,263,264,265,266,267,268,269,270,64,65,66,123,124,125,126,271,127,128,129,272,273,130,131,132,133,274],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[67,68,145,69,70,71,72,154,275,0,156,157,73,74,75,276,1,277,76,77,159,160,161,163,78,79,80,81,82,83,84,2,3,4,5,6,7,8,11,12,85,87,88,90,17,18,167,169,174,94,278,175,176,178,179,180,181,184,186,187,190,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,195,196,197,198,96,97,98,99,279,201,202,280,203,139,281,282,283,284,285,101,102,103,209,210,211,48,49,50,51,52,286,213,287,288,289,290,291,292,53,54,293,104,105,215,106,107,108,109,110,111,230,231,112,113,232,114,115,116,233,117,118,119,120,121,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,56,122,294,295,57,59,60,62,63,260,261,65,66,127,128,129,130,132,133,296,274,297,298,299,300,301,302],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:122","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[],"status":-2,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:224","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[303],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:250","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[304],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[144,67,68,145,69,70,146,71,147,148,149,150,72,151,152,153,154,155,156,157,73,74,75,158,1,77,159,160,161,162,163,78,79,80,81,82,83,84,2,3,4,5,7,8,9,10,11,12,15,85,87,88,89,90,16,164,92,17,18,165,166,167,168,169,170,171,172,173,174,94,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,191,192,193,194,195,196,197,198,199,96,200,97,98,201,202,203,139,141,204,100,101,102,103,205,206,207,208,209,210,211,48,49,50,51,52,303,212,213,214,54,105,215,216,217,218,219,220,55,221,222,223,224,225,226,227,228,229,106,107,108,109,110,111,230,231,112,113,232,114,115,116,233,117,118,119,120,121,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,122,57,255,256,257,258,259,59,60,63,260,261,262,263,264,265,266,267,268,269,270,64,65,66,123,124,125,126,271,127,128,129,272,273,130,131,132,133,274],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[23],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[23,27],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[151,152,162,78,81,85,86,88,89,90,16,140,164,93,305,306,166,167,307,308,309,100,310,311,312,313,314,315,316,317,318,137,319,320,134,138,321,228,229,322,323,324,122,325,326,327,328,329,330,272,331,332,333,334,335,336,273],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"interceptor":"interceptor","mockedMethods":"mockedMethods"}},{"transplant":{"position":"org.easymock.internal.LastControl:117","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[145,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,174,94,278,175,195,196,197,337,338],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"failures":[339],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:138","sourceCode":"java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[340,56],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[341],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:2124","sourceCode":"if (org.easymock.internal.Invocation == null) {\n    throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:357","sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[318,137,319,320,138,321],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:91","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[2,3,4,5,12,13,22,23,24,25,26,27,28,29,30,31,40,41,45,46],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[342],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:102","sourceCode":"if (!boolean) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove();\n    throw new java.lang.IllegalStateException(java.lang.String);\n} ","type":"CtIfImpl"},"failures":[2,3,4,5,12,13,22,23,24,25,26,27,28,29,30,31,40,41,45,46],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:122","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:35","sourceCode":"final java.lang.Object java.lang.Object = org.easymock.internal.matchers.Equals.getExpected()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[322],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"type":"type"}},{"transplant":{"position":"org.easymock.internal.UnorderedBehavior:44","sourceCode":"final org.easymock.internal.Results org.easymock.internal.Results = new org.easymock.internal.Results()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.UnorderedBehavior:45","sourceCode":"org.easymock.internal.Results.add(org.easymock.internal.Result, org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[144,67,68,145,69,70,146,71,147,150,72,151,152,153,154,155,275,0,156,157,73,74,75,276,158,1,277,76,77,159,160,161,162,163,78,79,80,81,82,83,84,2,3,4,5,6,7,8,9,10,11,12,14,15,85,86,87,88,89,90,16,91,92,93,17,18,167,169,174,94,278,175,176,177,178,179,180,181,182,184,185,186,187,188,189,190,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,191,192,193,194,195,196,197,198,95,96,97,98,99,279,201,202,280,203,139,281,282,283,284,204,285,100,101,102,103,209,210,211,48,49,50,51,52,286,212,213,287,288,289,290,291,292,214,53,54,293,104,105,215,55,222,224,226,227,343,344,228,229,106,107,108,109,110,111,230,231,112,113,232,114,115,116,233,117,118,119,120,121,345,337,346,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,56,122,294,295,57,59,60,61,62,63,347,260,261,262,263,264,265,266,348,267,268,269,270,64,65,66,127,128,129,273,130,131,132,133,296,274,297,298,299,300,301,302],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:69","sourceCode":"return java.lang.StringBuffer.toString()","type":"CtReturnImpl"},"failures":[76,280,283,284,210,211,349,350,53,104,56,351,297,300,301],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[352,353,354,355],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:147","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cached":"org.easymock.internal.MocksControl.classProxyFactory"}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[145,174,278,175,337],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":23,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":296,"org.easymock.tests2.UsageTest.argumentsOrdered":284,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":186,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":220,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":139,"org.easymock.tests2.StubTest.stubWithReturnValue":190,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":44,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":113,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":150,"org.easymock.tests2.SerializationTest.testAllMockedMethod":162,"org.easymock.tests2.DelegateToTest.testReturnException":174,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":218,"org.easymock.tests.MockingTest.testPartialClassMocking":127,"org.easymock.samples.SupportTest.voteForRemovals":67,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":342,"org.easymock.tests.MockClassControlTest.testToString":331,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":143,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":306,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":247,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":235,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":101,"org.easymock.tests.UsageExpectAndThrowTest.object":245,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":74,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":41,"org.easymock.tests2.DelegateToTest.testWrongClass":278,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":65,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":66,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":29,"org.easymock.tests2.UsageTest.wrongArguments":280,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":59,"org.easymock.tests.UsageStrictMockTest.range":104,"org.easymock.samples.ConstructorCalledMockTest.testTax":148,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":207,"org.easymock.samples.ExampleTest.answerVsDelegate":145,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":183,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":78,"org.easymock.tests2.UsageConstraintsTest.testNull":25,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":246,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":88,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":336,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":97,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":185,"org.easymock.tests2.CaptureTest.testPrimitive":5,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":309,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":300,"org.easymock.tests.UsageTest.moreThanOneArgument":274,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":254,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":206,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":87,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":125,"org.easymock.tests2.CaptureTest.testCaptureNone":10,"org.easymock.tests.UsageUnorderedTest.message":56,"org.easymock.tests.UsageVerifyTest.twoReturns":211,"org.easymock.tests.UsageVarargTest.varargByteAccepted":269,"org.easymock.tests2.ThreadingTest.testThreadSafe":154,"org.easymock.tests.UsageTest.argumentsOrdered":301,"org.easymock.tests.UsageVarargTest.varargIntAccepted":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":315,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":227,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":151,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":48,"org.easymock.tests2.CaptureTest.testCapture_2617107":4,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":199,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":303,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":62,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":200,"org.easymock.tests2.UsageConstraintsTest.any":31,"org.easymock.tests2.StubTest.stub":189,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":52,"org.easymock.tests.UsageExpectAndThrowTest.longType":238,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":219,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":134,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":277,"org.easymock.tests2.SerializationTest.testClass":160,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":169,"org.easymock.tests.LimitationsTest.mockNativeMethod":122,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":157,"org.easymock.tests2.AnswerTest.answer":195,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":121,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":30,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":173,"org.easymock.tests2.CaptureTest.testAnd":2,"org.easymock.tests2.UsageTest.strictResetToDefault":201,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":159,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":164,"org.easymock.tests2.NameTest.nameForMocksControl":194,"org.easymock.tests2.MockedExceptionTest.testMockedException":166,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":124,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":310,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":132,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":180,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":299,"org.easymock.tests2.DelegateToTest.testDelegate":175,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":239,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":129,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":85,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":98,"org.easymock.tests.MockingTest.testNicePartialClassMocking":128,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":250,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":90,"org.easymock.tests.LimitationsTest.mockFinalMethod":325,"org.easymock.tests2.CaptureTest.testCaptureLast":9,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":55,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":353,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":84,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":28,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":259,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":42,"org.easymock.tests.MockingTest.testTwoMocks":328,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":352,"org.easymock.tests2.CaptureTest.testCapture1_2446744":6,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":106,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":248,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":243,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":171,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":283,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":46,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":341,"org.easymock.tests.UsageThrowableTest.throwError":286,"org.easymock.tests.UsageStrictMockTest.differentMethods":105,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":319,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":275,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":330,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":311,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":271,"org.easymock.tests.UsageExpectAndThrowTest.floatType":237,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":37,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":196,"org.easymock.tests.UsageVerifyTest.twoThrows":210,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":354,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":102,"org.easymock.samples.PartialClassMockTest.testGetArea":72,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":49,"org.easymock.samples.ExampleTest.voteAgainstRemoval":70,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":92,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":313,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":236,"org.easymock.tests2.UsageTest.niceToStrict":203,"org.easymock.tests.LimitationsTest.privateConstructor":324,"org.easymock.tests2.UsageConstraintsTest.testNotNull":45,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":291,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":165,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":96,"org.easymock.tests2.UsageTest.defaultResetToNice":141,"org.easymock.samples.ExampleTest.voteAgainstRemovals":68,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":117,"org.easymock.tests.UsageVarargTest.differentLength":348,"org.easymock.tests2.CallbackTest.callback":163,"org.easymock.tests2.UsageConstraintsTest.equals":339,"org.easymock.tests.UsageTest.openCallCountByLastCall":298,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":244,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":181,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":20,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":222,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":205,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":61,"org.easymock.tests.UsageCallCountTest.tooFewCalls":225,"org.easymock.tests.UsageOverloadedMethodTest.overloading":260,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":317,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":346,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":35,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":347,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":81,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":114,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":34,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":135,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":11,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":208,"org.easymock.tests.UsageThrowableTest.throwCheckedException":288,"org.easymock.tests.MockClassControlTest.testEquals":335,"org.easymock.tests2.EasyMockSupportClassTest.testAll":100,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":229,"org.easymock.tests.MockingTest.testStrictClassMocking":326,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":252,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":257,"org.easymock.tests2.CaptureTest.testCaptureAll":3,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":172,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":83,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":58,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":80,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":304,"org.easymock.tests2.UsageConstraintsTest.testMatches":36,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":82,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":198,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":126,"org.easymock.samples.ExampleTest.voteForRemovals":71,"org.easymock.tests2.NameTest.nameForNiceMock":193,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":156,"org.easymock.tests.UsageVarargTest.allKinds":64,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":209,"org.easymock.tests2.DependencyTest.testInterfaceMocking":73,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":258,"org.easymock.samples.BasicClassMockTest.testPrintContent":152,"org.easymock.samples.ExampleTest.addDocument":146,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":316,"org.easymock.tests2.DelegateToTest.testStubDelegate":94,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":290,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":276,"org.easymock.tests2.AnswerTest.stubAnswer":197,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":221,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":54,"org.easymock.tests2.UsageConstraintsTest.greaterThan":38,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":131,"org.easymock.tests.UsageVarargTest.varargLongAccepted":268,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":93,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":215,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":321,"org.easymock.samples.ExampleTest.voteForRemoval":69,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":305,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":155,"org.easymock.tests.UsageExpectAndReturnTest.floatType":108,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":120,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":75,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":149,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":355,"org.easymock.tests.UsageThrowableTest.noUpperLimit":212,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":39,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":279,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":273,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":21,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":307,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":7,"org.easymock.tests2.SerializationTest.test":161,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":136,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":137,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":178,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":213,"org.easymock.tests2.UsageConstraintsTest.testSame":26,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":107,"org.easymock.samples.SupportTest.addDocument":144,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":217,"org.easymock.tests2.CaptureTest.testCaptureFirst":15,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":179,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":285,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":231,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":312,"org.easymock.tests.GenericTest.testPackageScope":228,"org.easymock.tests2.UsageTest.moreThanOneArgument":202,"org.easymock.tests2.CaptureTest.testCapture2_2446744":14,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":0,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":99,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":270,"org.easymock.tests.GenericTest.testBridgedEquals":322,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":343,"org.easymock.tests2.NameTest.nameForMock":191,"org.easymock.tests.UsageExpectAndReturnTest.longType":109,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":255,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":176,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":253,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":115,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":43,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":251,"org.easymock.tests2.UsageStrictMockTest.differentMethods":77,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":123,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":140,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":110,"org.easymock.tests.UsageCallCountTest.tooManyCalls":344,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":249,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":133,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":224,"org.easymock.tests2.MockedExceptionTest.testRealException":168,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":112,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":349,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":240,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":1,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":289,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":60,"org.easymock.tests.MockingTest.testNiceClassMocking":329,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":79,"org.easymock.tests.MockingTest.testClassMocking":327,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":223,"org.easymock.tests2.NameTest.nameForStrictMock":192,"org.easymock.tests2.UsageConstraintsTest.testContains":33,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":167,"org.easymock.tests2.UsageConstraintsTest.testFind":24,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":261,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":17,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":89,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":292,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":18,"org.easymock.tests.UsageExpectAndReturnTest.object":232,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":308,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":340,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":320,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":40,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":16,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":95,"org.easymock.tests2.UsageStrictMockTest.range":76,"org.easymock.tests2.UsageConstraintsTest.lessThan":47,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":184,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":266,"org.easymock.tests.UsageTest.exactCallCountByLastCall":302,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":57,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":177,"org.easymock.tests2.CaptureTest.testCaptureRightOne":12,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":294,"org.easymock.tests2.UsageConstraintsTest.testOr":27,"org.easymock.tests.UsageRangeTest.combination":130,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":262,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":86,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":118,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":337,"org.easymock.tests.UsageTest.wrongArguments":297,"org.easymock.tests.MockClassControlTest.testHashCode":334,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":272,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":111,"org.easymock.tests2.EasyMockSupportTest.testVerify":188,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":116,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":295,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":345,"org.easymock.tests.UsageVarargTest.varargShortAccepted":267,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":138,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":170,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":19,"org.easymock.tests2.UsageConstraintsTest.cmpTo":32,"org.easymock.tests.UsageVarargTest.varargCharAccepted":265,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":158,"org.easymock.tests2.UsageTest.openCallCountByLastCall":281,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":282,"org.easymock.tests.DefaultClassInstantiatorTest.object":318,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":187,"org.easymock.tests2.CaptureTest.testCaptureFromStub":13,"org.easymock.tests.UsageTest.unexpectedCallWithArray":351,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":350,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":314,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":242,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":287,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":53,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":226,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":142,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":233,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":333,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":293,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":91,"org.easymock.tests2.UsageConstraintsTest.constraints":22,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":241,"org.easymock.samples.ExampleTest.addAndChangeDocument":147,"org.easymock.tests.CapturesMatcherTest.test":338,"org.easymock.tests.UsageStrictMockTest.testVerify":216,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":119,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":153,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":332,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":214,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":103,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":256,"org.easymock.tests2.UsageTest.resumeIfFailure":204,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":8,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":50,"org.easymock.tests.LimitationsTest.abstractClass":323,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":230,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":234,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":51,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":263,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":182}}]

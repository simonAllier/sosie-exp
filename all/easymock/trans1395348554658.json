[{"transplant":{"position":"org.easymock.EasyMock:632","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[0,1,2,3,4,5,6,7,8],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[9,10,11,12],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"propertyFileName","key":"propertyFileName"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:117","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[13,14,15,16,17],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[18],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Not:42","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"failures":[19,20],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[21],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.LastControl:39","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[22],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:65","sourceCode":"throw java.lang.Throwable","type":"CtThrowImpl"},"failures":[17,23],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:409","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[24,25],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[26],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:33","sourceCode":"new java.util.ArrayList<org.easymock.internal.ExpectedInvocationAndResult>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:53","sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:205","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,6,67,68,69,24,70,71,72,73,74,75,76,77],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[78,79,80,81,82,83,27,28,29,30,84,31,32,34,35,36,37,38,39,85,40,86,87,88,89,90,91,92,93,94,1,2,95,3,42,96,4,43,44,97,46,98,98,99,99,100,101,102,103,47,48,104,105,50,106,107,108,109,110],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:68","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int])","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[111,112,5,113,114,8],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:320","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[115,116],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[117,118,31,38,39,40,119,120,121,122,123,5,124,125,126,127,128,129,130,131,20,132,133,8,134,135,136,137,138,139],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:202","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:218","failures":[78,27,28,34,140,141,38,40,87,142,143,44,45,46,98,99,49,50],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[144],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[145],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1445","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:212","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:141","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if (java.lang.reflect.Constructor<T> == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[78,146,147,148,149,150,151,152,153,154,141,155,156,87,142],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.Results:49","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:201","sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = (java.util.Set<java.lang.reflect.Method>) == null ? new java.lang.reflect.Method[0] : java.util.Set<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.Set<java.lang.reflect.Method>.size()])","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[13,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,16,23,26],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[24,25],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:296","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[62,63,64,65,66,67],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:46","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"invocation":"invocation","this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:320","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[115,116],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":92,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":90,"org.easymock.tests2.UsageTest.argumentsOrdered":122,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":14,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":68,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":74,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":116,"org.easymock.tests2.StubTest.stubWithReturnValue":56,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":154,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":151,"org.easymock.tests2.SerializationTest.testAllMockedMethod":79,"org.easymock.tests.UsageVarargTest.allKinds":25,"org.easymock.tests2.DelegateToTest.testReturnException":175,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":156,"org.easymock.tests.MockingTest.testPartialClassMocking":107,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":149,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":112,"org.easymock.samples.BasicClassMockTest.testPrintContent":101,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":49,"org.easymock.tests2.DelegateToTest.testStubDelegate":176,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":45,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":66,"org.easymock.tests2.AnswerTest.stubAnswer":158,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":27,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":6,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":153,"org.easymock.tests2.UsageConstraintsTest.greaterThan":53,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":140,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":97,"org.easymock.tests2.DelegateToTest.testWrongClass":177,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":147,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":76,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":77,"org.easymock.tests2.UsageTest.wrongArguments":120,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":22,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":69,"org.easymock.tests.UsageStrictMockTest.range":124,"org.easymock.samples.ConstructorCalledMockTest.testTax":98,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":42,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":87,"org.easymock.samples.ExampleTest.answerVsDelegate":16,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":99,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":48,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":54,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":88,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":102,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":166,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":2,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":141,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":119,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":36,"org.easymock.tests2.CaptureTest.testPrimitive":164,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":70,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":135,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":113,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":73,"org.easymock.tests2.CaptureTest.testCaptureFirst":174,"org.easymock.tests2.CaptureTest.testCaptureNone":169,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":115,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":10,"org.easymock.tests.UsageUnorderedTest.message":20,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":132,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":127,"org.easymock.tests.GenericTest.testPackageScope":104,"org.easymock.tests2.CaptureTest.testCapture2_2446744":173,"org.easymock.tests.UsageVerifyTest.twoReturns":131,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":39,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":63,"org.easymock.tests.UsageTest.argumentsOrdered":136,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":100,"org.easymock.tests2.CaptureTest.testCapture_2617107":163,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":138,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":57,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":152,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":30,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":85,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":67,"org.easymock.tests2.UsageStrictMockTest.differentMethods":118,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":35,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":61,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":71,"org.easymock.tests.UsageCallCountTest.tooManyCalls":139,"org.easymock.tests2.SerializationTest.testClass":78,"org.easymock.tests.LimitationsTest.mockNativeMethod":103,"org.easymock.tests2.AnswerTest.answer":13,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":50,"org.easymock.tests2.CaptureTest.testAnd":161,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":82,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":65,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":4,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":155,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":0,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":24,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":89,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":72,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":84,"org.easymock.tests2.DelegateToTest.testDelegate":178,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":109,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":86,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":94,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":37,"org.easymock.tests.MockingTest.testNicePartialClassMocking":108,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":3,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":33,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":159,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":95,"org.easymock.tests2.CaptureTest.testCaptureLast":168,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":146,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":160,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":18,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":19,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":93,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":96,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":31,"org.easymock.tests2.UsageStrictMockTest.range":117,"org.easymock.tests.MockingTest.testTwoMocks":106,"org.easymock.tests2.UsageConstraintsTest.lessThan":55,"org.easymock.tests2.CaptureTest.testCapture1_2446744":165,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":148,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":121,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":64,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":12,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":150,"org.easymock.tests2.CaptureTest.testCaptureRightOne":171,"org.easymock.tests.UsageStrictMockTest.differentMethods":125,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":9,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":142,"org.easymock.tests.UsageRangeTest.combination":126,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":1,"org.easymock.tests.UsageTest.wrongArguments":134,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":23,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":133,"org.easymock.tests2.MockBuilderTest.testCreateMockString":40,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":110,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":75,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":157,"org.easymock.tests.UsageVerifyTest.twoThrows":130,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":17,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":145,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":137,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":128,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":28,"org.easymock.samples.PartialClassMockTest.testGetArea":46,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":21,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":58,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":44,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":41,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":62,"org.easymock.tests2.CaptureTest.testCaptureFromStub":172,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":34,"org.easymock.tests2.MockBuilderTest.testCreateMock":38,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":32,"org.easymock.tests2.CallbackTest.callback":15,"org.easymock.tests.UsageTest.unexpectedCallWithArray":8,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":143,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":129,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":111,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":5,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":51,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":43,"org.easymock.tests.CapturesMatcherTest.test":26,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":52,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":91,"org.easymock.tests.UsageStrictMockTest.testVerify":7,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":144,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":29,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":11,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":167,"org.easymock.tests2.UsageTest.resumeIfFailure":123,"org.easymock.tests2.EasyMockSupportClassTest.testAll":83,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":59,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":81,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":105,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":47,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":114,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":60,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":80,"org.easymock.tests2.CaptureTest.testCaptureAll":162}}]

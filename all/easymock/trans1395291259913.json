[{"position":"org.easymock.internal.ErrorMessage:50","failures":[0,1,2,3,4,5,6],"status":-1,"binaryOperator":"int == 1","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareTo:49","failures":[7,8,9,10,11],"status":-1,"binaryOperator":"(((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"failures":[12],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:89","failures":[13,14,15,16,17],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:49","sourceCode":"org.easymock.internal.Injection.getAnnotation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:170","sourceCode":"org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection)","type":"CtInvocationImpl"},"failures":[18,19,20,21,22,23,24,25,26,27,28,29],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:324","failures":[3,30,31],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"failures":[32,33,34],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[35,36,37,38],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:210","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"failures":[39],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:106","failures":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,53,54,54,55,56,57,14,58,59,15,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,16,17,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[94,95,96,97,98,99],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[100],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[101,102,103],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:205","failures":[40,41,104,49,52,53,54,57,105,58,59,100,106,15,60,61,107,62,108,109,63,64,110,66,72,111,16,17,112,113,81,83,114,115,85,86,87],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[94,116,117,118,119,2,3,4,97,5,120,121,122,6],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:57","failures":[],"status":0,"binaryOperator":"(((this.java.lang.Object) != null) && (this.java.lang.Object.equals(org.easymock.internal.matchers.Equals.java.lang.Object)))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:80","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[104,47,48,49,123],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"bridgeMethod"}},{"position":"org.easymock.internal.RecordState:274","failures":[124,125,126,127,128,129,130,131,132],"status":-1,"binaryOperator":"org.easymock.IAnswer<?> == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:633","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:259","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksControl:131","failures":[12],"status":-1,"binaryOperator":"(\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Same:37","failures":[133],"status":-1,"binaryOperator":"(java.lang.Object) == java.lang.Object","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"failures":[134,116,117,118,135,0,1,2,136,3,4,97,137,5,138,139,120,121,122,140,141,142,143,144,6,145],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[146,147],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[107,109,148,149,150,151,152,81,83,114],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:840","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1433","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[94,95,96,97,98,99],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:126","sourceCode":"java.lang.ClassLoader java.lang.ClassLoader = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:98","sourceCode":"return (java.lang.String) != null ? java.lang.String : \"EasyMock for \" + org.easymock.internal.MocksControl.(org.easymock.internal.MocksControl.getMockedType(java.lang.Object))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[18,19,153,20,21,22,154,155,23,24,25,156,26,27,28,157,158,29],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:269","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","type":"CtThrowImpl"},"failures":[36,37,159,160],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:90","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[13],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[94,95,96,97,98,99],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1763","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"failures":[161],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:83","sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","type":"CtThrowImpl"},"failures":[162],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[94,95,96,97,98,99],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"failures":[163],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[164,81,165,82],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[166,167,168,169,170,171,134,94,116,172,173,117,118,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,42,205,206,207,208,209,210,211,212,44,45,46,213,214,215,216,217,218,219,220,2,221,222,38,223,224,136,3,4,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,30,31,249,250,251,252,253,254,255,47,48,256,257,258,259,260,261,50,262,263,264,265,266,267,268,269,270,271,272,273,97,137,274,5,138,275,276,277,278,51,279,280,281,282,283,284,52,285,286,125,287,288,289,290,291,53,53,54,54,55,56,292,293,294,295,139,120,296,297,298,299,300,121,122,301,302,57,15,60,61,62,64,66,303,304,67,68,305,69,70,71,73,74,17,306,307,308,146,147,309,133,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,161,326,327,126,127,128,129,328,329,330,331,113,332,76,333,130,131,334,335,336,337,338,132,339,340,34,341,342,81,165,82,83,343,344,345,346,347,348,349,350,351,352,353,354,355,140,141,142,143,84,85,86,87,356,357,358,144,359,6,145,360,361,362,363,88,89,90,91,364,92,93,365,366,367,368,369,370,371,372,373,374,375,376,377,378],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:213","failures":[104,123],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[104,123],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":146,"org.easymock.tests2.UsageTest.argumentsOrdered":122,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":171,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":353,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":259,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":32,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":297,"org.easymock.tests2.StubTest.stubWithReturnValue":362,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":107,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":325,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":285,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":234,"org.easymock.tests2.SerializationTest.testAllMockedMethod":82,"org.easymock.tests2.DelegateToTest.testReturnException":340,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":257,"org.easymock.tests.MockingTest.testPartialClassMocking":44,"org.easymock.samples.SupportTest.voteForRemovals":293,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":99,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":104,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":153,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":112,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":187,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":164,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":85,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":175,"org.easymock.tests.UsageExpectAndThrowTest.object":185,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":135,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":323,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":304,"org.easymock.tests2.DelegateToTest.testWrongClass":341,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":148,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":277,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":278,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":312,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":221,"org.easymock.tests2.UsageTest.wrongArguments":120,"org.easymock.samples.ConstructorCalledMockTest.testTax":53,"org.easymock.tests.UsageStrictMockTest.range":5,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":29,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":270,"org.easymock.samples.ExampleTest.answerVsDelegate":125,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":350,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":88,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":41,"org.easymock.tests2.UsageConstraintsTest.testNull":309,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":69,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":186,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":352,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":61,"org.easymock.tests2.CaptureTest.testPrimitive":368,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":224,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":194,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":117,"org.easymock.tests.UsageTest.moreThanOneArgument":134,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":305,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":269,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":95,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":168,"org.easymock.tests2.CaptureTest.testCaptureNone":373,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":39,"org.easymock.tests.UsageUnorderedTest.message":2,"org.easymock.tests.UsageVerifyTest.twoReturns":4,"org.easymock.tests.UsageVarargTest.varargByteAccepted":202,"org.easymock.tests2.ThreadingTest.testThreadSafe":334,"org.easymock.tests.UsageTest.argumentsOrdered":118,"org.easymock.tests.UsageVarargTest.varargIntAccepted":197,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":210,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":55,"org.easymock.tests2.CaptureTest.testCapture_2617107":367,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":279,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":57,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":223,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":155,"org.easymock.tests2.UsageConstraintsTest.any":313,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":60,"org.easymock.tests2.StubTest.stub":361,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":283,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":37,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":258,"org.easymock.tests.UsageExpectAndThrowTest.longType":178,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":265,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":359,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":339,"org.easymock.tests2.SerializationTest.testClass":81,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":356,"org.easymock.tests.LimitationsTest.mockNativeMethod":50,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":244,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":49,"org.easymock.tests2.AnswerTest.answer":126,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":331,"org.easymock.tests2.CaptureTest.testAnd":365,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":79,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":25,"org.easymock.tests2.UsageTest.strictResetToDefault":295,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":360,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":74,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":100,"org.easymock.tests2.NameTest.nameForMocksControl":143,"org.easymock.tests2.MockedExceptionTest.testMockedException":332,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":26,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":167,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":347,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":215,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":173,"org.easymock.tests2.DelegateToTest.testDelegate":342,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":46,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":179,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":67,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":62,"org.easymock.tests.MockingTest.testNicePartialClassMocking":45,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":190,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":71,"org.easymock.tests2.CaptureTest.testCaptureLast":372,"org.easymock.tests2.CompareToTest.testCompareEqual":9,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":260,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":220,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":311,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":93,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":324,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":255,"org.easymock.tests.MockingTest.testTwoMocks":43,"org.easymock.tests2.CaptureTest.testCapture1_2446744":369,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":225,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":12,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":188,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":329,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":183,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":121,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":326,"org.easymock.tests.UsageThrowableTest.throwError":245,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":264,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":27,"org.easymock.tests.UsageStrictMockTest.differentMethods":138,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":19,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":336,"org.easymock.tests2.MockBuilderTest.testCreateMockString":66,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":23,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":170,"org.easymock.tests.UsageExpectAndThrowTest.floatType":177,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":319,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":127,"org.easymock.tests.UsageVerifyTest.twoThrows":3,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":115,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":86,"org.easymock.samples.PartialClassMockTest.testGetArea":52,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":263,"org.easymock.tests2.CompareToTest.testLessOrEqual":11,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":280,"org.easymock.samples.ExampleTest.voteAgainstRemoval":288,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":17,"org.easymock.tests2.UsageTest.niceToStrict":296,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":176,"org.easymock.tests2.UsageConstraintsTest.testNotNull":161,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":250,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":113,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":101,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":15,"org.easymock.tests2.UsageTest.defaultResetToNice":300,"org.easymock.tests2.MockBuilderTest.testCreateMock":63,"org.easymock.samples.ExampleTest.voteAgainstRemovals":286,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":240,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":24,"org.easymock.tests2.CallbackTest.callback":132,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":28,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":111,"org.easymock.tests.UsageTest.openCallCountByLastCall":172,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":98,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":184,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":348,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":306,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":160,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":205,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":268,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":38,"org.easymock.tests.UsageCallCountTest.tooFewCalls":208,"org.easymock.tests.UsageOverloadedMethodTest.overloading":218,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":317,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":236,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":91,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":316,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":374,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":271,"org.easymock.tests.UsageThrowableTest.throwCheckedException":30,"org.easymock.tests2.EasyMockSupportClassTest.testAll":84,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":48,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":192,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":96,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":77,"org.easymock.tests2.CaptureTest.testCaptureAll":366,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":330,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":253,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":212,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":92,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":90,"org.easymock.tests2.UsageConstraintsTest.testMatches":318,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":266,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":364,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":129,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":169,"org.easymock.tests2.CompareToTest.testGreateOrEqual":10,"org.easymock.samples.ExampleTest.voteForRemovals":290,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":338,"org.easymock.tests2.NameTest.nameForNiceMock":142,"org.easymock.tests.UsageVarargTest.allKinds":204,"org.easymock.tests2.DependencyTest.testInterfaceMocking":303,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":136,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":150,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":254,"org.easymock.samples.BasicClassMockTest.testPrintContent":56,"org.easymock.samples.ExampleTest.addDocument":289,"org.easymock.tests2.DelegateToTest.testStubDelegate":34,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":249,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":357,"org.easymock.tests2.AnswerTest.stubAnswer":128,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":261,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":21,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":137,"org.easymock.tests2.UsageConstraintsTest.greaterThan":320,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":152,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":108,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":214,"org.easymock.tests.UsageVarargTest.varargLongAccepted":201,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":75,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":275,"org.easymock.samples.ExampleTest.voteForRemoval":287,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":335,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":243,"org.easymock.tests.UsageExpectAndReturnTest.floatType":227,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":83,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":72,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":54,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":321,"org.easymock.tests.UsageThrowableTest.noUpperLimit":246,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":154,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":307,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":294,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":42,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":370,"org.easymock.tests2.SerializationTest.test":165,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":109,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":345,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":247,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":226,"org.easymock.tests2.UsageConstraintsTest.testSame":133,"org.easymock.samples.SupportTest.addDocument":292,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":256,"org.easymock.tests2.CaptureTest.testCaptureFirst":378,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":33,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":346,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":302,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":232,"org.easymock.tests.GenericTest.testPackageScope":47,"org.easymock.tests2.CaptureTest.testCapture2_2446744":377,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":337,"org.easymock.tests2.UsageTest.moreThanOneArgument":139,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":64,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":22,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":203,"org.easymock.tests.GenericTest.testBridgedEquals":123,"org.easymock.tests2.NameTest.nameForMock":140,"org.easymock.tests.UsageExpectAndReturnTest.longType":228,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":343,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":251,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":237,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":193,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":65,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":110,"org.easymock.tests2.UsageStrictMockTest.differentMethods":145,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":191,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":36,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":166,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":229,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":189,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":216,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":207,"org.easymock.tests2.MockedExceptionTest.testRealException":333,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":233,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":158,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":144,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":180,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":267,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":222,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":31,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":89,"org.easymock.tests2.UsageConstraintsTest.testContains":315,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":206,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":14,"org.easymock.tests2.NameTest.nameForStrictMock":141,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":76,"org.easymock.tests2.UsageConstraintsTest.testFind":147,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":219,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":106,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":103,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":130,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":70,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":272,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":131,"org.easymock.tests.UsageExpectAndReturnTest.object":235,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":322,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":0,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":73,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":58,"org.easymock.tests2.UsageStrictMockTest.range":6,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":157,"org.easymock.tests2.UsageConstraintsTest.lessThan":327,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":163,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":351,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":199,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":149,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":20,"org.easymock.tests.UsageTest.exactCallCountByLastCall":174,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":211,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":13,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":344,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":151,"org.easymock.tests2.CaptureTest.testCaptureRightOne":375,"org.easymock.tests2.UsageConstraintsTest.testOr":310,"org.easymock.tests.UsageRangeTest.combination":213,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":114,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":241,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":195,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":68,"org.easymock.tests.UsageTest.wrongArguments":116,"org.easymock.tests2.MockBuilderTest.testWithConstructor":105,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":18,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":51,"org.easymock.tests2.EasyMockSupportTest.testVerify":355,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":230,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":238,"org.easymock.tests.UsageVarargTest.varargShortAccepted":200,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":124,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":159,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":328,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":363,"org.easymock.tests2.UsageConstraintsTest.cmpTo":314,"org.easymock.tests.UsageVarargTest.varargCharAccepted":198,"org.easymock.tests2.CaptureTest.testCaptureMultiple":162,"org.easymock.tests2.CompareToTest.testLessThan":7,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":358,"org.easymock.tests2.UsageTest.openCallCountByLastCall":298,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":299,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":354,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":102,"org.easymock.tests2.CaptureTest.testCaptureFromStub":376,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":262,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":59,"org.easymock.tests.UsageTest.unexpectedCallWithArray":94,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":119,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":182,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":248,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":80,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":97,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":209,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":156,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":239,"org.easymock.tests2.UsageConstraintsTest.constraints":308,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":274,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":16,"org.easymock.samples.ExampleTest.addAndChangeDocument":291,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":181,"org.easymock.tests.UsageStrictMockTest.testVerify":276,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":242,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":35,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":284,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":273,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":87,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":252,"org.easymock.tests2.CompareToTest.testGreateThan":8,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":371,"org.easymock.tests2.UsageTest.resumeIfFailure":301,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":281,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":78,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":231,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":40,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":282,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":217,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":349,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":196,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":1}}]

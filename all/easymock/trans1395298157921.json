[{"position":"org.easymock.internal.matchers.Compare:52","failures":[0],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:32","sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[1],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[2,3,4,5,6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"transplant":{"position":"org.easymock.internal.LastControl:70","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:74","sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[7],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:167","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:109","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"failures":[8,9,10,11,12,13],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:44","failures":[],"status":0,"binaryOperator":"(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:204","sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:207","sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","args":"args","cstr":"cstr"}},{"transplant":{"position":"org.easymock.EasyMock:759","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Integer>(int))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1531","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[7,14,15,16,17,18,19,20,21,22,23],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:280","failures":[24,25,26,27,28,29,30,31],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"position":"org.easymock.EasyMock:1249","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[25,26,27,29,32,33,34,35,36,37,7,38,14,39,15,16,40,41,42,43,44,45,46,0,47,48,17,49,50,51,18,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,4,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,19,122,123,124,125,126,20,21,127,128,129,130,22,131,132,133,134,135,136,137,138,8,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,23,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,9,31,10,11,266,12,267],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Compare:52","failures":[0],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[37,7,14,15,16,268,17,18,121,122,128],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[62,269],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1608","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[32,33,34,35,55,72,73,74,75,76,77,78,109,110,111,270,119,120,125,126,271,272,185,186,187,188,189,190,191,192,193,207,208,209,210,228,229,230,231,232,273,233,234,235,236,23,237],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"failures":[274,275,276],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"failures":[277],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:334","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","type":"CtInvocationImpl"},"failures":[29,32,33,34,35,45,47,53,56,101,102,19,20,21,22,133,152,160,166,172,176,178,278,279,280,219,240,246,252,256,258,267],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[281,282,283,284,153,187],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:623","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:95","sourceCode":"int = java.lang.Integer.int","type":"CtAssignmentImpl"},"failures":[36,37,38,39,15,43,46,48,52,65,76,77,119,190,191,207,208,209,210,221,262],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"java.lang.Integer.MAX_VALUE":"max"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[281,282,283,284,153,187],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[68,70,285,2,3,286,287,288,289,290,291,292],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[293,294,295,296],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:228","sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:95","sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","type":"CtForImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:90","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[297],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[58],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"position":"org.easymock.ConstructorArgs:77","failures":[3,298],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:93","failures":[299,67,68,300,69,70,301,302,303,304,305,306,307,89,91,92,308,309,310,93,94,311,312,313,95,314,96,4,106,107,109,110,111,315,112,113,316,114,270,117,131,317,134,135,136,194,204,205,318,212,319,320,5,5,6,6,321,322,323],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"failures":[119,217],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[35,37,47,51,277],"status":-1,"binaryOperator":"int <= 0","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":7,"org.easymock.tests2.UsageTest.argumentsOrdered":64,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":151,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":148,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":59,"org.easymock.tests2.StubTest.stubWithReturnValue":120,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":289,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":249,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":51,"org.easymock.tests2.SerializationTest.testAllMockedMethod":91,"org.easymock.tests2.DelegateToTest.testReturnException":25,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":279,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":146,"org.easymock.tests.MockingTest.testPartialClassMocking":134,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":282,"org.easymock.samples.SupportTest.voteForRemovals":13,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":172,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":302,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":160,"org.easymock.tests.UsageExpectAndThrowTest.object":170,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":49,"org.easymock.tests2.DelegateToTest.testWrongClass":27,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":200,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":201,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":40,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":214,"org.easymock.tests2.UsageTest.wrongArguments":57,"org.easymock.samples.ConstructorCalledMockTest.testTax":5,"org.easymock.tests.UsageStrictMockTest.range":190,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":143,"org.easymock.samples.ExampleTest.answerVsDelegate":31,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":320,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":299,"org.easymock.tests2.UsageConstraintsTest.testNull":14,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":109,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":171,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":311,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":294,"org.easymock.tests2.CaptureTest.testPrimitive":123,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":218,"org.easymock.tests.UsageTest.moreThanOneArgument":152,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":157,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":179,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":108,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":142,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":283,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":197,"org.easymock.tests2.CaptureTest.testCaptureNone":21,"org.easymock.tests.UsageUnorderedTest.message":219,"org.easymock.tests.UsageVerifyTest.twoReturns":239,"org.easymock.tests.UsageVarargTest.varargByteAccepted":235,"org.easymock.tests2.ThreadingTest.testThreadSafe":101,"org.easymock.tests.UsageTest.argumentsOrdered":158,"org.easymock.tests.UsageVarargTest.varargIntAccepted":230,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":265,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":322,"org.easymock.tests2.CaptureTest.testCapture_2617107":122,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":137,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":92,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":217,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":94,"org.easymock.tests2.UsageConstraintsTest.any":41,"org.easymock.tests2.StubTest.stub":119,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":140,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":147,"org.easymock.tests.UsageExpectAndThrowTest.longType":163,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":274,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":75,"org.easymock.tests2.SerializationTest.testClass":89,"org.easymock.tests.ReplayStateInvalidUsageTest.times":280,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":80,"org.easymock.tests.LimitationsTest.mockNativeMethod":131,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":318,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":259,"org.easymock.tests2.AnswerTest.answer":81,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":268,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":100,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":307,"org.easymock.tests2.CaptureTest.testAnd":121,"org.easymock.tests2.UsageTest.strictResetToDefault":55,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":288,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":78,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":113,"org.easymock.tests2.NameTest.nameForMocksControl":88,"org.easymock.tests2.MockedExceptionTest.testMockedException":116,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":196,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":209,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":156,"org.easymock.tests2.DelegateToTest.testDelegate":29,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":136,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":164,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":106,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":312,"org.easymock.tests.MockingTest.testNicePartialClassMocking":135,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":175,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":111,"org.easymock.tests2.CaptureTest.testCaptureLast":20,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":149,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":206,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":70,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":16,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":50,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":184,"org.easymock.tests.MockingTest.testTwoMocks":317,"org.easymock.tests2.CaptureTest.testCapture1_2446744":124,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":285,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":240,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":173,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":98,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":168,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":63,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":52,"org.easymock.tests.UsageThrowableTest.throwError":220,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":213,"org.easymock.tests.UsageStrictMockTest.differentMethods":191,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":103,"org.easymock.tests2.MockBuilderTest.testCreateMockString":96,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":199,"org.easymock.tests.UsageExpectAndThrowTest.floatType":162,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":0,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":82,"org.easymock.tests.UsageVerifyTest.twoThrows":238,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":2,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":303,"org.easymock.samples.PartialClassMockTest.testGetArea":321,"org.easymock.tests2.CompareToTest.testLessOrEqual":277,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":138,"org.easymock.samples.ExampleTest.voteAgainstRemoval":11,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":114,"org.easymock.tests2.UsageTest.niceToStrict":58,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":161,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":3,"org.easymock.tests2.UsageConstraintsTest.testNotNull":18,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":227,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":115,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":298,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":93,"org.easymock.tests2.MockBuilderTest.testCreateMock":313,"org.easymock.tests2.UsageTest.defaultResetToNice":62,"org.easymock.samples.ExampleTest.voteAgainstRemovals":9,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":278,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":255,"org.easymock.tests.UsageVarargTest.differentLength":273,"org.easymock.tests2.CallbackTest.callback":32,"org.easymock.tests.UsageTest.openCallCountByLastCall":155,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":281,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":169,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":35,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":260,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":216,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":141,"org.easymock.tests.UsageCallCountTest.tooFewCalls":263,"org.easymock.tests.UsageOverloadedMethodTest.overloading":132,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":45,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":300,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":251,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":275,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":44,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":127,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":144,"org.easymock.tests.UsageThrowableTest.throwCheckedException":224,"org.easymock.tests2.EasyMockSupportClassTest.testAll":301,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":205,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":284,"org.easymock.tests.MockingTest.testStrictClassMocking":271,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":177,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":305,"org.easymock.tests2.CaptureTest.testCaptureAll":19,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":99,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":182,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":203,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":69,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":68,"org.easymock.tests2.UsageConstraintsTest.testMatches":46,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":84,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":198,"org.easymock.samples.ExampleTest.voteForRemovals":12,"org.easymock.tests2.NameTest.nameForNiceMock":87,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":105,"org.easymock.tests.UsageVarargTest.allKinds":23,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":237,"org.easymock.tests2.DependencyTest.testInterfaceMocking":71,"org.easymock.samples.BasicClassMockTest.testPrintContent":323,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":183,"org.easymock.samples.ExampleTest.addDocument":266,"org.easymock.tests2.DelegateToTest.testStubDelegate":26,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":226,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":72,"org.easymock.tests2.AnswerTest.stubAnswer":83,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":28,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":150,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":188,"org.easymock.tests2.UsageConstraintsTest.greaterThan":47,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":208,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":270,"org.easymock.tests.UsageVarargTest.varargLongAccepted":234,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":192,"org.easymock.samples.ExampleTest.voteForRemoval":10,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":102,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":258,"org.easymock.tests.UsageExpectAndReturnTest.floatType":242,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":315,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":4,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":6,"org.easymock.tests.UsageThrowableTest.noUpperLimit":221,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":48,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":212,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":54,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":36,"org.easymock.tests2.SerializationTest.test":90,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":125,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":276,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":293,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":222,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":241,"org.easymock.tests2.UsageConstraintsTest.testSame":39,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":145,"org.easymock.tests2.CaptureTest.testCaptureFirst":22,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":24,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":66,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":247,"org.easymock.tests.GenericTest.testPackageScope":204,"org.easymock.tests2.UsageTest.moreThanOneArgument":56,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":104,"org.easymock.tests2.CaptureTest.testCapture2_2446744":130,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":95,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":272,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":236,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":286,"org.easymock.tests2.NameTest.nameForMock":85,"org.easymock.tests.UsageExpectAndReturnTest.longType":243,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":180,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":314,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":252,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":178,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":291,"org.easymock.tests2.UsageStrictMockTest.differentMethods":77,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":176,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":195,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":269,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":244,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":174,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":295,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":210,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":262,"org.easymock.tests2.MockedExceptionTest.testRealException":118,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":248,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":74,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":165,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":225,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":215,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":67,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":308,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":261,"org.easymock.tests2.NameTest.nameForStrictMock":86,"org.easymock.tests2.UsageConstraintsTest.testContains":43,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":117,"org.easymock.tests2.UsageConstraintsTest.testFind":38,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":133,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":33,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":110,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":34,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":185,"org.easymock.tests.UsageExpectAndReturnTest.object":250,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":17,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":112,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":309,"org.easymock.tests2.UsageStrictMockTest.range":76,"org.easymock.tests2.UsageConstraintsTest.lessThan":53,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":232,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":296,"org.easymock.tests.UsageTest.exactCallCountByLastCall":159,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":297,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":202,"org.easymock.tests2.CaptureTest.testCaptureRightOne":128,"org.easymock.tests2.UsageConstraintsTest.testOr":15,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":292,"org.easymock.tests.UsageRangeTest.combination":207,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":256,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":228,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":107,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":30,"org.easymock.tests.UsageTest.wrongArguments":154,"org.easymock.tests2.MockBuilderTest.testWithConstructor":287,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":194,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":245,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":253,"org.easymock.tests.UsageVarargTest.varargShortAccepted":233,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":97,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":79,"org.easymock.tests2.UsageConstraintsTest.cmpTo":42,"org.easymock.tests.UsageVarargTest.varargCharAccepted":231,"org.easymock.tests2.CaptureTest.testCaptureMultiple":1,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":73,"org.easymock.tests2.UsageTest.openCallCountByLastCall":60,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":61,"org.easymock.tests2.CaptureTest.testCaptureFromStub":129,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":310,"org.easymock.tests.UsageTest.unexpectedCallWithArray":153,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":167,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":223,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":187,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":264,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":290,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":254,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":316,"org.easymock.tests2.UsageConstraintsTest.constraints":37,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":189,"org.easymock.samples.ExampleTest.addAndChangeDocument":267,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":166,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":257,"org.easymock.tests.UsageStrictMockTest.testVerify":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":304,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":186,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":181,"org.easymock.tests2.UsageTest.resumeIfFailure":65,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":126,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":306,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":8,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":319,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":246,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":211,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":139,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":229}}]

[{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.UnorderedBehavior:89","sourceCode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[0],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:53","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,0,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[289],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.MocksControl:131","failures":[290],"status":-1,"binaryOperator":"(\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:88","sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidClassProxyFactory:43","sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:353","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:322","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bounds":"actualTypeArguments"}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:74","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[291,292,293,294,295,296,297,298,299,300,301,302],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"matched"}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[233,251,254,303],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Same:37","failures":[239],"status":-1,"binaryOperator":"(java.lang.Object) == java.lang.Object","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:118","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[304,305,306,307,308,309,310,59,311,312,313,314,315,316,317,317,318,318,319,186,320,289,321,322,323,324,325,326,327,328,329,200,330,331,332,333,334,335,336,262,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,282,352,353,354],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[7,8,9,10,11,355,14,15,18,19,20,21,22,23,24,27,28,29,30,31,32,0,33,306,35,36,38,40,43,44,45,46,47,48,49,307,308,310,51,52,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,96,98,99,100,101,102,103,104,105,106,107,108,117,312,313,314,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,153,154,159,315,316,317,318,319,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,179,180,183,184,185,186,187,188,189,320,190,321,322,323,325,326,328,191,192,193,194,195,196,199,200,330,331,332,201,333,334,202,203,204,205,207,208,211,212,335,213,336,214,215,216,217,218,219,220,221,222,223,224,225,226,228,229,232,233,234,235,236,237,238,239,240,241,242,244,245,246,247,248,249,250,251,252,253,254,255,257,258,259,260,261,262,340,341,342,343,263,348,349,350,351,264,265,266,268,269,271,272,275,278,280,281,282,283,286,287,288],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:147","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:337","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[356,25],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1878","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:256","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[329],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[357,358,359,360,361,362],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[313,326],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.MockBuilder:178","failures":[343],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:336","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:110","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:287","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:562","sourceCode":"return ((org.easymock.IExpectationSetters<T>)(org.easymock.internal.MocksControl))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"failures":[363,364,365],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:280","sourceCode":"for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n            org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        } \n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[366],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"genericInterfaces":"actualTypeArguments","typeVariableMap":"typeVariableMap","this":"this"}},{"position":"org.easymock.internal.Range:36","failures":[367,368,369,370,371,372,373,1,374,2,3,4,5,6,7,8,9,10,11,12,13,355,14,15,16,17,18,19,20,21,22,23,24,304,375,376,377,378,305,379,380,381,382,383,384,385,386,387,388,389,390,391,392,356,393,394,395,25,396,397,398,399,400,26,401,27,28,29,30,31,32,0,33,306,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,366,307,308,309,402,403,310,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,50,51,52,53,54,55,56,57,58,422,423,424,59,425,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,426,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,427,428,311,312,313,429,314,430,431,432,433,119,120,121,434,357,358,359,360,363,361,435,362,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,315,316,317,318,319,160,161,162,163,164,165,166,436,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,320,289,190,321,322,323,324,290,325,437,438,326,327,328,329,439,440,441,191,192,193,194,442,443,444,445,446,447,448,195,196,197,198,199,200,330,331,332,449,201,333,334,450,202,203,204,205,206,207,208,209,210,211,212,335,213,336,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,451,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,452,291,292,453,293,261,454,294,295,455,456,296,262,457,338,339,458,459,340,341,342,460,343,461,462,344,345,463,347,464,297,298,465,299,263,466,300,301,467,468,302,469,470,471,348,472,473,349,474,475,476,477,478,479,480,481,482,350,483,484,485,486,487,351,488,489,490,491,264,265,492,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,493,281,282,494,495,283,284,285,286,287,288],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[119],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"failures":[367,368,369,370,371,372,373,1,374,2,3,4,5,6,7,8,9,10,11,12,13,355,14,15,16,17,18,19,20,21,22,23,24,304,377,378,305,379,380,381,382,383,384,385,386,387,388,389,390,391,392,356,393,394,395,25,396,397,398,399,400,26,401,27,28,29,30,31,32,0,33,306,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,366,307,308,309,402,403,310,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,50,51,52,53,54,55,56,57,58,422,423,424,59,425,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,426,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,427,428,311,312,313,429,314,430,431,432,119,120,121,357,358,359,360,363,361,362,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,315,316,317,317,318,318,319,160,161,162,163,164,165,166,436,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,320,289,190,321,322,323,324,290,325,437,438,326,327,328,329,439,440,441,191,192,193,194,442,446,447,448,195,196,197,198,199,200,330,331,332,201,333,334,202,203,204,205,206,207,208,209,210,211,212,335,213,336,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,451,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,452,291,292,453,293,261,454,294,295,455,456,296,262,338,339,459,340,341,342,343,462,344,345,347,464,297,298,465,299,263,466,300,301,467,468,302,469,470,471,348,472,473,349,474,475,476,477,478,479,480,481,482,350,483,484,485,486,487,351,488,489,490,491,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,493,281,282,494,283,284,285,286,287,288],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:1026","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:88","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[367,368,369,370,371,372,373,1,374,2,3,4,5,6,7,8,9,10,11,12,13,355,14,15,16,17,18,19,20,21,22,23,24,304,377,378,305,379,380,381,382,383,384,385,386,387,388,389,390,391,392,356,393,394,395,25,396,397,398,399,400,26,401,27,28,29,30,31,32,0,33,306,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,366,307,308,309,402,403,310,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,50,51,52,53,54,55,56,57,58,422,423,424,59,425,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,426,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,427,428,311,312,313,429,314,430,431,432,119,120,121,434,357,358,359,360,363,361,435,362,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,315,316,317,317,318,318,319,160,161,162,163,164,165,166,436,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,320,289,190,321,322,323,324,290,325,437,438,326,327,328,329,439,440,441,191,192,193,194,442,446,447,448,195,196,197,198,199,200,330,331,332,201,333,334,202,203,204,205,206,207,208,209,210,211,212,335,213,336,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,451,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,452,291,292,453,293,261,454,294,295,455,456,296,262,457,338,339,458,459,340,341,342,460,343,462,344,345,463,347,464,297,298,465,299,263,466,300,301,467,468,302,469,470,471,348,472,473,349,474,475,476,477,478,479,480,481,482,350,483,484,485,486,487,351,488,489,490,491,264,265,492,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,493,281,282,494,495,283,284,285,286,287,288],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[39,496,497,144,498,499],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:315","failures":[16,17,19,20,21,22,23,24,36,52,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,97,115,142,147,184,185,186,187,189,267,274],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:180","sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[90,247],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"o":"actual"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"failures":[363,364,365],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"failures":[242,248,260,500],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[241],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:217","failures":[368,369,370,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,0,33,306,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,307,308,309,403,310,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,311,312,313,314,119,120,121,357,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,315,316,317,317,318,318,319,160,161,162,163,164,165,166,436,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,320,289,190,321,322,323,324,325,326,327,328,329,191,192,193,194,195,196,197,198,199,200,330,331,332,201,333,334,202,203,204,205,206,207,208,209,210,211,212,335,213,336,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,338,340,341,342,343,344,345,347,263,348,349,350,351,264,265,492,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288],"status":-1,"binaryOperator":"((org.easymock.internal.Result) == null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[272],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1470","sourceCode":"org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[196,197],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"shouldBeUsedInOneThread","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:62","sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"t"}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[170,172,180,235,236,238,240,241,243,253,258],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[304,305,306,307,308,309,310,59,311,312,313,314,315,316,317,317,318,318,319,186,320,289,321,322,323,324,325,326,327,328,329,200,330,331,332,333,334,335,336,262,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,282,353],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:137","sourceCode":"return java.util.List<T>.toString()","type":"CtReturnImpl"},"failures":[501],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":236,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":142,"org.easymock.tests2.UsageTest.argumentsOrdered":277,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":224,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":454,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":391,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":272,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":160,"org.easymock.tests2.DelegateToTest.testReturnException":228,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":20,"org.easymock.tests.MockingTest.testPartialClassMocking":312,"org.easymock.tests.MockClassControlTest.testToString":404,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":441,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":1,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":440,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":477,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":60,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":349,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":265,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":242,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":14,"org.easymock.tests2.UsageTest.wrongArguments":270,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":302,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":153,"org.easymock.samples.ExampleTest.answerVsDelegate":162,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":305,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":431,"org.easymock.tests2.UsageConstraintsTest.testNull":238,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":321,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":409,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":223,"org.easymock.tests2.CaptureTest.testPrimitive":173,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":18,"org.easymock.tests.UsageTest.moreThanOneArgument":143,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":79,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":190,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":100,"org.easymock.tests.UsageTest.argumentsOrdered":149,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":2,"org.easymock.tests.UsageVarargTest.varargIntAccepted":82,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":395,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":7,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":262,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":456,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":444,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":341,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":383,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":11,"org.easymock.tests.ReplayStateInvalidUsageTest.times":418,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":263,"org.easymock.tests2.DependencyTest.testClassMocking":490,"org.easymock.tests2.AnswerTest.answer":283,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":243,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":396,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":205,"org.easymock.tests2.CaptureTest.testAnd":170,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":376,"org.easymock.tests2.UsageTest.strictResetToDefault":268,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":458,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":326,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":99,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":48,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":218,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":6,"org.easymock.tests2.DelegateToTest.testDelegate":232,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":75,"org.easymock.tests.LimitationsTest.mockFinalMethod":425,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":23,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":31,"org.easymock.tests2.DependencyTest.testClassMockingSupport":491,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":12,"org.easymock.tests2.CaptureTest.testCapture1_2446744":174,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":290,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":73,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":203,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":412,"org.easymock.tests.UsageThrowableTest.throwError":50,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":378,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":433,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":296,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":102,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":489,"org.easymock.samples.PartialClassMockTest.testGetArea":319,"org.easymock.tests.MockingTest.testInterfaceMocking":429,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":413,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":8,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":120,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":478,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":61,"org.easymock.tests2.UsageTest.niceToStrict":271,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":372,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":381,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":340,"org.easymock.tests2.MockBuilderTest.testCreateMock":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":485,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":301,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":498,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":69,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":219,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":375,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":157,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":103,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":151,"org.easymock.tests.UsageOverloadedMethodTest.overloading":35,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":487,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":482,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":115,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":248,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":133,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":34,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":247,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":364,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":179,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":426,"org.easymock.tests.MockClassControlTest.testEquals":408,"org.easymock.tests2.EasyMockSupportClassTest.testAll":348,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":308,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":77,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":352,"org.easymock.tests2.CaptureTest.testCaptureAll":171,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":29,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":204,"org.easymock.tests.MockNameTest.defaultName":422,"org.easymock.tests2.UsageConstraintsTest.testMatches":249,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":410,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":101,"org.easymock.samples.ExampleTest.voteForRemovals":166,"org.easymock.tests.UsageVarargTest.allKinds":90,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":32,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":30,"org.easymock.samples.BasicClassMockTest.testPrintContent":316,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":56,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":206,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":24,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":231,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":294,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":435,"org.easymock.tests2.UsageConstraintsTest.greaterThan":251,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":472,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":47,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":329,"org.easymock.samples.ExampleTest.voteForRemoval":163,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":362,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":439,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":196,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":379,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":445,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":324,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":267,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":306,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":462,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":388,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":216,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":52,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":470,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":19,"org.easymock.tests2.CaptureTest.testCaptureFirst":183,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":227,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":387,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":217,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":279,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":118,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":129,"org.easymock.tests2.CaptureTest.testCapture2_2446744":182,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":198,"org.easymock.tests2.UsageTest.moreThanOneArgument":269,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":397,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":345,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":89,"org.easymock.tests.GenericTest.testBridgedEquals":402,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":110,"org.easymock.tests.UsageExpectAndReturnTest.longType":125,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":27,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":214,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":78,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":346,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":158,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":256,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":76,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":98,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":94,"org.easymock.tests.UsageCallCountTest.tooManyCalls":111,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":486,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":130,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":468,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":65,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":55,"org.easymock.tests.MockingTest.testNiceClassMocking":432,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":330,"org.easymock.tests.MockingTest.testClassMocking":428,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":104,"org.easymock.tests2.UsageConstraintsTest.testContains":246,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":337,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":186,"org.easymock.tests2.UsageConstraintsTest.testFind":237,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":36,"org.easymock.tests.MockTypeTest.fromEasyMockClass":377,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":37,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":281,"org.easymock.tests.UsageExpectAndReturnTest.object":132,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":325,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":467,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":222,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":84,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":370,"org.easymock.tests.UsageTest.exactCallCountByLastCall":150,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":96,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":386,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":3,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":373,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":494,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":138,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":80,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":114,"org.easymock.tests.MockClassControlTest.testHashCode":407,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":291,"org.easymock.tests2.EasyMockSupportTest.testVerify":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":480,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":4,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":156,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":112,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":202,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":492,"org.easymock.tests.UsageVarargTest.varargCharAccepted":83,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":434,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":207,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":401,"org.easymock.tests2.UsageTest.openCallCountByLastCall":273,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":225,"org.easymock.tests.DefaultClassInstantiatorTest.object":357,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":155,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":368,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":481,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":67,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":53,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":465,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":452,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":406,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":327,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":66,"org.easymock.tests.CapturesMatcherTest.test":501,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":139,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":93,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":405,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":351,"org.easymock.tests2.UsageTest.resumeIfFailure":278,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":304,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":443,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":22,"org.easymock.tests2.StubTest.stubWithReturnValue":189,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":460,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":131,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":257,"org.easymock.tests2.SerializationTest.testAllMockedMethod":336,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":25,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":499,"org.easymock.samples.SupportTest.voteForRemovals":169,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":366,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":453,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":72,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":26,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":284,"org.easymock.tests.UsageExpectAndThrowTest.object":70,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":374,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":254,"org.easymock.tests2.DelegateToTest.testWrongClass":230,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":91,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":92,"org.easymock.tests.UsageStrictMockTest.range":42,"org.easymock.samples.ConstructorCalledMockTest.testTax":317,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":447,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":221,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":200,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":71,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":469,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":420,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":148,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":152,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":496,"org.easymock.tests2.CaptureTest.testCaptureNone":178,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":121,"org.easymock.tests.UsageUnorderedTest.message":58,"org.easymock.tests.UsageVerifyTest.twoReturns":33,"org.easymock.tests.UsageVarargTest.varargByteAccepted":88,"org.easymock.tests2.ThreadingTest.testThreadSafe":195,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":483,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":108,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":315,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":371,"org.easymock.tests2.CaptureTest.testCapture_2617107":172,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":355,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":399,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":17,"org.easymock.tests2.UsageConstraintsTest.any":244,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":417,"org.easymock.tests2.StubTest.stub":188,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":400,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":21,"org.easymock.tests.UsageExpectAndThrowTest.longType":63,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":363,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":416,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":209,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":261,"org.easymock.tests2.SerializationTest.testClass":335,"org.easymock.tests.LimitationsTest.mockNativeMethod":59,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":141,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":309,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":298,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":354,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":212,"org.easymock.tests2.NameTest.nameForMocksControl":194,"org.easymock.tests2.MockedExceptionTest.testMockedException":185,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":299,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":473,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":147,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":493,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":64,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":314,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":320,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":343,"org.easymock.tests.MockingTest.testNicePartialClassMocking":313,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":323,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":464,"org.easymock.tests2.CaptureTest.testCaptureLast":177,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":13,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":241,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":334,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":255,"org.easymock.tests.MockingTest.testTwoMocks":311,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":450,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":122,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":68,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":276,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":259,"org.easymock.samples.ExampleTest.removeNonExistingDocument":436,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":414,"org.easymock.tests.UsageStrictMockTest.differentMethods":43,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":300,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":292,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":359,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":197,"org.easymock.tests2.MockBuilderTest.testCreateMockString":347,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":403,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":474,"org.easymock.tests.UsageExpectAndThrowTest.floatType":62,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":250,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":471,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":286,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":495,"org.easymock.tests.UsageVerifyTest.twoThrows":0,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":350,"org.easymock.samples.ExampleTest.voteAgainstRemoval":164,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":392,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":119,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":328,"org.easymock.tests.LimitationsTest.privateConstructor":424,"org.easymock.tests2.UsageConstraintsTest.testNotNull":258,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":184,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":57,"org.easymock.tests2.UsageTest.defaultResetToNice":275,"org.easymock.samples.ExampleTest.voteAgainstRemovals":161,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":137,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":356,"org.easymock.tests.UsageVarargTest.differentLength":85,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":297,"org.easymock.tests2.CallbackTest.callback":266,"org.easymock.tests2.UsageConstraintsTest.equals":451,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":437,"org.easymock.tests.UsageTest.openCallCountByLastCall":146,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":233,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":16,"org.easymock.tests.UsageCallCountTest.tooFewCalls":106,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":332,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":154,"org.easymock.tests.UsageThrowableTest.throwCheckedException":54,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":497,"org.easymock.tests.MockingTest.testStrictClassMocking":427,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":97,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":333,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":466,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":331,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":419,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":201,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":288,"org.easymock.tests2.CompareToTest.testGreateOrEqual":500,"org.easymock.tests.ObjectMethodsTest.testHashCode":369,"org.easymock.tests2.NameTest.nameForNiceMock":193,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":199,"org.easymock.tests2.DependencyTest.testInterfaceMocking":264,"org.easymock.samples.ExampleTest.addDocument":165,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":488,"org.easymock.tests2.DelegateToTest.testStubDelegate":229,"org.easymock.tests2.AnswerTest.stubAnswer":287,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":40,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":461,"org.easymock.tests.UsageVarargTest.varargLongAccepted":87,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":44,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":390,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":140,"org.easymock.tests.UsageExpectAndReturnTest.floatType":124,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":282,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":318,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":455,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":116,"org.easymock.tests.UsageThrowableTest.noUpperLimit":51,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":252,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":234,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":442,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":175,"org.easymock.tests2.SerializationTest.test":213,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":365,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":358,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":123,"org.easymock.tests2.UsageConstraintsTest.testSame":239,"org.easymock.samples.SupportTest.addDocument":168,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":449,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":415,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":475,"org.easymock.tests.GenericTest.testPackageScope":307,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":5,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":385,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":295,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":430,"org.easymock.tests2.NameTest.nameForMock":191,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":134,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":463,"org.easymock.tests2.UsageStrictMockTest.differentMethods":211,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":438,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":126,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":74,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":367,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":49,"org.easymock.tests2.MockedExceptionTest.testRealException":187,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":380,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":448,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":394,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":393,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":208,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":421,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":15,"org.easymock.tests2.NameTest.nameForStrictMock":192,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":459,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":280,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":322,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":446,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":253,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":360,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":338,"org.easymock.tests2.UsageStrictMockTest.range":210,"org.easymock.tests2.UsageConstraintsTest.lessThan":260,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":293,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":389,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":479,"org.easymock.tests2.CaptureTest.testCaptureRightOne":180,"org.easymock.tests2.UsageConstraintsTest.testOr":240,"org.easymock.tests.UsageRangeTest.combination":46,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":289,"org.easymock.tests.UsageTest.wrongArguments":145,"org.easymock.tests2.MockBuilderTest.testWithConstructor":457,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":476,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":310,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":127,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":135,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":382,"org.easymock.tests.UsageVarargTest.varargShortAccepted":86,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":361,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":109,"org.easymock.tests2.UsageConstraintsTest.cmpTo":245,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":285,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":384,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":274,"org.easymock.tests2.CaptureTest.testCaptureFromStub":181,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":411,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":339,"org.easymock.tests.UsageTest.unexpectedCallWithArray":144,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":39,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":107,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":136,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":41,"org.easymock.tests2.UsageConstraintsTest.constraints":235,"org.easymock.samples.ExampleTest.addAndChangeDocument":167,"org.easymock.tests.UsageStrictMockTest.testVerify":45,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":159,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":38,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":28,"org.easymock.tests2.CompareToTest.testGreateThan":303,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":176,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":9,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":353,"org.easymock.tests.LimitationsTest.abstractClass":423,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":128,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":117,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":10,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":81,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":220}}]

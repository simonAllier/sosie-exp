[{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1776","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"regex","key":"regex"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1816","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocationAndResults:46","sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ErrorMessage:51","failures":[1,24,14,22,23],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:224","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[25],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:109","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:149","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[26,27,28],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:139","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[26,27,28],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","threadSafe":"threadSafe"}},{"position":"org.easymock.internal.MockBuilder:159","failures":[29,30,31,32,33,34],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:251","sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"mockClass"}},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[35],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,0,1,2,75,76,3,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,11,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,13,14,15,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,16,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,21,22,23,233,234],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"failures":[235,71,72,73,236,74,146,153],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[237],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1928","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"return java.lang.reflect.Field.getType().isAssignableFrom(org.easymock.internal.Injection.getMock().getClass())","type":"CtReturnImpl"},"failures":[238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"this.org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[256,257],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","answer":"answer"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"transplant":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[258,259,260,261,262,263,264],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"argType":"parameterType","paramType":"parameterType"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[30,32,33,33,34,34],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[265,266,267,268,269,40,270,41,271,42,43,272,44,273,274,57,275,59,60,62,63,64,276,65,277,66,67,68,69,110,111,112,113,134,135,136,137,139,140,141,33,33,34,34,143,278,279,280,160,161,281,282,283,194,195,196,228,284,285],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[43,284],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:126","sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Null:35","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"actual","myArgument":"actual"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[36,256,286,287,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,288,57,58,275,59,60,61,62,63,64,65,66,67,68,69,70,235,71,72,73,236,74,289,290,0,291,1,2,292,75,76,3,4,77,293,78,79,80,5,6,81,82,83,84,85,86,87,88,89,90,91,92,294,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,295,296,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,297,298,126,127,128,129,299,130,131,133,134,135,136,137,138,139,140,300,301,141,302,303,142,7,8,9,10,33,33,34,34,254,143,255,304,144,145,146,147,148,305,149,306,278,279,307,308,309,310,311,312,313,150,151,314,315,316,317,318,152,319,153,154,320,11,155,156,157,158,159,160,161,281,282,321,237,322,323,324,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,325,188,189,190,191,192,193,283,194,195,196,326,327,328,329,12,13,330,14,15,331,332,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,333,334,335,217,16,17,218,219,18,19,220,20,221,222,223,224,225,226,336,337,227,228,338,339,340,341,342,343,344,345,346,229,347,348,349,350,351,230,231,232,21,22,23,233,234,352,353,354,355,356,357,358,359,360,361,362,363],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:69","sourceCode":"continue","type":"CtContinueImpl"},"failures":[29,364,263,30,31,264,365,366,136,140,367],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[57,58,275,368],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"failures":[40,41,42,43,44,59,61,62,64,69,72,110,111,112,113,119,134,135,136,137,138,139,140,143,156,194,195,196,228],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.MocksControl:202","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[37,39,41,44,45,46,47,48,50,51,54,55,56,60,63,67,72,74,289,290,0,291,1,2,292,76,77,293,5,6,83,84,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,122,123,124,125,297,298,126,127,128,129,130,131,303,142,143,144,145,146,147,148,149,306,309,311,313,150,155,156,157,158,159,187,325,189,190,191,192,193,326,328,329,13,330,14,15,331,18,19,20,221,225,226,336,337,227,229,231,22,233,234,353,354,355,356,357,359,360,361,362,363],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"control"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,369,370,24,12,13,14,15,16,17,18,19,20,21,22,23],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"buffer","i":"matches"}},{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[69,365,371,33,34],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[1,4,5,6,372,12,14,373,17,18,19,20,374,22,23],"status":-1,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":86,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":217,"org.easymock.tests2.UsageTest.argumentsOrdered":6,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":55,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":346,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":242,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":293,"org.easymock.tests2.StubTest.stubWithReturnValue":142,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":263,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":254,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":206,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":106,"org.easymock.tests2.SerializationTest.testAllMockedMethod":275,"org.easymock.tests2.DelegateToTest.testReturnException":71,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":344,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":321,"org.easymock.tests.MockingTest.testPartialClassMocking":194,"org.easymock.samples.SupportTest.voteForRemovals":144,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":351,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":179,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":368,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":237,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":111,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":167,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":256,"org.easymock.tests.UsageExpectAndThrowTest.object":177,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":369,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":103,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":115,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":258,"org.easymock.tests2.DelegateToTest.testWrongClass":73,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":233,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":234,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":92,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":225,"org.easymock.tests2.UsageTest.wrongArguments":4,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":253,"org.easymock.tests.UsageStrictMockTest.range":14,"org.easymock.samples.ConstructorCalledMockTest.testTax":33,"org.easymock.samples.ExampleTest.answerVsDelegate":146,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":52,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":285,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":134,"org.easymock.tests2.UsageConstraintsTest.testNull":88,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":62,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":178,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":54,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":42,"org.easymock.tests2.CaptureTest.testPrimitive":124,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":227,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":18,"org.easymock.tests.UsageTest.moreThanOneArgument":16,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":186,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":61,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":316,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":335,"org.easymock.tests2.CaptureTest.testCaptureNone":127,"org.easymock.tests.UsageUnorderedTest.message":20,"org.easymock.tests.UsageVerifyTest.twoReturns":23,"org.easymock.tests.UsageVarargTest.varargByteAccepted":361,"org.easymock.tests2.ThreadingTest.testThreadSafe":116,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":338,"org.easymock.tests.UsageTest.argumentsOrdered":19,"org.easymock.tests.UsageVarargTest.varargIntAccepted":355,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":311,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":278,"org.easymock.tests2.CaptureTest.testCapture_2617107":123,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":155,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":268,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":262,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":25,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":337,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":271,"org.easymock.tests2.UsageConstraintsTest.any":93,"org.easymock.tests2.StubTest.stub":303,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":350,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":159,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":345,"org.easymock.tests.UsageExpectAndThrowTest.longType":170,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":26,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":291,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":70,"org.easymock.tests2.SerializationTest.testClass":57,"org.easymock.tests.LimitationsTest.mockNativeMethod":228,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":133,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":282,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":216,"org.easymock.tests2.AnswerTest.answer":36,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":294,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":165,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":267,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":248,"org.easymock.tests2.CaptureTest.testAnd":121,"org.easymock.tests2.UsageTest.strictResetToDefault":76,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":364,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":292,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":277,"org.easymock.tests2.NameTest.nameForMocksControl":10,"org.easymock.tests2.MockedExceptionTest.testMockedException":301,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":249,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":315,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":223,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":49,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":219,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":342,"org.easymock.tests2.DelegateToTest.testDelegate":74,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":196,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":171,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":59,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":43,"org.easymock.tests.MockingTest.testNicePartialClassMocking":195,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":182,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":64,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":246,"org.easymock.tests2.CaptureTest.testCaptureLast":126,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":229,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":327,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":91,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":140,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":104,"org.easymock.tests.MockingTest.testTwoMocks":283,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":326,"org.easymock.tests2.CaptureTest.testCapture1_2446744":125,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":367,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":197,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":180,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":175,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":5,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":108,"org.easymock.tests.UsageThrowableTest.throwError":187,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":251,"org.easymock.tests.UsageStrictMockTest.differentMethods":15,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":240,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":118,"org.easymock.tests2.MockBuilderTest.testCreateMockString":274,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":245,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":318,"org.easymock.tests.UsageExpectAndThrowTest.floatType":169,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":99,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":287,"org.easymock.tests.UsageVerifyTest.twoThrows":22,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":319,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":365,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":112,"org.easymock.samples.PartialClassMockTest.testGetArea":143,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":156,"org.easymock.samples.ExampleTest.voteAgainstRemoval":148,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":334,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":333,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":67,"org.easymock.tests2.UsageTest.niceToStrict":77,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":168,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":366,"org.easymock.tests2.UsageConstraintsTest.testNotNull":107,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":300,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":193,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":371,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":41,"org.easymock.tests2.MockBuilderTest.testCreateMock":272,"org.easymock.tests2.UsageTest.defaultResetToNice":80,"org.easymock.samples.ExampleTest.voteAgainstRemovals":145,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":212,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":164,"org.easymock.tests.UsageVarargTest.differentLength":358,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":247,"org.easymock.tests2.CallbackTest.callback":39,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":252,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":32,"org.easymock.tests.UsageTest.openCallCountByLastCall":218,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":176,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":50,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":83,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":324,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":307,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":336,"org.easymock.tests.UsageCallCountTest.tooFewCalls":309,"org.easymock.tests.UsageOverloadedMethodTest.overloading":231,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":97,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":154,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":230,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":208,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":137,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":27,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":96,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":128,"org.easymock.tests.UsageThrowableTest.throwCheckedException":190,"org.easymock.tests2.EasyMockSupportClassTest.testAll":110,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":281,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":184,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":265,"org.easymock.tests2.CaptureTest.testCaptureAll":122,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":139,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":151,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":250,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":136,"org.easymock.tests2.UsageConstraintsTest.testMatches":98,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":138,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":38,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":317,"org.easymock.samples.ExampleTest.voteForRemovals":149,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":261,"org.easymock.tests2.NameTest.nameForNiceMock":9,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":120,"org.easymock.tests.UsageVarargTest.allKinds":363,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":21,"org.easymock.tests2.DependencyTest.testInterfaceMocking":114,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":260,"org.easymock.samples.BasicClassMockTest.testPrintContent":279,"org.easymock.samples.ExampleTest.addDocument":305,"org.easymock.tests2.DelegateToTest.testStubDelegate":72,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":192,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":289,"org.easymock.tests2.AnswerTest.stubAnswer":37,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":347,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":243,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":236,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":13,"org.easymock.tests2.UsageConstraintsTest.greaterThan":100,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":222,"org.easymock.tests.UsageVarargTest.varargLongAccepted":360,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":68,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":331,"org.easymock.samples.ExampleTest.voteForRemoval":147,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":117,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":215,"org.easymock.tests.UsageExpectAndReturnTest.floatType":199,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":35,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":276,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":69,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":34,"org.easymock.tests.UsageThrowableTest.noUpperLimit":325,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":320,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":101,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":84,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":75,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":160,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":297,"org.easymock.tests2.SerializationTest.test":58,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":28,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":47,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":188,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":198,"org.easymock.tests2.UsageConstraintsTest.testSame":89,"org.easymock.samples.SupportTest.addDocument":304,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":343,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":235,"org.easymock.tests2.CaptureTest.testCaptureFirst":131,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":257,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":48,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":82,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":372,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":204,"org.easymock.tests.GenericTest.testPackageScope":161,"org.easymock.tests2.UsageTest.moreThanOneArgument":3,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":119,"org.easymock.tests2.CaptureTest.testCapture2_2446744":130,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":341,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":44,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":166,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":244,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":362,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":312,"org.easymock.tests2.NameTest.nameForMock":7,"org.easymock.tests.UsageExpectAndReturnTest.longType":200,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":45,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":273,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":209,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":185,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":352,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":105,"org.easymock.tests2.UsageStrictMockTest.differentMethods":2,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":31,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":183,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":349,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":314,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":201,"org.easymock.tests.UsageCallCountTest.tooManyCalls":313,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":181,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":224,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":308,"org.easymock.tests2.MockedExceptionTest.testRealException":302,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":205,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":0,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":172,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":226,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":191,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":135,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":269,"org.easymock.tests2.UsageConstraintsTest.testContains":95,"org.easymock.tests2.NameTest.nameForStrictMock":8,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":141,"org.easymock.tests2.UsageConstraintsTest.testFind":87,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":232,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":295,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":63,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":328,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":296,"org.easymock.tests.UsageExpectAndReturnTest.object":207,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":370,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":102,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":65,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":40,"org.easymock.tests2.UsageStrictMockTest.range":1,"org.easymock.tests2.UsageConstraintsTest.lessThan":109,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":53,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":357,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":259,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":241,"org.easymock.tests.UsageTest.exactCallCountByLastCall":220,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":150,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":46,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":163,"org.easymock.tests2.CaptureTest.testCaptureRightOne":129,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":339,"org.easymock.tests2.UsageConstraintsTest.testOr":90,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":264,"org.easymock.tests.UsageRangeTest.combination":221,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":353,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":213,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":60,"org.easymock.tests.UsageTest.wrongArguments":17,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":153,"org.easymock.tests2.MockBuilderTest.testWithConstructor":29,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":239,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":280,"org.easymock.tests2.EasyMockSupportTest.testVerify":288,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":202,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":162,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":340,"org.easymock.tests.UsageVarargTest.varargShortAccepted":359,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":323,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":152,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":132,"org.easymock.tests2.UsageConstraintsTest.cmpTo":94,"org.easymock.tests.UsageVarargTest.varargCharAccepted":356,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":286,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":290,"org.easymock.tests2.UsageTest.openCallCountByLastCall":78,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":79,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":56,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":322,"org.easymock.tests2.CaptureTest.testCaptureFromStub":299,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":270,"org.easymock.tests.UsageTest.unexpectedCallWithArray":373,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":374,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":174,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":12,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":189,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":310,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":30,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":238,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":211,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":330,"org.easymock.tests2.UsageConstraintsTest.constraints":85,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":66,"org.easymock.samples.ExampleTest.addAndChangeDocument":306,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":173,"org.easymock.tests.UsageStrictMockTest.testVerify":332,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":214,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":348,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":255,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":329,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":113,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":298,"org.easymock.tests2.UsageTest.resumeIfFailure":81,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":266,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":157,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":284,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":203,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":11,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":158,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":354,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":51,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":24}}]

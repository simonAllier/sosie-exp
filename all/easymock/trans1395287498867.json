[{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:209","sourceCode":"if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:123","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:623","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,129,130,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:62","failures":[0,1,2,3,4,253,254,5,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,6,284,7,285,8,9,10,11,12,13,286,287,288,289,290,291,292,293,294,295,296,297,298,299,14,300,301,302,303,15,304,16,17,305,306,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,307,46,308,309,47,310,48,49,311,312,50,51,313,314,52,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,53,331,332,333,334,335,54,336,55,56,57,58,59,60,61,62,63,337,338,339,340,341,64,342,65,66,343,67,344,345,346,347,348,349,350,351,352,353,354,355,356,68,69,70,357,358,359,360,361,362,71,363,364,365,72,73,366,74,367,368,369,75,76,77,78,79,80,81,82,83,84,85,370,371,372,373,374,375,376,377,86,87,378,379,380,381,382,383,384,385,386,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,387,388,389,390,391,392,393,394,395,396,397,118,119,120,121,122,123,124,125,126,398,127,399,128,129,130,131,400,401,402,403,404,132,405,406,407,408,409,133,410,411,412,413,414,415,416,417,134,135,418,419,136,420,137,138,421,139,140,422,423,424,425,426,427,141,142,143,144,428,145,146,147,429,148,149,150,430,151,431,152,153,154,432,433,155,156,157,158,159,160,161,434,162,163,164,165,166,435,436,437,438,439,440,441,167,442,443,168,444,169,170,445,446,447,171,448,449,450,451,172,452,453,173,454,455,456,457,458,459,460,461,462,174,463,464,465,466,467,175,468,469,176,177,178,179,180,181,470,471,182,472,473,474,183,184,185,475,476,186,187,188,189,190,191,192,477,193,478,479,480,481,482,194,195,196,197,198,199,200,201,483,202,203,484,485,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,486,487,488,489,490,491,492,223,493,494,495,496,497,498,499,500,501,502,224,225,226,227,503,228,229,230,231,232,233,504,234,235,236,237,238,239,240,241,242,243,244,245,505,246,247,248,249,250,251,506,252],"status":-1,"binaryOperator":"java.io.InputStream != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[507],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[431,180,240],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[0,1,2,3,4,253,254,5,255,256,257,258,259,260,283,6,284,7,285,508,8,9,10,11,12,13,286,287,288,289,290,291,292,293,294,295,296,297,298,299,14,300,301,302,303,15,304,16,17,305,306,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,307,46,308,309,47,310,48,49,311,312,50,51,313,314,52,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,53,331,332,333,334,335,54,336,55,56,57,58,59,60,61,62,63,337,338,339,340,341,64,342,65,66,343,67,344,345,346,347,348,349,350,351,352,353,354,355,356,68,69,70,357,358,359,360,361,362,71,363,364,365,72,73,366,74,367,368,369,75,76,77,78,79,80,81,82,83,84,85,370,371,372,373,374,375,376,377,86,87,378,379,380,381,382,383,384,385,386,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,387,388,389,390,509,391,392,393,394,395,396,510,397,118,119,120,121,122,123,124,125,126,398,127,399,128,129,130,131,400,401,402,403,404,132,405,406,407,408,409,133,410,411,412,413,414,415,416,417,134,135,418,419,136,420,137,138,421,139,140,422,423,424,511,425,426,427,141,142,143,144,428,145,146,147,429,148,149,150,430,151,431,152,153,154,432,433,155,156,157,158,159,160,161,162,163,164,165,166,435,512,436,437,438,439,440,441,513,167,442,507,443,168,444,169,514,170,445,446,447,171,515,448,449,450,451,172,452,453,173,454,455,456,457,458,459,460,461,462,174,463,464,465,466,467,175,468,469,176,177,178,179,180,181,470,471,182,472,473,474,183,184,185,475,476,186,187,188,189,190,191,192,477,193,194,195,196,197,198,199,200,201,483,202,203,484,485,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,486,487,488,489,490,491,492,223,493,494,495,496,497,498,499,500,501,502,224,225,226,227,503,228,229,230,231,232,233,504,234,235,236,237,238,239,240,241,242,243,244,245,505,246,247,248,249,250,251,506,252],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Same:41","sourceCode":"java.lang.StringBuffer.append(\"same(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[13,15,16,17,307,46,516,517,518,49,342,343,67,344,115,116,117,136,137,138,150,519,520,521,522,523,524],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.Capture:60","sourceCode":"this.java.util.List<T>.clear()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[525,526,201,209,210],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Or:39","sourceCode":"if (org.easymock.IArgumentMatcher.matches(java.lang.Object)) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[227],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[303,527,516,311,520,528],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[200,483,207,226,227,229,231,232,504,243,247],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"failures":[308],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:68","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[2,55],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","type":"CtInvocationImpl"},"failures":[525,200,201,483,202,203,484,485,204,205,206,207,208,209,210],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[529,530,531],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:124","sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","type":"CtIfImpl"},"failures":[0,1,5,255,256,257,258,259,260,6,284,8,9,10,11,12,13,14,301,302,303,15,304,16,17,305,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,311,312,50,51,313,314,52,58,525,525,59,60,61,62,63,337,338,339,340,341,64,65,66,344,345,346,347,349,350,351,352,353,354,355,356,72,73,74,75,76,77,78,79,80,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,114,115,116,117,387,388,389,390,118,119,120,121,122,123,124,125,126,398,127,128,129,130,131,400,401,402,403,404,132,133,134,135,418,419,136,420,137,138,421,139,140,141,142,143,144,145,146,147,148,149,150,430,151,431,152,153,154,432,433,155,156,157,158,159,160,161,162,163,164,165,166,441,167,168,444,169,170,447,171,448,172,173,174,175,176,177,178,179,180,181,470,182,474,183,184,185,186,189,190,191,192,193,195,196,197,199,200,201,483,202,203,484,485,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,486,223,499,500,501,502,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,505,246,247,248,249,250,251,506,252],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[532],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"position":"org.easymock.internal.Range:83","failures":[9,12,13,303,15,304,16,17,20,48,49,312,50,51,313,314,52,356,79,90,115,116,117,136,420,137,138,140,148,150,430,152,153,432,433,156,437,438,439,440,186,190,196,201,483,203,484,485,204,205,210,229,234,240,247,252],"status":-1,"binaryOperator":"(int) == (java.lang.Integer.int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[0,1,5,256,257,6,284,8,9,10,11,12,13,14,301,302,303,15,304,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,311,312,50,51,313,314,52,58,59,60,61,62,63,337,338,339,340,341,345,346,347,349,350,352,353,354,355,356,72,73,74,75,76,77,78,79,80,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,114,115,116,117,387,388,389,390,118,119,120,121,122,123,124,125,126,398,127,128,129,130,131,400,401,402,403,404,132,133,134,135,418,419,136,420,137,138,140,141,142,143,144,145,146,147,148,149,150,430,151,431,152,153,154,432,433,156,157,158,159,160],"status":-2,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"this.java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"failures":[0,1,5,255,256,257,258,259,260,6,284,8,9,10,11,12,13,14,301,302,303,15,304,16,17,305,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,311,312,50,51,313,314,52,58,59,60,61,62,63,337,338,339,340,341,64,65,66,344,345,346,347,349,350,351,352,353,354,355,356,72,73,74,75,76,77,78,79,80,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,114,115,116,117,387,388,389,390,118,119,120,121,122,123,124,125,126,398,127,128,129,130,131,400,401,402,403,404,132,133,134,135,418,419,136,420,137,138,421,139,140,141,142,143,144,145,146,147,148,149,150,430,151,431,152,153,154,432,433,155,156,157,158,159,160,161,162,164,165,166,441,167,168,444,169,170,447,171,448,172,173,174,175,176,177,178,179,180,181,470,182,474,183,184,185,186,189,190,191,192,193,195,196,197,199,200,201,483,202,203,484,485,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,486,223,499,500,501,502,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,505,246,247,248,249,250,251,506,252],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"lock":"lock"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"failures":[11,139],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[533,250,251,506],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[8,14,15,16,17,26,27,28,29,30,31,34,35,37,38,39,41,42,43,44,45,59,60,61,62,63,72,73,74,86,87,111,112,113,114,118,119,120,121,123,125,126,127,131,132,134,135,136,137,138,141,142,143,144,145,146,147,164,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,196],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.RecordState.primitiveToWrapperType":"org.easymock.internal.RecordState.primitiveToWrapperType","returnedType":"returnedType"}},{"position":"org.easymock.EasyMock:1940","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:126","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[199],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:305","failures":[0,1,6,8,9,12,13,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,307,46,48,49,50,51,52,53,59,60,61,62,63,337,64,65,66,67,72,73,74,79,86,87,379,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,123,124,125,126,127,131,132,133,134,135,136,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,190,191,195,196,197,199,200,201,483,202,203,204,205,206,207,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,505,246,247,248,249,250,251,252],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>).append(\")\")","type":"CtInvocationImpl"},"failures":[525],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:623","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:124","sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:126","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","type":"CtInvocationImpl"},"failures":[0,1,5,255,256,257,258,259,260,6,284,8,9,10,11,12,13,14,301,302,303,15,304,16,17,305,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,311,312,50,51,313,314,52,58,525,525,59,60,61,62,63,337,338,339,340,341,64,65,66,344,345,346,347,349,350,351,352,353,354,355,356,72,73,74,75,76,77,78,79,80,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,114,115,116,117,387,388,389,390,118,119,120,121,122,123,124,125,126,398,127,128,129,130,131,400,401,402,403,404,132,133,134,135,418,419,136,420,137,138,421,139,140,141,142,143,144,145,146,147,148,149,150,430,151,431,152,153,154,432,433,155,156,157,158,159,160,161,162,163,164,165,166,441,167,168,444,169,170,447,171,448,172,173,174,175,176,177,178,179,180,181,470,182,474,183,184,185,186,189,190,191,192,193,195,196,197,199,200,201,483,202,203,484,485,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,486,223,499,500,501,502,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,505,246,247,248,249,250,251,506,252],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"failures":[13,303,15,16,17,307,46,49,311,312,313,314,358,361,373,377,378,115,116,117,133,136,137,138,426,150,430,432,433,223],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"proxy":"proxy"}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[533,250,251,506],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Injector:122","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:35","sourceCode":"final java.lang.Object java.lang.Object = org.easymock.internal.matchers.Equals.getExpected()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:181","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"failures":[534,224,241,244],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":227,"org.easymock.tests2.UsageTest.argumentsOrdered":433,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":48,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":221,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":410,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":325,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":431,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":400,"org.easymock.tests2.DelegateToTest.testReturnException":195,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":76,"org.easymock.tests.MockingTest.testPartialClassMocking":72,"org.easymock.tests.MockClassControlTest.testToString":381,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":436,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":47,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":476,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":333,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":457,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":173,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":91,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":135,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":282,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":233,"org.easymock.tests2.UsageTest.wrongArguments":430,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":8,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":498,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":389,"org.easymock.samples.ExampleTest.answerVsDelegate":124,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":375,"org.easymock.tests2.UsageConstraintsTest.testNull":229,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":368,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":179,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":386,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":220,"org.easymock.tests2.CaptureTest.testPrimitive":202,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":12,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":110,"org.easymock.tests.UsageTest.moreThanOneArgument":49,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":178,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":120,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":81,"org.easymock.tests.UsageTest.argumentsOrdered":314,"org.easymock.tests.UsageVarargTest.varargIntAccepted":347,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":524,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":330,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":59,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":441,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":424,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":414,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":444,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":317,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":63,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":266,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":223,"org.easymock.tests.ReplayStateInvalidUsageTest.times":294,"org.easymock.tests2.DependencyTest.testClassMocking":416,"org.easymock.tests2.AnswerTest.answer":186,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":504,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":331,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":502,"org.easymock.tests2.CaptureTest.testAnd":200,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":372,"org.easymock.tests2.UsageTest.strictResetToDefault":149,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":507,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":474,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":119,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":113,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":215,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":85,"org.easymock.tests2.DelegateToTest.testDelegate":199,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":265,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":106,"org.easymock.tests.LimitationsTest.mockFinalMethod":300,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":79,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":341,"org.easymock.tests2.DependencyTest.testClassMockingSupport":417,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":307,"org.easymock.tests2.CaptureTest.testCapture1_2446744":203,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":471,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":104,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":500,"org.easymock.tests.UsageThrowableTest.throwError":18,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":288,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":374,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":508,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":415,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":469,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":269,"org.easymock.samples.PartialClassMockTest.testGetArea":131,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":289,"org.easymock.tests.MockingTest.testInterfaceMocking":366,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":60,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":69,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":458,"org.easymock.tests2.UsageTest.niceToStrict":151,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":92,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":362,"org.easymock.tests2.ThreadingTest.testChangeDefault":434,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":531,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":315,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":168,"org.easymock.tests2.MockBuilderTest.testCreateMock":447,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":465,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":495,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":520,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":100,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":216,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":371,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":4,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":253,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":387,"org.easymock.tests.UsageOverloadedMethodTest.overloading":89,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":467,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":462,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":66,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":238,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":37,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":88,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":532,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":237,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":206,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":348,"org.easymock.tests.MockClassControlTest.testEquals":385,"org.easymock.tests2.EasyMockSupportClassTest.testAll":172,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":284,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":108,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":501,"org.easymock.tests2.CaptureTest.testCaptureAll":201,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":339,"org.easymock.tests.MockNameTest.defaultName":378,"org.easymock.tests2.UsageConstraintsTest.testMatches":239,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":121,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":286,"org.easymock.samples.ExampleTest.voteForRemovals":127,"org.easymock.tests.UsageVarargTest.allKinds":356,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":115,"org.easymock.samples.BasicClassMockTest.testPrintContent":403,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":340,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":24,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":418,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":411,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":80,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":198,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":510,"org.easymock.tests2.UsageConstraintsTest.greaterThan":241,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":452,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":112,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":185,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":270,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":397,"org.easymock.samples.ExampleTest.voteForRemoval":125,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":475,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":162,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":376,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":511,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":470,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":262,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":148,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":58,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":446,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":322,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":213,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":450,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":75,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":194,"org.easymock.tests2.CaptureTest.testCaptureFirst":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":321,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":214,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":156,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":344,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":33,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":164,"org.easymock.tests2.UsageTest.moreThanOneArgument":150,"org.easymock.tests2.CaptureTest.testCapture2_2446744":209,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":171,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":332,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":355,"org.easymock.tests.GenericTest.testBridgedEquals":285,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":259,"org.easymock.tests.UsageExpectAndReturnTest.longType":29,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":211,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":337,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":109,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":505,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":71,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":107,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":118,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":56,"org.easymock.tests.UsageCallCountTest.tooManyCalls":260,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":466,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":34,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":497,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":96,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":23,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":142,"org.easymock.tests.MockingTest.testNiceClassMocking":369,"org.easymock.tests.MockingTest.testClassMocking":364,"org.easymock.tests2.UsageConstraintsTest.testContains":236,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":254,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":159,"org.easymock.tests2.UsageConstraintsTest.testFind":228,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":90,"org.easymock.tests.MockTypeTest.fromEasyMockClass":373,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":193,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":301,"org.easymock.tests.UsageExpectAndReturnTest.object":36,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":182,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":496,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":219,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":350,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":360,"org.easymock.tests.UsageTest.exactCallCountByLastCall":52,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":0,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":320,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":82,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":309,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":435,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":42,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":345,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":65,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":406,"org.easymock.tests.MockClassControlTest.testHashCode":384,"org.easymock.tests2.EasyMockSupportTest.testVerify":486,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":460,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":83,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":3,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":64,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":499,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":487,"org.easymock.tests.UsageVarargTest.varargCharAccepted":349,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":509,"org.easymock.tests2.CaptureTest.testCaptureMultiple":526,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":419,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":336,"org.easymock.tests2.UsageTest.openCallCountByLastCall":152,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":529,"org.easymock.tests.DefaultClassInstantiatorTest.object":391,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":222,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":2,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":358,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":518,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":461,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":98,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":21,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":491,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":405,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":183,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":268,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":383,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":97,"org.easymock.tests.CapturesMatcherTest.test":525,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":43,"org.easymock.tests.ReplayStateInvalidCallsTest.times":274,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":55,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":275,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":522,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":175,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":382,"org.easymock.tests2.UsageTest.resumeIfFailure":155,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":370,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":423,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":78,"org.easymock.tests2.StubTest.stubWithReturnValue":140,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":514,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":35,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":246,"org.easymock.tests2.SerializationTest.testAllMockedMethod":506,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":53,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":528,"org.easymock.samples.SupportTest.voteForRemovals":132,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":283,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":408,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":103,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":533,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":54,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":187,"org.easymock.tests.UsageExpectAndThrowTest.object":101,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":310,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":244,"org.easymock.tests2.DelegateToTest.testWrongClass":197,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":86,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":272,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":87,"org.easymock.samples.ConstructorCalledMockTest.testTax":129,"org.easymock.tests.UsageStrictMockTest.range":16,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":426,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":218,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":141,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":102,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":449,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":296,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":313,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":388,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":527,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":264,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":70,"org.easymock.tests2.CaptureTest.testCaptureNone":205,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":479,"org.easymock.tests.UsageUnorderedTest.message":13,"org.easymock.tests.UsageVerifyTest.twoReturns":117,"org.easymock.tests.UsageVarargTest.varargByteAccepted":354,"org.easymock.tests2.ThreadingTest.testThreadSafe":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":463,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":257,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":402,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":361,"org.easymock.tests2.CaptureTest.testCapture_2617107":483,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":308,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":11,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":334,"org.easymock.tests2.UsageConstraintsTest.any":234,"org.easymock.tests2.StubTest.stub":139,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":293,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":57,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":77,"org.easymock.tests.UsageExpectAndThrowTest.longType":94,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":335,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":395,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":292,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":420,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":133,"org.easymock.tests2.SerializationTest.testClass":250,"org.easymock.tests.LimitationsTest.mockNativeMethod":14,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":45,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":7,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":490,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":280,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":421,"org.easymock.tests2.NameTest.nameForMocksControl":440,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":492,"org.easymock.tests2.MockedExceptionTest.testMockedException":158,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":453,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":51,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":477,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":74,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":95,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":176,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":170,"org.easymock.tests.MockingTest.testNicePartialClassMocking":73,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":181,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":488,"org.easymock.tests2.CaptureTest.testCaptureLast":204,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":46,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":147,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":232,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":279,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":245,"org.easymock.tests.MockingTest.testTwoMocks":365,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":276,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":429,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":26,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":99,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":432,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":248,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":482,"org.easymock.samples.ExampleTest.removeNonExistingDocument":399,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":494,"org.easymock.tests.UsageStrictMockTest.differentMethods":17,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":290,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":407,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":481,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":393,"org.easymock.tests2.ConstraintsToStringTest.andToString":523,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":163,"org.easymock.tests2.MockBuilderTest.testCreateMockString":448,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":379,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":454,"org.easymock.tests.UsageExpectAndThrowTest.floatType":93,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":451,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":189,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":512,"org.easymock.tests.UsageVerifyTest.twoThrows":116,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":174,"org.easymock.samples.ExampleTest.voteAgainstRemoval":126,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":68,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":326,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":184,"org.easymock.tests.LimitationsTest.privateConstructor":299,"org.easymock.tests2.UsageConstraintsTest.testNotNull":247,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":157,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":25,"org.easymock.tests2.UsageTest.defaultResetToNice":154,"org.easymock.samples.ExampleTest.voteAgainstRemovals":123,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":41,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":327,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":489,"org.easymock.tests.UsageVarargTest.differentLength":351,"org.easymock.tests2.CallbackTest.callback":252,"org.easymock.tests2.UsageConstraintsTest.equals":503,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":472,"org.easymock.tests.UsageTest.openCallCountByLastCall":50,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":224,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":10,"org.easymock.tests.UsageCallCountTest.tooFewCalls":255,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":144,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":390,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":480,"org.easymock.tests.UsageThrowableTest.throwCheckedException":22,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":516,"org.easymock.tests.MockingTest.testStrictClassMocking":363,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":146,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":1,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":493,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":143,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":295,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":145,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":191,"org.easymock.tests.ObjectMethodsTest.testHashCode":359,"org.easymock.tests2.NameTest.nameForNiceMock":439,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":165,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":278,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":273,"org.easymock.tests2.DependencyTest.testInterfaceMocking":134,"org.easymock.samples.ExampleTest.addDocument":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":464,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":468,"org.easymock.tests2.DelegateToTest.testStubDelegate":196,"org.easymock.tests2.AnswerTest.stubAnswer":190,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":15,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":445,"org.easymock.tests.UsageVarargTest.varargLongAccepted":353,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":305,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":324,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":44,"org.easymock.tests.UsageExpectAndReturnTest.floatType":28,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":166,"org.easymock.tests2.ConstraintsToStringTest.orToString":519,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":130,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":413,"org.easymock.tests.UsageThrowableTest.noUpperLimit":19,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":242,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":343,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":225,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":422,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":484,"org.easymock.tests2.SerializationTest.test":251,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":392,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":27,"org.easymock.tests2.UsageConstraintsTest.testSame":230,"org.easymock.samples.SupportTest.addDocument":404,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":428,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":263,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":291,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":455,"org.easymock.tests.GenericTest.testPackageScope":6,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":319,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":412,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":367,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":261,"org.easymock.tests2.NameTest.nameForMock":437,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":38,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":515,"org.easymock.tests2.UsageStrictMockTest.differentMethods":138,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":473,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":30,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":105,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":357,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":114,"org.easymock.tests2.MockedExceptionTest.testRealException":160,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":377,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":329,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":517,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":136,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":328,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":9,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":297,"org.easymock.tests2.NameTest.nameForStrictMock":438,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":443,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":530,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":192,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":180,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":425,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":394,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":243,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":167,"org.easymock.tests2.UsageStrictMockTest.range":137,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":267,"org.easymock.tests2.UsageConstraintsTest.lessThan":249,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":409,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":212,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":323,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":459,"org.easymock.tests2.CaptureTest.testCaptureRightOne":207,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":478,"org.easymock.tests2.UsageConstraintsTest.testOr":231,"org.easymock.tests.UsageRangeTest.combination":111,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":177,"org.easymock.tests.UsageTest.wrongArguments":312,"org.easymock.tests2.MockBuilderTest.testWithConstructor":513,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":456,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":380,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":31,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":39,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":316,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":396,"org.easymock.tests.UsageVarargTest.varargShortAccepted":352,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":258,"org.easymock.tests2.UsageConstraintsTest.cmpTo":235,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":281,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":188,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":271,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":318,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":153,"org.easymock.tests2.CaptureTest.testCaptureFromStub":208,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":287,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":442,"org.easymock.tests.UsageTest.unexpectedCallWithArray":311,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":277,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":303,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":256,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":40,"org.easymock.tests2.UsageConstraintsTest.constraints":226,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":304,"org.easymock.samples.ExampleTest.addAndChangeDocument":128,"org.easymock.tests2.ConstraintsToStringTest.notToString":521,"org.easymock.tests.UsageStrictMockTest.testVerify":306,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":401,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":302,"org.easymock.tests2.CompareToTest.testGreateThan":534,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":338,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":485,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":61,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":32,"org.easymock.tests.LimitationsTest.abstractClass":298,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":62,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":67,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":217,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":346}}]

[{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:37","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(int.int, java.lang.Integer.java.lang.Integer)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[9,10],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"failures":[12,0,40,41,42,43,7,44,45,46,47,8,48,49,50],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.EasyMock:852","sourceCode":"org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Integer>(int))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:113","sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"failures":[51,52],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"i","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[53,54,55],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[56],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[13,16,21,23,55,24,57,58,59],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:120","sourceCode":"return ((java.lang.String)(java.util.Properties.remove(java.lang.String)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:122","sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","type":"CtReturnImpl"},"failures":[60,61,62],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1235","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1862","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Same(T))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,11,89,12,40,90,91,92,13,14,15,16,17,18,19,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,53,108,109,110,111,112,113,114,20,115,116,117,56,118,119,120,121,122,123,124,125,126,127,128,129,54,130,131,132,133,134,135,136,137,138,21,139,22,23,55,24,57,140,141,142,143,144,25,26,27,28,145,29,146,147,148,149,30,31,32,33,150,151,152,153,154,155,156,157,158,34,159,160,161,162,163,164,165,166,167,168,169,170,171,35,172,36,37,38,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,39,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1470","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","type":"CtInvocationImpl"},"failures":[56,122,132],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1878","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:85","sourceCode":"return java.util.List<T>.get(0)","type":"CtReturnImpl"},"failures":[93,95,96,97,230,231,98,100,232,101,233,103],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[234,235,236,237,238,239,63,64,65,240,241,242,66,243,244,245,67,68,69,70,71,246,247,248,249,250,72,251,252,253,254,255,256,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,11,89,12,0,257,258,259,260,261,40,90,91,262,92,13,14,15,16,263,17,18,19,264,265,266,267,268,269,270,271,93,94,95,96,97,230,231,98,99,100,101,233,102,103,104,105,106,272,107,53,108,109,110,111,273,112,113,114,274,20,275,276,277,278,115,116,117,56,279,118,119,120,121,122,123,280,124,125,126,127,128,129,54,130,131,132,133,134,281,135,136,137,138,282,283,284,285,286,21,139,22,23,55,24,287,62,57,41,288,140,141,142,143,289,290,144,42,25,291,43,292,26,293,27,7,28,294,44,145,29,46,146,295,296,297,298,299,147,300,301,302,303,304,305,148,306,149,307,308,309,310,30,311,312,31,313,314,315,316,317,318,319,320,321,32,322,323,324,325,326,33,327,328,329,330,331,150,151,152,153,154,155,156,332,49,50,333,157,158,34,334,159,335,336,337,338,339,51,340,341,342,343,344,345,346,52,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,160,161,371,58,162,372,373,374,375,376,377,59,378,379,380,163,164,165,166,167,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,168,169,418,419,170,171,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,35,446,447,448,449,450,172,36,37,451,38,452,453,454,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,455,456,457,458,459,460,461,462,203,39,204,205,206,207,463,464,465,466,467,468,469,470,471,472,473,208,209,210,211,212,213,214,215,216,217,218,219,220,221,474,222,223,475,476,224,225,477,478,479,480,481,482,483,484,485,486,487,488,489,490,226,227,491,492,493,494,495,228,229,496,497,498,499,500,501,502],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"failures":[171],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:108","failures":[92,104,109,419,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,173,175,176,177,178,179,180,213,218,219,223,494,501],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:126","failures":[274,275,277,151,493],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:193","sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:52","sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[234,235,236,237,63,64,65,240,241,242,66,243,244,245,67,68,69,70,71,246,247,248,249,250,72,251,252,253,254,255,256,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,11,89,12,0,258,259,260,261,40,90,91,262,92,13,14,15,16,17,18,19,265,269,270,271,93,94,95,96,97,230,231,98,99,100,101,233,102,103,104,105,106,272,107,53,108,109,110,111,273,112,113,114,274,20,275,276,277,278,115,116,117,56,279,118,119,120,121,122,123,280,124,125,126,127,128,129,54,130,131,132,133,134,281,135,136,137,138,283,284,285,286,21,139,22,23,55,24,287,57,41,288,140,141,142,143,289,290,144,25,291,292,26,293,27,28,44,145,29,146,295,296,297,298,299,147,300,301,302,303,304,305,148,306,149,307,308,309,310,30,311,312,31,313,314,315,316,317,318,319,320,321,32,322,323,324,325,326,33,327,328,329,330,331,150,151,152,153,154,155,156,332,49,49,50,50,333,157,158,34,334,159,335,336,337,338,51,340,341,342,343,344,346,52,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,160,161,371,58,162,372,373,374,375,376,377,59,378,379,380,163,164,165,166,167,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,168,169,418,419,170,171,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,35,446,448,449,450,172,36,37,451,38,452,453,454,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,455,456,457,458,459,460,461,462,203,39,204,205,206,207,463,464,465,466,467,468,469,470,471,472,473,208,209,210,211,212,213,214,215,216,217,218,219,220,221,474,222,223,475,476,224,225,477,478,479,480,481,482,483,486,487,488,489,490,226,227,491,492,493,494,495,228,229,496,497,498,499,500,501,502],"status":-1,"binaryOperator":"(java.lang.String != null) && (!org.easymock.internal.Invocation.(org.easymock.internal.Invocation.isJavaIdentifier(java.lang.String)))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"type"}},{"position":"org.easymock.internal.ReflectionUtils:152","failures":[],"status":0,"binaryOperator":"(\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[410],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:94","failures":[93,94,95,96,101,233,117,56,118,119,120,121,122,123,280,124,132,133,136,137],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:180","sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"failures":[136],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"o":"actual"}},{"transplant":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[234,235,236,237,238,239,63,64,65,240,241,242,66,243,244,245,67,68,69,70,71,246,247,248,249,250,72,251,252,253,254,255,256,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,11,89,12,0,257,258,259,260,261,40,90,91,262,92,13,14,15,16,17,18,19,265,269,270,271,93,94,95,96,97,230,231,98,99,100,101,233,102,103,104,105,106,272,107,53,108,109,110,111,273,112,113,114,274,20,275,276,277,278,115,116,117,56,279,118,119,120,121,122,123,280,124,125,126,127,128,129,54,130,131,132,133,134,281,135,136,137,138,282,283,284,285,286,21,139,22,23,55,24,287,62,57,41,288,140,141,142,143,289,290,144,42,25,291,43,292,26,293,27,7,28,44,145,29,46,146,295,296,297,298,299,147,300,301,302,303,304,305,148,306,149,307,308,309,310,30,311,312,31,313,314,315,316,317,318,319,320,321,32,322,323,324,325,326,33,327,328,329,330,331,150,151,152,153,154,155,156,332,49,49,50,50,333,157,158,34,334,159,335,336,337,338,339,51,340,341,342,343,344,345,346,52,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,160,161,371,58,162,372,373,374,375,376,377,59,378,379,380,163,164,165,166,167,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,168,169,418,419,170,171,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,35,446,448,449,450,172,36,37,451,38,452,453,454,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,455,456,457,458,459,460,461,462,203,39,204,205,206,207,463,464,465,466,467,468,469,470,471,472,473,208,209,210,211,212,213,214,215,216,217,218,219,220,221,474,222,223,475,476,224,225,477,478,479,480,481,482,483,486,487,488,489,490,226,227,491,492,493,494,495,228,229,496,497,498,499,500,501,502],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:177","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:142","sourceCode":"return true","type":"CtReturnImpl"},"failures":[58],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[63,64,65,240,241,242,66,243,244,245,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,11,89,12,258,259,261,40,90,91,262,92,13,14,15,16,17,18,19,93,94,95,96,97,230,231,98,99,100,101,233,102,103,104,105,106,272,107,53,108,109,110,111,273,112,113,114,274,20,275,276,277,115,116,117,56,118,119,120,121,122,123,280,124,125,126,127,128,129,54,130,131,132,133,134,281,135,136,137,138,283,284,285,286,21,139,22,23,55,24,287,57,140,141,142,143,25,26,27,28,29,147,148,306,149,307,30,31,32,33,329,330,331,150,151,152,153,154,155,332,49,49,50,50,333,157,158,34,52,347,359,360,361,362,363,364,365,366,367,368,369,160,161,371,378,379,380,163,164,165,166,167,381,382,383,384,385,387,388,389,390,392,393,410,416,168,169,418,419,170,171,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,35,172,36,37,38,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,456,203,39,204,205,206,207,463,464,466,467,468,469,470,471,472,473,208,209,210,211,212,213,214,215,216,217,218,219,220,221,474,222,223,475,476,224,480,481,226,227,491,492,493,494,495,228,496,497,498,499,500,501,502],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[503,504,380,505,506,221],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:210","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[241],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[370,160,161,371,58],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[40,90,91],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:39","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:109","sourceCode":"org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field)","type":"CtInvocationImpl"},"failures":[246,247,248,250,251,252,253,256,295,296,297,299,300,301,302,305,329,158],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[507,508,509],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.internal.MockBuilder:205","failures":[12,0,257,40,287,41,141,142,290,144,42,25,291,43,292,26,293,27,7,28,294,44,145,29,46,146,148,31,32,33,49,50,34,370,371,483,488],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"failures":[510],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:185","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:195","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"parameterTypes":"candidateParameters","i":"i"}},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[234,235,236,237,63,64,65,242,66,243,244,245,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,11,89,12,258,259,261,40,90,91,262,92,13,14,15,16,17,18,19,93,94,95,96,97,230,231,98,99,100,101,233,102,103,104,105,106,272,107,53,108,109,110,111,273,112,113,274,20,275,277,115,116,117,56,118,119,120,121,122,123,124,125,126,127,128,129,54,130,131,132,133,134,281,135,136,137,138,21,139,22,23,55,24,287,57,140,141,142,143,144,25,26,293,27,28,145,29,146,147,148,306,149,307,30,31,32,33,329,330,331,150,151,152,153,154,155,332,49,50,333,157,158,34,52,362,363,364,365,366,160,161,378,379,380,163,164,165,166,167,387,388,389,390,391,392,393,168,169,418,419,170,511,511,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,35,36,37,38,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,458,459,460,461,462,203,39,204,205,206,207,463,464,466,467,468,469,470,471,472,473,208,210,211,212,213,214,216,217,218,219,220,221,474,222,223,475,476,224,225,477,478,479,226,227,491,493,494,229,496,497,498,499,500,501,502],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.internal.RecordState:136","failures":[67,233,115,116,118,119,120,121,126,128,129,130,131,136,137,138,49,49,50,50,362,363,364,365,366,163,168,169,170,201,203,39,204,205,206,226,227],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:352","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[97,102,52,412,421,425,431,437,441,443,182,188,194,198,200,219],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":56,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":219,"org.easymock.tests2.UsageTest.argumentsOrdered":273,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":83,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":300,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":404,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":53,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":158,"org.easymock.tests2.DelegateToTest.testReturnException":274,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":498,"org.easymock.tests.MockingTest.testPartialClassMocking":36,"org.easymock.tests.MockClassControlTest.testToString":373,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":282,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":456,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":413,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":290,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":316,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":424,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":31,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":64,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":1,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":123,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":168,"org.easymock.tests2.UsageTest.wrongArguments":272,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":256,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":478,"org.easymock.samples.ExampleTest.answerVsDelegate":151,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":488,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":453,"org.easymock.tests2.UsageConstraintsTest.testNull":119,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":23,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":59,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":82,"org.easymock.tests2.CaptureTest.testPrimitive":96,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":170,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":443,"org.easymock.tests.UsageTest.moreThanOneArgument":220,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":22,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":364,"org.easymock.tests.UsageTest.argumentsOrdered":476,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":171,"org.easymock.tests.UsageVarargTest.varargIntAccepted":464,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":409,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":203,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":144,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":5,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":267,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":304,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":293,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":396,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":206,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":508,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":72,"org.easymock.tests.ReplayStateInvalidUsageTest.times":355,"org.easymock.tests2.DependencyTest.testClassMocking":238,"org.easymock.tests2.AnswerTest.answer":65,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":411,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":237,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":485,"org.easymock.tests2.CaptureTest.testAnd":93,"org.easymock.tests2.UsageTest.strictResetToDefault":105,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":140,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":43,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":363,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":77,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":210,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":423,"org.easymock.tests2.DelegateToTest.testDelegate":277,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":439,"org.easymock.tests.LimitationsTest.mockFinalMethod":446,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":501,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":462,"org.easymock.tests2.DependencyTest.testClassMockingSupport":239,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":480,"org.easymock.tests2.CaptureTest.testCapture1_2446744":97,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":62,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":437,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":235,"org.easymock.tests.UsageThrowableTest.throwError":173,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":349,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":487,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":447,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":305,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":366,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":328,"org.easymock.samples.PartialClassMockTest.testGetArea":34,"org.easymock.tests.MockingTest.testInterfaceMocking":451,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":350,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":39,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":383,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":425,"org.easymock.tests2.UsageTest.niceToStrict":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":317,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":338,"org.easymock.tests2.ThreadingTest.testChangeDefault":61,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":394,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":26,"org.easymock.tests2.MockBuilderTest.testCreateMock":145,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":324,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":253,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":503,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":433,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":78,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":484,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":361,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":385,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":225,"org.easymock.tests.UsageOverloadedMethodTest.overloading":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":321,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":326,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":494,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":128,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":192,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":216,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":127,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":100,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":465,"org.easymock.tests2.EasyMockSupportClassTest.testAll":30,"org.easymock.tests.MockClassControlTest.testEquals":377,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":161,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":441,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":460,"org.easymock.tests2.CaptureTest.testCaptureAll":94,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":236,"org.easymock.tests.MockNameTest.defaultName":448,"org.easymock.tests2.UsageConstraintsTest.testMatches":129,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":347,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":365,"org.easymock.samples.ExampleTest.voteForRemovals":155,"org.easymock.tests.UsageVarargTest.allKinds":473,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":212,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":461,"org.easymock.samples.BasicClassMockTest.testPrintContent":331,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":179,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":244,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":502,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":276,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":301,"org.easymock.tests2.UsageConstraintsTest.greaterThan":130,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":6,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":345,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":311,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":209,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":143,"org.easymock.samples.ExampleTest.voteForRemoval":152,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":346,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":87,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":289,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":489,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":268,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":287,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":496,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":104,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":44,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":401,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":75,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":175,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":309,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":497,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":114,"org.easymock.tests2.CaptureTest.testCaptureFirst":103,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":400,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":76,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":113,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":229,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":188,"org.easymock.tests2.UsageTest.moreThanOneArgument":106,"org.easymock.tests2.CaptureTest.testCapture2_2446744":102,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":11,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":412,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":29,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":472,"org.easymock.tests.GenericTest.testBridgedEquals":58,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":392,"org.easymock.tests.UsageExpectAndReturnTest.longType":184,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":458,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":73,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":442,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":10,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":215,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":281,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":440,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":362,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":368,"org.easymock.tests.UsageCallCountTest.tooManyCalls":393,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":509,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":387,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":325,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":189,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":255,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":429,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":178,"org.easymock.tests.MockingTest.testNiceClassMocking":454,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":14,"org.easymock.tests.MockingTest.testClassMocking":450,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":386,"org.easymock.tests2.UsageConstraintsTest.testContains":126,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":9,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":149,"org.easymock.tests2.UsageConstraintsTest.testFind":118,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":218,"org.easymock.tests.MockTypeTest.fromEasyMockClass":486,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":261,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":378,"org.easymock.tests.UsageExpectAndReturnTest.object":191,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":57,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":254,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":81,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":467,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":2,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":336,"org.easymock.tests.UsageTest.exactCallCountByLastCall":224,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":201,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":399,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":455,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":420,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":0,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":197,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":207,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":493,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":296,"org.easymock.tests.MockClassControlTest.testHashCode":376,"org.easymock.tests2.EasyMockSupportTest.testVerify":85,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":319,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":507,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":421,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":491,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":360,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":234,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":278,"org.easymock.tests.UsageVarargTest.varargCharAccepted":466,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":339,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":417,"org.easymock.tests2.UsageTest.openCallCountByLastCall":108,"org.easymock.tests.DefaultClassInstantiatorTest.object":51,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":84,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":359,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":159,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":431,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":320,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":176,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":249,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":295,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":141,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":375,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":430,"org.easymock.tests.CapturesMatcherTest.test":511,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":198,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":367,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":33,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":374,"org.easymock.tests2.UsageTest.resumeIfFailure":112,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":483,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":266,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":500,"org.easymock.tests2.StubTest.stubWithReturnValue":92,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":7,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":190,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":135,"org.easymock.tests2.SerializationTest.testAllMockedMethod":91,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":410,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":48,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":504,"org.easymock.samples.SupportTest.voteForRemovals":157,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":370,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":298,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":436,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":416,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":240,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":457,"org.easymock.tests.UsageExpectAndThrowTest.object":434,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":133,"org.easymock.tests2.DelegateToTest.testWrongClass":275,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":226,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":227,"org.easymock.tests.UsageStrictMockTest.range":165,"org.easymock.samples.ConstructorCalledMockTest.testTax":49,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":270,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":80,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":13,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":435,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":27,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":475,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":308,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":357,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":477,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":505,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":384,"org.easymock.tests2.CaptureTest.testCaptureNone":99,"org.easymock.tests.UsageUnorderedTest.message":52,"org.easymock.tests.UsageVerifyTest.twoReturns":214,"org.easymock.tests.UsageVarargTest.varargByteAccepted":471,"org.easymock.tests2.ThreadingTest.testThreadSafe":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":322,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":390,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":330,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":337,"org.easymock.tests2.CaptureTest.testCapture_2617107":95,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":482,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":419,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":414,"org.easymock.tests2.UsageConstraintsTest.any":124,"org.easymock.tests2.StubTest.stub":262,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":354,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":369,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":499,"org.easymock.tests.UsageExpectAndThrowTest.longType":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":415,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":343,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":353,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":68,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":147,"org.easymock.tests2.SerializationTest.testClass":40,"org.easymock.tests.LimitationsTest.mockNativeMethod":35,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":200,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":371,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":248,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":71,"org.easymock.tests2.NameTest.nameForMocksControl":286,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":250,"org.easymock.tests2.MockedExceptionTest.testMockedException":306,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":312,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":223,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":428,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":38,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":260,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":21,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":28,"org.easymock.tests.MockingTest.testNicePartialClassMocking":37,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":24,"org.easymock.tests2.CaptureTest.testCaptureLast":98,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":246,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":481,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":122,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":19,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":134,"org.easymock.tests.MockingTest.testTwoMocks":172,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":264,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":181,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":432,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":111,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":137,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":60,"org.easymock.samples.ExampleTest.removeNonExistingDocument":156,"org.easymock.tests.UsageStrictMockTest.differentMethods":166,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":252,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":351,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":297,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":341,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":88,"org.easymock.tests2.MockBuilderTest.testCreateMockString":146,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":162,"org.easymock.tests.UsageExpectAndThrowTest.floatType":426,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":313,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":310,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":242,"org.easymock.tests.UsageVerifyTest.twoThrows":213,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":257,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":492,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":32,"org.easymock.samples.ExampleTest.voteAgainstRemoval":153,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":405,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":382,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":142,"org.easymock.tests.LimitationsTest.privateConstructor":445,"org.easymock.tests2.UsageConstraintsTest.testNotNull":136,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":180,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":148,"org.easymock.tests2.UsageTest.defaultResetToNice":110,"org.easymock.samples.ExampleTest.voteAgainstRemovals":150,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":406,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":196,"org.easymock.tests.UsageVarargTest.differentLength":468,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":247,"org.easymock.tests2.CallbackTest.callback":258,"org.easymock.tests2.UsageConstraintsTest.equals":279,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":41,"org.easymock.tests.UsageTest.openCallCountByLastCall":222,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":115,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":418,"org.easymock.tests.UsageCallCountTest.tooFewCalls":388,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":16,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":479,"org.easymock.tests.UsageThrowableTest.throwCheckedException":177,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":506,"org.easymock.tests.MockingTest.testStrictClassMocking":449,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":18,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":202,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":15,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":251,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":356,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":17,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":243,"org.easymock.tests.ObjectMethodsTest.testHashCode":335,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":4,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":89,"org.easymock.tests2.NameTest.nameForNiceMock":285,"org.easymock.tests2.DependencyTest.testInterfaceMocking":63,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":3,"org.easymock.samples.ExampleTest.addDocument":154,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":323,"org.easymock.tests2.DelegateToTest.testStubDelegate":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":327,"org.easymock.tests2.AnswerTest.stubAnswer":66,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":163,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":294,"org.easymock.tests.UsageVarargTest.varargLongAccepted":470,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":167,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":403,"org.easymock.tests.UsageExpectAndReturnTest.floatType":183,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":199,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":12,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":50,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":495,"org.easymock.tests.UsageThrowableTest.noUpperLimit":174,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":131,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":303,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":116,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":265,"org.easymock.tests2.SerializationTest.test":90,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":230,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":340,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":182,"org.easymock.tests2.UsageConstraintsTest.testSame":120,"org.easymock.samples.SupportTest.addDocument":333,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":263,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":352,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":314,"org.easymock.tests.GenericTest.testPackageScope":160,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":422,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":398,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":302,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":452,"org.easymock.tests2.NameTest.nameForMock":283,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":193,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":46,"org.easymock.tests2.UsageStrictMockTest.differentMethods":70,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":288,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":185,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":438,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":334,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":211,"org.easymock.tests2.MockedExceptionTest.testRealException":307,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":490,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":408,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":271,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":407,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":67,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":169,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":358,"org.easymock.tests2.NameTest.nameForStrictMock":284,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":292,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":259,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":55,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":269,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":132,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":342,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":25,"org.easymock.tests2.UsageStrictMockTest.range":69,"org.easymock.tests2.UsageConstraintsTest.lessThan":138,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":299,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":402,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":74,"org.easymock.tests2.CaptureTest.testCaptureRightOne":101,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":318,"org.easymock.tests2.UsageConstraintsTest.testOr":121,"org.easymock.tests.UsageRangeTest.combination":208,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":139,"org.easymock.tests.UsageTest.wrongArguments":474,"org.easymock.tests2.MockBuilderTest.testWithConstructor":42,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":315,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":372,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":186,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":395,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":194,"org.easymock.tests.UsageVarargTest.varargShortAccepted":469,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":344,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":391,"org.easymock.tests2.UsageConstraintsTest.cmpTo":125,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":241,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":397,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":109,"org.easymock.tests2.CaptureTest.testCaptureFromStub":233,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":348,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":291,"org.easymock.tests.UsageTest.unexpectedCallWithArray":221,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":380,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":389,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":45,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":195,"org.easymock.tests2.CaptureTest.testCapture":232,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":164,"org.easymock.tests2.UsageConstraintsTest.constraints":117,"org.easymock.samples.ExampleTest.addAndChangeDocument":332,"org.easymock.tests.UsageStrictMockTest.testVerify":381,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":329,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":379,"org.easymock.tests2.CompareToTest.testGreateThan":510,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":459,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":231,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":204,"org.easymock.tests.LimitationsTest.abstractClass":444,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":187,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":205,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":228,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":463,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":79}}]

[{"transplant":{"position":"org.easymock.internal.MocksBehavior:156","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"verified":"org.easymock.internal.AndroidSupport.isAndroid"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,1,3,32,33,34,35,36,37,37,38,38],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"method"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[39],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1789","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Matches:40","sourceCode":"java.lang.StringBuffer.append(((\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[5],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:94","sourceCode":"return org.easymock.internal.MockInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","type":"CtReturnImpl"},"failures":[40,41,42,43,44,45,5,46,47,48,49,50,51,52,53,54,55,56,57,58,59,6,7,8,9,60,61,62,63,64,65,66,67,68,69,70,71,72,73,10,74,75,76,77,78,79,80,81,82,83,11,84,85,86,87,12,88,89,13,14,15,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,17,18,20,110,21,22,111,23,25,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,39,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,31,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,1,3,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,32,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,33,34,35,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,36,37,37,38,38],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"proxy"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:163","failures":[101,102],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[10,74,311,312],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1976","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[5,6,7,8,9,10,311,81,83,11,85,86,87,12,88,89,13,14,15,17,18,19,20,110,21,22,111,23,25,112,113,114,115,117,118,27,31,1,2,3,32,265,33,34,35,313,314,36,37,37,38,38],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[315,316,317,318,319,320,321],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[140],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1039","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[5,6,7,8,9,10,311,81,83,11,85,86,87,12,88,89,13,14,15,17,322,18,19,20,110,21,22,111,23,323,25,112,113,114,115,117,118,27,28,31,324,325,1,2,3,326,32,265,33,34,35,313,314,36,37,37,38,38],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1790","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[146,147],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[10,74,311,312],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[46,48,56,139,140,142,144,39,146,156,161],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[86,124,153],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"failures":[104,106,107,223,224,226,227,327],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"failures":[202],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[328,163],"status":-1,"binaryOperator":"int < 0","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[41,43,45,5,46,47,48,49,51,52,53,54,55,56,59,6,7,8,9,60,61,62,63,64,65,66,67,69,70,71,72,73,10,74,311,81,83,11,84,85,86,87,88,14,94,95,96,97,100,329,104,105,106,107,108,109,20,21,22,112,113,114,115,116,117,118,119,120,122,123,124,128,129,131,135,136,140,142,39,145,147,148,150,153,156,157,158,159,160,161,31,164,165,166,167,179,180,181,182,183,184,185,186,1,2,209,213,330,331,332,333,334,216,217,218,219,335,336,337,338,339,340,341,342,343,221,344,223,224,225,226,227,228,32,245,246,248,253,258,33,34,35,269,272,273,274,277,278,280,285,290,297,299,300,302,345,313,314,304,305,306,307,346,308,309,347,310,36,348],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"failures":[101,37,37,38,38],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[349,350],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[76,104,137,138,141,142,143,144,149,151,152,154,155,161,162,163,164,165,168,172,173,174,175,176,224,235,295,296],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[351,145,151,163],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:288","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"actualTypeArgument","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[5,6,7,8,9,10,311,81,83,11,85,86,87,12,88,89,13,14,15,352,17,18,19,20,110,21,22,111,23,25,112,113,114,115,117,118,31,324,325,1,2,3,4,237,326,353,354,355,356,357,358,32,265,33,34,35,359,313,314,36,37,37,38,38],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"toMock"}},{"position":"org.easymock.internal.RecordState:85","failures":[41,42,43,45,5,360,46,47,48,49,50,51,52,53,54,55,56,57,58,59,6,7,8,9,60,61,62,63,64,65,66,67,68,69,70,71,72,73,10,74,311,75,76,77,78,79,80,81,82,83,11,84,85,86,87,12,88,89,13,14,15,90,91,92,93,94,95,96,97,100,101,102,103,329,104,105,106,107,108,361,362,363,364,109,17,18,20,110,21,22,111,23,25,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,39,145,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,31,164,165,166,167,168,365,366,367,368,369,370,371,372,373,374,375,376,172,173,174,175,176,179,180,181,182,183,184,185,186,188,189,190,191,192,377,193,194,195,196,1,2,209,210,211,212,213,378,379,214,330,331,332,380,333,334,215,216,217,218,219,220,335,336,337,338,339,381,340,341,342,343,221,222,344,223,224,225,226,227,228,327,229,230,231,232,233,234,235,236,237,326,353,354,355,356,357,358,238,239,240,241,242,32,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,33,34,35,382,383,384,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,299,300,302,303,345,313,314,304,305,306,307,346,308,385,309,347,310,36,37,37,38,38,348],"status":-1,"binaryOperator":"org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1832","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.RecordState:108","failures":[76,119,126,167,179,181,182,183,184,185,186,216,220,233,266,271,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,300],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:112","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[39,145],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.LastControl:92","failures":[46,48,56,139,140,142,144,39,146,156,161],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Compare:53","failures":[153],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[156],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":140,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":266,"org.easymock.tests2.UsageTest.argumentsOrdered":129,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":71,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":232,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":124,"org.easymock.tests2.StubTest.stubWithReturnValue":76,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":316,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":348,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":252,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":160,"org.easymock.tests2.SerializationTest.testAllMockedMethod":311,"org.easymock.tests2.DelegateToTest.testReturnException":41,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":263,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":230,"org.easymock.tests.MockingTest.testPartialClassMocking":33,"org.easymock.samples.SupportTest.voteForRemovals":310,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests.MockClassControlTest.testToString":353,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":197,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":352,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":287,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":312,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":275,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":264,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":7,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":98,"org.easymock.tests.UsageExpectAndThrowTest.object":285,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":95,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":157,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":317,"org.easymock.tests2.DelegateToTest.testWrongClass":43,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":295,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":296,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":145,"org.easymock.tests2.UsageTest.wrongArguments":122,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":164,"org.easymock.tests.UsageStrictMockTest.range":226,"org.easymock.samples.ConstructorCalledMockTest.testTax":37,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":195,"org.easymock.samples.ExampleTest.answerVsDelegate":305,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":68,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":325,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":112,"org.easymock.tests2.UsageConstraintsTest.testNull":142,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":286,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":85,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":358,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":70,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":21,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":26,"org.easymock.tests2.CaptureTest.testPrimitive":49,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":168,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":375,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":294,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":272,"org.easymock.tests.UsageTest.moreThanOneArgument":267,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":194,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":84,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":190,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":205,"org.easymock.tests2.CaptureTest.testCaptureNone":54,"org.easymock.tests.UsageUnorderedTest.message":213,"org.easymock.tests.UsageVerifyTest.twoReturns":217,"org.easymock.tests.UsageVarargTest.varargByteAccepted":342,"org.easymock.tests2.ThreadingTest.testThreadSafe":132,"org.easymock.tests.UsageTest.argumentsOrdered":273,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":198,"org.easymock.tests.UsageVarargTest.varargIntAccepted":337,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":332,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":313,"org.easymock.tests2.CaptureTest.testCapture_2617107":48,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":172,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":321,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":17,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":167,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":110,"org.easymock.tests2.UsageConstraintsTest.any":147,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":372,"org.easymock.tests2.StubTest.stub":75,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":171,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":176,"org.easymock.tests.UsageExpectAndThrowTest.longType":278,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":231,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":371,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":105,"org.easymock.tests2.SerializationTest.testClass":10,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":109,"org.easymock.tests.ReplayStateInvalidUsageTest.times":373,"org.easymock.tests.LimitationsTest.mockNativeMethod":31,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":96,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":262,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":3,"org.easymock.tests2.AnswerTest.answer":97,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":146,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":93,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":29,"org.easymock.tests2.CaptureTest.testAnd":46,"org.easymock.tests2.UsageTest.strictResetToDefault":120,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":89,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":108,"org.easymock.tests2.NameTest.nameForMocksControl":364,"org.easymock.tests2.MockedExceptionTest.testMockedException":80,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":189,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":211,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":65,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":271,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":202,"org.easymock.tests2.DelegateToTest.testDelegate":45,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":279,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":35,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":83,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":22,"org.easymock.tests.MockingTest.testNicePartialClassMocking":34,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":290,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":87,"org.easymock.tests2.CaptureTest.testCaptureLast":53,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":233,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":178,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":39,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":118,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":242,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":158,"org.easymock.tests.MockingTest.testTwoMocks":265,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":177,"org.easymock.tests2.CaptureTest.testCapture1_2446744":50,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":243,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":288,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":283,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":91,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":128,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":162,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":349,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":367,"org.easymock.tests.UsageThrowableTest.throwError":179,"org.easymock.samples.ExampleTest.removeNonExistingDocument":385,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":369,"org.easymock.tests.UsageStrictMockTest.differentMethods":227,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":134,"org.easymock.tests2.MockBuilderTest.testCreateMockString":25,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":237,"org.easymock.tests.UsageExpectAndThrowTest.floatType":277,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":192,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":153,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":100,"org.easymock.tests.UsageVerifyTest.twoThrows":216,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":298,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":8,"org.easymock.samples.PartialClassMockTest.testGetArea":36,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":368,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":173,"org.easymock.samples.ExampleTest.voteAgainstRemoval":307,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":204,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":203,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":14,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":359,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":276,"org.easymock.tests2.UsageTest.niceToStrict":123,"org.easymock.tests2.ThreadingTest.testChangeDefault":350,"org.easymock.tests2.UsageConstraintsTest.testNotNull":161,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":79,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":186,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":20,"org.easymock.tests2.MockBuilderTest.testCreateMock":111,"org.easymock.tests2.UsageTest.defaultResetToNice":127,"org.easymock.samples.ExampleTest.voteAgainstRemovals":304,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":258,"org.easymock.tests.UsageVarargTest.differentLength":381,"org.easymock.tests2.CallbackTest.callback":60,"org.easymock.tests.UsageTest.openCallCountByLastCall":270,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":284,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":66,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":137,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":208,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":378,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":193,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":166,"org.easymock.tests.UsageCallCountTest.tooFewCalls":330,"org.easymock.tests.UsageOverloadedMethodTest.overloading":219,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":300,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":151,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":254,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":218,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":115,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":150,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":55,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":196,"org.easymock.tests.UsageThrowableTest.throwCheckedException":183,"org.easymock.tests.MockClassControlTest.testEquals":357,"org.easymock.tests2.EasyMockSupportClassTest.testAll":6,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":2,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":292,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":27,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":240,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":92,"org.easymock.tests2.CaptureTest.testCaptureAll":47,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":236,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":117,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":114,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":374,"org.easymock.tests2.UsageConstraintsTest.testMatches":152,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":116,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":102,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":365,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":191,"org.easymock.tests.ObjectMethodsTest.testHashCode":383,"org.easymock.tests2.CompareToTest.testGreateOrEqual":351,"org.easymock.samples.ExampleTest.voteForRemovals":308,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":320,"org.easymock.tests2.NameTest.nameForNiceMock":363,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":136,"org.easymock.tests.UsageVarargTest.allKinds":221,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":215,"org.easymock.tests2.DependencyTest.testInterfaceMocking":94,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":319,"org.easymock.samples.BasicClassMockTest.testPrintContent":314,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":241,"org.easymock.samples.ExampleTest.addDocument":346,"org.easymock.tests2.DelegateToTest.testStubDelegate":42,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":185,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":103,"org.easymock.tests2.AnswerTest.stubAnswer":101,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":234,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":44,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":224,"org.easymock.tests2.UsageConstraintsTest.greaterThan":154,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":210,"org.easymock.tests.UsageVarargTest.varargLongAccepted":341,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":15,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":228,"org.easymock.samples.ExampleTest.voteForRemoval":306,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":133,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":261,"org.easymock.tests.UsageExpectAndReturnTest.floatType":245,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":24,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":12,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":5,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":38,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":301,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":155,"org.easymock.tests.UsageThrowableTest.noUpperLimit":180,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":32,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":119,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":138,"org.easymock.tests2.SerializationTest.test":74,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":51,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":63,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":181,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":244,"org.easymock.tests2.UsageConstraintsTest.testSame":143,"org.easymock.samples.SupportTest.addDocument":347,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":229,"org.easymock.tests2.CaptureTest.testCaptureFirst":59,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":40,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":64,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":131,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":370,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":303,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":250,"org.easymock.tests.GenericTest.testPackageScope":1,"org.easymock.tests2.CaptureTest.testCapture2_2446744":58,"org.easymock.tests2.UsageTest.moreThanOneArgument":121,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":135,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":201,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":23,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":343,"org.easymock.tests.GenericTest.testBridgedEquals":4,"org.easymock.tests2.NameTest.nameForMock":361,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":333,"org.easymock.tests.UsageExpectAndReturnTest.longType":246,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":238,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":61,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":323,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":293,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":255,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":159,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":187,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":291,"org.easymock.tests2.UsageStrictMockTest.differentMethods":107,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":170,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":188,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":247,"org.easymock.tests.UsageCallCountTest.tooManyCalls":334,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":289,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":212,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":214,"org.easymock.tests2.MockedExceptionTest.testRealException":82,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":251,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":280,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":104,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":376,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":165,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":184,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":113,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":379,"org.easymock.tests2.NameTest.nameForStrictMock":362,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":322,"org.easymock.tests2.UsageConstraintsTest.testContains":149,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":81,"org.easymock.tests2.UsageConstraintsTest.testFind":141,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":220,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":77,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":86,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":222,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":78,"org.easymock.tests.UsageExpectAndReturnTest.object":253,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":156,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":88,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":18,"org.easymock.tests2.UsageStrictMockTest.range":106,"org.easymock.tests2.UsageConstraintsTest.lessThan":163,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":69,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":339,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":318,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":384,"org.easymock.tests.UsageTest.exactCallCountByLastCall":274,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":235,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":16,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":62,"org.easymock.tests2.CaptureTest.testCaptureRightOne":56,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":199,"org.easymock.tests2.UsageConstraintsTest.testOr":144,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":315,"org.easymock.tests.UsageRangeTest.combination":209,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":335,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":259,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":11,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":299,"org.easymock.tests.UsageTest.wrongArguments":269,"org.easymock.tests.MockClassControlTest.testHashCode":356,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":326,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":248,"org.easymock.tests2.EasyMockSupportTest.testVerify":73,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":256,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":200,"org.easymock.tests.UsageVarargTest.varargShortAccepted":340,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":297,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":207,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":380,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":90,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":360,"org.easymock.tests2.UsageConstraintsTest.cmpTo":148,"org.easymock.tests.UsageVarargTest.varargCharAccepted":338,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":99,"org.easymock.tests2.CompareToTest.testLessThan":328,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":329,"org.easymock.tests2.UsageTest.openCallCountByLastCall":125,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":126,"org.easymock.tests.DefaultClassInstantiatorTest.object":377,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":72,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":206,"org.easymock.tests2.CaptureTest.testCaptureFromStub":57,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":366,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":19,"org.easymock.tests.UsageTest.unexpectedCallWithArray":268,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":382,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":282,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":223,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":30,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":182,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":331,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":257,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":355,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":225,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":13,"org.easymock.tests2.UsageConstraintsTest.constraints":139,"org.easymock.samples.ExampleTest.addAndChangeDocument":309,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":281,"org.easymock.tests.UsageStrictMockTest.testVerify":327,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":260,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":169,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":345,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":354,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":9,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":239,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":52,"org.easymock.tests2.UsageTest.resumeIfFailure":130,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":28,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":174,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":324,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":249,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":302,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":175,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":336,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":67}}]

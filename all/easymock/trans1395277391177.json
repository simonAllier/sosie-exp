[{"transplant":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"this.java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"lock":"lock"}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[0,1],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int) == int","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1620","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(double[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1482","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(byte))","type":"CtInvocationImpl"},"failures":[2,3,4],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:92","sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[5,6,7,8],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:304","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[9,10,11,12],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[13,14,15,16,16,17,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,5,6,39,40,41,42,43,44,8,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:108","failures":[72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[109],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","delegateTo":"answer"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[110,111,112,113],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:86","sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","type":"CtReturnImpl"},"failures":[54,59,114],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"proxy"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[110,111,112,113],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[115,116],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[117],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:205","sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:207","sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cstr":"cstr"}},{"position":"org.easymock.EasyMock:1291","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1777","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:287","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"position":"org.easymock.EasyMock:1205","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[4],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1790","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:72","sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","type":"CtAssignmentImpl"},"failures":[13,18,28,29,30,36,5,6,40,42,43,44,8,46,47,49,50,51,52,68],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"failures":[118],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"returnedType"}},{"position":"org.easymock.EasyMock:1319","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1080","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:344","sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[119],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:59","sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection","obj":"obj","targetField":"targetField"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[18,120,19,121],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[13,122,123,124,125,126,127,128,129,130,131,14,15,132,16,17,133,134,135,136,137,138,139,140,141,142,143,18,120,19,144,145,146,147,72,20,148,149,150,2,151,152,153,154,3,110,155,156,157,158,111,159,160,161,162,4,163,164,165,166,167,112,21,22,23,24,168,25,26,169,170,171,172,173,27,28,29,30,174,175,176,177,178,179,31,180,33,34,35,37,38,6,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,41,215,42,8,45,46,47,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,76,53,239,240,241,242,243,244,245,246,247,248,249,250,251,252,82,253,55,254,255,256,257,258,259,260,261,262,263,264,63,64,65,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,66,67,70,284,85,285,286,287,288,289,290,291,86,292,293,294,295,296,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,297,298],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","type":"CtAssignmentImpl"},"failures":[299,300,301],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:93","sourceCode":"if (int == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[18,120,19,121],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"length":"i","clazz":"primitiveType"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[111,113],"status":-1,"binaryOperator":"int >= 0","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMockSupport:530","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl() : org.easymock.EasyMockSupport.createStrictControl()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[302],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:326","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"failures":[303],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:41","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[304],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[305,171,172,306],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:318","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.UnorderedBehavior:75","sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount())) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[160,175,176,177,307,185,308,186,187,191,195,196,199,207,49,259,265,309,280,310,281,282,291,86,292,293],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[18,20,311,312,313,314,315,316,317,318,319,320,321,322],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:61","sourceCode":"final java.lang.Throwable java.lang.Throwable","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:67","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","type":"CtThrowImpl"},"failures":[323],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[324,133,135,136,325,137,138,139,141,326,142,327,143],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[328,329,330,308,331,303,332,333,334,335,336,310,86,292],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"failures":[72,73,74,213,214,41,215,76,80,81,249,250,251,252,82,253,83,84,337,85,87,338,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:38","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(long.long, java.lang.Long.java.lang.Long)","type":"CtInvocationImpl"},"failures":[313,314,315,316,317,318],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:40","sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:41","sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[133,135,142,150,2,152,154,3,339,4,166],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1291","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[340],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1554","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","type":"CtInvocationImpl"},"failures":[2,3,4],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":2,"org.easymock.tests2.UsageTest.argumentsOrdered":330,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":83,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":200,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":252,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":177,"org.easymock.tests2.StubTest.stubWithReturnValue":72,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":319,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":227,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":122,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":165,"org.easymock.tests2.SerializationTest.testAllMockedMethod":19,"org.easymock.tests2.DelegateToTest.testReturnException":144,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":250,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":322,"org.easymock.tests.MockingTest.testPartialClassMocking":63,"org.easymock.samples.SupportTest.voteForRemovals":131,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":302,"org.easymock.tests.MockClassControlTest.testToString":56,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":40,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":101,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":121,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":89,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":28,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":305,"org.easymock.tests.UsageExpectAndThrowTest.object":99,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":163,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":189,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":313,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":297,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":298,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":110,"org.easymock.tests2.UsageTest.wrongArguments":328,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":294,"org.easymock.tests.UsageStrictMockTest.range":310,"org.easymock.samples.ConstructorCalledMockTest.testTax":16,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":271,"org.easymock.samples.ExampleTest.answerVsDelegate":124,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":197,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":52,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":21,"org.easymock.tests2.UsageConstraintsTest.testNull":152,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":33,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":100,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":199,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":61,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":46,"org.easymock.tests2.CaptureTest.testPrimitive":136,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":296,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":334,"org.easymock.tests.UsageTest.moreThanOneArgument":259,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":108,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":270,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":180,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":256,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":118,"org.easymock.tests2.CaptureTest.testCaptureNone":140,"org.easymock.tests.UsageUnorderedTest.message":331,"org.easymock.tests.UsageVerifyTest.twoReturns":292,"org.easymock.tests.UsageVarargTest.varargByteAccepted":246,"org.easymock.tests2.ThreadingTest.testThreadSafe":181,"org.easymock.tests.UsageTest.argumentsOrdered":335,"org.easymock.tests.UsageVarargTest.varargIntAccepted":241,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":290,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":14,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":273,"org.easymock.tests2.CaptureTest.testCapture_2617107":135,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":317,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":42,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":88,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":45,"org.easymock.tests2.UsageConstraintsTest.any":155,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":109,"org.easymock.tests2.StubTest.stub":147,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":277,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":12,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":251,"org.easymock.tests.UsageExpectAndThrowTest.longType":92,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":212,"org.easymock.tests2.SerializationTest.testClass":18,"org.easymock.tests.LimitationsTest.mockNativeMethod":53,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":173,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":237,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":68,"org.easymock.tests2.AnswerTest.answer":169,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":339,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":211,"org.easymock.tests2.CaptureTest.testAnd":133,"org.easymock.tests2.UsageTest.strictResetToDefault":174,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":38,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":187,"org.easymock.tests2.NameTest.nameForMocksControl":206,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":117,"org.easymock.tests2.MockedExceptionTest.testMockedException":214,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":255,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":267,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":194,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":84,"org.easymock.tests2.DelegateToTest.testDelegate":146,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":93,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":65,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":31,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":47,"org.easymock.tests.MockingTest.testNicePartialClassMocking":64,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":104,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":35,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":312,"org.easymock.tests2.CaptureTest.testCaptureLast":139,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":82,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":3,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":26,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":264,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":164,"org.easymock.tests.MockingTest.testTwoMocks":62,"org.easymock.tests2.CaptureTest.testCapture1_2446744":325,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":340,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":218,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":102,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":209,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":97,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":329,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":167,"org.easymock.tests.UsageThrowableTest.throwError":75,"org.easymock.tests.UsageStrictMockTest.differentMethods":281,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":116,"org.easymock.tests2.MockBuilderTest.testCreateMockString":50,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":54,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":258,"org.easymock.tests.UsageExpectAndThrowTest.floatType":91,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":160,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":170,"org.easymock.tests.UsageVerifyTest.twoThrows":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":29,"org.easymock.samples.PartialClassMockTest.testGetArea":13,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":274,"org.easymock.samples.ExampleTest.voteAgainstRemoval":126,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":6,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":90,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":71,"org.easymock.tests2.UsageTest.niceToStrict":176,"org.easymock.tests2.UsageConstraintsTest.testNotNull":166,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":213,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":81,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":8,"org.easymock.tests2.MockBuilderTest.testCreateMock":48,"org.easymock.tests2.UsageTest.defaultResetToNice":178,"org.easymock.samples.ExampleTest.voteAgainstRemovals":123,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":233,"org.easymock.tests2.CallbackTest.callback":207,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":98,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":195,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":148,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":285,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":338,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":269,"org.easymock.tests.UsageCallCountTest.tooFewCalls":288,"org.easymock.tests.UsageOverloadedMethodTest.overloading":284,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":87,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":111,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":229,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":24,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":0,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":158,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":141,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":272,"org.easymock.tests.UsageThrowableTest.throwCheckedException":78,"org.easymock.tests.MockClassControlTest.testEquals":60,"org.easymock.tests2.EasyMockSupportClassTest.testAll":27,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":67,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":106,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":262,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":210,"org.easymock.tests2.CaptureTest.testCaptureAll":134,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":337,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":25,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":23,"org.easymock.tests2.UsageConstraintsTest.testMatches":159,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":168,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":172,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":257,"org.easymock.tests2.CompareToTest.testGreateOrEqual":113,"org.easymock.tests.ObjectMethodsTest.testHashCode":114,"org.easymock.samples.ExampleTest.voteForRemovals":128,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":316,"org.easymock.tests2.NameTest.nameForNiceMock":205,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":183,"org.easymock.tests.UsageVarargTest.allKinds":248,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":291,"org.easymock.tests2.DependencyTest.testInterfaceMocking":188,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":315,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":263,"org.easymock.samples.BasicClassMockTest.testPrintContent":15,"org.easymock.samples.ExampleTest.addDocument":127,"org.easymock.tests2.DelegateToTest.testStubDelegate":145,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":80,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":307,"org.easymock.tests2.AnswerTest.stubAnswer":171,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":253,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":280,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":318,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":300,"org.easymock.tests2.UsageConstraintsTest.greaterThan":161,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":266,"org.easymock.tests.UsageVarargTest.varargLongAccepted":245,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":39,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":282,"org.easymock.samples.ExampleTest.voteForRemoval":125,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":115,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":182,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":236,"org.easymock.tests.UsageExpectAndReturnTest.floatType":220,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":20,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":36,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":17,"org.easymock.tests.UsageThrowableTest.noUpperLimit":238,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":162,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":73,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":70,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":149,"org.easymock.tests2.SerializationTest.test":120,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":137,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":320,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":1,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":9,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":192,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":76,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":219,"org.easymock.tests2.UsageConstraintsTest.testSame":153,"org.easymock.samples.SupportTest.addDocument":130,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":249,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_Overriden":301,"org.easymock.tests2.CaptureTest.testCaptureFirst":143,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":306,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":193,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":225,"org.easymock.tests.GenericTest.testPackageScope":66,"org.easymock.tests2.UsageTest.moreThanOneArgument":175,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":49,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":247,"org.easymock.tests.GenericTest.testBridgedEquals":69,"org.easymock.tests2.NameTest.nameForMock":203,"org.easymock.tests.UsageExpectAndReturnTest.longType":221,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":260,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":190,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":230,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":107,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":105,"org.easymock.tests2.UsageStrictMockTest.differentMethods":186,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":254,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":11,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":222,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":103,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":268,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":287,"org.easymock.tests2.MockedExceptionTest.testRealException":215,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":226,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":119,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":321,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":94,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":185,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":295,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":79,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":22,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":286,"org.easymock.tests2.NameTest.nameForStrictMock":204,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":7,"org.easymock.tests2.UsageConstraintsTest.testContains":157,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":41,"org.easymock.tests2.UsageConstraintsTest.testFind":151,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":85,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":216,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":34,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":309,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":217,"org.easymock.tests.UsageExpectAndReturnTest.object":228,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":4,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":37,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":43,"org.easymock.tests2.UsageStrictMockTest.range":308,"org.easymock.tests2.UsageConstraintsTest.lessThan":112,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":198,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":314,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":243,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":278,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":191,"org.easymock.tests2.CaptureTest.testCaptureRightOne":142,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":323,"org.easymock.tests2.UsageConstraintsTest.testOr":154,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":311,"org.easymock.tests.UsageRangeTest.combination":265,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":239,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":234,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":32,"org.easymock.tests.UsageTest.wrongArguments":333,"org.easymock.tests.MockClassControlTest.testHashCode":59,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":55,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":223,"org.easymock.tests2.EasyMockSupportTest.testVerify":202,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":231,"org.easymock.tests.UsageVarargTest.varargShortAccepted":244,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":208,"org.easymock.tests2.UsageConstraintsTest.cmpTo":156,"org.easymock.tests.UsageVarargTest.varargCharAccepted":242,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":299,"org.easymock.tests2.CaptureTest.testCaptureMultiple":324,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":184,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":74,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":201,"org.easymock.tests2.CaptureTest.testCaptureFromStub":327,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":44,"org.easymock.tests.UsageTest.unexpectedCallWithArray":332,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":303,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":96,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":336,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":77,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":289,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":232,"org.easymock.tests2.CaptureTest.testCapture":326,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":58,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":5,"org.easymock.tests2.UsageConstraintsTest.constraints":150,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":95,"org.easymock.samples.ExampleTest.addAndChangeDocument":129,"org.easymock.tests.CapturesMatcherTest.test":304,"org.easymock.tests.UsageStrictMockTest.testVerify":283,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":235,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":10,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":132,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":279,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":30,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":261,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":138,"org.easymock.tests2.UsageTest.resumeIfFailure":179,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":275,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":224,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":51,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":293,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":276,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":240,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":196}}]

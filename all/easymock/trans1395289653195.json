[{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:439","failures":[1,2,3],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:162","sourceCode":"final java.lang.NoSuchFieldException java.lang.NoSuchFieldException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:245","sourceCode":"net.sf.cglib.proxy.Factory.getCallback(0)","type":"CtInvocationImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,1,58,2,59,60,61,62,63,64],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:52","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:57","sourceCode":"try {\n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.IMocksBehavior.addActual(org.easymock.internal.Invocation);\n    try {\n        return org.easymock.internal.Result.answer();\n    } catch (final java.lang.Throwable java.lang.Throwable) {\n        if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n            throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n        } \n        throw java.lang.Throwable;\n    }\n} finally {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation();\n}","type":"CtTryImpl"},"failures":[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,0,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,4,5,113,6,114,7,115,116,117,118,119,120,121,122,123,124,8,9,10,11,125,126,127,128,129,130,131,12,13,14,17,18,19,20,21,22,23,132,133,134,135,136,137,138,139,140,141,24,25,142,26,27,28,29,30,32,33,34,35,38,39,40,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,42,173,174,175,46,47,48,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,1,58,242,243,244,245,246,247,248,59,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,62,314,315,316,63,64],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[130,131,12,317],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[73,74,77,78,79,80,85,87,88,90,91,96,97,98,120,158,170,176,177,178,179,180,228,233,234,235,236,237,238,239,240,318,319,320,321,322,249,250,253,323,311,311,312,312],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.LastControl:71","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:130","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[324,325,326],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:60","failures":[113,115,327,328,329,330,331,332,333,334,335],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:83","sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","type":"CtThrowImpl"},"failures":[336],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[70,72,73,74,75,76,77,78,79,80,81,82,337,83,84,85,86,87,88,89,90,91,0,92,93,94,95,96,97,98,99,120,121,338,125,140,30,32,159,160,161,162,163,164,165,166,167,168,169,170,171,172,176,177,178,179,180,181,189,190,227,228,238,239,240,241,339,249,250,251,252,253,254,255,273,274],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.internal.Range:83","failures":[66,69,78,83,89,96,100,102,103,106,107,109,110,112,120,121,122,123,126,128,340,341,342,343,158,160,161,163,164,165,166,167,172,175,189,191,192,194,195,196,197,198,199,227,228,229,230,231,250,253,254,257,273,274,275,276],"status":-1,"binaryOperator":"(int) == (java.lang.Integer.int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[344,345,346,347,193,227],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[344,345,346,347,193,227],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"failures":[348],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"type"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:83","sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","type":"CtThrowImpl"},"failures":[336],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"failures":[157,349,252],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:173","failures":[66],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:356","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[130,131,12,317],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[73,74,77,78,79,80,85,87,88,90,91,96,97,98,120,170,176,177,178,179,180,228,233,234,235,236,237,238,239,240,350,249,250,253,323,311,311,312,312],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[90,351],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1204","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[81],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:181","sourceCode":"return false","type":"CtReturnImpl"},"failures":[352,353,354,355,356,357,358,130,332,335],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:318","failures":[255,258],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.RecordState:262","failures":[100,107,38,39,40,143,158,175,185,186,187,188,189,190,191,196,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,359,360,241,247,251,252,255,257,258,259,260,261,262,275,361,362],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:135","sourceCode":"java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:127","sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","type":"CtTryImpl"},"failures":[363,364],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:75","sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","type":"CtReturnImpl"},"failures":[102,103,109,110,120,122,123,340,341,342,343,192,194,197,198,227,228,230,231,254,274,275,276],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ExpectedInvocation:48","failures":[337],"status":-1,"binaryOperator":"(\"\" + (org.easymock.internal.Invocation.getArguments().int))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[102,103,109,110,120,122,123,340,341,342,343,192,194,197,198,227,228,230,231,365,274,275,276],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[366],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","method":"method","paramTypes":"paramTypes","this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1802","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[97],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[353,354,355,356,357,332,335],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[32],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:202","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[367,65,66,67,368,68,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,0,92,93,95,96,97,98,99,100,101,102,104,106,107,108,111,112,4,5,113,6,114,7,115,116,117,120,122,123,8,9,10,11,125,126,369,370,127,128,129,130,131,14,17,19,20,22,136,137,138,139,140,141,24,25,142,26,27,28,30,33,34,35,38,39,40,143,144,145,146,147,148,149,150,151,152,153,154,155,157,158,159,160,162,163,166,167,168,169,170,171,172,42,173,174,175,46,47,48,176,177,178,179,180,185,186,187,188,189,190,191,192,195,196,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,371,359,360,228,230,231,233,234,235,236,237,372,373,374,238,239,240,241,339,366,1,2,375,242,376,243,244,245,246,247,377,59,378,249,250,251,252,253,254,255,256,257,258,259,260,261,262,379,380,381,274,275,276,382,361,362,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,323,297,383,384,304,305,306,307,309,310,311,311,312,312,62,316],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"lastControl"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[86],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[103,109,110,122,385,193,194,197,198,227,230,248,254,275,276],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:39","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","type":"CtReturnImpl"},"failures":[386],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"expected"}},{"position":"org.easymock.EasyMock:1065","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[130,131,12,317],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:126","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:104","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method);\n}","type":"CtForEachImpl"},"failures":[17,387],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:119","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.LogicalOperator:62","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:340","sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[138,139],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.EasyMock:1746","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:191","sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>;\n    try {\n        java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n    } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n        throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n    }\n    T T;\n    try {\n        java.lang.reflect.Constructor<?>.setAccessible(true);\n        T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n    } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n    } catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n        throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n    }\n    return T;\n} else {\n    net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory;\n    try {\n        net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n    } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n    }\n    net.sf.cglib.proxy.Factory.getCallback(0);\n    return ((T)(net.sf.cglib.proxy.Factory));\n}","type":"CtIfImpl"},"failures":[4,5,113,6,7,115,8,9,10,11,12,13,14,17,18,20,21,22,23,136,137,24,25,26,27,28,29,30,32,34,38,39,40,157,42,388,45,46,47,48,50,51,52,53,54,55,56,57,324,240,1,2,389,59,255,311,311,312,312,62],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":76,"org.easymock.tests.ClassInstantiatorFactoryTest.getJVM":386,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":191,"org.easymock.tests2.UsageTest.argumentsOrdered":110,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":154,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":105,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":313,"org.easymock.tests2.DelegateToTest.testReturnException":65,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":186,"org.easymock.tests.MockingTest.testPartialClassMocking":46,"org.easymock.tests.MockClassControlTest.testToString":52,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":380,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":37,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":322,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":9,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":200,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":365,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":117,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":353,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":82,"org.easymock.tests2.UsageTest.wrongArguments":103,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":249,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":183,"org.easymock.samples.ExampleTest.answerVsDelegate":305,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":61,"org.easymock.tests2.UsageConstraintsTest.testNull":78,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":26,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":153,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":57,"org.easymock.tests2.CaptureTest.testPrimitive":162,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":253,"org.easymock.tests.UsageTest.moreThanOneArgument":192,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":219,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":142,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":235,"org.easymock.tests.UsageTest.argumentsOrdered":198,"org.easymock.tests.UsageVarargTest.varargIntAccepted":265,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":349,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":176,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":13,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":357,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":18,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":180,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":125,"org.easymock.tests2.AnswerTest.answer":126,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":337,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":135,"org.easymock.tests2.CaptureTest.testAnd":159,"org.easymock.tests2.UsageTest.strictResetToDefault":101,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":32,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":331,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":234,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":148,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":243,"org.easymock.tests2.DelegateToTest.testDelegate":68,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":215,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":189,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":224,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":389,"org.easymock.tests2.CaptureTest.testCapture1_2446744":163,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":213,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":133,"org.easymock.tests.UsageThrowableTest.throwError":255,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":237,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":328,"org.easymock.samples.PartialClassMockTest.testGetArea":62,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":177,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":373,"org.easymock.tests2.UsageTest.niceToStrict":104,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":201,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":318,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":17,"org.easymock.tests2.MockBuilderTest.testCreateMock":21,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":209,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":344,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":149,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":362,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":181,"org.easymock.tests.UsageOverloadedMethodTest.overloading":174,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":87,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":247,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":173,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":288,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":86,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":168,"org.easymock.tests2.EasyMockSupportClassTest.testAll":8,"org.easymock.tests.MockClassControlTest.testEquals":56,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":58,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":217,"org.easymock.tests2.CaptureTest.testCaptureAll":160,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":134,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":222,"org.easymock.tests2.UsageConstraintsTest.testMatches":88,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":236,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":350,"org.easymock.samples.ExampleTest.voteForRemovals":309,"org.easymock.tests.UsageVarargTest.allKinds":273,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":274,"org.easymock.samples.BasicClassMockTest.testPrintContent":64,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":223,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":261,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":118,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":190,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":368,"org.easymock.tests2.UsageConstraintsTest.greaterThan":90,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":358,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":376,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":35,"org.easymock.samples.ExampleTest.voteForRemoval":306,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":138,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":36,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":29,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":100,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":59,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":146,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":257,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":185,"org.easymock.tests2.CaptureTest.testCaptureFirst":172,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":367,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":147,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":112,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":248,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":284,"org.easymock.tests2.CaptureTest.testCapture2_2446744":171,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":140,"org.easymock.tests2.UsageTest.moreThanOneArgument":102,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":22,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":272,"org.easymock.tests.GenericTest.testBridgedEquals":3,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":302,"org.easymock.tests.UsageExpectAndReturnTest.longType":280,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":144,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":220,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":387,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":218,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":94,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":323,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":216,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":233,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":359,"org.easymock.tests.UsageCallCountTest.tooManyCalls":303,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":297,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":285,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":205,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":260,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":5,"org.easymock.tests.MockingTest.testNiceClassMocking":49,"org.easymock.tests.MockingTest.testClassMocking":44,"org.easymock.tests2.UsageConstraintsTest.testContains":85,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":40,"org.easymock.tests2.UsageConstraintsTest.testFind":77,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":175,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":72,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":225,"org.easymock.tests.UsageExpectAndReturnTest.object":287,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":30,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":152,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":267,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":354,"org.easymock.tests.UsageTest.exactCallCountByLastCall":199,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":240,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":320,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":379,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":383,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":335,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":263,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":293,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":246,"org.easymock.tests.MockClassControlTest.testHashCode":55,"org.easymock.tests2.EasyMockSupportTest.testVerify":156,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":384,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":245,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":361,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":132,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":338,"org.easymock.tests.UsageVarargTest.varargCharAccepted":266,"org.easymock.tests2.CaptureTest.testCaptureMultiple":336,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":119,"org.easymock.tests2.UsageTest.openCallCountByLastCall":106,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":155,"org.easymock.tests.DefaultClassInstantiatorTest.object":324,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":382,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":388,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":385,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":207,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":258,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":33,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":54,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":206,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":294,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":11,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":53,"org.easymock.tests2.UsageTest.resumeIfFailure":111,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":60,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":188,"org.easymock.tests2.StubTest.stubWithReturnValue":158,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":332,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":95,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":286,"org.easymock.tests2.SerializationTest.testAllMockedMethod":12,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":339,"org.easymock.samples.SupportTest.voteForRemovals":316,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":345,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":212,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":317,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":366,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":369,"org.easymock.tests.UsageExpectAndThrowTest.object":210,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":381,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":92,"org.easymock.tests2.DelegateToTest.testWrongClass":67,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":238,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":239,"org.easymock.tests.UsageStrictMockTest.range":230,"org.easymock.samples.ConstructorCalledMockTest.testTax":311,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":151,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":4,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":211,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":19,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":197,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":182,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":346,"org.easymock.tests2.CaptureTest.testCaptureNone":167,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":374,"org.easymock.tests.UsageUnorderedTest.message":254,"org.easymock.tests.UsageVerifyTest.twoReturns":276,"org.easymock.tests.UsageVarargTest.varargByteAccepted":271,"org.easymock.tests2.ThreadingTest.testThreadSafe":137,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":300,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":63,"org.easymock.tests2.CaptureTest.testCapture_2617107":161,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":252,"org.easymock.tests2.UsageConstraintsTest.any":83,"org.easymock.tests2.StubTest.stub":157,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":360,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":187,"org.easymock.tests.UsageExpectAndThrowTest.longType":203,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":121,"org.easymock.tests2.SerializationTest.testClass":130,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":99,"org.easymock.tests.LimitationsTest.mockNativeMethod":42,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":2,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":296,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":124,"org.easymock.tests2.NameTest.nameForMocksControl":343,"org.easymock.tests2.MockedExceptionTest.testMockedException":39,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":196,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":48,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":71,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":204,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":24,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":20,"org.easymock.tests.MockingTest.testNicePartialClassMocking":47,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":28,"org.easymock.tests2.CaptureTest.testCaptureLast":166,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":352,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":375,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":115,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":81,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":93,"org.easymock.tests.MockingTest.testTwoMocks":45,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":327,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":277,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":208,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":109,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":97,"org.easymock.tests.UsageStrictMockTest.differentMethods":231,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":364,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":139,"org.easymock.tests2.MockBuilderTest.testCreateMockString":23,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":50,"org.easymock.tests.UsageExpectAndThrowTest.floatType":202,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":89,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":127,"org.easymock.tests.UsageVerifyTest.twoThrows":275,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":10,"org.easymock.samples.ExampleTest.voteAgainstRemoval":307,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":372,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":34,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":329,"org.easymock.tests2.UsageConstraintsTest.testNotNull":96,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":38,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":262,"org.easymock.tests2.UsageTest.defaultResetToNice":108,"org.easymock.samples.ExampleTest.voteAgainstRemovals":304,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":292,"org.easymock.tests.UsageVarargTest.differentLength":268,"org.easymock.tests2.CallbackTest.callback":69,"org.easymock.tests.UsageTest.openCallCountByLastCall":195,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":73,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":251,"org.easymock.tests.UsageCallCountTest.tooFewCalls":298,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":6,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":184,"org.easymock.tests.UsageThrowableTest.throwCheckedException":259,"org.easymock.tests.MockingTest.testStrictClassMocking":43,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":347,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":7,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":241,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":113,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":114,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":129,"org.easymock.tests2.CompareToTest.testGreateOrEqual":348,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":356,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":141,"org.easymock.tests2.NameTest.nameForNiceMock":342,"org.easymock.tests2.DependencyTest.testInterfaceMocking":116,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":355,"org.easymock.samples.ExampleTest.addDocument":308,"org.easymock.tests2.DelegateToTest.testStubDelegate":66,"org.easymock.tests2.AnswerTest.stubAnswer":128,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":228,"org.easymock.tests.UsageVarargTest.varargLongAccepted":270,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":232,"org.easymock.tests.UsageExpectAndReturnTest.floatType":279,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":295,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":136,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":312,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":91,"org.easymock.tests.UsageThrowableTest.noUpperLimit":256,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":74,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":164,"org.easymock.tests2.SerializationTest.test":131,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":325,"org.easymock.tests2.UsageConstraintsTest.testSame":79,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":278,"org.easymock.samples.SupportTest.addDocument":315,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":378,"org.easymock.tests.GenericTest.testPackageScope":1,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":319,"org.easymock.tests2.NameTest.nameForMock":340,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":289,"org.easymock.tests2.UsageStrictMockTest.differentMethods":123,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":334,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":31,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":281,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":214,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":244,"org.easymock.tests2.MockedExceptionTest.testRealException":143,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":321,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":120,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":250,"org.easymock.tests2.NameTest.nameForStrictMock":341,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":16,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":70,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":27,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":41,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":0,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":14,"org.easymock.tests2.UsageStrictMockTest.range":122,"org.easymock.tests2.UsageConstraintsTest.lessThan":98,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":145,"org.easymock.tests2.CaptureTest.testCaptureRightOne":169,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":363,"org.easymock.tests2.UsageConstraintsTest.testOr":80,"org.easymock.tests.UsageRangeTest.combination":242,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":25,"org.easymock.tests.UsageTest.wrongArguments":194,"org.easymock.tests2.MockBuilderTest.testWithConstructor":330,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":51,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":282,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":290,"org.easymock.tests.UsageVarargTest.varargShortAccepted":269,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":326,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":301,"org.easymock.tests2.UsageConstraintsTest.cmpTo":84,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":370,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":107,"org.easymock.tests2.CaptureTest.testCaptureFromStub":170,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":15,"org.easymock.tests.UsageTest.unexpectedCallWithArray":193,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":227,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":299,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":333,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":291,"org.easymock.tests2.UsageConstraintsTest.constraints":75,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":229,"org.easymock.samples.ExampleTest.addAndChangeDocument":310,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":314,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":226,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":221,"org.easymock.tests2.CompareToTest.testGreateThan":351,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":165,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":178,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":283,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":179,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":377,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":150,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":264}}]

[{"position":"org.easymock.internal.RecordState:136","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,33,34,34],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[35,36],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:122","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[37,38,39],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"toStringMethod","bridgeMethod":"toStringMethod"}},{"transplant":{"position":"org.easymock.EasyMock:1093","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:154","sourceCode":"return (java.lang.String + \".\") + java.lang.String","type":"CtReturnImpl"},"failures":[40,41,42,43,44,45,46],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[47],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.Capture:82","failures":[48,49,50,51,52,53,54,55,56,57,0,58],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,44,80,45,81,82,83,84,85,86,87,88,89,90,91,92,93,37,39,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,33,33,34,34,109],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[110],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[111,112,113,114,115,116,117,37,94,118],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arg":"value"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[111,113,114,115,119,120,118],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[121],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int) == int","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:760","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[122,15,123,124,125,126,127,128,129,130,131,132,133,29,134,135],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:136","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:126","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[136],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:117","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:115","sourceCode":"java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int])","type":"CtAssignmentImpl"},"failures":[137,138],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:118","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,44,80,45,81,82,83,84,85,86,87,88,89,90,91,92,93,37,39,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,33,33,34,34,109],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:163","failures":[139,140,141,33,34],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:98","failures":[40,41,42,43,142,143,60,66,69,144,145,146,147,148,149,150,71,73,74,77,78,79,44,45,151,152,153,122,154,36,155,156,157,158,159,160,161,82,83,85,86,162,15,163,123,124,164,165,166,167,168,169,170,171,172,173,174,100,175,176,101,177,178,125,179,126,127,128,180,181,182,183,184,185,186,187,188,189,190,191,133,192,193,194,195,196,197,198,29,199,134,135,200],"status":-1,"binaryOperator":"(java.lang.String) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:135","sourceCode":"java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:127","sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","type":"CtTryImpl"},"failures":[201,202],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[111,203,113,114,115,116,119,120,117,118],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"clazz":"parameterType"}},{"position":"org.easymock.internal.RecordState:99","failures":[142,59,60,204,61,62,63,65,67,68,69,205,145,206,146,207,147,148,208,149,150,209,210,211,212,213,214,215,216,217,70,218,219,48,220,50,51,54,221,55,57,222,58,73,75,77,78,44,151,223,153,224,122,36,225,226,227,158,159,1,2,160,228,3,4,5,6,229,230,231,232,7,233,8,9,161,10,11,234,235,236,237,12,13,14,81,82,83,84,238,85,86,15,123,124,90,91,92,93,37,38,94,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,96,97,99,16,17,18,19,20,21,126,128,260,261,262,263,264,265,266,180,267,268,269,183,27,28,191,133,270,271,196,103,104,105,29,134,135,30,31,32,272,273,274,275,276,277,278,109,279],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1065","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:172","failures":[77],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:159","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method)","type":"CtLocalVariableImpl"},"failures":[280],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[281,282,283],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:301","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:346","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[60],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","this":"this"}},{"position":"org.easymock.internal.MockBuilder:163","failures":[139,140,141,33,34],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:119","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","type":"CtReturnImpl"},"failures":[123,124,134,135],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"failures":[284,285,70,286,223,153,226,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,261,265,266,308,309,310,311,312,313,314,191,271,315,316,274],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:853","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"failures":[317],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:241","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"failures":[10,318],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"position":"org.easymock.internal.matchers.Find:41","failures":[319],"status":-1,"binaryOperator":"((\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:234","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[320],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":228,"org.easymock.tests2.UsageTest.argumentsOrdered":157,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":191,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":209,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":312,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":143,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":155,"org.easymock.tests2.StubTest.stubWithReturnValue":223,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":111,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":249,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":237,"org.easymock.tests2.SerializationTest.testAllMockedMethod":39,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":310,"org.easymock.tests.MockingTest.testPartialClassMocking":103,"org.easymock.samples.SupportTest.voteForRemovals":279,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":280,"org.easymock.tests.MockClassControlTest.testToString":168,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":299,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":144,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":287,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":91,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":47,"org.easymock.tests.UsageExpectAndThrowTest.object":297,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":129,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":235,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":219,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":113,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":27,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":28,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":230,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":30,"org.easymock.tests2.UsageTest.wrongArguments":154,"org.easymock.samples.ConstructorCalledMockTest.testTax":33,"org.easymock.tests.UsageStrictMockTest.range":134,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":208,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":81,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":101,"org.easymock.tests2.UsageConstraintsTest.testNull":4,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":298,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":61,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":77,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":150,"org.easymock.tests2.CaptureTest.testPrimitive":50,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":32,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":306,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":194,"org.easymock.tests.UsageTest.moreThanOneArgument":133,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":204,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":24,"org.easymock.tests2.CaptureTest.testCaptureNone":221,"org.easymock.tests.UsageUnorderedTest.message":125,"org.easymock.tests.UsageVerifyTest.twoReturns":128,"org.easymock.tests2.ThreadingTest.testThreadSafe":213,"org.easymock.tests.UsageTest.argumentsOrdered":195,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":107,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":172,"org.easymock.tests2.CaptureTest.testCapture_2617107":49,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":16,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":71,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":120,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":316,"org.easymock.tests2.UsageConstraintsTest.any":231,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":76,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":317,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":20,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":311,"org.easymock.tests.UsageExpectAndThrowTest.longType":290,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":320,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":163,"org.easymock.tests2.SerializationTest.testClass":37,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":142,"org.easymock.tests.LimitationsTest.mockNativeMethod":96,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":151,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":259,"org.easymock.tests2.AnswerTest.answer":211,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":99,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":89,"org.easymock.tests2.CaptureTest.testAnd":48,"org.easymock.tests2.UsageTest.strictResetToDefault":224,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":66,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":164,"org.easymock.tests2.NameTest.nameForMocksControl":43,"org.easymock.tests2.MockedExceptionTest.testMockedException":285,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":23,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":268,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":207,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":271,"org.easymock.tests2.DelegateToTest.testDelegate":136,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":291,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":105,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":59,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":78,"org.easymock.tests.MockingTest.testNicePartialClassMocking":104,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":302,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":63,"org.easymock.tests2.CaptureTest.testCaptureLast":54,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":313,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":167,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":229,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":86,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":236,"org.easymock.tests.MockingTest.testTwoMocks":102,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":166,"org.easymock.tests2.CaptureTest.testCapture1_2446744":51,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":240,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":300,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":295,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":156,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":13,"org.easymock.tests.UsageThrowableTest.throwError":260,"org.easymock.tests.UsageStrictMockTest.differentMethods":135,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":176,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":202,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":215,"org.easymock.tests2.MockBuilderTest.testCreateMockString":45,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":46,"org.easymock.tests.UsageExpectAndThrowTest.floatType":289,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":26,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":161,"org.easymock.tests.UsageVerifyTest.twoThrows":127,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":181,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":92,"org.easymock.samples.PartialClassMockTest.testGetArea":109,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":17,"org.easymock.samples.ExampleTest.voteAgainstRemoval":277,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":68,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":288,"org.easymock.tests2.UsageTest.niceToStrict":36,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":173,"org.easymock.tests2.UsageConstraintsTest.testNotNull":12,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":284,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":266,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":281,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":75,"org.easymock.tests2.UsageTest.defaultResetToNice":227,"org.easymock.tests2.MockBuilderTest.testCreateMock":79,"org.easymock.samples.ExampleTest.voteAgainstRemovals":275,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":255,"org.easymock.tests.UsageVarargTest.differentLength":179,"org.easymock.tests2.CallbackTest.callback":165,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":139,"org.easymock.tests.UsageTest.openCallCountByLastCall":270,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":296,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":147,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":1,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":185,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":315,"org.easymock.tests.UsageCallCountTest.tooFewCalls":187,"org.easymock.tests.UsageOverloadedMethodTest.overloading":273,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":308,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":8,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":272,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":251,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":84,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":233,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":55,"org.easymock.tests.UsageThrowableTest.throwCheckedException":263,"org.easymock.tests2.EasyMockSupportClassTest.testAll":90,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":98,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":304,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":87,"org.easymock.tests2.CaptureTest.testCaptureAll":220,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":307,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":85,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":83,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":152,"org.easymock.tests.MockNameTest.defaultName":174,"org.easymock.tests2.UsageConstraintsTest.testMatches":9,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":238,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":25,"org.easymock.samples.ExampleTest.voteForRemovals":278,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":119,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":217,"org.easymock.tests2.NameTest.nameForNiceMock":42,"org.easymock.tests2.DependencyTest.testInterfaceMocking":218,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":126,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":115,"org.easymock.samples.BasicClassMockTest.testPrintContent":108,"org.easymock.tests2.DelegateToTest.testStubDelegate":239,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":265,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":162,"org.easymock.tests2.AnswerTest.stubAnswer":212,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":314,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":29,"org.easymock.tests2.UsageConstraintsTest.greaterThan":10,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":117,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":267,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":69,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":200,"org.easymock.samples.ExampleTest.voteForRemoval":276,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":214,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":258,"org.easymock.tests.UsageExpectAndReturnTest.floatType":242,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":177,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":94,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":64,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":34,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":11,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":182,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":2,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":106,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":153,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":52,"org.easymock.tests2.SerializationTest.test":38,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":112,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":121,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":206,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":137,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":261,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":241,"org.easymock.tests2.UsageConstraintsTest.testSame":5,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":309,"org.easymock.tests2.CaptureTest.testCaptureFirst":58,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":146,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":159,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":184,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":247,"org.easymock.tests.GenericTest.testPackageScope":97,"org.easymock.tests2.CaptureTest.testCapture2_2446744":222,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":216,"org.easymock.tests2.UsageTest.moreThanOneArgument":122,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":44,"org.easymock.tests2.NameTest.nameForMock":40,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":189,"org.easymock.tests.UsageExpectAndReturnTest.longType":243,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":205,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":305,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":252,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":80,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":303,"org.easymock.tests2.UsageStrictMockTest.differentMethods":124,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":141,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":22,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":35,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":244,"org.easymock.tests.UsageCallCountTest.tooManyCalls":190,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":301,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":269,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":186,"org.easymock.tests2.MockedExceptionTest.testRealException":286,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":248,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":178,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":203,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":292,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":15,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":264,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":31,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":82,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":72,"org.easymock.tests2.UsageConstraintsTest.testContains":7,"org.easymock.tests2.NameTest.nameForStrictMock":41,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":70,"org.easymock.tests2.UsageConstraintsTest.testFind":3,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":274,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":283,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":62,"org.easymock.tests.MockTypeTest.fromEasyMockClass":175,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":197,"org.easymock.tests.UsageExpectAndReturnTest.object":250,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":234,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":130,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":65,"org.easymock.tests.ErrorMessageTest.testGetters":131,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":73,"org.easymock.tests2.UsageStrictMockTest.range":123,"org.easymock.tests2.UsageConstraintsTest.lessThan":14,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":149,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":114,"org.easymock.tests.UsageTest.exactCallCountByLastCall":196,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":21,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":116,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":145,"org.easymock.tests2.CaptureTest.testCaptureRightOne":57,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":201,"org.easymock.tests2.ConstraintsToStringTest.findToString":319,"org.easymock.tests2.UsageConstraintsTest.testOr":6,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":118,"org.easymock.tests.UsageRangeTest.combination":180,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":256,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":60,"org.easymock.tests.UsageTest.wrongArguments":193,"org.easymock.tests2.MockBuilderTest.testWithConstructor":140,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":95,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":245,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":253,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":138,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":188,"org.easymock.tests2.UsageConstraintsTest.cmpTo":232,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":110,"org.easymock.tests2.UsageTest.openCallCountByLastCall":225,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":226,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":282,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":210,"org.easymock.tests2.CaptureTest.testCaptureFromStub":0,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":74,"org.easymock.tests.UsageTest.unexpectedCallWithArray":192,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":171,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":294,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":262,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":198,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":254,"org.easymock.tests2.CaptureTest.testCapture":56,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":199,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":67,"org.easymock.tests2.UsageConstraintsTest.constraints":160,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":170,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":293,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":93,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":169,"org.easymock.tests2.CompareToTest.testGreateThan":318,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":53,"org.easymock.tests2.UsageTest.resumeIfFailure":158,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":88,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":18,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":246,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":100,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":19,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":183,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":132,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":148}}]

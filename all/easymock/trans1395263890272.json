[{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.LogicalOperator:62","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,36,37,37,38,39,40,41,42,43,44,45,46,47,48],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"finalizeMethod","method":"finalizeMethod"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[64,65,66],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1205","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:269","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","type":"CtThrowImpl"},"failures":[67,68,69,70],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:721","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"failures":[71,72,73,22,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[113],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[114,115],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[9,116,10,117],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:67","failures":[118],"status":-1,"binaryOperator":"(\"Failed to read \" + java.lang.String)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[119,120,121,122,123,124,125],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"failures":[126,127,128,129,130,131],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[118,132,133,134],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1065","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[113],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:355","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[135,136],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[18],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:180","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[5,137],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.LastControl:85","failures":[138,66,139,140],"status":-1,"binaryOperator":"(java.util.Stack<org.easymock.IArgumentMatcher> != null)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[139],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.CompareTo:49","failures":[141,142,143,144,145],"status":-1,"binaryOperator":"(((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\")","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,61,62],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[47],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.matchers.EndsWith:40","failures":[162],"status":-1,"binaryOperator":"((\"endsWith(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:41","sourceCode":"new java.util.Properties()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:210","sourceCode":"return org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[139],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[163,14,164],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:162","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[165],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:721","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[166,167,168,138,169,65,170,171,172,173,174,140,175,176,177,71,150,36,36,37,37,178,179,180,181,182,183,184,185,186,187,126,188,189,190,191,192,193,157,131,194,195,196,197],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[49,50,51,52,53,54,55,56,57,58,59,60,61,62],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:94","sourceCode":"java.util.List<org.easymock.IArgumentMatcher>.addAll(java.util.Stack<org.easymock.IArgumentMatcher>.subList(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int), java.util.Stack<org.easymock.IArgumentMatcher>.size()))","type":"CtInvocationImpl"},"failures":[198,64,138,65,199,66,139,140,200,201,202],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[166,167,168,138,169,65,170,171,172,173,174,140,175,176,177,71,150,36,36,37,37,178,179,180,181,182,184,185,186,187,126,188,157,131,194,195,196,197],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":64,"org.easymock.tests2.UsageTest.argumentsOrdered":52,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":104,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":109,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":164,"org.easymock.tests2.StubTest.stubWithReturnValue":71,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":119,"org.easymock.tests2.SerializationTest.testAllMockedMethod":10,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":107,"org.easymock.tests.MockingTest.testPartialClassMocking":46,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":113,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":193,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":96,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":117,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":84,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":25,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":165,"org.easymock.tests.UsageExpectAndThrowTest.object":94,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":120,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":126,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":188,"org.easymock.tests2.UsageTest.wrongArguments":50,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":185,"org.easymock.tests.UsageStrictMockTest.range":56,"org.easymock.samples.ConstructorCalledMockTest.testTax":36,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":28,"org.easymock.tests2.UsageConstraintsTest.testNull":138,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":95,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":13,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":4,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":187,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":59,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":103,"org.easymock.tests.UsageTest.moreThanOneArgument":160,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":195,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":132,"org.easymock.tests.UsageUnorderedTest.message":54,"org.easymock.tests.UsageVerifyTest.twoReturns":62,"org.easymock.tests2.ConstraintsToStringTest.endsWithToString":162,"org.easymock.tests.UsageTest.argumentsOrdered":60,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":34,"org.easymock.tests2.CaptureTest.testCapture_2617107":201,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":178,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":0,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":124,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":83,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":3,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":70,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":182,"org.easymock.tests.UsageExpectAndThrowTest.longType":87,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":108,"org.easymock.tests2.SerializationTest.testClass":9,"org.easymock.tests.LimitationsTest.mockNativeMethod":43,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":41,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":130,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":66,"org.easymock.tests2.CaptureTest.testAnd":200,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":18,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":152,"org.easymock.tests2.NameTest.nameForMocksControl":149,"org.easymock.tests2.MockedExceptionTest.testMockedException":73,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":194,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":105,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":88,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":48,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":11,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":5,"org.easymock.tests.MockingTest.testNicePartialClassMocking":47,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":99,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":15,"org.easymock.tests2.CompareToTest.testCompareEqual":143,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":110,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":199,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":33,"org.easymock.tests.MockingTest.testTwoMocks":45,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":97,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":92,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":51,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":175,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":134,"org.easymock.tests.UsageStrictMockTest.differentMethods":158,"org.easymock.tests2.MockBuilderTest.testCreateMockString":8,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":197,"org.easymock.tests.UsageExpectAndThrowTest.floatType":86,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":163,"org.easymock.tests.UsageVerifyTest.twoThrows":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":26,"org.easymock.samples.PartialClassMockTest.testGetArea":38,"org.easymock.tests2.CompareToTest.testLessOrEqual":145,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":179,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":20,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":85,"org.easymock.tests2.UsageConstraintsTest.testNotNull":140,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":79,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":72,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":189,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":2,"org.easymock.tests2.MockBuilderTest.testCreateMock":6,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":93,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":166,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":68,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":154,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":82,"org.easymock.tests.UsageCallCountTest.tooFewCalls":156,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":112,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":171,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":31,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":133,"org.easymock.tests2.EasyMockSupportClassTest.testAll":24,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":40,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":101,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":81,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":32,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":30,"org.easymock.tests2.UsageConstraintsTest.testMatches":172,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":196,"org.easymock.tests2.CompareToTest.testGreateOrEqual":144,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":123,"org.easymock.tests2.NameTest.nameForNiceMock":148,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":161,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":122,"org.easymock.samples.BasicClassMockTest.testPrintContent":35,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":78,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":111,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":157,"org.easymock.tests2.UsageConstraintsTest.greaterThan":173,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":21,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":159,"org.easymock.tests.UsageExpectAndReturnTest.floatType":127,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":129,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":23,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":16,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":37,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":174,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":75,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":44,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":167,"org.easymock.tests2.SerializationTest.test":116,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":77,"org.easymock.tests2.UsageConstraintsTest.testSame":169,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":106,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":63,"org.easymock.tests.GenericTest.testPackageScope":39,"org.easymock.tests2.UsageTest.moreThanOneArgument":153,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":7,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":136,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":190,"org.easymock.tests2.NameTest.nameForMock":146,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":102,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":183,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":100,"org.easymock.tests2.UsageStrictMockTest.differentMethods":151,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":69,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":131,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":128,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":98,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":155,"org.easymock.tests2.MockedExceptionTest.testRealException":74,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":192,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":89,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":150,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":186,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":29,"org.easymock.tests2.NameTest.nameForStrictMock":147,"org.easymock.tests2.UsageConstraintsTest.testContains":170,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":22,"org.easymock.tests2.UsageConstraintsTest.testFind":168,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":80,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":14,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":139,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":17,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":1,"org.easymock.tests2.UsageStrictMockTest.range":49,"org.easymock.tests2.UsageConstraintsTest.lessThan":176,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":121,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":184,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":191,"org.easymock.tests2.CaptureTest.testCaptureRightOne":202,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":118,"org.easymock.tests2.UsageConstraintsTest.testOr":65,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":125,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":12,"org.easymock.tests.UsageTest.wrongArguments":58,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":42,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":135,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":67,"org.easymock.tests2.CompareToTest.testLessThan":141,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":76,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":114,"org.easymock.tests2.CaptureTest.testCaptureFromStub":177,"org.easymock.tests.UsageTest.unexpectedCallWithArray":57,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":53,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":91,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":55,"org.easymock.tests2.UsageConstraintsTest.constraints":198,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":19,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":90,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":115,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":27,"org.easymock.tests2.CompareToTest.testGreateThan":142,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":180,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":137,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":181}}]

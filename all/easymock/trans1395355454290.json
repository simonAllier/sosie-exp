[{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[0,1],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[2],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[3],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.NotNull:36","failures":[4],"status":-1,"binaryOperator":"java.lang.Object != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[5,6,7,8,8,9,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"result","equalsMethod":"result"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[60,0,1],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[1],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"shouldBeUsedInOneThread"}},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[61],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:49","sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","type":"CtInvocationImpl"},"failures":[62,63,64,65,66],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:40","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[67],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if (org.easymock.ConstructorArgs == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[68,69,70,71,72,73,52,55,74,75,76],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[3],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[77,23,78,24],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:986","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[79],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[6,7,80,81,82,83,84,85,86,87,88,89,90,91,92,10,11,93,13,94,95,96,97,98,99,100,101,102,103,104,105,106,14,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,22,226,227,228,229,2,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,3,245,79,246,247,4,248,249,250,251,0,1,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,78,24,271,272,273,274,275,276,277,61,278,279,280,281,282,283,284,285,286,287,288,289,39,40,290,41,42,43,45,50,53,291,292,293,294,295,296,297,298,299,300,56],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"failures":[301,302],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[98,303,304,305,123,126,127,128,129,130,157,177,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,203,293],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:52","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:57","sourceCode":"try {\n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.IMocksBehavior.addActual(org.easymock.internal.Invocation);\n    try {\n        return org.easymock.internal.Result.answer();\n    } catch (final java.lang.Throwable java.lang.Throwable) {\n        if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n            throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n        } \n        throw java.lang.Throwable;\n    }\n} finally {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation();\n}","type":"CtTryImpl"},"failures":[5,6,7,80,8,9,81,82,83,84,85,86,87,88,89,90,306,307,308,309,310,10,11,13,94,95,96,97,98,99,100,101,102,103,311,104,105,106,14,107,108,109,110,111,112,113,114,115,116,312,313,117,118,119,314,120,121,122,123,124,125,126,127,128,129,130,16,17,18,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,315,164,165,166,167,168,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,316,317,318,319,320,321,204,322,205,206,207,208,209,212,213,214,215,216,217,218,323,219,220,221,222,223,224,225,22,226,227,228,229,2,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,3,245,79,246,247,4,248,249,250,251,0,1,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,23,78,24,271,272,273,274,324,325,326,327,25,27,29,30,31,32,33,34,36,275,276,277,328,61,278,279,280,329,281,330,282,283,37,284,285,286,287,288,331,289,39,40,290,41,42,43,44,45,46,47,48,49,50,51,52,53,291,54,55,292,293,294,332,295,296,297,298,299,300,56,57,58,59],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[5,6,7,80,8,8,9,9,81,82,83,84,85,86,87,88,89,90,333,91,92,334,335,10,11,12,13,94,95,96,97,98,99,336,100,101,102,103,104,105,106,14,107,108,109,110,111,112,113,114,337,115,116,313,117,118,119,314,120,121,122,303,304,305,123,124,125,126,127,128,129,130,15,16,17,18,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,315,164,165,166,167,168,171,338,172,173,174,175,176,177,178,339,340,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,341,199,200,201,342,202,203,343,344,345,346,347,321,204,322,205,206,207,208,209,348,349,350,351,352,353,212,213,214,215,216,217,218,323,219,220,221,222,223,224,225,22,226,227,228,229,2,230,231,232,233,234,235,354,236,237,238,239,240,241,242,243,244,3,245,79,246,247,4,248,249,250,251,0,1,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,23,78,24,355,271,272,273,356,274,27,29,31,32,34,275,276,277,328,61,278,279,280,329,281,330,282,283,37,284,357,358,285,286,287,288,289,39,40,290,41,42,43,45,47,48,49,50,51,52,53,291,54,55,292,293,294,359,360,361,362,332,295,296,297,298,299,300,56,57,58,59],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[355],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:52","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:57","sourceCode":"try {\n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.IMocksBehavior.addActual(org.easymock.internal.Invocation);\n    try {\n        return org.easymock.internal.Result.answer();\n    } catch (final java.lang.Throwable java.lang.Throwable) {\n        if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n            throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n        } \n        throw java.lang.Throwable;\n    }\n} finally {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation();\n}","type":"CtTryImpl"},"failures":[5,6,7,80,8,9,81,82,83,84,85,86,87,88,89,90,306,307,308,309,310,10,11,13,94,95,96,97,98,99,100,101,102,103,311,104,105,106,14,107,108,109,110,111,112,113,114,115,116,312,313,117,118,119,314,120,121,122,123,124,125,126,127,128,129,130,16,17,18,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,315,164,165,166,167,168,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,316,317,318,319,320,321,204,322,205,206,207,208,209,212,213,214,215,216,217,218,323,219,220,221,222,223,224,225,22,226,227,228,229,2,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,3,245,79,246,247,4,248,249,250,251,0,1,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,23,78,24,271,272,273,274,324,325,326,327,25,27,29,30,31,32,33,34,36,275,276,277,328,61,278,279,280,329,281,330,282,283,37,284,285,286,287,288,331,289,39,40,290,41,42,43,44,45,46,47,48,49,50,51,52,53,291,54,55,292,293,294,332,295,296,297,298,299,300,56,57,58,59],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[5,6,7,80,8,9,81,82,83,84,85,86,87,88,89,363,90,333,91,92,334,335,306,307,308,309,310,364,10,11,12,93,365,366,13,367,94,95,96,97,98,99,336,368,100,101,102,103,311,104,105,106,369,370,371,372,373,374,375,376,377,60,378,379,380,14,107,108,109,110,111,112,113,114,381,337,382,383,115,116,312,313,117,118,119,314,120,121,122,303,304,305,123,124,125,126,127,128,129,130,384,385,386,387,388,389,390,391,392,393,394,15,16,17,395,18,396,397,398,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,399,162,163,315,164,165,166,167,168,400,19,401,402,403,404,169,170,171,338,172,173,174,175,176,177,178,339,340,405,20,406,407,408,409,21,410,411,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,341,199,200,201,342,202,203,343,344,316,345,346,347,317,318,319,320,321,204,322,205,206,207,208,209,348,349,350,351,210,412,413,211,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,352,432,433,434,435,436,353,437,212,213,214,215,216,217,218,323,219,220,221,222,223,438,439,440,441,442,443,444,224,225,22,226,227,228,229,2,445,230,231,232,233,234,235,354,236,237,238,239,240,241,242,243,244,3,245,79,246,247,4,248,249,446,447,448,449,450,451,250,452,453,454,455,456,457,251,0,1,252,253,458,459,460,461,462,254,463,464,465,466,467,468,255,256,257,258,259,260,261,262,263,264,265,266,267,268,469,470,269,270,23,78,24,355,271,272,273,356,274,324,325,326,327,25,68,27,28,69,471,29,30,31,70,32,472,473,33,34,72,36,275,276,277,328,61,278,279,280,329,281,330,282,283,37,73,474,284,357,358,285,286,287,288,331,289,39,40,290,41,42,43,44,475,45,476,477,46,47,48,49,478,479,50,51,52,53,480,291,54,55,74,292,293,294,481,359,360,361,362,332,295,296,297,298,299,300,482,483,484,56,485,486,57,487,488,489,490,491,492,493,494,495,58,496,497,498,499,500,59,501,502],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:191","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[1],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[94,95,96,97,98,99,114,115,118,122,123,125,126,127,128,129,130,157,176,177,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,203,224,225,22,226,275,280,293],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"failures":[503],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[94,95,96,97,98,99,114,115,118,122,125,129,130,176,177,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,203,224,225,22,226,275,280,293],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":2,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":115,"org.easymock.tests2.UsageTest.argumentsOrdered":330,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":221,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":452,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":426,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":278,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":80,"org.easymock.tests2.DelegateToTest.testReturnException":271,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":95,"org.easymock.tests.MockingTest.testPartialClassMocking":16,"org.easymock.tests.MockClassControlTest.testToString":401,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":481,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":337,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":479,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":434,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":490,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":179,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":57,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":270,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":235,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":174,"org.easymock.tests2.UsageTest.wrongArguments":328,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":468,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":319,"org.easymock.samples.ExampleTest.answerVsDelegate":85,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":21,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":397,"org.easymock.tests2.UsageConstraintsTest.testNull":231,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":41,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":170,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":220,"org.easymock.tests2.CaptureTest.testPrimitive":258,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":178,"org.easymock.tests.UsageTest.moreThanOneArgument":116,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":198,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":290,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":109,"org.easymock.tests.UsageTest.argumentsOrdered":314,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":333,"org.easymock.tests.UsageVarargTest.varargIntAccepted":161,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":431,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":151,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":25,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":456,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":440,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":30,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":418,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":155,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":254,"org.easymock.tests.ReplayStateInvalidUsageTest.times":377,"org.easymock.tests2.DependencyTest.testClassMocking":469,"org.easymock.tests2.AnswerTest.answer":284,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":354,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":432,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":327,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":407,"org.easymock.tests2.CaptureTest.testAnd":255,"org.easymock.tests2.UsageTest.strictResetToDefault":276,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":46,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":69,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":108,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":172,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":216,"org.easymock.tests2.DelegateToTest.testDelegate":274,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":335,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":194,"org.easymock.tests.LimitationsTest.mockFinalMethod":367,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":98,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":310,"org.easymock.tests2.DependencyTest.testClassMockingSupport":470,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":339,"org.easymock.tests2.CaptureTest.testCapture1_2446744":259,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":475,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":192,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":325,"org.easymock.tests.UsageThrowableTest.throwError":123,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":371,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":409,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":457,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":380,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":111,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":502,"org.easymock.samples.PartialClassMockTest.testGetArea":5,"org.easymock.tests.MockingTest.testInterfaceMocking":395,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":372,"org.easymock.tests2.CompareToTest.testLessOrEqual":66,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":152,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":350,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":491,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":415,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":180,"org.easymock.tests2.UsageTest.niceToStrict":61,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":416,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":29,"org.easymock.tests2.MockBuilderTest.testCreateMock":33,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":498,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":465,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":188,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":217,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":406,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":305,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":336,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":317,"org.easymock.tests.UsageOverloadedMethodTest.overloading":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":500,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":495,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":203,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":240,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":142,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":112,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":239,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":264,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":399,"org.easymock.tests.MockClassControlTest.testEquals":169,"org.easymock.tests2.EasyMockSupportClassTest.testAll":56,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":11,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":196,"org.easymock.tests2.CaptureTest.testCaptureAll":256,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":308,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":326,"org.easymock.tests.MockNameTest.defaultName":383,"org.easymock.tests2.UsageConstraintsTest.testMatches":241,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":110,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":369,"org.easymock.samples.ExampleTest.voteForRemovals":89,"org.easymock.tests.UsageVarargTest.allKinds":168,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":156,"org.easymock.samples.BasicClassMockTest.testPrintContent":7,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":309,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":129,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":332,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":453,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":99,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":356,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":391,"org.easymock.tests2.UsageConstraintsTest.greaterThan":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":485,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":338,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":49,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":392,"org.easymock.samples.ExampleTest.voteForRemoval":86,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":478,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":0,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":410,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":441,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":44,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":14,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":275,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":473,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":423,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":214,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":125,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":483,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":94,"org.easymock.tests2.CaptureTest.testCaptureFirst":268,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":355,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":422,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":215,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":283,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":316,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":138,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":252,"org.easymock.tests2.CaptureTest.testCapture2_2446744":267,"org.easymock.tests2.UsageTest.moreThanOneArgument":277,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":433,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":34,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":167,"org.easymock.tests.GenericTest.testBridgedEquals":93,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":104,"org.easymock.tests.UsageExpectAndReturnTest.longType":134,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":212,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":306,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":35,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":197,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":246,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":341,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":195,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":107,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":346,"org.easymock.tests.UsageCallCountTest.tooManyCalls":105,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":100,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":499,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":139,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":467,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":184,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":128,"org.easymock.tests.MockingTest.testNiceClassMocking":398,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":51,"org.easymock.tests.MockingTest.testClassMocking":394,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":26,"org.easymock.tests2.UsageConstraintsTest.testContains":238,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":368,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":22,"org.easymock.tests2.UsageConstraintsTest.testFind":230,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":114,"org.easymock.tests.MockTypeTest.fromEasyMockClass":408,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":289,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":321,"org.easymock.tests.UsageExpectAndReturnTest.object":141,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":45,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":466,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":219,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":163,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":211,"org.easymock.tests.UsageTest.exactCallCountByLastCall":120,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":121,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":421,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":91,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":381,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":73,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":159,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":147,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":202,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":448,"org.easymock.tests.MockClassControlTest.testHashCode":404,"org.easymock.tests2.EasyMockSupportTest.testVerify":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":493,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":92,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":201,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":304,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":324,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":446,"org.easymock.tests.UsageVarargTest.varargCharAccepted":162,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":384,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":295,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":437,"org.easymock.tests2.UsageTest.openCallCountByLastCall":279,"org.easymock.tests.DefaultClassInstantiatorTest.object":385,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":222,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":303,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":412,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":494,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":186,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":126,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":461,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":447,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":403,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":47,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":185,"org.easymock.tests.CapturesMatcherTest.test":301,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":148,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":345,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":402,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":59,"org.easymock.tests2.UsageTest.resumeIfFailure":282,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":20,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":439,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":97,"org.easymock.tests2.StubTest.stubWithReturnValue":293,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":70,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":140,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":247,"org.easymock.tests2.SerializationTest.testAllMockedMethod":24,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":352,"org.easymock.samples.SupportTest.voteForRemovals":83,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":364,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":450,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":191,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":77,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":353,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":357,"org.easymock.tests.UsageExpectAndThrowTest.object":189,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":382,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":245,"org.easymock.tests2.DelegateToTest.testWrongClass":273,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":199,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":200,"org.easymock.samples.ConstructorCalledMockTest.testTax":8,"org.easymock.tests.UsageStrictMockTest.range":207,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":443,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":323,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":50,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":190,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":482,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":119,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":378,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":318,"org.easymock.tests2.CaptureTest.testCaptureNone":263,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":351,"org.easymock.tests.UsageUnorderedTest.message":106,"org.easymock.tests.UsageVerifyTest.twoReturns":158,"org.easymock.tests.UsageVarargTest.varargByteAccepted":166,"org.easymock.tests2.ThreadingTest.testThreadSafe":251,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":496,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":103,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":414,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":6,"org.easymock.tests2.CaptureTest.testCapture_2617107":257,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":405,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":435,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":177,"org.easymock.tests2.UsageConstraintsTest.any":236,"org.easymock.tests2.StubTest.stub":292,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":376,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":436,"org.easymock.tests.UsageExpectAndThrowTest.longType":182,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":96,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":389,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":375,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":297,"org.easymock.tests2.SerializationTest.testClass":23,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":250,"org.easymock.tests.LimitationsTest.mockNativeMethod":13,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":150,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":12,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":460,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":300,"org.easymock.tests2.NameTest.nameForMocksControl":362,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":462,"org.easymock.tests2.MockedExceptionTest.testMockedException":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":486,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":118,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":183,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":18,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":331,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":39,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":32,"org.easymock.tests.MockingTest.testNicePartialClassMocking":17,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":43,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":458,"org.easymock.tests2.CompareToTest.testCompareEqual":64,"org.easymock.tests2.CaptureTest.testCaptureLast":262,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":340,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":55,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":234,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":79,"org.easymock.tests.MockingTest.testTwoMocks":15,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":74,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":131,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":187,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":281,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":248,"org.easymock.samples.ExampleTest.removeNonExistingDocument":363,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":464,"org.easymock.tests.UsageStrictMockTest.differentMethods":208,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":373,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":449,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":387,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":1,"org.easymock.tests2.MockBuilderTest.testCreateMockString":36,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":400,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":487,"org.easymock.tests.UsageExpectAndThrowTest.floatType":181,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":242,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":484,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":285,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":474,"org.easymock.tests.UsageVerifyTest.twoThrows":157,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":58,"org.easymock.samples.ExampleTest.voteAgainstRemoval":87,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":427,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":349,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":48,"org.easymock.tests.LimitationsTest.privateConstructor":366,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":76,"org.easymock.tests2.UsageConstraintsTest.testNotNull":4,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":130,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":224,"org.easymock.tests2.UsageTest.defaultResetToNice":329,"org.easymock.samples.ExampleTest.voteAgainstRemovals":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":428,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":146,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":459,"org.easymock.tests.UsageVarargTest.differentLength":315,"org.easymock.tests2.CallbackTest.callback":294,"org.easymock.tests2.UsageConstraintsTest.equals":445,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":476,"org.easymock.tests.UsageTest.openCallCountByLastCall":117,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":227,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":176,"org.easymock.tests.UsageCallCountTest.tooFewCalls":101,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":53,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":320,"org.easymock.tests.UsageThrowableTest.throwCheckedException":127,"org.easymock.tests.MockingTest.testStrictClassMocking":393,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":122,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":54,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":463,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":52,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":60,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":291,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":287,"org.easymock.tests.ObjectMethodsTest.testHashCode":413,"org.easymock.tests2.CompareToTest.testGreateOrEqual":65,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":253,"org.easymock.tests2.NameTest.nameForNiceMock":361,"org.easymock.tests2.DependencyTest.testInterfaceMocking":269,"org.easymock.samples.ExampleTest.addDocument":88,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":497,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":501,"org.easymock.tests2.DelegateToTest.testStubDelegate":272,"org.easymock.tests2.AnswerTest.stubAnswer":286,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":205,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":472,"org.easymock.tests.UsageVarargTest.varargLongAccepted":165,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":209,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":425,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":149,"org.easymock.tests.UsageExpectAndReturnTest.floatType":133,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":37,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":9,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":455,"org.easymock.tests.UsageThrowableTest.noUpperLimit":124,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":244,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":343,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":228,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":438,"org.easymock.tests2.SerializationTest.test":78,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":260,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":386,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":132,"org.easymock.tests2.UsageConstraintsTest.testSame":232,"org.easymock.samples.SupportTest.addDocument":82,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":480,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":374,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":488,"org.easymock.tests.GenericTest.testPackageScope":10,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":334,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":420,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":454,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":396,"org.easymock.tests2.NameTest.nameForMock":359,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":143,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":72,"org.easymock.tests2.UsageStrictMockTest.differentMethods":299,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":477,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":135,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":193,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":210,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":173,"org.easymock.tests2.MockedExceptionTest.testRealException":226,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":411,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":444,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":430,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":429,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":296,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":175,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":379,"org.easymock.tests2.NameTest.nameForStrictMock":360,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":471,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":288,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":42,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":442,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":388,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":3,"org.easymock.tests.ErrorMessageTest.testGetters":67,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":27,"org.easymock.tests2.UsageStrictMockTest.range":298,"org.easymock.tests2.UsageConstraintsTest.lessThan":249,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":503,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":451,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":424,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":213,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":492,"org.easymock.tests2.CaptureTest.testCaptureRightOne":265,"org.easymock.tests2.UsageConstraintsTest.testOr":233,"org.easymock.tests.UsageRangeTest.combination":171,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":40,"org.easymock.tests.UsageTest.wrongArguments":313,"org.easymock.tests2.MockBuilderTest.testWithConstructor":68,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":489,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":19,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":136,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":417,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":144,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":390,"org.easymock.tests.UsageVarargTest.varargShortAccepted":164,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":311,"org.easymock.tests2.UsageConstraintsTest.cmpTo":237,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":358,"org.easymock.tests2.CompareToTest.testLessThan":62,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":419,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":280,"org.easymock.tests2.CaptureTest.testCaptureFromStub":266,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":370,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":28,"org.easymock.tests.UsageTest.unexpectedCallWithArray":312,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":322,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":102,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":71,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":145,"org.easymock.tests2.CaptureTest.testCapture":302,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":206,"org.easymock.tests2.UsageConstraintsTest.constraints":229,"org.easymock.samples.ExampleTest.addAndChangeDocument":90,"org.easymock.tests.UsageStrictMockTest.testVerify":348,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":81,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":204,"org.easymock.tests2.CompareToTest.testGreateThan":63,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":307,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":261,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":153,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":38,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":137,"org.easymock.tests.LimitationsTest.abstractClass":365,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":154,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":344,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":160,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":218}}]

[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,6,7,8,9],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"clazz":"parameterType"}},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[10,11,12],"status":-1,"binaryOperator":"java.lang.String == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:246","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:111","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.createTypeVariableMap(java.lang.reflect.Method.getDeclaringClass())","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidClassProxyFactory:42","sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs());\n} else {\n    try {\n        org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n        java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n        com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n    } catch (java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n    }\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:117","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[13],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1776","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"regex","key":"regex"}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:39","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","type":"CtReturnImpl"},"failures":[14],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[15,16,17],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:159","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"failures":[18],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:39","sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"failures":[19,20,21,22,23,24,25],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:318","sourceCode":"return true","type":"CtReturnImpl"},"failures":[26,27],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:90","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:183","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Any:36","sourceCode":"return true","type":"CtReturnImpl"},"failures":[28,29,30,19,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:133","failures":[51,52,53],"status":-1,"binaryOperator":"java.lang.ClassLoader == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,28,29,26,98,99,27,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,30,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,19,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,31,202,20,203,204,205,32,33,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,34,35,36,37,38,260,21,22,261,39,40,41,42,43,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,289,290,290,291,292,293,294,295,296,297,298,299,300,301,302,303,0,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,11,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,44,403,25,404,405,406,407,408,409,410,411,412,15,413,414,415,416,417,45,418,419,420,46,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,9,438,439,440,441,442,443,444,445,446,447,448,449,450,13,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,47,16,489,490,491,492,48,49,493,17,494,495,50],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"failures":[442,463],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:41","sourceCode":"org.easymock.IArgumentMatcher.appendTo(java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[496],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1659","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(long[]))","type":"CtInvocationImpl"},"failures":[423],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[87,90,97,111,112,113,114,115,117,120,121,122,123,124,142,143,144,145,146,191,192,193,194,195,196,198,262,264,265,266,267,268,269,289,289,290,290,292,293,294,497,295,297,298,300,301,302,303,304,305,306,307,498,309,499,500,501,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,371,372,374,375,376,377,378,379,380,381,382,383,384,385,386,406,407,437,9,456,457,458,472,474,475,476,477,478,480,481],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"transplant":{"position":"org.easymock.internal.Invocation:180","sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"failures":[417],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"o":"expected"}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"failures":[502],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[413,45,420],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.internal.MockBuilder:223","failures":[295,302,325,377,386,456],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[87,90,97,111,112,113,114,115,117,120,121,122,123,124,142,143,144,145,146,191,192,193,194,195,196,198,211,262,263,264,265,266,267,268,269,289,289,290,290,292,293,294,497,295,503,297,298,300,301,302,303,304,305,306,307,498,504,309,499,500,502,505,506,501,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,371,372,374,375,376,377,378,379,380,381,382,383,384,385,386,406,407,437,9,456,457,458,472,474,475,476,477,478,480,481],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[503,504],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"failures":[502],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:251","sourceCode":"java.lang.Class<?> java.lang.Class<?> = this.org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:212","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"lastInvocation":"lastInvocation"}},{"position":"org.easymock.EasyMock:1135","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":413,"org.easymock.tests.ClassInstantiatorFactoryTest.getJVM":14,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":155,"org.easymock.tests2.UsageTest.argumentsOrdered":368,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":398,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":466,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":64,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":363,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":291,"org.easymock.tests2.DelegateToTest.testReturnException":483,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":126,"org.easymock.tests.MockingTest.testPartialClassMocking":114,"org.easymock.tests.MockClassControlTest.testToString":264,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":349,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":188,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":386,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":73,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":329,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":167,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":325,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":357,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":2,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":419,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":39,"org.easymock.tests2.UsageTest.wrongArguments":361,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":450,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":95,"org.easymock.samples.ExampleTest.answerVsDelegate":279,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":90,"org.easymock.tests2.UsageConstraintsTest.testNull":416,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":119,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":374,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":397,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":269,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":499,"org.easymock.tests2.CaptureTest.testPrimitive":489,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":43,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":186,"org.easymock.tests.UsageTest.moreThanOneArgument":156,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":373,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":272,"org.easymock.tests.UsageTest.argumentsOrdered":162,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":231,"org.easymock.tests.UsageVarargTest.varargIntAccepted":132,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":69,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":34,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":7,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":295,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":470,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":302,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":56,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":38,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":444,"org.easymock.tests.ReplayStateInvalidUsageTest.times":227,"org.easymock.tests2.DependencyTest.testClassMocking":354,"org.easymock.tests2.AnswerTest.answer":13,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":420,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":71,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":318,"org.easymock.tests2.CaptureTest.testAnd":488,"org.easymock.tests2.UsageTest.strictResetToDefault":359,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":299,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":381,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":271,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":392,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":258,"org.easymock.tests2.DelegateToTest.testDelegate":487,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":235,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":182,"org.easymock.tests.LimitationsTest.mockFinalMethod":124,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":30,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":151,"org.easymock.tests2.DependencyTest.testClassMockingSupport":355,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":212,"org.easymock.tests2.CaptureTest.testCapture1_2446744":490,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":11,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":180,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":316,"org.easymock.tests.UsageThrowableTest.throwError":26,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":221,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":89,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":471,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":274,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":343,"org.easymock.samples.PartialClassMockTest.testGetArea":292,"org.easymock.tests.MockingTest.testInterfaceMocking":116,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":222,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":35,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":153,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":168,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":211,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":330,"org.easymock.tests2.UsageTest.niceToStrict":362,"org.easymock.tests2.ThreadingTest.testChangeDefault":10,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":54,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":301,"org.easymock.tests2.MockBuilderTest.testCreateMock":306,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":338,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":447,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":176,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":393,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":166,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":78,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":93,"org.easymock.tests.UsageOverloadedMethodTest.overloading":276,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":334,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":340,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":424,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":107,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":247,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":275,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":423,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":18,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":493,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":133,"org.easymock.tests.MockClassControlTest.testEquals":268,"org.easymock.tests2.EasyMockSupportClassTest.testAll":322,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":144,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":184,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":500,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":149,"org.easymock.tests2.CaptureTest.testCaptureAll":47,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":317,"org.easymock.tests.MockNameTest.defaultName":218,"org.easymock.tests2.UsageConstraintsTest.testMatches":425,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":219,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":273,"org.easymock.samples.ExampleTest.voteForRemovals":283,"org.easymock.tests.UsageVarargTest.allKinds":141,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":260,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":150,"org.easymock.samples.BasicClassMockTest.testPrintContent":294,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":102,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":401,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":486,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":467,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":129,"org.easymock.tests2.UsageConstraintsTest.greaterThan":427,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":8,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":323,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":257,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":384,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":198,"org.easymock.samples.ExampleTest.voteForRemoval":280,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":385,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":311,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":498,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":91,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":377,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":97,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":358,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":305,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":61,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":390,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":320,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":125,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":482,"org.easymock.tests2.CaptureTest.testCaptureFirst":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":60,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":391,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":370,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":110,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":243,"org.easymock.tests2.CaptureTest.testCapture2_2446744":495,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":313,"org.easymock.tests2.UsageTest.moreThanOneArgument":360,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":72,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":307,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":140,"org.easymock.tests.GenericTest.testBridgedEquals":146,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":85,"org.easymock.tests.UsageExpectAndReturnTest.longType":239,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":388,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":147,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":504,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":185,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":432,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":261,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":183,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":216,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":270,"org.easymock.tests.UsageCallCountTest.tooManyCalls":86,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":80,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":339,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":244,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":449,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":172,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":101,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":476,"org.easymock.tests.MockingTest.testNiceClassMocking":120,"org.easymock.tests.MockingTest.testClassMocking":112,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":503,"org.easymock.tests2.UsageConstraintsTest.testContains":422,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":79,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":458,"org.easymock.tests2.UsageConstraintsTest.testFind":415,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":277,"org.easymock.tests.MockTypeTest.fromEasyMockClass":88,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":199,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":346,"org.easymock.tests.UsageExpectAndReturnTest.object":246,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":378,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":448,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":396,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":135,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":3,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":209,"org.easymock.tests.UsageTest.exactCallCountByLastCall":163,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":28,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":59,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":187,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":232,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":9,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":130,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":252,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":106,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":461,"org.easymock.tests.MockClassControlTest.testHashCode":267,"org.easymock.tests2.EasyMockSupportTest.testVerify":400,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":332,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":233,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":165,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":104,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":315,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":410,"org.easymock.tests.UsageVarargTest.varargCharAccepted":134,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":190,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":402,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":77,"org.easymock.tests2.UsageTest.openCallCountByLastCall":364,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":399,"org.easymock.tests.DefaultClassInstantiatorTest.object":191,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":164,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":207,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":174,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":333,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":501,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":27,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":442,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":460,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":266,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":382,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":173,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":253,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":215,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":341,"org.easymock.tests2.UsageTest.resumeIfFailure":369,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":87,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":128,"org.easymock.tests2.StubTest.stubWithReturnValue":348,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":0,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":433,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":245,"org.easymock.tests2.SerializationTest.testAllMockedMethod":474,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":70,"org.easymock.samples.SupportTest.voteForRemovals":288,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":142,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":463,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":179,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":76,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":451,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":189,"org.easymock.tests.UsageExpectAndThrowTest.object":177,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":430,"org.easymock.tests2.DelegateToTest.testWrongClass":485,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":32,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":33,"org.easymock.tests.UsageStrictMockTest.range":20,"org.easymock.samples.ConstructorCalledMockTest.testTax":289,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":408,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":395,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":475,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":178,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":303,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":161,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":319,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":94,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":154,"org.easymock.tests2.CaptureTest.testCaptureNone":49,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":52,"org.easymock.tests.UsageUnorderedTest.message":19,"org.easymock.tests.UsageVerifyTest.twoReturns":22,"org.easymock.tests.UsageVarargTest.varargByteAccepted":139,"org.easymock.tests2.ThreadingTest.testThreadSafe":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":336,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":83,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":210,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":293,"org.easymock.tests2.CaptureTest.testCapture_2617107":16,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":214,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":42,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":74,"org.easymock.tests2.UsageConstraintsTest.any":46,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":226,"org.easymock.tests2.StubTest.stub":347,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":217,"org.easymock.tests.UsageExpectAndThrowTest.longType":170,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":127,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":75,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":195,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":225,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":403,"org.easymock.tests2.SerializationTest.testClass":472,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":465,"org.easymock.tests.LimitationsTest.mockNativeMethod":123,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":145,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":255,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":506,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":441,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":405,"org.easymock.tests2.NameTest.nameForMocksControl":353,"org.easymock.tests2.MockedExceptionTest.testMockedException":457,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":443,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":324,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":160,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":171,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":117,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":345,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":371,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":304,"org.easymock.tests.MockingTest.testNicePartialClassMocking":115,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":376,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":439,"org.easymock.tests2.CaptureTest.testCaptureLast":48,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":213,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":481,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":418,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":431,"org.easymock.tests.MockingTest.testTwoMocks":113,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":236,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":175,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":367,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":435,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":12,"org.easymock.samples.ExampleTest.removeNonExistingDocument":284,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":446,"org.easymock.tests.UsageStrictMockTest.differentMethods":203,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":223,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":462,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":53,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":193,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":312,"org.easymock.tests2.MockBuilderTest.testCreateMockString":309,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":262,"org.easymock.tests.UsageExpectAndThrowTest.floatType":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":326,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":426,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":321,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":453,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":438,"org.easymock.tests.UsageVerifyTest.twoThrows":21,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":335,"org.easymock.samples.ExampleTest.voteAgainstRemoval":281,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":65,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":383,"org.easymock.tests.LimitationsTest.privateConstructor":122,"org.easymock.tests2.UsageConstraintsTest.testNotNull":434,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":456,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":103,"org.easymock.tests2.UsageTest.defaultResetToNice":366,"org.easymock.samples.ExampleTest.voteAgainstRemovals":278,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":66,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":251,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":440,"org.easymock.tests.UsageVarargTest.differentLength":136,"org.easymock.tests2.CallbackTest.callback":387,"org.easymock.tests2.UsageConstraintsTest.equals":414,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":379,"org.easymock.tests.UsageTest.openCallCountByLastCall":159,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":411,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":41,"org.easymock.tests.UsageCallCountTest.tooFewCalls":81,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":478,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":96,"org.easymock.tests.UsageThrowableTest.throwCheckedException":100,"org.easymock.tests.MockingTest.testStrictClassMocking":111,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":480,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":29,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":477,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":445,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":228,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":479,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":455,"org.easymock.tests.ObjectMethodsTest.testHashCode":208,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":6,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":314,"org.easymock.tests2.NameTest.nameForNiceMock":352,"org.easymock.tests2.DependencyTest.testInterfaceMocking":356,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":4,"org.easymock.samples.ExampleTest.addDocument":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":337,"org.easymock.tests2.DelegateToTest.testStubDelegate":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":342,"org.easymock.tests2.AnswerTest.stubAnswer":454,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":31,"org.easymock.tests.UsageVarargTest.varargLongAccepted":138,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":63,"org.easymock.tests.UsageExpectAndReturnTest.floatType":238,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":254,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":437,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":290,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":469,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":428,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":108,"org.easymock.tests.UsageThrowableTest.noUpperLimit":98,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":412,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":406,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":491,"org.easymock.tests2.SerializationTest.test":473,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":192,"org.easymock.tests2.UsageConstraintsTest.testSame":417,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":237,"org.easymock.samples.SupportTest.addDocument":287,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":224,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":327,"org.easymock.tests.GenericTest.testPackageScope":143,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":234,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":58,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":468,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":118,"org.easymock.tests2.NameTest.nameForMock":350,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":248,"org.easymock.tests2.UsageStrictMockTest.differentMethods":404,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":308,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":380,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":240,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":181,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":206,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":259,"org.easymock.tests2.MockedExceptionTest.testRealException":459,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":92,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":409,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":68,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":1,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":44,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":67,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":40,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":230,"org.easymock.tests2.NameTest.nameForStrictMock":351,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":300,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":344,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":375,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":407,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":429,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":23,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":194,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":297,"org.easymock.tests2.UsageStrictMockTest.range":25,"org.easymock.tests2.UsageConstraintsTest.lessThan":436,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":502,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":464,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":497,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":389,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":5,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":62,"org.easymock.tests2.CaptureTest.testCaptureRightOne":17,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":331,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":51,"org.easymock.tests2.UsageConstraintsTest.testOr":45,"org.easymock.tests.UsageRangeTest.combination":256,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":372,"org.easymock.tests.UsageTest.wrongArguments":158,"org.easymock.tests2.MockBuilderTest.testWithConstructor":296,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":328,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":263,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":241,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":55,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":249,"org.easymock.tests.UsageVarargTest.varargShortAccepted":137,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":196,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":84,"org.easymock.tests2.UsageConstraintsTest.cmpTo":421,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":452,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":57,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":365,"org.easymock.tests2.CaptureTest.testCaptureFromStub":494,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":220,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":298,"org.easymock.tests.UsageTest.unexpectedCallWithArray":157,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":201,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":82,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":250,"org.easymock.tests2.UsageConstraintsTest.constraints":15,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":202,"org.easymock.samples.ExampleTest.addAndChangeDocument":285,"org.easymock.tests2.ConstraintsToStringTest.notToString":496,"org.easymock.tests.UsageStrictMockTest.testVerify":205,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":286,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":200,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":148,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":492,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":505,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":36,"org.easymock.tests.LimitationsTest.abstractClass":121,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":242,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":109,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":37,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":394,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":131,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":24}}]

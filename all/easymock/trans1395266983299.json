[{"transplant":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:146","sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","type":"CtTryImpl"},"failures":[0,1,1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cached":"org.easymock.internal.MocksControl.classProxyFactory"}},{"position":"org.easymock.internal.RecordState:327","failures":[110,111,112,113],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[114],"status":-1,"binaryOperator":"(int <= int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:176","failures":[115,116,117,118,119,120,121,108],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[122,123],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","answer":"delegateTo"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:88","sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:60","sourceCode":"return org.easymock.internal.Result.answer()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:59","sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","type":"CtTryImpl"},"failures":[124,125],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[0,126,127,128,129,130,131,132,133,134,135,136,1,1,2,2,3,4,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,6,7,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,10,11,185,186,187,188,189,190,191,192,193,18,19,20,21,22,23,24,25,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,124,227,228,229,230,231,232,233,234,235,236,237,31,32,33,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,37,39,40,288,41,42,43,44,45,48,49,50,51,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,57,60,70,76,308,79,80,81,125,309,310,311,312,82,313,83,314,315,316,317,318,319,320,321,322,323,324,325,326,327,84,85,86,87,328,88,89,329,330,331,332,333,123,334,335,90,91,94,95,96,97,99,100,101,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,108],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[394,82,313,83],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[395],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.Capture:83","failures":[396],"status":-1,"binaryOperator":"(\"More than one value captured: \" + org.easymock.Capture<T>.(getValues()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:89","sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[397],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:83","sourceCode":"return int == int","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"failures":[398],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"maximum":"result","java.lang.Integer.MAX_VALUE":"result"}},{"position":"org.easymock.EasyMock:1848","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[0,126,127,128,129,130,131,133,134,135,136,1,2,3,4,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,6,7,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,10,185,186,187,188,189,190,191,192,193,19,195,196,202,203,206,207,208,209,211,219,220,221,222,223,224,227,230,232,235,236,237,31,32,33,238,239,240,241,242,243,248,249,250,251,252,253,254,270,271,272,273,274,275,276,277,278,279,281,282,283,284,285,286,287,37,399,39,288,41,42,43,45,48,50,289,290,291,292,294,295,296,297,298,299,302,303,304,307,57,60,70,76,308,79,80,81,125,309,310,311,312,82,313,83,314,315,316,317,318,319,320,321,322,323,324,325,326,327,84,85,86,87,328,88,89,329,330,331,332,333,123,335,90,94,95,96,97,337,338,340,341,344,347,350,351,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,388,389,390,391,392,393,108],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[400,365,382,388],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:157","failures":[401],"status":-1,"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:60","sourceCode":"return org.easymock.internal.Result.answer()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:59","sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","type":"CtTryImpl"},"failures":[124,125],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.LastControl:124","sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:126","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","type":"CtInvocationImpl"},"failures":[0,126,127,128,129,130,131,133,134,135,136,1,2,3,4,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,402,402,6,7,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,10,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,124,228,229,230,231,232,233,234,235,236,31,32,33,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,37,39,40,288,41,42,43,44,45,48,49,50,51,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,57,60,70,76,308,79,80,81,125,309,310,311,312,82,313,83,314,315,316,317,318,319,320,321,322,323,324,325,326,327,84,85,86,87,328,88,89,333,123,334,335,90,91,94,95,96,97,99,100,101,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,108],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[403,404],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1013","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"failures":[15,401],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[394,82,313,83],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.InjectionPlan:51","failures":[136,137,405,406,407,408,409,327,410,411,412,413,414,415,416,417,418,419,420,364,421,422,423,424,425,426],"status":-1,"binaryOperator":"(java.lang.String.length()) != 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:91","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[289,291,299,367,368,370,372,373,427,384,389],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[0,126,127,128,129,130,131,133,134,135,136,1,2,3,4,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,6,7,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,10,185,186,187,188,189,190,191,192,193,19,195,196,202,203,206,207,208,209,211,219,220,221,222,223,224,227,230,232,235,236,237,31,32,33,238,239,240,241,242,243,248,249,250,251,252,253,254,270,271,272,273,274,275,276,277,278,279,281,282,283,284,285,286,287,37,399,39,288,41,42,43,45,48,50,289,290,291,292,294,295,296,297,298,299,302,303,304,307,57,60,70,76,308,79,80,81,125,309,310,311,312,82,313,83,314,315,316,317,318,319,320,321,322,323,324,325,326,327,84,85,86,87,328,88,89,329,330,331,332,333,123,335,90,94,95,96,97,337,338,340,341,344,347,350,351,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,388,389,390,391,392,393,108],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[428,374,379,391],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"failures":[138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,184,196,200,201,204,205,210,215,219,220,221,222,223,224,124,249,79,80,81,125,336,343,363],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[429,110,111,430,268],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable","state":"state"}},{"position":"org.easymock.internal.matchers.Null:35","failures":[285,306,370,387],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1333","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.Capture:134","failures":[402],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","type":"CtReturnImpl"},"failures":[234,235,353,354],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Equals:57","failures":[],"status":0,"binaryOperator":"(((this.java.lang.Object) == null) && ((org.easymock.internal.matchers.Equals.java.lang.Object) == null)) || (((this.java.lang.Object) != null) && (this.java.lang.Object.equals(org.easymock.internal.matchers.Equals.java.lang.Object)))","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1862","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Same(T))","type":"CtInvocationImpl"},"failures":[371],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1191","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:40","sourceCode":"return java.lang.Object.equals(java.lang.Object)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[381],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:123","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"equalsMethod"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1708","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","type":"CtInvocationImpl"},"failures":[285,370],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[368],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"failures":[5,8,46,50,53,82,94,431,98,99,101,108,109],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:280","sourceCode":"for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n            org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        } \n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericInterfaces":"actualTypeArguments","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:76","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"m","equalsMethod":"m"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[207,208,209,211,232,235,236,338,351,354,355],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:32","sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[305],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:85","failures":[],"status":0,"binaryOperator":"(java.util.Stack<org.easymock.IArgumentMatcher> != null)","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":368,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":210,"org.easymock.tests2.UsageTest.argumentsOrdered":346,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":324,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":421,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":122,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":341,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":137,"org.easymock.tests2.DelegateToTest.testReturnException":333,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":220,"org.easymock.tests.MockingTest.testPartialClassMocking":31,"org.easymock.tests.MockClassControlTest.testToString":20,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":53,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":64,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":138,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":60,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":361,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":116,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":374,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":202,"org.easymock.tests2.UsageTest.wrongArguments":339,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":415,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":187,"org.easymock.samples.ExampleTest.answerVsDelegate":127,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":27,"org.easymock.tests2.UsageConstraintsTest.testNull":370,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":41,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":25,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":323,"org.easymock.tests2.CaptureTest.testPrimitive":292,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":206,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":157,"org.easymock.tests.UsageTest.moreThanOneArgument":211,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":288,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":252,"org.easymock.tests.UsageTest.argumentsOrdered":217,"org.easymock.tests.UsageVarargTest.varargIntAccepted":277,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":270,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":120,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":90,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":425,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":104,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":95,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":274,"org.easymock.tests.ReplayStateInvalidUsageTest.times":266,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":327,"org.easymock.tests2.DependencyTest.testClassMocking":106,"org.easymock.tests2.AnswerTest.answer":309,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":427,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":359,"org.easymock.tests2.CaptureTest.testAnd":289,"org.easymock.tests2.UsageTest.strictResetToDefault":337,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":48,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":251,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":181,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":318,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":114,"org.easymock.tests2.DelegateToTest.testDelegate":335,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":153,"org.easymock.tests.LimitationsTest.mockFinalMethod":38,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":223,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":193,"org.easymock.tests2.DependencyTest.testClassMockingSupport":107,"org.easymock.tests2.CaptureTest.testCapture1_2446744":293,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":151,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":357,"org.easymock.tests.UsageThrowableTest.throwError":194,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":260,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":426,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":254,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":78,"org.easymock.samples.PartialClassMockTest.testGetArea":0,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":261,"org.easymock.tests2.CompareToTest.testLessOrEqual":400,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":271,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":139,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":65,"org.easymock.tests2.UsageTest.niceToStrict":340,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":94,"org.easymock.tests2.MockBuilderTest.testCreateMock":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":73,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":412,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":147,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":319,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":113,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":238,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":185,"org.easymock.tests.UsageOverloadedMethodTest.overloading":248,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":69,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":75,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":124,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":379,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":170,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":247,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":395,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":378,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":298,"org.easymock.tests.MockClassControlTest.testEquals":24,"org.easymock.tests2.EasyMockSupportClassTest.testAll":57,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":7,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":155,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":191,"org.easymock.tests2.CaptureTest.testCaptureAll":290,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":358,"org.easymock.tests2.UsageConstraintsTest.testMatches":380,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":253,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":258,"org.easymock.samples.ExampleTest.voteForRemovals":131,"org.easymock.tests.UsageVarargTest.allKinds":285,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":207,"org.easymock.samples.BasicClassMockTest.testPrintContent":4,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":192,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":200,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":349,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":422,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":224,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":121,"org.easymock.tests2.UsageConstraintsTest.greaterThan":382,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":58,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":180,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":51,"org.easymock.samples.ExampleTest.voteForRemoval":128,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":17,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":52,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":304,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":44,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":10,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":336,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":430,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":316,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":196,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":55,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":219,"org.easymock.tests2.CaptureTest.testCaptureFirst":302,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":403,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":317,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":348,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":228,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":166,"org.easymock.tests2.CaptureTest.testCapture2_2446744":301,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":306,"org.easymock.tests2.UsageTest.moreThanOneArgument":338,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":100,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":284,"org.easymock.tests.GenericTest.testBridgedEquals":9,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":245,"org.easymock.tests.UsageExpectAndReturnTest.longType":162,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":189,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":314,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":156,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":387,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":154,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":110,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":250,"org.easymock.tests.UsageCallCountTest.tooManyCalls":246,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":74,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":167,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":414,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":143,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":199,"org.easymock.tests.MockingTest.testNiceClassMocking":34,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":85,"org.easymock.tests.MockingTest.testClassMocking":29,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":239,"org.easymock.tests2.UsageConstraintsTest.testContains":377,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":81,"org.easymock.tests2.UsageConstraintsTest.testFind":369,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":249,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":393,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":229,"org.easymock.tests.UsageExpectAndReturnTest.object":169,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":45,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":413,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":322,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":117,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":279,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":257,"org.easymock.tests.UsageTest.exactCallCountByLastCall":218,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":183,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":109,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":175,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":275,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":226,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":417,"org.easymock.tests.MockClassControlTest.testHashCode":23,"org.easymock.tests2.EasyMockSupportTest.testVerify":326,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":67,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":112,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":225,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":356,"org.easymock.tests.UsageVarargTest.varargCharAccepted":278,"org.easymock.tests2.CaptureTest.testCaptureMultiple":396,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":350,"org.easymock.tests2.UsageTest.openCallCountByLastCall":342,"org.easymock.tests.DefaultClassInstantiatorTest.object":11,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":325,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":255,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":145,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":68,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":197,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":408,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":416,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":22,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":49,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":144,"org.easymock.tests.CapturesMatcherTest.test":402,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":176,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":429,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":76,"org.easymock.tests2.UsageTest.resumeIfFailure":347,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":26,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":103,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":222,"org.easymock.tests2.StubTest.stubWithReturnValue":363,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":388,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":168,"org.easymock.tests2.SerializationTest.testAllMockedMethod":83,"org.easymock.samples.SupportTest.voteForRemovals":135,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":5,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":419,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":150,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":394,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":404,"org.easymock.tests.UsageExpectAndThrowTest.object":148,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":385,"org.easymock.tests2.DelegateToTest.testWrongClass":334,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":286,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":287,"org.easymock.samples.ConstructorCalledMockTest.testTax":1,"org.easymock.tests.UsageStrictMockTest.range":234,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":321,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":84,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":149,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":54,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":216,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":268,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":186,"org.easymock.tests2.CaptureTest.testCaptureNone":297,"org.easymock.tests.UsageUnorderedTest.message":158,"org.easymock.tests.UsageVerifyTest.twoReturns":209,"org.easymock.tests.UsageVarargTest.varargByteAccepted":283,"org.easymock.tests2.ThreadingTest.testThreadSafe":303,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":71,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":243,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":3,"org.easymock.tests2.CaptureTest.testCapture_2617107":291,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":399,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":205,"org.easymock.tests2.UsageConstraintsTest.any":375,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":265,"org.easymock.tests2.StubTest.stub":362,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":111,"org.easymock.tests.UsageExpectAndThrowTest.longType":141,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":221,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":15,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":264,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":352,"org.easymock.tests2.SerializationTest.testClass":82,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":364,"org.easymock.tests.LimitationsTest.mockNativeMethod":37,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":178,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":8,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":407,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":355,"org.easymock.tests2.NameTest.nameForMocksControl":332,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":409,"org.easymock.tests2.MockedExceptionTest.testMockedException":80,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":59,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":215,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":142,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":33,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":39,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":97,"org.easymock.tests.MockingTest.testNicePartialClassMocking":32,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":43,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":405,"org.easymock.tests2.CompareToTest.testCompareEqual":398,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":115,"org.easymock.tests2.CaptureTest.testCaptureLast":296,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":89,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":373,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":386,"org.easymock.tests.MockingTest.testTwoMocks":30,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":159,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":146,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":345,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":390,"org.easymock.samples.ExampleTest.removeNonExistingDocument":132,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":411,"org.easymock.tests.UsageStrictMockTest.differentMethods":235,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":262,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":418,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":13,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":305,"org.easymock.tests2.MockBuilderTest.testCreateMockString":101,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":18,"org.easymock.tests.UsageExpectAndThrowTest.floatType":140,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":61,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":381,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":56,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":310,"org.easymock.tests.UsageVerifyTest.twoThrows":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":70,"org.easymock.samples.ExampleTest.voteAgainstRemoval":129,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":50,"org.easymock.tests.LimitationsTest.privateConstructor":36,"org.easymock.tests2.UsageConstraintsTest.testNotNull":389,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":79,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":201,"org.easymock.tests2.UsageTest.defaultResetToNice":344,"org.easymock.samples.ExampleTest.voteAgainstRemovals":126,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":174,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":406,"org.easymock.tests.UsageVarargTest.differentLength":280,"org.easymock.tests2.CallbackTest.callback":308,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":46,"org.easymock.tests.UsageTest.openCallCountByLastCall":214,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":365,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":204,"org.easymock.tests.UsageCallCountTest.tooFewCalls":241,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":87,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":188,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":397,"org.easymock.tests.UsageThrowableTest.throwCheckedException":198,"org.easymock.tests.MockingTest.testStrictClassMocking":28,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":184,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":88,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":410,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":86,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":267,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":328,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":312,"org.easymock.tests2.CompareToTest.testGreateOrEqual":428,"org.easymock.tests.ObjectMethodsTest.testHashCode":256,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":119,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":307,"org.easymock.tests2.NameTest.nameForNiceMock":331,"org.easymock.tests2.DependencyTest.testInterfaceMocking":360,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":118,"org.easymock.samples.ExampleTest.addDocument":130,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":72,"org.easymock.tests2.DelegateToTest.testStubDelegate":123,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":77,"org.easymock.tests2.AnswerTest.stubAnswer":311,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":232,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":431,"org.easymock.tests.UsageVarargTest.varargLongAccepted":282,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":236,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":177,"org.easymock.tests.UsageExpectAndReturnTest.floatType":161,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":108,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":2,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":424,"org.easymock.tests.UsageThrowableTest.noUpperLimit":195,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":383,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":366,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":102,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":294,"org.easymock.tests2.SerializationTest.test":313,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":401,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":12,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":160,"org.easymock.tests2.UsageConstraintsTest.testSame":371,"org.easymock.samples.SupportTest.addDocument":134,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":263,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":62,"org.easymock.tests.GenericTest.testPackageScope":6,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":423,"org.easymock.tests2.NameTest.nameForMock":329,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":171,"org.easymock.tests2.UsageStrictMockTest.differentMethods":354,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":47,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":163,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":152,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":182,"org.easymock.tests2.MockedExceptionTest.testRealException":125,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":351,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":203,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":269,"org.easymock.tests2.NameTest.nameForStrictMock":330,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":93,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":392,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":42,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":105,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":384,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":14,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":91,"org.easymock.tests2.UsageStrictMockTest.range":353,"org.easymock.tests2.UsageConstraintsTest.lessThan":391,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":420,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":315,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":66,"org.easymock.tests2.CaptureTest.testCaptureRightOne":299,"org.easymock.tests2.UsageConstraintsTest.testOr":372,"org.easymock.tests.UsageRangeTest.combination":179,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":40,"org.easymock.tests.UsageTest.wrongArguments":213,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":63,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":19,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":164,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":172,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":16,"org.easymock.tests.UsageVarargTest.varargShortAccepted":281,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":244,"org.easymock.tests2.UsageConstraintsTest.cmpTo":376,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":343,"org.easymock.tests2.CaptureTest.testCaptureFromStub":300,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":259,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":92,"org.easymock.tests.UsageTest.unexpectedCallWithArray":212,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":231,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":242,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":173,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":233,"org.easymock.tests2.UsageConstraintsTest.constraints":367,"org.easymock.samples.ExampleTest.addAndChangeDocument":133,"org.easymock.tests.UsageStrictMockTest.testVerify":237,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":136,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":230,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":190,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":295,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":272,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":165,"org.easymock.tests.LimitationsTest.abstractClass":35,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":227,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":273,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":276,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":320}}]

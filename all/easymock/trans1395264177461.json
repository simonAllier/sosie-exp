[{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:361","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[25,26,27,28,29,30,31,32,33],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1039","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:63","sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1107","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2123","sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:32","sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:262","failures":[34,35,36,37,38,39,40,41,42,43,44,45,46,47,5,48,49,50,51,52,53,54,55,56,57,9,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,15,81,82,83,84],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:224","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[85],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:32","sourceCode":"new java.util.concurrent.locks.ReentrantLock()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:124","sourceCode":"java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"this.org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[86],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[87],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"m"}},{"transplant":{"position":"org.easymock.internal.RecordState:251","sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:212","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:326","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"position":"org.easymock.EasyMock:1107","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:48","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.specification.version\")","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[88,89,1,90,91,92,93,94,95,78,96,12,97,98,99],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[100],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[25,26,27,101,102,30,31,32,33],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[103,104],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[105,106],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[107,33,108,109],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:37","failures":[110,111,112,113,38,39,114,88,115,116,117,1,2,118,40,3,41,42,43,44,45,46,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,47,139,4,5,140,141,142,143,144,145,146,147,51,148,149,150,151,152,153,154,155,156,157,52,53,54,55,56,57,158,159,160,161,9,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,11,78,96,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,12,13,186,187,79,80,188,189,190,191,14,15,192,193,194,195,100,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,20,230,231,33,108,232],"status":-1,"binaryOperator":"(this.java.lang.Object) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","type":"CtInvocationImpl"},"failures":[233,210,211,234,235,236,237,238,212,213,239,214,240,241,215],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:52","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double.valueOf(0))","type":"CtInvocationImpl"},"failures":[119,120,127,134,57,159,58,59,66,73,242,165,243],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1373","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[89,244,245,91,246,247],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:593","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:92","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[86,248,249,250,251,252,105,253,197,198,199,254,106,255,256,257,202,33],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1290","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[228,18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[88,89,116,1,2,139,92,93,94,11,78,96,184,12,13,189,97,98,99,258,259,260,261],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[262,263,264,265],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:92","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[86,248,249,250,251,252,105,253,197,198,199,254,106,255,256,257,202,33],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"position":"org.easymock.internal.MockBuilder:210","failures":[266,266,267,267,102,30,32,268,33],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:138","sourceCode":"java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[89,116,1,2,139,92,93,94,269,11,78,96,184,12,13,189,97,98,99,258,259,260,261],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1581","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(boolean[]))","type":"CtInvocationImpl"},"failures":[270],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:36","failures":[110,34,35,36,37,271,272,0,273,274,275,276,277,278,103,279,111,280,104,281,112,113,38,39,114,88,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,115,89,116,117,1,2,118,299,40,3,41,42,43,44,45,46,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,300,301,85,302,303,304,47,139,91,92,4,5,93,94,140,305,6,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,48,49,50,328,141,142,143,144,145,329,330,331,332,333,146,334,147,51,335,336,95,148,149,150,337,151,152,338,153,154,155,156,157,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,52,53,54,55,56,57,359,7,8,360,361,86,362,363,364,365,248,366,367,158,159,368,369,249,370,371,372,373,374,375,160,161,9,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,10,376,377,378,11,78,96,379,380,242,381,382,383,384,385,386,387,388,389,390,162,163,164,165,166,167,168,169,170,171,172,391,173,266,267,250,174,175,176,177,178,179,392,393,394,395,396,180,397,398,399,400,401,402,403,404,181,182,405,183,184,185,12,13,186,187,79,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,80,188,189,97,190,191,14,15,422,98,99,192,193,81,82,83,84,194,195,100,423,196,102,30,424,425,258,259,260,261,426,427,253,428,429,430,197,431,198,31,199,432,32,433,254,434,255,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,200,461,462,201,463,256,464,465,268,466,467,257,202,468,469,470,203,471,472,204,205,473,474,475,476,477,206,207,208,478,209,210,211,234,235,236,237,238,212,213,239,214,240,241,215,216,217,218,219,220,221,222,479,223,224,225,226,480,481,482,483,484,485,486,227,487,488,489,490,491,492,493,494,243,495,263,16,17,228,496,18,229,19,20,230,497,498,499,500,21,270,501,22,502,264,23,503,504,505,506,265,231,24,507,33,108,109,232],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:251","sourceCode":"java.lang.Class<?> java.lang.Class<?> = this.org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:309","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"lastInvocation":"lastInvocation"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:176","sourceCode":"return false","type":"CtReturnImpl"},"failures":[508,25,26,27,28,29,101,102],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1803","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":228,"org.easymock.tests2.UsageTest.argumentsOrdered":99,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":47,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":225,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":397,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":314,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":191,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":174,"org.easymock.tests2.DelegateToTest.testReturnException":206,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":53,"org.easymock.tests.MockingTest.testPartialClassMocking":352,"org.easymock.tests.MockClassControlTest.testToString":370,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":425,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":303,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":470,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":323,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":445,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":441,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":58,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":269,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":182,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":25,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":497,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":112,"org.easymock.tests2.UsageTest.wrongArguments":97,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":492,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":242,"org.easymock.samples.ExampleTest.answerVsDelegate":168,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":248,"org.easymock.tests2.UsageConstraintsTest.testNull":229,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":357,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":462,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":224,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":375,"org.easymock.tests2.CaptureTest.testPrimitive":235,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":114,"org.easymock.tests.UsageTest.moreThanOneArgument":139,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":77,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":461,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":164,"org.easymock.tests.UsageTest.argumentsOrdered":94,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":359,"org.easymock.tests.UsageVarargTest.varargIntAccepted":150,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":319,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":141,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":426,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":29,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":408,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":401,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":431,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":306,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":145,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":227,"org.easymock.tests.ReplayStateInvalidUsageTest.times":290,"org.easymock.tests2.DependencyTest.testClassMocking":403,"org.easymock.tests2.AnswerTest.answer":203,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":498,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":321,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":495,"org.easymock.tests2.CaptureTest.testAnd":210,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":363,"org.easymock.tests2.UsageTest.strictResetToDefault":188,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":467,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":429,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":163,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":220,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":377,"org.easymock.tests2.DelegateToTest.testDelegate":209,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":361,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":73,"org.easymock.tests.LimitationsTest.mockFinalMethod":297,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":56,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":333,"org.easymock.tests2.DependencyTest.testClassMockingSupport":404,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":300,"org.easymock.tests2.CaptureTest.testCapture1_2446744":236,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":464,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":71,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":494,"org.easymock.tests.UsageThrowableTest.throwError":40,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":284,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":365,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":402,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":281,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":166,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":459,"org.easymock.samples.PartialClassMockTest.testGetArea":250,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":285,"org.easymock.tests.MockingTest.testInterfaceMocking":354,"org.easymock.tests2.CompareToTest.testLessOrEqual":262,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":142,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":446,"org.easymock.tests2.UsageTest.niceToStrict":190,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":59,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":305,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":197,"org.easymock.tests2.MockBuilderTest.testCreateMock":433,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":454,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":489,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":67,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":246,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":221,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":362,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":37,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":271,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":379,"org.easymock.tests.UsageOverloadedMethodTest.overloading":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":456,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":450,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":501,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":51,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":160,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":130,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":270,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":239,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":337,"org.easymock.tests2.EasyMockSupportClassTest.testAll":438,"org.easymock.tests.MockClassControlTest.testEquals":374,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":111,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":75,"org.easymock.tests2.CaptureTest.testCaptureAll":211,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":243,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":331,"org.easymock.tests.MockNameTest.defaultName":368,"org.easymock.tests2.UsageConstraintsTest.testMatches":22,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":165,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":282,"org.easymock.samples.ExampleTest.voteForRemovals":172,"org.easymock.tests.UsageVarargTest.allKinds":157,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":11,"org.easymock.samples.BasicClassMockTest.testPrintContent":177,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":332,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":45,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":405,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":478,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":398,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":57,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":389,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":101,"org.easymock.tests2.UsageConstraintsTest.greaterThan":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":439,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":376,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":468,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":390,"org.easymock.samples.ExampleTest.voteForRemoval":169,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":469,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":195,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":366,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":409,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":256,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":80,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":328,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":32,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":311,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":218,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":41,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":436,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":52,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":477,"org.easymock.tests2.CaptureTest.testCaptureFirst":215,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":310,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":219,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":193,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":95,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":126,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":423,"org.easymock.tests2.UsageTest.moreThanOneArgument":189,"org.easymock.tests2.CaptureTest.testCapture2_2446744":241,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":254,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":322,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":156,"org.easymock.tests.GenericTest.testBridgedEquals":104,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":277,"org.easymock.tests.UsageExpectAndReturnTest.longType":122,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":216,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":329,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":106,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":76,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":506,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":348,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":74,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":162,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":49,"org.easymock.tests.UsageCallCountTest.tooManyCalls":278,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":0,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":455,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":127,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":491,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":63,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":44,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":414,"org.easymock.tests.MockingTest.testNiceClassMocking":358,"org.easymock.tests.MockingTest.testClassMocking":350,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":105,"org.easymock.tests2.UsageConstraintsTest.testContains":21,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":272,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":83,"org.easymock.tests2.UsageConstraintsTest.testFind":18,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":9,"org.easymock.tests.MockTypeTest.fromEasyMockClass":364,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":476,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":298,"org.easymock.tests.UsageExpectAndReturnTest.object":129,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":465,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":490,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":223,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":152,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":26,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":345,"org.easymock.tests.UsageTest.exactCallCountByLastCall":140,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":110,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":309,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":7,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":302,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":30,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":148,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":135,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":147,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":393,"org.easymock.tests.MockClassControlTest.testHashCode":373,"org.easymock.tests2.EasyMockSupportTest.testVerify":480,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":448,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":8,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":146,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":36,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":493,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":481,"org.easymock.tests.UsageVarargTest.varargCharAccepted":151,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":382,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":183,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":327,"org.easymock.tests2.UsageTest.openCallCountByLastCall":14,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":226,"org.easymock.tests.DefaultClassInstantiatorTest.object":383,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":35,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":343,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":90,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":449,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":65,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":42,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":485,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":392,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":257,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":372,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":64,"org.easymock.tests.CapturesMatcherTest.test":233,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":136,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":48,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":457,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":371,"org.easymock.tests2.UsageTest.resumeIfFailure":192,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":86,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":407,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":55,"org.easymock.tests2.StubTest.stubWithReturnValue":79,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":31,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":128,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":265,"org.easymock.tests2.SerializationTest.testAllMockedMethod":109,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":320,"org.easymock.samples.SupportTest.voteForRemovals":179,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":247,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":103,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":395,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":70,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":107,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":326,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":471,"org.easymock.tests.UsageExpectAndThrowTest.object":68,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":304,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":504,"org.easymock.tests2.DelegateToTest.testWrongClass":208,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":158,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":159,"org.easymock.tests.UsageStrictMockTest.range":1,"org.easymock.samples.ConstructorCalledMockTest.testTax":266,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":411,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":479,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":413,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":69,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":198,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":435,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":93,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":292,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":380,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":244,"org.easymock.tests2.CaptureTest.testCaptureNone":213,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":341,"org.easymock.tests.UsageUnorderedTest.message":88,"org.easymock.tests.UsageVerifyTest.twoReturns":96,"org.easymock.tests.UsageVarargTest.varargByteAccepted":155,"org.easymock.tests2.ThreadingTest.testThreadSafe":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":452,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":275,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":176,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":346,"org.easymock.tests2.CaptureTest.testCapture_2617107":234,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":85,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":39,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":324,"org.easymock.tests2.UsageConstraintsTest.any":499,"org.easymock.tests2.StubTest.stub":187,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":289,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":50,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":54,"org.easymock.tests.UsageExpectAndThrowTest.longType":61,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":325,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":387,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":288,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":185,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":180,"org.easymock.tests2.SerializationTest.testClass":33,"org.easymock.tests.LimitationsTest.mockNativeMethod":296,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":138,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":280,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":484,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":252,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":186,"org.easymock.tests2.NameTest.nameForMocksControl":261,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":486,"org.easymock.tests2.MockedExceptionTest.testMockedException":82,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":440,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":5,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":475,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":62,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":355,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":460,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":199,"org.easymock.tests.MockingTest.testNicePartialClassMocking":353,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":463,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":508,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":482,"org.easymock.tests2.CaptureTest.testCaptureLast":212,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":301,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":420,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":230,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":505,"org.easymock.tests.MockingTest.testTwoMocks":351,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":421,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":119,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":66,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":98,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":24,"org.easymock.samples.ExampleTest.removeNonExistingDocument":391,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":488,"org.easymock.tests.UsageStrictMockTest.differentMethods":2,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":286,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":394,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":385,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":100,"org.easymock.tests2.MockBuilderTest.testCreateMockString":255,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":442,"org.easymock.tests.UsageExpectAndThrowTest.floatType":60,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":502,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":437,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":204,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":424,"org.easymock.tests.UsageVerifyTest.twoThrows":78,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":334,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":451,"org.easymock.samples.ExampleTest.voteAgainstRemoval":170,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":315,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":339,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":202,"org.easymock.tests.LimitationsTest.privateConstructor":295,"org.easymock.tests2.UsageConstraintsTest.testNotNull":231,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":46,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":81,"org.easymock.tests2.UsageTest.defaultResetToNice":422,"org.easymock.samples.ExampleTest.voteAgainstRemovals":167,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":134,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":316,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":483,"org.easymock.tests.UsageVarargTest.differentLength":338,"org.easymock.tests2.CallbackTest.callback":232,"org.easymock.tests2.UsageConstraintsTest.equals":496,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":268,"org.easymock.tests.UsageTest.openCallCountByLastCall":4,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":263,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":38,"org.easymock.tests.UsageCallCountTest.tooFewCalls":273,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":416,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":381,"org.easymock.tests.UsageThrowableTest.throwCheckedException":43,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":245,"org.easymock.tests.MockingTest.testStrictClassMocking":349,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":419,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":34,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":487,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":415,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":291,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":418,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":473,"org.easymock.tests.ObjectMethodsTest.testHashCode":344,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":28,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":196,"org.easymock.tests2.NameTest.nameForNiceMock":260,"org.easymock.tests2.DependencyTest.testInterfaceMocking":181,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":27,"org.easymock.samples.ExampleTest.addDocument":171,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":453,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":458,"org.easymock.tests2.DelegateToTest.testStubDelegate":207,"org.easymock.tests2.AnswerTest.stubAnswer":205,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":116,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":432,"org.easymock.tests.UsageVarargTest.varargLongAccepted":154,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":313,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":137,"org.easymock.tests.UsageExpectAndReturnTest.floatType":121,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":102,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":267,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":400,"org.easymock.tests.UsageThrowableTest.noUpperLimit":3,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":23,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":335,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":16,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":406,"org.easymock.tests2.SerializationTest.test":108,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":237,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":384,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":120,"org.easymock.tests2.UsageConstraintsTest.testSame":19,"org.easymock.samples.SupportTest.addDocument":178,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":417,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":287,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":443,"org.easymock.tests.GenericTest.testPackageScope":279,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":360,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":308,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":399,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":356,"org.easymock.tests2.NameTest.nameForMock":258,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":131,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":434,"org.easymock.tests2.UsageStrictMockTest.differentMethods":13,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":466,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":123,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":72,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":342,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":378,"org.easymock.tests2.MockedExceptionTest.testRealException":84,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":367,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":412,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":318,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":184,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":317,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":113,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":293,"org.easymock.tests2.NameTest.nameForStrictMock":259,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":430,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":474,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":201,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":410,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":503,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":386,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":253,"org.easymock.tests2.UsageStrictMockTest.range":12,"org.easymock.tests2.UsageConstraintsTest.lessThan":507,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":396,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":217,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":312,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":447,"org.easymock.tests2.CaptureTest.testCaptureRightOne":214,"org.easymock.tests2.UsageConstraintsTest.testOr":20,"org.easymock.tests.UsageRangeTest.combination":10,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":200,"org.easymock.tests.UsageTest.wrongArguments":92,"org.easymock.tests2.MockBuilderTest.testWithConstructor":427,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":444,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":249,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":124,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":132,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":6,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":388,"org.easymock.tests.UsageVarargTest.varargShortAccepted":153,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":276,"org.easymock.tests2.UsageConstraintsTest.cmpTo":500,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":472,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":307,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":15,"org.easymock.tests2.CaptureTest.testCaptureFromStub":240,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":283,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":428,"org.easymock.tests.UsageTest.unexpectedCallWithArray":91,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":89,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":274,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":133,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":117,"org.easymock.tests2.UsageConstraintsTest.constraints":17,"org.easymock.samples.ExampleTest.addAndChangeDocument":173,"org.easymock.tests.UsageStrictMockTest.testVerify":299,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":175,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":115,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":330,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":238,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":143,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":251,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":125,"org.easymock.tests.LimitationsTest.abstractClass":294,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":144,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":336,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":149,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":222}}]

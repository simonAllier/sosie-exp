[{"position":"org.easymock.internal.ArgumentToString:90","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:87","sourceCode":"if ((java.util.List<java.lang.reflect.Method>.size()) == 1) {\n    java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0);\n} else {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method);\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"bridgeMethod","bridgeMethod":"bridgeMethod"}},{"position":"org.easymock.Capture:82","failures":[14,15,16,17,18,19,20,21,22,23,24,25,26],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:99","failures":[27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,0,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,15,70,17,18,21,71,22,24,72,26,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,5,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,7,177,178,179,180,181,182,183,184,185,186,187],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:269","sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","type":"CtInvocationImpl"},"failures":[188,189,27,190,190,191,191,33,34,36,37,38,192,39,193,194,195,40,41,42,196,197,198,44,199,200,45,201,46,47,202,203,48,204,205,206,49,50,207,67,208,209,210,78,79,80,81,83,84,211,212,213,124,214,215,125,216,217,218,219,220,221,222,223,224,126,225,226,227,228,229,127,230,231,232,137,233,138,234,235,142,143,144,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,187,255],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"toMock"}},{"position":"org.easymock.internal.LastControl:95","failures":[15,16,24,99,100,102,104,105,256,116,120],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.Find:41","failures":[257],"status":-1,"binaryOperator":"(\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:249","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"cls"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[67,68,208,258],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[15,16,24,99,100,102,104,105,256,116,120],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[67,68,208,258],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:41","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[0,5,6,7,259],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:68","sourceCode":"if (java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[188,189,27,190,190,191,191,33,34,36,37,38,192,39,193,194,195,40,41,42,196,197,198,44,199,200,45,201,46,47,202,203,48,204,205,206,49,50,207,67,208,209,210,78,79,80,81,83,84,260,261,211,212,213,124,214,215,125,216,217,218,219,220,221,222,223,224,126,225,226,227,228,229,127,230,231,232,137,233,138,234,262,263,235,142,143,144,264,237,238,239,240,241,242,244,265,245,247,248,249,266,267,250,251,252,253,254,268,187,255],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"method","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[269],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:206","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:214","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[190,191,193,270,269,271,202,272,50,207,273,67],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[274,275],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int) == int","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:176","failures":[50,276,277,278,279,280,281,282],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:188","sourceCode":"try {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor });\n    if (org.easymock.ConstructorArgs != null) {\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>;\n        try {\n            java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n        } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n            throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n        }\n        T T;\n        try {\n            java.lang.reflect.Constructor<?>.setAccessible(true);\n            T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n        } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n        } catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n        }\n        return T;\n    } else {\n        net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory;\n        try {\n            net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n        }\n        net.sf.cglib.proxy.Factory.getCallback(0);\n        return ((T)(net.sf.cglib.proxy.Factory));\n    }\n} finally {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null);\n}","type":"CtTryImpl"},"failures":[188,189,27,190,190,191,191,33,34,36,37,38,192,39,193,194,195,40,41,42,196,197,198,270,44,199,269,200,45,201,46,271,47,202,203,48,272,204,205,206,49,50,207,273,67,208,209,210,78,79,80,81,83,84,211,212,213,124,214,215,125,216,217,218,219,220,221,222,223,224,126,225,226,227,228,229,127,230,231,232,137,233,138,234,262,263,235,142,143,144,264,236,237,238,239,240,241,242,243,244,245,246,247,248,249,266,267,250,251,252,253,254,268,187,255],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1191","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"failures":[283],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[102,256,116,120],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[102,103,256,107,116,117,120,121],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:72","sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","type":"CtAssignmentImpl"},"failures":[27,192,40,41,197,198,44,199,45,201,46,47,203,48,204,67,125,126,127,138,252,253],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[15,16,24,99,105],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[122,284],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"this.org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"failures":[40,197,44,48],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[188,189,27,28,285,29,30,286,31,287,288,190,191,289,290,291,32,33,34,35,36,37,38,192,39,195,40,41,42,43,198,44,45,201,46,47,203,48,204,205,206,49,292,50,293,294,51,295,0,52,296,297,298,299,300,53,301,54,302,55,56,57,58,59,60,61,62,63,64,65,66,303,67,68,208,304,69,305,15,70,16,17,18,19,20,21,71,22,24,25,72,26,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,1,88,306,89,90,91,2,3,92,93,94,95,96,307,308,309,310,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,311,119,120,121,122,312,123,313,314,315,316,124,125,126,127,317,318,319,320,321,322,323,324,325,326,327,128,129,130,131,132,133,134,328,329,135,330,331,332,333,334,335,336,337,338,136,339,137,233,340,341,342,343,344,345,346,347,348,139,349,350,351,4,140,352,5,141,353,354,355,356,357,358,359,142,143,144,145,360,146,147,148,149,150,151,237,361,362,363,364,365,366,367,368,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,245,246,247,248,249,266,267,250,172,173,174,175,176,6,7,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,251,177,178,179,180,181,8,9,182,183,10,11,184,12,185,186,389,390,391,392,393,394,395,396,397,398,399,400,187,401,402,403,404],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:270","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[405,406,407,408],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"((((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol())) + \" 0\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:103","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"failures":[39,51,15,70,16,17,18,19,20,21,71,22,24,25,72,26,97,98,99,100,101,102,103,104,105,106,256,107,108,109,110,111,112,113,114,115,116,117,118,311,119,120,121,122,409,315,316,327,128,129,130,131,132,133,134,328,329,135,334,139,349,4,140,12,185,186],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[188,189,27,190,190,191,191,33,34,36,37,38,192,39,195,40,41,42,198,410,44,199,45,201,46,47,203,48,411,204,49,50,67,208,78,79,80,81,83,84,412,413,414,124,125,126,127,137,233,138,235,142,143,144,246,251,252,253,187],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:49","sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","type":"CtInvocationImpl"},"failures":[284,415,416,417,418],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksControl:189","failures":[48,204,293,295,0,52,85,1,306,2,3,93,99,350,4,352,5,141,6,7,180,8,9,10,11,184,12],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[419,420],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[188,189,27,190,190,191,191,33,34,36,37,38,192,39,195,40,41,42,198,44,45,201,46,47,203,48,204,49,50,67,208,78,79,80,81,83,84,124,125,126,127,137,233,138,235,142,143,144,246,251,187],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:43","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[51,0,52,297,298,299,300,87,1,2,3,4,140,5,141,176,6,7,421,181,9,10,11],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[232],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[422,423,424,425,426],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:163","failures":[190,191,193,270,272],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) != null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":100,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":180,"org.easymock.tests2.UsageTest.argumentsOrdered":3,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":65,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":306,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":289,"org.easymock.tests2.DelegateToTest.testReturnException":312,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":331,"org.easymock.tests.MockingTest.testPartialClassMocking":142,"org.easymock.tests.MockClassControlTest.testToString":247,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":426,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":219,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":125,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":369,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":421,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":95,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":277,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":106,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":133,"org.easymock.tests2.UsageTest.wrongArguments":1,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":403,"org.easymock.samples.ExampleTest.answerVsDelegate":285,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":253,"org.easymock.tests2.UsageConstraintsTest.testNull":102,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":36,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":64,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":250,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":260,"org.easymock.tests2.CaptureTest.testPrimitive":17,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":135,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":388,"org.easymock.tests.UsageTest.moreThanOneArgument":181,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":35,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":366,"org.easymock.tests.UsageTest.argumentsOrdered":11,"org.easymock.tests.UsageVarargTest.varargIntAccepted":319,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":128,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":198,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":281,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":201,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":132,"org.easymock.tests.ReplayStateInvalidUsageTest.times":397,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":96,"org.easymock.tests2.AnswerTest.answer":53,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":256,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":310,"org.easymock.tests2.CaptureTest.testAnd":15,"org.easymock.tests2.UsageTest.strictResetToDefault":86,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":195,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":269,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":365,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":174,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":59,"org.easymock.tests2.DelegateToTest.testDelegate":314,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":384,"org.easymock.tests.LimitationsTest.mockFinalMethod":255,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":334,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":359,"org.easymock.tests2.CaptureTest.testCapture1_2446744":18,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":382,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":308,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":391,"org.easymock.tests.UsageThrowableTest.throwError":145,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":368,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":231,"org.easymock.samples.PartialClassMockTest.testGetArea":27,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":392,"org.easymock.tests2.CompareToTest.testLessOrEqual":418,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":129,"org.easymock.tests2.UsageTest.niceToStrict":88,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":220,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":265,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":370,"org.easymock.tests2.ThreadingTest.testChangeDefault":419,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":422,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":45,"org.easymock.tests2.MockBuilderTest.testCreateMock":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":227,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":378,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":60,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":407,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":340,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":401,"org.easymock.tests.UsageOverloadedMethodTest.overloading":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":224,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":229,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":111,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":338,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":177,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":163,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":110,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":274,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":22,"org.easymock.tests2.EasyMockSupportClassTest.testAll":124,"org.easymock.tests.MockClassControlTest.testEquals":267,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":233,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":386,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":412,"org.easymock.tests2.CaptureTest.testCaptureAll":70,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":309,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":357,"org.easymock.tests2.UsageConstraintsTest.testMatches":112,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":389,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":367,"org.easymock.samples.ExampleTest.voteForRemovals":31,"org.easymock.tests.UsageVarargTest.allKinds":327,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":176,"org.easymock.samples.BasicClassMockTest.testPrintContent":189,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":358,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":150,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":293,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":335,"org.easymock.tests2.UsageConstraintsTest.greaterThan":114,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":243,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":214,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":173,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":42,"org.easymock.samples.ExampleTest.voteForRemoval":29,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":244,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":74,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":196,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":192,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":85,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":251,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":202,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":57,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":146,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":212,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":330,"org.easymock.tests2.CaptureTest.testCaptureFirst":26,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":58,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":93,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":339,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":159,"org.easymock.tests2.CaptureTest.testCapture2_2446744":72,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":76,"org.easymock.tests2.UsageTest.moreThanOneArgument":87,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":48,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":326,"org.easymock.tests.GenericTest.testBridgedEquals":234,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":347,"org.easymock.tests.UsageExpectAndReturnTest.longType":155,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":55,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":355,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":411,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":387,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":311,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":385,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":364,"org.easymock.tests.UsageCallCountTest.tooManyCalls":348,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":228,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":160,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":374,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":149,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":79,"org.easymock.tests.MockingTest.testNiceClassMocking":264,"org.easymock.tests.MockingTest.testClassMocking":263,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":410,"org.easymock.tests2.UsageConstraintsTest.testContains":109,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":341,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":49,"org.easymock.tests2.UsageConstraintsTest.testFind":101,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":179,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":316,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":350,"org.easymock.tests.UsageExpectAndReturnTest.object":162,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":39,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":63,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":278,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":321,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":363,"org.easymock.tests.UsageTest.exactCallCountByLastCall":184,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":139,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":424,"org.easymock.tests2.ConstraintsToStringTest.findToString":257,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":207,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":168,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":317,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":337,"org.easymock.tests.MockClassControlTest.testHashCode":266,"org.easymock.tests2.EasyMockSupportTest.testVerify":303,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":222,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":406,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":336,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":307,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":409,"org.easymock.tests.UsageVarargTest.varargCharAccepted":320,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":236,"org.easymock.tests2.CaptureTest.testCaptureMultiple":14,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":294,"org.easymock.tests2.UsageTest.openCallCountByLastCall":89,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":66,"org.easymock.tests.DefaultClassInstantiatorTest.object":237,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":405,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":361,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":13,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":223,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":376,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":147,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":261,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":40,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":249,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":375,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":127,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":248,"org.easymock.tests2.UsageTest.resumeIfFailure":92,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":252,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":333,"org.easymock.tests2.StubTest.stubWithReturnValue":69,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":271,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":161,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":119,"org.easymock.tests2.SerializationTest.testAllMockedMethod":208,"org.easymock.samples.SupportTest.voteForRemovals":32,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":232,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":381,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":258,"org.easymock.tests.UsageExpectAndThrowTest.object":379,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":117,"org.easymock.tests2.DelegateToTest.testWrongClass":313,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":185,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":186,"org.easymock.samples.ConstructorCalledMockTest.testTax":190,"org.easymock.tests.UsageStrictMockTest.range":5,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":62,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":78,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":380,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":46,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":399,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":211,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":402,"org.easymock.tests2.CaptureTest.testCaptureNone":71,"org.easymock.tests.UsageUnorderedTest.message":12,"org.easymock.tests.UsageVerifyTest.twoReturns":7,"org.easymock.tests.UsageVarargTest.varargByteAccepted":325,"org.easymock.tests2.ThreadingTest.testThreadSafe":73,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":225,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":345,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":188,"org.easymock.tests2.CaptureTest.testCapture_2617107":16,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":329,"org.easymock.tests2.UsageConstraintsTest.any":107,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":396,"org.easymock.tests2.StubTest.stub":304,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":332,"org.easymock.tests.UsageExpectAndThrowTest.longType":372,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":241,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":395,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":295,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":43,"org.easymock.tests2.SerializationTest.testClass":67,"org.easymock.tests.LimitationsTest.mockNativeMethod":187,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":171,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":138,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":414,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":296,"org.easymock.tests2.NameTest.nameForMocksControl":300,"org.easymock.tests2.MockedExceptionTest.testMockedException":206,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":215,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":183,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":144,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":373,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":33,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":47,"org.easymock.tests.MockingTest.testNicePartialClassMocking":143,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":38,"org.easymock.tests2.CompareToTest.testCompareEqual":416,"org.easymock.tests2.CaptureTest.testCaptureLast":21,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":276,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":105,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":84,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":118,"org.easymock.tests.MockingTest.testTwoMocks":235,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":152,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":377,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":2,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":121,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":420,"org.easymock.samples.ExampleTest.removeNonExistingDocument":287,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":393,"org.easymock.tests.UsageStrictMockTest.differentMethods":141,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":239,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":75,"org.easymock.tests2.MockBuilderTest.testCreateMockString":204,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":245,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":216,"org.easymock.tests.UsageExpectAndThrowTest.floatType":371,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":213,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":301,"org.easymock.tests.UsageVerifyTest.twoThrows":6,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":273,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":126,"org.easymock.samples.ExampleTest.voteAgainstRemoval":30,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":41,"org.easymock.tests.LimitationsTest.privateConstructor":268,"org.easymock.tests2.UsageConstraintsTest.testNotNull":120,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":151,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":205,"org.easymock.tests2.UsageTest.defaultResetToNice":91,"org.easymock.samples.ExampleTest.voteAgainstRemovals":28,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":167,"org.easymock.tests.UsageVarargTest.differentLength":322,"org.easymock.tests2.CallbackTest.callback":305,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":193,"org.easymock.tests.UsageTest.openCallCountByLastCall":182,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":97,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":328,"org.easymock.tests.UsageCallCountTest.tooFewCalls":343,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":81,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":404,"org.easymock.tests.UsageThrowableTest.throwCheckedException":148,"org.easymock.tests.MockingTest.testStrictClassMocking":262,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":83,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":349,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":80,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":398,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":82,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":302,"org.easymock.tests2.CompareToTest.testGreateOrEqual":417,"org.easymock.tests.ObjectMethodsTest.testHashCode":362,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":280,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":77,"org.easymock.tests2.NameTest.nameForNiceMock":299,"org.easymock.tests2.DependencyTest.testInterfaceMocking":94,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":279,"org.easymock.samples.ExampleTest.addDocument":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":226,"org.easymock.tests2.DelegateToTest.testStubDelegate":123,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":230,"org.easymock.tests2.AnswerTest.stubAnswer":54,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":140,"org.easymock.tests.UsageVarargTest.varargLongAccepted":324,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":353,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":170,"org.easymock.tests.UsageExpectAndReturnTest.floatType":154,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":50,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":191,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":115,"org.easymock.tests.UsageThrowableTest.noUpperLimit":360,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":98,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":209,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":19,"org.easymock.tests2.SerializationTest.test":68,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":275,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":238,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":153,"org.easymock.tests2.UsageConstraintsTest.testSame":103,"org.easymock.samples.SupportTest.addDocument":291,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":394,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":217,"org.easymock.tests.GenericTest.testPackageScope":137,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":423,"org.easymock.tests2.NameTest.nameForMock":297,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":164,"org.easymock.tests2.UsageStrictMockTest.differentMethods":52,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":272,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":194,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":156,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":383,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":175,"org.easymock.tests2.MockedExceptionTest.testRealException":292,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":425,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":51,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":400,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":134,"org.easymock.tests2.NameTest.nameForStrictMock":298,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":200,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":315,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":37,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":210,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":116,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":240,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":44,"org.easymock.tests2.UsageStrictMockTest.range":0,"org.easymock.tests2.UsageConstraintsTest.lessThan":122,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":56,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":283,"org.easymock.tests2.CaptureTest.testCaptureRightOne":24,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":221,"org.easymock.tests2.UsageConstraintsTest.testOr":104,"org.easymock.tests.UsageRangeTest.combination":172,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":34,"org.easymock.tests.UsageTest.wrongArguments":9,"org.easymock.tests2.MockBuilderTest.testWithConstructor":270,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":218,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":246,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":157,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":165,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":242,"org.easymock.tests.UsageVarargTest.varargShortAccepted":323,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":346,"org.easymock.tests2.UsageConstraintsTest.cmpTo":108,"org.easymock.tests2.CompareToTest.testLessThan":284,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":408,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":90,"org.easymock.tests2.CaptureTest.testCaptureFromStub":25,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":390,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":199,"org.easymock.tests.UsageTest.unexpectedCallWithArray":8,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":4,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":344,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":166,"org.easymock.tests2.CaptureTest.testCapture":23,"org.easymock.tests2.UsageConstraintsTest.constraints":99,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":352,"org.easymock.samples.ExampleTest.addAndChangeDocument":288,"org.easymock.tests.UsageStrictMockTest.testVerify":354,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":290,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":351,"org.easymock.tests2.CompareToTest.testGreateThan":415,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":356,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":20,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":413,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":130,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":158,"org.easymock.tests.LimitationsTest.abstractClass":254,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":136,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":131,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":61,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":259,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":318}}]

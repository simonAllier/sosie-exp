[{"transplant":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"transplant":{"position":"org.easymock.ConstructorArgs:71","sourceCode":"final java.lang.Exception java.lang.Exception","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:93","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[0,1],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[43,44,45,46,47,48,49,50,51,52,53,54,55,56,2,2,3,3,57,58,59,60,61,62,63,4,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,156,157,158,159,160,161,162,163,164,35,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,38,190,191,192,39,193,194,195,196,197,198,41,42,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,0,335,336,337,1,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475],"status":-1,"binaryOperator":"(java.lang.String != null) && (!org.easymock.internal.Invocation.(org.easymock.internal.Invocation.isJavaIdentifier(java.lang.String)))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[0],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[4,64,65,476],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:70","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","type":"CtIfImpl"},"failures":[43,44,45,46,47,48,49,50,51,52,53,54,55,56,2,2,3,3,57,58,59,60,61,62,63,4,64,65,66,67,73,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,134,135,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,10,13,23,29,157,158,161,162,163,164,165,166,167,173,180,181,182,183,184,185,186,187,188,189,38,190,191,192,39,193,194,195,196,197,198,41,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,230,231,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,386,387,388,391,392,393,410,416,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,449,451,452,453,454,455,456,457,458,459,460,463,464,465,467,471,472,473,474,475],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.UnorderedBehavior:29","sourceCode":"new java.util.ArrayList<org.easymock.internal.ExpectedInvocationAndResults>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:971","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[149],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:176","failures":[477,478,479,480,481,482,483,41],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[329,330,331,333,334],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[246],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[484,155],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:88","sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[95,147,341,347,359,394,398,399,408,413],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[485,486,487,488,340,368],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:340","sourceCode":"this.org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:332","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","shouldBeUsedInOneThread":"value"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[4,64,65,476],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"failures":[43,44,45,46,47,48,49,50,51,52,53,54,55,56,2,2,3,3,57,58,59,60,61,62,63,4,64,65,489,490,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,157,158,159,160,161,162,163,164,35,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,491,184,185,186,187,188,189,38,190,191,192,39,193,194,195,196,197,198,41,42,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,492,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,0,335,336,337,1,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[113,115,123,136],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[95,97,98,102,103,109,110,184,185,186,187,340,341,343,344,367,369,372,373,384,451,452,453],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[84,416],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.Capture:43","sourceCode":"org.easymock.Capture<T>.this(org.easymock.CaptureType.org.easymock.CaptureType)","type":"CtInvocationImpl"},"failures":[113,115,116,117,118,119,122,493,123],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"position":"org.easymock.EasyMock:1333","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:206","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:214","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[2,3,4,32,33,34,35,37,41,42,494,226],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1471","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.matchers.EndsWith:40","failures":[495],"status":-1,"binaryOperator":"((\"endsWith(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:93","failures":[328,329,333],"status":-1,"binaryOperator":"(java.lang.Class<?>.getConstructors().int) == 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"type"}},{"position":"org.easymock.internal.matchers.Captures:53","failures":[113,114,115,116,117,118,119,120,121,122,123,124,125,126,496],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[43,45,46,48,53,55,60,4,64,66,67,73,85,95,97,98,100,101,102,104,106,107,108,111,112,113,114,116,117,120,121,122,123,125,126,127,128,129,130,132,133,134,135,136,137,139,140,141,142,143,144,145,146,147,148,149,150,152,153,154,155,10,13,23,29,158,161,163,164,166,173,182,188,189,38,190,191,192,39,193,197,41,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,218,219,220,221,222,223,225,229,230,231,239,244,245,248,253,255,256,257,258,259,260,268,269,335,337,341,343,344,366,367,370,371,374,391,392,393,403,405,414,415,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,449,451,453,459,464,465,467,471,472,474],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.Capture:82","failures":[113,115,116,117,118,119,120,122,493,123,124,126],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[4,64,65,476],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"position":"org.easymock.internal.Range:36","failures":[43,44,45,46,47,48,49,50,51,52,53,54,55,56,2,3,57,58,59,60,61,62,63,4,64,65,489,490,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,497,498,499,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,156,157,32,158,159,33,160,161,162,163,34,164,500,35,165,166,37,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,491,184,185,186,187,188,189,38,190,501,191,192,39,40,193,194,195,196,197,198,41,42,494,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,492,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,502,328,329,330,331,332,333,503,334,0,335,336,337,1,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,504,505,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,506,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1349","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:83","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"failures":[56,57,68,69,70,72,73,74,75,76,79,14,18,24,168,169,170,172,173,174,175,176,179,491,184,185,186,187,188,208,211,213,219,228,231,233,348,362,364],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[43,44,45,46,47,48,50,59,60,63,4,64,65,66,84,85,86,88,89,90,91,92,94,95,98,99,101,102,104,105,108,111,113,114,115,116,118,119,120,121,122,123,126,127,128,129,130,132,133,134,135,136,137,139,140,141,142,143,144,145,146,147,148,149,150,152,153,154,155,157,161,162,180,181,182,183,184,185,186,187,189,38,192,39,193,196,197,198,41,199,200,201,204,218,220,221,222,223,225,228,230,239,244,245,248,249,250,251,252,254,255,266,270,271,272,273,274,275,276,277,278,279,280,281,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,308,310,311,312,313,314,321,335,336,339,341,344,345,346,367,375,376,377,378,379,380,392,393,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,449,451,452,453,454,455,456,457,458,459,464,465,467,471,472],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[478,479,480,507,481,482,483,34,508,41,42],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:181","failures":[4,477,478,479,480,481,482,483,34,42],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[133,138,148,153],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.Capture:82","failures":[113,115,116,117,118,119,120,122,493,123,124,126],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[416],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[4,478,479,480,507,483,34,35,41,42],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":130,"org.easymock.tests2.UsageTest.argumentsOrdered":110,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":366,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":215,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":174,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":404,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":105,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":57,"org.easymock.tests2.DelegateToTest.testReturnException":59,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":277,"org.easymock.tests.MockingTest.testPartialClassMocking":464,"org.easymock.tests.MockClassControlTest.testToString":322,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":491,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":474,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":413,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":233,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":17,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":13,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":283,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":67,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":478,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":137,"org.easymock.tests2.UsageTest.wrongArguments":103,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":244,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":79,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":251,"org.easymock.samples.ExampleTest.answerVsDelegate":44,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":363,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":469,"org.easymock.tests2.UsageConstraintsTest.testNull":133,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":221,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":214,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":327,"org.easymock.tests2.CaptureTest.testPrimitive":116,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":248,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":302,"org.easymock.tests.UsageTest.moreThanOneArgument":367,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":220,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":272,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":315,"org.easymock.tests.UsageTest.argumentsOrdered":373,"org.easymock.tests.UsageVarargTest.varargIntAccepted":305,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":409,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":442,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":482,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":157,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":498,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":178,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":162,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":396,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":446,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":73,"org.easymock.tests.ReplayStateInvalidUsageTest.times":355,"org.easymock.tests2.DependencyTest.testClassMocking":489,"org.easymock.tests2.AnswerTest.answer":193,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":138,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":411,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":92,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":505,"org.easymock.tests2.CaptureTest.testAnd":113,"org.easymock.tests2.UsageTest.strictResetToDefault":101,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":33,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":228,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":271,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":420,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":209,"org.easymock.tests2.DelegateToTest.testDelegate":63,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":319,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":298,"org.easymock.tests.LimitationsTest.mockFinalMethod":450,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":280,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":458,"org.easymock.tests2.DependencyTest.testClassMockingSupport":490,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":264,"org.easymock.tests2.CaptureTest.testCapture1_2446744":117,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":492,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":296,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":90,"org.easymock.tests.UsageThrowableTest.throwError":253,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":349,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":362,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":506,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":179,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":274,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":31,"org.easymock.samples.PartialClassMockTest.testGetArea":53,"org.easymock.tests.MockingTest.testInterfaceMocking":466,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":350,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":443,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":268,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":390,"org.easymock.tests2.UsageTest.niceToStrict":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":18,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":284,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":394,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":161,"org.easymock.tests2.MockBuilderTest.testCreateMock":165,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":26,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":76,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":485,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":292,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":210,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":504,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":263,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":375,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":249,"org.easymock.tests.UsageOverloadedMethodTest.overloading":392,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":22,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":143,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":237,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":433,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":391,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":142,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":122,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":306,"org.easymock.tests2.EasyMockSupportClassTest.testAll":10,"org.easymock.tests.MockClassControlTest.testEquals":326,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":336,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":300,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":456,"org.easymock.tests2.CaptureTest.testCaptureAll":114,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":91,"org.easymock.tests.MockNameTest.defaultName":282,"org.easymock.tests2.UsageConstraintsTest.testMatches":144,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":273,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":347,"org.easymock.samples.ExampleTest.voteForRemovals":48,"org.easymock.tests.UsageVarargTest.allKinds":314,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":451,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":457,"org.easymock.samples.BasicClassMockTest.testPrintContent":52,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":259,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":93,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":175,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":62,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":281,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":503,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":483,"org.easymock.tests2.UsageConstraintsTest.greaterThan":146,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":11,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":419,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":231,"org.easymock.samples.ExampleTest.voteForRemoval":45,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":334,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":201,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":232,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":364,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":499,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":224,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":100,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":275,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":35,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":401,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":207,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":255,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":8,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":276,"org.easymock.tests2.CaptureTest.testCaptureFirst":126,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":58,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":400,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":208,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":112,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":240,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":429,"org.easymock.tests2.CaptureTest.testCapture2_2446744":125,"org.easymock.tests2.UsageTest.moreThanOneArgument":102,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":203,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":412,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":166,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":313,"org.easymock.tests.GenericTest.testBridgedEquals":1,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":382,"org.easymock.tests.UsageExpectAndReturnTest.longType":425,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":454,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":205,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":301,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":151,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":359,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":299,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":242,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":270,"org.easymock.tests.UsageCallCountTest.tooManyCalls":383,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":377,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":27,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":430,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":78,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":288,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":258,"org.easymock.tests.MockingTest.testNiceClassMocking":470,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":189,"org.easymock.tests.MockingTest.testClassMocking":462,"org.easymock.tests2.UsageConstraintsTest.testContains":141,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":376,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":182,"org.easymock.tests2.UsageConstraintsTest.testFind":132,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":393,"org.easymock.tests.MockTypeTest.fromEasyMockClass":361,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":88,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":338,"org.easymock.tests.UsageExpectAndReturnTest.object":432,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":225,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":77,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":213,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":479,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":308,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":388,"org.easymock.tests.UsageTest.exactCallCountByLastCall":374,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":459,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":399,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":473,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":316,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":42,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":438,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":303,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":236,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":169,"org.easymock.tests.MockClassControlTest.testHashCode":325,"org.easymock.tests2.EasyMockSupportTest.testVerify":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":20,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":317,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":234,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":262,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":89,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":156,"org.easymock.tests.UsageVarargTest.varargCharAccepted":307,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":502,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":94,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":417,"org.easymock.tests2.UsageTest.openCallCountByLastCall":106,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":216,"org.easymock.tests.DefaultClassInstantiatorTest.object":328,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":261,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":386,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":21,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":290,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":256,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":71,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":168,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":229,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":324,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":289,"org.easymock.tests.CapturesMatcherTest.test":496,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":439,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":241,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":29,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":323,"org.easymock.tests2.UsageTest.resumeIfFailure":111,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":360,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":497,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":279,"org.easymock.tests2.StubTest.stubWithReturnValue":85,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":34,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":431,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":152,"org.easymock.tests2.SerializationTest.testAllMockedMethod":65,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":410,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":486,"org.easymock.samples.SupportTest.voteForRemovals":55,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":171,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":295,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":476,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":416,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":194,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":475,"org.easymock.tests.UsageExpectAndThrowTest.object":293,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":149,"org.easymock.tests2.DelegateToTest.testWrongClass":61,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":471,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":472,"org.easymock.samples.ConstructorCalledMockTest.testTax":2,"org.easymock.tests.UsageStrictMockTest.range":343,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":82,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":212,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":188,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":294,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":163,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":7,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":357,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":372,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":250,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":487,"org.easymock.tests2.CaptureTest.testCaptureNone":121,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":269,"org.easymock.tests.UsageUnorderedTest.message":384,"org.easymock.tests2.ConstraintsToStringTest.endsWithToString":495,"org.easymock.tests.UsageVerifyTest.twoReturns":453,"org.easymock.tests.UsageVarargTest.varargByteAccepted":312,"org.easymock.tests2.ThreadingTest.testThreadSafe":200,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":24,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":380,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":389,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":51,"org.easymock.tests2.CaptureTest.testCapture_2617107":115,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":266,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":414,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":247,"org.easymock.tests2.UsageConstraintsTest.any":139,"org.easymock.tests2.StubTest.stub":84,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":354,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":243,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":415,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":278,"org.easymock.tests.UsageExpectAndThrowTest.longType":286,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":332,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":353,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":96,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":173,"org.easymock.tests2.SerializationTest.testClass":4,"org.easymock.tests.LimitationsTest.mockNativeMethod":449,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":441,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":337,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":70,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":99,"org.easymock.tests2.NameTest.nameForMocksControl":187,"org.easymock.tests2.MockedExceptionTest.testMockedException":181,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":12,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":371,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":467,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":87,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":287,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":218,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":164,"org.easymock.tests.MockingTest.testNicePartialClassMocking":465,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":223,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":477,"org.easymock.tests2.CaptureTest.testCaptureLast":120,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":68,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":265,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":136,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":39,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":150,"org.easymock.tests.MockingTest.testTwoMocks":463,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":40,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":422,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":291,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":109,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":154,"org.easymock.samples.ExampleTest.removeNonExistingDocument":49,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":75,"org.easymock.tests.UsageStrictMockTest.differentMethods":344,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":351,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":170,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":330,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":202,"org.easymock.tests2.MockBuilderTest.testCreateMockString":167,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":320,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":14,"org.easymock.tests.UsageExpectAndThrowTest.floatType":285,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":145,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":9,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":196,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":494,"org.easymock.tests.UsageVerifyTest.twoThrows":452,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":235,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":23,"org.easymock.samples.ExampleTest.voteAgainstRemoval":46,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":405,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":267,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":230,"org.easymock.tests.LimitationsTest.privateConstructor":448,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":6,"org.easymock.tests2.UsageConstraintsTest.testNotNull":153,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":180,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":260,"org.easymock.tests2.UsageTest.defaultResetToNice":108,"org.easymock.samples.ExampleTest.voteAgainstRemovals":43,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":437,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":406,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":69,"org.easymock.tests.UsageVarargTest.differentLength":309,"org.easymock.tests2.CallbackTest.callback":199,"org.easymock.tests2.UsageConstraintsTest.equals":131,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":226,"org.easymock.tests.UsageTest.openCallCountByLastCall":370,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":127,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":246,"org.easymock.tests.UsageCallCountTest.tooFewCalls":378,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":190,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":252,"org.easymock.tests.UsageThrowableTest.throwCheckedException":257,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":488,"org.easymock.tests.MockingTest.testStrictClassMocking":461,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":460,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":192,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":38,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":74,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":356,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":191,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":198,"org.easymock.tests.ObjectMethodsTest.testHashCode":387,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":481,"org.easymock.tests2.NameTest.nameForNiceMock":186,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":204,"org.easymock.tests2.DependencyTest.testInterfaceMocking":66,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":480,"org.easymock.samples.ExampleTest.addDocument":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":25,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":30,"org.easymock.tests2.DelegateToTest.testStubDelegate":60,"org.easymock.tests2.AnswerTest.stubAnswer":197,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":341,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":500,"org.easymock.tests.UsageVarargTest.varargLongAccepted":311,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":345,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":403,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":440,"org.easymock.tests.UsageExpectAndReturnTest.floatType":424,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":41,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":3,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":177,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":147,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":238,"org.easymock.tests.UsageThrowableTest.noUpperLimit":254,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":128,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":80,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":118,"org.easymock.tests2.SerializationTest.test":64,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":329,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":423,"org.easymock.tests2.UsageConstraintsTest.testSame":134,"org.easymock.samples.SupportTest.addDocument":54,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":501,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":352,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":15,"org.easymock.tests.GenericTest.testPackageScope":335,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":318,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":398,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":176,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":468,"org.easymock.tests2.NameTest.nameForMock":184,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":434,"org.easymock.tests2.UsageStrictMockTest.differentMethods":98,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":37,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":227,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":426,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":297,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":385,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":421,"org.easymock.tests2.MockedExceptionTest.testRealException":183,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":365,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":408,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":83,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":508,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":407,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":95,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":245,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":358,"org.easymock.tests2.NameTest.nameForStrictMock":185,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":160,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":86,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":222,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":81,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":148,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":331,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":158,"org.easymock.tests2.UsageStrictMockTest.range":97,"org.easymock.tests2.UsageConstraintsTest.lessThan":155,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":172,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":507,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":402,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":206,"org.easymock.tests2.CaptureTest.testCaptureRightOne":123,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":19,"org.easymock.tests2.UsageConstraintsTest.testOr":135,"org.easymock.tests.UsageRangeTest.combination":418,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":219,"org.easymock.tests.UsageTest.wrongArguments":369,"org.easymock.tests2.MockBuilderTest.testWithConstructor":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":16,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":321,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":427,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":435,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":395,"org.easymock.tests.UsageVarargTest.varargShortAccepted":310,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":333,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":381,"org.easymock.tests2.UsageConstraintsTest.cmpTo":140,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":195,"org.easymock.tests2.CompareToTest.testLessThan":484,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":397,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":107,"org.easymock.tests2.CaptureTest.testCaptureFromStub":124,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":348,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":159,"org.easymock.tests.UsageTest.unexpectedCallWithArray":368,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":340,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":379,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":36,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":436,"org.easymock.tests2.CaptureTest.testCapture":493,"org.easymock.tests2.UsageConstraintsTest.constraints":129,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":342,"org.easymock.samples.ExampleTest.addAndChangeDocument":50,"org.easymock.tests.UsageStrictMockTest.testVerify":346,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":56,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":339,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":455,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":119,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":444,"org.easymock.tests.LimitationsTest.abstractClass":447,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":428,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":445,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":239,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":211,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":304}}]

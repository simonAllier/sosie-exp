[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","position":"org.easymock.internal.DefaultClassInstantiator:126","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.List<java.lang.Class<?>> java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>>()","position":"org.easymock.internal.BridgeMethodResolver:380","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Long java.lang.Long = org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializableUID(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:142","type":"CtLocalVariableImpl"},"status":0},{"failures":[215,216,217,218,0,1,2,3,4,5,6,219,220,221,222,223,224,8,9,10,225,226,11,16,227,228,229,230,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,231,61,62,63,64,65,66,67,68,69,70,76,77,232,233,78,79,81,85,86,87,91,92,93,234,235,236,94,95,237,96,97,238,239,240,241,242,98,99,100,101,102,103,104,106,107,108,111,113,114,116,117,118,119,120,121,124,126,129,130,131,132,134,135,137,138,140,141,142,243,143,144,146,244,147,149,150,245,246,247,248,155,161,162,163,164,249,165,166,167,250,251,168,169,170,171,172,173,252,174,175,176,177,253,178,179,180,181,182,183,254,184,185,186,255,187,188,189,190,191,256,192,193,257,258,194,195,196,259,198,260,261,200,262,201,202,203,204,205,207,263,264,265,266,209,210,267,268,269,270,271,272,273,274,275,276,277,278],"variableMapping":{"endPosition":"currentPosition"},"name":"add","transplant":{"sourceCode":"int--","position":"org.easymock.internal.MocksBehavior:115","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:71","type":"CtOperatorAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","position":"org.easymock.EasyMock:2039","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)))","position":"org.easymock.internal.ClassProxyFactory:227","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:161","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:141","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String","position":"org.easymock.LogicalOperator:62","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n    return ;\n} ","position":"org.easymock.internal.ClassProxyFactory:110","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2143","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!boolean) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove();\n    throw new java.lang.IllegalStateException(java.lang.String);\n} ","position":"org.easymock.internal.LastControl:102","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-2722051869610289637L","position":"org.easymock.internal.Results:28","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:116","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int int = 0","position":"org.easymock.internal.Results:90","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:79","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.UnorderedBehavior:79","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory()","position":"org.easymock.internal.MocksControl:111","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","position":"org.easymock.internal.RecordState:263","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","position":"org.easymock.internal.MocksControl:131","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Double>(double))","position":"org.easymock.EasyMock:826","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"status":-2},{"failures":[149],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","position":"org.easymock.EasyMock:2067","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:278","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:309","type":"CtLocalVariableImpl"},"status":-2},{"failures":[279],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","position":"org.easymock.internal.RecordState:300","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.Result:63","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.resetToDefault()","position":"org.easymock.EasyMockSupport:584","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","position":"org.easymock.internal.matchers.CompareTo:49","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:362","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:85","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","position":"org.easymock.internal.ClassInstantiatorFactory:52","type":"CtReturnImpl"},"status":-2},{"failures":[164],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1458","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","position":"org.easymock.internal.RecordState:176","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.closeMethod()","position":"org.easymock.internal.RecordState:76","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:127","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"at least \" + (int)","position":"org.easymock.internal.Range:68","type":"CtReturnImpl"},"status":-2},{"failures":[146,280],"variableMapping":{"result":"result"},"name":"replace","transplant":{"sourceCode":"return int <= 0","position":"org.easymock.internal.matchers.LessOrEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int < 0","position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"org.easymock.internal.LastControl.threadToControl":"org.easymock.internal.LastControl.threadToControl"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove()","position":"org.easymock.internal.LastControl:51","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","position":"org.easymock.internal.LastControl:49","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int])","position":"org.easymock.internal.DefaultClassInstantiator:115","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","position":"org.easymock.internal.RecordState:263","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.io.ObjectInputStream.readObject()","position":"org.easymock.internal.DefaultClassInstantiator:203","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","position":"org.easymock.internal.MocksControl:318","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:278","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.AndroidClassProxyFactory.MockHandler org.easymock.internal.AndroidClassProxyFactory.MockHandler = com.google.dexmaker.stock.ProxyBuilder.((org.easymock.internal.AndroidClassProxyFactory.MockHandler)(com.google.dexmaker.stock.ProxyBuilder.getInvocationHandler(java.lang.Object)))","position":"org.easymock.internal.AndroidClassProxyFactory:63","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Integer>(int))","position":"org.easymock.EasyMock:1038","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"methodName":"methodName"},"name":"add","transplant":{"sourceCode":"return java.lang.String","position":"org.easymock.internal.Invocation:148","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.String + \".\") + java.lang.String","position":"org.easymock.internal.Invocation:154","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[]);\n} ","position":"org.easymock.internal.MockBuilder:205","type":"CtIfImpl"},"status":-2},{"failures":[281],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","position":"org.easymock.internal.RecordState:86","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"status":-1},{"failures":[],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.BridgeMethodResolver:193","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[java.lang.reflect.Array.java.lang.reflect.Array.getLength(java.lang.Object)]","position":"org.easymock.internal.Invocation:72","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:180","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.isInterface()) {\n    return new java.lang.Class[]{ java.lang.Class<?> };\n} ","position":"org.easymock.internal.BridgeMethodResolver:377","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","position":"org.easymock.internal.MocksControl:248","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-4434322855124959723L","position":"org.easymock.internal.ThrowableWrapper:23","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2689588759855326190L","position":"org.easymock.internal.matchers.NotNull:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.Long java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:187","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:430","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","position":"org.easymock.internal.ClassProxyFactory:204","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","position":"org.easymock.internal.ClassProxyFactory:207","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:170","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:371","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.InjectionTarget:56","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"-7799769066534714634L","position":"org.easymock.internal.MockInvocationHandler:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.IMocksControl>.add(org.easymock.IMocksControl)","position":"org.easymock.EasyMockSupport:509","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"expected"},"name":"add","transplant":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:53","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return boolean","position":"org.easymock.internal.Injection:82","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.ExpectedInvocation:58","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.get(((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size()) - 1)).getExpectedInvocation()","position":"org.easymock.internal.UnorderedBehavior:107","type":"CtLocalVariableImpl"},"status":-2},{"failures":[215,216,282,283,284,248,285,286,287,288,289,252,290,291],"variableMapping":{"delegateTo":"host"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.Injector:130","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Compare:52","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:44","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","buffer":"buffer","value":"value"},"name":"add","transplant":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:50","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1163","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return float","position":"org.easymock.EasyMock:1409","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:270","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1065","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method != null ? org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>) : false","position":"org.easymock.internal.BridgeMethodResolver:145","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.InjectionTarget:56","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof boolean[]) && ((java.lang.Object == null) || (java.lang.Object instanceof boolean[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof byte[]) && ((java.lang.Object == null) || (java.lang.Object instanceof byte[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof char[]) && ((java.lang.Object == null) || (java.lang.Object instanceof char[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:36","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.util.LinkedList<org.easymock.internal.Range>.size()) ; int++) {\n    final org.easymock.internal.Range org.easymock.internal.Range = java.util.LinkedList<org.easymock.internal.Range>.get(int);\n    if (org.easymock.internal.Range.hasOpenCount()) {\n        int += 1;\n        return java.util.List<org.easymock.internal.Result>.get(int);\n    } \n    int += org.easymock.internal.Range.getMaximum();\n    if (int > (int)) {\n        int += 1;\n        return java.util.List<org.easymock.internal.Result>.get(int);\n    } \n}","position":"org.easymock.internal.Results:65","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.RecordState:327","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(char))","position":"org.easymock.EasyMock:1494","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)","position":"org.easymock.internal.InjectionTarget:62","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:593","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","position":"org.easymock.EasyMock:693","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","position":"org.easymock.internal.BridgeMethodResolver:351","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","position":"org.easymock.internal.BridgeMethodResolver:322","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.AndroidClassProxyFactory.MockHandler.java.lang.reflect.InvocationHandler","position":"org.easymock.internal.AndroidClassProxyFactory:64","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.verify();\n}","position":"org.easymock.EasyMockSupport:561","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.ExpectedInvocationAndResult:41","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result != null) {\n    org.easymock.internal.Invocation.validateCaptures();\n    org.easymock.internal.Invocation.clearCaptures();\n    return org.easymock.internal.Result;\n} ","position":"org.easymock.internal.MocksBehavior:107","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"Nothing captured yet\"","position":"org.easymock.Capture:132","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.specification.version\")","position":"org.easymock.internal.ClassInstantiatorFactory:48","type":"CtReturnImpl"},"status":0},{"failures":[292,293,294],"variableMapping":{"buffer":"buffer"},"name":"add","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"[\")","position":"org.easymock.internal.ArgumentToString:45","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:42","type":"CtInvocationImpl"},"status":-1},{"failures":[],"binaryOperator":"((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\")","name":"math","position":"org.easymock.internal.ReflectionUtils:152","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setCallbackType(org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.getClass())","position":"org.easymock.internal.ClassProxyFactory:171","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.ClassProxyFactory.MockMethodInterceptor org.easymock.internal.ClassProxyFactory.MockMethodInterceptor = new org.easymock.internal.ClassProxyFactory.MockMethodInterceptor(java.lang.reflect.InvocationHandler)","position":"org.easymock.internal.ClassProxyFactory:167","type":"CtLocalVariableImpl"},"status":-2},{"failures":[7,17,50,77,78,79,85,86,87,148,167,168,169],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"status":-1},{"failures":[236,175,176,253,178,179,180,181,254,184],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.Results:49","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.MocksControl:361","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.Injector:65","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:440","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection)","position":"org.easymock.internal.Injector:170","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","position":"org.easymock.internal.DefaultClassInstantiator:93","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ((this.java.lang.Object.equals(org.easymock.internal.Invocation.java.lang.Object)) && (this.java.lang.reflect.Method.equals(org.easymock.internal.Invocation.java.lang.reflect.Method))) && org.easymock.internal.Invocation.(equalArguments(org.easymock.internal.Invocation.java.lang.Object[]))","position":"org.easymock.internal.Invocation:99","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:321","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException)","position":"org.easymock.internal.DefaultClassInstantiator:47","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:58","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:814","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:289","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(double , double))","position":"org.easymock.EasyMock:1831","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:77","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:430","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"number":"number"},"name":"add","transplant":{"sourceCode":"return java.lang.Number.intValue()","position":"org.easymock.internal.RecordState:199","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.byteValue()","position":"org.easymock.internal.RecordState:195","type":"CtReturnImpl"},"status":-2},{"failures":[215,295,296,216,217,218,0,1,2,3,4,5,297,6,219,220,221,222,298,223,224,299,7,300,8,9,10,225,226,11,301,302,303,304,305,306,307,308,12,13,14,15,16,309,227,17,310,311,228,229,312,313,230,314,18,315,316,317,318,319,320,19,20,21,22,23,321,322,323,324,325,326,327,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,328,329,50,51,52,53,330,54,55,331,56,57,58,59,60,231,61,62,332,333,334,63,64,335,65,336,337,338,339,340,341,342,343,344,345,346,347,66,67,68,69,70,71,72,73,74,75,348,76,349,77,232,233,78,79,80,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,279,378,379,380,381,382,383,384,385,386,81,82,83,84,85,86,87,387,388,389,88,89,90,91,92,93,390,234,235,236,94,95,237,96,97,238,239,240,241,242,391,392,98,393,394,99,100,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,410,411,412,413,414,415,416,417,418,121,122,123,124,419,125,126,127,128,129,130,420,131,132,133,134,135,136,137,138,139,140,141,142,243,143,144,145,146,244,147,148,421,149,150,245,246,151,422,423,152,247,282,283,284,424,425,248,426,427,285,428,429,286,153,154,155,156,157,158,159,160,161,430,162,431,163,164,249,432,165,433,166,167,250,251,168,169,170,171,172,173,287,288,289,434,435,252,436,437,290,438,439,291,174,175,176,177,253,178,179,180,181,182,183,440,254,184,185,186,441,255,187,188,442,443,189,190,191,256,192,193,257,444,258,194,195,445,446,447,196,259,197,448,449,450,451,452,198,199,260,453,261,454,455,456,457,458,459,200,262,201,202,203,204,460,461,205,462,463,206,464,207,465,466,467,468,469,470,263,471,472,264,473,474,475,476,477,478,479,480,481,265,482,483,484,485,486,266,487,488,208,209,210,489,490,267,268,269,270,271,272,273,491,274,275,276,277,278,492,211,212,213,214],"binaryOperator":"(int >= 0)","name":"negateConditional","position":"org.easymock.internal.Range:40","type":"mutation","status":-1},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1291","type":"mutation","return":"return 0","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int = java.lang.Integer.int","position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","position":"org.easymock.internal.MockInvocationHandler:36","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Equals:53","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.ClassProxyFactory.MockMethodInterceptor org.easymock.internal.ClassProxyFactory.MockMethodInterceptor = new org.easymock.internal.ClassProxyFactory.MockMethodInterceptor(java.lang.reflect.InvocationHandler)","position":"org.easymock.internal.ClassProxyFactory:167","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","position":"org.easymock.internal.matchers.CompareTo:41","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","position":"org.easymock.internal.matchers.CompareTo:45","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(org.easymock.internal.Range.hasFixedCount())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"));\n} ","position":"org.easymock.internal.Results:39","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksBehavior.lastBehaviorList().addExpected(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result, org.easymock.internal.Range)","position":"org.easymock.internal.MocksBehavior:61","type":"CtInvocationImpl"},"status":-2},{"failures":[394,396],"binaryOperator":"int < (java.util.List<java.lang.reflect.Method>.size())","name":"negateConditional","position":"org.easymock.internal.BridgeMethodResolver:113","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = (java.util.Set<java.lang.reflect.Method>) == null ? new java.lang.reflect.Method[0] : java.util.Set<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.Set<java.lang.reflect.Method>.size()])","position":"org.easymock.internal.MockBuilder:201","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","position":"org.easymock.EasyMock:557","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:330","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1608","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.ClassProxyFactory:197","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:25","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.Throwable java.lang.Throwable","position":"org.easymock.internal.EasyMockProperties:129","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:198","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"method","method":"method"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.AndroidClassProxyFactory:80","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{"arguments":"mocks"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","position":"org.easymock.internal.ArgumentToString:83","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","position":"org.easymock.EasyMock:2038","type":"CtForEachImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:94","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object) == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int])","position":"org.easymock.internal.DefaultClassInstantiator:121","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{"throwable":"t"},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","position":"org.easymock.internal.RecordState:269","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.ReplayState:65","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    int += 1;\n    return java.util.List<org.easymock.internal.Result>.get(int);\n} ","position":"org.easymock.internal.Results:67","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.reflect.Constructor<?>.newInstance(java.lang.Object[]);\n} catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalArgumentException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException);\n}","position":"org.easymock.internal.DefaultClassInstantiator:54","type":"CtTryImpl"},"status":-2},{"failures":[215,295,295,296,296,216,217,218,0,1,2,3,4,5,6,219,220,221,7,8,9,10,225,226,11,12,13,14,15,16,309,227,17,310,311,228,229,312,313,230,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,329,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,348,76,349,77,232,233,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,236,94,95,237,96,97,238,239,240,241,242,98,99,100,398,400,401,403,406,408,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,418,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,244,147,148,421,149,150,245,246,151,422,423,152,247,248,153,154,155,156,157,158,159,160,161,162,163,164,249,165,433,166,167,250,251,168,169,170,171,172,173,252,174,175,176,177,253,178,179,180,181,182,183,440,254,184,185,186,441,255,187,188,189,190,191,256,192,193,257,258,194,195,196,259,197,198,199,260,261,457,459,200,262,201,202,203,204,205,206,207,263,264,265,266,208,209,210,267,268,269,270,271,272,273,491,274,275,276,277,278,211,212,213,214],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:191","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:211","type":"CtTryImpl"},"status":-1},{"failures":[17,310,311,312,313,328,329,349,77,233,78,85,86,87,236,410,148,421,422,423,167,251,168,457,459,211,212,213,214],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Invocation:182","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:52","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.ClassProxyFactory.org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable())) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.ClassProxyFactory:76","type":"CtIfImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":238,"org.easymock.tests2.MockedExceptionTest.testRealException":156,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":76,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":473,"org.easymock.tests.UsageVarargTest.varargIntAccepted":53,"org.easymock.tests.LimitationsTest.mockFinalMethod":393,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":121,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":210,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":316,"org.easymock.tests.UsageCallCountTest.tooManyCalls":235,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":400,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":483,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":445,"org.easymock.tests.UsageVarargTest.allKinds":60,"org.easymock.tests2.StubTest.stubWithReturnValue":209,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":488,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":15,"org.easymock.tests2.CaptureTest.testCaptureAll":175,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":94,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":137,"org.easymock.tests2.CaptureTest.testAnd":174,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":490,"org.easymock.tests.UsageStrictMockTest.testVerify":80,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":38,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":223,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":301,"org.easymock.tests.MockClassControlTest.testToString":315,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":256,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":407,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":272,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":46,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":114,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":252,"org.easymock.tests.UsageThrowableTest.throwError":237,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":11,"org.easymock.samples.SupportTest.addDocument":217,"org.easymock.tests2.StubTest.stub":208,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":380,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":401,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":287,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":69,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":461,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":9,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":285,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":377,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":120,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":378,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":466,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":59,"org.easymock.tests.UsageExpectAndThrowTest.object":40,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":441,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":26,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":485,"org.easymock.tests2.UsageTest.moreThanOneArgument":148,"org.easymock.tests.UsageVarargTest.varargByteAccepted":58,"org.easymock.tests.MockClassControlTest.testEquals":319,"org.easymock.tests.UsageTest.wrongArguments":311,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":22,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":353,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":435,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":41,"org.easymock.tests2.UsageTest.defaultResetToNice":151,"org.easymock.tests.MockingTest.testNiceClassMocking":338,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":155,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":255,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":261,"org.easymock.tests2.MockBuilderTest.testCreateMock":456,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":187,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":397,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":402,"org.easymock.samples.ExampleTest.voteAgainstRemovals":0,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":433,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":298,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":434,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":83,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":231,"org.easymock.tests2.CaptureTest.testCapture1_2446744":253,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":432,"org.easymock.samples.ExampleTest.voteForRemoval":2,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":416,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":93,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":7,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":414,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":323,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":453,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":12,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":79,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":107,"org.easymock.tests2.CaptureTest.testCaptureRightOne":183,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":398,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":443,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":204,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":82,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":382,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":399,"org.easymock.tests2.UsageConstraintsTest.cmpTo":132,"org.easymock.tests.MockTypeTest.fromEasyMockClass":304,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":344,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":438,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":454,"org.easymock.tests2.MockedExceptionTest.testMockedException":154,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":49,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":73,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":143,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":85,"org.easymock.samples.PartialClassMockTest.testGetArea":219,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":363,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":62,"org.easymock.samples.ConstructorCalledMockTest.testTax":295,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":444,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":412,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":302,"org.easymock.tests2.UsageTest.argumentsOrdered":423,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":442,"org.easymock.samples.ExampleTest.removeNonExistingDocument":297,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":417,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":191,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":342,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":327,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":106,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":19,"org.easymock.tests2.AnswerTest.answer":188,"org.easymock.tests.MockingTest.testNicePartialClassMocking":64,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":439,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":77,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":70,"org.easymock.tests2.CompareToTest.testLessThan":280,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":75,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":381,"org.easymock.tests.UsageExpectAndThrowTest.longType":33,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":308,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":265,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":491,"org.easymock.tests.UsageTest.argumentsOrdered":313,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":124,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":260,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":119,"org.easymock.tests2.NameTest.nameForStrictMock":212,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":225,"org.easymock.tests2.MockBuilderTest.testCreateMockString":459,"org.easymock.tests2.CaptureTest.testCaptureNone":181,"org.easymock.tests2.SerializationTest.testClass":170,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":362,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":376,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":355,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":220,"org.easymock.tests.MockingTest.testInterfaceMocking":335,"org.easymock.tests2.EasyMockSupportTest.testVerify":278,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":351,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":437,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":199,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":35,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":337,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":243,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":244,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":118,"org.easymock.tests.GenericTest.testBridgedEquals":396,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":457,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":130,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":258,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":200,"org.easymock.tests2.UsageConstraintsTest.testOr":128,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":186,"org.easymock.tests.MockClassControlTest.testHashCode":318,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":283,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":492,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":95,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":113,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":242,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":306,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":72,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":192,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":487,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":471,"org.easymock.tests2.UsageConstraintsTest.testSame":127,"org.easymock.tests2.UsageTest.resumeIfFailure":152,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":388,"org.easymock.tests.UsageOverloadedMethodTest.overloading":61,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":194,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":307,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":462,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":425,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":426,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":478,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":386,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":296,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":100,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":477,"org.easymock.tests.UsageTest.openCallCountByLastCall":228,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":36,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":410,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":385,"org.easymock.tests2.NameTest.nameForNiceMock":213,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":404,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":436,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":84,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":71,"org.easymock.tests2.CaptureTest.testPrimitive":177,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":201,"org.easymock.samples.BasicClassMockTest.testPrintContent":221,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":387,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":66,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":206,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":161,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":234,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":89,"org.easymock.tests2.UsageStrictMockTest.differentMethods":168,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":479,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":269,"org.easymock.tests.MockingTest.testClassMocking":333,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":395,"org.easymock.tests2.CaptureTest.testCaptureLast":180,"org.easymock.tests2.UsageConstraintsTest.equals":419,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":31,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":390,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":92,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":259,"org.easymock.tests.UsageStrictMockTest.range":233,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":229,"org.easymock.tests.UsageTest.unexpectedCallWithArray":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":480,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":359,"org.easymock.samples.ExampleTest.addDocument":4,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":336,"org.easymock.tests2.UsageConstraintsTest.lessThan":146,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":300,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":312,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":222,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":379,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":431,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":368,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":411,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":347,"org.easymock.tests2.MockBuilderTest.testWithConstructor":448,"org.easymock.tests2.UsageStrictMockTest.range":251,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":195,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":21,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":328,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":361,"org.easymock.tests.UsageTest.moreThanOneArgument":17,"org.easymock.tests2.UsageTest.openCallCountByLastCall":245,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":293,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":449,"org.easymock.tests.UsageStrictMockTest.differentMethods":78,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":341,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":365,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":415,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":34,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":321,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":101,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":472,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":205,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":232,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":289,"org.easymock.tests2.DependencyTest.testClassMockingSupport":447,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":45,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":16,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":424,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":215,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":324,"org.easymock.tests2.UsageConstraintsTest.testContains":133,"org.easymock.tests2.UsageConstraintsTest.testFind":125,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":178,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":343,"org.easymock.samples.ExampleTest.addAndChangeDocument":6,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":197,"org.easymock.tests.UsageVarargTest.varargCharAccepted":54,"org.easymock.tests2.CaptureTest.testCaptureFromStub":440,"org.easymock.tests.UsageVerifyTest.twoThrows":86,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":291,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":303,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":10,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":55,"org.easymock.tests2.DelegateToTest.testReturnException":163,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":150,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":489,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":277,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":294,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":166,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":394,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":430,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":389,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":345,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":408,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":182,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":42,"org.easymock.tests2.UsageConstraintsTest.testMatches":136,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":20,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":366,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":279,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":367,"org.easymock.tests2.UsageConstraintsTest.testNull":126,"org.easymock.tests.LimitationsTest.abstractClass":391,"org.easymock.tests2.EasyMockSupportClassTest.testAll":263,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":346,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":8,"org.easymock.tests2.UsageConstraintsTest.greaterThan":138,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":51,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":403,"org.easymock.tests.UsageExpectAndReturnTest.object":111,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":140,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":274,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":169,"org.easymock.tests2.DelegateToTest.testWrongClass":249,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":358,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":37,"org.easymock.samples.ExampleTest.voteAgainstRemoval":3,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":241,"org.easymock.tests.UsageVarargTest.varargShortAccepted":56,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":383,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":354,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":429,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":68,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":470,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":314,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":288,"org.easymock.tests2.SerializationTest.testAllMockedMethod":172,"org.easymock.tests2.NameTest.nameForMocksControl":214,"org.easymock.tests.MockingTest.testStrictClassMocking":332,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":226,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":476,"org.easymock.tests.LimitationsTest.mockNativeMethod":98,"org.easymock.tests2.DelegateToTest.testStubDelegate":164,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":322,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":292,"org.easymock.tests.UsageUnorderedTest.message":236,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":299,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":370,"org.easymock.samples.ExampleTest.answerVsDelegate":1,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":326,"org.easymock.tests.UsageCallCountTest.tooFewCalls":91,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":110,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":189,"org.easymock.tests.UsageVerifyTest.twoReturns":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":484,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":39,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":105,"org.easymock.tests2.DependencyTest.testInterfaceMocking":196,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":369,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":267,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":25,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":371,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":270,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":160,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":129,"org.easymock.tests.MockingTest.testTwoMocks":334,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":90,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":13,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":153,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":88,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":474,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":112,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":193,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":290,"org.easymock.tests.UsageThrowableTest.throwCheckedException":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":375,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":469,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":305,"org.easymock.samples.ExampleTest.voteForRemovals":5,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":97,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":135,"org.easymock.tests.ReplayStateInvalidUsageTest.times":405,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":27,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":224,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":475,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":203,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":227,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":356,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":102,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":413,"org.easymock.tests2.UsageConstraintsTest.any":131,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":284,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":357,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":109,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":360,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":276,"org.easymock.tests.LimitationsTest.privateConstructor":392,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":162,"org.easymock.tests2.CallbackTest.callback":173,"org.easymock.tests2.NameTest.nameForMock":211,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":364,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":458,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":134,"org.easymock.tests.MockNameTest.defaultName":409,"org.easymock.tests2.SerializationTest.test":171,"org.easymock.tests.UsageExpectAndReturnTest.longType":104,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":179,"org.easymock.tests2.CaptureTest.testCaptureFirst":184,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":50,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":141,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":24,"org.easymock.tests2.UsageTest.niceToStrict":149,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":23,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":325,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":339,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":348,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":43,"org.easymock.tests2.UsageTest.strictResetToDefault":147,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":468,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":207,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":309,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":30,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":108,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":157,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":452,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":460,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":52,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":139,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":202,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":29,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":65,"org.easymock.tests2.DelegateToTest.testDelegate":165,"org.easymock.tests2.UsageConstraintsTest.testNotNull":144,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":250,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":451,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":248,"org.easymock.tests2.CaptureTest.testCapture_2617107":176,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":373,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":406,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":427,"org.easymock.tests2.ThreadingTest.testThreadSafe":185,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":246,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":374,"org.easymock.tests.UsageThrowableTest.noUpperLimit":96,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":330,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":275,"org.easymock.tests.UsageExpectAndReturnTest.floatType":103,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":268,"org.easymock.tests2.UsageTest.wrongArguments":421,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":420,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":159,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":317,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":455,"org.easymock.tests.UsageRangeTest.combination":81,"org.easymock.samples.SupportTest.voteForRemovals":218,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":481,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":145,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":142,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":486,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":286,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":167,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":115,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":44,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":14,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":281,"org.easymock.tests.UsageExpectAndThrowTest.floatType":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":482,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":116,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":262,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":282,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":463,"org.easymock.tests.UsageTest.exactCallCountByLastCall":230,"org.easymock.tests2.AnswerTest.stubAnswer":190,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":273,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":264,"org.easymock.tests.MockingTest.testPartialClassMocking":63,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":117,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":422,"org.easymock.tests2.UsageConstraintsTest.constraints":123,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":158,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":418,"org.easymock.tests.UsageVarargTest.varargLongAccepted":57,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":74,"org.easymock.tests.ObjectMethodsTest.testHashCode":352,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":464,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":465,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":349,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":48,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":266,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":384,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":329,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":450,"org.easymock.tests2.DependencyTest.testClassMocking":446,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":67,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":320,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":350,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":428,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":271,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":18,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":122,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":198,"org.easymock.tests.DefaultClassInstantiatorTest.object":340,"org.easymock.tests.UsageVarargTest.differentLength":331,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":372,"org.easymock.tests2.CaptureTest.testCapture2_2446744":254,"org.easymock.tests.GenericTest.testPackageScope":99}}]

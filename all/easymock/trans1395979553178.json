[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ClassProxyFactory:137","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object","position":"org.easymock.internal.BridgeMethodResolver:223","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:275","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:297","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.StringBuffer.toString()","position":"org.easymock.internal.ExpectedInvocation:113","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl"},"status":-2},{"failures":[0],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.Invocation:117","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","position":"org.easymock.internal.ExpectedInvocation:106","type":"CtForImpl"},"status":-2},{"failures":[1],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"status":-1},{"failures":[2,3,4,5],"variableMapping":{"state":"state"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","position":"org.easymock.internal.MocksControl:222","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:325","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.ReplayState:65","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes())","position":"org.easymock.internal.AndroidClassProxyFactory:50","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2485406702001842607L","position":"org.easymock.internal.matchers.LessOrEqual:26","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","position":"org.easymock.internal.DefaultClassInstantiator:138","type":"CtInvocationImpl"},"status":-2},{"failures":[6,7,8,9,10,11],"variableMapping":{"state":"state"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.replay()","position":"org.easymock.internal.MocksControl:212","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","position":"org.easymock.internal.MocksControl:285","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1052","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","position":"org.easymock.internal.DefaultClassInstantiator:126","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:44","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.IProxyFactory","position":"org.easymock.internal.MocksControl:137","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","position":"org.easymock.internal.EasyMockProperties:133","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = new java.lang.Class[java.lang.String[].int]","position":"org.easymock.internal.MethodSerializationWrapper:65","type":"CtLocalVariableImpl"},"status":-2},{"failures":[12],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","position":"org.easymock.internal.RecordState:263","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:224","type":"CtThrowImpl"},"status":-1},{"failures":[13,14,15,16,17,18,19,20,21,22,23],"binaryOperator":"int < int","name":"negateConditional","position":"org.easymock.internal.LastControl:95","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.internal.UnorderedBehavior org.easymock.internal.UnorderedBehavior : java.util.List<org.easymock.internal.UnorderedBehavior>.subList(int, java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    if (!(org.easymock.internal.UnorderedBehavior.verify())) {\n        boolean = false;\n        break;\n    } \n}","position":"org.easymock.internal.MocksBehavior:154","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:249","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"mockClass"},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:388","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass()","position":"org.easymock.internal.ClassProxyFactory:184","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:44","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:44","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.Invocation:204","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:47","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(java.lang.Object[], 0, java.lang.Object[], int, int)","position":"org.easymock.internal.Invocation:64","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!boolean) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove();\n    throw new java.lang.IllegalStateException(java.lang.String);\n} ","position":"org.easymock.internal.LastControl:102","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Float>(float))","position":"org.easymock.EasyMock:1025","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()))","position":"org.easymock.internal.ClassProxyFactory:108","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.internal.Results:77","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","position":"org.easymock.internal.MocksControl:390","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()))","position":"org.easymock.internal.Injector:233","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:250","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(java.lang.Object[], 0, java.lang.Object[], int, int)","position":"org.easymock.internal.Invocation:64","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Integer.java.lang.Class<java.lang.Integer>.getName(), java.lang.Integer.java.lang.Class<java.lang.Integer>)","position":"org.easymock.internal.MethodSerializationWrapper:37","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.Injection","position":"org.easymock.internal.Injector:240","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalArgumentException)","position":"org.easymock.internal.DefaultClassInstantiator:58","type":"CtThrowImpl"},"status":-2},{"failures":[24],"variableMapping":{"buffer":"buffer"},"name":"add","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"<any>\")","position":"org.easymock.internal.matchers.Any:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","position":"org.easymock.internal.matchers.Captures:43","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:73","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(double , double))","position":"org.easymock.EasyMock:1831","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:85","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return new org.easymock.internal.Result(org.easymock.IAnswer<?> , false)","position":"org.easymock.internal.Result:102","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","position":"org.easymock.internal.MocksControl:276","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","position":"org.easymock.internal.MockBuilder:71","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","position":"org.easymock.internal.DefaultClassInstantiator:40","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"result"},"name":"add","transplant":{"sourceCode":"return int < 0","position":"org.easymock.LogicalOperator:27","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int >= 0","position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl"},"status":-2},{"failures":[13,17,21,22,23],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:734","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:136","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>.getName(), java.lang.Character.java.lang.Class<java.lang.Character>)","position":"org.easymock.internal.MethodSerializationWrapper:36","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:200","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"args":"args","org.easymock.internal.Invocation.NO_ARGS":"args"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object[] == null ? java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:57","type":"CtReturnImpl"},"status":0},{"failures":[17],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","position":"org.easymock.internal.RecordState:85","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1190","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.io.IOException java.io.IOException","position":"org.easymock.internal.EasyMockProperties:71","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","position":"org.easymock.internal.ErrorMessage:53","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int += org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:71","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:800","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:311","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksBehavior.addBehaviorListIfNecessary(org.easymock.internal.ExpectedInvocation)","position":"org.easymock.internal.MocksBehavior:60","type":"CtInvocationImpl"},"status":0},{"failures":[25,26,27,28,29,30,31,6,32,33,34,35,36,37,38,39,40,7,41,42,43,44,45,46,2,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,13,14,178,15,179,16,17,180,181,182,183,184,185,186,187,188,189,19,190,191,192,193,20,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,8,221,9,11,222,223,224,225,226,227,228,229,230,231,232,233,21,234,22,235,236,237,238,239,240,241,23,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,5,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","position":"org.easymock.internal.ReplayState:68","type":"CtInvocationImpl"},"status":-1},{"failures":[303,304],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.DefaultClassInstantiator:111","type":"mutation","status":-1},{"failures":[10],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","position":"org.easymock.internal.RecordState:144","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","position":"org.easymock.internal.RecordState:125","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:261","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:414","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.BridgeMethodResolver:142","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object.equals(java.lang.Object)","position":"org.easymock.internal.matchers.Equals:40","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:44","type":"CtIfImpl"},"status":-2},{"failures":[14],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1276","type":"CtInvocationImpl"},"status":-1},{"failures":[6,40,305,218,220,232,250,306,251,253],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:284","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:275","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","position":"org.easymock.internal.ArgumentToString:89","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Invocation:131","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.IMocksControl.replay()","position":"org.easymock.EasyMockSupport:542","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksBehavior.addBehaviorListIfNecessary(org.easymock.internal.ExpectedInvocation)","position":"org.easymock.internal.MocksBehavior:60","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.closeMethod()","position":"org.easymock.internal.RecordState:76","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.MocksBehavior:70","type":"CtReturnImpl"},"status":-2},{"failures":[26,26,27,27,44,45,47,52,307,111,112,113,114,115,116,117,118,119,120,124,143,144,176,177,178,15,179,16,183,185,186,188,189,20,194,195,224,242,288],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","position":"org.easymock.internal.RecordState:145","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:135","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-4214363692271370781L","position":"org.easymock.Capture:33","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((this.boolean) != boolean) {\n    return false;\n} else if ((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.isEmpty()) || (!(this.boolean))) {\n    return true;\n} else {\n    final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.get(((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size()) - 1)).getExpectedInvocation();\n    return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation);\n}","position":"org.easymock.internal.UnorderedBehavior:102","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","position":"org.easymock.internal.ReflectionUtils:189","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>","position":"org.easymock.internal.BridgeMethodResolver:275","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"replace","transplant":{"sourceCode":"return java.lang.Class<?>.getConstructors()[0]","position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])","position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-1951159588262854559L","position":"org.easymock.internal.ExpectedInvocationAndResult:25","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-7104607303959381785L","position":"org.easymock.internal.matchers.Find:28","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.Invocation.getMethod()","position":"org.easymock.internal.Result:82","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","position":"org.easymock.internal.EasyMockProperties:122","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:50","type":"CtIfImpl"},"status":-2},{"failures":[31,6,32,33,34,35,36,308,43,44,45,46,2,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,309,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,310,94,95,96,97,98,100,101,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,311,129,312,130,131,132,133,134,313,314,135,136,137,138,142,143,144,145,146,147,148,149,150,151,152,153,154,155,315,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,316,176,177,13,14,178,15,179,16,17,180,181,182,183,184,185,186,187,188,189,19,190,191,193,20,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,211,212,213,214,215,216,217,218,220,8,221,9,11,222,223,224,225,226,227,228,229,230,231,232,21,234,22,235,236,237,238,239,240,241,23,242,243,244,245,246,247,248,249,250,251,252,253,255,256,259,260,261,263,265,266,270,271,272,273,274,275,276,277,279,280,282,5,288,289,317,318,319,320],"variableMapping":{"this":"this","mock":"mock"},"name":"replace","transplant":{"sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","position":"org.easymock.EasyMock:2067","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","position":"org.easymock.EasyMock:2012","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Range.this(int, int)","position":"org.easymock.internal.Range:32","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()))","position":"org.easymock.internal.Injector:233","type":"CtThrowImpl"},"status":-2},{"failures":[13,321],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.And:49","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","position":"org.easymock.EasyMock:1470","type":"CtInvocationImpl"},"status":-2},{"failures":[36,46,2,322,323,126,127,324,4,325,326,327,328,329,330,331,332,135,142,146,333,218,220,224,226,227,232,251,5],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:422","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.getControlForLastCall()","position":"org.easymock.EasyMock:551","type":"CtReturnImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n    return java.lang.Number.byteValue();\n} else if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:194","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:77","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","position":"org.easymock.internal.MocksControl:318","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:137","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (((java.lang.Number.doubleValue()) - (java.lang.Number.doubleValue())) <= (java.lang.Number.doubleValue())) && ((java.lang.Number.doubleValue()) <= ((java.lang.Number.doubleValue()) + (java.lang.Number.doubleValue())))","position":"org.easymock.internal.matchers.EqualsWithDelta:40","type":"CtReturnImpl"},"status":-2},{"failures":[3,4,334],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","position":"org.easymock.internal.RecordState:281","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:328","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"mockedMethods":"mockedMethods"},"name":"replace","transplant":{"sourceCode":"this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","position":"org.easymock.internal.MockBuilder:72","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size())","position":"org.easymock.internal.ClassProxyFactory:114","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((this.boolean) != boolean) {\n    return false;\n} else if ((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.isEmpty()) || (!(this.boolean))) {\n    return true;\n} else {\n    final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.get(((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size()) - 1)).getExpectedInvocation();\n    return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation);\n}","position":"org.easymock.internal.UnorderedBehavior:102","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"(((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\")","name":"math","position":"org.easymock.internal.matchers.CompareTo:49","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:29","type":"CtNewClassImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"-3483500330975410177L","position":"org.easymock.internal.RuntimeExceptionWrapper:23","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[25,26,26,27,27,28,29,30,31,6,32,33,34,35,335,36,37,38,39,40,336,7,41,337,308,42,43,44,45,46,2,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,338,309,339,340,341,342,343,344,63,64,65,66,67,322,345,346,347,307,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,348,310,94,95,96,97,98,99,100,101,102,103,104,105,106,107,349,108,109,110,350,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,311,351,352,353,324,4,325,326,327,328,329,330,331,332,129,312,130,131,132,133,134,354,355,356,313,314,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,357,358,359,334,360,315,333,361,362,363,364,365,366,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,316,176,177,13,14,178,15,179,16,17,180,18,181,182,183,184,185,186,187,188,189,19,190,191,192,193,20,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,220,367,8,221,9,10,11,222,223,224,225,226,227,228,229,230,231,232,233,21,234,22,235,236,237,238,239,240,241,23,242,243,244,245,246,247,248,249,250,368,306,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,5,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,317,318,319,320],"binaryOperator":"((org.easymock.internal.Result) == null)","name":"negateConditional","position":"org.easymock.internal.RecordState:217","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"-3018631689416120154L","position":"org.easymock.internal.matchers.EqualsWithDelta:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan)","position":"org.easymock.internal.Injector:82","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"f":"f","host":"testSubject","mock":"host"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Field.set(java.lang.Object, java.lang.Object)","position":"org.easymock.internal.Injector:131","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.Injector:73","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","position":"org.easymock.internal.matchers.Compare:55","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = org.easymock.internal.matchers.Equals.getExpected()","position":"org.easymock.internal.matchers.ArrayEquals:35","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.ExpectedInvocation:58","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<org.easymock.IArgumentMatcher> != null) {\n    if ((java.util.List<org.easymock.IArgumentMatcher>.size()) != (org.easymock.internal.Invocation.getArguments().int)) {\n        throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"));\n    } \n    return java.util.List<org.easymock.IArgumentMatcher>;\n} ","position":"org.easymock.internal.ExpectedInvocation:45","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"tv":"typeVariableArgument","typeVariableMap":"typeVariableMap"},"name":"add","transplant":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","position":"org.easymock.internal.BridgeMethodResolver:222","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","position":"org.easymock.internal.BridgeMethodResolver:334","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","position":"org.easymock.EasyMock:1708","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"behavior":"behavior"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","position":"org.easymock.internal.ReplayState:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","position":"org.easymock.internal.MocksControl:190","type":"CtInvocationImpl"},"status":0},{"failures":[369],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","position":"org.easymock.internal.matchers.Null:39","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToNice();\n}","position":"org.easymock.EasyMockSupport:572","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToDefault();\n}","position":"org.easymock.EasyMockSupport:583","type":"CtForEachImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","position":"org.easymock.internal.RecordState:241","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"))","position":"org.easymock.internal.ClassProxyFactory:230","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:907","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:163","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","position":"org.easymock.internal.MockBuilder:164","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","name":"name","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:155","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:466","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return int <= 0","position":"org.easymock.internal.matchers.LessOrEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isArray()) {\n        final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n                return false;\n            } \n            break;\n        } \n    } \n    if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:193","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T> , this)","position":"org.easymock.EasyMockSupport:497","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","position":"org.easymock.EasyMock:480","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","position":"org.easymock.internal.RecordState:252","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1276","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.this(java.lang.Class<T>, null)","position":"org.easymock.internal.MockBuilder:50","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:127","type":"CtTryImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)","position":"org.easymock.internal.Injector:134","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:184","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:409","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.ExpectedInvocationAndResult>.add(new org.easymock.internal.ExpectedInvocationAndResult(org.easymock.internal.ExpectedInvocation , org.easymock.internal.Result))","position":"org.easymock.internal.MocksBehavior:56","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:288","type":"CtThrowImpl"},"status":-2},{"failures":[26,26,27,27,37,38,39,43,370,371,338,309,339,340,341,342,343,344,372,373,349,108,109,110,374,350,303,375,376,377,304,378,379,380,153,381,382,154,155,357,383,384,385,386,210,211,212,229,231,254,255,256,257,259,260,387,388,263,264,389,390,265,266,267,268,391,269,270,271,272,273,275,276,277,278,279,392,393,280,281,282,283,394,395,396,397,398,284,399,400,285,401,402,403,404,405,406,407,408,409,286,410,411,412,413,414,287,415,416,289,417],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = true","position":"org.easymock.internal.AndroidSupport:27","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","position":"org.easymock.internal.AndroidSupport:29","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:25","type":"CtNewClassImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":148,"org.easymock.tests2.MockedExceptionTest.testRealException":213,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":401,"org.easymock.tests.UsageVarargTest.varargIntAccepted":96,"org.easymock.tests.LimitationsTest.mockFinalMethod":381,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":176,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":289,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":340,"org.easymock.tests.UsageCallCountTest.tooManyCalls":141,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":360,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":411,"org.easymock.tests.UsageVarargTest.allKinds":104,"org.easymock.tests2.StubTest.stubWithReturnValue":288,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":416,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":51,"org.easymock.tests2.CaptureTest.testCaptureAll":234,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":143,"org.easymock.tests2.ConstraintsToStringTest.andToString":321,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":187,"org.easymock.tests2.CaptureTest.testAnd":21,"org.easymock.tests.UsageStrictMockTest.testVerify":311,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":82,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":7,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":370,"org.easymock.tests.MockClassControlTest.testToString":339,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":254,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":365,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":295,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":90,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":169,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":233,"org.easymock.tests.UsageThrowableTest.throwError":145,"org.easymock.samples.SupportTest.addDocument":29,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":47,"org.easymock.tests2.StubTest.stub":5,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":326,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":315,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":114,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":44,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":175,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":395,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":394,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":103,"org.easymock.tests.UsageExpectAndThrowTest.object":84,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":247,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":70,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":413,"org.easymock.tests2.UsageTest.moreThanOneArgument":198,"org.easymock.tests.UsageVarargTest.varargByteAccepted":102,"org.easymock.tests.MockClassControlTest.testEquals":343,"org.easymock.tests.UsageTest.wrongArguments":57,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":66,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":353,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":85,"org.easymock.tests2.UsageTest.defaultResetToNice":204,"org.easymock.tests.MockingTest.testNiceClassMocking":374,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":212,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":248,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":268,"org.easymock.tests2.MockBuilderTest.testCreateMock":269,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":249,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":358,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":333,"org.easymock.samples.ExampleTest.voteAgainstRemovals":31,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":222,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":336,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":130,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":105,"org.easymock.tests2.CaptureTest.testCapture1_2446744":236,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":10,"org.easymock.samples.ExampleTest.voteForRemoval":32,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":138,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":308,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":346,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":48,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":128,"org.easymock.tests2.CaptureTest.testCaptureRightOne":23,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":162,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":359,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":306,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":277,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":312,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":328,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":334,"org.easymock.tests2.UsageConstraintsTest.cmpTo":182,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":377,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":1,"org.easymock.tests2.MockedExceptionTest.testMockedException":211,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":93,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":118,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":193,"org.easymock.samples.PartialClassMockTest.testGetArea":37,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":132,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":107,"org.easymock.samples.ConstructorCalledMockTest.testTax":26,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":385,"org.easymock.tests2.UsageTest.argumentsOrdered":206,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":368,"org.easymock.samples.ExampleTest.removeNonExistingDocument":335,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":253,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":375,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":307,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":161,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":63,"org.easymock.tests2.AnswerTest.answer":250,"org.easymock.tests.MockingTest.testNicePartialClassMocking":109,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":124,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":115,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":120,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":327,"org.easymock.tests.UsageExpectAndThrowTest.longType":77,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":91,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":286,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":297,"org.easymock.tests.UsageTest.argumentsOrdered":61,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":14,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":267,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":174,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":46,"org.easymock.tests2.MockBuilderTest.testCreateMockString":271,"org.easymock.tests2.NameTest.nameForStrictMock":318,"org.easymock.tests2.CaptureTest.testCaptureNone":240,"org.easymock.tests2.SerializationTest.testClass":229,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":38,"org.easymock.tests2.EasyMockSupportTest.testVerify":302,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":351,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":266,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":79,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":192,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":196,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":173,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":270,"org.easymock.tests.GenericTest.testBridgedEquals":383,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":180,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":258,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":272,"org.easymock.tests2.UsageConstraintsTest.testOr":16,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":246,"org.easymock.tests.MockClassControlTest.testHashCode":342,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":144,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":152,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":168,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":371,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":117,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":255,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":415,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":399,"org.easymock.tests2.UsageConstraintsTest.testSame":179,"org.easymock.tests2.UsageTest.resumeIfFailure":207,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":355,"org.easymock.tests.UsageOverloadedMethodTest.overloading":106,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":259,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":392,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":406,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":332,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":27,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":405,"org.easymock.tests.UsageTest.openCallCountByLastCall":58,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":80,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":331,"org.easymock.tests2.NameTest.nameForNiceMock":319,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":362,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":131,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":116,"org.easymock.tests2.CaptureTest.testPrimitive":235,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":274,"org.easymock.samples.BasicClassMockTest.testPrintContent":39,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":354,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":111,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":280,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":140,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":218,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":314,"org.easymock.tests2.UsageStrictMockTest.differentMethods":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":407,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":292,"org.easymock.tests.MockingTest.testClassMocking":373,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":357,"org.easymock.tests2.CaptureTest.testCaptureLast":239,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":75,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":139,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":137,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":262,"org.easymock.tests.UsageStrictMockTest.range":126,"org.easymock.tests.InvocationTest.testEquals":0,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":59,"org.easymock.tests.UsageTest.unexpectedCallWithArray":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":408,"org.easymock.samples.ExampleTest.addDocument":34,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":42,"org.easymock.tests2.UsageConstraintsTest.lessThan":195,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":60,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":40,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":325,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":367,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":384,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":378,"org.easymock.tests2.UsageStrictMockTest.range":226,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":260,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":65,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":348,"org.easymock.tests.UsageTest.moreThanOneArgument":55,"org.easymock.tests2.UsageTest.openCallCountByLastCall":202,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":264,"org.easymock.tests.UsageStrictMockTest.differentMethods":127,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":303,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":386,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":78,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":322,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":156,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":400,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":125,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":279,"org.easymock.tests2.DependencyTest.testClassMockingSupport":388,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":89,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":52,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":25,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":323,"org.easymock.tests2.UsageConstraintsTest.testContains":183,"org.easymock.tests2.UsageConstraintsTest.testFind":178,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":237,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":376,"org.easymock.samples.ExampleTest.addAndChangeDocument":36,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":263,"org.easymock.tests.UsageVarargTest.varargCharAccepted":97,"org.easymock.tests2.CaptureTest.testCaptureFromStub":242,"org.easymock.tests.UsageVerifyTest.twoThrows":133,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":45,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":98,"org.easymock.tests2.DelegateToTest.testReturnException":8,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":201,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":417,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":301,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":219,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":223,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":382,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":356,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":304,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":366,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":241,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":86,"org.easymock.tests2.UsageConstraintsTest.testMatches":186,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":64,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":4,"org.easymock.tests2.UsageConstraintsTest.testNull":15,"org.easymock.tests.LimitationsTest.abstractClass":379,"org.easymock.tests2.EasyMockSupportClassTest.testAll":284,"org.easymock.tests2.ConstraintsToStringTest.nullToString":369,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":43,"org.easymock.tests2.UsageConstraintsTest.greaterThan":188,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":94,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":361,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":19,"org.easymock.tests.UsageExpectAndReturnTest.object":166,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":298,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":228,"org.easymock.tests2.DelegateToTest.testWrongClass":9,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":81,"org.easymock.samples.ExampleTest.voteAgainstRemoval":33,"org.easymock.tests.CapturesMatcherTest.test":24,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":151,"org.easymock.tests.UsageVarargTest.varargShortAccepted":100,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":329,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":113,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":398,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":338,"org.easymock.tests2.SerializationTest.testAllMockedMethod":231,"org.easymock.tests2.NameTest.nameForMocksControl":320,"org.easymock.tests.MockingTest.testStrictClassMocking":372,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":2,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":404,"org.easymock.tests.LimitationsTest.mockNativeMethod":153,"org.easymock.tests2.DelegateToTest.testStubDelegate":221,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":345,"org.easymock.tests.UsageUnorderedTest.message":142,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":337,"org.easymock.samples.ExampleTest.answerVsDelegate":6,"org.easymock.tests.UsageCallCountTest.tooFewCalls":136,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":165,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":251,"org.easymock.tests.UsageVerifyTest.twoReturns":134,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":412,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":83,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":160,"org.easymock.tests2.DependencyTest.testInterfaceMocking":261,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":305,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":290,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":3,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":69,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":293,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":217,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":17,"org.easymock.tests.MockingTest.testTwoMocks":349,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":135,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":49,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":210,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":402,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":167,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":256,"org.easymock.tests.UsageThrowableTest.throwCheckedException":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":397,"org.easymock.samples.ExampleTest.voteForRemovals":35,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":147,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":185,"org.easymock.tests.ReplayStateInvalidUsageTest.times":363,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":41,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":403,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":276,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":54,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":157,"org.easymock.tests2.UsageConstraintsTest.any":181,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":164,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":300,"org.easymock.tests.LimitationsTest.privateConstructor":380,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":220,"org.easymock.tests2.CallbackTest.callback":232,"org.easymock.tests2.NameTest.nameForMock":317,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":184,"org.easymock.tests2.SerializationTest.test":230,"org.easymock.tests.UsageExpectAndReturnTest.longType":159,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":238,"org.easymock.tests2.CaptureTest.testCaptureFirst":244,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":12,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":190,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":68,"org.easymock.tests2.UsageTest.niceToStrict":200,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":67,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":347,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":121,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":87,"org.easymock.tests2.UsageTest.strictResetToDefault":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":396,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":282,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":53,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":74,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":163,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":214,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":278,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":390,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":95,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":189,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":275,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":73,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":110,"org.easymock.tests2.DelegateToTest.testDelegate":11,"org.easymock.tests2.UsageConstraintsTest.testNotNull":20,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":225,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":209,"org.easymock.tests2.CaptureTest.testCapture_2617107":22,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":364,"org.easymock.tests2.ThreadingTest.testThreadSafe":245,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":203,"org.easymock.tests.UsageThrowableTest.noUpperLimit":146,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":299,"org.easymock.tests.UsageExpectAndReturnTest.floatType":158,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":291,"org.easymock.tests2.UsageTest.wrongArguments":199,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":18,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":216,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":341,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":391,"org.easymock.samples.SupportTest.voteForRemovals":30,"org.easymock.tests.UsageRangeTest.combination":129,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":150,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":409,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":194,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":191,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":414,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":224,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":170,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":88,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":50,"org.easymock.tests.UsageExpectAndThrowTest.floatType":76,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":410,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":171,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":273,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":393,"org.easymock.tests.UsageTest.exactCallCountByLastCall":62,"org.easymock.tests2.AnswerTest.stubAnswer":252,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":296,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":285,"org.easymock.tests.MockingTest.testPartialClassMocking":108,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":172,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":205,"org.easymock.tests2.UsageConstraintsTest.constraints":13,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":215,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":316,"org.easymock.tests.UsageVarargTest.varargLongAccepted":101,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":119,"org.easymock.tests.ObjectMethodsTest.testHashCode":352,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":281,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":283,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":123,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":92,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":287,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":330,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":310,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":389,"org.easymock.tests2.DependencyTest.testClassMocking":387,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":112,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":344,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":294,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":177,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":309,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":265,"org.easymock.tests.DefaultClassInstantiatorTest.object":350,"org.easymock.tests.UsageVarargTest.differentLength":99,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":324,"org.easymock.tests2.CaptureTest.testCapture2_2446744":243,"org.easymock.tests.GenericTest.testPackageScope":154}}]

[{"transplant":{"position":"org.easymock.internal.ArgumentToString:41","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,1,2],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:76","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"m","equalsMethod":"m"}},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"failures":[3,4,5,6,7,8,9,10],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[11,12,13,14,15,6],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:122","sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:104","sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","type":"CtThrowImpl"},"failures":[16],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[17,18,19,20,21,22,23,24,25,25,26,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,3,4,5,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,7,8,9,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:48","sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[142,264],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[38,39,265,266],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:94","failures":[27,28,267,29,34,35,51,52,53,54,55,56,57,58,16,59,68,69,72,73],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:180","sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[62],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"o":"expected"}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[25,26,35,47,49,50,53,54,55,56,61,63,64,66,67,72,73,74,3,180,181,182,183,184,199,200,201,202,203,208,7,236,237,240,261,262],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.ReplayState:61","sourceCode":"final java.lang.Throwable java.lang.Throwable","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:162","sourceCode":"return java.lang.reflect.Constructor<T>","type":"CtReturnImpl"},"failures":[38,48,268,269,270,271,272,273,274],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:853","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[42],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:67","sourceCode":"return !(java.util.List<T>.isEmpty())","type":"CtReturnImpl"},"failures":[275,276,31,33,277,37],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Matches:40","failures":[278],"status":-1,"binaryOperator":"((\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[279],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:122","sourceCode":"return ((java.lang.String)(this.java.util.Properties.setProperty(java.lang.String, java.lang.String)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:89","sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[280],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"key","properties":"properties","key":"key"}},{"transplant":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[47,93,98,133,134,135,136,166,170,171,174,175,176,177,178,179,187,190,209,215,227,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[281],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[267,34],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:786","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"cls":"type","type":"type"}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[38,48,268,269,270,271,282,272,273,274],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1878","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[77,283,284,285,286,103,287,111],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[204,205,206],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:118","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[17,288,289,25,25,26,26,38,265,48,75,76,77,78,80,81,89,90,91,92,102,103,105,106,107,290,108,287,109,110,111,291,292,293,135,294,295,137,296,138,297,139,140,298,141,299,300,301,302,173,303,304,192,193,194,210,305,211,212],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[287,193],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:210","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"this.java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[288,289,265,75,78,89,102,103,105,106,107,108,111,135,264,173,306,307,308,309,210,305,310,212],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","hashCodeMethod":"equalsMethod","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[4,5,148,152,153,155,158,311,8,9,245,249,250,252,255],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"failures":[312],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:416","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","name":"name","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","type":"type","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[313,314,315,4,172,316,15,317,318,319,6,8,223,224],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:117","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[320,321],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:151","sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:150","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:151","sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"toMock":"toMock","argTypes":"argTypes","constructor":"constructor"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[313,314,315,4,172,316,15,317,318,319,6,8,223,224,322],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[323,324,325,235],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[38,39,265,266],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[313,314,315,4,172,316,15,317,318,319,6,8,223,224],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":52,"org.easymock.tests2.UsageTest.argumentsOrdered":315,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":187,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":129,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":177,"org.easymock.tests2.StubTest.stubWithReturnValue":47,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":273,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":71,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":153,"org.easymock.tests2.SerializationTest.testAllMockedMethod":265,"org.easymock.tests2.DelegateToTest.testReturnException":41,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":175,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":185,"org.easymock.tests.MockingTest.testPartialClassMocking":192,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":12,"org.easymock.samples.SupportTest.voteForRemovals":24,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":281,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":207,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":253,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":266,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":241,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":90,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":186,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":83,"org.easymock.tests.UsageExpectAndThrowTest.object":251,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":69,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":118,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":269,"org.easymock.tests2.DelegateToTest.testWrongClass":43,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":261,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":262,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":58,"org.easymock.tests2.UsageTest.wrongArguments":313,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":236,"org.easymock.tests.UsageStrictMockTest.range":8,"org.easymock.samples.ConstructorCalledMockTest.testTax":25,"org.easymock.samples.ExampleTest.answerVsDelegate":19,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":126,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":302,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":75,"org.easymock.tests2.UsageConstraintsTest.testNull":54,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":252,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":105,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":309,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":128,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":139,"org.easymock.tests2.CaptureTest.testPrimitive":29,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":240,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":318,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":260,"org.easymock.tests.UsageTest.moreThanOneArgument":188,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":104,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":13,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":182,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":231,"org.easymock.tests2.CaptureTest.testCaptureNone":32,"org.easymock.tests.UsageUnorderedTest.message":172,"org.easymock.tests.UsageVerifyTest.twoReturns":224,"org.easymock.tests2.ThreadingTest.testThreadSafe":112,"org.easymock.tests.UsageTest.argumentsOrdered":319,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":216,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":288,"org.easymock.tests2.CaptureTest.testCapture_2617107":267,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":199,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":294,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":239,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":297,"org.easymock.tests2.UsageConstraintsTest.any":59,"org.easymock.tests2.StubTest.stub":46,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":206,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":203,"org.easymock.tests.UsageExpectAndThrowTest.longType":244,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":176,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":1,"org.easymock.tests2.SerializationTest.testClass":38,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":132,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":88,"org.easymock.tests.LimitationsTest.mockNativeMethod":173,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":211,"org.easymock.tests2.AnswerTest.answer":82,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":163,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":16,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":293,"org.easymock.tests2.CaptureTest.testAnd":27,"org.easymock.tests2.UsageTest.strictResetToDefault":94,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":287,"org.easymock.tests2.MockedExceptionTest.testMockedException":134,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":181,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":197,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":123,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":190,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":220,"org.easymock.tests2.DelegateToTest.testDelegate":45,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":264,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":245,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":194,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":102,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":140,"org.easymock.tests.MockingTest.testNicePartialClassMocking":193,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":256,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":107,"org.easymock.tests2.CaptureTest.testCaptureLast":31,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":178,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":235,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":81,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":57,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":70,"org.easymock.tests.MockingTest.testTwoMocks":304,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":325,"org.easymock.tests2.CaptureTest.testCapture1_2446744":30,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":283,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":144,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":254,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":249,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":314,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":73,"org.easymock.tests.UsageThrowableTest.throwError":164,"org.easymock.tests.UsageStrictMockTest.differentMethods":9,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":114,"org.easymock.tests2.MockBuilderTest.testCreateMockString":300,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":306,"org.easymock.tests.UsageExpectAndThrowTest.floatType":243,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":184,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":65,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":85,"org.easymock.tests.UsageVerifyTest.twoThrows":223,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":323,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":91,"org.easymock.samples.PartialClassMockTest.testGetArea":17,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":279,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":200,"org.easymock.samples.ExampleTest.voteAgainstRemoval":21,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":230,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":229,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":110,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":242,"org.easymock.tests2.UsageTest.niceToStrict":96,"org.easymock.tests2.UsageConstraintsTest.testNotNull":72,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":133,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":171,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":138,"org.easymock.tests2.MockBuilderTest.testCreateMock":298,"org.easymock.tests2.UsageTest.defaultResetToNice":99,"org.easymock.samples.ExampleTest.voteAgainstRemovals":18,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":159,"org.easymock.tests2.CallbackTest.callback":131,"org.easymock.tests.UsageTest.openCallCountByLastCall":189,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":250,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":11,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":124,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":49,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":234,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":238,"org.easymock.tests.UsageOverloadedMethodTest.overloading":214,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":284,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":227,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":63,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":213,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":78,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":155,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":62,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":33,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":280,"org.easymock.tests.UsageThrowableTest.throwCheckedException":168,"org.easymock.tests.MockClassControlTest.testEquals":308,"org.easymock.tests2.EasyMockSupportClassTest.testAll":89,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":305,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":258,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":14,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":291,"org.easymock.tests2.CaptureTest.testCaptureAll":28,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":209,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":80,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":77,"org.easymock.tests2.UsageConstraintsTest.testMatches":64,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":79,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":87,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":183,"org.easymock.samples.ExampleTest.voteForRemovals":22,"org.easymock.tests2.ConstraintsToStringTest.matchesToString":278,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":116,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":222,"org.easymock.tests2.DependencyTest.testInterfaceMocking":117,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":271,"org.easymock.samples.BasicClassMockTest.testPrintContent":289,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":285,"org.easymock.tests2.DelegateToTest.testStubDelegate":42,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":170,"org.easymock.tests2.AnswerTest.stubAnswer":86,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":44,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":179,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":7,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":272,"org.easymock.tests2.UsageConstraintsTest.greaterThan":66,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":196,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":111,"org.easymock.samples.ExampleTest.voteForRemoval":20,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":113,"org.easymock.tests.UsageExpectAndReturnTest.floatType":146,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":162,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":290,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":48,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":26,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":324,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":67,"org.easymock.tests.UsageThrowableTest.noUpperLimit":165,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":212,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":93,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":50,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":275,"org.easymock.tests2.SerializationTest.test":39,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":274,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":121,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":166,"org.easymock.tests2.UsageConstraintsTest.testSame":55,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":145,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":174,"org.easymock.tests2.CaptureTest.testCaptureFirst":37,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":40,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":122,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":101,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":322,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":151,"org.easymock.tests.GenericTest.testPackageScope":210,"org.easymock.tests2.UsageTest.moreThanOneArgument":95,"org.easymock.tests2.CaptureTest.testCapture2_2446744":36,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":115,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":219,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":141,"org.easymock.tests.GenericTest.testBridgedEquals":310,"org.easymock.tests.UsageExpectAndReturnTest.longType":147,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":119,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":299,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":259,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":156,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":263,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":257,"org.easymock.tests2.UsageStrictMockTest.differentMethods":5,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":205,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":180,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":148,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":255,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":2,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":198,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":221,"org.easymock.tests2.MockedExceptionTest.testRealException":136,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":152,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":246,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":3,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":321,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":237,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":169,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":76,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":295,"org.easymock.tests2.UsageConstraintsTest.testContains":61,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":135,"org.easymock.tests2.UsageConstraintsTest.testFind":53,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":215,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":142,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":106,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":143,"org.easymock.tests.UsageExpectAndReturnTest.object":154,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":68,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":108,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":137,"org.easymock.tests2.UsageStrictMockTest.range":4,"org.easymock.tests2.UsageConstraintsTest.lessThan":74,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":127,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":270,"org.easymock.tests.UsageTest.exactCallCountByLastCall":191,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":208,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":311,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":282,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":120,"org.easymock.tests2.CaptureTest.testCaptureRightOne":34,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":217,"org.easymock.tests2.UsageConstraintsTest.testOr":56,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":268,"org.easymock.tests.UsageRangeTest.combination":195,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":103,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":160,"org.easymock.tests.UsageTest.wrongArguments":317,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":226,"org.easymock.tests.MockClassControlTest.testHashCode":307,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":303,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":149,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":157,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":0,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":218,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":233,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":225,"org.easymock.tests2.UsageConstraintsTest.cmpTo":60,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":84,"org.easymock.tests2.UsageTest.openCallCountByLastCall":97,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":98,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":130,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":232,"org.easymock.tests2.CaptureTest.testCaptureFromStub":35,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":320,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":296,"org.easymock.tests.UsageTest.unexpectedCallWithArray":15,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":316,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":248,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":6,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":167,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":158,"org.easymock.tests2.CaptureTest.testCapture":277,"org.easymock.tests2.UsageConstraintsTest.constraints":51,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":109,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":247,"org.easymock.samples.ExampleTest.addAndChangeDocument":23,"org.easymock.tests.UsageStrictMockTest.testVerify":10,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":161,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":204,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":92,"org.easymock.tests2.CompareToTest.testGreateThan":312,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":276,"org.easymock.tests2.UsageTest.resumeIfFailure":100,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":292,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":201,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":301,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":150,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":228,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":202,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":125}}]

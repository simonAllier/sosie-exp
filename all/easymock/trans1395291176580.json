[{"transplant":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","answer":"value"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[171],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[172,109,110,173],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[87,174,175,101,171],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:128","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.Capture:137","sourceCode":"return java.util.List<T>.toString()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[176,177],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1052","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[178,0,179,180,181,182,183,184,1,2,3,4,5,185,6,7,186,187,8,188,189,190,191,192,193,194,195,14,196,15,197,16,17,18,19,20,21,22,198,23,24,25,26,27,199,28,29,30,31,32,33,200,34,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,35,36,221,222,223,37,224,225,226,227,228,229,230,231,232,233,234,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,235,236,237,238,239,239,240,240,69,70,241,71,72,73,242,74,75,76,77,78,79,80,81,82,243,83,84,244,245,246,247,248,85,86,87,88,89,90,91,92,249,93,175,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,250,118,119,120,121,251,252,122,253,254,255,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,256,150,151,152,257,153,154,155,156,157,158,159,258,160,161,162,163,164,165,259,166,167,260,261,168,169,262,263,264,170,265],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MockBuilder:178","failures":[266,152],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:734","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[267,268,113,119],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[269,270,271,272],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:296","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[273,274,275,276,277,278,238],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","type":"CtInvocationImpl"},"failures":[176,176,75,76,279,77,78,280,281,79,80,81,82,243,83,84],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[282,75,279,77,78,280,281,79,81,177,82,243,84],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[142],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:113","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"method"}},{"position":"org.easymock.internal.RecordState:153","failures":[186,188,189,190,191,192,193,224,244,245,246,247],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"failures":[283],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[136],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1013","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[1,2,3,4,5,284,6,7,8,14,15,16,17,18,19,20,21,22,198,23,24,25,27,28,29,30,31,32,33,34,35,36,37,224,234,38,39,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,279,77,78,79,80,81,82,83,84,244,246,85,86,87,88,89,90,91,92,249,93,175,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,250,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,285,145,146,147,148,149,256,150,151,152,257,153,154,155,156,157,158,159,160,161,162,163,164,165,259,166,167,168,169,170],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[286,287,288,289,290,291],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"paramType"}},{"position":"org.easymock.internal.EasyMockProperties:67","failures":[269],"status":-1,"binaryOperator":"(\"Failed to read \" + java.lang.String)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:198","sourceCode":"final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = new java.util.ArrayList<java.lang.reflect.Field>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[1,2,3,4,5,185,6,7,186,187,8,188,189,190,191,192,193,292,293,294,295,296,14,196,15,197,17,18,297,298,286,19,299,20,21,300,301,22,198,23,24,25,302,303,304,27,199,28,29,30,31,32,33,200,34,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,305,306,307,308,309,310,311,312,313,314,35,36,37,224,225,226,227,228,229,315,316,230,317,318,319,234,38,39,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,289,320,66,67,321,322,68,323,324,325,326,70,241,71,72,327,73,242,75,76,279,77,78,280,281,79,80,81,82,243,83,84,244,245,246,247,248,85,86,87,88,89,90,91,92,174,93,328,329,330,331,94,95,96,97,98,100,101,104,105,332,333,334,335,336,337,106,338,107,108,339,109,110,173,252,122,253,255,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,340,150,341,257,342,158,343,258,160,161,162,344,163,345,164,165,259,346,347,166,167,260,261,168,169,264,170,265],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:235","failures":[239,240,348,109,349,350,351,352,353,354,355,356,357,168,358],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:173","failures":[122],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[168,358],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"name":"name"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[351,358,359,360,361,362,363],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:416","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[174],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[172,109,110,173],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[109,351,352,168,358,359,360,361,364],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"failures":[365],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:206","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:214","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[239,240,348,109,349,350,351,352,354,168,358,366],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[142],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":126,"org.easymock.tests2.UsageTest.argumentsOrdered":347,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":64,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":120,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":191,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":345,"org.easymock.tests2.StubTest.stubWithReturnValue":85,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":351,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":53,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":145,"org.easymock.tests2.SerializationTest.testAllMockedMethod":173,"org.easymock.tests2.DelegateToTest.testReturnException":252,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":194,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":189,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":357,"org.easymock.tests.MockingTest.testPartialClassMocking":38,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":291,"org.easymock.samples.SupportTest.voteForRemovals":74,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":0,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":277,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":213,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":172,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":201,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":195,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":155,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":262,"org.easymock.tests.UsageExpectAndThrowTest.object":211,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":179,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":143,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":159,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":359,"org.easymock.tests2.DelegateToTest.testWrongClass":253,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":35,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":36,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":132,"org.easymock.tests2.UsageTest.wrongArguments":344,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":6,"org.easymock.samples.ConstructorCalledMockTest.testTax":239,"org.easymock.tests.UsageStrictMockTest.range":20,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":325,"org.easymock.samples.ExampleTest.answerVsDelegate":241,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":250,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":99,"org.easymock.tests2.UsageConstraintsTest.testNull":128,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":212,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":89,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":119,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":151,"org.easymock.tests2.CaptureTest.testPrimitive":77,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":8,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":321,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":220,"org.easymock.tests.UsageTest.moreThanOneArgument":65,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":324,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":88,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":287,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":227,"org.easymock.tests2.CaptureTest.testCaptureNone":80,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":43,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":270,"org.easymock.tests.UsageUnorderedTest.message":200,"org.easymock.tests.UsageVerifyTest.twoReturns":15,"org.easymock.tests.UsageVarargTest.varargByteAccepted":312,"org.easymock.tests2.ThreadingTest.testThreadSafe":94,"org.easymock.tests.UsageTest.argumentsOrdered":322,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":180,"org.easymock.tests.UsageVarargTest.varargIntAccepted":307,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":319,"org.easymock.tests2.CaptureTest.testCapture_2617107":279,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":1,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":363,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":340,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":11,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":187,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":341,"org.easymock.tests2.UsageConstraintsTest.any":133,"org.easymock.tests2.StubTest.stub":248,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":223,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":5,"org.easymock.tests.UsageExpectAndThrowTest.longType":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":12,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":190,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":338,"org.easymock.tests2.SerializationTest.testClass":109,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":149,"org.easymock.tests.LimitationsTest.mockNativeMethod":34,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":153,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":63,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":26,"org.easymock.tests2.AnswerTest.answer":169,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":335,"org.easymock.tests2.CaptureTest.testAnd":75,"org.easymock.tests2.UsageTest.strictResetToDefault":161,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":350,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":339,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":174,"org.easymock.tests2.NameTest.nameForMocksControl":331,"org.easymock.tests2.MockedExceptionTest.testMockedException":245,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":226,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":23,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":115,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":67,"org.easymock.tests2.DelegateToTest.testDelegate":255,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":184,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":365,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":205,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":40,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":86,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":152,"org.easymock.tests.MockingTest.testNicePartialClassMocking":39,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":216,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":91,"org.easymock.tests2.CaptureTest.testCaptureLast":79,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":192,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":185,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":105,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":131,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":296,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":144,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":284,"org.easymock.tests2.CaptureTest.testCapture1_2446744":78,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":171,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":44,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":214,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":333,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":209,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":346,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":147,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":272,"org.easymock.tests.UsageThrowableTest.throwError":27,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":304,"org.easymock.tests.UsageStrictMockTest.differentMethods":21,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":96,"org.easymock.tests2.MockBuilderTest.testCreateMockString":342,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":229,"org.easymock.tests.UsageExpectAndThrowTest.floatType":203,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":139,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":264,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":366,"org.easymock.tests.UsageVerifyTest.twoThrows":196,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":355,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":156,"org.easymock.samples.PartialClassMockTest.testGetArea":69,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":2,"org.easymock.samples.ExampleTest.voteAgainstRemoval":72,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":10,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":41,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":42,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":93,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":202,"org.easymock.tests2.UsageTest.niceToStrict":163,"org.easymock.tests2.UsageConstraintsTest.testNotNull":146,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":244,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":33,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":273,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":150,"org.easymock.tests2.UsageTest.defaultResetToNice":259,"org.easymock.samples.ExampleTest.voteAgainstRemovals":70,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":59,"org.easymock.tests2.CallbackTest.callback":258,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":348,"org.easymock.tests.UsageTest.openCallCountByLastCall":66,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":290,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":210,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":116,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":123,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":237,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":315,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":323,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":186,"org.easymock.tests.UsageCallCountTest.tooFewCalls":317,"org.easymock.tests.UsageOverloadedMethodTest.overloading":17,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":233,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":137,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":55,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":16,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":102,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":136,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":81,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":326,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":271,"org.easymock.tests.UsageThrowableTest.throwCheckedException":30,"org.easymock.tests2.EasyMockSupportClassTest.testAll":154,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":302,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":288,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":218,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":334,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":294,"org.easymock.tests2.CaptureTest.testCaptureAll":76,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":224,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":104,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":101,"org.easymock.tests2.UsageConstraintsTest.testMatches":138,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":103,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":265,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":278,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":228,"org.easymock.samples.ExampleTest.voteForRemovals":73,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":362,"org.easymock.tests2.NameTest.nameForNiceMock":330,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":98,"org.easymock.tests.UsageVarargTest.allKinds":314,"org.easymock.tests2.ConstraintsToStringTest.notNullToString":283,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":14,"org.easymock.tests2.DependencyTest.testInterfaceMocking":158,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":361,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":295,"org.easymock.samples.ExampleTest.addDocument":327,"org.easymock.tests2.DelegateToTest.testStubDelegate":122,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":32,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":336,"org.easymock.tests2.AnswerTest.stubAnswer":170,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":254,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":193,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":19,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":364,"org.easymock.tests2.UsageConstraintsTest.greaterThan":140,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":198,"org.easymock.tests.UsageVarargTest.varargLongAccepted":311,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":175,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":300,"org.easymock.samples.ExampleTest.voteForRemoval":71,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":9,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":95,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":62,"org.easymock.tests.UsageExpectAndReturnTest.floatType":46,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":168,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":240,"org.easymock.tests.UsageThrowableTest.noUpperLimit":199,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":141,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":197,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":124,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":160,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":280,"org.easymock.tests2.SerializationTest.test":110,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":352,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":113,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":28,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":45,"org.easymock.tests2.UsageConstraintsTest.testSame":129,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":188,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":251,"org.easymock.tests2.CaptureTest.testCaptureFirst":84,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":114,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":167,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":51,"org.easymock.tests.GenericTest.testPackageScope":25,"org.easymock.tests2.CaptureTest.testCapture2_2446744":83,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":97,"org.easymock.tests2.UsageTest.moreThanOneArgument":162,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":183,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":257,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":274,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":313,"org.easymock.tests2.NameTest.nameForMock":328,"org.easymock.tests.UsageExpectAndReturnTest.longType":47,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":292,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":111,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":219,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":56,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":285,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":238,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":354,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":217,"org.easymock.tests2.UsageStrictMockTest.differentMethods":108,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":225,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":222,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":48,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":215,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":267,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":24,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":230,"org.easymock.tests2.MockedExceptionTest.testRealException":247,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":52,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":276,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":356,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":206,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":106,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":7,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":31,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":100,"org.easymock.tests2.NameTest.nameForStrictMock":329,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":316,"org.easymock.tests2.UsageConstraintsTest.testContains":135,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":246,"org.easymock.tests2.UsageConstraintsTest.testFind":127,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":18,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":260,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":90,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":297,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":261,"org.easymock.tests.UsageExpectAndReturnTest.object":54,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":142,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":92,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":256,"org.easymock.tests2.UsageStrictMockTest.range":107,"org.easymock.tests2.UsageConstraintsTest.lessThan":148,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":118,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":360,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":309,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":268,"org.easymock.tests.UsageTest.exactCallCountByLastCall":68,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":37,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":275,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":112,"org.easymock.tests2.CaptureTest.testCaptureRightOne":82,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":269,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":178,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":181,"org.easymock.tests2.UsageConstraintsTest.testOr":130,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":358,"org.easymock.tests.UsageRangeTest.combination":22,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":305,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":87,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":60,"org.easymock.tests.UsageTest.wrongArguments":320,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":232,"org.easymock.tests2.MockBuilderTest.testWithConstructor":349,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":303,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":49,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":57,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":182,"org.easymock.tests.UsageVarargTest.varargShortAccepted":310,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":236,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":231,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":332,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":343,"org.easymock.tests2.UsageConstraintsTest.cmpTo":134,"org.easymock.tests.UsageVarargTest.varargCharAccepted":308,"org.easymock.tests2.CaptureTest.testCaptureMultiple":282,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":263,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":337,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":13,"org.easymock.tests2.UsageTest.openCallCountByLastCall":164,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":165,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":121,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":235,"org.easymock.tests2.CaptureTest.testCaptureFromStub":243,"org.easymock.tests.UsageTest.unexpectedCallWithArray":289,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":208,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":286,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":29,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":318,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":353,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":58,"org.easymock.tests2.CaptureTest.testCapture":177,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":299,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":249,"org.easymock.tests2.UsageConstraintsTest.constraints":125,"org.easymock.samples.ExampleTest.addAndChangeDocument":242,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":207,"org.easymock.tests.CapturesMatcherTest.test":176,"org.easymock.tests.UsageStrictMockTest.testVerify":301,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":61,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":221,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":298,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":157,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":293,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":281,"org.easymock.tests2.UsageTest.resumeIfFailure":166,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":3,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":266,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":50,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":234,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":4,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":306,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":117}}]

[{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:219","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[0,0,1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:72","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:97","sourceCode":"for (final java.lang.String java.lang.String : java.lang.String[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.String);\n}","type":"CtForEachImpl"},"failures":[2,13,23,24,25],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[26],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","name":"name","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:109","sourceCode":"java.util.List<T>.add(T)","type":"CtInvocationImpl"},"failures":[44,45,46,47,48],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:135","sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:111","sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:75","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[49],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"m"}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:49","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[50],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"actual","actual":"actual","this":"this"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[51,52,53,54,55,56,57,58,59,60,61],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:852","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Integer>(int))","type":"CtInvocationImpl"},"failures":[62,51,63,64],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[0,0,1,1,65,20],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[66,67,68,69,70,71,72,73,74,75,76,39,77,78,79,80,81,82,83,84,85,86,87],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"failures":[88,89],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:99","sourceCode":"continue","type":"CtContinueImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[90,66,67,91,92,93,94,95,72,96,76,97,98,99,82],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ExpectedInvocation:75","failures":[100,101,46,60,102,103,104,105,106,107],"status":-1,"binaryOperator":"((((this.java.util.List<org.easymock.IArgumentMatcher>) == null) && ((org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>) == null)) || (((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>))))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:390","sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[108,109,110,111,112,113,114,90,115,66,67,68,116,91,92,93,94,69,117,118,70,95,119,71,72,73,120,121,122,123,96,76,124,125,126,127,128,77,129,97,130,78,98,99,79,80,131,81,82,83,132,133,134,135,136,137,138,139,140,141,142,143,51,100,26,144,145],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","failures":[0,1,5,6,8,146,147,148,149,150,151,9,152,153,154,155,156,157,158,159,160,10,161,162,163,164,165,166,167,168,11,12,14,16,65,18,169,170,171,172,173],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[174],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":52,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":27,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":169,"org.easymock.tests2.UsageTest.argumentsOrdered":99,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":68,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":85,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":32,"org.easymock.tests2.CompareToTest.testGreateOrEqual":89,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":78,"org.easymock.tests2.StubTest.stubWithReturnValue":39,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":14,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":64,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":30,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":115,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":141,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":3,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":167,"org.easymock.tests2.DelegateToTest.testStubDelegate":87,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":22,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":155,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":80,"org.easymock.tests2.AnswerTest.stubAnswer":84,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":174,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":34,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":9,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":119,"org.easymock.tests2.UsageConstraintsTest.greaterThan":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":150,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":15,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":145,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":120,"org.easymock.tests2.UsageTest.wrongArguments":97,"org.easymock.samples.ConstructorCalledMockTest.testTax":0,"org.easymock.tests.UsageStrictMockTest.range":72,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":5,"org.easymock.tests2.ConstraintsToStringTest.orToString":133,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":1,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":122,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":77,"org.easymock.tests2.UsageConstraintsTest.testNull":53,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":103,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":127,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":16,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":23,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":38,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":146,"org.easymock.tests.UsageTest.moreThanOneArgument":116,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":93,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":147,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":109,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":29,"org.easymock.tests2.CaptureTest.testCaptureFirst":107,"org.easymock.tests2.CaptureTest.testCaptureNone":106,"org.easymock.tests.UsageUnorderedTest.message":76,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":79,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":153,"org.easymock.tests2.UsageTest.moreThanOneArgument":129,"org.easymock.tests2.CaptureTest.testCapture2_2446744":48,"org.easymock.tests.UsageVerifyTest.twoReturns":67,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":86,"org.easymock.tests.UsageTest.argumentsOrdered":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":161,"org.easymock.tests.GenericTest.testBridgedEquals":49,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":142,"org.easymock.tests2.CaptureTest.testCapture_2617107":60,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":143,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":25,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":101,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":18,"org.easymock.tests2.UsageStrictMockTest.differentMethods":83,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":37,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":36,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":31,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":137,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":110,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":81,"org.easymock.tests2.SerializationTest.testClass":8,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":4,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":164,"org.easymock.tests2.MockedExceptionTest.testRealException":43,"org.easymock.tests2.CaptureTest.testAnd":59,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":132,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":113,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":12,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":131,"org.easymock.tests2.MockedExceptionTest.testMockedException":41,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":74,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":151,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":42,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":24,"org.easymock.tests2.CaptureTest.testCaptureLast":105,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":33,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":70,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":118,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":170,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":55,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":57,"org.easymock.tests2.UsageStrictMockTest.range":82,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":117,"org.easymock.tests2.CaptureTest.testCapture1_2446744":102,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":171,"org.easymock.tests.UsageTest.exactCallCountByLastCall":69,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":98,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":124,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":157,"org.easymock.tests2.CaptureTest.testCaptureRightOne":61,"org.easymock.tests.UsageStrictMockTest.differentMethods":73,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":114,"org.easymock.tests2.UsageConstraintsTest.testOr":54,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":6,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":26,"org.easymock.tests.UsageTest.wrongArguments":92,"org.easymock.tests2.ConstraintsToStringTest.andToString":140,"org.easymock.tests2.MockBuilderTest.testWithConstructor":11,"org.easymock.tests2.MockBuilderTest.testCreateMockString":19,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":154,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":152,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":100,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":148,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":158,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":136,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":7,"org.easymock.tests.UsageVerifyTest.twoThrows":66,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":121,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":172,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":168,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":10,"org.easymock.samples.PartialClassMockTest.testGetArea":2,"org.easymock.tests2.CaptureTest.testCaptureMultiple":45,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":156,"org.easymock.tests2.UsageTest.niceToStrict":130,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":173,"org.easymock.tests2.UsageConstraintsTest.testNotNull":58,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":40,"org.easymock.tests2.CaptureTest.testCaptureFromStub":47,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":13,"org.easymock.tests2.MockBuilderTest.testCreateMock":17,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":163,"org.easymock.tests.UsageVarargTest.differentLength":108,"org.easymock.tests2.CallbackTest.callback":128,"org.easymock.tests.UsageTest.unexpectedCallWithArray":91,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":112,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":20,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":90,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":159,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":134,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":125,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":95,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":62,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":65,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":165,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":160,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":144,"org.easymock.tests2.UsageConstraintsTest.constraints":51,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":71,"org.easymock.tests2.ConstraintsToStringTest.notToString":135,"org.easymock.tests.CapturesMatcherTest.test":44,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":88,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":35,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":166,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":138,"org.easymock.tests2.EasyMockSupportClassTest.testAll":149,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":104,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":139,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":123,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":111,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":126,"org.easymock.tests2.CaptureTest.testCaptureAll":46}}]

[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((java.lang.Object[])(java.lang.Object))","position":"org.easymock.internal.Invocation:70","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:126","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"e":"e"},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.MockBuilder:153","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","position":"org.easymock.internal.ReflectionUtils:230","type":"CtThrowImpl"},"status":-2},{"failures":[0,1],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","position":"org.easymock.internal.Results:40","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","position":"org.easymock.internal.MocksControl:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.internal.MocksControl:99","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:198","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<T>.get(0)","position":"org.easymock.Capture:85","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!(java.util.LinkedList<org.easymock.internal.Range>.isEmpty())) {\n    final org.easymock.internal.Range org.easymock.internal.Range = java.util.LinkedList<org.easymock.internal.Range>.getLast();\n    if (!(org.easymock.internal.Range.hasFixedCount())) {\n        throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"));\n    } \n} ","position":"org.easymock.internal.Results:37","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (!(java.util.List<org.easymock.IArgumentMatcher>.get(int).matches(java.lang.Object[][int]))) {\n        return false;\n    } \n}","position":"org.easymock.internal.ExpectedInvocation:93","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","position":"org.easymock.internal.MockBuilder:72","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>()","position":"org.easymock.internal.LastControl:39","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Type[].int) != (java.lang.Class<?>[].int)) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:190","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","position":"org.easymock.internal.MocksControl:110","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"continue","position":"org.easymock.internal.Injector:190","type":"CtContinueImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1120","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:267","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Number java.lang.Number = ((java.lang.Number)(java.lang.Object))","position":"org.easymock.internal.RecordState:193","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"field":"f"},"name":"add","transplant":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))","position":"org.easymock.ConstructorArgs:66","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()","position":"org.easymock.internal.Injector:116","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.InjectionTarget:56","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (this.java.lang.Object[].int) ; int++) {\n    final java.lang.Object java.lang.Object = this.java.lang.Object[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n        if (!(java.lang.Object.equals(java.lang.Object))) {\n            return false;\n        } \n    } else {\n        if (java.lang.Object != java.lang.Object) {\n            return false;\n        } \n    }\n}","position":"org.easymock.internal.Invocation:117","type":"CtForImpl"},"status":-2},{"failures":[2],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","position":"org.easymock.internal.MocksControl:131","type":"CtThrowImpl"},"status":-1},{"failures":[3],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","position":"org.easymock.internal.RecordState:241","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"result":"org.easymock.internal.ReflectionUtils.OBJECT_TOSTRING","method":"toStringMethod"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:52","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.Invocation:73","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:827","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:117","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-1951159588262854559L","position":"org.easymock.internal.ExpectedInvocationAndResult:25","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-3018631689416120154L","position":"org.easymock.internal.matchers.EqualsWithDelta:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:68","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","position":"org.easymock.EasyMock:693","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:200","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"f":"f"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:159","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.Injector:130","type":"CtTryImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:269","type":"CtLocalVariableImpl"},"status":-2},{"failures":[4],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","position":"org.easymock.internal.Range:41","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","position":"org.easymock.internal.MockBuilder:164","type":"CtThrowImpl"},"status":-1},{"failures":[5],"binaryOperator":"int == 0","name":"removeConditional","position":"org.easymock.:39","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return ","position":"org.easymock.internal.ClassProxyFactory:111","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n    return ;\n} ","position":"org.easymock.internal.ClassProxyFactory:110","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.MocksControl:361","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Set<java.lang.reflect.Method>.add(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:74","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:78","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).getMessages(org.easymock.internal.Invocation)","position":"org.easymock.internal.MocksBehavior:128","type":"CtLocalVariableImpl"},"status":-2},{"failures":[6,6,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.closeMethod()","position":"org.easymock.internal.RecordState:76","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","position":"org.easymock.internal.RecordState:133","type":"CtInvocationImpl"},"status":-1},{"failures":[47,48],"variableMapping":{"bridgeMethod":"method"},"name":"replace","transplant":{"sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:70","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","position":"org.easymock.internal.RecordState:256","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:80","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.Injector:75","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","position":"org.easymock.internal.MockBuilder:79","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"binaryOperator":"((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \")","name":"math","position":"org.easymock.internal.ClassProxyFactory:230","type":"mutation","status":-2},{"failures":[5],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int >= 0","position":"org.easymock.LogicalOperator:45","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<java.lang.reflect.Field>","position":"org.easymock.internal.Injector:200","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:602","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","position":"org.easymock.EasyMock:2011","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject)","position":"org.easymock.internal.Injector:107","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"ObjectStreamClass.\" + java.lang.String)","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:191","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!(org.easymock.IArgumentMatcher.matches(java.lang.Object))) {\n    return false;\n} ","position":"org.easymock.internal.matchers.And:39","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToStrict();\n}","position":"org.easymock.EasyMockSupport:594","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<org.easymock.internal.UnorderedBehavior>.get(((java.util.List<org.easymock.internal.UnorderedBehavior>.size()) - 1))","position":"org.easymock.internal.MocksBehavior:80","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","position":"org.easymock.internal.DefaultClassInstantiator:93","type":"CtIfImpl"},"status":-2},{"failures":[41],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.Or:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (((java.lang.Number.doubleValue()) - (java.lang.Number.doubleValue())) <= (java.lang.Number.doubleValue())) && ((java.lang.Number.doubleValue()) <= ((java.lang.Number.doubleValue()) + (java.lang.Number.doubleValue())))","position":"org.easymock.internal.matchers.EqualsWithDelta:40","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.internal.Results:77","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>.getName(), java.lang.Long.java.lang.Class<java.lang.Long>)","position":"org.easymock.internal.MethodSerializationWrapper:38","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Or:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Compare:52","type":"CtIfImpl"},"status":-2},{"failures":[5,49],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","position":"org.easymock.EasyMock:2053","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","position":"org.easymock.EasyMock:2096","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>)","position":"org.easymock.internal.MocksBehavior:129","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage)","position":"org.easymock.internal.UnorderedBehavior:95","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:110","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:320","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:409","type":"CtAssertImpl"},"status":-2},{"failures":[50],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"actual":"actual"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Compare:52","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","position":"org.easymock.internal.matchers.CompareTo:41","type":"CtIfImpl"},"status":0},{"failures":[51,6,6,7,7,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,8,9,74,75,10,76,77,78,79,11,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,3,103,104,105,12,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,13,14,15,16,17,18,19,20,21,22,153,154,155,23,156,157,158,159,160,161,162,163,164,165,166,0,1,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,29,30,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,31,32,237,238,33,34,35,36,239,240,241,242,243,37,244,38,39,5,40,41,245,246,247,248,249,42,43,44,250,251,252,253,254,49,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,45,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,46,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367],"variableMapping":{"shouldBeUsedInOneThread":"lastInvocationUsed"},"name":"replace","transplant":{"sourceCode":"if (!(this.boolean)) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:193","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:217","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:251","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (!(org.easymock.internal.Range.hasFixedCount())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"));\n} ","position":"org.easymock.internal.Results:39","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Results.add(org.easymock.internal.Result, org.easymock.internal.Range)","position":"org.easymock.internal.UnorderedBehavior:45","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.Capture<T>.setValue(T)","position":"org.easymock.internal.matchers.Captures:57","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.Invocation.getMethod();\n    java.lang.reflect.Method.setAccessible(true);\n    return java.lang.reflect.Method.invoke(java.lang.Object, org.easymock.internal.Invocation.getArguments());\n} catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n    throw new java.lang.IllegalArgumentException(((((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\") + (org.easymock.internal.Invocation.getMethod())) + \"]\") , java.lang.IllegalArgumentException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw java.lang.reflect.InvocationTargetException.getCause();\n}","position":"org.easymock.internal.Result:81","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","position":"org.easymock.Capture:117","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (!(java.util.List<org.easymock.IArgumentMatcher>.get(int).matches(java.lang.Object[][int]))) {\n        return false;\n    } \n}","position":"org.easymock.internal.ExpectedInvocation:93","type":"CtForImpl"},"status":-2},{"failures":[51,6,6,7,7,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,8,9,74,75,10,368,369,370,371,372,373,76,77,78,79,11,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,3,103,104,374,105,375,12,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,376,134,135,136,377,137,138,139,140,141,142,143,144,145,146,147,378,379,148,149,150,380,151,381,382,383,384,152,385,386,387,47,388,389,390,13,14,15,16,17,18,19,20,21,22,153,154,155,23,156,157,158,159,160,391,161,162,163,392,393,24,394,395,396,25,26,397,398,399,400,401,402,403,404,27,405,164,406,407,28,408,409,165,410,166,0,1,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,29,30,192,193,194,195,196,197,198,199,411,412,200,413,414,201,202,203,415,204,205,206,207,208,209,210,211,212,213,214,215,416,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,417,418,419,420,236,31,32,237,238,50,33,34,35,36,239,240,241,242,243,37,244,38,39,5,40,41,245,246,247,248,249,42,43,44,250,251,252,253,254,49,255,256,257,258,259,260,261,421,422,423,424,425,262,426,427,428,429,430,431,263,264,265,266,267,268,269,270,271,432,272,273,274,275,276,277,278,279,280,45,281,282,283,284,285,286,287,288,433,434,435,436,437,289,438,439,440,441,442,443,290,291,292,293,294,295,296,297,298,299,300,46,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,444,445,321,322,323,446,324,447,448,449,325,326,327,450,328,451,329,330,452,331,332,333,334,335,336,337,338,2,339,453,454,340,341,342,343,455,456,457,458,459,344,460,461,345,462,463,464,465,466,467,468,469,470,346,471,472,473,474,475,347,476,477,348,349,350,478,479,351,352,353,354,355,356,357,358,359,360,361,362,363,480,364,365,366,367],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:466","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:109","type":"CtTryImpl"},"status":-1},{"failures":[5],"binaryOperator":"int < 0","name":"negateConditional","position":"org.easymock.:27","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"-4859402739599754147L","position":"org.easymock.internal.matchers.Compare:32","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2087349195182278608L","position":"org.easymock.internal.AssertionErrorWrapper:23","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{"toAssign":"injection"},"name":"add","transplant":{"sourceCode":"if (org.easymock.internal.Injection == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:189","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","position":"org.easymock.internal.InjectionPlan:51","type":"CtIfImpl"},"status":-2},{"failures":[403,164],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","position":"org.easymock.internal.RecordState:86","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:337","type":"CtThrowImpl"},"status":-1},{"failures":[51,52,421,422,423,425,426,427,428,431,433,434,435,437,438,439,440,443],"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int)))","name":"math","position":"org.easymock.internal.Injector:224","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:288","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.Mock == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:113","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.UnorderedBehavior:62","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:25","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\")","name":"math","position":"org.easymock.internal.LastControl:92","type":"mutation","status":-2},{"failures":[285,286,287],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.ObjectMethodsFilter:107","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToDefault();\n}","position":"org.easymock.EasyMockSupport:583","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ","position":"org.easymock.internal.ClassProxyFactory:131","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.get()","position":"org.easymock.internal.LastControl:56","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1333","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?>[][int] = java.lang.Class<?>","position":"org.easymock.internal.MethodSerializationWrapper:70","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IArgumentMatcher org.easymock.IArgumentMatcher : java.util.List<org.easymock.IArgumentMatcher>) {\n    if (!(org.easymock.IArgumentMatcher.matches(java.lang.Object))) {\n        return false;\n    } \n}","position":"org.easymock.internal.matchers.And:38","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.internal.BridgeMethodResolver:195","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1495","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:42","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<?>.getSigners()) != null) {\n    net.sf.cglib.proxy.Enhancer.setNamingPolicy(org.easymock.internal.ClassProxyFactory.net.sf.cglib.core.NamingPolicy);\n} ","position":"org.easymock.internal.ClassProxyFactory:273","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:256","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!boolean) {\n    return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:53","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Injection.setMatched()","position":"org.easymock.internal.InjectionTarget:65","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"net.sf.cglib.core.CollectionUtils.net.sf.cglib.core.CollectionUtils.filter(java.util.List, new net.sf.cglib.core.VisibilityPredicate(java.lang.Class , true))","position":"org.easymock.internal.ClassProxyFactory:266","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injector.org.easymock.internal.Injector.shouldNotAssignTo(java.lang.reflect.Field)) {\n    return null;\n} ","position":"org.easymock.internal.Injector:216","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:285","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:270","type":"CtInvocationImpl"},"status":0},{"failures":[237,300],"name":"returnValue","position":"org.easymock.internal.matchers.And:40","type":"mutation","return":"return false","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ReturningAnswer() , true)","position":"org.easymock.internal.Result:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result != null) {\n    org.easymock.internal.Invocation.validateCaptures();\n    org.easymock.internal.Invocation.clearCaptures();\n    return org.easymock.internal.Result;\n} ","position":"org.easymock.internal.MocksBehavior:107","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:46","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.ReplayState:65","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{"value":"matched","checkOrder":"matched"},"name":"add","transplant":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.Injection:74","type":"CtAssignmentImpl"},"status":0},{"failures":[103,105,12],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","position":"org.easymock.internal.RecordState:257","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return ","position":"org.easymock.internal.ClassProxyFactory:111","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n    return ;\n} ","position":"org.easymock.internal.ClassProxyFactory:110","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.Result(new DelegatingAnswer() , false)","position":"org.easymock.internal.Result:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result != null) {\n    return org.easymock.internal.Result;\n} ","position":"org.easymock.internal.MocksBehavior:88","type":"CtIfImpl"},"status":-2},{"failures":[51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,68,69,71,73,8,9,74,75,10,11,81,82,84,85,86,87,88,89,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,150,151,13,14,15,16,17,153,154,155,23,156,157,158,159,0,1,172,173,174,175,176,177,178,182,184,185,186,187,189,190,191,29,30,192,193,194,195,196,197,198,199,200,201,202,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,31,32,237,238,33,34,35,36,239,240,242,243,37,244,38,39,5,40,41,245,246,247,248,249,42,43,44,250,251,252,253,254,49,255,256,258,259,260,261,262,265,271,272,274,275,276,278,279,280,45,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,311,312,313,314,315,316,317,318,319,320,321,322,324,325,327,328,330,332,333,334,335,336,337,339,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,359,360,361,362,363,364,365,366,367],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.LinkedList<org.easymock.internal.Range>.add(org.easymock.internal.Range)","position":"org.easymock.internal.Results:44","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","position":"org.easymock.Capture:117","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.getArguments()","position":"org.easymock.internal.ExpectedInvocation:49","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:116","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setCallbackType(org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.getClass())","position":"org.easymock.internal.ClassProxyFactory:171","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:231","type":"CtReturnImpl"},"status":-2},{"failures":[481,285,286,287],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.MethodSerializationWrapper:67","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int int = 0","position":"org.easymock.internal.Results:90","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:144","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"each":"each"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.ExpectedInvocationAndResult.getResult()","position":"org.easymock.internal.MocksBehavior:67","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.ExpectedInvocationAndResult.getExpectedInvocation().matches(org.easymock.internal.Invocation)) {\n    return org.easymock.internal.ExpectedInvocationAndResult.getResult();\n} ","position":"org.easymock.internal.MocksBehavior:66","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"try {\n    java.lang.reflect.Method = java.io.ObjectStreamClass.java.io.ObjectStreamClass.getDeclaredMethod(java.lang.String, new java.lang.Class[]{ java.lang.Class.java.lang.Class });\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"));\n}","position":"org.easymock.internal.DefaultClassInstantiator:180","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = java.io.ObjectStreamClass.java.io.ObjectStreamClass.getDeclaredMethod(java.lang.String, new java.lang.Class[]{ java.lang.Class.java.lang.Class })","position":"org.easymock.internal.DefaultClassInstantiator:181","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","position":"org.easymock.internal.LastControl:126","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","position":"org.easymock.EasyMock:560","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())))","position":"org.easymock.internal.MocksControl:160","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(java.util.Properties.remove(java.lang.String)));\n} ","position":"org.easymock.internal.EasyMockProperties:119","type":"CtIfImpl"},"status":-2},{"failures":[6,6,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,349],"variableMapping":{"state":"state"},"name":"add","transplant":{"sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:325","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","position":"org.easymock.internal.MocksControl:294","type":"CtInvocationImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":195,"org.easymock.tests2.MockedExceptionTest.testRealException":266,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":154,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":462,"org.easymock.tests.UsageVarargTest.varargIntAccepted":136,"org.easymock.tests.LimitationsTest.mockFinalMethod":413,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":31,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":93,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":350,"org.easymock.tests.UsageCallCountTest.tooManyCalls":190,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":207,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":472,"org.easymock.tests.UsageVarargTest.allKinds":144,"org.easymock.tests2.StubTest.stubWithReturnValue":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":477,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":79,"org.easymock.tests2.CaptureTest.testCaptureAll":291,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":29,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":5,"org.easymock.tests2.CaptureTest.testAnd":290,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":479,"org.easymock.tests.UsageStrictMockTest.testVerify":160,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":120,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":68,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":368,"org.easymock.tests.MockClassControlTest.testToString":92,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":314,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":214,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":356,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":128,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":229,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":289,"org.easymock.tests.UsageThrowableTest.throwError":192,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":10,"org.easymock.samples.SupportTest.addDocument":53,"org.easymock.tests2.StubTest.stub":348,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":0,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":208,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":433,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":2,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":16,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":409,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":428,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":235,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":456,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":410,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":455,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":143,"org.easymock.tests.UsageExpectAndThrowTest.object":122,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":305,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":108,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":474,"org.easymock.tests2.UsageTest.moreThanOneArgument":252,"org.easymock.tests.UsageVarargTest.varargByteAccepted":142,"org.easymock.tests.MockClassControlTest.testEquals":96,"org.easymock.tests.UsageTest.wrongArguments":84,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":101,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":163,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":437,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":123,"org.easymock.tests2.UsageTest.defaultResetToNice":257,"org.easymock.tests.MockingTest.testNiceClassMocking":383,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":265,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":306,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":328,"org.easymock.tests2.MockBuilderTest.testCreateMock":329,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":307,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":204,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":209,"org.easymock.samples.ExampleTest.voteAgainstRemovals":55,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":279,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":67,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":436,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":174,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":145,"org.easymock.tests2.CaptureTest.testCapture1_2446744":294,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":277,"org.easymock.samples.ExampleTest.voteForRemoval":57,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":419,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":187,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":71,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":104,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":450,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":76,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":159,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":222,"org.easymock.tests2.CaptureTest.testCaptureRightOne":300,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":205,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":310,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":337,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":173,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":167,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":206,"org.easymock.tests2.UsageConstraintsTest.cmpTo":243,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":47,"org.easymock.tests.MockTypeTest.fromEasyMockClass":369,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":441,"org.easymock.tests2.MockedExceptionTest.testMockedException":264,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":20,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":131,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":249,"org.easymock.samples.PartialClassMockTest.testGetArea":63,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":176,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":398,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":147,"org.easymock.samples.ConstructorCalledMockTest.testTax":6,"org.easymock.tests2.UsageTest.argumentsOrdered":259,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":309,"org.easymock.samples.ExampleTest.removeNonExistingDocument":61,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":420,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":313,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":386,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":12,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":221,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":98,"org.easymock.tests2.AnswerTest.answer":308,"org.easymock.tests.MockingTest.testNicePartialClassMocking":150,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":442,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":23,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":17,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":1,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":22,"org.easymock.tests.UsageExpectAndThrowTest.longType":115,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":373,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":346,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":358,"org.easymock.tests.UsageTest.argumentsOrdered":88,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":238,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":327,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":234,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":74,"org.easymock.tests2.MockBuilderTest.testCreateMockString":331,"org.easymock.tests2.NameTest.nameForStrictMock":365,"org.easymock.tests2.CaptureTest.testCaptureNone":298,"org.easymock.tests2.SerializationTest.testClass":285,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":397,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":408,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":393,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":64,"org.easymock.tests.MockingTest.testInterfaceMocking":380,"org.easymock.tests2.EasyMockSupportTest.testVerify":363,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":161,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":439,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":326,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":117,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":382,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":248,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":250,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":233,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":330,"org.easymock.tests.GenericTest.testBridgedEquals":415,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":240,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":318,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":332,"org.easymock.tests2.UsageConstraintsTest.testOr":36,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":304,"org.easymock.tests.MockClassControlTest.testHashCode":95,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":422,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":480,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":30,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":199,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":228,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":371,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":19,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":315,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":317,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":476,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":460,"org.easymock.tests2.UsageConstraintsTest.testSame":35,"org.easymock.tests2.UsageTest.resumeIfFailure":260,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":180,"org.easymock.tests.UsageOverloadedMethodTest.overloading":146,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":319,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":372,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":453,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":425,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":426,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":467,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":171,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":7,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":202,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":466,"org.easymock.tests.UsageTest.openCallCountByLastCall":85,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":118,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":170,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":211,"org.easymock.tests2.NameTest.nameForNiceMock":366,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":438,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":175,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":18,"org.easymock.tests2.CaptureTest.testPrimitive":293,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":334,"org.easymock.samples.BasicClassMockTest.testPrintContent":65,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":179,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":13,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":340,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":189,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":271,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":183,"org.easymock.tests2.UsageStrictMockTest.differentMethods":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":468,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":353,"org.easymock.tests.MockingTest.testClassMocking":379,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":203,"org.easymock.tests2.CaptureTest.testCaptureLast":297,"org.easymock.tests2.UsageConstraintsTest.equals":50,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":113,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":188,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":186,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":322,"org.easymock.tests.UsageStrictMockTest.range":157,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":86,"org.easymock.tests.UsageTest.unexpectedCallWithArray":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":469,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":396,"org.easymock.samples.ExampleTest.addDocument":59,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":381,"org.easymock.tests2.UsageConstraintsTest.lessThan":44,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":72,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":87,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":66,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":166,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":48,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":273,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":403,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":417,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":390,"org.easymock.tests2.MockBuilderTest.testWithConstructor":446,"org.easymock.tests2.UsageStrictMockTest.range":282,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":320,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":100,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":132,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":26,"org.easymock.tests.UsageTest.moreThanOneArgument":82,"org.easymock.tests2.UsageTest.openCallCountByLastCall":255,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":324,"org.easymock.tests.UsageStrictMockTest.differentMethods":158,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":385,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":400,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":418,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":116,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":3,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":216,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":110,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":461,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":156,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":339,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":435,"org.easymock.tests2.DependencyTest.testClassMockingSupport":445,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":127,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":11,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":424,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":51,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":374,"org.easymock.tests2.UsageConstraintsTest.testContains":37,"org.easymock.tests2.UsageConstraintsTest.testFind":33,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":4,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":295,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":387,"org.easymock.samples.ExampleTest.addAndChangeDocument":62,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":323,"org.easymock.tests.UsageVarargTest.varargCharAccepted":137,"org.easymock.tests2.CaptureTest.testCaptureFromStub":46,"org.easymock.tests.UsageVerifyTest.twoThrows":177,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":443,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":9,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":138,"org.easymock.tests2.DelegateToTest.testReturnException":274,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":49,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":478,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":362,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":280,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":414,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":432,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":181,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":215,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":388,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":299,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":124,"org.easymock.tests2.UsageConstraintsTest.testMatches":39,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":401,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":165,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":402,"org.easymock.tests2.UsageConstraintsTest.testNull":34,"org.easymock.tests.LimitationsTest.abstractClass":411,"org.easymock.tests2.EasyMockSupportClassTest.testAll":344,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":389,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":73,"org.easymock.tests2.UsageConstraintsTest.greaterThan":40,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":134,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":210,"org.easymock.tests.UsageExpectAndReturnTest.object":226,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":245,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":359,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":284,"org.easymock.tests2.DelegateToTest.testWrongClass":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":395,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":119,"org.easymock.samples.ExampleTest.voteAgainstRemoval":58,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":198,"org.easymock.tests.UsageVarargTest.varargShortAccepted":140,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":168,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":392,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":430,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":15,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":52,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":459,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":90,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":434,"org.easymock.tests2.SerializationTest.testAllMockedMethod":287,"org.easymock.tests2.NameTest.nameForMocksControl":367,"org.easymock.tests.MockingTest.testStrictClassMocking":378,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":75,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":261,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":465,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":103,"org.easymock.tests.LimitationsTest.mockNativeMethod":200,"org.easymock.tests2.DelegateToTest.testStubDelegate":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":27,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":70,"org.easymock.tests.UsageUnorderedTest.message":191,"org.easymock.samples.ExampleTest.answerVsDelegate":56,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":375,"org.easymock.tests.UsageCallCountTest.tooFewCalls":185,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":225,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":311,"org.easymock.tests.UsageVerifyTest.twoReturns":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":473,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":121,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":220,"org.easymock.tests2.DependencyTest.testInterfaceMocking":321,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":404,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":351,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":107,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":405,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":354,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":270,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":239,"org.easymock.tests.MockingTest.testTwoMocks":148,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":184,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":77,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":263,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":463,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":227,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":316,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":440,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":28,"org.easymock.tests.UsageThrowableTest.throwCheckedException":196,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":458,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":370,"org.easymock.samples.ExampleTest.voteForRemovals":60,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":194,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":38,"org.easymock.tests.ReplayStateInvalidUsageTest.times":212,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":69,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":109,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":464,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":336,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":81,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":24,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":217,"org.easymock.tests2.UsageConstraintsTest.any":242,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":394,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":423,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":224,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":25,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":361,"org.easymock.tests.LimitationsTest.privateConstructor":412,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":272,"org.easymock.tests2.CallbackTest.callback":288,"org.easymock.tests2.NameTest.nameForMock":364,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":399,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":452,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":244,"org.easymock.tests.MockNameTest.defaultName":416,"org.easymock.tests2.SerializationTest.test":286,"org.easymock.tests.UsageExpectAndReturnTest.longType":219,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":296,"org.easymock.tests2.CaptureTest.testCaptureFirst":302,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":246,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":376,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":106,"org.easymock.tests2.UsageTest.niceToStrict":254,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":102,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":105,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":153,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":384,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":125,"org.easymock.tests2.UsageTest.strictResetToDefault":251,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":457,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":342,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":80,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":112,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":223,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":267,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":338,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":449,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":41,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":135,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":335,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":111,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":151,"org.easymock.tests2.DelegateToTest.testDelegate":278,"org.easymock.tests2.UsageConstraintsTest.testNotNull":42,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":281,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":448,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":262,"org.easymock.tests2.CaptureTest.testCapture_2617107":292,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":406,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":213,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":427,"org.easymock.tests2.ThreadingTest.testThreadSafe":303,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":256,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":407,"org.easymock.tests.UsageThrowableTest.noUpperLimit":193,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":377,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":360,"org.easymock.tests.UsageExpectAndReturnTest.floatType":218,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":352,"org.easymock.tests2.UsageTest.wrongArguments":253,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":241,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":269,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":94,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":451,"org.easymock.samples.SupportTest.voteForRemovals":54,"org.easymock.tests.UsageRangeTest.combination":172,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":470,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":43,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":475,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":431,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":45,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":230,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":126,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":78,"org.easymock.tests.UsageExpectAndThrowTest.floatType":114,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":471,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":231,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":333,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":421,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":454,"org.easymock.tests.UsageTest.exactCallCountByLastCall":89,"org.easymock.tests2.AnswerTest.stubAnswer":312,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":357,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":345,"org.easymock.tests.MockingTest.testPartialClassMocking":149,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":232,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":258,"org.easymock.tests2.UsageConstraintsTest.constraints":237,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":268,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":236,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":21,"org.easymock.tests.UsageVarargTest.varargLongAccepted":141,"org.easymock.tests.ObjectMethodsTest.testHashCode":162,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":341,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":343,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":155,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":130,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":347,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":133,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":447,"org.easymock.tests2.DependencyTest.testClassMocking":444,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":14,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":97,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":391,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":429,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":355,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":32,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":91,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":325,"org.easymock.tests.DefaultClassInstantiatorTest.object":152,"org.easymock.tests.UsageVarargTest.differentLength":139,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":164,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":481,"org.easymock.tests2.CaptureTest.testCapture2_2446744":301,"org.easymock.tests.GenericTest.testPackageScope":201}}]

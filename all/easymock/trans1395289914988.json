[{"position":"org.easymock.internal.RecordState:324","failures":[0,1,2],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.Range:52","failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,2,45,46,47,48,49,50,51],"status":-1,"binaryOperator":"(int) == (int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[52],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:231","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,91,92,92,93,94,95,96,97,98,99,43,100,101,102,103,104,105,106],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"failures":[107],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[108,109,110,111,112,46],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[113,114,115],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:115","sourceCode":"return org.easymock.IAnswer<?>.toString()","type":"CtReturnImpl"},"failures":[116,117,118],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[119],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:40","failures":[120,121,122,123,124,125,126,127,128,129,130,131,53,132,54,133,134,135,136,3,137,138,139,140,141,142,143,144,145,146,147,148,4,149,5,6,150,151,7,8,152,9,10,153,11,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,55,56,57,58,175,176,59,60,177,61,178,179,180,181,182,62,183,184,63,185,186,187,188,189,190,191,192,193,64,194,195,196,197,198,65,199,200,201,12,13,14,15,202,203,66,204,68,69,205,206,70,71,72,207,73,52,208,74,75,209,77,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,79,80,225,81,82,83,84,226,85,227,228,86,87,88,89,229,230,231,232,233,234,235,236,16,17,237,238,239,240,18,19,241,242,243,244,245,246,247,248,249,250,251,252,20,21,253,254,255,90,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,22,274,275,276,277,278,279,280,23,281,24,25,282,283,284,285,286,26,287,288,289,290,291,292,293,91,92,93,94,95,294,295,296,297,298,299,300,27,301,302,303,304,305,306,307,308,309,310,96,311,312,313,314,97,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,98,28,29,110,30,31,32,33,34,35,337,338,339,340,341,342,36,343,37,344,345,38,346,347,348,349,350,39,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,99,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,40,401,0,1,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,41,445,446,447,448,449,450,451,452,453,454,42,119,43,100,101,455,456,102,457,458,459,460,461,462,44,2,45,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,46,47,490,48,49,491,492,493,494,103,104,105,495,106,496,497,498,499,50,51,500,501],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"failures":[296],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,3,137,138,139,140,141,144,145,146,147,148,4,149,5,6,150,151,7,8,152,9,10,153,11,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,12,13,14,15,202,203,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,231,232,233,234,235,236,16,17,237,238,239,240,18,19,241,242,243,244,245,246,247,248,249,250,251,252,20,21,253,254,255,90,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,22,274,275,276,277,278,279,280,23,281,24,25,282,283,284,285,286,26,287,288,289,290,291,292,293,294,295,296,297,298,299,300,27,301,302,303,304,305,306,307,308,309,310,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,28,29,110,30,31,32,33,34,35,337,338,339,340,341,342,36,343,37,344,345,38,346,347,348,349,350,39,360,361,362,363,364,365,366,367,368,369,370,371,372,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,40,401,0,1,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,41,445,446,447,448,449,450,451,452,453,454,42,44,2,45,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,479,480,481,482,483,484,485,486,487,488,489,46,47,490,48,49,491,492,495,496,497,499,50,51,500,501],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"failures":[406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,423,424,425,426,427,429],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[125,53,132,3,140,144,145,4,149,5,150,7,8,152,153,11,161,162,163,164,165,166,167,168,169,170,171,172,55,56,57,58,176,59,60,61,62,63,64,65,203,68,70,72,73,75,211,212,213,214,215,218,219,220,221,223,224,79,80,225,81,82,83,85,87,88,89,231,232,233,234,236,16,17,237,238,239,18,19,241,242,243,244,245,246,247,248,249,250,251,252,20,21,253,90,262,271,274,275,276,277,278,23,24,25,284,286,287,288,290,93,297,298,299,300,27,306,307,310,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,28,29,31,32,35,346,347,348,349,350,39,99,399,40,401,0,1,402,403,404,405,43,44,45,473,484,485,486,487,47,48,49,104,105,106],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"toStringMethod","method":"toStringMethod"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[53,132,54,502],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:320","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[269,416],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[211,213,221,233,234,16,237,238,240,248,20],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"parameterType","type":"parameterType"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,70,71,72,73,74,75,77,79,80,81,82,83,84,85,86,87,88,89,90,91,91,92,92,93,94,95,98,99,43,100,101,102,103,104,105,106],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[211,213,221,233,238],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"failures":[125,132,54,3,139,140,141,144,145,146,148,4,149,5,6,150,151,7,8,9,10,153,11,161,162,163,164,165,166,167,169,170,171,172,173,174,55,58,176,62,202,203,211,212,213,214,215,216,217,218,219,220,221,222,223,224,79,80,225,81,82,83,85,89,231,232,233,234,236,16,17,237,238,239,18,19,241,242,243,244,245,246,247,248,249,250,251,252,20,21,253,254,255,90,256,262,270,271,272,22,274,275,276,277,278,279,280,23,281,24,25,282,283,284,285,286,26,287,288,289,290,292,293,94,95,297,298,299,300,27,306,307,308,309,310,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,98,28,29,30,31,32,33,34,35,342,36,343,37,345,38,346,347,348,349,350,39,352,99,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,399,400,40,401,0,1,402,403,404,405,433,436,439,440,441,442,443,444,41,445,446,448,449,450,451,452,453,454,42,43,100,455,461,462,44,2,45,463,464,465,466,467,468,470,471,484,486,487,488,489,46,47,490,48,49,491,492,50,51],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"equalsMethod","equalsMethod":"equalsMethod"}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:75","sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","type":"CtReturnImpl"},"failures":[5,6,9,10,12,13,14,15,23,24,25,29,30,33,34,39,44,2,45,46,47,48,49],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[125,53,132,54,133,134,135,136,3,139,140,141,144,145,146,148,4,149,5,6,150,151,7,8,152,9,10,153,11,161,162,163,164,165,166,167,168,169,170,171,172,173,174,55,56,57,58,176,59,60,61,62,63,64,65,12,13,14,15,202,203,66,70,71,72,73,75,77,211,212,213,214,215,216,217,218,219,220,221,222,223,224,79,80,225,81,82,83,85,86,88,231,232,233,234,236,16,17,237,238,239,18,19,241,242,243,244,245,246,247,248,249,250,252,20,21,253,254,255,90,256,262,270,271,272,22,274,275,276,277,278,279,280,23,281,24,25,282,283,284,285,286,26,287,288,289,290,292,293,91,91,92,92,93,94,95,297,298,300,27,301,302,303,304,306,307,308,309,310,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,98,28,29,110,30,31,32,33,34,35,340,341,342,36,343,37,346,347,348,349,350,39,362,364,365,367,370,372,99,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,399,400,40,401,0,1,402,403,404,405,439,440,441,442,443,444,41,445,446,448,449,451,452,453,454,42,43,100,102,44,2,45,463,464,465,466,467,473,479,480,481,482,483,484,485,486,487,488,489,46,47,490,48,49,491,492,104,105,106],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"failures":[204,503,504,209,227,91,92],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[53,132,54,502],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:176","sourceCode":"return false","type":"CtReturnImpl"},"failures":[61,505,506,507,508,509,510,511],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[120,121,122,123,124,125,126,127,128,129,130,131,53,132,54,133,134,135,136,3,137,138,139,140,141,142,143,144,145,146,147,148,4,149,5,6,150,151,7,8,152,9,10,153,11,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,55,56,57,58,175,176,59,60,177,61,178,179,180,181,182,62,183,184,63,185,186,187,188,189,190,191,192,193,64,194,195,196,197,198,65,199,200,201,12,13,14,15,202,203,66,204,68,69,205,206,70,71,72,207,73,52,208,74,75,209,77,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,79,80,225,81,82,83,84,226,85,227,228,86,87,88,89,229,230,231,232,233,234,235,236,16,17,237,238,239,240,18,19,241,242,243,244,245,246,247,248,249,250,251,252,20,21,253,254,255,90,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,22,274,275,276,277,278,279,280,23,281,24,25,282,283,284,285,286,26,287,288,289,290,291,292,293,91,92,93,94,95,294,295,296,297,298,299,300,27,301,302,303,304,305,306,307,308,309,310,96,311,312,313,314,97,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,98,28,29,110,30,31,32,33,34,35,337,338,339,340,341,342,36,343,37,344,345,38,346,347,348,349,350,39,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,99,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,40,401,0,1,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,41,445,446,447,448,449,450,451,452,453,454,42,119,43,100,101,455,456,102,457,458,459,460,461,462,44,2,45,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,46,47,490,48,49,491,492,493,494,103,104,105,495,106,496,497,498,499,50,51,500,501],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[178,207,506,507,508,509,510],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[512,246],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:93","failures":[352,353,357],"status":-1,"binaryOperator":"(java.lang.Class<?>.getConstructors().int) == 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[53,61,178,207,208,506,507,508,513,511],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:45","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[120,121,122,123,124,125,126,127,128,129,130,131,53,132,54,133,134,135,136,3,137,138,139,140,141,142,143,144,145,146,147,148,4,149,5,6,150,151,7,8,152,9,10,153,11,154,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,55,56,57,58,176,59,60,61,178,179,180,181,182,62,183,184,63,185,186,187,188,189,190,191,192,193,64,194,195,196,197,198,65,199,200,201,12,13,14,15,202,203,66,204,68,69,205,206,70,71,72,207,73,208,74,75,209,77,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,79,80,225,81,82,83,84,226,85,227,228,86,87,88,89,229,230,231,232,233,234,235,236,16,17,237,238,239,240,18,19,241,242,243,244,245,246,247,248,249,250,251,252,20,21,253,254,255,90,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,22,274,275,276,277,278,279,280,23,281,24,25,282,283,284,285,286,26,287,288,289,290,291,292,293,91,91,92,92,93,94,95,294,295,296,297,298,299,300,27,301,302,303,304,305,306,307,308,309,310,96,313,314,97,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,98,28,29,110,30,31,32,33,34,35,337,338,339,340,341,342,36,343,37,344,345,38,346,347,348,349,350,39,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,99,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,40,401,0,1,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,41,445,446,447,448,449,450,451,452,453,454,42,119,43,100,101,455,456,102,457,458,459,460,461,462,44,2,45,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,479,480,481,482,483,484,485,486,487,488,489,46,47,490,48,49,491,492,493,494,103,104,105,495,106,496,497,498,499,50,51,500,501],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"candidateMethod"}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[3,4,7,8,11,23,28,31,32,35,44,45,47],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[203,27,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,399,401,0,1,402,403,409,443,2,471,475,476,477],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"candidateMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[119,455],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[125,53,132,54,133,134,135,136,3,139,140,141,144,145,146,148,4,149,5,6,150,151,7,8,152,9,10,153,11,161,162,163,164,165,166,167,168,169,170,171,172,173,174,55,56,57,58,176,59,60,61,62,63,64,65,202,203,66,68,70,71,72,73,74,75,77,211,212,213,214,215,216,217,218,219,220,221,222,223,224,79,80,225,81,82,83,84,85,86,87,88,89,231,232,233,234,236,16,17,237,238,239,18,19,241,242,243,244,245,246,247,248,249,250,251,252,20,21,253,254,255,90,256,262,270,271,272,22,274,275,276,277,278,279,280,23,281,24,25,282,283,284,285,286,26,287,288,289,290,292,293,91,92,93,94,95,297,298,299,300,27,301,302,303,304,306,307,308,309,310,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,98,28,29,110,30,31,32,33,34,35,342,36,343,37,344,345,38,346,347,348,349,350,39,99,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,399,400,40,401,0,1,402,403,404,405,439,440,441,442,443,444,41,445,446,448,449,450,451,452,453,454,42,43,100,44,2,45,463,464,465,466,467,468,470,471,474,479,480,481,482,483,484,486,487,107,107,488,489,46,47,490,48,49,491,104,105,106],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[211,213,221,233,234,16,237,238,240,248,20],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[53,61,178,207,208,506,507,508,513,511],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[178,207,506,507,508,511],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:623","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:256","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[80],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","constructorArgs":"constructorArgs","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[53,208,514],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[242],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:48","failures":[125,53,132,3,137,138,139,140,141,144,145,146,148,4,149,5,150,7,8,152,153,11,161,162,163,164,165,166,167,168,169,170,171,172,174,55,56,57,58,176,59,60,61,62,63,64,65,202,203,68,70,72,73,75,211,212,214,215,218,219,220,221,222,223,224,79,80,225,81,82,83,85,87,88,89,231,232,233,234,236,16,17,237,238,239,18,19,241,242,243,244,245,246,247,248,249,250,252,20,21,253,254,255,90,256,262,269,270,271,272,273,22,274,275,276,277,278,23,24,25,284,286,26,287,288,290,292,91,91,92,92,93,294,295,296,297,298,299,300,27,305,306,307,308,309,310,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,98,28,29,31,32,35,337,338,339,342,346,347,348,349,350,39,99,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,397,399,400,40,401,0,1,402,403,404,405,422,428,431,439,440,441,442,443,444,43,101,44,2,45,463,464,465,466,467,468,470,471,473,475,476,477,484,485,486,487,47,48,49,104,105,106,499,50,51,500,501],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[203,254,255,90,256,298,308,337,338,339,413,439,440,441,442,443,444],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.EasyMock:760","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":234,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":28,"org.easymock.tests2.UsageTest.argumentsOrdered":10,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":171,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":263,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":416,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":151,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":285,"org.easymock.tests2.DelegateToTest.testReturnException":270,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":440,"org.easymock.tests.MockingTest.testPartialClassMocking":104,"org.easymock.tests.MockClassControlTest.testToString":457,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":201,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":431,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":425,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":230,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":188,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":63,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":376,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":145,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":506,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":239,"org.easymock.tests2.UsageTest.wrongArguments":6,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":306,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":131,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":303,"org.easymock.samples.ExampleTest.answerVsDelegate":26,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":97,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":497,"org.easymock.tests2.UsageConstraintsTest.testNull":16,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":81,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":462,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":170,"org.easymock.tests2.CaptureTest.testPrimitive":214,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":310,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":395,"org.easymock.tests.UsageTest.moreThanOneArgument":29,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":225,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":465,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":499,"org.easymock.tests.UsageTest.argumentsOrdered":34,"org.easymock.tests.UsageVarargTest.varargIntAccepted":446,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":421,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":346,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":510,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":66,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":156,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":267,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":71,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":408,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":350,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":125,"org.easymock.tests.ReplayStateInvalidUsageTest.times":369,"org.easymock.tests2.DependencyTest.testClassMocking":142,"org.easymock.tests2.AnswerTest.answer":3,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":240,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":423,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":136,"org.easymock.tests2.CaptureTest.testAnd":211,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":312,"org.easymock.tests2.UsageTest.strictResetToDefault":149,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":86,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":205,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":464,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":486,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":165,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":501,"org.easymock.tests2.DelegateToTest.testDelegate":22,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":391,"org.easymock.tests.LimitationsTest.mockFinalMethod":375,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":443,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":483,"org.easymock.tests2.DependencyTest.testClassMockingSupport":143,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":396,"org.easymock.tests2.CaptureTest.testCapture1_2446744":215,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":226,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":389,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":134,"org.easymock.tests.UsageThrowableTest.throwError":399,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":363,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":314,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":478,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":268,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":467,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":200,"org.easymock.samples.PartialClassMockTest.testGetArea":93,"org.easymock.tests.MockingTest.testInterfaceMocking":495,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":364,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":347,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":295,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":438,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":189,"org.easymock.tests2.UsageTest.niceToStrict":150,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":377,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":406,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":115,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":70,"org.easymock.tests2.MockBuilderTest.testCreateMock":74,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":196,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":128,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":385,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":108,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":166,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":311,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":477,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":340,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":301,"org.easymock.tests.UsageOverloadedMethodTest.overloading":300,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":198,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":471,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":243,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":299,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":328,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":242,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":220,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":447,"org.easymock.tests.MockClassControlTest.testEquals":461,"org.easymock.tests2.EasyMockSupportClassTest.testAll":62,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":100,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":393,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":504,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":481,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":135,"org.easymock.tests2.CaptureTest.testCaptureAll":212,"org.easymock.tests.MockNameTest.defaultName":360,"org.easymock.tests2.UsageConstraintsTest.testMatches":244,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":466,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":361,"org.easymock.samples.ExampleTest.voteForRemovals":290,"org.easymock.tests.UsageVarargTest.allKinds":42,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":44,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":482,"org.easymock.samples.BasicClassMockTest.testPrintContent":95,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":402,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":279,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":444,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":264,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":273,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":511,"org.easymock.tests2.UsageConstraintsTest.greaterThan":246,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":358,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":183,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":485,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":89,"org.easymock.samples.ExampleTest.voteForRemoval":287,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":359,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":229,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":275,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":315,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":157,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":84,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":98,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":4,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":208,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":413,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":163,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":40,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":181,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":439,"org.easymock.tests2.CaptureTest.testCaptureFirst":224,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":269,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":412,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":164,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":11,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":474,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":324,"org.easymock.tests2.UsageTest.moreThanOneArgument":5,"org.easymock.tests2.CaptureTest.testCapture2_2446744":223,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":277,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":424,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":75,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":454,"org.easymock.tests.GenericTest.testBridgedEquals":455,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":345,"org.easymock.tests.UsageExpectAndReturnTest.longType":320,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":479,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":161,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":394,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":76,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":251,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":305,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":392,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":463,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":338,"org.easymock.tests.UsageCallCountTest.tooManyCalls":38,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":197,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":325,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":130,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":381,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":1,"org.easymock.tests.MockingTest.testNiceClassMocking":498,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":56,"org.easymock.tests.MockingTest.testClassMocking":494,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":67,"org.easymock.tests2.UsageConstraintsTest.testContains":241,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":341,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":90,"org.easymock.tests2.UsageConstraintsTest.testFind":236,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":27,"org.easymock.tests.MockTypeTest.fromEasyMockClass":313,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":488,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":148,"org.easymock.tests.UsageExpectAndReturnTest.object":327,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":85,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":129,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":169,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":507,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":449,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":436,"org.easymock.tests.UsageTest.exactCallCountByLastCall":35,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":297,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":411,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":430,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":50,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":178,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":41,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":333,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":470,"org.easymock.tests.ResultTest.createThrowResultToString":118,"org.easymock.tests.MockClassControlTest.testHashCode":460,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":258,"org.easymock.tests2.EasyMockSupportTest.testVerify":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":191,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":51,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":476,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":468,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":133,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":210,"org.easymock.tests.UsageVarargTest.varargCharAccepted":448,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":351,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":429,"org.easymock.tests2.UsageTest.openCallCountByLastCall":7,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":172,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":113,"org.easymock.tests.DefaultClassInstantiatorTest.object":352,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":475,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":434,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":192,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":383,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":401,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":123,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":257,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":459,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":87,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":382,"org.easymock.tests.CapturesMatcherTest.test":107,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":334,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":337,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":458,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":65,"org.easymock.tests2.UsageTest.resumeIfFailure":153,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":96,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":155,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":442,"org.easymock.tests2.StubTest.stubWithReturnValue":203,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":207,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":252,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":326,"org.easymock.tests2.SerializationTest.testAllMockedMethod":54,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":422,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":514,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":109,"org.easymock.samples.SupportTest.voteForRemovals":284,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":119,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":260,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":388,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":502,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":428,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":137,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":432,"org.easymock.tests.UsageExpectAndThrowTest.object":386,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":249,"org.easymock.tests2.DelegateToTest.testWrongClass":272,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":404,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":405,"org.easymock.tests.UsageStrictMockTest.range":48,"org.easymock.samples.ConstructorCalledMockTest.testTax":91,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":159,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":168,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":55,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":387,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":180,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":33,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":371,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":302,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":111,"org.easymock.tests2.CaptureTest.testCaptureNone":219,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":296,"org.easymock.tests.UsageUnorderedTest.message":39,"org.easymock.tests.UsageVerifyTest.twoReturns":45,"org.easymock.tests.UsageVarargTest.varargByteAccepted":453,"org.easymock.tests2.ThreadingTest.testThreadSafe":274,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":194,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":37,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":437,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":94,"org.easymock.tests2.CaptureTest.testCapture_2617107":213,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":398,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":426,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":309,"org.easymock.tests2.UsageConstraintsTest.any":18,"org.easymock.tests2.StubTest.stub":202,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":368,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":339,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":441,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":427,"org.easymock.tests.UsageExpectAndThrowTest.longType":379,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":356,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":367,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":281,"org.easymock.tests2.SerializationTest.testClass":53,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":262,"org.easymock.tests.LimitationsTest.mockNativeMethod":99,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":101,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":336,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":122,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":282,"org.easymock.tests2.NameTest.nameForMocksControl":15,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":124,"org.easymock.tests2.MockedExceptionTest.testMockedException":255,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":184,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":32,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":147,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":106,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":380,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":79,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":73,"org.easymock.tests.MockingTest.testNicePartialClassMocking":105,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":83,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":505,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":120,"org.easymock.tests2.CaptureTest.testCaptureLast":218,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":397,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":60,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":238,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":250,"org.easymock.tests.MockingTest.testTwoMocks":103,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":177,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":317,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":384,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":9,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":21,"org.easymock.samples.ExampleTest.removeNonExistingDocument":291,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":127,"org.easymock.tests.UsageStrictMockTest.differentMethods":49,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":365,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":259,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":354,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":276,"org.easymock.tests2.MockBuilderTest.testCreateMockString":77,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":456,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":185,"org.easymock.tests.UsageExpectAndThrowTest.floatType":378,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":245,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":182,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":139,"org.easymock.tests.ResultTest.createReturnResultToString":117,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":179,"org.easymock.tests.UsageVerifyTest.twoThrows":2,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":469,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":64,"org.easymock.tests.ResultTest.createDelegateResultToString":116,"org.easymock.samples.ExampleTest.voteAgainstRemoval":288,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":417,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":294,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":88,"org.easymock.tests.LimitationsTest.privateConstructor":374,"org.easymock.tests2.UsageConstraintsTest.testNotNull":20,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":403,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":254,"org.easymock.tests2.UsageTest.defaultResetToNice":152,"org.easymock.samples.ExampleTest.voteAgainstRemovals":286,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":418,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":332,"org.easymock.tests.UsageVarargTest.differentLength":450,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":121,"org.easymock.tests2.CallbackTest.callback":174,"org.easymock.tests2.UsageConstraintsTest.equals":235,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":227,"org.easymock.tests.UsageTest.openCallCountByLastCall":31,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":231,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":308,"org.easymock.tests.UsageCallCountTest.tooFewCalls":36,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":58,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":304,"org.easymock.tests.UsageThrowableTest.throwCheckedException":0,"org.easymock.tests.MockingTest.testStrictClassMocking":493,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":112,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":59,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":298,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":126,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":57,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":370,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":176,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":141,"org.easymock.tests.ObjectMethodsTest.testHashCode":435,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":509,"org.easymock.tests2.NameTest.nameForNiceMock":14,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":278,"org.easymock.tests2.DependencyTest.testInterfaceMocking":144,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":508,"org.easymock.samples.ExampleTest.addDocument":289,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":195,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":199,"org.easymock.tests2.DelegateToTest.testStubDelegate":271,"org.easymock.tests2.AnswerTest.stubAnswer":140,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":47,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":52,"org.easymock.tests.UsageVarargTest.varargLongAccepted":452,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":491,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":415,"org.easymock.tests.UsageExpectAndReturnTest.floatType":319,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":335,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":61,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":92,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":472,"org.easymock.tests.UsageThrowableTest.noUpperLimit":400,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":247,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":266,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":232,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":154,"org.easymock.tests2.SerializationTest.test":132,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":216,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":353,"org.easymock.tests2.UsageConstraintsTest.testSame":17,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":318,"org.easymock.samples.SupportTest.addDocument":283,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":175,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":366,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":186,"org.easymock.tests.GenericTest.testPackageScope":43,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":500,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":410,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":265,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":496,"org.easymock.tests2.NameTest.nameForMock":12,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":329,"org.easymock.tests2.UsageStrictMockTest.differentMethods":25,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":209,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":228,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":321,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":390,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":433,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":487,"org.easymock.tests2.MockedExceptionTest.testRealException":256,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":316,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":420,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":160,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":419,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":23,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":307,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":372,"org.easymock.tests2.NameTest.nameForStrictMock":13,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":206,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":146,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":114,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":82,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":158,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":248,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":355,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":68,"org.easymock.tests2.UsageStrictMockTest.range":24,"org.easymock.tests2.UsageConstraintsTest.lessThan":253,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":261,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":513,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":414,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":190,"org.easymock.tests2.CaptureTest.testCaptureRightOne":221,"org.easymock.tests2.UsageConstraintsTest.testOr":237,"org.easymock.tests.UsageRangeTest.combination":484,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":80,"org.easymock.tests.UsageTest.wrongArguments":30,"org.easymock.tests2.MockBuilderTest.testWithConstructor":204,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":187,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":102,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":322,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":407,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":330,"org.easymock.tests.UsageVarargTest.varargShortAccepted":451,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":357,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":344,"org.easymock.tests2.UsageConstraintsTest.cmpTo":19,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":138,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":409,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":8,"org.easymock.tests2.CaptureTest.testCaptureFromStub":222,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":362,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":69,"org.easymock.tests.UsageTest.unexpectedCallWithArray":110,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":46,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":343,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":503,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":331,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":490,"org.easymock.tests2.UsageConstraintsTest.constraints":233,"org.easymock.samples.ExampleTest.addAndChangeDocument":292,"org.easymock.tests.UsageStrictMockTest.testVerify":492,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":293,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":489,"org.easymock.tests2.CompareToTest.testGreateThan":512,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":480,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":217,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":78,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":348,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":323,"org.easymock.tests.LimitationsTest.abstractClass":373,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":473,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":349,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":445,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":167}}]

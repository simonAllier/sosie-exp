[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","position":"org.easymock.internal.MocksControl:149","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1621","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","position":"org.easymock.internal.EasyMockProperties:127","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.reflect.Type instanceof java.lang.Class<?> ? ((java.lang.Class<?>)(java.lang.reflect.Type)) : null","position":"org.easymock.internal.BridgeMethodResolver:362","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","position":"org.easymock.internal.RecordState:234","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","position":"org.easymock.internal.RecordState:166","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","position":"org.easymock.internal.BridgeMethodResolver:334","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)","position":"org.easymock.internal.Injector:77","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"method","finalizeMethod":"method"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","position":"org.easymock.internal.ObjectMethodsFilter:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","position":"org.easymock.internal.MockInvocationHandler:36","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.Injector:130","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-551735356674347591L","position":"org.easymock.internal.matchers.InstanceOf:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.ObjectMethodsFilter:107","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","position":"org.easymock.EasyMock:1763","type":"CtInvocationImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:603","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.easymock.internal.ErrorMessage:44","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","position":"org.easymock.internal.RecordState:292","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)","position":"org.easymock.internal.InjectionTarget:62","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"matchers":"matchers"},"name":"add","transplant":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.ExpectedInvocation:58","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<org.easymock.IArgumentMatcher> != null) {\n    if ((java.util.List<org.easymock.IArgumentMatcher>.size()) != (org.easymock.internal.Invocation.getArguments().int)) {\n        throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"));\n    } \n    return java.util.List<org.easymock.IArgumentMatcher>;\n} ","position":"org.easymock.internal.ExpectedInvocation:45","type":"CtIfImpl"},"status":-2},{"failures":[16],"variableMapping":{"toMock":"toMock","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:136","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:416","type":"CtReturnImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException((\"Failed to mock \" + java.lang.Class<T>) , java.io.IOException)","position":"org.easymock.internal.AndroidClassProxyFactory:58","type":"CtThrowImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object[][int] = java.lang.Object","position":"org.easymock.internal.DefaultClassInstantiator:127","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{"clazz":"hostClass"},"name":"add","transplant":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.Injector:65","type":"CtWhileImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","position":"org.easymock.internal.LastControl:95","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.UnorderedBehavior org.easymock.internal.UnorderedBehavior : java.util.List<org.easymock.internal.UnorderedBehavior>.subList(int, java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    if (!(org.easymock.internal.UnorderedBehavior.verify())) {\n        boolean = false;\n        break;\n    } \n}","position":"org.easymock.internal.MocksBehavior:154","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","position":"org.easymock.internal.LastControl:103","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new net.sf.cglib.core.DefaultNamingPolicy() {\n    @java.lang.Override\n    public java.lang.String getClassName(final java.lang.String prefix, final java.lang.String source, final java.lang.Object key, final net.sf.cglib.core.Predicate names) {\n        return \"codegen.\" + (net.sf.cglib.core.DefaultNamingPolicy.getClassName(java.lang.String, java.lang.String, java.lang.Object, net.sf.cglib.core.Predicate));\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:145","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:309","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:126","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.String java.lang.String : java.lang.String[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.String);\n}","position":"org.easymock.internal.MockBuilder:97","type":"CtForEachImpl"},"status":0},{"failures":[17,18,19,20],"variableMapping":{"actual":"actual"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object != null","position":"org.easymock.internal.matchers.NotNull:36","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2110","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> java.lang.reflect.Constructor<T> = null","position":"org.easymock.internal.ReflectionUtils:147","type":"CtLocalVariableImpl"},"status":-2},{"failures":[21,22,23],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","position":"org.easymock.internal.RecordState:305","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","position":"org.easymock.internal.RecordState:262","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","position":"org.easymock.internal.ReplayState:62","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()","position":"org.easymock.internal.Injector:116","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))","position":"org.easymock.ConstructorArgs:66","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int]","position":"org.easymock.internal.BridgeMethodResolver:383","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:126","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method);\n}","position":"org.easymock.internal.MockBuilder:104","type":"CtForEachImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<T>.add(T)","position":"org.easymock.Capture:120","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"(((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size()))","name":"math","position":"org.easymock.internal.LastControl:92","type":"mutation","status":-2},{"failures":[],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.BridgeMethodResolver:193","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Float>(float))","position":"org.easymock.EasyMock:932","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","position":"org.easymock.EasyMock:2011","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError","position":"org.easymock.internal.MocksControl:148","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ObjectMethodsFilter:55","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","position":"org.easymock.internal.MocksControl:334","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.MockType.NICE":"org.easymock.MockType.NICE"},"name":"add","transplant":{"sourceCode":"new org.easymock.internal.MocksControl.MockType(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.internal.MocksControl:47","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior = new org.easymock.internal.MocksBehavior(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","position":"org.easymock.internal.MocksControl:189","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:53","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToNice();\n}","position":"org.easymock.EasyMockSupport:572","type":"CtForEachImpl"},"status":-2},{"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,2,3,85,5,6,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,18,125,126,127,128,129,130,19,20,131,132,133,134,135,14,15,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195],"binaryOperator":"(int <= (int))","name":"conditionalBoundary","position":"org.easymock.internal.Range:79","type":"mutation","status":-1},{"failures":[],"binaryOperator":"java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType","name":"removeConditional","position":"org.easymock.internal.BridgeMethodResolver:326","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.junit.runners.model.Statement.evaluate()","position":"org.easymock.internal.EasyMockStatement:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.reflect.Field == null) || (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0)","position":"org.easymock.internal.Injector:224","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.ClassProxyFactory:97","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))","position":"org.easymock.EasyMock:1687","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.ObjectMethodsFilter:62","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:183","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ","position":"org.easymock.internal.MocksBehavior:194","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\")","name":"math","position":"org.easymock.internal.ExpectedInvocation:48","type":"mutation","status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ((org.easymock.internal.ClassProxyFactory.MockMethodInterceptor)(net.sf.cglib.proxy.Factory.getCallback(0))).java.lang.reflect.InvocationHandler","position":"org.easymock.internal.ClassProxyFactory:283","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = java.lang.reflect.Constructor<?>.getParameterTypes()","position":"org.easymock.internal.ReflectionUtils:179","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:269","type":"CtLocalVariableImpl"},"status":-2},{"failures":[196,197],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField())","position":"org.easymock.internal.Injector:171","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"continue","position":"org.easymock.internal.UnorderedBehavior:58","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"capture(\")","position":"org.easymock.internal.matchers.Captures:43","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"proxy":"proxy","this":"this"},"name":"replace","transplant":{"sourceCode":"return java.lang.Integer.valueOf(java.lang.System.identityHashCode(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:86","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object));\n} ","position":"org.easymock.internal.ObjectMethodsFilter:85","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-2722051869610289637L","position":"org.easymock.internal.Results:28","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(int))","position":"org.easymock.EasyMock:1530","type":"CtInvocationImpl"},"status":-2},{"failures":[198,199,200,85,201,202,4,203,90,204,205,206,207,208,209,210,211,212,213,214,215,216],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Results:53","type":"CtReturnImpl"},"status":-1},{"failures":[217,218,219,220,221],"binaryOperator":"(70 * ((int - int) + 1))","name":"math","position":"org.easymock.internal.MocksBehavior:119","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:414","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:116","type":"CtReturnImpl"},"status":0},{"failures":[],"binaryOperator":"\"at least \" + (int)","name":"math","position":"org.easymock.internal.Range:68","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.ReflectionUtils:93","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[java.lang.Class<?>[].int]","position":"org.easymock.internal.DefaultClassInstantiator:109","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:52","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:52","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"args":"args","org.easymock.internal.Invocation.NO_ARGS":"args"},"name":"add","transplant":{"sourceCode":"return java.lang.Object[] == null ? java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:57","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:354","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Object.getClass()","position":"org.easymock.internal.Injector:80","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Byte>(org.easymock.Capture<java.lang.Byte>))","position":"org.easymock.EasyMock:1987","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:323","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n    break;\n} ","position":"org.easymock.internal.BridgeMethodResolver:199","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"constructor":"constructor"},"name":"add","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","position":"org.easymock.internal.MockBuilder:128","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:47","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1149","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.ObjectMethodsFilter:108","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:206","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:801","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.Injector:73","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeObject(null)","position":"org.easymock.internal.ClassProxyFactory:130","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:168","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getAllInterfacesForClass(java.lang.reflect.Method.getDeclaringClass())","position":"org.easymock.internal.BridgeMethodResolver:167","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","position":"org.easymock.internal.EasyMockProperties:63","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Properties.load(java.io.InputStream)","position":"org.easymock.internal.EasyMockProperties:65","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.Injector:83","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-7104607303959381785L","position":"org.easymock.internal.matchers.Find:28","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n}","position":"org.easymock.internal.ClassProxyFactory:226","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.util.List<java.lang.reflect.Method>.size()) == 1) {\n    java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0);\n} else {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method);\n}","position":"org.easymock.internal.BridgeMethodResolver:87","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.AndroidSupport.boolean","position":"org.easymock.internal.AndroidSupport:34","type":"CtReturnImpl"},"status":-2},{"failures":[177],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","position":"org.easymock.internal.MockBuilder:196","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"status":-1},{"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,2,3,85,5,6,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,18,125,126,127,128,129,130,19,20,131,132,133,134,135,14,15,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195],"binaryOperator":"(int <= (int))","name":"conditionalBoundary","position":"org.easymock.internal.Range:79","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setCallbackType(org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.getClass())","position":"org.easymock.internal.ClassProxyFactory:171","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:125","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs());\n} else {\n    try {\n        org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n        java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n        com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n    } catch (java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n    }\n}","position":"org.easymock.internal.AndroidClassProxyFactory:42","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","position":"org.easymock.internal.MockBuilder:69","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"value":"org.easymock.internal.AndroidSupport.isAndroid","checkOrder":"org.easymock.internal.AndroidSupport.isAndroid"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.AndroidSupport.boolean = boolean","position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = true","position":"org.easymock.internal.AndroidSupport:27","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Failed to instantiate \" + (java.lang.Class<?>.getName()))","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:47","type":"mutation","status":-2},{"failures":[],"variableMapping":{"varArgsCount":"length","nonVarArgsCount":"length"},"name":"replace","transplant":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[int + int]","position":"org.easymock.internal.Invocation:62","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[java.lang.Class<?>[].int]","position":"org.easymock.internal.DefaultClassInstantiator:109","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.InjectionTarget:56","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"break","position":"org.easymock.internal.BridgeMethodResolver:205","type":"CtBreakImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.matchers.Captures<?> org.easymock.internal.matchers.Captures<?> : java.util.Collection<org.easymock.internal.matchers.Captures<?>>) {\n    org.easymock.internal.matchers.Captures<?>.validateCapture();\n}","position":"org.easymock.internal.Invocation:167","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return ","position":"org.easymock.internal.ClassProxyFactory:111","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.io.ObjectOutputStream.writeObject(null);\n    return ;\n} ","position":"org.easymock.internal.ClassProxyFactory:129","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()))","position":"org.easymock.internal.MocksBehavior:98","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock))","position":"org.easymock.internal.Injector:138","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","position":"org.easymock.internal.ReflectionUtils:72","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1555","type":"mutation","return":"return 0","status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","position":"org.easymock.internal.ClassProxyFactory:207","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.IllegalArgumentException java.lang.IllegalArgumentException","position":"org.easymock.internal.Result:85","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:335","type":"CtReturnImpl"},"status":0},{"failures":[34,0,44,50,56,60,62,200,23,7,95,100,103,106,108,110,118,120,125,12,19,20,133,139,142,147,148,151,152,153,222],"variableMapping":{"state":"state"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","position":"org.easymock.internal.MocksControl:212","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","position":"org.easymock.internal.MocksControl:334","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","position":"org.easymock.internal.MocksControl:136","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2722051869610289637L","position":"org.easymock.internal.Results:28","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:180","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Results:53","type":"CtReturnImpl"},"status":-2},{"failures":[144],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","position":"org.easymock.EasyMock:1927","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","position":"org.easymock.internal.MockBuilder:167","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.BridgeMethodResolver:142","type":"CtReturnImpl"},"status":-2},{"failures":[64,73,223],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isVarArgs()) {\n    int = java.lang.Math.java.lang.Math.min(int, ((java.lang.Class<?>[].int) - 1));\n} ","position":"org.easymock.internal.Invocation:136","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:252","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.replay()","position":"org.easymock.internal.MocksControl:212","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:79","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next()","position":"org.easymock.internal.ExpectedInvocation:107","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":84,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":176,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":83,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":59,"org.easymock.tests.UsageVarargTest.varargIntAccepted":66,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":42,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":110,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":24,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":183,"org.easymock.tests2.UsageConstraintsTest.testContains":209,"org.easymock.tests2.UsageConstraintsTest.testFind":206,"org.easymock.tests.UsageVarargTest.allKinds":73,"org.easymock.tests2.StubTest.stubWithReturnValue":182,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":145,"org.easymock.tests2.CaptureTest.testCaptureAll":142,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":88,"org.easymock.samples.ExampleTest.addAndChangeDocument":34,"org.easymock.tests.UsageVarargTest.varargCharAccepted":67,"org.easymock.tests.UsageVerifyTest.twoThrows":5,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":197,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":40,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":68,"org.easymock.tests2.DelegateToTest.testReturnException":131,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":128,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":119,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":194,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":134,"org.easymock.tests2.CaptureTest.testAnd":141,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":52,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":149,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":56,"org.easymock.tests2.UsageConstraintsTest.testMatches":210,"org.easymock.tests2.UsageConstraintsTest.testNull":112,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":159,"org.easymock.tests2.EasyMockSupportClassTest.testAll":178,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":189,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":60,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":104,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":140,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":38,"org.easymock.tests2.UsageConstraintsTest.greaterThan":120,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":64,"org.easymock.samples.SupportTest.addDocument":26,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":41,"org.easymock.tests2.StubTest.stub":216,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":81,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":39,"org.easymock.tests.UsageExpectAndReturnTest.object":102,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":109,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":121,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":191,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":72,"org.easymock.tests.UsageExpectAndThrowTest.object":54,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":222,"org.easymock.tests2.UsageTest.moreThanOneArgument":12,"org.easymock.tests.UsageVarargTest.varargByteAccepted":71,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":51,"org.easymock.samples.ExampleTest.voteAgainstRemoval":31,"org.easymock.tests.UsageVarargTest.varargShortAccepted":69,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":55,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":130,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":80,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":25,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":170,"org.easymock.tests2.MockBuilderTest.testCreateMock":220,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":154,"org.easymock.tests2.SerializationTest.testAllMockedMethod":138,"org.easymock.samples.ExampleTest.voteAgainstRemovals":28,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":201,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":223,"org.easymock.tests.ErrorMessageTest.testGetters":10,"org.easymock.tests.LimitationsTest.mockNativeMethod":92,"org.easymock.tests2.DelegateToTest.testStubDelegate":132,"org.easymock.tests.UsageUnorderedTest.message":7,"org.easymock.samples.ExampleTest.answerVsDelegate":29,"org.easymock.samples.ExampleTest.voteForRemoval":30,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":87,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":156,"org.easymock.tests.UsageVerifyTest.twoReturns":6,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":53,"org.easymock.tests2.DependencyTest.testInterfaceMocking":166,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":184,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":187,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":113,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":9,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":100,"org.easymock.tests2.CaptureTest.testCaptureRightOne":150,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":203,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":175,"org.easymock.tests2.UsageConstraintsTest.cmpTo":116,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":161,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":63,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":124,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":4,"org.easymock.samples.PartialClassMockTest.testGetArea":35,"org.easymock.samples.ExampleTest.voteForRemovals":33,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":91,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":200,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":118,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":174,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":158,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":99,"org.easymock.tests2.AnswerTest.answer":155,"org.easymock.tests.MockingTest.testNicePartialClassMocking":76,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":1,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":96,"org.easymock.tests2.UsageConstraintsTest.any":115,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":82,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":193,"org.easymock.tests.UsageExpectAndThrowTest.longType":47,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":20,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":61,"org.easymock.tests2.CallbackTest.callback":139,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":180,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":111,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":169,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":117,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":108,"org.easymock.tests2.MockBuilderTest.testCreateMockString":221,"org.easymock.tests2.CaptureTest.testCaptureNone":148,"org.easymock.tests2.SerializationTest.test":137,"org.easymock.tests.UsageExpectAndReturnTest.longType":98,"org.easymock.tests2.SerializationTest.testClass":136,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":146,"org.easymock.tests2.CaptureTest.testCaptureFirst":151,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":122,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":36,"org.easymock.tests2.UsageTest.niceToStrict":127,"org.easymock.tests2.EasyMockSupportTest.testVerify":195,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":49,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":17,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":57,"org.easymock.tests2.UsageTest.strictResetToDefault":126,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":107,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":177,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":44,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":114,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":101,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":163,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":65,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":173,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":211,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":171,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":77,"org.easymock.tests2.UsageConstraintsTest.testOr":208,"org.easymock.tests2.DelegateToTest.testDelegate":133,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":153,"org.easymock.tests2.UsageConstraintsTest.testNotNull":18,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":135,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":129,"org.easymock.tests2.CaptureTest.testCapture_2617107":143,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":89,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":103,"org.easymock.tests2.ThreadingTest.testThreadSafe":152,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":214,"org.easymock.tests.UsageThrowableTest.noUpperLimit":90,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":160,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":162,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":192,"org.easymock.tests.UsageExpectAndReturnTest.floatType":97,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":185,"org.easymock.tests2.UsageConstraintsTest.testSame":207,"org.easymock.tests2.UsageTest.resumeIfFailure":215,"org.easymock.tests.UsageOverloadedMethodTest.overloading":74,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":164,"org.easymock.samples.SupportTest.voteForRemovals":27,"org.easymock.tests.UsageRangeTest.combination":85,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":212,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":94,"org.easymock.tests.UsageTest.openCallCountByLastCall":198,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":50,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":202,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":123,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":196,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":13,"org.easymock.tests2.CaptureTest.testPrimitive":144,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":172,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":58,"org.easymock.samples.BasicClassMockTest.testPrintContent":37,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":78,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":11,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":16,"org.easymock.tests.UsageExpectAndThrowTest.floatType":46,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":19,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":105,"org.easymock.tests2.UsageStrictMockTest.differentMethods":15,"org.easymock.tests2.AnswerTest.stubAnswer":157,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":186,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":190,"org.easymock.tests2.CaptureTest.testCaptureLast":147,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":45,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":219,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":86,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":167,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":179,"org.easymock.tests.UsageStrictMockTest.range":2,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":199,"org.easymock.tests.UsageTest.unexpectedCallWithArray":218,"org.easymock.tests.MockingTest.testPartialClassMocking":75,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":106,"org.easymock.tests2.UsageConstraintsTest.constraints":205,"org.easymock.samples.ExampleTest.addDocument":32,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":8,"org.easymock.tests2.UsageConstraintsTest.lessThan":125,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":217,"org.easymock.tests.UsageVarargTest.varargLongAccepted":70,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":181,"org.easymock.tests2.UsageStrictMockTest.range":14,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":165,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":21,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":22,"org.easymock.tests.UsageTest.moreThanOneArgument":0,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":79,"org.easymock.tests2.UsageTest.openCallCountByLastCall":213,"org.easymock.tests.UsageStrictMockTest.differentMethods":3,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":188,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":204,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":168,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":48,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":23,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":95,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":43,"org.easymock.tests.GenericTest.testPackageScope":93}}]

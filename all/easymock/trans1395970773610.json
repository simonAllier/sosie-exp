[{"failures":[0,1],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:269","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.Capture<T>.reset()","position":"org.easymock.Capture:118","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"-3483500330975410177L","position":"org.easymock.internal.RuntimeExceptionWrapper:23","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.UnorderedBehavior org.easymock.internal.UnorderedBehavior : java.util.List<org.easymock.internal.UnorderedBehavior>.subList(int, java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : org.easymock.internal.UnorderedBehavior.getMessages(null)) {\n        org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0);\n    }\n}","position":"org.easymock.internal.MocksBehavior:167","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","name":"name","this":"this","mockedMethods":"mockedMethods"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","position":"org.easymock.internal.MocksControl:88","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:109","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:414","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:206","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)))","position":"org.easymock.internal.MocksControl:157","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:198","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1234","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new (\"<\") {\n    @java.lang.Override\n    public boolean matchResult(final int result) {\n        return int < 0;\n    }\n}","position":"org.easymock.LogicalOperator:24","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:113","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:161","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","position":"org.easymock.internal.RecordState:151","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","position":"org.easymock.internal.MockBuilder:236","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type)","position":"org.easymock.internal.BridgeMethodResolver:339","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1408","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new (\"<\") {\n    @java.lang.Override\n    public boolean matchResult(final int result) {\n        return int < 0;\n    }\n}","position":"org.easymock.LogicalOperator:24","type":"CtNewClassImpl"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15],"variableMapping":{"errorMessage":"errorMessage","matches":"matches"},"name":"replace","transplant":{"sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","position":"org.easymock.internal.MocksBehavior:137","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int)","position":"org.easymock.internal.MocksBehavior:144","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(((((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol())) + \" 0\"))","position":"org.easymock.internal.matchers.Compare:47","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","position":"org.easymock.internal.matchers.Captures:52","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"type":"mockClass"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass()","position":"org.easymock.internal.ClassProxyFactory:184","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return int >= 0","position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isArray()) {\n        final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n                return false;\n            } \n            break;\n        } \n    } \n    if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:193","type":"CtForImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:411","type":"CtLocalVariableImpl"},"status":-2},{"failures":[16,17,18,19],"variableMapping":{"o":"actual"},"name":"replace","transplant":{"sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","position":"org.easymock.internal.Invocation:180","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.IArgumentMatcher.matches(java.lang.Object))) {\n    return false;\n} ","position":"org.easymock.internal.matchers.And:39","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.ClassProxyFactory:90","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.ObjectMethodsFilter:113","type":"CtLocalVariableImpl"},"status":-2},{"failures":[20,21,22,23,24,25,26,27,28,17,29,18,30,31,32,33,0,34,1,19,35,36,37,38,39,40],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"org.easymock.internal.LastControl:117","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","position":"org.easymock.internal.LastControl:119","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","position":"org.easymock.internal.MockBuilder:71","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.AndroidClassProxyFactory.MockHandler org.easymock.internal.AndroidClassProxyFactory.MockHandler = new org.easymock.internal.AndroidClassProxyFactory.MockHandler(java.lang.reflect.InvocationHandler , java.lang.reflect.Method[])","position":"org.easymock.internal.AndroidClassProxyFactory:38","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:68","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:255","type":"CtIfImpl"},"status":-2},{"failures":[41,42,43],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","position":"org.easymock.EasyMock:1518","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.util.List<T>","position":"org.easymock.Capture:95","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan)","position":"org.easymock.internal.Injector:82","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(\"\\n  Unexpected method call \").append(org.easymock.internal.Invocation.toString())","position":"org.easymock.internal.MocksBehavior:120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:122","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:69","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(double))","position":"org.easymock.EasyMock:1506","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","position":"org.easymock.internal.ReplayState:68","type":"CtInvocationImpl"},"status":0},{"failures":[],"binaryOperator":"((org.easymock.internal.Invocation.(getMockAndMethodName()) + \"(\") + org.easymock.internal.ArgumentToString.(org.easymock.internal.ArgumentToString.argumentsToString(java.lang.Object[])))","name":"math","position":"org.easymock.internal.Invocation:110","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader())","position":"org.easymock.internal.ClassProxyFactory:183","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:97","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.regex.Pattern.java.util.regex.Pattern.compile(java.lang.String).matcher(((java.lang.String)(java.lang.Object)))","position":"org.easymock.internal.matchers.Find:37","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\") + (org.easymock.internal.Invocation.getMethod())) + \"]\") , java.lang.IllegalArgumentException)","position":"org.easymock.internal.Result:86","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount())","position":"org.easymock.internal.UnorderedBehavior:93","type":"CtLocalVariableImpl"},"status":-2},{"failures":[44,45,46,47,48,49,50,20,51,52,53,54,55,56,57,58,59,60,61,21,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,2,87,88,3,4,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,5,183,184,6,7,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,8,9,230,231,232,233,234,235,236,237,238,239,240,241,10,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,16,41,300,301,302,303,304,42,305,306,307,308,309,310,311,312,313,314,315,43,316,317,318,319,320,321,322,323,324,325,11,326,327,328,329,330,12,13,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,23,353,24,354,25,26,27,355,28,356,357,358,359,14,15,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,17,29,18,30,31,32,33,0,34,1,19,35,36,37,377,378,379,380,381,38,382,383,39,40,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471],"variableMapping":{"state":"state","behavior":"behavior"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(this.org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:213","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:191","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1582","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","position":"org.easymock.EasyMock:560","type":"CtThrowImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:356","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\")","name":"math","position":"org.easymock.internal.ExpectedInvocation:48","type":"mutation","status":-2},{"failures":[44,45,46,47,48,49,50,20,51,52,53,54,55,56,57,58,59,60,21,62,64,65,66,67,68,69,70,71,78,79,80,81,82,83,84,85,86,2,87,88,3,4,89,90,91,92,93,94,95,96,97,98,99,100,101,102,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,139,140,141,143,144,145,146,147,148,149,150,151,152,153,157,158,160,164,171,172,173,174,175,176,177,178,179,180,181,182,5,183,184,6,7,185,186,188,189,190,225,226,227,228,229,8,9,233,234,235,236,237,238,239,240,241,10,242,243,244,245,246,247,248,249,250,251,254,257,258,261,262,263,264,265,266,267,268,269,270,271,272,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,298,299,16,41,301,302,303,304,42,305,307,308,309,310,311,312,313,314,315,43,316,317,318,319,320,321,322,323,324,325,11,326,327,328,329,330,12,13,331,332,338,345,346,347,348,349,350,351,352,23,24,25,26,27,28,356,357,358,359,14,15,360,361,362,363,364,370,17,29,18,30,31,32,33,0,34,1,19,35,36,37,377,378,379,380,381,38,39,40,384,385,386,387,388,389,390,391,394,395,396,397,400,401,402,403,405,406,407,408,409,410,411,412,413,414,416,419,420,421,422,428,431,441,447,450,451,452,454,455,456,457,458,459,460,461,462,463,464,465,466,468,469,470,471],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object","position":"org.easymock.internal.BridgeMethodResolver:223","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:127","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:137","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","position":"org.easymock.internal.RecordState:233","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return new org.easymock.internal.Result(new DelegatingAnswer() , false)","position":"org.easymock.internal.Result:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>)","position":"org.easymock.internal.BridgeMethodResolver:385","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtInvocationImpl"},"status":-2},{"failures":[65,86,2,3,4,5,6,8,9,10,472,11,12,13,14],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","position":"org.easymock.internal.matchers.Captures:52","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","position":"org.easymock.internal.ArgumentToString:89","type":"CtForImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"-1951159588262854559L","position":"org.easymock.internal.ExpectedInvocationAndResult:25","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-3743894206806704049L","position":"org.easymock.internal.matchers.Any:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","position":"org.easymock.internal.BridgeMethodResolver:194","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","position":"org.easymock.internal.LastControl:93","type":"CtLocalVariableImpl"},"status":-2},{"failures":[37,377],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","position":"org.easymock.EasyMock:1518","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","position":"org.easymock.Capture:112","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"boolean = true","position":"org.easymock.internal.Injection:74","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = true","position":"org.easymock.internal.AndroidSupport:27","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:72","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1747","type":"CtReturnImpl"},"status":-2},{"failures":[22],"variableMapping":{"buffer":"buffer"},"name":"add","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"not(\")","position":"org.easymock.internal.matchers.Not:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","position":"org.easymock.internal.matchers.Captures:43","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","position":"org.easymock.internal.MockBuilder:164","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.Result:46","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int += 1","position":"org.easymock.internal.Results:68","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Class.java.lang.Class.forName(\"dalvik.system.PathClassLoader\");\n    org.easymock.internal.AndroidSupport.boolean = true;\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    org.easymock.internal.AndroidSupport.boolean = false;\n}","position":"org.easymock.internal.AndroidSupport:25","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:450","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:252","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(java.lang.reflect.Type[].int) > 0","name":"conditionalBoundary","position":"org.easymock.internal.BridgeMethodResolver:352","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:234","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.MockBuilder:153","type":"CtThrowImpl"},"status":-2},{"failures":[353],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:363","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:116","type":"CtIfImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:261","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","position":"org.easymock.internal.MockBuilder:236","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException)","position":"org.easymock.internal.DefaultClassInstantiator:60","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1420","type":"CtInvocationImpl"},"status":-2},{"failures":[75,92,93,94,192,473,294,387,390,402],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","position":"org.easymock.internal.MocksControl:183","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","position":"org.easymock.internal.MocksControl:185","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName()))) && (java.lang.StackTraceElement[][2].getMethodName().equals(\"invoke\"))","position":"org.easymock.internal.ClassProxyFactory:157","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","position":"org.easymock.internal.ErrorMessage:51","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:217","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.easymock.internal.RecordState:79","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","position":"org.easymock.internal.RecordState:106","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","position":"org.easymock.internal.RecordState:139","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Number.byteValue()","position":"org.easymock.internal.RecordState:195","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","position":"org.easymock.internal.LastControl:93","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:417","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType())","position":"org.easymock.internal.RecordState:80","type":"CtReturnImpl"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (int == (java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    int--;\n} ","position":"org.easymock.internal.MocksBehavior:114","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int <= int ; int++) {\n    final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).getMessages(org.easymock.internal.Invocation);\n    java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>);\n    for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : java.util.List<org.easymock.internal.ErrorMessage>) {\n        if (org.easymock.internal.ErrorMessage.isMatching()) {\n            int++;\n        } \n    }\n}","position":"org.easymock.internal.MocksBehavior:127","type":"CtForImpl"},"status":-1},{"failures":[85,86,2,3,4,136,137,5,183,6,7,229,8,9,10,473,325,11,12,13,358,14,15,406,407,468,469,470,471],"name":"returnValue","position":"org.easymock.internal.Invocation:182","type":"mutation","return":"return true","status":-1},{"failures":[],"variableMapping":{"constructorArgs":"constructorArgs","constructor":"constructor"},"name":"add","transplant":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","position":"org.easymock.internal.MockBuilder:132","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","position":"org.easymock.internal.MockBuilder:120","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","position":"org.easymock.internal.matchers.Compare:55","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:25","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.Injector:71","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.set(java.lang.Object, java.lang.Object)","position":"org.easymock.internal.Injector:131","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","position":"org.easymock.internal.ReplayState:44","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:68","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:80","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","position":"org.easymock.internal.MocksControl:136","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory()","position":"org.easymock.internal.MocksControl:147","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation> java.util.Stack<org.easymock.internal.Invocation> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.get()","position":"org.easymock.internal.LastControl:123","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n    break;\n} ","position":"org.easymock.internal.BridgeMethodResolver:199","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })))","position":"org.easymock.internal.DefaultClassInstantiator:189","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"\\'\")","position":"org.easymock.internal.ArgumentToString:41","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"verified":"isThreadSafe"},"name":"add","transplant":{"sourceCode":"boolean = false","position":"org.easymock.internal.MocksBehavior:156","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:181","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToNice();\n}","position":"org.easymock.EasyMockSupport:572","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"toString\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ReflectionUtils:48","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:25","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"status":-2},{"failures":[44,47,336,337,338,339,340,342,343,368,369,370,371,372,374,375],"binaryOperator":"org.easymock.Mock == null","name":"removeConditional","position":"org.easymock.internal.Injector:113","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","position":"org.easymock.EasyMock:2066","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:288","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:324","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1120","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:309","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(\":\")","position":"org.easymock.internal.MocksBehavior:140","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.UnorderedBehavior:62","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:112","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","position":"org.easymock.internal.DefaultClassInstantiator:192","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","position":"org.easymock.internal.ClassProxyFactory:208","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.String java.lang.String = org.easymock.internal.Injection.getAnnotation().java.lang.String()","position":"org.easymock.internal.InjectionPlan:49","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return (int) == (java.lang.Integer.int)","position":"org.easymock.internal.Range:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:388","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"new org.easymock.CaptureType()","position":"org.easymock.CaptureType:35","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setNamingPolicy(org.easymock.internal.ClassProxyFactory.net.sf.cglib.core.NamingPolicy)","position":"org.easymock.internal.ClassProxyFactory:274","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.verify();\n}","position":"org.easymock.EasyMockSupport:561","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:154","type":"CtInvocationImpl"},"status":-2},{"failures":[200,230,231,232,271],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","position":"org.easymock.internal.Results:40","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:304","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","position":"org.easymock.internal.Range:75","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","position":"org.easymock.EasyMockSupport:530","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","position":"org.easymock.internal.MockBuilder:236","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:75","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1803","type":"CtReturnImpl"},"status":0},{"failures":[85,86,2,3,4,5,474,475,476,325,11,12,13,477,478,479,480],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:38","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)","position":"org.easymock.internal.Injector:134","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","position":"org.easymock.internal.DefaultClassInstantiator:138","type":"CtInvocationImpl"},"status":-2},{"failures":[16,42,309],"variableMapping":{"actual":"actual"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && ((((java.lang.String)(java.lang.Object)).indexOf(java.lang.String)) >= 0)","position":"org.easymock.internal.matchers.Contains:36","type":"CtReturnImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":247,"org.easymock.tests2.MockedExceptionTest.testRealException":348,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":432,"org.easymock.tests.UsageVarargTest.varargIntAccepted":141,"org.easymock.tests.LimitationsTest.mockFinalMethod":255,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":298,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":93,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":452,"org.easymock.tests.UsageCallCountTest.tooManyCalls":241,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":443,"org.easymock.tests.UsageVarargTest.allKinds":150,"org.easymock.tests2.StubTest.stubWithReturnValue":451,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":449,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":81,"org.easymock.tests2.CaptureTest.testCaptureAll":29,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":242,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":313,"org.easymock.tests2.CaptureTest.testAnd":17,"org.easymock.tests.UsageStrictMockTest.testVerify":186,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":124,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":21,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":72,"org.easymock.tests.MockClassControlTest.testToString":92,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":385,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":271,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":459,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":132,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":287,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":370,"org.easymock.tests.UsageThrowableTest.throwError":244,"org.easymock.samples.SupportTest.addDocument":48,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":71,"org.easymock.tests2.StubTest.stub":450,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":218,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":265,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":365,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":174,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":415,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":67,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":214,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":341,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":293,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":424,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":216,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":423,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":149,"org.easymock.tests.UsageExpectAndThrowTest.object":126,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":379,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":112,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":445,"org.easymock.tests2.UsageTest.moreThanOneArgument":325,"org.easymock.tests.UsageVarargTest.varargByteAccepted":148,"org.easymock.tests.MockClassControlTest.testEquals":96,"org.easymock.tests.UsageTest.wrongArguments":2,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":101,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":190,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":369,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":127,"org.easymock.tests2.UsageTest.defaultResetToNice":330,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":475,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":477,"org.easymock.tests.MockingTest.testNiceClassMocking":163,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":347,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":380,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":403,"org.easymock.tests2.MockBuilderTest.testCreateMock":405,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":381,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":261,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":266,"org.easymock.samples.ExampleTest.voteAgainstRemovals":50,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":356,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":61,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":368,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":227,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":151,"org.easymock.tests2.CaptureTest.testCapture1_2446744":31,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":355,"org.easymock.samples.ExampleTest.voteForRemoval":51,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":296,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":238,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":64,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":105,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":78,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":185,"org.easymock.tests2.CaptureTest.testCaptureRightOne":19,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":280,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":262,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":383,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":413,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":226,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":220,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":263,"org.easymock.tests2.UsageConstraintsTest.cmpTo":308,"org.easymock.tests.MockTypeTest.fromEasyMockClass":73,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":168,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":374,"org.easymock.tests2.MockedExceptionTest.testMockedException":346,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":135,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":178,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":319,"org.easymock.samples.PartialClassMockTest.testGetArea":57,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":229,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":200,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":153,"org.easymock.samples.ConstructorCalledMockTest.testTax":45,"org.easymock.tests2.UsageTest.argumentsOrdered":13,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":382,"org.easymock.samples.ExampleTest.removeNonExistingDocument":55,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":297,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":166,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":384,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":109,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":279,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":98,"org.easymock.tests2.AnswerTest.answer":38,"org.easymock.tests.MockingTest.testNicePartialClassMocking":158,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":375,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":183,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":175,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":180,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":219,"org.easymock.tests.UsageExpectAndThrowTest.longType":119,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":77,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":133,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":441,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":461,"org.easymock.tests.UsageTest.argumentsOrdered":4,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":41,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":402,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":292,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":69,"org.easymock.tests2.MockBuilderTest.testCreateMockString":407,"org.easymock.tests2.NameTest.nameForStrictMock":469,"org.easymock.tests2.CaptureTest.testCaptureNone":34,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":199,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":213,"org.easymock.tests2.SerializationTest.testClass":361,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":192,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":58,"org.easymock.tests.MockingTest.testInterfaceMocking":159,"org.easymock.tests2.EasyMockSupportTest.testVerify":466,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":188,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":372,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":401,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":121,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":162,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":318,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":323,"org.easymock.tests.GenericTest.testBridgedEquals":260,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":291,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":406,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":305,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":389,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":408,"org.easymock.tests2.UsageConstraintsTest.testOr":304,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":378,"org.easymock.tests.MockClassControlTest.testHashCode":95,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":334,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":467,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":75,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":243,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":251,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":286,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":177,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":386,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":388,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":448,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":429,"org.easymock.tests2.UsageConstraintsTest.testSame":303,"org.easymock.tests2.UsageTest.resumeIfFailure":331,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":478,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":231,"org.easymock.tests.UsageOverloadedMethodTest.overloading":152,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":390,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":76,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":417,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":337,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":339,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":437,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":224,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":46,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":258,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":436,"org.easymock.tests.UsageTest.openCallCountByLastCall":87,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":122,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":473,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":223,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":268,"org.easymock.tests2.NameTest.nameForNiceMock":470,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":371,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":228,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":176,"org.easymock.tests2.CaptureTest.testPrimitive":30,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":410,"org.easymock.samples.BasicClassMockTest.testPrintContent":59,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":230,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":171,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":419,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":23,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":240,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":234,"org.easymock.tests2.UsageStrictMockTest.differentMethods":15,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":438,"org.easymock.tests.MockingTest.testClassMocking":155,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":456,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":259,"org.easymock.tests2.CaptureTest.testCaptureLast":0,"org.easymock.tests2.UsageConstraintsTest.equals":300,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":117,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":239,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":237,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":395,"org.easymock.tests.UsageStrictMockTest.range":6,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":88,"org.easymock.tests.UsageTest.unexpectedCallWithArray":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":439,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":196,"org.easymock.samples.ExampleTest.addDocument":53,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":161,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":65,"org.easymock.tests2.UsageConstraintsTest.lessThan":322,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":3,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":60,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":217,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":354,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":205,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":294,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":170,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":479,"org.easymock.tests2.UsageStrictMockTest.range":14,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":391,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":100,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":136,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":198,"org.easymock.tests.UsageTest.moreThanOneArgument":85,"org.easymock.tests2.UsageTest.openCallCountByLastCall":328,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":397,"org.easymock.tests.UsageStrictMockTest.differentMethods":7,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":165,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":202,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":295,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":120,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":103,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":476,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":274,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":114,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":430,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":184,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":367,"org.easymock.tests2.DependencyTest.testClassMockingSupport":393,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":416,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":131,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":82,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":336,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":44,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":106,"org.easymock.tests2.UsageConstraintsTest.testContains":309,"org.easymock.tests2.UsageConstraintsTest.testFind":301,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":32,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":167,"org.easymock.samples.ExampleTest.addAndChangeDocument":56,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":396,"org.easymock.tests.UsageVarargTest.varargCharAccepted":143,"org.easymock.tests2.CaptureTest.testCaptureFromStub":35,"org.easymock.tests.UsageVerifyTest.twoThrows":8,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":376,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":68,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":144,"org.easymock.tests2.DelegateToTest.testReturnException":25,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":327,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":453,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":465,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":256,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":353,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":357,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":232,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":169,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":272,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":1,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":128,"org.easymock.tests2.UsageConstraintsTest.testMatches":312,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":203,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":204,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":215,"org.easymock.tests.LimitationsTest.abstractClass":252,"org.easymock.tests2.UsageConstraintsTest.testNull":302,"org.easymock.tests2.EasyMockSupportClassTest.testAll":428,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":66,"org.easymock.tests2.UsageConstraintsTest.greaterThan":314,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":139,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":267,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":43,"org.easymock.tests.UsageExpectAndReturnTest.object":284,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":462,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":360,"org.easymock.tests2.DelegateToTest.testWrongClass":27,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":195,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":474,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":123,"org.easymock.samples.ExampleTest.voteAgainstRemoval":52,"org.easymock.tests.CapturesMatcherTest.test":22,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":250,"org.easymock.tests.UsageVarargTest.varargShortAccepted":146,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":221,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":191,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":343,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":173,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":427,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":90,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":366,"org.easymock.tests2.SerializationTest.testAllMockedMethod":363,"org.easymock.tests2.NameTest.nameForMocksControl":471,"org.easymock.tests.MockingTest.testStrictClassMocking":154,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":70,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":435,"org.easymock.tests2.DelegateToTest.testStubDelegate":26,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":104,"org.easymock.tests.LimitationsTest.mockNativeMethod":254,"org.easymock.tests.UsageUnorderedTest.message":10,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":63,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":207,"org.easymock.samples.ExampleTest.answerVsDelegate":20,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":108,"org.easymock.tests.UsageCallCountTest.tooFewCalls":236,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":283,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":39,"org.easymock.tests.UsageVerifyTest.twoReturns":9,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":444,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":125,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":206,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":278,"org.easymock.tests2.DependencyTest.testInterfaceMocking":394,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":454,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":480,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":111,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":208,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":457,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":352,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":42,"org.easymock.tests.MockingTest.testTwoMocks":156,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":235,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":79,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":345,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":233,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":433,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":285,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":387,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":212,"org.easymock.tests.UsageThrowableTest.throwCheckedException":248,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":426,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":74,"org.easymock.samples.ExampleTest.voteForRemovals":54,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":246,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":311,"org.easymock.tests.ReplayStateInvalidUsageTest.times":269,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":62,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":434,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":412,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":193,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":194,"org.easymock.tests2.UsageConstraintsTest.any":307,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":335,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":282,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":197,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":464,"org.easymock.tests.LimitationsTest.privateConstructor":253,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":24,"org.easymock.tests2.CallbackTest.callback":364,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":201,"org.easymock.tests2.NameTest.nameForMock":468,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":310,"org.easymock.tests.MockNameTest.defaultName":273,"org.easymock.tests2.SerializationTest.test":362,"org.easymock.tests.UsageExpectAndReturnTest.longType":277,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":33,"org.easymock.tests2.CaptureTest.testCaptureFirst":37,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":138,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":316,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":110,"org.easymock.tests2.UsageTest.niceToStrict":326,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":102,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":107,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":181,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":129,"org.easymock.tests2.UsageTest.strictResetToDefault":324,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":425,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":421,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":472,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":83,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":116,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":281,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":349,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":399,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":414,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":140,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":315,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":411,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":115,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":160,"org.easymock.tests2.DelegateToTest.testDelegate":28,"org.easymock.tests2.UsageConstraintsTest.testNotNull":320,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":359,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":338,"org.easymock.tests2.CaptureTest.testCapture_2617107":18,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":210,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":270,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":340,"org.easymock.tests2.ThreadingTest.testThreadSafe":377,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":211,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":329,"org.easymock.tests.UsageThrowableTest.noUpperLimit":245,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":142,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":463,"org.easymock.tests.UsageExpectAndReturnTest.floatType":276,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":455,"org.easymock.tests2.UsageTest.wrongArguments":11,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":306,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":351,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":94,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":404,"org.easymock.samples.SupportTest.voteForRemovals":49,"org.easymock.tests.UsageRangeTest.combination":225,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":249,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":440,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":321,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":317,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":446,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":344,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":358,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":288,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":130,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":80,"org.easymock.tests.UsageExpectAndThrowTest.floatType":118,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":442,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":289,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":409,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":333,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":418,"org.easymock.tests.UsageTest.exactCallCountByLastCall":89,"org.easymock.tests2.AnswerTest.stubAnswer":40,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":460,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":431,"org.easymock.tests.MockingTest.testPartialClassMocking":157,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":290,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":12,"org.easymock.tests2.UsageConstraintsTest.constraints":16,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":350,"org.easymock.tests.UsageVarargTest.varargLongAccepted":147,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":179,"org.easymock.tests.ObjectMethodsTest.testHashCode":189,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":420,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":422,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":5,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":134,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":222,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":447,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":137,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":398,"org.easymock.tests2.DependencyTest.testClassMocking":392,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":97,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":172,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":187,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":342,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":458,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":91,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":299,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":400,"org.easymock.tests.DefaultClassInstantiatorTest.object":164,"org.easymock.tests.UsageVarargTest.differentLength":145,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":209,"org.easymock.tests2.CaptureTest.testCapture2_2446744":36,"org.easymock.tests.GenericTest.testPackageScope":257}}]

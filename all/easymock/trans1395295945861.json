[{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,126,127,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1204","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[179],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1333","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"failures":[260],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:986","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[193],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[230],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.CompareTo:41","failures":[261],"status":-1,"binaryOperator":"(java.lang.Object instanceof java.lang.Comparable)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[262],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"methodName","key":"methodName"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[171,189,195,263],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[191],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[264],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"arg"}},{"position":"org.easymock.EasyMock:2124","failures":[130,236,265,237,254,257,258],"status":-1,"binaryOperator":"org.easymock.internal.Invocation == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,266,267,22,23,268,24,25,269,270,27,28,271,31,272,273,274,275,276,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,61,277,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,90,91,278,92,93,279,280,94,95,96,97,281,282,283,284,285,286,287,288,289,290,98,101,102,103,104,105,111,112,113,114,115,116,117,118,119,120,121,125,291,292,293,294,295,128,129,130,131,132,296,133,134,135,136,137,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,297,298,299,300,301,302,162,303,163,164,304,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,200,201,202,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,305,225,226,306,227,228,229,307,230,308,231,232,233,309,310,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,252,254,257,258,259],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.InstanceOf:40","failures":[],"status":0,"binaryOperator":"(\"isA(\" + (java.lang.Class<?>.getName()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[0,2,3,4,5,6,7,10,11,13,14,15,17,18,19,20,21,23,24,25,33,63,64,65,66,95,96,97,106,107,108,109,115,116,117,118,119,120,121,125,128,129,131,132,133,150,151,152,153,154,155,156,157,158,159,162,163,164,165,167,168,169,170,201,205,206,210,238,239,240,241,242,243,244,245,246,247,248,249],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:126","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:97","sourceCode":"for (final java.lang.String java.lang.String : java.lang.String[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.String);\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.DefaultClassInstantiator:157","failures":[311],"status":-1,"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"java.lang.reflect.Field.getType()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"failures":[293,294,312,313,314,315,316,317,318,319,320,321],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:176","failures":[165,322,323,324,325,326,327,328],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[136,138,139,140,141,142,143,145,329,146,147,149],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:157","failures":[311],"status":-1,"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:84","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[0,4,5,7,12,17,267,22,268,269,270,330,273,274,331,275,276,332,333,334,335,336,32,36,40,41,43,48,53,61,277,337,338,339,340,341,342,343,344,345,346,347,67,68,70,71,72,73,74,75,76,77,348,278,279,280,94,95,96,97,349,350,351,352,353,281,282,283,284,285,287,288,289,290,98,354,355,356,357,358,359,360,361,362,363,364,365,101,102,103,104,366,112,113,114,125,291,292,293,294,295,128,129,130,131,132,296,133,367,136,137,138,139,141,142,143,144,145,146,149,150,151,152,153,154,155,368,156,369,158,302,303,304,165,370,371,372,373,166,167,168,169,170,174,179,180,182,183,185,188,191,192,193,194,195,200,202,205,206,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,305,225,226,306,227,228,307,230,308,233,309,310,235,238,239,240,241,242,243,244,374,246,375,247,248,376,377,250,251,252,254,257],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[22,378,379,348,380,381],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1952","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"method"}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:48","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.specification.version\")","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:39","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:167","sourceCode":"final org.easymock.internal.ClassProxyFactory.MockMethodInterceptor org.easymock.internal.ClassProxyFactory.MockMethodInterceptor = new org.easymock.internal.ClassProxyFactory.MockMethodInterceptor(java.lang.reflect.InvocationHandler)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:212","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[22,378,379,348,380,381],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[180,186,198,382],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[136,138,146,173,174,176,178,179,181,191,196],"status":-1,"binaryOperator":"int < int","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[22,24,383,348,278,279,280,366,105,112,113,163,307,309,310],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[384,225,226,306],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[22,24,383,348,278,279,280,366,105,112,113,163,307,309,310],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:30","sourceCode":"new java.util.HashMap<java.lang.String, java.lang.Class<?>>(10)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:128","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:99","failures":[0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,33,34,37,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,90,91,92,93,94,95,96,97,104,111,113,115,116,117,118,119,120,121,125,128,129,131,132,133,136,137,139,140,143,144,145,146,148,149,150,151,152,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,182,183,184,185,186,187,188,189,190,191,192,193,195,196,197,198,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,238,239,240,241,242,243,244,245,246,247,248,249,252,254,258],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:411","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[385],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:104","sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","type":"CtThrowImpl"},"failures":[181],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"message","key":"message"}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[23,33,34,37,78,80,386,387,388,389,390,106,107,108,109,110,115,116,117,118,119,120,121,126,126,127,127,147,161,162,171,172,175,176,177,178,184,186,187,189,190,196,197,198],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[174],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:94","failures":[136,137,138,139,146,147,173,174,175,176,177,178,179,180,181,182,191,192,196,197],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":174,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":90,"org.easymock.tests2.UsageTest.argumentsOrdered":310,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":223,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":308,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":294,"org.easymock.tests2.DelegateToTest.testReturnException":200,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":82,"org.easymock.tests.MockingTest.testPartialClassMocking":95,"org.easymock.tests.MockClassControlTest.testToString":342,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":1,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":390,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":168,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":38,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":206,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":323,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":180,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":33,"org.easymock.tests2.UsageTest.wrongArguments":307,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":316,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":351,"org.easymock.samples.ExampleTest.answerVsDelegate":130,"org.easymock.tests2.UsageConstraintsTest.testNull":176,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":153,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":222,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":347,"org.easymock.tests2.CaptureTest.testPrimitive":139,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":37,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":57,"org.easymock.tests.UsageTest.moreThanOneArgument":91,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":152,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":108,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":26,"org.easymock.tests.UsageTest.argumentsOrdered":280,"org.easymock.tests.UsageVarargTest.varargIntAccepted":283,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":117,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":327,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":374,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":375,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":121,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":166,"org.easymock.tests.ReplayStateInvalidUsageTest.times":362,"org.easymock.tests2.AnswerTest.answer":254,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":181,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":373,"org.easymock.tests2.CaptureTest.testAnd":136,"org.easymock.tests2.UsageTest.strictResetToDefault":228,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":369,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":107,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":65,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":217,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":30,"org.easymock.tests2.DelegateToTest.testDelegate":204,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":53,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":85,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":336,"org.easymock.tests2.CaptureTest.testCapture1_2446744":140,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":51,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":371,"org.easymock.tests.UsageThrowableTest.throwError":70,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":356,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":321,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":110,"org.easymock.samples.PartialClassMockTest.testGetArea":125,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":357,"org.easymock.tests2.CompareToTest.testLessOrEqual":263,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":118,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":59,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":39,"org.easymock.tests2.UsageTest.niceToStrict":230,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":386,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":246,"org.easymock.tests2.MockBuilderTest.testCreateMock":376,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":315,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":47,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":380,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":218,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":89,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":271,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":349,"org.easymock.tests.UsageOverloadedMethodTest.overloading":68,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":186,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":103,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":13,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":67,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":185,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":145,"org.easymock.tests2.EasyMockSupportClassTest.testAll":167,"org.easymock.tests.MockClassControlTest.testEquals":346,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":277,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":55,"org.easymock.tests2.CaptureTest.testCaptureAll":137,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":334,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":372,"org.easymock.tests2.UsageConstraintsTest.testMatches":187,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":109,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":354,"org.easymock.samples.ExampleTest.voteForRemovals":133,"org.easymock.tests.UsageVarargTest.allKinds":98,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":111,"org.easymock.samples.BasicClassMockTest.testPrintContent":292,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":335,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":76,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":301,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":86,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":203,"org.easymock.tests2.UsageConstraintsTest.greaterThan":189,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":328,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":64,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":159,"org.easymock.samples.ExampleTest.voteForRemoval":131,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":208,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":262,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":368,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":114,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":227,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":215,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":72,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":81,"org.easymock.tests2.CaptureTest.testCaptureFirst":149,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":199,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":216,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":235,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":366,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":9,"org.easymock.tests2.CaptureTest.testCapture2_2446744":148,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":210,"org.easymock.tests2.UsageTest.moreThanOneArgument":229,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":249,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":290,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":275,"org.easymock.tests.UsageExpectAndReturnTest.longType":5,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":213,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":332,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":56,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":80,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":194,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":54,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":123,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":106,"org.easymock.tests.UsageCallCountTest.tooManyCalls":276,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":31,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":10,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":43,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":75,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":239,"org.easymock.tests2.UsageConstraintsTest.testContains":184,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":330,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":252,"org.easymock.tests2.UsageConstraintsTest.testFind":175,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":69,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":237,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":266,"org.easymock.tests.UsageExpectAndReturnTest.object":12,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":156,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":221,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":285,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":324,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":339,"org.easymock.tests.UsageTest.exactCallCountByLastCall":94,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":78,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":388,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":27,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":18,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":281,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":102,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":318,"org.easymock.tests.MockClassControlTest.testHashCode":345,"org.easymock.tests2.EasyMockSupportTest.testVerify":305,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":28,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":101,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":88,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":370,"org.easymock.tests.UsageVarargTest.varargCharAccepted":284,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":302,"org.easymock.tests2.UsageTest.openCallCountByLastCall":231,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":224,"org.easymock.tests.DefaultClassInstantiatorTest.object":353,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":87,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":337,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":383,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":45,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":73,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":317,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":157,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":344,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":44,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":19,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":170,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":343,"org.easymock.tests2.UsageTest.resumeIfFailure":234,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":84,"org.easymock.tests2.StubTest.stubWithReturnValue":161,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":11,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":195,"org.easymock.tests2.SerializationTest.testAllMockedMethod":306,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":99,"org.easymock.samples.SupportTest.voteForRemovals":128,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":381,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":385,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":50,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":384,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":100,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":255,"org.easymock.tests.UsageExpectAndThrowTest.object":48,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":192,"org.easymock.tests2.DelegateToTest.testWrongClass":202,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":115,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":116,"org.easymock.samples.ConstructorCalledMockTest.testTax":126,"org.easymock.tests.UsageStrictMockTest.range":24,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":220,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":238,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":49,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":247,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":279,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":364,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":350,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":378,"org.easymock.tests2.CaptureTest.testCaptureNone":144,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":60,"org.easymock.tests.UsageUnorderedTest.message":105,"org.easymock.tests.UsageVerifyTest.twoReturns":113,"org.easymock.tests.UsageVarargTest.varargByteAccepted":289,"org.easymock.tests2.ThreadingTest.testThreadSafe":207,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":274,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":291,"org.easymock.tests2.CaptureTest.testCapture_2617107":138,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":36,"org.easymock.tests2.UsageConstraintsTest.any":182,"org.easymock.tests2.StubTest.stub":160,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":361,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":124,"org.easymock.tests.UsageExpectAndThrowTest.longType":41,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":83,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":360,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":303,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":212,"org.easymock.tests2.SerializationTest.testClass":225,"org.easymock.tests.LimitationsTest.mockNativeMethod":0,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":21,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":62,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":314,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":304,"org.easymock.tests2.NameTest.nameForMocksControl":300,"org.easymock.tests2.MockedExceptionTest.testMockedException":251,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":93,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":97,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":42,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":265,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":150,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":248,"org.easymock.tests.MockingTest.testNicePartialClassMocking":96,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":155,"org.easymock.tests2.CompareToTest.testNotComparable":261,"org.easymock.tests2.CaptureTest.testCaptureLast":143,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":312,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":322,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":32,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":179,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":244,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":193,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":2,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":46,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":309,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":197,"org.easymock.samples.ExampleTest.removeNonExistingDocument":367,"org.easymock.tests.UsageStrictMockTest.differentMethods":25,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":358,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":319,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":209,"org.easymock.tests2.MockBuilderTest.testCreateMockString":377,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":340,"org.easymock.tests.UsageExpectAndThrowTest.floatType":40,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":188,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":257,"org.easymock.tests.UsageVerifyTest.twoThrows":112,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":169,"org.easymock.samples.ExampleTest.voteAgainstRemoval":132,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":58,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":158,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":264,"org.easymock.tests2.UsageConstraintsTest.testNotNull":196,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":77,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":250,"org.easymock.tests2.UsageTest.defaultResetToNice":233,"org.easymock.samples.ExampleTest.voteAgainstRemovals":129,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":17,"org.easymock.tests.UsageVarargTest.differentLength":286,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":313,"org.easymock.tests2.CallbackTest.callback":135,"org.easymock.tests.UsageTest.openCallCountByLastCall":92,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":171,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":35,"org.easymock.tests.UsageCallCountTest.tooFewCalls":272,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":241,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":352,"org.easymock.tests.UsageThrowableTest.throwCheckedException":74,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":379,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":79,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":243,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":240,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":363,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":242,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":259,"org.easymock.tests.ObjectMethodsTest.testHashCode":338,"org.easymock.tests2.CompareToTest.testGreateOrEqual":382,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":326,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":211,"org.easymock.tests2.NameTest.nameForNiceMock":299,"org.easymock.tests2.DependencyTest.testInterfaceMocking":205,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":325,"org.easymock.samples.ExampleTest.addDocument":296,"org.easymock.tests2.DelegateToTest.testStubDelegate":201,"org.easymock.tests2.AnswerTest.stubAnswer":258,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":23,"org.easymock.tests.UsageVarargTest.varargLongAccepted":288,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":269,"org.easymock.tests.UsageExpectAndReturnTest.floatType":4,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":20,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":165,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":127,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":190,"org.easymock.tests.UsageThrowableTest.noUpperLimit":71,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":172,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":141,"org.easymock.tests2.SerializationTest.test":226,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":311,"org.easymock.tests2.UsageConstraintsTest.testSame":177,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":3,"org.easymock.samples.SupportTest.addDocument":295,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":359,"org.easymock.tests.GenericTest.testPackageScope":61,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":29,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":387,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":320,"org.easymock.tests2.NameTest.nameForMock":297,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":14,"org.easymock.tests2.UsageStrictMockTest.differentMethods":164,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":6,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":52,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":66,"org.easymock.tests2.MockedExceptionTest.testRealException":253,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":389,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":162,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":34,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":365,"org.easymock.tests2.NameTest.nameForStrictMock":298,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":236,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":154,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":191,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":245,"org.easymock.tests2.UsageStrictMockTest.range":163,"org.easymock.tests2.UsageConstraintsTest.lessThan":198,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":214,"org.easymock.tests2.CaptureTest.testCaptureRightOne":146,"org.easymock.tests2.UsageConstraintsTest.testOr":178,"org.easymock.tests.UsageRangeTest.combination":63,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":151,"org.easymock.tests.UsageTest.wrongArguments":278,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":341,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":7,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":15,"org.easymock.tests.UsageVarargTest.varargShortAccepted":287,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":331,"org.easymock.tests2.UsageConstraintsTest.cmpTo":183,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":256,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":232,"org.easymock.tests2.CaptureTest.testCaptureFromStub":147,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":355,"org.easymock.tests.UsageTest.unexpectedCallWithArray":348,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":22,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":273,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":260,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":16,"org.easymock.tests2.CaptureTest.testCapture":329,"org.easymock.tests2.UsageConstraintsTest.constraints":173,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":268,"org.easymock.samples.ExampleTest.addAndChangeDocument":134,"org.easymock.tests.UsageStrictMockTest.testVerify":270,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":293,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":267,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":333,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":142,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":119,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":8,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":120,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":104,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":219,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":282}}]

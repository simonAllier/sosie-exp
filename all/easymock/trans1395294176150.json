[{"position":"org.easymock.internal.RecordState:136","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,33,34,34],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:107","failures":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,33,33,34,34,140,141,142],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:53","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.And:39","sourceCode":"if (!(org.easymock.IArgumentMatcher.matches(java.lang.Object))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[143,144,145,146],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMockSupport:530","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[67,188,68,189],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:37","failures":[190,191,192,193,194,195,3,5,196,11,197,147,198,199,200,201,202,148,203,204,205,206,207,14,208,209,210,211,212,213,214,215,67,188,74,76,77,216,217,218,219,86,88,96,220,221,222,223,224,225,226,227,228,229,230,231,149,144,232,233,234,146,235,236,237,150,16,17,18,19,20,238,239,240,241,151,242,152,243,244,153,245,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,246,21,247,248,249,250,22,23,24,25,26,27,28,29,134,251,252,175,30,31,253,176,32,254,177,255,178,179,180,181,182,183,256,257,258,259,260,261,262,263,264,265,266,184,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,141,142],"status":-1,"binaryOperator":"(this.java.lang.Object) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[190,191,193,194,299,300,0,1,143,195,2,3,4,5,196,301,302,303,6,304,7,8,305,9,10,306,307,308,309,11,12,13,198,199,200,201,310,203,36,37,39,40,205,207,14,210,211,213,214,215,311,312,313,314,315,67,188,68,69,74,75,316,317,318,319,83,216,217,219,85,320,87,88,89,91,94,96,100,101,102,321,231,149,144,232,145,322,323,324,233,234,325,146,235,107,237,150,113,114,115,16,17,18,19,20,326,327,328,329,238,239,240,241,151,242,243,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,330,331,332,333,334,246,21,249,250,335,118,22,23,24,25,26,27,28,29,133,134,336,337,338,339,340,341,137,30,31,32,255,178,256,257,258,259,260,261,262,263,264,265,266,184,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,342,343,344,345,346,347,288,289,290,291,292,293,294],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:103","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"failures":[348],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.EasyMockProperties:62","failures":[349,190,191,192,350,193,194,299,351,300,0,1,143,195,352,2,3,4,5,196,301,348,302,303,6,304,7,8,305,9,10,306,307,308,353,309,11,12,13,354,355,356,357,358,197,359,360,361,362,363,364,147,198,199,365,200,201,202,148,310,366,367,203,204,35,36,37,38,368,369,39,40,370,371,372,205,206,373,207,14,208,209,210,211,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,374,375,376,377,378,379,212,380,381,382,383,384,385,213,386,387,214,215,311,388,312,313,314,315,67,188,68,69,71,72,73,74,75,76,77,389,78,79,80,82,316,317,318,319,83,84,390,391,392,393,394,216,395,217,218,396,219,85,86,320,87,88,89,90,397,91,92,93,94,95,96,97,98,99,100,101,102,321,220,221,222,223,224,225,226,398,227,228,229,230,399,103,400,401,104,402,403,231,149,144,232,145,322,404,323,324,233,234,325,146,15,405,235,105,106,107,108,406,407,408,409,410,109,236,237,150,110,111,112,113,114,411,115,412,413,116,16,17,18,19,20,326,327,328,329,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,238,239,240,241,151,242,436,152,243,437,438,244,153,439,440,245,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,330,331,332,333,334,441,442,443,444,246,445,21,247,248,249,250,335,117,118,119,120,121,122,123,124,22,23,24,25,26,446,447,448,27,28,125,126,127,128,129,130,131,29,449,450,451,452,174,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,132,133,134,135,136,473,474,336,337,338,339,340,251,475,252,175,476,341,477,137,478,479,480,481,482,483,484,485,486,487,488,489,30,31,253,176,32,254,138,490,491,492,493,139,494,495,177,255,178,179,180,181,182,183,496,497,498,256,257,258,499,259,260,500,261,262,263,264,265,266,184,267,185,186,187,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,501,342,343,344,345,346,347,502,503,504,505,506,507,508,509,288,289,290,291,292,293,510,294,33,34,295,140,296,297,298,141,142],"status":-1,"binaryOperator":"java.io.InputStream != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1163","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:30","sourceCode":"new java.util.HashMap<java.lang.String, java.lang.Class<?>>(10)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.And:49","sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[511],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[349,190,191,192,350,193,194,299,351,300,0,1,143,195,352,2,3,4,5,196,301,348,302,303,6,304,7,8,305,9,10,306,307,308,353,309,11,12,13,354,355,356,357,358,197,359,360,361,362,363,364,147,198,199,365,200,201,202,148,310,366,367,203,204,35,36,37,38,368,369,39,40,370,371,372,205,206,373,207,14,208,209,210,211,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,374,375,376,377,378,379,212,380,381,382,383,384,385,213,386,387,214,215,311,388,312,313,314,315,67,188,68,69,512,71,72,511,73,74,75,76,513,77,389,78,79,80,514,82,316,317,318,319,83,84,515,216,217,218,396,219,85,86,320,87,88,89,90,397,91,92,93,94,95,96,97,98,99,100,101,102,321,220,221,222,223,224,225,226,398,227,228,229,230,399,103,400,401,516,104,402,403,231,149,144,232,145,322,404,323,324,233,234,325,146,15,405,235,105,106,107,108,406,407,408,409,410,109,236,237,150,110,111,112,113,114,411,115,412,413,116,16,17,18,19,20,326,327,328,329,238,239,240,241,151,242,436,152,243,437,438,244,153,439,440,245,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,330,331,332,333,334,441,442,443,444,246,445,21,247,248,249,250,335,117,118,119,120,121,122,123,124,22,23,24,25,26,446,447,448,27,28,517,125,126,127,128,129,130,518,131,29,449,519,450,451,452,174,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,132,133,134,135,136,473,474,336,337,338,339,340,251,475,252,175,476,341,477,137,478,479,480,481,482,483,484,485,486,487,488,489,30,31,253,176,32,254,138,490,491,492,493,139,494,495,177,255,178,179,180,181,182,183,496,497,498,256,257,258,499,259,260,500,261,262,263,264,265,266,184,267,185,186,187,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,501,342,343,344,345,346,347,502,503,504,505,506,507,508,509,288,289,290,291,292,293,510,294,33,34,295,140,296,297,298,141,142],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[471],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:573","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:85","sourceCode":"return ((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))","type":"CtReturnImpl"},"failures":[190,191,192,193,194,299,300,0,1,143,195,2,3,4,5,196,301,302,303,6,304,7,8,305,9,10,306,307,308,353,309,11,12,13,197,147,198,199,200,201,202,148,203,204,35,36,37,38,369,39,40,205,206,207,14,208,209,210,211,44,47,57,63,212,213,214,215,311,67,188,68,74,76,77,83,216,217,218,396,219,85,86,320,87,88,89,91,96,100,101,102,321,220,221,222,223,224,225,226,227,228,229,230,399,231,149,144,232,145,322,404,323,324,233,234,325,146,15,405,235,107,236,237,150,113,114,115,16,17,18,19,20,238,239,240,241,151,242,152,243,244,153,245,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,246,21,247,248,249,250,22,23,24,25,26,27,28,29,449,133,134,337,339,340,251,252,175,137,30,31,253,176,32,254,177,255,178,179,180,181,182,183,256,257,258,259,260,261,262,263,264,265,266,184,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,344,345,346,347,503,504,288,289,290,291,292,293,294,33,34,295,140,296,297,298,141,142],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:108","sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"failures":[67,188,68],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"failures":[520],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:209","sourceCode":"if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[132,136],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[194,143,305,147,365,200,201,366,367,203,204,373,208,209,210,71,79,80,82,86,95,97,221,225,226,228,521,522,152,437,438,439,440,245,444,445,247,248,249,523,519,337,254,500,184,267,502,503,504],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ClassProxyFactory:230","failures":[],"status":0,"binaryOperator":"(((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:56","sourceCode":"if (int > int) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:193","sourceCode":"if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[524,525,526,527,528,513,84],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"currentPosition":"i","callCount":"i"}},{"position":"org.easymock.EasyMock:946","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[447,497,501],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"answer":"answer"}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,149,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,450,453,454,463,468,30,31,32,501,33,33,34,34],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[94],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:92","sourceCode":"for (final org.easymock.internal.Range org.easymock.internal.Range : java.util.LinkedList<org.easymock.internal.Range>) {\n    int += org.easymock.internal.Range.getMinimum();\n    if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n        int = java.lang.Integer.int;\n    } else {\n        int += org.easymock.internal.Range.getMaximum();\n    }\n}","type":"CtForEachImpl"},"failures":[190,191,193,194,299,300,0,1,143,195,2,3,4,5,196,301,302,303,6,304,7,8,305,9,10,306,307,308,309,11,12,13,197,147,198,199,365,200,201,366,367,203,204,35,36,37,38,369,39,40,205,206,373,207,14,208,209,210,211,44,47,57,63,212,213,214,215,311,312,313,314,315,67,188,68,71,74,76,77,80,83,216,217,219,85,86,320,87,88,89,91,95,96,97,102,220,221,222,223,224,225,226,227,228,229,230,399,231,149,144,232,145,322,323,324,233,234,325,146,235,107,237,150,113,114,115,16,17,18,19,20,151,152,243,438,439,440,245,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,444,246,445,21,247,248,249,250,27,28,29,133,134,337,338,339,340,341,137,30,31,253,176,32,254,255,178,256,257,258,259,260,500,261,262,263,264,265,266,184,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,342,344,345,346,347,503,504,288,289,290,291,292,293,294,295,140,296,297,298,141,142],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"java.lang.Integer.MAX_VALUE":"min"}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[194,143,305,147,365,200,201,366,367,203,204,373,208,209,210,71,79,80,82,86,95,97,221,225,226,228,521,522,152,437,438,439,440,245,444,445,247,248,249,523,519,337,254,500,184,267,502,503,504],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[529,530,531,532,437,445],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[299,300,0,1,143,195,2,3,4,5,196,301,348,302,303,6,304,7,8,305,9,10,306,307,308,353,309,11,12,13,14,396,91,144,232,145,322,404,323,324,233,234,325,146,15,405,235,16,17,18,19,20,151,445,21,27,28,29,449,30,31,253,176,32,254,265],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:327","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:52","sourceCode":"return org.easymock.internal.MocksControl","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:256","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[97],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1013","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Null:39","sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[199,365,366,367,529,533,530,534,531,532,535,243,437,438,439,440,445],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[365,366,367,209,522,437,438,439,440,445,248,254,184,267],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:201","sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = (java.util.Set<java.lang.reflect.Method>) == null ? new java.lang.reflect.Method[0] : java.util.Set<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.Set<java.lang.reflect.Method>.size()])","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:141","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":195,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":152,"org.easymock.tests2.UsageTest.argumentsOrdered":367,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":229,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":359,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":459,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":201,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":295,"org.easymock.tests2.DelegateToTest.testReturnException":190,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":239,"org.easymock.tests.MockingTest.testPartialClassMocking":113,"org.easymock.tests.MockClassControlTest.testToString":119,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":388,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":497,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":468,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":51,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":154,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":47,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":206,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":435,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":524,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":301,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":30,"org.easymock.tests2.UsageTest.wrongArguments":365,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":385,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":328,"org.easymock.samples.ExampleTest.answerVsDelegate":289,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":139,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":413,"org.easymock.tests2.UsageConstraintsTest.testNull":3,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":87,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":124,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":228,"org.easymock.tests2.CaptureTest.testPrimitive":322,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":32,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":173,"org.easymock.tests.UsageTest.moreThanOneArgument":243,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":320,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":24,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":505,"org.easymock.tests.UsageTest.argumentsOrdered":440,"org.easymock.tests.UsageVarargTest.varargIntAccepted":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":464,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":16,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":528,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":69,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":401,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":363,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":75,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":452,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":20,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":419,"org.easymock.tests.ReplayStateInvalidUsageTest.times":486,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":212,"org.easymock.tests2.DependencyTest.testClassMocking":371,"org.easymock.tests2.AnswerTest.answer":213,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":348,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":466,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":319,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":491,"org.easymock.tests2.CaptureTest.testAnd":144,"org.easymock.tests2.UsageTest.strictResetToDefault":198,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":511,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":94,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":23,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":224,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":339,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":509,"org.easymock.tests2.DelegateToTest.testDelegate":193,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":418,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":169,"org.easymock.tests.LimitationsTest.mockFinalMethod":108,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":151,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":334,"org.easymock.tests2.DependencyTest.testClassMockingSupport":372,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":473,"org.easymock.tests2.CaptureTest.testCapture1_2446744":404,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":397,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":167,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":317,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":480,"org.easymock.tests.UsageThrowableTest.throwError":177,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":493,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":519,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":364,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":26,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":65,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":422,"org.easymock.samples.PartialClassMockTest.testGetArea":140,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":481,"org.easymock.tests.MockingTest.testInterfaceMocking":411,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":17,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":447,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":155,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":109,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":52,"org.easymock.tests2.UsageTest.niceToStrict":200,"org.easymock.tests2.ThreadingTest.testChangeDefault":395,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":450,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":74,"org.easymock.tests2.MockBuilderTest.testCreateMock":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":60,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":382,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":529,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":163,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":225,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":490,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":187,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":342,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":326,"org.easymock.tests.UsageOverloadedMethodTest.overloading":237,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":62,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":175,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":7,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":236,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":279,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":304,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":325,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":499,"org.easymock.tests.MockClassControlTest.testEquals":123,"org.easymock.tests2.EasyMockSupportClassTest.testAll":44,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":134,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":533,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":171,"org.easymock.tests2.CaptureTest.testCaptureAll":232,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":318,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":332,"org.easymock.tests.MockNameTest.defaultName":436,"org.easymock.tests2.UsageConstraintsTest.testMatches":8,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":478,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":25,"org.easymock.samples.ExampleTest.voteForRemovals":293,"org.easymock.tests.UsageVarargTest.allKinds":265,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":266,"org.easymock.samples.BasicClassMockTest.testPrintContent":142,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":333,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":182,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":373,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":242,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":350,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":360,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":518,"org.easymock.tests2.UsageConstraintsTest.greaterThan":9,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":45,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":338,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":97,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":423,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":131,"org.easymock.samples.ExampleTest.voteForRemoval":290,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":98,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":217,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":494,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":516,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":90,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":415,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":147,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":137,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":78,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":456,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":222,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":42,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":238,"org.easymock.tests2.CaptureTest.testCaptureFirst":235,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":349,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":455,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":223,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":204,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":477,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":275,"org.easymock.tests2.CaptureTest.testCapture2_2446744":405,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":396,"org.easymock.tests2.UsageTest.moreThanOneArgument":199,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":467,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":80,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":264,"org.easymock.tests.GenericTest.testBridgedEquals":136,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":503,"org.easymock.tests.UsageExpectAndReturnTest.longType":271,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":220,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":330,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":172,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":81,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":501,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":353,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":170,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":442,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":22,"org.easymock.tests.UsageCallCountTest.tooManyCalls":504,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":61,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":276,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":384,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":159,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":181,"org.easymock.tests.MockingTest.testNiceClassMocking":116,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":36,"org.easymock.tests.MockingTest.testClassMocking":111,"org.easymock.tests2.UsageConstraintsTest.testContains":6,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":70,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":343,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":102,"org.easymock.tests2.UsageConstraintsTest.testFind":2,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":150,"org.easymock.tests.MockTypeTest.fromEasyMockClass":492,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":444,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":300,"org.easymock.tests.UsageExpectAndReturnTest.object":278,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":91,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":383,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":227,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":525,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":260,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":409,"org.easymock.tests.UsageTest.exactCallCountByLastCall":245,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":29,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":454,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":506,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":496,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":535,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":84,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":256,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":284,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":252,"org.easymock.tests.MockClassControlTest.testHashCode":122,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":355,"org.easymock.tests2.EasyMockSupportTest.testVerify":399,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":54,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":507,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":186,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":251,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":521,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":316,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":374,"org.easymock.tests.UsageVarargTest.varargCharAccepted":259,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":517,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":207,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":472,"org.easymock.tests2.UsageTest.openCallCountByLastCall":202,"org.easymock.tests.DefaultClassInstantiatorTest.object":125,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":230,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":185,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":407,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":522,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":55,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":179,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":378,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":354,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":421,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":121,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":95,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":160,"org.easymock.tests.ReplayStateInvalidCallsTest.times":427,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":285,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":441,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":428,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":120,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":63,"org.easymock.tests2.UsageTest.resumeIfFailure":203,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":138,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":400,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":241,"org.easymock.tests2.StubTest.stubWithReturnValue":149,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":513,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":277,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":309,"org.easymock.tests2.SerializationTest.testAllMockedMethod":68,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":465,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":530,"org.easymock.samples.SupportTest.voteForRemovals":298,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":132,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":357,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":166,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":189,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":471,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":386,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":498,"org.easymock.tests.UsageExpectAndThrowTest.object":164,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":307,"org.easymock.tests2.DelegateToTest.testWrongClass":192,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":425,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":27,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":28,"org.easymock.samples.ConstructorCalledMockTest.testTax":33,"org.easymock.tests.UsageStrictMockTest.range":248,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":402,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":398,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":35,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":165,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":76,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":488,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":439,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":41,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":327,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":531,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":417,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":448,"org.easymock.tests2.CaptureTest.testCaptureNone":234,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":391,"org.easymock.tests.UsageUnorderedTest.message":254,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":523,"org.easymock.tests.UsageVerifyTest.twoReturns":267,"org.easymock.tests.UsageVarargTest.varargByteAccepted":263,"org.easymock.tests2.ThreadingTest.testThreadSafe":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":58,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":347,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":410,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":141,"org.easymock.tests2.CaptureTest.testCapture_2617107":145,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":534,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":336,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":469,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":176,"org.easymock.tests2.UsageConstraintsTest.any":302,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":485,"org.easymock.tests2.StubTest.stub":231,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":443,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":470,"org.easymock.tests.UsageExpectAndThrowTest.longType":157,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":240,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":129,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":484,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":208,"org.easymock.tests2.SerializationTest.testClass":67,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":197,"org.easymock.tests.LimitationsTest.mockNativeMethod":107,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":135,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":287,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":377,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":433,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":211,"org.easymock.tests2.NameTest.nameForMocksControl":315,"org.easymock.tests2.MockedExceptionTest.testMockedException":101,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":379,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":46,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":153,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":158,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":115,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":351,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":85,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":77,"org.easymock.tests.MockingTest.testNicePartialClassMocking":114,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":89,"org.easymock.tests2.CaptureTest.testCaptureLast":233,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":375,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":474,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":432,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":40,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":196,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":308,"org.easymock.tests.MockingTest.testTwoMocks":112,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":429,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":370,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":268,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":162,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":366,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":12,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":394,"org.easymock.samples.ExampleTest.removeNonExistingDocument":510,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":482,"org.easymock.tests.UsageStrictMockTest.differentMethods":249,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":381,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":356,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":393,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":127,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":218,"org.easymock.tests2.MockBuilderTest.testCreateMockString":82,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":117,"org.easymock.tests.UsageExpectAndThrowTest.floatType":156,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":48,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":305,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":43,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":214,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":515,"org.easymock.tests.UsageVerifyTest.twoThrows":184,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":475,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":57,"org.easymock.samples.ExampleTest.voteAgainstRemoval":291,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":460,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":446,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":96,"org.easymock.tests.LimitationsTest.privateConstructor":106,"org.easymock.tests2.UsageConstraintsTest.testNotNull":11,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":183,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":100,"org.easymock.tests2.UsageTest.defaultResetToNice":310,"org.easymock.samples.ExampleTest.voteAgainstRemovals":288,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":461,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":283,"org.easymock.tests.UsageVarargTest.differentLength":500,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":376,"org.easymock.tests2.CallbackTest.callback":194,"org.easymock.tests2.UsageConstraintsTest.equals":352,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":92,"org.easymock.tests.UsageTest.openCallCountByLastCall":244,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":0,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":253,"org.easymock.tests.UsageCallCountTest.tooFewCalls":345,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":38,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":329,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":392,"org.easymock.tests.UsageThrowableTest.throwCheckedException":180,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":532,"org.easymock.tests.MockingTest.testStrictClassMocking":110,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":449,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":39,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":37,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":380,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":487,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":369,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":311,"org.easymock.tests.ObjectMethodsTest.testHashCode":408,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":527,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":431,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":219,"org.easymock.tests2.NameTest.nameForNiceMock":314,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":426,"org.easymock.tests2.DependencyTest.testInterfaceMocking":205,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":526,"org.easymock.samples.ExampleTest.addDocument":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":59,"org.easymock.tests2.DelegateToTest.testStubDelegate":191,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":64,"org.easymock.tests2.AnswerTest.stubAnswer":215,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":21,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":389,"org.easymock.tests.UsageVarargTest.varargLongAccepted":262,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":250,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":458,"org.easymock.tests.UsageExpectAndReturnTest.floatType":270,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":286,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":83,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":34,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":476,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":10,"org.easymock.tests.UsageThrowableTest.noUpperLimit":255,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":362,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":1,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":103,"org.easymock.tests2.SerializationTest.test":188,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":323,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":126,"org.easymock.tests2.UsageConstraintsTest.testSame":4,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":269,"org.easymock.samples.SupportTest.addDocument":297,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":368,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":416,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":483,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":49,"org.easymock.tests.GenericTest.testPackageScope":133,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":508,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":453,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":361,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":412,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":414,"org.easymock.tests2.NameTest.nameForMock":312,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":280,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":514,"org.easymock.tests2.UsageStrictMockTest.differentMethods":210,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":93,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":272,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":168,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":406,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":340,"org.easymock.tests2.MockedExceptionTest.testRealException":321,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":495,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":463,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":403,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":462,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":14,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":489,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":31,"org.easymock.tests2.NameTest.nameForStrictMock":313,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":73,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":299,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":88,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":104,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":128,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":306,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":71,"org.easymock.tests2.UsageStrictMockTest.range":209,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":420,"org.easymock.tests2.UsageConstraintsTest.lessThan":13,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":358,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":457,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":221,"org.easymock.tests2.CaptureTest.testCaptureRightOne":146,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":53,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":390,"org.easymock.tests2.UsageConstraintsTest.testOr":5,"org.easymock.tests.UsageRangeTest.combination":337,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":86,"org.easymock.tests.UsageTest.wrongArguments":438,"org.easymock.tests2.MockBuilderTest.testWithConstructor":512,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":50,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":118,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":273,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":451,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":281,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":130,"org.easymock.tests.UsageVarargTest.varargShortAccepted":261,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":502,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":434,"org.easymock.tests2.UsageConstraintsTest.cmpTo":303,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":387,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":424,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":174,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":148,"org.easymock.tests2.CaptureTest.testCaptureFromStub":15,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":479,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":72,"org.easymock.tests.UsageTest.unexpectedCallWithArray":437,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":430,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":445,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":346,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":282,"org.easymock.tests2.UsageConstraintsTest.constraints":143,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":247,"org.easymock.samples.ExampleTest.addAndChangeDocument":294,"org.easymock.tests.UsageStrictMockTest.testVerify":335,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":296,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":246,"org.easymock.tests2.CompareToTest.testGreateThan":520,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":331,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":324,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":18,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":66,"org.easymock.tests.LimitationsTest.abstractClass":105,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":274,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":19,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":341,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":226,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":257}}]

[{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[0,1],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:66","sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[3,4],"status":-1,"binaryOperator":"int < 0","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:54","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"failures":[22],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.UnorderedBehavior:44","sourceCode":"final org.easymock.internal.Results org.easymock.internal.Results = new org.easymock.internal.Results()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:582","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[23,24],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidClassProxyFactory:57","sourceCode":"java.io.IOException java.io.IOException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1249","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[25,26,27,28,29,30,31,32,33],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[34,35],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[36,37,38,39,40,41,42,43,16,44,45,46,47,18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:305","sourceCode":"return ((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","type":"CtReturnImpl"},"failures":[48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,25,66,67,68,69,70,71,72,73,74,75,76,36,77,37,38,78,79,80,5,6,81,82,83,84,85,7,8,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,22,107,108,109,110,23,111,112,113,114,115,116,1,117,118,119,120,121,122,123,124,4,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,34,35,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,39,170,40,171,41,172,173,174,43,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,16,44,233,45,46,234,47,235,17,19,236,237,20,21,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,24,283,284,285,286,287,288],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[289,290,291],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMockSupport:530","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:172","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[152,153,292],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"failures":[293,294,295,296,297,298,299,300,292,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Contains:40","failures":[325],"status":-1,"binaryOperator":"((\"contains(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:224","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1361","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:184","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[326],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"failures":[2],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[88,90,98,103,104,106,107,108,110,118,123],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:281","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"transplantationPoint":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"failures":[327],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[289,290,291],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:80","failures":[57,25,328,329,129,330,130,331,131,132,332,133,333,334,335,336,337,338,339],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[37,6,7,8,340,341,16,45,18,19,20,21,246,281,282],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:583","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:161","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":104,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":235,"org.easymock.tests2.UsageTest.argumentsOrdered":8,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":166,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":82,"org.easymock.tests2.StubTest.stubWithReturnValue":72,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":31,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":263,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":61,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":122,"org.easymock.tests2.SerializationTest.testAllMockedMethod":67,"org.easymock.tests2.DelegateToTest.testReturnException":62,"org.easymock.tests.MockingTest.testPartialClassMocking":284,"org.easymock.samples.SupportTest.voteForRemovals":59,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":11,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":2,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":207,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":195,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":126,"org.easymock.tests.UsageExpectAndThrowTest.object":205,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":69,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":119,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":324,"org.easymock.tests2.DelegateToTest.testWrongClass":64,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":26,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":314,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":287,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":288,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":109,"org.easymock.tests2.UsageTest.wrongArguments":6,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":179,"org.easymock.tests.UsageStrictMockTest.range":45,"org.easymock.samples.ExampleTest.answerVsDelegate":49,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":163,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":339,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":140,"org.easymock.tests2.UsageConstraintsTest.testNull":106,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":206,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":40,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":131,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":165,"org.easymock.tests2.CaptureTest.testPrimitive":91,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":183,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":301,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":214,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":20,"org.easymock.tests.UsageTest.moreThanOneArgument":17,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":170,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":13,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":306,"org.easymock.tests2.CaptureTest.testCaptureNone":96,"org.easymock.tests.UsageUnorderedTest.message":246,"org.easymock.tests.UsageVerifyTest.twoReturns":282,"org.easymock.tests.UsageVarargTest.varargByteAccepted":223,"org.easymock.tests2.ThreadingTest.testThreadSafe":151,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":226,"org.easymock.tests.UsageTest.argumentsOrdered":21,"org.easymock.tests.UsageVarargTest.varargIntAccepted":217,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":243,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":55,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":274,"org.easymock.tests2.CaptureTest.testCapture_2617107":90,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":12,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":328,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":30,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":182,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":331,"org.easymock.tests2.UsageConstraintsTest.any":23,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":299,"org.easymock.tests2.StubTest.stub":71,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":278,"org.easymock.tests.UsageExpectAndThrowTest.longType":198,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":308,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":298,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":77,"org.easymock.tests2.SerializationTest.testClass":25,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":134,"org.easymock.tests.ReplayStateInvalidUsageTest.times":300,"org.easymock.tests.LimitationsTest.mockNativeMethod":279,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":70,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":337,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":273,"org.easymock.tests2.AnswerTest.answer":147,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":110,"org.easymock.tests2.CaptureTest.testAnd":88,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":322,"org.easymock.tests2.UsageTest.strictResetToDefault":80,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":78,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":42,"org.easymock.tests2.NameTest.nameForMocksControl":139,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":252,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":160,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":237,"org.easymock.tests2.DelegateToTest.testDelegate":65,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":286,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":199,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":169,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":307,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":132,"org.easymock.tests.MockingTest.testNicePartialClassMocking":285,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":210,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":41,"org.easymock.tests2.CaptureTest.testCaptureLast":95,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":194,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":321,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":108,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":146,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":120,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":318,"org.easymock.tests2.CaptureTest.testCapture1_2446744":92,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":254,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":208,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":203,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":7,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":124,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":295,"org.easymock.tests.UsageThrowableTest.throwError":185,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":297,"org.easymock.tests.UsageStrictMockTest.differentMethods":46,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":153,"org.easymock.tests2.MockBuilderTest.testCreateMockString":335,"org.easymock.tests.UsageExpectAndThrowTest.floatType":197,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":116,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":148,"org.easymock.tests.UsageVerifyTest.twoThrows":281,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":311,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":127,"org.easymock.samples.PartialClassMockTest.testGetArea":57,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":296,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":275,"org.easymock.samples.ExampleTest.voteAgainstRemoval":51,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":174,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":196,"org.easymock.tests2.UsageTest.niceToStrict":81,"org.easymock.tests2.UsageConstraintsTest.testNotNull":123,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":192,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":289,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":130,"org.easymock.tests2.MockBuilderTest.testCreateMock":332,"org.easymock.tests2.UsageTest.defaultResetToNice":85,"org.easymock.samples.ExampleTest.voteAgainstRemovals":48,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":269,"org.easymock.tests.UsageVarargTest.differentLength":220,"org.easymock.tests2.CallbackTest.callback":150,"org.easymock.tests.UsageTest.openCallCountByLastCall":236,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":204,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":9,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":161,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":101,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":239,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":181,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":184,"org.easymock.tests.UsageCallCountTest.tooFewCalls":241,"org.easymock.tests.UsageOverloadedMethodTest.overloading":248,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":114,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":177,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":265,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":247,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":143,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":113,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":97,"org.easymock.tests.UsageThrowableTest.throwCheckedException":189,"org.easymock.tests2.EasyMockSupportClassTest.testAll":125,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":230,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":212,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":14,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":10,"org.easymock.tests2.CaptureTest.testCaptureAll":89,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":283,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":145,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":142,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":292,"org.easymock.tests2.UsageConstraintsTest.testMatches":115,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":144,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":35,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":293,"org.easymock.samples.ExampleTest.voteForRemovals":53,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":29,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":320,"org.easymock.tests2.NameTest.nameForNiceMock":138,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":155,"org.easymock.tests.UsageVarargTest.allKinds":225,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":315,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":280,"org.easymock.tests2.DependencyTest.testInterfaceMocking":68,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":28,"org.easymock.samples.BasicClassMockTest.testPrintContent":56,"org.easymock.samples.ExampleTest.addDocument":52,"org.easymock.tests2.DelegateToTest.testStubDelegate":63,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":191,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":75,"org.easymock.tests2.AnswerTest.stubAnswer":34,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":44,"org.easymock.tests2.UsageConstraintsTest.greaterThan":1,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":251,"org.easymock.tests.UsageVarargTest.varargLongAccepted":222,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":43,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":312,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":234,"org.easymock.samples.ExampleTest.voteForRemoval":50,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":152,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":272,"org.easymock.tests.UsageExpectAndReturnTest.floatType":256,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":333,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":336,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":149,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":304,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":117,"org.easymock.tests.UsageThrowableTest.noUpperLimit":186,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":193,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":79,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":102,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":93,"org.easymock.tests2.SerializationTest.test":66,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":32,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":158,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":187,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":255,"org.easymock.tests2.UsageConstraintsTest.testSame":22,"org.easymock.samples.SupportTest.addDocument":58,"org.easymock.tests2.CaptureTest.testCaptureFirst":100,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":159,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":305,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":87,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":340,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":261,"org.easymock.tests.GenericTest.testPackageScope":229,"org.easymock.tests2.UsageTest.moreThanOneArgument":5,"org.easymock.tests2.CaptureTest.testCapture2_2446744":99,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":154,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":133,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":224,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":303,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":244,"org.easymock.tests2.NameTest.nameForMock":136,"org.easymock.tests.UsageExpectAndReturnTest.longType":257,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":156,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":334,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":266,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":213,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":121,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":211,"org.easymock.tests2.UsageStrictMockTest.differentMethods":38,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":258,"org.easymock.tests.UsageCallCountTest.tooManyCalls":245,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":209,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":253,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":240,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":262,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":200,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":36,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":302,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":180,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":190,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":141,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":329,"org.easymock.tests2.UsageConstraintsTest.testContains":112,"org.easymock.tests2.NameTest.nameForStrictMock":137,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":135,"org.easymock.tests2.UsageConstraintsTest.testFind":105,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":249,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":326,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":291,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":73,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":171,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":231,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":74,"org.easymock.tests.UsageExpectAndReturnTest.object":264,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":118,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":172,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":129,"org.easymock.tests2.UsageStrictMockTest.range":37,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":309,"org.easymock.tests2.UsageConstraintsTest.lessThan":4,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":164,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":219,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":27,"org.easymock.tests.UsageTest.exactCallCountByLastCall":238,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":24,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":157,"org.easymock.tests2.CaptureTest.testCaptureRightOne":98,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":227,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":15,"org.easymock.tests2.UsageConstraintsTest.testOr":107,"org.easymock.tests.UsageRangeTest.combination":250,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":33,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":270,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":215,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":39,"org.easymock.tests.UsageTest.wrongArguments":19,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":176,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":259,"org.easymock.tests2.EasyMockSupportTest.testVerify":168,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":267,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":228,"org.easymock.tests.UsageVarargTest.varargShortAccepted":221,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":175,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":323,"org.easymock.tests2.UsageConstraintsTest.cmpTo":111,"org.easymock.tests.UsageVarargTest.varargCharAccepted":218,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":313,"org.easymock.tests2.CompareToTest.testLessThan":3,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":76,"org.easymock.tests2.UsageTest.openCallCountByLastCall":83,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":84,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":290,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":167,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":294,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":330,"org.easymock.tests.UsageTest.unexpectedCallWithArray":18,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":341,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":319,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":202,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":16,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":188,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":242,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":268,"org.easymock.tests2.CaptureTest.testCapture":327,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":310,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":233,"org.easymock.tests2.UsageConstraintsTest.constraints":103,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":173,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":201,"org.easymock.samples.ExampleTest.addAndChangeDocument":54,"org.easymock.tests2.ConstraintsToStringTest.containsToString":325,"org.easymock.tests.ReplayStateInvalidCallsTest.times":316,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":271,"org.easymock.tests.UsageStrictMockTest.testVerify":47,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":60,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":317,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":128,"org.easymock.tests2.CompareToTest.testGreateThan":0,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":94,"org.easymock.tests2.UsageTest.resumeIfFailure":86,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":276,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":338,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":260,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":277,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":178,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":216,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":162}}]

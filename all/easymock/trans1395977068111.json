[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)))","position":"org.easymock.internal.ClassProxyFactory:227","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","position":"org.easymock.EasyMock:2066","type":"CtForEachImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.Result:46","type":"CtThrowImpl"},"status":-1},{"failures":[48,49],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:101","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:215","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:154","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(((\"contains(\\\"\" + (java.lang.String)) + \"\\\")\"))","position":"org.easymock.internal.matchers.Contains:40","type":"CtInvocationImpl"},"status":-2},{"failures":[50,51],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","position":"org.easymock.internal.Results:40","type":"CtThrowImpl"},"status":-1},{"failures":[],"binaryOperator":"(\"\" + (org.easymock.internal.Invocation.getArguments().int))","name":"math","position":"org.easymock.internal.ExpectedInvocation:48","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:112","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"controls":"controls"},"name":"add","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : this.java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToDefault();\n}","position":"org.easymock.EasyMockSupport:583","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToNice();\n}","position":"org.easymock.EasyMockSupport:572","type":"CtForEachImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.Injection org.easymock.internal.Injection = org.easymock.internal.Injector.org.easymock.internal.Injector.findUniqueAssignable(java.util.List<org.easymock.internal.Injection>, org.easymock.internal.InjectionTarget)","position":"org.easymock.internal.Injector:188","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.ExpectedInvocation:98","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(double))","position":"org.easymock.EasyMock:1506","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return \"codegen.\" + (net.sf.cglib.core.DefaultNamingPolicy.getClassName(java.lang.String, java.lang.String, java.lang.Object, net.sf.cglib.core.Predicate))","position":"org.easymock.internal.ClassProxyFactory:149","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1688","type":"CtReturnImpl"},"status":-2},{"failures":[52],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"Answer throwing \" + java.lang.Throwable","position":"org.easymock.internal.Result:51","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return true;\n} ","position":"org.easymock.internal.Results:52","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Constructor<?>.getModifiers())) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:175","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","position":"org.easymock.internal.ObjectMethodsFilter:56","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Float.java.lang.Class<java.lang.Float>, java.lang.Float.java.lang.Float)","position":"org.easymock.internal.RecordState:64","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.MockBuilder:153","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:269","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:122","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:193","type":"CtIfImpl"},"status":-2},{"failures":[53,54,1,55,56],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1277","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:185","type":"CtAssignmentImpl"},"status":-2},{"failures":[57,58],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.matchers.And:50","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.And:49","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:279","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException)","position":"org.easymock.internal.DefaultClassInstantiator:45","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:200","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:116","type":"CtLocalVariableImpl"},"status":-2},{"failures":[59],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.IMocksControl.reset()","position":"org.easymock.EasyMockSupport:552","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.resetToNice()","position":"org.easymock.EasyMockSupport:573","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ","position":"org.easymock.internal.RecordState:218","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += 1","position":"org.easymock.internal.Results:68","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[60],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1162","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"status":-1},{"failures":[61],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1290","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"clazz":"parameterType"},"name":"add","transplant":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","position":"org.easymock.internal.ReflectionUtils:188","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-9054190871232972342L","position":"org.easymock.internal.ClassProxyFactory:53","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"]\")","position":"org.easymock.internal.ArgumentToString:52","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.io.IOException java.io.IOException","position":"org.easymock.internal.EasyMockProperties:66","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:411","type":"CtLocalVariableImpl"},"status":-2},{"failures":[62,63,64],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (final org.easymock.internal.matchers.Captures<?> org.easymock.internal.matchers.Captures<?> : java.util.Collection<org.easymock.internal.matchers.Captures<?>>) {\n    org.easymock.internal.matchers.Captures<?>.validateCapture();\n}","position":"org.easymock.internal.Invocation:167","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.matchers.Captures<?> org.easymock.internal.matchers.Captures<?> : java.util.Collection<org.easymock.internal.matchers.Captures<?>>) {\n    org.easymock.internal.matchers.Captures<?>.setPotentialValue(null);\n}","position":"org.easymock.internal.Invocation:173","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","position":"org.easymock.internal.RecordState:86","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:288","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","position":"org.easymock.internal.MocksControl:343","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","position":"org.easymock.internal.RecordState:161","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<java.lang.reflect.Method>.size()) == 1) {\n    java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0);\n} else {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method);\n}","position":"org.easymock.internal.BridgeMethodResolver:87","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long)","position":"org.easymock.internal.RecordState:63","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:813","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","position":"org.easymock.internal.ArgumentToString:39","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object) == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.add(new org.easymock.internal.ExpectedInvocationAndResults(org.easymock.internal.ExpectedInvocation , org.easymock.internal.Results))","position":"org.easymock.internal.UnorderedBehavior:46","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","position":"org.easymock.internal.MocksControl:190","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Object java.lang.Object","position":"org.easymock.internal.Injector:72","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","position":"org.easymock.internal.MocksControl:88","type":"CtReturnImpl"},"status":-2},{"failures":[65,66,67,68],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"org.easymock.internal.Injector:207","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Field","position":"org.easymock.internal.InjectionTarget:73","type":"CtReturnImpl"},"status":-1},{"failures":[69],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"or(\")","position":"org.easymock.internal.matchers.Or:47","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IArgumentMatcher.appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Not:41","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.MocksControl:361","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException)","position":"org.easymock.internal.ClassProxyFactory:214","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(double , double))","position":"org.easymock.EasyMock:1831","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:109","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ((java.lang.Class<?>.getSimpleName()) + \".\") + java.lang.String","position":"org.easymock.internal.Invocation:158","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:434","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setNamingPolicy(org.easymock.internal.ClassProxyFactory.net.sf.cglib.core.NamingPolicy)","position":"org.easymock.internal.ClassProxyFactory:274","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"java.lang.Float.TYPE":"java.lang.Float.TYPE","number":"number","java.lang.Double.TYPE":"java.lang.Double.TYPE","returnType":"returnType","java.lang.Long.TYPE":"java.lang.Long.TYPE"},"name":"add","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(this.java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(this.java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(this.java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:200","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:196","type":"CtIfImpl"},"status":-2},{"failures":[70],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Long>(long))","position":"org.easymock.EasyMock:1051","type":"CtInvocationImpl"},"status":-1},{"failures":[71,72,73,74,75,76,77,78,25,79,80,81,82,83,84],"variableMapping":{"result":"errorMessage","i":"matches"},"name":"replace","transplant":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:90","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","position":"org.easymock.internal.MocksBehavior:137","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:210","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:2000","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:906","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Object != null","position":"org.easymock.internal.matchers.NotNull:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.IArgumentMatcher.matches(java.lang.Object)) {\n    return true;\n} ","position":"org.easymock.internal.matchers.Or:39","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"lastInvocation":"lastInvocation"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:251","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:309","type":"CtLocalVariableImpl"},"status":-2},{"failures":[85,86,87],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","position":"org.easymock.internal.DefaultClassInstantiator:94","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","position":"org.easymock.internal.ReflectionUtils:166","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(boolean)","position":"org.easymock.internal.DefaultClassInstantiator:196","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"org.easymock.internal.Results:49","type":"CtLocalVariableImpl"},"status":-2},{"failures":[88],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:193","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isArray()) {\n        final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n                return false;\n            } \n            break;\n        } \n    } \n    if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:193","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","position":"org.easymock.internal.MocksBehavior:137","type":"CtIfImpl"},"status":-2},{"failures":[89],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","position":"org.easymock.EasyMock:2125","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"interceptor":"interceptor","mockedMethods":"mockedMethods"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:168","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","position":"org.easymock.internal.ClassProxyFactory:169","type":"CtInvocationImpl"},"status":0},{"failures":[90,91,92,93,94,95,96,97,98,99,100],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.internal.MockBuilder:206","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.internal.MockBuilder:214","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocks(java.lang.Object)","position":"org.easymock.EasyMockSupport:624","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:261","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:70","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"add","transplant":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?> != null) {\n    for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n        final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n        if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n            java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:381","type":"CtWhileImpl"},"status":0},{"failures":[1,2,3,4,101,102,103,104,16,17,18,19,20,21,24],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","position":"org.easymock.internal.RecordState:151","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"result":"length"},"name":"replace","transplant":{"sourceCode":"return int < 0","position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((this.java.lang.Object[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:114","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double.valueOf(0))","position":"org.easymock.internal.RecordState:52","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > (int)) {\n    int += 1;\n    return java.util.List<org.easymock.internal.Result>.get(int);\n} ","position":"org.easymock.internal.Results:72","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","position":"org.easymock.internal.LastControl:49","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.StringBuffer.toString()","position":"org.easymock.internal.ArgumentToString:69","type":"CtReturnImpl"},"status":-2},{"failures":[105],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>.getName(), java.lang.Long.java.lang.Class<java.lang.Long>)","position":"org.easymock.internal.MethodSerializationWrapper:38","type":"CtInvocationImpl"},"status":0},{"failures":[106,107,108],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","position":"org.easymock.internal.DefaultClassInstantiator:140","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","position":"org.easymock.internal.RecordState:252","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","position":"org.easymock.internal.ClassProxyFactory:193","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:52","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"number":"number"},"name":"add","transplant":{"sourceCode":"return java.lang.Number.doubleValue()","position":"org.easymock.internal.RecordState:205","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.longValue()","position":"org.easymock.internal.RecordState:201","type":"CtReturnImpl"},"status":-2},{"failures":[109],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","position":"org.easymock.internal.MockBuilder:159","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = org.easymock.internal.ExpectedInvocation.getMethod().getExceptionTypes()","position":"org.easymock.internal.RecordState:320","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object[][((java.lang.Object[].int) - 1)]) == null) {\n    return java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:56","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"-3018631689416120154L","position":"org.easymock.internal.matchers.EqualsWithDelta:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5418279681566430252L","position":"org.easymock.internal.RecordState:31","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1421","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.easymock.internal.ErrorMessage:44","type":"CtReturnImpl"},"status":-2},{"failures":[110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,63,99,99,100,100,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","position":"org.easymock.internal.RecordState:182","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:136","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","position":"org.easymock.internal.LastControl:128","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","position":"org.easymock.internal.ArgumentToString:89","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Character.java.lang.Class<java.lang.Character>, java.lang.Character.java.lang.Character.valueOf(((char)(0))))","position":"org.easymock.internal.RecordState:48","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[int + int]","position":"org.easymock.internal.Invocation:62","type":"CtLocalVariableImpl"},"status":-2},{"failures":[142,143,105,144],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.matchers.Captures<?>>(0)","position":"org.easymock.internal.Invocation:44","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:98","type":"CtInvocationImpl"},"status":-1},{"failures":[145,146,147],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:42","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).verify())) {\n    break;\n} ","position":"org.easymock.internal.MocksBehavior:91","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Long>(org.easymock.Capture<java.lang.Long>))","position":"org.easymock.EasyMock:1951","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.T = T","position":"org.easymock.internal.matchers.Captures:47","type":"CtAssignmentImpl"},"status":-2},{"failures":[148,149],"variableMapping":{"methodName":"qualifier"},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","position":"org.easymock.internal.InjectionPlan:61","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.ReflectionUtils:120","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","position":"org.easymock.EasyMock:2053","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:371","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (java.lang.reflect.Field == null) || (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0)","position":"org.easymock.internal.Injector:224","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:123","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"actualTypeArgument":"actualTypeArgument","typeVariableMap":"typeVariableMap","variable":"variable","this":"this"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:328","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:330","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","position":"org.easymock.internal.RecordState:115","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:986","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","position":"org.easymock.internal.RecordState:86","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int))","position":"org.easymock.ConstructorArgs:61","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.Injector:73","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])","position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"verified":"lastInvocationUsed"},"name":"add","transplant":{"sourceCode":"boolean = false","position":"org.easymock.internal.MocksBehavior:156","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:167","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","position":"org.easymock.internal.RecordState:77","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:295","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:58","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:57","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.EasyMockProperties.getClassLoader()","position":"org.easymock.internal.EasyMockProperties:61","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int == 0","position":"org.easymock.internal.matchers.CompareEqual:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.Invocation:221","type":"CtInvocationImpl"},"status":-2},{"failures":[150],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1248","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:346","type":"CtReturnImpl"},"status":-1},{"failures":[94],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:235","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{"result":"result"},"name":"add","transplant":{"sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","position":"org.easymock.internal.ReplayState:59","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Result.answer()","position":"org.easymock.internal.ReplayState:60","type":"CtReturnImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":10,"org.easymock.tests2.MockedExceptionTest.testRealException":4,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":131,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":41,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":141,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":87,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":148,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":51,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":110,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":140,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":90,"org.easymock.tests.ResultTest.createThrowResultToString":52,"org.easymock.tests.UsageExpectAndThrowTest.longType":29,"org.easymock.tests2.UsageConstraintsTest.testContains":116,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":43,"org.easymock.tests2.ConstraintsToStringTest.notToString":69,"org.easymock.tests2.UsageConstraintsTest.testFind":112,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":59,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":60,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":98,"org.easymock.tests.UsageTest.argumentsOrdered":84,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":61,"org.easymock.tests2.StubTest.stubWithReturnValue":0,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":22,"org.easymock.tests2.CaptureTest.testCaptureAll":62,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":125,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":55,"org.easymock.tests2.CaptureTest.testCaptureFromStub":63,"org.easymock.tests.UsageVerifyTest.twoThrows":25,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":68,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":16,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":133,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":56,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":144,"org.easymock.tests2.ConstraintsToStringTest.andToString":58,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":91,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":31,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":146,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":89,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":5,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":39,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":103,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":24,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":92,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":26,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":34,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":53,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":38,"org.easymock.tests2.UsageConstraintsTest.testMatches":118,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":120,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":21,"org.easymock.tests2.UsageConstraintsTest.testOr":115,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":109,"org.easymock.tests2.UsageConstraintsTest.testNotNull":121,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":95,"org.easymock.tests2.UsageConstraintsTest.testNull":113,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":42,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":14,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":126,"org.easymock.tests2.ThreadingTest.testThreadSafe":88,"org.easymock.tests.UsageThrowableTest.throwError":8,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":85,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":6,"org.easymock.tests2.UsageConstraintsTest.greaterThan":119,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":107,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":134,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":137,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":50,"org.easymock.tests2.UsageTest.wrongArguments":73,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":130,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":49,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":132,"org.easymock.tests2.UsageConstraintsTest.testSame":114,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":97,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":102,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":54,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":93,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":12,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":65,"org.easymock.tests.UsageExpectAndThrowTest.object":36,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":100,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":18,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":122,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":32,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":33,"org.easymock.tests.UsageTest.wrongArguments":82,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":67,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":13,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":70,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":66,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":136,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":124,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":37,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":40,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":101,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":3,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":127,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":129,"org.easymock.tests.UsageExpectAndThrowTest.floatType":28,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":150,"org.easymock.tests2.UsageStrictMockTest.differentMethods":72,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":149,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":23,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":27,"org.easymock.tests.UsageStrictMockTest.range":77,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":143,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":47,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":147,"org.easymock.tests.UsageUnorderedTest.message":80,"org.easymock.tests.UsageTest.unexpectedCallWithArray":81,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":74,"org.easymock.tests2.UsageConstraintsTest.constraints":57,"org.easymock.tests.UsageVerifyTest.twoReturns":79,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":35,"org.easymock.tests2.UsageConstraintsTest.lessThan":123,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":17,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":83,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":105,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":96,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":48,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":139,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":108,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":1,"org.easymock.tests2.MockBuilderTest.testWithConstructor":94,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":76,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":44,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":106,"org.easymock.tests2.UsageStrictMockTest.range":71,"org.easymock.tests2.MockedExceptionTest.testMockedException":2,"org.easymock.tests.UsageThrowableTest.throwCheckedException":11,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":45,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":138,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":104,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":128,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":145,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":9,"org.easymock.tests.UsageStrictMockTest.differentMethods":78,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":15,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":86,"org.easymock.samples.ConstructorCalledMockTest.testTax":99,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":111,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":117,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":7,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":19,"org.easymock.tests2.UsageTest.argumentsOrdered":75,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":46,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":30,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":142,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":135,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":20,"org.easymock.tests2.CaptureTest.testCapture2_2446744":64}}]

[{"transplant":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,0,186,1,187,188,189,190,191,192,193,194,195,196,197,198,199,2,3,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,4,266,5,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"failures":[23,25,26,105,106,107,108,122,123,129,130,296,297,298,137,138,139,156,157,159,160,238,288,290,293,294],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:39","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:110","sourceCode":"return ((org.easymock.internal.Invocation.(getMockAndMethodName()) + \"(\") + org.easymock.internal.ArgumentToString.(org.easymock.internal.ArgumentToString.argumentsToString(java.lang.Object[]))) + \")\"","type":"CtReturnImpl"},"failures":[25,26,119,123,129,130,138,139,156,159,160,299,300,217,238,289,290,293,294],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:309","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[301,73,302],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"expected"}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"failures":[303],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[304,305,306,307,308],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:69","sourceCode":"continue","type":"CtContinueImpl"},"failures":[309,33,35,310,311,312,313,314,315,316,317],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:138","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[318,319,320],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:279","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[321,322],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[323,324,325,326,156,289],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:305","sourceCode":"return ((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","type":"CtReturnImpl"},"failures":[327,328,6,7,8,9,10,11,13,329,330,331,332,333,14,15,16,17,18,334,19,335,20,21,22,23,24,25,26,27,28,29,30,31,336,32,33,337,338,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,57,59,60,61,62,63,66,339,72,73,74,75,340,341,342,343,344,345,346,347,348,349,350,351,352,76,77,78,79,80,81,82,83,84,85,86,87,353,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115,354,355,118,120,121,122,123,124,125,126,127,128,129,130,131,132,356,357,358,359,137,138,139,140,141,142,143,144,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,171,173,175,176,177,178,180,181,182,183,184,185,0,186,1,187,188,189,190,191,192,193,194,195,196,197,198,199,2,3,212,214,215,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,360,361,240,241,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,4,266,271,272,273,282,283,284,285,286,287,288,290,291,292,293,294,295],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[310],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[28,29,30,362],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:62","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Contains:40","sourceCode":"java.lang.StringBuffer.append(((\"contains(\\\"\" + (java.lang.String)) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[363],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:269","sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","type":"CtInvocationImpl"},"failures":[364,364,365,365,330,331,332,20,309,28,30,336,32,33,337,34,35,50,51,53,54,55,56,57,366,367,58,59,60,61,368,369,64,65,66,113,114,370,371,115,116,354,355,372,117,118,119,373,374,375,376,377,356,378,379,357,380,381,382,383,384,385,386,387,388,358,389,390,391,392,393,359,394,395,396,163,397,398,399,318,400,401,402,403,404,405,182,183,406,407,408,239,409,410,271,272,273,274,275,276,277,278,281,282],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:49","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[91],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:127","sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:128","sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cl":"cl","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"failures":[62,411],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[364,364,365,365,23,47,77,78,79,82,83,84,85,90,92,93,95,96,102,103,104,412,140,141,142,143,144,157,200,240,247,248,251,4,266,5,267,268,269,270,413,414,415,416,417],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:90","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[418],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:352","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[361,419],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.EqualsWithDelta:27","sourceCode":"-3018631689416120154L","type":"CtUnaryOperatorImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:122","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:893","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[364,364,365,365,330,331,332,20,309,28,30,336,32,33,337,34,35,420,421,422,423,424,425,50,51,53,54,55,56,57,366,367,58,59,60,61,368,369,64,65,66,418,113,426,114,370,371,115,116,354,355,372,117,118,427,428,119,373,374,375,376,377,356,378,379,357,380,381,382,383,384,385,386,387,388,358,389,390,391,392,393,359,394,395,163,397,398,399,318,400,402,429,403,404,405,182,183,406,407,408,430,239,409,431,432,410,271,272,273,433,274,275,276,277,278,279,280,281,282],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result","name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[17,334,23,24,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57,58,62,63,434,68,78,79,80,81,82,83,84,85,86,87,353,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,140,141,142,143,144,156,157,171,172,238,240,241,242,247,248,249,250,251,265,4,266,5],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"this.org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"failures":[59,369,114,118],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.internal.ReplayState:32","sourceCode":"new java.util.concurrent.locks.ReentrantLock()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:130","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[435,111,112,436],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":81,"org.easymock.tests2.UsageTest.argumentsOrdered":130,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":287,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":350,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":302,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":125,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":329,"org.easymock.tests2.DelegateToTest.testReturnException":72,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":168,"org.easymock.tests.MockingTest.testPartialClassMocking":271,"org.easymock.tests.MockClassControlTest.testToString":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":417,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":383,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":218,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":357,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":296,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":335,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":87,"org.easymock.tests2.UsageTest.wrongArguments":123,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":247,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":135,"org.easymock.samples.ExampleTest.answerVsDelegate":7,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":404,"org.easymock.tests2.UsageConstraintsTest.testNull":83,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":53,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":281,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":349,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":420,"org.easymock.tests2.CaptureTest.testPrimitive":39,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":251,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":237,"org.easymock.tests.UsageTest.moreThanOneArgument":288,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":52,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":268,"org.easymock.tests.UsageTest.argumentsOrdered":294,"org.easymock.tests.UsageVarargTest.varargIntAccepted":257,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":140,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":113,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":306,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":116,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":144,"org.easymock.tests.ReplayStateInvalidUsageTest.times":208,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":334,"org.easymock.tests2.AnswerTest.answer":109,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":353,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":71,"org.easymock.tests2.CaptureTest.testAnd":36,"org.easymock.tests2.UsageTest.strictResetToDefault":121,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":58,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":314,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":267,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":285,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":344,"org.easymock.tests2.DelegateToTest.testDelegate":75,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":233,"org.easymock.tests.LimitationsTest.mockFinalMethod":409,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":171,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":246,"org.easymock.tests2.CaptureTest.testCapture1_2446744":40,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":231,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":69,"org.easymock.tests.UsageThrowableTest.throwError":146,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":202,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":300,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":270,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":311,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":395,"org.easymock.samples.PartialClassMockTest.testGetArea":330,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":203,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":141,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":429,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":384,"org.easymock.tests2.UsageTest.niceToStrict":124,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":219,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":413,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":115,"org.easymock.tests2.MockBuilderTest.testCreateMock":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":391,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":227,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":323,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":345,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":173,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":133,"org.easymock.tests.UsageOverloadedMethodTest.overloading":253,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":388,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":92,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":215,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":193,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":252,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":91,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":319,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":45,"org.easymock.tests.MockClassControlTest.testEquals":280,"org.easymock.tests2.EasyMockSupportClassTest.testAll":356,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":183,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":235,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":421,"org.easymock.tests2.CaptureTest.testCaptureAll":37,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":70,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":244,"org.easymock.tests2.UsageConstraintsTest.testMatches":93,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":200,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":269,"org.easymock.samples.ExampleTest.voteForRemovals":11,"org.easymock.tests.UsageVarargTest.allKinds":265,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":137,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":245,"org.easymock.samples.BasicClassMockTest.testPrintContent":332,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":152,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":21,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":172,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":401,"org.easymock.tests2.UsageConstraintsTest.greaterThan":95,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":378,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":284,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":61,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":402,"org.easymock.samples.ExampleTest.voteForRemoval":8,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":15,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":368,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":427,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":56,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":120,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":282,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":372,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":342,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":148,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":376,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":167,"org.easymock.tests2.CaptureTest.testCaptureFirst":49,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":301,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":436,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":343,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":132,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":217,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":189,"org.easymock.tests2.UsageTest.moreThanOneArgument":122,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":17,"org.easymock.tests2.CaptureTest.testCapture2_2446744":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":419,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":118,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":264,"org.easymock.tests.GenericTest.testBridgedEquals":407,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":180,"org.easymock.tests.UsageExpectAndReturnTest.longType":186,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":242,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":340,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":428,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":236,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":412,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":100,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":234,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":5,"org.easymock.tests.UsageCallCountTest.tooManyCalls":181,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":175,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":392,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":190,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":223,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":151,"org.easymock.tests.MockingTest.testNiceClassMocking":433,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":32,"org.easymock.tests.MockingTest.testClassMocking":432,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":426,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":174,"org.easymock.tests2.UsageConstraintsTest.testContains":90,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":66,"org.easymock.tests2.UsageConstraintsTest.testFind":82,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":254,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":154,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":63,"org.easymock.tests.UsageExpectAndReturnTest.object":192,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":57,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":348,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":259,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":166,"org.easymock.tests.UsageTest.exactCallCountByLastCall":295,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":240,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":415,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":360,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":309,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":198,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":255,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":214,"org.easymock.tests.MockClassControlTest.testHashCode":279,"org.easymock.tests2.EasyMockSupportTest.testVerify":352,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":386,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":361,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":212,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":68,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":434,"org.easymock.tests.UsageVarargTest.varargCharAccepted":258,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":396,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":22,"org.easymock.tests2.UsageTest.openCallCountByLastCall":126,"org.easymock.tests.DefaultClassInstantiatorTest.object":163,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":351,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":387,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":225,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":425,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":149,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":59,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":278,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":224,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":199,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":277,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":359,"org.easymock.tests2.UsageTest.resumeIfFailure":131,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":403,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":170,"org.easymock.tests2.StubTest.stubWithReturnValue":77,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":315,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":191,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":101,"org.easymock.tests2.SerializationTest.testAllMockedMethod":30,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":308,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":324,"org.easymock.samples.SupportTest.voteForRemovals":328,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":405,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":230,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":362,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":435,"org.easymock.tests.UsageExpectAndThrowTest.object":228,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":98,"org.easymock.tests2.DelegateToTest.testWrongClass":74,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":4,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":266,"org.easymock.tests.UsageStrictMockTest.range":159,"org.easymock.samples.ConstructorCalledMockTest.testTax":364,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":347,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":336,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":229,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":354,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":210,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":375,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":134,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":325,"org.easymock.tests2.CaptureTest.testCaptureNone":44,"org.easymock.tests.UsageUnorderedTest.message":238,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":299,"org.easymock.tests.UsageVerifyTest.twoReturns":139,"org.easymock.tests.UsageVarargTest.varargByteAccepted":263,"org.easymock.tests2.ThreadingTest.testThreadSafe":14,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":389,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":178,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":331,"org.easymock.tests2.CaptureTest.testCapture_2617107":38,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":250,"org.easymock.tests2.UsageConstraintsTest.any":88,"org.easymock.tests2.StubTest.stub":76,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":207,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":169,"org.easymock.tests.UsageExpectAndThrowTest.longType":221,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":318,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":206,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":24,"org.easymock.tests2.SerializationTest.testClass":28,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":339,"org.easymock.tests.LimitationsTest.mockNativeMethod":239,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":406,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":3,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":424,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":27,"org.easymock.tests2.NameTest.nameForMocksControl":108,"org.easymock.tests2.MockedExceptionTest.testMockedException":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":379,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":292,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":411,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":222,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":273,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":50,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":355,"org.easymock.tests.MockingTest.testNicePartialClassMocking":272,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":55,"org.easymock.tests2.CaptureTest.testCaptureLast":43,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":304,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":145,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":35,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":86,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":99,"org.easymock.tests.MockingTest.testTwoMocks":410,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":310,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":184,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":226,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":129,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":103,"org.easymock.samples.ExampleTest.removeNonExistingDocument":12,"org.easymock.tests.UsageStrictMockTest.differentMethods":160,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":204,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":398,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":16,"org.easymock.tests2.MockBuilderTest.testCreateMockString":119,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":274,"org.easymock.tests.UsageExpectAndThrowTest.floatType":220,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":380,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":377,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":110,"org.easymock.tests.UsageVerifyTest.twoThrows":138,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":213,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":358,"org.easymock.samples.ExampleTest.voteAgainstRemoval":9,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":60,"org.easymock.tests.LimitationsTest.privateConstructor":430,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":312,"org.easymock.tests2.UsageConstraintsTest.testNotNull":102,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":153,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":64,"org.easymock.tests2.UsageTest.defaultResetToNice":128,"org.easymock.samples.ExampleTest.voteAgainstRemovals":6,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":197,"org.easymock.tests.UsageVarargTest.differentLength":260,"org.easymock.tests2.CallbackTest.callback":31,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":366,"org.easymock.tests.UsageTest.openCallCountByLastCall":291,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":78,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":249,"org.easymock.tests.UsageCallCountTest.tooFewCalls":176,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":337,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":136,"org.easymock.tests.UsageThrowableTest.throwCheckedException":150,"org.easymock.tests.MockingTest.testStrictClassMocking":431,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":326,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":34,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":241,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":33,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":209,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":338,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":112,"org.easymock.tests.ObjectMethodsTest.testHashCode":165,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":305,"org.easymock.tests2.NameTest.nameForNiceMock":107,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":18,"org.easymock.tests2.DependencyTest.testInterfaceMocking":19,"org.easymock.samples.ExampleTest.addDocument":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":390,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":394,"org.easymock.tests2.DelegateToTest.testStubDelegate":73,"org.easymock.tests2.AnswerTest.stubAnswer":111,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":157,"org.easymock.tests.UsageVarargTest.varargLongAccepted":262,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":161,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":2,"org.easymock.tests.UsageExpectAndReturnTest.floatType":0,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":20,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":365,"org.easymock.tests.UsageThrowableTest.noUpperLimit":147,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":96,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":79,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":373,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":41,"org.easymock.tests2.SerializationTest.test":29,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":320,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":397,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":185,"org.easymock.tests2.UsageConstraintsTest.testSame":84,"org.easymock.samples.SupportTest.addDocument":327,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":381,"org.easymock.tests.GenericTest.testPackageScope":182,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":414,"org.easymock.tests2.NameTest.nameForMock":105,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":194,"org.easymock.tests2.UsageStrictMockTest.differentMethods":26,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":317,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":367,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":1,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":232,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":286,"org.easymock.tests2.MockedExceptionTest.testRealException":67,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":416,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":307,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":23,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":322,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":211,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":248,"org.easymock.tests2.NameTest.nameForStrictMock":106,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":371,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":62,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":54,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":374,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":399,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":97,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":297,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":114,"org.easymock.tests2.UsageStrictMockTest.range":25,"org.easymock.tests2.UsageConstraintsTest.lessThan":104,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":422,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":418,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":341,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":385,"org.easymock.tests2.CaptureTest.testCaptureRightOne":46,"org.easymock.tests2.UsageConstraintsTest.testOr":85,"org.easymock.tests.UsageRangeTest.combination":283,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":51,"org.easymock.tests.UsageTest.wrongArguments":290,"org.easymock.tests2.MockBuilderTest.testWithConstructor":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":382,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":275,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":187,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":195,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":400,"org.easymock.tests.UsageVarargTest.varargShortAccepted":261,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":179,"org.easymock.tests2.UsageConstraintsTest.cmpTo":89,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":321,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":127,"org.easymock.tests2.CaptureTest.testCaptureFromStub":47,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":201,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":370,"org.easymock.tests.UsageTest.unexpectedCallWithArray":289,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":156,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":177,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":316,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":196,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":158,"org.easymock.tests2.UsageConstraintsTest.constraints":80,"org.easymock.samples.ExampleTest.addAndChangeDocument":13,"org.easymock.tests.UsageStrictMockTest.testVerify":162,"org.easymock.tests2.ConstraintsToStringTest.containsToString":363,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":333,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":155,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":243,"org.easymock.tests2.CompareToTest.testGreateThan":303,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":42,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":423,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":142,"org.easymock.tests.LimitationsTest.abstractClass":408,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":188,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":143,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":216,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":256,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":298,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":346}}]

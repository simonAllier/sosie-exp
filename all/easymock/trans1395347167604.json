[{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"failures":[1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericType":"genericType"}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[3,4,5,6],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[7,8,9,10,11],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"failures":[12,13,14],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:72","sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","type":"CtAssignmentImpl"},"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[37,38,39,12,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,13,14,66,67,68],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"failures":[69],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[70],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[71,72,73,74,75,76,77,78],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:219","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[32,36],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:36","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>.getName(), java.lang.Character.java.lang.Class<java.lang.Character>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"failures":[79],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[80,81,82,83,84,85,86,87,88,89,90],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[82,85,86,87],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[9,10],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:93","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[11],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,12,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,40,163,164,165,166,167,168,41,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,190,191,192,193,64,194,195,65,13,14,66,67,196,197,198,199,200,201,202,203,204,205,206,68,207,208,209,210,211,212,70,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,0,230,231,232,233,234,19,235,236,23,26,27,237,7,238,239,240,241,242,6,243,244,245,80,81,246,82,247,83,84,248,249,250,251,252,253,254,255,256,257,86,258,259,260,261,87,262,263,264,9,265,266,267,268,33,269,10,35,88,270,89,271,272,273,274,275,276,277,90,278,279,280,281,282,283,284,285,286,287,288],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:150","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[289,290,291,292,293,294],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:109","sourceCode":"org.easymock.internal.Invocation.clearCaptures()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2124","sourceCode":"if (org.easymock.internal.Invocation == null) {\n    throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\");\n} ","type":"CtIfImpl"},"failures":[69],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"actual":"result"}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[295],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Same:43","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[296,297,298,108,12,109,111,112,115,116,143,144,146,147,193,211,212,217,218,222,224,225,299,300,301,302],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:43","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"failures":[303,304,305],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,12,109,110,111,306,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,307,142,143,144,145,146,147,148,308,149,150,151,152,153,154,155,156,157,158,159,160,163,164,165,166,167,168,41,169,170,171,172,173,174,175,176,177,178,179,309,310,180,181,182,183,186,187,189,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,190,191,192,193,311,64,194,195,65,13,14,66,67,196,197,198,199,200,201,312,202,203,204,205,206,68,207,208,209,210,211,212,70,213,214,215,216,217,218,219,220,313,221,222,223,224,225,226,227,299,300,301,302,228,229,0,230,231,232,233,234,19,235,236,23,26,27,31,32,314,315,237,7,238,239,240,241,242,6,243,244,245,80,81,246,82,247,83,84,248,249,250,251,252,253,254,255,256,257,86,258,259,261,87,262,263,264,9,265,266,267,268,269,10,35,88,270,89,271,272,273,274,275,276,277,90,278,279,280,281,282,283,284,285,286,287,288],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:68","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"method"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[92,162,281,283,284],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[282],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:128","sourceCode":"final java.lang.String java.lang.String = org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(org.easymock.EasyMock.java.lang.String)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[227,316,19,317,318,319,320,321,322,323],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[324,12,109,306,112,115,116,143,146,193,212,217,218,224],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":81,"org.easymock.tests2.UsageTest.argumentsOrdered":218,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":110,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":168,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":213,"org.easymock.tests2.StubTest.stubWithReturnValue":68,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":317,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":261,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":131,"org.easymock.tests2.SerializationTest.testAllMockedMethod":236,"org.easymock.tests2.DelegateToTest.testReturnException":281,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":166,"org.easymock.tests.MockingTest.testPartialClassMocking":119,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":1,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":55,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":36,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":20,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":43,"org.easymock.tests.UsageExpectAndThrowTest.object":53,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":4,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":296,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":258,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":319,"org.easymock.tests2.DelegateToTest.testWrongClass":283,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":191,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":192,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":248,"org.easymock.tests2.UsageTest.wrongArguments":212,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":151,"org.easymock.samples.ConstructorCalledMockTest.testTax":289,"org.easymock.tests.UsageStrictMockTest.range":146,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":159,"org.easymock.samples.ExampleTest.answerVsDelegate":92,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":315,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":17,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":74,"org.easymock.tests2.UsageConstraintsTest.testNull":82,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":266,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":54,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":28,"org.easymock.tests2.CaptureTest.testPrimitive":271,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":155,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":62,"org.easymock.tests.UsageTest.moreThanOneArgument":111,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":115,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":265,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":158,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":198,"org.easymock.tests2.CaptureTest.testCaptureNone":276,"org.easymock.tests.UsageUnorderedTest.message":193,"org.easymock.tests.UsageVerifyTest.twoReturns":109,"org.easymock.tests.UsageVarargTest.varargByteAccepted":105,"org.easymock.tests2.ThreadingTest.testThreadSafe":240,"org.easymock.tests.UsageTest.argumentsOrdered":116,"org.easymock.tests.UsageVarargTest.varargIntAccepted":100,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":183,"org.easymock.tests2.CaptureTest.testCapture_2617107":89,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":170,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":23,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":154,"org.easymock.tests2.UsageConstraintsTest.any":249,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":27,"org.easymock.tests2.StubTest.stub":206,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":174,"org.easymock.tests.UsageExpectAndThrowTest.longType":46,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":167,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":305,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":223,"org.easymock.tests2.SerializationTest.testClass":19,"org.easymock.tests.LimitationsTest.mockNativeMethod":190,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":79,"org.easymock.tests2.AnswerTest.answer":228,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":18,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":141,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":85,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":234,"org.easymock.tests2.CaptureTest.testAnd":88,"org.easymock.tests2.UsageTest.strictResetToDefault":210,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":226,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":10,"org.easymock.tests2.NameTest.nameForMocksControl":302,"org.easymock.tests2.MockedExceptionTest.testMockedException":286,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":197,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":202,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":114,"org.easymock.tests2.DelegateToTest.testDelegate":284,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":69,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":47,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":121,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":264,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":29,"org.easymock.tests.MockingTest.testNicePartialClassMocking":120,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":58,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":268,"org.easymock.tests2.CaptureTest.testCaptureLast":275,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":41,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":118,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":239,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":84,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":259,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":179,"org.easymock.tests2.CaptureTest.testCapture1_2446744":272,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":8,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":122,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":56,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":232,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":51,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":217,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":262,"org.easymock.tests.UsageThrowableTest.throwError":64,"org.easymock.tests.UsageStrictMockTest.differentMethods":147,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":156,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":242,"org.easymock.tests2.MockBuilderTest.testCreateMockString":32,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":200,"org.easymock.tests.UsageExpectAndThrowTest.floatType":45,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":255,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":229,"org.easymock.tests.UsageVerifyTest.twoThrows":12,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":21,"org.easymock.samples.PartialClassMockTest.testGetArea":15,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":171,"org.easymock.samples.ExampleTest.voteAgainstRemoval":94,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":35,"org.easymock.tests2.UsageTest.niceToStrict":70,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":44,"org.easymock.tests2.UsageConstraintsTest.testNotNull":87,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":285,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":67,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":78,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":26,"org.easymock.tests2.UsageTest.defaultResetToNice":216,"org.easymock.tests2.MockBuilderTest.testCreateMock":30,"org.easymock.samples.ExampleTest.voteAgainstRemovals":91,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":137,"org.easymock.tests2.CallbackTest.callback":208,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":294,"org.easymock.tests.UsageTest.openCallCountByLastCall":113,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":52,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":244,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":39,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":309,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":153,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":157,"org.easymock.tests.UsageCallCountTest.tooFewCalls":181,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":75,"org.easymock.tests.UsageOverloadedMethodTest.overloading":189,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":253,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":40,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":133,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":188,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":252,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":277,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":160,"org.easymock.tests.UsageThrowableTest.throwCheckedException":13,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":187,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":60,"org.easymock.tests2.CaptureTest.testCaptureAll":270,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":233,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":177,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":238,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":150,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":7,"org.easymock.tests2.UsageConstraintsTest.testMatches":254,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":230,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":199,"org.easymock.samples.ExampleTest.voteForRemovals":96,"org.easymock.tests2.NameTest.nameForNiceMock":301,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":243,"org.easymock.tests.UsageVarargTest.allKinds":107,"org.easymock.tests2.DependencyTest.testInterfaceMocking":207,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":108,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":321,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":178,"org.easymock.samples.ExampleTest.addDocument":95,"org.easymock.tests2.DelegateToTest.testStubDelegate":282,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":66,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":313,"org.easymock.tests2.AnswerTest.stubAnswer":0,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":169,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":144,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":323,"org.easymock.tests2.UsageConstraintsTest.greaterThan":256,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":312,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":11,"org.easymock.tests.UsageVarargTest.varargLongAccepted":104,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":148,"org.easymock.samples.ExampleTest.voteForRemoval":93,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":241,"org.easymock.tests.UsageExpectAndReturnTest.floatType":124,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":140,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":227,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":33,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":290,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":257,"org.easymock.tests.UsageThrowableTest.noUpperLimit":194,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":245,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":209,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":164,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":273,"org.easymock.tests2.SerializationTest.test":235,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":318,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":195,"org.easymock.tests2.UsageConstraintsTest.testSame":247,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":123,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":165,"org.easymock.tests2.CaptureTest.testCaptureFirst":280,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":220,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":5,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":129,"org.easymock.tests.GenericTest.testPackageScope":186,"org.easymock.tests2.CaptureTest.testCapture2_2446744":279,"org.easymock.tests2.UsageTest.moreThanOneArgument":211,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":6,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":295,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":31,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":106,"org.easymock.tests.GenericTest.testBridgedEquals":2,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":76,"org.easymock.tests2.NameTest.nameForMock":299,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":73,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":184,"org.easymock.tests.UsageExpectAndReturnTest.longType":125,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":175,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":61,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":134,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":260,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":292,"org.easymock.tests2.UsageStrictMockTest.differentMethods":225,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":59,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":196,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":126,"org.easymock.tests.UsageCallCountTest.tooManyCalls":185,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":303,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":57,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":203,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":180,"org.easymock.tests2.MockedExceptionTest.testRealException":288,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":130,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":222,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":48,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":14,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":152,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":237,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":310,"org.easymock.tests2.NameTest.nameForStrictMock":300,"org.easymock.tests2.UsageConstraintsTest.testContains":251,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":287,"org.easymock.tests2.UsageConstraintsTest.testFind":246,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":42,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":204,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":72,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":267,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":307,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":205,"org.easymock.tests.UsageExpectAndReturnTest.object":132,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":297,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":86,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":269,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":24,"org.easymock.tests2.UsageStrictMockTest.range":224,"org.easymock.tests2.UsageConstraintsTest.lessThan":263,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":320,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":102,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":77,"org.easymock.tests.UsageTest.exactCallCountByLastCall":117,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":149,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":322,"org.easymock.tests2.CaptureTest.testCaptureRightOne":90,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":3,"org.easymock.tests2.UsageConstraintsTest.testOr":83,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":316,"org.easymock.tests.UsageRangeTest.combination":201,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":9,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":98,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":138,"org.easymock.tests.UsageTest.wrongArguments":112,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":162,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":311,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":127,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":135,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":304,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":38,"org.easymock.tests.UsageVarargTest.varargShortAccepted":103,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":161,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":231,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":314,"org.easymock.tests2.UsageConstraintsTest.cmpTo":250,"org.easymock.tests.UsageVarargTest.varargCharAccepted":101,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":221,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":63,"org.easymock.tests2.UsageTest.openCallCountByLastCall":214,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":215,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":71,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":37,"org.easymock.tests2.CaptureTest.testCaptureFromStub":278,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":25,"org.easymock.tests.UsageTest.unexpectedCallWithArray":306,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":324,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":50,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":65,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":143,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":182,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":291,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":136,"org.easymock.tests2.UsageConstraintsTest.constraints":80,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":34,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":145,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":49,"org.easymock.samples.ExampleTest.addAndChangeDocument":97,"org.easymock.tests.UsageStrictMockTest.testVerify":308,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":139,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":22,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":142,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":176,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":274,"org.easymock.tests2.UsageTest.resumeIfFailure":219,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":172,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":16,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":128,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":163,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":173,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":298,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":99}}]

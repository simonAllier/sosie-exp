[{"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,6,7],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[8],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:36","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(char.char, java.lang.Character.java.lang.Character)","type":"CtInvocationImpl"},"failures":[9,10,11,12,13,14,15],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:251","sourceCode":"java.lang.Class<?> java.lang.Class<?> = this.org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:309","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"lastInvocation":"lastInvocation"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:47","sourceCode":"java.lang.StringBuffer.append(((((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol())) + \" 0\"))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"failures":[16,17,18],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"failures":[19],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1204","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"this.java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"toMock":"toMock","hashCodeMethod":"equalsMethod","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[68,69],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[25,70,71],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"toStringMethod","equalsMethod":"toStringMethod"}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"failures":[12],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:39","sourceCode":"return int <= 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"failures":[72,73,74,75,76],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:65","sourceCode":"throw java.lang.Throwable","type":"CtThrowImpl"},"failures":[1,77,5,78,79],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:893","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[80],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:200","sourceCode":"throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:328","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[81,82,83],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"failures":[16,17,18],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[102,103,104,105,106,107,108,109,110],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[111,112,113,13,14],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[8],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:117","failures":[0,1,2,3,4,5,6,7],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:95","sourceCode":"return java.lang.StringBuilder.toString()","type":"CtReturnImpl"},"failures":[114,115,116,117,85,86,118,119,120,121,122,123,90,124,125,126,127,128,100],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:79","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"m"}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[129,130],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if (java.lang.reflect.Constructor<T> == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"failures":[22,23,25,53,54,9,10,11,12,15],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"position":"org.easymock.EasyMock:1531","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:305","sourceCode":"return ((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","type":"CtReturnImpl"},"failures":[131,132,133,134,135,136,0,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,84,85,86,156,87,119,157,158,120,121,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,122,89,185,123,90,91,186,187,188,189,190,191,192,193,194,1,77,195,92,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,93,220,221,222,94,95,223,96,224,225,97,226,227,228,229,230,231,232,233,124,234,235,236,237,238,239,240,241,242,243,244,245,246,247,2,3,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,4,265,266,98,125,267,268,269,270,271,126,127,272,273,274,275,99,276,128,100,101,22,277,278,279,280,5,6,281,7,25,70,71,29,32,42,48,282,283,284,285,286,104,287,57,105,288,289,58,290,291,69,292,293,294,295,72,296,297,298,299,300,301,73,302,303,304,305,306,74,307,308,309,310,8,80,311,312,313,314,315,75,106,316,317,107,108,109,110,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,78,18,79,336,337],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":296,"org.easymock.tests2.UsageTest.argumentsOrdered":127,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":156,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":260,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":16,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":268,"org.easymock.tests2.StubTest.stubWithReturnValue":249,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":53,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":313,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":135,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":172,"org.easymock.tests2.SerializationTest.testAllMockedMethod":71,"org.easymock.tests2.DelegateToTest.testReturnException":78,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":112,"org.easymock.tests.MockingTest.testPartialClassMocking":160,"org.easymock.samples.SupportTest.voteForRemovals":133,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":224,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":36,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":216,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":83,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":32,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":130,"org.easymock.tests.UsageExpectAndThrowTest.object":223,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":264,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":80,"org.easymock.tests2.DelegateToTest.testWrongClass":79,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":9,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":232,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":233,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":73,"org.easymock.tests2.UsageTest.wrongArguments":125,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":189,"org.easymock.samples.ConstructorCalledMockTest.testTax":20,"org.easymock.tests.UsageStrictMockTest.range":123,"org.easymock.samples.ExampleTest.answerVsDelegate":0,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":257,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":104,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":63,"org.easymock.tests2.UsageConstraintsTest.testNull":298,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":96,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":107,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":284,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":259,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":103,"org.easymock.tests2.CaptureTest.testPrimitive":325,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":193,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":230,"org.easymock.tests.UsageTest.moreThanOneArgument":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":26,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":120,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":317,"org.easymock.tests2.CaptureTest.testCaptureNone":330,"org.easymock.tests.UsageUnorderedTest.message":124,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":114,"org.easymock.tests.UsageVerifyTest.twoReturns":86,"org.easymock.tests.UsageVarargTest.varargByteAccepted":152,"org.easymock.tests2.ThreadingTest.testThreadSafe":290,"org.easymock.tests.UsageTest.argumentsOrdered":121,"org.easymock.tests.UsageVarargTest.varargIntAccepted":146,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":43,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":208,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":142,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":82,"org.easymock.tests2.CaptureTest.testCapture_2617107":324,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":198,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":14,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":88,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":192,"org.easymock.tests2.UsageConstraintsTest.any":303,"org.easymock.tests2.StubTest.stub":248,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":202,"org.easymock.tests.UsageExpectAndThrowTest.longType":219,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":276,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":321,"org.easymock.tests2.SerializationTest.testClass":25,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":335,"org.easymock.tests.LimitationsTest.mockNativeMethod":231,"org.easymock.tests2.AnswerTest.answer":5,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":182,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":302,"org.easymock.tests2.CaptureTest.testAnd":322,"org.easymock.tests2.UsageTest.strictResetToDefault":266,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":52,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":101,"org.easymock.tests2.NameTest.nameForMocksControl":280,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":254,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":31,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":158,"org.easymock.tests2.DelegateToTest.testDelegate":336,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":93,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":162,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":106,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":285,"org.easymock.tests.MockingTest.testNicePartialClassMocking":161,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":226,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":109,"org.easymock.tests2.CaptureTest.testCaptureLast":329,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":113,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":197,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":301,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":58,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":311,"org.easymock.tests2.CaptureTest.testCapture1_2446744":326,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":59,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":163,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":225,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":94,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":126,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":315,"org.easymock.tests.UsageThrowableTest.throwError":234,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":81,"org.easymock.tests.UsageStrictMockTest.differentMethods":90,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":69,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":115,"org.easymock.tests.UsageExpectAndThrowTest.floatType":218,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":33,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":308,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":28,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":6,"org.easymock.tests.UsageVerifyTest.twoThrows":85,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":42,"org.easymock.samples.PartialClassMockTest.testGetArea":134,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":199,"org.easymock.samples.ExampleTest.voteAgainstRemoval":138,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":319,"org.easymock.tests2.UsageTest.niceToStrict":267,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":37,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":61,"org.easymock.tests2.UsageConstraintsTest.testNotNull":314,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":241,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":67,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":283,"org.easymock.tests2.UsageTest.defaultResetToNice":271,"org.easymock.samples.ExampleTest.voteAgainstRemovals":136,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":45,"org.easymock.tests.UsageVarargTest.differentLength":149,"org.easymock.tests2.CallbackTest.callback":4,"org.easymock.tests.UsageTest.openCallCountByLastCall":157,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":95,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":255,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":294,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":204,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":191,"org.easymock.tests.UsageCallCountTest.tooFewCalls":206,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":64,"org.easymock.tests.UsageOverloadedMethodTest.overloading":214,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":41,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":47,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":195,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":74,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":213,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":105,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":174,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":306,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":331,"org.easymock.tests.UsageThrowableTest.throwCheckedException":238,"org.easymock.tests2.EasyMockSupportClassTest.testAll":29,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":212,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":228,"org.easymock.tests2.CaptureTest.testCaptureAll":323,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":289,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":188,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":57,"org.easymock.tests2.UsageConstraintsTest.testMatches":307,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":68,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":288,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":7,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":194,"org.easymock.tests2.CompareToTest.testGreateOrEqual":76,"org.easymock.samples.ExampleTest.voteForRemovals":140,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":13,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":293,"org.easymock.tests2.NameTest.nameForNiceMock":279,"org.easymock.tests.UsageVarargTest.allKinds":154,"org.easymock.tests2.DependencyTest.testInterfaceMocking":263,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":84,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":11,"org.easymock.samples.BasicClassMockTest.testPrintContent":143,"org.easymock.samples.ExampleTest.addDocument":139,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":44,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":49,"org.easymock.tests2.DelegateToTest.testStubDelegate":18,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":240,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":274,"org.easymock.tests2.AnswerTest.stubAnswer":281,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":89,"org.easymock.tests2.UsageConstraintsTest.greaterThan":309,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":15,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":30,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":245,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":320,"org.easymock.tests.UsageVarargTest.varargLongAccepted":151,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":91,"org.easymock.samples.ExampleTest.voteForRemoval":137,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":291,"org.easymock.tests.UsageExpectAndReturnTest.floatType":165,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":181,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":22,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":21,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":310,"org.easymock.tests.UsageThrowableTest.noUpperLimit":235,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":295,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":265,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":196,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":327,"org.easymock.tests2.SerializationTest.test":70,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":54,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":252,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":236,"org.easymock.tests2.UsageConstraintsTest.testSame":299,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":27,"org.easymock.samples.SupportTest.addDocument":132,"org.easymock.tests2.CaptureTest.testCaptureFirst":334,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":17,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":129,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":253,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":273,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":34,"org.easymock.tests.GenericTest.testPackageScope":211,"org.easymock.tests2.CaptureTest.testCapture2_2446744":333,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":292,"org.easymock.tests2.UsageTest.moreThanOneArgument":98,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":286,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":153,"org.easymock.tests.GenericTest.testBridgedEquals":102,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":65,"org.easymock.tests2.NameTest.nameForMock":277,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":209,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":62,"org.easymock.tests.UsageExpectAndReturnTest.longType":166,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":250,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":203,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":229,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":175,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":312,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":155,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":227,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":56,"org.easymock.tests2.UsageStrictMockTest.differentMethods":100,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":167,"org.easymock.tests.UsageCallCountTest.tooManyCalls":210,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":97,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":247,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":46,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":171,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":111,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":220,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":99,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":239,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":190,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":287,"org.easymock.tests2.UsageConstraintsTest.testContains":305,"org.easymock.tests2.NameTest.nameForStrictMock":278,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":337,"org.easymock.tests2.UsageConstraintsTest.testFind":297,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":215,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":2,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":24,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":108,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":3,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":183,"org.easymock.tests.UsageExpectAndReturnTest.object":173,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":8,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":110,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":282,"org.easymock.tests2.UsageStrictMockTest.range":128,"org.easymock.tests2.UsageConstraintsTest.lessThan":75,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":258,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":10,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":148,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":66,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":19,"org.easymock.tests.UsageTest.exactCallCountByLastCall":159,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":187,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":251,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":12,"org.easymock.tests2.CaptureTest.testCaptureRightOne":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":38,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":242,"org.easymock.tests2.UsageConstraintsTest.testOr":300,"org.easymock.tests.UsageRangeTest.combination":244,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":23,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":316,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":144,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":179,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":77,"org.easymock.tests.UsageTest.wrongArguments":119,"org.easymock.tests2.MockBuilderTest.testWithConstructor":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":35,"org.easymock.tests2.EasyMockSupportTest.testVerify":262,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":168,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":176,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":39,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":243,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":1,"org.easymock.tests.UsageVarargTest.varargShortAccepted":150,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":116,"org.easymock.tests2.UsageConstraintsTest.cmpTo":304,"org.easymock.tests.UsageVarargTest.varargCharAccepted":147,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":275,"org.easymock.tests2.UsageTest.openCallCountByLastCall":269,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":270,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":261,"org.easymock.tests.UsageTest.unexpectedCallWithArray":118,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":117,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":222,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":40,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":237,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":122,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":207,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":55,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":177,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":318,"org.easymock.tests2.UsageConstraintsTest.constraints":72,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":185,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":221,"org.easymock.samples.ExampleTest.addAndChangeDocument":141,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":180,"org.easymock.tests.UsageStrictMockTest.testVerify":186,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":131,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":48,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":184,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":328,"org.easymock.tests2.UsageTest.resumeIfFailure":272,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":200,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":169,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":201,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":92,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":256,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":145}}]

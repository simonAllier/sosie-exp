[{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Null:35","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"failures":[41,58,113,250],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[251],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:305","failures":[0,1,2,3,5,252,253,7,8,9,10,12,14,15,16,19,20,22,254,255,256,257,25,29,30,258,259,260,261,262,263,264,265,266,267,268,269,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,67,69,71,72,73,74,75,76,77,80,81,82,83,85,86,87,91,270,271,92,93,272,273,94,95,274,97,275,276,277,99,278,100,101,102,103,104,105,107,279,109,280,281,110,111,112,113,114,116,126,127,128,129,130,132,133,136,137,138,141,142,143,144,145,146,147,148,282,150,251,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,172,174,175,176,177,178,179,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,215,217,218,220,221,222,223,224,225,226,231,233,234,235,236,237,238,283,239,240],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[284],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"type":"type"}},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:346","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[101],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[285,286,287,93,95,288,289,290,291,292,293],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:166","sourceCode":"java.lang.StringBuilder.append(\"\\n  Expectation failure on verify:\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[10,11,17,18,64,66,67,294,295,296,297,130,131,134,135,214,215,217,218,224,225,226,298],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[44],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:183","failures":[0,2,3,4,5,6,299,252,300,301,302,303,13,21,31,261,267,268,269,304,58,63,65,66,67,68,74,75,78,79,80,81,86,97,115,139,142,149,173,207,208,209,210,211,212,213,216,217,218,219,241,242,243,244,245,246,247,248,249,250],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1177","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","shouldBeUsedInOneThread":"threadSafe","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[0,1,2,3,4,5,6,7,9,10,12,13,16,19,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,64,67,68,294,295,296,297,69,70,71,72,73,74,75,76,78,79,80,81,82,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,107,108,109,110,111,114,115,116,117,118,119,120,121,122,123,124,125,127,128,130,137,138,141,143,144,145,146,147,148,149,305,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,173,174,180,181,182,183,184,185,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,306,307,207,208,209,210,213,215,218,219,308,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,283,239,240,241,242,243,244,245,246,247,248,249,250,309],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"((((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol())) + \" 0\")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[53,310],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Injection:74","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:79","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"failures":[0,2,3,4,5,6,299,252,300,301,302,303,11,13,17,18,31,261,267,268,269,304,58,63,65,66,67,68,74,75,78,79,80,81,86,97,115,131,134,135,139,142,149,282,150,173,208,209,210,211,212,213,214,216,217,218,219,241,242,243,244,245,246,247,248,249,250],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"matched":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,299,252,300,301,302,253,311,312,303,7,9,10,12,13,16,19,21,22,254,255,256,257,23,24,25,26,27,28,29,30,31,258,259,260,261,262,263,264,265,266,267,268,269,304,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,64,67,68,294,295,296,297,69,70,71,72,73,74,75,76,78,79,80,81,82,83,86,87,88,89,90,91,270,271,92,93,272,273,94,95,96,97,98,275,276,99,278,100,102,103,104,105,107,108,109,281,110,111,114,115,116,117,118,119,120,121,122,123,124,125,127,128,130,137,138,141,143,144,145,146,147,148,149,305,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,173,174,180,181,182,183,184,185,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,306,307,207,208,209,210,213,215,218,219,308,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,283,239,240,241,242,243,244,245,246,247,248,249,250,309],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidClassProxyFactory:43","sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"method"}},{"position":"org.easymock.internal.MockBuilder:172","failures":[275,313],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1107","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[314],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:61","sourceCode":"throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int))","type":"CtThrowImpl"},"failures":[315],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"failures":[316],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,317,6,299,252,300,301,302,253,311,312,303,7,285,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,318,319,320,254,321,322,255,323,324,325,326,327,328,329,330,331,256,332,333,334,335,336,257,337,338,23,24,25,26,27,316,28,29,30,31,258,259,260,261,262,263,264,265,266,267,268,269,304,339,32,33,34,340,35,36,37,38,39,341,40,41,42,43,44,45,342,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,343,63,64,65,66,67,68,344,294,295,296,297,69,345,346,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,347,348,349,350,351,270,352,353,354,355,356,357,271,92,93,272,273,94,95,96,274,358,359,97,98,275,276,360,361,277,362,363,364,99,278,365,366,367,368,100,101,102,103,104,105,106,369,107,370,371,108,279,109,280,372,373,374,375,376,377,378,281,379,380,381,382,383,384,110,111,112,113,114,115,385,386,116,387,117,118,119,120,388,389,390,121,122,123,124,125,126,127,128,129,130,391,131,132,133,134,135,136,137,138,139,140,141,142,392,393,394,143,144,395,145,396,397,398,146,147,399,148,149,400,284,282,150,305,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,251,417,418,419,420,421,422,423,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,424,425,426,427,171,428,429,430,431,432,433,434,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,435,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,314,436,437,313,438,439,440,441,442,306,307,207,208,209,210,443,211,212,444,213,214,215,216,217,218,219,308,220,445,221,222,446,223,447,224,225,226,448,449,450,451,452,453,454,227,228,229,230,231,232,233,234,235,236,237,238,283,239,240,455,456,457,458,459,460,461,462,463,464,465,466,241,242,243,467,244,245,468,246,247,248,249,250,469,470,471,472,473,474,475,309,476,477,478,479,480,481],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"position":"org.easymock.internal.matchers.Null:35","failures":[41],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[7,285,482,483,484,485,486,29,291,360],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[487],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:65","sourceCode":"throw java.lang.Throwable","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[8,15,22,23,24,25,26,128,129,133,139,140,172,174,175,176,177,178,179,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,222,225,227,228,229,230,231,232],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:281","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:133","sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","type":"CtIfImpl"},"failures":[488],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:45","sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","type":"CtReturnImpl"},"failures":[36,38,50,53,62,489,310,490,491,492],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1177","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[10,64,66,67,130,142,215,217,218,224,225,226,298,493,494,495],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1026","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[311,311,312,312,22,36,37,40,41,42,43,48,50,51,53,54,60,61,62,64,84,137,138,141,146,147,401,405,406,415,419,424,180,181,182,183,184,185,215,233,234,235,236,237,461],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[301,302,253,311,311,312,312,7,496,497,254,255,256,257,25,29,31,271,92,93,272,94,95,96,498,274,358,97,98,275,276,361,277,499,362,100,101,103,104,105,106,107,108,279,109,280,115,116,394,143,144,145,148,149,400,314,313,309],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:326","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:184","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; ++int) {\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n    } \n    if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n        return false;\n    } \n}","type":"CtForImpl"},"failures":[285,482,483,484,500,501,291],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[10,64,67,68,130,305,191,195,196,198,201,215,218,219,223,224,225,226],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ClassProxyFactory:168","failures":[301,302,253,311,312,318,254,322,323,324,327,330,332,333,336,23,24,25,31,271,92,93,272,94,95,365,366,100,101,103,104,105,106,107,371,108,279,109,280,372,373,115,385,386,116,387,392,393,394,143,144,145,398,399,148,149,284,448,449,450,451,452,453,454,475,309,476,477,478,479,480,481],"status":-1,"binaryOperator":"java.lang.reflect.Method[] != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:43","sourceCode":"final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:99","sourceCode":"continue","type":"CtContinueImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[49],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[399,284],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"type":"type"}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[53,310],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":39,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":129,"org.easymock.tests2.UsageTest.argumentsOrdered":18,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":268,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":352,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":411,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":13,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":300,"org.easymock.tests2.DelegateToTest.testReturnException":32,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":228,"org.easymock.tests.MockingTest.testPartialClassMocking":143,"org.easymock.tests.MockClassControlTest.testToString":476,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":344,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":389,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":419,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":373,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":326,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":187,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":255,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":298,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":278,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":482,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":45,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":137,"org.easymock.tests2.UsageTest.wrongArguments":11,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":384,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":119,"org.easymock.samples.ExampleTest.answerVsDelegate":1,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":313,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":397,"org.easymock.tests2.UsageConstraintsTest.testNull":41,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":103,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":481,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":267,"org.easymock.tests2.CaptureTest.testPrimitive":76,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":141,"org.easymock.tests.UsageTest.moreThanOneArgument":130,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":206,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":102,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":182,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":462,"org.easymock.tests.UsageTest.argumentsOrdered":135,"org.easymock.tests.UsageVarargTest.varargIntAccepted":243,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":416,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":233,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":501,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":96,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":356,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":403,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":237,"org.easymock.tests.ReplayStateInvalidUsageTest.times":431,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":281,"org.easymock.tests2.DependencyTest.testClassMocking":363,"org.easymock.tests2.AnswerTest.answer":69,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":342,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":417,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":90,"org.easymock.tests2.CaptureTest.testAnd":73,"org.easymock.tests2.UsageTest.strictResetToDefault":9,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":108,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":290,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":181,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":239,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":262,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":466,"org.easymock.tests2.DelegateToTest.testDelegate":35,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":202,"org.easymock.tests.LimitationsTest.mockFinalMethod":387,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":231,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":125,"org.easymock.tests2.DependencyTest.testClassMockingSupport":364,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":282,"org.easymock.tests2.CaptureTest.testCapture1_2446744":77,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":369,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":200,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":88,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":426,"org.easymock.tests.UsageThrowableTest.throwError":172,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":437,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":357,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":184,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":338,"org.easymock.samples.PartialClassMockTest.testGetArea":253,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":427,"org.easymock.tests.MockingTest.testInterfaceMocking":395,"org.easymock.tests2.CompareToTest.testLessOrEqual":492,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":234,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":459,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":474,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":188,"org.easymock.tests2.UsageTest.niceToStrict":12,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":401,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":97,"org.easymock.tests2.MockBuilderTest.testCreateMock":361,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":334,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":381,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":196,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":263,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":442,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":306,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":117,"org.easymock.tests.UsageOverloadedMethodTest.overloading":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":331,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":336,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":50,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":222,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":162,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":126,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":49,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":82,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":467,"org.easymock.tests.MockClassControlTest.testEquals":480,"org.easymock.tests2.EasyMockSupportClassTest.testAll":254,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":149,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":204,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":496,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":123,"org.easymock.tests2.CaptureTest.testCaptureAll":74,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":89,"org.easymock.tests.MockNameTest.defaultName":435,"org.easymock.tests2.UsageConstraintsTest.testMatches":51,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":424,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":183,"org.easymock.samples.ExampleTest.voteForRemovals":5,"org.easymock.tests.UsageVarargTest.allKinds":250,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":224,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":124,"org.easymock.samples.BasicClassMockTest.testPrintContent":302,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":178,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":343,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":232,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":340,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":353,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":486,"org.easymock.tests2.UsageConstraintsTest.greaterThan":53,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":321,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":283,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":280,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":454,"org.easymock.samples.ExampleTest.voteForRemoval":2,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":111,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":372,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":438,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":106,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":115,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":8,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":360,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":408,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":260,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":174,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":319,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":227,"org.easymock.tests2.CaptureTest.testCaptureFirst":86,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":339,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":407,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":261,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":20,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":447,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":158,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":113,"org.easymock.tests2.UsageTest.moreThanOneArgument":10,"org.easymock.tests2.CaptureTest.testCapture2_2446744":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":418,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":277,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":249,"org.easymock.tests.GenericTest.testBridgedEquals":284,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":211,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":315,"org.easymock.tests.UsageExpectAndReturnTest.longType":154,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":121,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":258,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":499,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":205,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":461,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":58,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":203,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":456,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":180,"org.easymock.tests.UsageCallCountTest.tooManyCalls":212,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":207,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":335,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":159,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":383,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":192,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":177,"org.easymock.tests.MockingTest.testNiceClassMocking":398,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":92,"org.easymock.tests.MockingTest.testClassMocking":393,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":498,"org.easymock.tests2.UsageConstraintsTest.testContains":48,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":307,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":25,"org.easymock.tests2.UsageConstraintsTest.testFind":40,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":128,"org.easymock.tests.MockTypeTest.fromEasyMockClass":436,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":444,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":28,"org.easymock.tests.UsageExpectAndReturnTest.object":161,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":107,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":382,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":266,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":483,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":245,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":472,"org.easymock.tests.UsageTest.exactCallCountByLastCall":136,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":185,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":406,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":463,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":388,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":285,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":167,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":241,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":221,"org.easymock.tests.MockClassControlTest.testHashCode":479,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":348,"org.easymock.tests2.EasyMockSupportTest.testVerify":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":329,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":464,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":441,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":220,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":87,"org.easymock.tests.UsageVarargTest.varargCharAccepted":244,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":63,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":423,"org.easymock.tests2.UsageTest.openCallCountByLastCall":14,"org.easymock.tests.DefaultClassInstantiatorTest.object":448,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":269,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":440,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":470,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":330,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":175,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":377,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":347,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":478,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":279,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":193,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":168,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":455,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":477,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":257,"org.easymock.tests2.UsageTest.resumeIfFailure":19,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":314,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":230,"org.easymock.tests2.StubTest.stubWithReturnValue":22,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":291,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":160,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":59,"org.easymock.tests2.SerializationTest.testAllMockedMethod":31,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":251,"org.easymock.samples.SupportTest.voteForRemovals":252,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":399,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":350,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":199,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":422,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":345,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":390,"org.easymock.tests.UsageExpectAndThrowTest.object":197,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":56,"org.easymock.tests2.DelegateToTest.testWrongClass":34,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":146,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":147,"org.easymock.tests.UsageStrictMockTest.range":217,"org.easymock.samples.ConstructorCalledMockTest.testTax":311,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":367,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":265,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":271,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":487,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":198,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":275,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":433,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":134,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":318,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":118,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":460,"org.easymock.tests2.CaptureTest.testCaptureNone":81,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":488,"org.easymock.tests.UsageUnorderedTest.message":142,"org.easymock.tests.UsageVerifyTest.twoReturns":226,"org.easymock.tests.UsageVarargTest.varargByteAccepted":248,"org.easymock.tests2.ThreadingTest.testThreadSafe":110,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":332,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":210,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":473,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":301,"org.easymock.tests2.CaptureTest.testCapture_2617107":75,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":305,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":420,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":140,"org.easymock.tests2.UsageConstraintsTest.any":46,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":430,"org.easymock.tests2.StubTest.stub":21,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":457,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":421,"org.easymock.tests.UsageExpectAndThrowTest.longType":190,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":229,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":452,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":429,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":65,"org.easymock.tests2.SerializationTest.testClass":29,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":270,"org.easymock.tests.LimitationsTest.mockNativeMethod":116,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":400,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":170,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":376,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":68,"org.easymock.tests2.NameTest.nameForMocksControl":297,"org.easymock.tests2.MockedExceptionTest.testMockedException":24,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":378,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":322,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":133,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":191,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":145,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":316,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":100,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":276,"org.easymock.tests.MockingTest.testNicePartialClassMocking":144,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":105,"org.easymock.tests2.CompareToTest.testCompareEqual":490,"org.easymock.tests2.CaptureTest.testCaptureLast":80,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":374,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":150,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":44,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":95,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":57,"org.easymock.tests.MockingTest.testTwoMocks":394,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":288,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":151,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":195,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":17,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":61,"org.easymock.samples.ExampleTest.removeNonExistingDocument":317,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":171,"org.easymock.tests.UsageStrictMockTest.differentMethods":218,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":380,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":349,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":450,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":112,"org.easymock.tests2.MockBuilderTest.testCreateMockString":362,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":475,"org.easymock.tests.UsageExpectAndThrowTest.floatType":189,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":323,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":52,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":320,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":70,"org.easymock.tests.UsageVerifyTest.twoThrows":225,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":445,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":256,"org.easymock.samples.ExampleTest.voteAgainstRemoval":3,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":458,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":412,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":109,"org.easymock.tests.LimitationsTest.privateConstructor":386,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":287,"org.easymock.tests2.UsageConstraintsTest.testNotNull":60,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":179,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":23,"org.easymock.tests2.UsageTest.defaultResetToNice":16,"org.easymock.samples.ExampleTest.voteAgainstRemovals":0,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":413,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":166,"org.easymock.tests.UsageVarargTest.differentLength":468,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":375,"org.easymock.tests2.CallbackTest.callback":91,"org.easymock.tests2.UsageConstraintsTest.equals":341,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":370,"org.easymock.tests.UsageTest.openCallCountByLastCall":132,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":36,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":139,"org.easymock.tests.UsageCallCountTest.tooFewCalls":208,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":272,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":120,"org.easymock.tests.UsageThrowableTest.throwCheckedException":176,"org.easymock.tests.MockingTest.testStrictClassMocking":392,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":186,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":94,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":93,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":379,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":432,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":273,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":72,"org.easymock.tests2.CompareToTest.testGreateOrEqual":491,"org.easymock.tests.ObjectMethodsTest.testHashCode":471,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":500,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":114,"org.easymock.tests2.NameTest.nameForNiceMock":296,"org.easymock.tests2.DependencyTest.testInterfaceMocking":99,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":484,"org.easymock.samples.ExampleTest.addDocument":4,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":333,"org.easymock.tests2.DelegateToTest.testStubDelegate":33,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":337,"org.easymock.tests2.AnswerTest.stubAnswer":71,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":215,"org.easymock.tests.UsageVarargTest.varargLongAccepted":247,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":219,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":410,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":169,"org.easymock.tests.UsageExpectAndReturnTest.floatType":153,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":7,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":312,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":446,"org.easymock.tests.UsageThrowableTest.noUpperLimit":173,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":54,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":355,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":37,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":365,"org.easymock.tests2.SerializationTest.test":30,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":78,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":449,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":152,"org.easymock.tests2.UsageConstraintsTest.testSame":42,"org.easymock.samples.SupportTest.addDocument":299,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":428,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":324,"org.easymock.tests.GenericTest.testPackageScope":148,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":465,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":405,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":354,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":396,"org.easymock.tests2.NameTest.nameForMock":294,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":163,"org.easymock.tests2.UsageStrictMockTest.differentMethods":67,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":293,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":371,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":155,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":201,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":469,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":240,"org.easymock.tests2.MockedExceptionTest.testRealException":26,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":439,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":415,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":368,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":414,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":64,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":434,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":138,"org.easymock.tests2.NameTest.nameForStrictMock":295,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":359,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":27,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":104,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":366,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":493,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":451,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":55,"org.easymock.tests.ErrorMessageTest.testGetters":494,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":274,"org.easymock.tests2.UsageStrictMockTest.range":66,"org.easymock.tests2.UsageConstraintsTest.lessThan":62,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":351,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":485,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":409,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":259,"org.easymock.tests2.CaptureTest.testCaptureRightOne":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":328,"org.easymock.tests2.UsageConstraintsTest.testOr":43,"org.easymock.tests.UsageRangeTest.combination":238,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":101,"org.easymock.tests.UsageTest.wrongArguments":131,"org.easymock.tests2.MockBuilderTest.testWithConstructor":289,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":325,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":309,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":156,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":402,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":164,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":453,"org.easymock.tests.UsageVarargTest.varargShortAccepted":246,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":443,"org.easymock.tests2.UsageConstraintsTest.cmpTo":47,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":346,"org.easymock.tests2.CompareToTest.testLessThan":489,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":404,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":15,"org.easymock.tests2.CaptureTest.testCaptureFromStub":84,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":425,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":358,"org.easymock.tests.UsageTest.unexpectedCallWithArray":391,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":214,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":209,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":292,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":165,"org.easymock.tests2.UsageConstraintsTest.constraints":38,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":216,"org.easymock.samples.ExampleTest.addAndChangeDocument":6,"org.easymock.tests.UsageStrictMockTest.testVerify":308,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":303,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":213,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":122,"org.easymock.tests2.CompareToTest.testGreateThan":310,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":79,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":497,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":235,"org.easymock.tests.LimitationsTest.abstractClass":385,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":157,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":223,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":236,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":495,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":242,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":264}}]

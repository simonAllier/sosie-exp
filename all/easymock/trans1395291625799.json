[{"transplant":{"position":"org.easymock.internal.MocksControl:159","sourceCode":"final java.lang.ClassCastException java.lang.ClassCastException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,52,53,53,54,55,56],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:119","sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(this.java.util.Properties.remove(java.lang.String)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:89","sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"key","properties":"properties","key":"key"}},{"position":"org.easymock.internal.ArgumentToString:36","failures":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"status":-1,"binaryOperator":"java.lang.Object instanceof java.lang.String","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"return java.lang.reflect.Field.getType().isAssignableFrom(org.easymock.internal.Injection.getMock().getClass())","type":"CtReturnImpl"},"failures":[87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[105,106],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:840","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1542","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(long))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:97","sourceCode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[107,0,1,2,3,108,109,110,111,112,113,114,115,105,106,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,57,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,4,5,6,7,156,8,9,10,157,12,13,158,14,15,16,18,20,21,22,159,160,26,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,27,30,32,34,35,37,58,59,60,176,177,178,179,180,181,182,183,41,42,43,184,70,185,186,187,188,189,190,44,191,72,74,192,193,194,195,78,79,80,196,197,198,199,200,201,202,46,86,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,56],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.Capture:110","sourceCode":"break","type":"CtBreakImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:89","failures":[20,21,232,29,32],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"failures":[233],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[234],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:44","failures":[],"status":0,"binaryOperator":"(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:72","sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:74","sourceCode":"java.util.Set<java.lang.reflect.Method>.add(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[1,2,3,10,17,20,21,235,28,30,31,32,34,35,37,39,48,50,51,56],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[149],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:318","failures":[196,198],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.ExpectedInvocation:75","failures":[122,236,141,237,143,238,239,144,145,149],"status":-1,"binaryOperator":"(((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>)))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:37","failures":[240,241,107,242,243,111,113,115,105,129,132,133,57,134,244,135,136,138,139,140,141,144,145,147,149,150,151,152,154,245,155,10,157,13,15,21,159,246,160,161,162,163,164,165,166,167,168,170,171,172,173,174,175,32,34,35,247,58,248,59,60,249,176,177,178,179,180,181,182,183,184,70,185,186,187,188,189,190,191,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,72,73,74,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,78,292,79,80,293,196,294,197,198,199,200,201,202,47,86,295,296,297,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,298,299,226,103,104,300,227,54,55,228,301,229,230,302,231,303],"status":-1,"binaryOperator":"(this.java.lang.Object) == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:41","sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","type":"CtTryImpl"},"failures":[304,305,306],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:682","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:83","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"failures":[307,308,309,310,311,312,313,314,4,13,19,22,235,87,88,89,90,161,91,92,93,94,165,168,170,95,96,97,98,176,99,100,101,102,315,316,317,103,104],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[119],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"expected","actual":"actual","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[318],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:180","failures":[10,319,320,321,322,323,324,325,27,326,327,328,329],"status":-1,"binaryOperator":"(java.lang.Class<?>[].int) != (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[330,331],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:665","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[116,191,332,274,225,226],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:40","sourceCode":"return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]))","type":"CtReturnImpl"},"failures":[240,333,241,107,242,334,243,0,1,2,3,108,109,110,111,112,113,114,115,105,106,335,116,117,118,119,120,121,122,123,124,125,126,127,236,128,129,130,131,132,133,57,336,134,244,135,136,137,337,338,138,139,140,141,237,142,143,238,239,144,145,146,147,339,148,149,150,151,152,153,154,311,340,341,245,155,4,5,6,7,156,8,9,10,157,11,12,13,158,14,15,16,18,19,20,21,22,159,342,318,246,160,343,344,345,26,346,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,27,30,32,34,35,37,39,347,58,248,59,60,249,176,348,349,350,351,177,178,352,353,354,355,356,357,179,180,181,182,183,41,42,43,330,358,359,184,70,71,360,185,186,361,362,187,188,189,190,363,364,365,44,191,332,366,367,368,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,369,72,73,74,192,193,194,195,270,271,272,273,274,275,285,370,371,286,287,288,289,290,372,373,75,76,331,374,375,376,77,78,292,79,80,293,196,294,197,198,199,200,201,202,46,48,86,377,295,296,297,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,298,299,226,103,52,52,53,53,227,228,301,229,230,231,303,56],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"method","finalizeMethod":"method"}},{"position":"org.easymock.internal.ReflectionUtils:107","failures":[378,379,380,381,382,0,383,384,1,307,385,386,387,308,388,389,390,391,2,309,392,393,394,395,3,396,397,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,398,399,19,20,21,22,400,235,24,344,345,26,27,326,28,29,30,31,401,32,33,34,35,328,36,37,38,39,402,403,404,40,41,42,43,405,406,407,44,408,45,409,410,411,412,304,413,414,415,46,47,48,416,377,49,417,418,419,420,421,422,50,51,52,52,53,53,54,55,56],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:32","sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[10,320,321,322,323,325,27,326,327,328],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1235","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1385","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:49","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[119],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:62","failures":[240,333,241,107,242,334,243,378,423,424,379,425,426,380,381,382,0,383,384,1,307,385,386,387,308,388,389,390,391,2,309,392,393,394,395,3,396,397,108,109,110,111,427,112,113,114,115,105,106,335,116,117,118,119,120,121,122,123,124,125,126,127,236,128,129,130,131,132,133,57,336,134,244,135,136,137,337,338,138,139,140,141,237,142,143,238,239,144,145,146,147,339,148,149,150,428,151,152,153,154,310,311,312,313,314,340,429,341,245,155,4,5,6,7,430,156,8,9,431,10,157,11,12,13,158,14,15,16,17,432,18,398,399,19,20,21,22,400,235,159,342,318,246,160,343,344,345,26,346,87,88,89,433,90,161,91,92,93,434,435,94,162,163,164,165,166,167,168,169,170,171,172,173,436,437,438,174,175,27,326,28,30,31,401,32,33,34,35,439,328,36,37,39,347,247,58,248,59,60,249,440,95,96,97,441,98,176,99,100,101,442,443,102,348,349,350,444,445,446,447,448,449,450,402,351,451,177,178,452,352,453,353,354,355,356,357,179,180,181,182,183,403,404,40,41,42,454,43,455,456,405,330,358,359,184,70,71,360,185,186,361,362,187,188,189,190,363,364,365,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,406,407,44,408,191,332,366,367,368,479,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,480,481,369,482,483,484,485,486,487,45,72,73,74,192,193,194,195,270,271,272,273,274,275,488,315,489,490,491,492,493,494,495,496,497,498,276,277,278,499,279,280,500,281,282,283,284,285,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,370,517,518,519,520,521,371,522,409,410,411,412,304,413,414,286,287,288,289,290,523,372,373,524,525,75,76,526,331,374,375,376,291,77,78,292,79,80,293,527,196,294,197,198,199,200,201,202,415,46,47,48,416,86,377,49,417,418,419,420,421,422,50,528,529,530,316,51,317,531,295,532,296,297,533,203,534,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,298,299,226,103,104,52,53,300,227,54,55,228,301,229,230,302,231,535,303,56],"status":-1,"binaryOperator":"java.io.InputStream != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1433","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:113","sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:115","sourceCode":"java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:786","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:866","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Injector:229","sourceCode":"org.easymock.internal.Injection org.easymock.internal.Injection = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:233","sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1079","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[10,157,320,321,322,323,325,344,27,326,28,327,35,328,36,39],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:122","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:57","sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1249","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":111,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":184,"org.easymock.tests2.UsageTest.argumentsOrdered":338,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":172,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":511,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":244,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":103,"org.easymock.tests2.DelegateToTest.testReturnException":241,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":271,"org.easymock.tests.MockingTest.testPartialClassMocking":41,"org.easymock.tests.MockClassControlTest.testToString":417,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":310,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":352,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":519,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":235,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":387,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":1,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":250,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":175,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":478,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":320,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":106,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":224,"org.easymock.tests2.UsageTest.wrongArguments":336,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":94,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":368,"org.easymock.samples.ExampleTest.answerVsDelegate":301,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":51,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":456,"org.easymock.tests2.UsageConstraintsTest.testNull":113,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":14,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":422,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":171,"org.easymock.tests2.CaptureTest.testPrimitive":142,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":226,"org.easymock.tests.UsageTest.moreThanOneArgument":70,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":269,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":158,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":288,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":523,"org.easymock.tests.UsageTest.argumentsOrdered":362,"org.easymock.tests.UsageVarargTest.varargIntAccepted":278,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":516,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":69,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":179,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":28,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":443,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":424,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":33,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":503,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":183,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":462,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":65,"org.easymock.tests.ReplayStateInvalidUsageTest.times":495,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":161,"org.easymock.tests2.DependencyTest.testClassMocking":437,"org.easymock.tests2.AnswerTest.answer":159,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":335,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":517,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":444,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":529,"org.easymock.tests2.CaptureTest.testAnd":140,"org.easymock.tests2.UsageTest.strictResetToDefault":133,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":19,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":287,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":166,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":194,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":525,"org.easymock.tests2.DelegateToTest.testDelegate":243,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":461,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":265,"org.easymock.tests.LimitationsTest.mockFinalMethod":408,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":274,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":357,"org.easymock.tests2.DependencyTest.testClassMockingSupport":438,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":75,"org.easymock.tests2.CaptureTest.testCapture1_2446744":143,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":432,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":263,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":349,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":489,"org.easymock.tests.UsageThrowableTest.throwError":196,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":316,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":102,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":290,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":397,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":465,"org.easymock.samples.PartialClassMockTest.testGetArea":56,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":490,"org.easymock.tests.MockingTest.testInterfaceMocking":454,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":180,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":364,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":402,"org.easymock.tests2.UsageTest.niceToStrict":134,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":251,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":308,"org.easymock.tests2.ThreadingTest.testChangeDefault":428,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":501,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":32,"org.easymock.tests2.MockBuilderTest.testCreateMock":36,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":393,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":93,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":62,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":259,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":167,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":528,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":375,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":480,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":366,"org.easymock.tests.UsageOverloadedMethodTest.overloading":189,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":391,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":120,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":297,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":188,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":215,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":119,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":305,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":146,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":499,"org.easymock.tests.MockClassControlTest.testEquals":421,"org.easymock.tests2.EasyMockSupportClassTest.testAll":0,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":47,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":267,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":23,"org.easymock.tests2.CaptureTest.testCaptureAll":141,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":350,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":355,"org.easymock.tests.MockNameTest.defaultName":451,"org.easymock.tests2.UsageConstraintsTest.testMatches":121,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":488,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":289,"org.easymock.samples.ExampleTest.voteForRemovals":231,"org.easymock.tests.UsageVarargTest.allKinds":285,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":72,"org.easymock.samples.BasicClassMockTest.testPrintContent":55,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":356,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":201,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":347,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":100,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":275,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":334,"org.easymock.tests2.UsageConstraintsTest.greaterThan":123,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":325,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":383,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":193,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":22,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":466,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":414,"org.easymock.samples.ExampleTest.voteForRemoval":229,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":400,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":151,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":317,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":17,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":458,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":132,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":45,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":328,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":508,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":164,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":381,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":270,"org.easymock.tests2.CaptureTest.testCaptureFirst":149,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":333,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":507,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":165,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":139,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":534,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":211,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":153,"org.easymock.tests2.CaptureTest.testCapture2_2446744":148,"org.easymock.tests2.UsageTest.moreThanOneArgument":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":518,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":37,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":284,"org.easymock.tests.GenericTest.testBridgedEquals":416,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":486,"org.easymock.tests.UsageExpectAndReturnTest.longType":207,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":162,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":353,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":38,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":268,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":236,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":351,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":266,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":286,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":358,"org.easymock.tests.UsageCallCountTest.tooManyCalls":487,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":82,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":394,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":212,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":435,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":255,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":200,"org.easymock.tests.MockingTest.testNiceClassMocking":405,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":5,"org.easymock.tests.MockingTest.testClassMocking":404,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":481,"org.easymock.tests2.UsageConstraintsTest.testContains":118,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":29,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":26,"org.easymock.tests2.UsageConstraintsTest.testFind":112,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":190,"org.easymock.tests.MockTypeTest.fromEasyMockClass":530,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":341,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":376,"org.easymock.tests.UsageExpectAndReturnTest.object":214,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":18,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":434,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":170,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":280,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":321,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":449,"org.easymock.tests.UsageTest.exactCallCountByLastCall":187,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":191,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":506,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":452,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":372,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":326,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":220,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":276,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":296,"org.easymock.tests.MockClassControlTest.testHashCode":420,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":96,"org.easymock.tests2.EasyMockSupportTest.testVerify":436,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":389,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":64,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":373,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":295,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":374,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":348,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":445,"org.easymock.tests.UsageVarargTest.varargCharAccepted":279,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":247,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":522,"org.easymock.tests2.UsageTest.openCallCountByLastCall":135,"org.easymock.tests.DefaultClassInstantiatorTest.object":409,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":173,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":331,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":447,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":85,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":390,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":257,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":198,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":433,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":95,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":464,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":419,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":20,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":256,"org.easymock.tests.ReplayStateInvalidCallsTest.times":470,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":221,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":330,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":471,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":418,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":3,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":66,"org.easymock.tests2.UsageTest.resumeIfFailure":138,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":50,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":423,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":273,"org.easymock.tests2.StubTest.stubWithReturnValue":155,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":327,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":128,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":213,"org.easymock.tests2.SerializationTest.testAllMockedMethod":11,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":370,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":68,"org.easymock.samples.SupportTest.voteForRemovals":227,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":415,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":441,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":262,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":371,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":342,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":453,"org.easymock.tests.UsageExpectAndThrowTest.object":260,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":126,"org.easymock.tests2.DelegateToTest.testWrongClass":242,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":468,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":177,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":178,"org.easymock.samples.ConstructorCalledMockTest.testTax":52,"org.easymock.tests.UsageStrictMockTest.range":79,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":425,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":169,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":4,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":234,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":261,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":34,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":497,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":361,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":380,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":367,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":81,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":460,"org.easymock.tests2.CaptureTest.testCaptureNone":145,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":365,"org.easymock.tests.UsageUnorderedTest.message":86,"org.easymock.tests.UsageVerifyTest.twoReturns":74,"org.easymock.tests.UsageVarargTest.varargByteAccepted":283,"org.easymock.tests2.ThreadingTest.testThreadSafe":150,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":309,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":484,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":450,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":54,"org.easymock.tests2.CaptureTest.testCapture_2617107":237,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":526,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":520,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":299,"org.easymock.tests2.UsageConstraintsTest.any":116,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":494,"org.easymock.tests2.StubTest.stub":245,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":359,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":521,"org.easymock.tests.UsageExpectAndThrowTest.longType":253,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":272,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":304,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":493,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":248,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":176,"org.easymock.tests2.SerializationTest.testClass":10,"org.easymock.tests.LimitationsTest.mockNativeMethod":44,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":48,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":223,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":25,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":89,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":476,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":249,"org.easymock.tests2.NameTest.nameForMocksControl":314,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":90,"org.easymock.tests2.MockedExceptionTest.testMockedException":345,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":384,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":186,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":429,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":43,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":254,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":12,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":35,"org.easymock.tests.MockingTest.testNicePartialClassMocking":42,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":16,"org.easymock.tests2.CaptureTest.testCaptureLast":144,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":87,"org.easymock.tests2.CompareToTest.testCompareEqual":233,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":319,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":76,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":475,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":105,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":9,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":127,"org.easymock.tests.MockingTest.testTwoMocks":40,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":472,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":431,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":204,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":258,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":337,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":130,"org.easymock.samples.ExampleTest.removeNonExistingDocument":535,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":491,"org.easymock.tests.UsageStrictMockTest.differentMethods":80,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":92,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":97,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":440,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":411,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":152,"org.easymock.tests2.ConstraintsToStringTest.andToString":67,"org.easymock.tests2.MockBuilderTest.testCreateMockString":39,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":377,"org.easymock.tests.UsageExpectAndThrowTest.floatType":252,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":307,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":382,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":246,"org.easymock.tests.UsageVerifyTest.twoThrows":73,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":532,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":2,"org.easymock.samples.ExampleTest.voteAgainstRemoval":230,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":512,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":363,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":21,"org.easymock.tests.LimitationsTest.privateConstructor":407,"org.easymock.tests2.UsageConstraintsTest.testNotNull":129,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":202,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":344,"org.easymock.tests2.UsageTest.defaultResetToNice":137,"org.easymock.samples.ExampleTest.voteAgainstRemovals":228,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":513,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":219,"org.easymock.tests.UsageVarargTest.differentLength":500,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":88,"org.easymock.tests2.CallbackTest.callback":240,"org.easymock.tests2.UsageConstraintsTest.equals":427,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":398,"org.easymock.tests.UsageTest.openCallCountByLastCall":185,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":108,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":298,"org.easymock.tests.UsageCallCountTest.tooFewCalls":482,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":7,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":479,"org.easymock.tests.UsageThrowableTest.throwCheckedException":199,"org.easymock.tests.MockingTest.testStrictClassMocking":403,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":83,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":8,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":332,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":6,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":91,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":496,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":156,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":343,"org.easymock.tests.ObjectMethodsTest.testHashCode":448,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":324,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":474,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":154,"org.easymock.tests2.NameTest.nameForNiceMock":313,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":469,"org.easymock.tests2.DependencyTest.testInterfaceMocking":174,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":322,"org.easymock.samples.ExampleTest.addDocument":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":392,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":396,"org.easymock.tests2.DelegateToTest.testStubDelegate":107,"org.easymock.tests2.AnswerTest.stubAnswer":160,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":78,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":439,"org.easymock.tests.UsageVarargTest.varargLongAccepted":282,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":293,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":510,"org.easymock.tests.UsageExpectAndReturnTest.floatType":206,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":222,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":27,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":53,"org.easymock.tests2.ConstraintsToStringTest.orToString":61,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":533,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":442,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":124,"org.easymock.tests.UsageThrowableTest.noUpperLimit":294,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":109,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":378,"org.easymock.tests2.SerializationTest.test":157,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":238,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":306,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":410,"org.easymock.tests2.UsageConstraintsTest.testSame":114,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":205,"org.easymock.samples.SupportTest.addDocument":300,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":430,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":459,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":492,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":385,"org.easymock.tests.GenericTest.testPackageScope":46,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":524,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":505,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":101,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":455,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":457,"org.easymock.tests2.NameTest.nameForMock":311,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":216,"org.easymock.tests2.UsageStrictMockTest.differentMethods":60,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":399,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":208,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":264,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":446,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":195,"org.easymock.tests2.MockedExceptionTest.testRealException":346,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":531,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":515,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":426,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":84,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":329,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":514,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":58,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":498,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":225,"org.easymock.tests2.NameTest.nameForStrictMock":312,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":401,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":340,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":15,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":379,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":412,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":125,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":30,"org.easymock.tests2.UsageStrictMockTest.range":59,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":463,"org.easymock.tests2.UsageConstraintsTest.lessThan":131,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":98,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":232,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":509,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":163,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":323,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":388,"org.easymock.tests2.CaptureTest.testCaptureRightOne":147,"org.easymock.tests2.UsageConstraintsTest.testOr":115,"org.easymock.tests.UsageRangeTest.combination":192,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":13,"org.easymock.tests.UsageTest.wrongArguments":360,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":386,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":49,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":209,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":502,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":217,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":413,"org.easymock.tests.UsageVarargTest.varargShortAccepted":281,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":485,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":477,"org.easymock.tests2.UsageConstraintsTest.cmpTo":117,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":318,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":504,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":136,"org.easymock.tests2.CaptureTest.testCaptureFromStub":339,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":315,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":31,"org.easymock.tests.UsageTest.unexpectedCallWithArray":71,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":473,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":77,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":483,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":218,"org.easymock.tests2.UsageConstraintsTest.constraints":110,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":292,"org.easymock.samples.ExampleTest.addAndChangeDocument":303,"org.easymock.tests2.ConstraintsToStringTest.notToString":63,"org.easymock.tests.UsageStrictMockTest.testVerify":527,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":104,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":291,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":354,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":239,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":181,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":24,"org.easymock.tests.LimitationsTest.abstractClass":406,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":210,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":182,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":203,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":168,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":277}}]

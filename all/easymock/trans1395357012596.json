[{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:188","sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"methodName","key":"methodName"}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:117","sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[1],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:249","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[2],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[3],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:216","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[4,5],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:53","sourceCode":"return false","type":"CtReturnImpl"},"failures":[6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:152","sourceCode":"boolean boolean = true","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:198","sourceCode":"return true","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:707","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[7],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[8,9],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:193","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isArray()) {\n        final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n                return false;\n            } \n            break;\n        } \n    } \n    if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:36","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[11,16,24,29],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:41","sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","type":"CtTryImpl"},"failures":[33,34,35],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:140","sourceCode":"java.lang.StringBuilder.append(\":\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,10,71,11,12,72,73,74,14,75,76,15,16,77,78,79,80,7,81,82,83,6,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,1,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,22,23,160,24,25,161,162,163,164,165,166,27,28,29,167,168,169,170,171,172,173,174,175,176,31,32,177,178,179,180,181,182,183,184,185,186],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:69","sourceCode":"return java.lang.StringBuffer.toString()","type":"CtReturnImpl"},"failures":[11,14,15,16,22,24,187,27,28,29,168,188,189,31,32],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:33","sourceCode":"new java.util.ArrayList<org.easymock.internal.ExpectedInvocationAndResult>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:734","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:53","sourceCode":"return false","type":"CtReturnImpl"},"failures":[6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:800","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:85","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object));\n} ","type":"CtIfImpl"},"failures":[190,191,192],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:222","failures":[193,194,195,5],"status":-1,"binaryOperator":"(\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:89","sourceCode":"return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object)","type":"CtReturnImpl"},"failures":[38,196,197,198,40,41,199,200,201,43,45,47,48,49,50,58,202,203,204,66,205,206,10,71,11,12,72,73,13,14,75,76,15,16,207,77,208,6,108,209,110,111,114,115,17,18,19,20,210,211,131,212,134,135,213,214,215,193,194,139,216,195,5,217,22,23,160,24,25,161,218,219,26,187,27,28,29,167,168,169,220,221,222,30,31,32,223,224,225,226,227,228,229],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1607","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(char[]))","type":"CtInvocationImpl"},"failures":[83],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[230,231,116,232,233,234,2,235,172,236,237,238,239,240,241,9,242,243],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1107","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[36,244,245,37,246,247,38,197,39,40,41,200,42,43,44,45,46,47,48,248,49,50,51,52,54,55,57,58,59,60,61,62,63,249,64,203,65,66,250,67,251,68,252,69,10,11,12,73,74,13,75,253,254,255,207,77,256,257,208,78,258,79,259,260,80,7,81,82,261,83,262,263,6,264,265,84,85,86,88,89,266,267,268,269,90,91,92,93,94,95,270,271,272,96,97,98,99,101,273,104,105,106,107,274,275,1,108,109,110,111,112,113,114,115,230,231,116,232,276,233,277,277,278,278,118,121,122,123,124,125,127,128,211,279,234,280,281,282,283,284,136,137,138,139,285,286,287,288,289,140,141,290,291,3,8,292,293,294,295,143,144,296,145,297,298,299,300,146,301,302,303,304,147,305,306,307,308,148,149,150,151,152,153,154,155,156,157,158,5,23,24,25,309,310,162,163,311,164,312,313,314,315,165,316,317,318,319,166,320,321,322,323,324,325,326,219,26,327,328,167,168,169,329,330,331,170,171,172,173,332,174,333,334,335,336,337,236,237,238,239,240,241,9,242,243,338,339,340,175,176,341,30,31,32,342,343,344],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":78,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":219,"org.easymock.tests2.UsageTest.argumentsOrdered":16,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":51,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":239,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":205,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":76,"org.easymock.tests2.StubTest.stubWithReturnValue":233,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":315,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":88,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":117,"org.easymock.tests2.SerializationTest.testAllMockedMethod":56,"org.easymock.tests2.DelegateToTest.testReturnException":67,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":291,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":237,"org.easymock.tests.MockingTest.testPartialClassMocking":156,"org.easymock.samples.SupportTest.voteForRemovals":121,"org.easymock.tests.MockClassControlTest.testToString":213,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":339,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":302,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":204,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":294,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":91,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":3,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":244,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":340,"org.easymock.tests.UsageExpectAndThrowTest.object":146,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":21,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":95,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":85,"org.easymock.tests2.DelegateToTest.testWrongClass":68,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":342,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":343,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":7,"org.easymock.tests2.UsageTest.wrongArguments":14,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":170,"org.easymock.samples.ConstructorCalledMockTest.testTax":277,"org.easymock.tests.UsageStrictMockTest.range":24,"org.easymock.samples.ExampleTest.answerVsDelegate":123,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":248,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":227,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":109,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":0,"org.easymock.tests2.UsageConstraintsTest.testNull":79,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":301,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":60,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":50,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":40,"org.easymock.tests2.CaptureTest.testPrimitive":101,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":332,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":308,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":235,"org.easymock.tests.UsageTest.moreThanOneArgument":26,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":28,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":59,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":282,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":326,"org.easymock.tests2.CaptureTest.testCaptureNone":105,"org.easymock.tests.UsageUnorderedTest.message":168,"org.easymock.tests.UsageVerifyTest.twoReturns":32,"org.easymock.tests.UsageVarargTest.varargByteAccepted":184,"org.easymock.tests2.ThreadingTest.testThreadSafe":270,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":333,"org.easymock.tests.UsageTest.argumentsOrdered":29,"org.easymock.tests.UsageVarargTest.varargIntAccepted":179,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":133,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":221,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":129,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":285,"org.easymock.tests2.CaptureTest.testCapture_2617107":100,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":196,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":173,"org.easymock.tests2.UsageConstraintsTest.any":81,"org.easymock.tests2.StubTest.stub":276,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":289,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":243,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":238,"org.easymock.tests.UsageExpectAndThrowTest.longType":144,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":33,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":71,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":66,"org.easymock.tests2.SerializationTest.testClass":54,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":108,"org.easymock.tests.LimitationsTest.mockNativeMethod":174,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":323,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":290,"org.easymock.tests2.AnswerTest.answer":36,"org.easymock.tests2.CaptureTest.testAnd":98,"org.easymock.tests2.UsageTest.strictResetToDefault":74,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":202,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":72,"org.easymock.tests2.NameTest.nameForMocksControl":20,"org.easymock.tests2.MockedExceptionTest.testMockedException":231,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":281,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":330,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":46,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":328,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":337,"org.easymock.tests2.DelegateToTest.testDelegate":69,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":296,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":158,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":57,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":41,"org.easymock.tests.MockingTest.testNicePartialClassMocking":157,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":147,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":62,"org.easymock.tests2.CaptureTest.testCaptureLast":104,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":240,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":5,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":80,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":115,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":86,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":195,"org.easymock.tests2.CaptureTest.testCapture1_2446744":273,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":309,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":303,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":299,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":15,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":266,"org.easymock.tests.UsageThrowableTest.throwError":148,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":4,"org.easymock.tests.UsageStrictMockTest.differentMethods":25,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":226,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":272,"org.easymock.tests2.MockBuilderTest.testCreateMockString":201,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":190,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":284,"org.easymock.tests.UsageExpectAndThrowTest.floatType":143,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":6,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":37,"org.easymock.tests.UsageVerifyTest.twoThrows":31,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":92,"org.easymock.samples.PartialClassMockTest.testGetArea":118,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":286,"org.easymock.samples.ExampleTest.voteAgainstRemoval":125,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":325,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":324,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":64,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":295,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":222,"org.easymock.tests2.UsageTest.niceToStrict":75,"org.easymock.tests2.UsageConstraintsTest.testNotNull":89,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":230,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":155,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":39,"org.easymock.tests2.UsageTest.defaultResetToNice":255,"org.easymock.tests2.MockBuilderTest.testCreateMock":199,"org.easymock.samples.ExampleTest.voteAgainstRemovals":122,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":166,"org.easymock.tests.UsageVarargTest.differentLength":223,"org.easymock.tests2.CallbackTest.callback":38,"org.easymock.tests.UsageTest.openCallCountByLastCall":327,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":300,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":47,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":256,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":293,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":210,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":172,"org.easymock.tests.UsageCallCountTest.tooFewCalls":131,"org.easymock.tests.UsageOverloadedMethodTest.overloading":176,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":262,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":138,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":316,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":112,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":175,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":83,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":34,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":106,"org.easymock.tests.UsageThrowableTest.throwCheckedException":152,"org.easymock.tests2.EasyMockSupportClassTest.testAll":90,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":142,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":306,"org.easymock.tests2.CaptureTest.testCaptureAll":99,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":234,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":114,"org.easymock.tests.MockNameTest.defaultName":218,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":209,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":111,"org.easymock.tests2.UsageConstraintsTest.testMatches":263,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":113,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":247,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":283,"org.easymock.tests.ObjectMethodsTest.testHashCode":192,"org.easymock.samples.ExampleTest.voteForRemovals":127,"org.easymock.tests2.NameTest.nameForNiceMock":19,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":97,"org.easymock.tests.UsageVarargTest.allKinds":186,"org.easymock.tests2.DependencyTest.testInterfaceMocking":94,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":30,"org.easymock.samples.BasicClassMockTest.testPrintContent":130,"org.easymock.samples.ExampleTest.addDocument":126,"org.easymock.tests2.DelegateToTest.testStubDelegate":251,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":154,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":206,"org.easymock.tests2.AnswerTest.stubAnswer":246,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":252,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":241,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":23,"org.easymock.tests2.UsageConstraintsTest.greaterThan":264,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":329,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":203,"org.easymock.tests.UsageVarargTest.varargLongAccepted":183,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":161,"org.easymock.samples.ExampleTest.voteForRemoval":124,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":271,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":322,"org.easymock.tests.UsageExpectAndReturnTest.floatType":162,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":228,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":65,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":278,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":265,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":194,"org.easymock.tests.UsageThrowableTest.noUpperLimit":149,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":257,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":73,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":140,"org.easymock.tests2.SerializationTest.test":55,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":102,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":2,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":35,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":44,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":150,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":310,"org.easymock.tests2.UsageConstraintsTest.testSame":259,"org.easymock.samples.SupportTest.addDocument":120,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":236,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":250,"org.easymock.tests2.CaptureTest.testCaptureFirst":1,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":45,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":77,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":216,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":313,"org.easymock.tests.GenericTest.testPackageScope":141,"org.easymock.tests2.CaptureTest.testCapture2_2446744":275,"org.easymock.tests2.UsageTest.moreThanOneArgument":13,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":96,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":336,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":200,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":185,"org.easymock.tests2.NameTest.nameForMock":17,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":134,"org.easymock.tests.UsageExpectAndReturnTest.longType":163,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":42,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":317,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":307,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":344,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":87,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":305,"org.easymock.tests2.UsageStrictMockTest.differentMethods":12,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":280,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":242,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":311,"org.easymock.tests.UsageCallCountTest.tooManyCalls":135,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":304,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":331,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":211,"org.easymock.tests2.MockedExceptionTest.testRealException":232,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":314,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":229,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":188,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":10,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":145,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":153,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":171,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":110,"org.easymock.tests2.UsageConstraintsTest.testContains":261,"org.easymock.tests2.NameTest.nameForStrictMock":18,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":116,"org.easymock.tests2.UsageConstraintsTest.testFind":258,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":341,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":268,"org.easymock.tests.MockTypeTest.fromEasyMockClass":225,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":61,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":269,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":217,"org.easymock.tests.UsageExpectAndReturnTest.object":165,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":84,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":63,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":197,"org.easymock.tests2.UsageStrictMockTest.range":11,"org.easymock.tests2.UsageConstraintsTest.lessThan":267,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":49,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":181,"org.easymock.tests.UsageTest.exactCallCountByLastCall":167,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":279,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":43,"org.easymock.tests2.CaptureTest.testCaptureRightOne":107,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":338,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":334,"org.easymock.tests2.UsageConstraintsTest.testOr":260,"org.easymock.tests.UsageRangeTest.combination":169,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":320,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":58,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":177,"org.easymock.tests.UsageTest.wrongArguments":27,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":137,"org.easymock.tests.MockClassControlTest.testHashCode":191,"org.easymock.tests2.EasyMockSupportTest.testVerify":53,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":164,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":318,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":335,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":292,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":136,"org.easymock.tests.UsageVarargTest.varargShortAccepted":182,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":212,"org.easymock.tests2.UsageConstraintsTest.cmpTo":82,"org.easymock.tests.UsageVarargTest.varargCharAccepted":180,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":245,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":70,"org.easymock.tests2.UsageTest.openCallCountByLastCall":253,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":254,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":52,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":8,"org.easymock.tests2.CaptureTest.testCaptureFromStub":274,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":198,"org.easymock.tests.UsageTest.unexpectedCallWithArray":187,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":220,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":189,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":298,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":22,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":151,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":132,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":319,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":249,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":215,"org.easymock.tests2.UsageConstraintsTest.constraints":208,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":160,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":297,"org.easymock.samples.ExampleTest.addAndChangeDocument":128,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":321,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":9,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":119,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":214,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":93,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":159,"org.easymock.tests2.UsageTest.resumeIfFailure":207,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":103,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":287,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":312,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":224,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":288,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":139,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":48,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":178}}]

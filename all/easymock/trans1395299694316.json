[{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[1],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[2,3,4,5,6,7,8,1,9,10,11],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:53","sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[12,13,14],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"actual":"o"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[15,16,17,18,19,20,21],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[22,23,15,16,24,17,18,19,25,26],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (int)","type":"CtReturnImpl"},"failures":[27,28,29,30,31,32,33,34,13,35,36,37,38,39,40,41,14,42,43,44],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:320","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[45,46],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1052","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[47,34,13,35,36,48,49,39,50,41,14,42,51,43,44],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[22,52,53,54],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:73","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:126","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:126","failures":[55,56,57,58,59],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:183","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:83","sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[47,34,13,35,36,48,49,39,50,41,14,42,51,43,44],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arguments":"arguments"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[60,61,62,63,64],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[65],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"this.org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"failures":[22,23,15,66,67,68,69,70,24,71,72,73,74],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:95","sourceCode":"int = java.lang.Integer.int","type":"CtAssignmentImpl"},"failures":[47,32,75,5,76,77,8,78,79,80,81,82,83,84,85,86,87,48,38,88,89,90,91],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1952","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1177","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:157","failures":[92],"status":-1,"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:166","sourceCode":"java.lang.StringBuilder.append(\"\\n  Expectation failure on verify:\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[93,39],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"failures":[94,95],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:786","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:83","failures":[47,34,13,35,36,48,96,49,39,50,41,14,42,51,43,44],"status":-1,"binaryOperator":"java.lang.Object[] == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:734","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[97,98,99,100],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[93,39],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[101,102,103,104,105,106,107,108],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:40","sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:42","sourceCode":"return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"c":"c","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[70],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:95","failures":[2,3,4,5,6,7,8,1,9,10,11],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:193","sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:52","sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"method":"method"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[73,109],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.Compare:52","failures":[110],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[22,52,53,54],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":6,"org.easymock.tests2.UsageConstraintsTest.testMatches":79,"org.easymock.tests2.UsageTest.argumentsOrdered":35,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":46,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":16,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":99,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":20,"org.easymock.tests2.NameTest.nameForNiceMock":29,"org.easymock.tests2.SerializationTest.testAllMockedMethod":53,"org.easymock.tests2.DelegateToTest.testReturnException":55,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":91,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":19,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":73,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":95,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":68,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":54,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":37,"org.easymock.tests2.UsageConstraintsTest.greaterThan":98,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":26,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":70,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":85,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":17,"org.easymock.tests2.DelegateToTest.testWrongClass":56,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":64,"org.easymock.tests2.UsageTest.wrongArguments":34,"org.easymock.tests.UsageStrictMockTest.range":48,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":23,"org.easymock.samples.ExampleTest.answerVsDelegate":59,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":80,"org.easymock.tests.UsageThrowableTest.noUpperLimit":88,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":75,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":102,"org.easymock.tests2.UsageConstraintsTest.testNull":7,"org.easymock.tests2.SerializationTest.test":52,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":24,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":92,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":60,"org.easymock.tests.UsageTest.moreThanOneArgument":40,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":14,"org.easymock.tests2.UsageConstraintsTest.testSame":77,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":45,"org.easymock.tests.UsageUnorderedTest.message":39,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":51,"org.easymock.tests2.UsageTest.moreThanOneArgument":33,"org.easymock.tests.UsageVerifyTest.twoReturns":44,"org.easymock.tests.UsageTest.argumentsOrdered":42,"org.easymock.tests.GenericTest.testBridgedEquals":109,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":104,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":101,"org.easymock.tests2.NameTest.nameForMock":27,"org.easymock.tests2.CaptureTest.testCapture_2617107":3,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":21,"org.easymock.tests2.UsageStrictMockTest.differentMethods":32,"org.easymock.tests2.StubTest.stub":82,"org.easymock.tests2.SerializationTest.testClass":22,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":74,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":9,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":87,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":89,"org.easymock.tests2.CaptureTest.testAnd":2,"org.easymock.tests2.NameTest.nameForMocksControl":30,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":31,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":86,"org.easymock.tests2.NameTest.nameForStrictMock":28,"org.easymock.tests2.UsageConstraintsTest.testContains":78,"org.easymock.tests2.DelegateToTest.testDelegate":57,"org.easymock.tests2.UsageConstraintsTest.testFind":76,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":90,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":108,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":10,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":1,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":62,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":93,"org.easymock.tests2.UsageStrictMockTest.range":47,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":18,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":105,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":13,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":81,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":25,"org.easymock.tests.UsageStrictMockTest.differentMethods":38,"org.easymock.tests2.CaptureTest.testCaptureRightOne":4,"org.easymock.tests2.UsageConstraintsTest.testOr":8,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":15,"org.easymock.tests.UsageRangeTest.combination":84,"org.easymock.tests.UsageTest.wrongArguments":41,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":58,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":61,"org.easymock.tests2.MockBuilderTest.testCreateMockString":72,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":110,"org.easymock.tests.UsageVerifyTest.twoThrows":43,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":63,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":96,"org.easymock.tests2.CompareToTest.testLessOrEqual":100,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":0,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":67,"org.easymock.tests2.UsageConstraintsTest.testNotNull":11,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":107,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":106,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":69,"org.easymock.tests2.MockBuilderTest.testCreateMock":71,"org.easymock.tests.UsageTest.unexpectedCallWithArray":50,"org.easymock.tests2.UsageConstraintsTest.equals":12,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":49,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":66,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":36,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":97,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":94,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":103,"org.easymock.tests2.UsageConstraintsTest.constraints":5,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":65,"org.easymock.tests2.UsageTest.resumeIfFailure":83}}]

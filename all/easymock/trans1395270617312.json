[{"transplant":{"position":"org.easymock.internal.matchers.And:51","sourceCode":"java.lang.StringBuffer.append(\", \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[17,18,19],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:72","sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","type":"CtReturnImpl"},"failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1291","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[39],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[40,41,42,43],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[44,45],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:190","failures":[46,47,48,0,49,50,51,52,53,54,55,56,57,58,59,60,61,45,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,13,89,90,91,92,93,94,28,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,40,112,113,114,115,41,116,117,118,119,39,120,121,122,123,124,42,125,126,127,128,129,130,131,38,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160],"status":-1,"binaryOperator":"(java.lang.Object instanceof java.lang.Number)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:74","sourceCode":"java.util.Set<java.lang.reflect.Method>.add(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[20,21,22,23,24,26,27,28,30,31,33,35,36,100,101,161,38,162,163,164],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[165],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"failures":[166,167],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[168,169,46,170,47,48,0,1,2,49,50,3,4,51,171,52,172,20,173,174,175,176,21,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,44,216,217,218,219,220,221,222,223,224,225,226,53,227,228,229,230,231,232,233,234,235,236,237,54,55,56,57,238,239,240,241,242,58,243,244,59,60,245,246,247,248,61,45,249,250,62,63,251,64,252,253,254,255,256,65,66,67,257,258,68,69,70,71,72,259,260,261,262,263,73,264,74,75,76,77,78,79,265,266,267,268,269,270,271,272,22,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,165,321,322,323,324,325,166,326,327,328,329,330,331,332,333,334,335,336,337,338,8,80,339,81,82,340,341,342,343,344,83,84,85,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,86,362,363,23,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,87,88,13,14,89,379,90,91,92,15,16,93,94,24,380,26,27,381,382,28,29,30,383,31,384,385,32,33,386,35,387,388,95,96,389,97,390,391,98,392,36,393,99,394,395,396,100,101,102,397,161,103,104,105,106,398,107,108,109,110,111,40,399,112,113,114,115,41,116,117,118,119,39,120,121,400,122,123,124,42,125,401,402,403,404,405,406,407,408,409,410,411,126,412,413,414,415,127,128,129,416,130,417,418,419,420,421,422,131,423,424,425,426,427,428,429,430,431,432,433,434,38,132,435,436,437,438,133,134,135,136,137,138,139,140,141,142,143,144,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,162,458,459,460,461,462,463,464,465,466,163,467,468,469,470,471,164,472,473,474,475,476,477,478,145,479,480,481,482,483,484,485,486,146,487,147,148,488,167,149,489,490,491,492,493,494,495,496,497,498,150,151,499,152,153,500,501,154,155,156,157,158,159,160],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"delegateTo"}},{"position":"org.easymock.internal.RecordState:305","failures":[48,0,49,50,51,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,53,227,231,232,234,54,55,56,57,238,240,241,58,244,59,60,245,246,61,45,62,63,251,64,252,253,254,255,256,65,66,67,257,258,68,69,70,71,72,259,260,261,262,263,73,74,75,76,77,78,79,271,278,282,165,80,81,82,342,343,344,359,360,361,86,362,23,365,366,367,368,370,378,87,88,13,89,90,91,92,93,94,26,28,30,31,33,95,96,389,97,390,391,98,392,99,100,101,102,103,104,105,106,107,108,109,110,111,40,112,113,114,115,41,116,117,118,119,39,120,121,400,122,123,124,42,125,404,405,126,127,128,129,416,130,417,131,430,431,432,434,38,132,436,133,134,135,136,137,138,139,140,141,142,143,144,455,162,163,164,145,146,147,148,149,490,491,492,493,495,496,497,150,151,499,152,153,154,155,156,157,159,160],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:231","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[26,33,100,161,162],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[151,159],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"position":"org.easymock.internal.Range:44","failures":[168,169,46,170,47,48,0,1,2,49,50,3,4,51,171,52,172,20,173,174,175,176,21,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,44,216,217,218,219,220,221,222,223,224,225,226,53,227,228,229,230,231,232,233,234,235,236,237,54,55,56,57,238,239,240,241,242,58,243,244,59,60,245,246,247,248,61,45,249,250,62,63,251,64,252,253,254,255,256,65,66,67,257,258,68,69,70,71,72,259,260,261,262,263,73,264,74,75,76,77,78,79,265,266,267,268,269,270,271,272,22,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,165,321,322,323,324,325,166,326,327,328,329,330,331,332,333,334,335,336,337,338,8,80,339,81,82,340,341,342,343,344,83,84,85,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,86,362,363,23,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,87,88,13,14,89,379,90,91,92,15,16,93,94,24,380,26,27,381,382,28,29,30,383,31,384,385,32,33,386,35,387,388,95,96,389,97,390,391,98,392,36,393,99,394,395,396,100,101,102,397,161,103,104,105,106,398,107,108,109,110,111,40,399,112,113,114,115,41,116,117,118,119,39,120,121,400,122,123,124,42,125,401,402,403,404,405,406,407,408,409,410,411,126,412,413,414,415,127,128,129,416,130,417,418,419,420,421,422,131,423,424,425,426,427,428,429,430,431,432,433,434,38,132,435,436,437,438,133,134,135,136,137,138,139,140,141,142,143,144,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,162,458,459,460,461,462,463,464,465,466,163,467,468,469,470,471,164,472,473,474,475,476,477,478,145,479,480,481,482,483,484,485,486,146,487,147,148,488,167,149,489,490,491,492,493,494,495,496,497,498,150,151,499,152,153,500,501,154,155,156,157,158,159,160],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:346","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[102],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[502,150,499,152,153,500,501,154,156,503,157,158,160],"status":-1,"binaryOperator":"(this.java.util.List<T>.size()) > 1","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MocksControl:136","failures":[20,21,216,228,229,230,231,232,234,237,270,271,272,22,273,280,281,282,283,297,298,299,300,301,302,304,351,352,353,354,355,356,357,358,23,373,373,374,374,375,376,24,26,27,382,28,29,30,31,385,32,33,35,387,388,389,97,391,98,392,36,99,394,395,396,100,101,102,397,161,410,411,126,38,435,436,437,445,446,447,449,452,453,454,455,456,457,162,458,459,460,461,462,463,464,465,466,163,467,468,469,470,471,164,472,473,490,491,492,493,496,497],"status":-1,"binaryOperator":"org.easymock.internal.IProxyFactory != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[17],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:216","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1064","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"failures":[401,402],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[168,169,46,170,47,53,61,45,62,305,309,310,319,323,80,342,343,85,359,360,361,86,362,373,373,374,374,103,104,107,108,109,110,114,41,116,118,119,123,124,42,146,149,158],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:103","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"failures":[399],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:234","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[290],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:147","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[167],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[168,169,46,170,47,48,0,1,2,49,50,3,4,51,171,52,172,20,175,176,21,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,44,216,217,218,219,220,221,222,223,224,225,226,53,227,228,229,230,231,232,233,234,235,236,237,54,55,56,57,238,239,240,241,242,58,243,244,59,60,245,246,247,248,61,45,249,250,62,63,251,64,252,253,254,255,256,65,66,67,257,258,68,69,70,71,72,259,260,261,262,263,73,264,74,75,76,77,78,79,265,266,267,268,269,270,271,272,22,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,297,298,299,300,301,302,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,165,321,322,323,324,325,166,326,327,328,329,330,331,332,333,334,335,336,337,338,8,80,339,81,82,340,341,342,343,344,83,84,85,345,346,347,348,349,351,352,353,354,355,356,357,358,359,360,361,86,362,363,23,364,365,366,367,368,369,370,371,372,373,373,374,374,375,376,377,378,87,88,13,14,89,379,90,91,92,15,16,93,94,24,26,27,382,28,29,30,31,385,32,33,35,95,96,389,97,390,391,98,392,36,99,394,395,396,100,101,102,397,161,103,104,105,106,398,107,108,109,110,111,40,399,112,113,114,115,41,116,117,118,119,39,120,121,400,122,123,124,42,125,401,402,403,404,405,406,407,408,409,410,411,126,412,413,414,415,127,128,129,416,130,417,418,419,420,421,422,131,423,424,425,426,427,428,429,430,431,432,433,434,38,132,435,436,437,133,134,135,136,137,138,139,140,141,142,143,144,439,441,442,443,444,445,449,450,451,452,453,454,455,456,457,162,458,459,460,461,462,463,464,465,466,163,467,468,469,470,471,164,472,473,474,475,476,477,478,145,479,480,481,482,483,484,485,486,146,487,147,148,488,167,149,489,490,491,492,493,495,496,497,150,151,499,152,153,500,501,154,155,156,157,158,159,160],"status":-1,"binaryOperator":"(java.lang.String != null) && (!org.easymock.internal.Invocation.(org.easymock.internal.Invocation.isJavaIdentifier(java.lang.String)))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1594","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[160],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (this.int)) + \" and \") + (this.int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (int)","type":"CtReturnImpl"},"failures":[63,81,82,147,148],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"minimum":"minimum","maximum":"minimum"}},{"position":"org.easymock.EasyMock:959","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:334","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:222","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","typeVariableArgument":"tv"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:162","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[401],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:41","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[504],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:39","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","type":"CtReturnImpl"},"failures":[505],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:106","failures":[20,21,216,230,231,232,234,271,272,22,282,352,23,373,373,374,374,375,376,24,25,26,27,28,29,30,31,32,33,34,35,389,97,391,98,392,36,99,396,100,101,102,126,506,37,507,508,38,435,436,455,162,163,164,490,491,492,493,496,497],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":106,"org.easymock.tests.ClassInstantiatorFactoryTest.getJVM":505,"org.easymock.tests2.UsageTest.argumentsOrdered":16,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":48,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":143,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":423,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":315,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":379,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":364,"org.easymock.tests2.DelegateToTest.testReturnException":430,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":275,"org.easymock.tests.MockingTest.testPartialClassMocking":231,"org.easymock.tests.MockClassControlTest.testToString":353,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":440,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":52,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":161,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":323,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":461,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":185,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":162,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":96,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":40,"org.easymock.tests2.UsageTest.wrongArguments":14,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":61,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":484,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":329,"org.easymock.samples.ExampleTest.answerVsDelegate":366,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":21,"org.easymock.tests2.UsageConstraintsTest.testNull":108,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":236,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":391,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":142,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":358,"org.easymock.tests2.CaptureTest.testPrimitive":152,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":62,"org.easymock.tests.UsageTest.moreThanOneArgument":0,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":204,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":390,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":46,"org.easymock.tests.UsageTest.argumentsOrdered":4,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":345,"org.easymock.tests.UsageVarargTest.varargIntAccepted":207,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":320,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":359,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":24,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":447,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":427,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":29,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":307,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":362,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":145,"org.easymock.tests.ReplayStateInvalidUsageTest.times":292,"org.easymock.tests2.DependencyTest.testClassMocking":387,"org.easymock.tests2.AnswerTest.answer":125,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":399,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":321,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":409,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":174,"org.easymock.tests2.CaptureTest.testAnd":150,"org.easymock.tests2.UsageTest.strictResetToDefault":88,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":396,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":381,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":169,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":137,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":56,"org.easymock.tests2.DelegateToTest.testDelegate":434,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":349,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":200,"org.easymock.tests.LimitationsTest.mockFinalMethod":283,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":278,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":269,"org.easymock.tests2.DependencyTest.testClassMockingSupport":388,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":245,"org.easymock.tests2.CaptureTest.testCapture1_2446744":153,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":393,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":198,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":407,"org.easymock.tests.UsageThrowableTest.throwError":73,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":286,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":176,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":428,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":350,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":473,"org.easymock.samples.PartialClassMockTest.testGetArea":23,"org.easymock.tests.MockingTest.testInterfaceMocking":233,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":287,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":360,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":462,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":186,"org.easymock.tests2.UsageTest.niceToStrict":89,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":336,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":17,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":305,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":28,"org.easymock.tests2.MockBuilderTest.testCreateMock":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":469,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":481,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":9,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":194,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":138,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":173,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":184,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":217,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":327,"org.easymock.tests.UsageOverloadedMethodTest.overloading":59,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":471,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":466,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":41,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":241,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":69,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":244,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":115,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":156,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":208,"org.easymock.tests2.EasyMockSupportClassTest.testAll":455,"org.easymock.tests.MockClassControlTest.testEquals":357,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":272,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":10,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":202,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":506,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":408,"org.easymock.tests2.CaptureTest.testCaptureAll":151,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":267,"org.easymock.tests.MockNameTest.defaultName":226,"org.easymock.tests2.UsageConstraintsTest.testMatches":116,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":170,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":284,"org.easymock.samples.ExampleTest.voteForRemovals":370,"org.easymock.tests.UsageVarargTest.allKinds":44,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":63,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":268,"org.easymock.samples.BasicClassMockTest.testPrintContent":376,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":78,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":485,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":433,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":424,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":279,"org.easymock.tests2.UsageConstraintsTest.greaterThan":118,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":303,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":456,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":55,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":102,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":304,"org.easymock.samples.ExampleTest.voteForRemoval":367,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":397,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":128,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":177,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":448,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":36,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":87,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":216,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":385,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":312,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":135,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":74,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":453,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":274,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":429,"org.easymock.tests2.CaptureTest.testCaptureFirst":160,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":311,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":136,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":94,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":243,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":67,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":416,"org.easymock.tests2.CaptureTest.testCapture2_2446744":159,"org.easymock.tests2.UsageTest.moreThanOneArgument":13,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":33,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":322,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":215,"org.easymock.tests.GenericTest.testBridgedEquals":273,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":224,"org.easymock.tests.UsageExpectAndReturnTest.longType":255,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":133,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":265,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":34,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":203,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":400,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":85,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":201,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":180,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":168,"org.easymock.tests.UsageCallCountTest.tooManyCalls":225,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":470,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":257,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":483,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":190,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":77,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":491,"org.easymock.tests.MockingTest.testNiceClassMocking":237,"org.easymock.tests.MockingTest.testClassMocking":229,"org.easymock.tests2.UsageConstraintsTest.testContains":114,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":25,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":218,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":126,"org.easymock.tests2.UsageConstraintsTest.testFind":107,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":60,"org.easymock.tests.MockTypeTest.fromEasyMockClass":175,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":415,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":337,"org.easymock.tests.UsageExpectAndReturnTest.object":68,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":99,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":482,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":141,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":210,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":334,"org.easymock.tests.UsageTest.exactCallCountByLastCall":51,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":53,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":310,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":171,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":346,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":7,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":437,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":205,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":260,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":240,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":419,"org.easymock.tests.MockClassControlTest.testHashCode":356,"org.easymock.tests2.EasyMockSupportTest.testVerify":439,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":464,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":347,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":183,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":238,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":406,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":489,"org.easymock.tests.UsageVarargTest.varargCharAccepted":209,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":296,"org.easymock.tests2.CaptureTest.testCaptureMultiple":502,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":486,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":326,"org.easymock.tests2.UsageTest.openCallCountByLastCall":90,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":144,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":18,"org.easymock.tests.DefaultClassInstantiatorTest.object":297,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":182,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":465,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":192,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":508,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":75,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":477,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":418,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":100,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":355,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":191,"org.easymock.tests.CapturesMatcherTest.test":504,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":261,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":179,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":164,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":354,"org.easymock.tests2.UsageTest.resumeIfFailure":93,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":20,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":446,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":277,"org.easymock.tests2.StubTest.stubWithReturnValue":149,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":383,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":122,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":258,"org.easymock.tests2.SerializationTest.testAllMockedMethod":435,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":165,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":11,"org.easymock.samples.SupportTest.voteForRemovals":378,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":270,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":421,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":197,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":166,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":401,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":172,"org.easymock.tests.UsageExpectAndThrowTest.object":195,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":120,"org.easymock.tests2.DelegateToTest.testWrongClass":432,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":342,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":343,"org.easymock.tests.UsageStrictMockTest.range":81,"org.easymock.samples.ConstructorCalledMockTest.testTax":373,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":450,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":140,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":490,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":196,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":452,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":3,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":294,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":328,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":5,"org.easymock.tests2.CaptureTest.testCaptureNone":155,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":84,"org.easymock.tests.UsageUnorderedTest.message":248,"org.easymock.tests.UsageVerifyTest.twoReturns":64,"org.easymock.tests.UsageVarargTest.varargByteAccepted":214,"org.easymock.tests2.ThreadingTest.testThreadSafe":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":467,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":222,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":335,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":375,"org.easymock.tests2.CaptureTest.testCapture_2617107":499,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":12,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":247,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":250,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":324,"org.easymock.tests2.UsageConstraintsTest.any":112,"org.easymock.tests2.StubTest.stub":167,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":291,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":181,"org.easymock.tests.UsageExpectAndThrowTest.longType":188,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":325,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":301,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":290,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":487,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":131,"org.easymock.tests2.SerializationTest.testClass":38,"org.easymock.tests.LimitationsTest.mockNativeMethod":282,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":22,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":263,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":507,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":476,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":488,"org.easymock.tests2.NameTest.nameForMocksControl":444,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":478,"org.easymock.tests2.MockedExceptionTest.testMockedException":411,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":457,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":50,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":414,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":189,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":234,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":389,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":31,"org.easymock.tests.MockingTest.testNicePartialClassMocking":232,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":392,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":474,"org.easymock.tests2.CaptureTest.testCaptureLast":154,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":246,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":497,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":111,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":121,"org.easymock.tests.MockingTest.testTwoMocks":230,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":498,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":252,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":193,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":15,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":124,"org.easymock.samples.ExampleTest.removeNonExistingDocument":371,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":480,"org.easymock.tests.UsageStrictMockTest.differentMethods":82,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":288,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":420,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":299,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":129,"org.easymock.tests2.MockBuilderTest.testCreateMockString":35,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":351,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":458,"org.easymock.tests.UsageExpectAndThrowTest.floatType":187,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":454,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":403,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":438,"org.easymock.tests.UsageVerifyTest.twoThrows":251,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":163,"org.easymock.samples.ExampleTest.voteAgainstRemoval":368,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":316,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":344,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":101,"org.easymock.tests.LimitationsTest.privateConstructor":281,"org.easymock.tests2.UsageConstraintsTest.testNotNull":123,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":410,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":79,"org.easymock.tests2.UsageTest.defaultResetToNice":92,"org.easymock.samples.ExampleTest.voteAgainstRemovals":365,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":259,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":317,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":475,"org.easymock.tests.UsageVarargTest.differentLength":211,"org.easymock.tests2.CallbackTest.callback":417,"org.easymock.tests2.UsageConstraintsTest.equals":398,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":394,"org.easymock.tests.UsageTest.openCallCountByLastCall":49,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":103,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":249,"org.easymock.tests.UsageCallCountTest.tooFewCalls":220,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":493,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":330,"org.easymock.tests.UsageThrowableTest.throwCheckedException":76,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":6,"org.easymock.tests.MockingTest.testStrictClassMocking":228,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":496,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":227,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":492,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":479,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":293,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":495,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":405,"org.easymock.tests2.CompareToTest.testGreateOrEqual":43,"org.easymock.tests.ObjectMethodsTest.testHashCode":333,"org.easymock.tests2.NameTest.nameForNiceMock":443,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":130,"org.easymock.tests2.DependencyTest.testInterfaceMocking":95,"org.easymock.samples.ExampleTest.addDocument":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":468,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":472,"org.easymock.tests2.DelegateToTest.testStubDelegate":431,"org.easymock.tests2.AnswerTest.stubAnswer":404,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":80,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":384,"org.easymock.tests.UsageVarargTest.varargLongAccepted":213,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":340,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":314,"org.easymock.tests.UsageExpectAndReturnTest.floatType":254,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":262,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":436,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":374,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":426,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":119,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":242,"org.easymock.tests.UsageThrowableTest.noUpperLimit":264,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":104,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":445,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":500,"org.easymock.tests2.SerializationTest.test":132,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":298,"org.easymock.tests2.UsageConstraintsTest.testSame":109,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":253,"org.easymock.samples.SupportTest.addDocument":377,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":494,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":289,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":459,"org.easymock.tests.GenericTest.testPackageScope":271,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":348,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":309,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":425,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":235,"org.easymock.tests2.NameTest.nameForMock":441,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":70,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":386,"org.easymock.tests2.UsageStrictMockTest.differentMethods":148,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":395,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":256,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":199,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":331,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":57,"org.easymock.tests2.MockedExceptionTest.testRealException":412,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":178,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":451,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":319,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":146,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":318,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":45,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":295,"org.easymock.tests2.NameTest.nameForStrictMock":442,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":382,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":413,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":19,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":98,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":449,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":39,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":300,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":26,"org.easymock.tests2.UsageStrictMockTest.range":147,"org.easymock.tests2.UsageConstraintsTest.lessThan":42,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":422,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":134,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":463,"org.easymock.tests2.CaptureTest.testCaptureRightOne":157,"org.easymock.tests2.UsageConstraintsTest.testOr":110,"org.easymock.tests.UsageRangeTest.combination":54,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":97,"org.easymock.tests.UsageTest.wrongArguments":2,"org.easymock.tests2.MockBuilderTest.testWithConstructor":380,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":460,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":352,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":65,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":71,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":306,"org.easymock.tests.UsageVarargTest.varargShortAccepted":212,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":302,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":223,"org.easymock.tests2.UsageConstraintsTest.cmpTo":113,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":402,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":308,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":91,"org.easymock.tests2.CaptureTest.testCaptureFromStub":158,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":285,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":27,"org.easymock.tests.UsageTest.unexpectedCallWithArray":1,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":8,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":221,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":72,"org.easymock.tests2.CaptureTest.testCapture":503,"org.easymock.tests2.UsageConstraintsTest.constraints":105,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":339,"org.easymock.samples.ExampleTest.addAndChangeDocument":372,"org.easymock.tests.UsageStrictMockTest.testVerify":341,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":363,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":338,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":266,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":501,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":37,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":361,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":66,"org.easymock.tests.LimitationsTest.abstractClass":280,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":58,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":86,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":139,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":206}}]

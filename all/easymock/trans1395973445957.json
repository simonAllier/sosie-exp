[{"failures":[0],"variableMapping":{"buffer":"buffer"},"name":"replace","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","position":"org.easymock.internal.matchers.NotNull:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","position":"org.easymock.internal.matchers.Captures:43","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>)","position":"org.easymock.internal.AndroidClassProxyFactory:48","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"candidateParameters":"parameterTypes","i":"i"},"name":"replace","transplant":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.internal.BridgeMethodResolver:195","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.internal.ReflectionUtils:185","type":"CtLocalVariableImpl"},"status":-2},{"failures":[1,1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315],"variableMapping":{"value":"proxy"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","position":"org.easymock.internal.ObjectMethodsFilter:88","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","position":"org.easymock.EasyMock:2038","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1277","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:117","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:269","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMock:509","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"<any>\")","position":"org.easymock.internal.matchers.Any:40","type":"CtInvocationImpl"},"status":-2},{"failures":[174,175],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","position":"org.easymock.internal.MockBuilder:160","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1777","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:88","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(char))","position":"org.easymock.EasyMock:1494","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.matchers.Captures<?>.validateCapture()","position":"org.easymock.internal.Invocation:168","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:42","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:987","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","position":"org.easymock.internal.ArgumentToString:37","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:267","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"status":-2},{"failures":[316,1,2,317,318,3,4,5,6,7,319,8,9,10,320,321,16,18,19,20,23,30,31,32,33,34,37,322,48,49,50,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,323,324,325,326,327,328,329,330,331,332,86,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,333,106,109,110,334,124,125,126,127,128,129,130,335,336,134,337,338,339,136,137,139,140,146,147,340,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,199,200,202,203,206,209,211,213,214,215,216,217,218,219,220,221,222,224,225,228,341,230,233,234,235,236,342,237,238,240,241,242,243,245,246,247,248,249,250,253,254,255,258,259,262,263,264,265,266,267,268,269,270,271,272,273,274,277,278,279,280,284,286,287,288,289,291,292,294,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,343,344,345,346,347],"variableMapping":{"state":"state"},"name":"add","transplant":{"sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:325","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.verify()","position":"org.easymock.internal.MocksControl:222","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"-2087349195182278608L","position":"org.easymock.internal.AssertionErrorWrapper:23","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-332797751209289222L","position":"org.easymock.internal.Result:43","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1928","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ClassProxyFactory:120","type":"CtThrowImpl"},"status":0},{"failures":[235],"variableMapping":{"stream":"stream"},"name":"add","transplant":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.ClassProxyFactory:127","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>)","position":"org.easymock.internal.ClassProxyFactory:140","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"max":"matches","java.lang.Integer.MAX_VALUE":"matches"},"name":"add","transplant":{"sourceCode":"int = int","position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int++","position":"org.easymock.internal.MocksBehavior:132","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[34,189,251,263],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.internal.ExpectedInvocationAndResult.getResult()","position":"org.easymock.internal.MocksBehavior:67","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.ExpectedInvocationAndResult.getExpectedInvocation().matches(org.easymock.internal.Invocation)) {\n    return org.easymock.internal.ExpectedInvocationAndResult.getResult();\n} ","position":"org.easymock.internal.MocksBehavior:66","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"stack":"stack"},"name":"replace","transplant":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:70","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.UnorderedBehavior:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:191","type":"CtAssignmentImpl"},"status":-2},{"failures":[4,5,6,7,319,8,9,16,18,19,20,21,22,23,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,322,48,49,50,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85,324,325,326,327,328,329,330,331,332,86,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,333,105,106,107,108,109,110,334,124,125,126,127,128,129,130,335,336,134,337,338,339,135,136,137,138,139,140,141,142,143,144,145,146,147,340,348,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,349,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,214,215,216,217,218,219,220,221,222,224,225,226,228,229,341,230,231,232,233,234,235,236,342,237,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,262,263,264,266,267,270,271,272,274,277,278,282,283,284,285,286,287,288,289,291,292,294,301,302,303,344,345,346,347],"variableMapping":{"this":"this","mock":"mock"},"name":"replace","transplant":{"sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","position":"org.easymock.EasyMock:2039","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","position":"org.easymock.EasyMock:2012","type":"CtInvocationImpl"},"status":-1},{"failures":[350],"variableMapping":{"throwable":"throwable","state":"state"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:267","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory","position":"org.easymock.internal.MocksControl:135","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(T))","position":"org.easymock.EasyMock:1568","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int += org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:55","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:122","type":"CtInvocationImpl"},"status":-2},{"failures":[53,108,109,116,117,118,119,120,124,125,126,127,335,134,337,338,339,351,352,213,214,215,216,221,232,233,264,269,286,307,313,314,315,343,344,345,346,347],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:57","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"status":-1},{"failures":[247,249,353],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<T>.clear()","position":"org.easymock.Capture:60","type":"CtInvocationImpl"},"status":-1},{"failures":[316,317,318,3,4,5,6,7,319,8,354,9,10,320,321,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,355,322,45,46,47,356,357,358,48,49,50,51,52,53,54,55,359,56,360,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,323,324,325,326,361,327,328,362,329,330,331,332,86,87,88,89,363,364,90,365,366,367,368,369,370,371,372,373,374,375,376,377,94,95,96,97,98,99,100,101,102,103,104,333,105,106,107,108,109,110,334,378,111,379,380,112,113,381,382,383,384,385,386,387,350,388,389,390,391,392,393,394,395,114,396,397,398,399,400,115,401,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,335,336,134,337,338,339,402,351,352,135,136,137,138,139,140,141,142,143,144,145,403,404,146,405,406,147,340,148,407,408,409,410,411,348,412,413,414,415,416,417,418,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,419,420,421,422,349,170,171,172,173,423,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,424,425,426,427,428,211,212,429,430,431,432,433,213,214,215,216,217,218,219,220,221,434,222,223,224,225,226,227,228,229,341,230,231,232,233,234,236,342,237,435,436,437,438,439,238,239,440,441,442,443,444,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,268,269,445,446,447,272,273,274,275,276,448,277,278,279,280,281,282,283,284,285,286,287,288,289,290,449,291,450,292,293,294,295,451,296,452,453,297,454,298,455,456,457,458,299,459,460,461,462,463,300,301,302,304,305,306,307,308,309,310,311,312,313,314,315,343,464,344,345,346,347],"variableMapping":{"toMock":"toMock","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","position":"org.easymock.internal.MocksControl:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","position":"org.easymock.internal.MocksControl:88","type":"CtReturnImpl"},"status":-1},{"failures":[58,59,60,61,62,63,350,131,132,133,417,302],"variableMapping":{"throwable":"throwable","state":"state"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:267","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:301","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod())","position":"org.easymock.internal.ClassProxyFactory:117","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.ObjectMethodsFilter:107","type":"CtInvocationImpl"},"status":-2},{"failures":[316,1,1,2,2,317,318,3,4,5,6,7,319,8,354,9,10,320,321,11,12,13,14,15,16,17,18,19,20,21,22,23,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,355,322,45,46,47,356,357,358,48,49,50,51,52,53,54,55,359,56,360,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,323,324,325,326,361,327,328,362,329,330,331,332,86,87,88,89,363,364,90,91,92,365,93,366,367,368,370,371,372,373,374,375,377,94,95,96,97,98,99,100,101,102,103,104,333,105,106,107,108,109,110,334,378,111,379,380,112,113,381,382,383,384,385,386,387,350,388,389,390,391,392,393,394,395,114,396,397,398,399,400,115,401,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,335,336,134,337,338,339,402,351,352,135,136,137,138,139,140,141,142,143,144,145,403,404,146,405,406,147,340,148,407,408,409,410,411,348,412,413,414,415,416,417,418,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,419,420,421,422,349,170,171,172,173,423,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,424,425,426,427,428,211,212,429,430,431,432,433,213,214,215,216,217,218,219,220,221,434,222,223,224,225,226,227,228,229,341,230,231,232,233,234,235,236,342,237,435,436,437,438,439,238,239,440,441,442,443,444,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,267,268,269,270,272,273,275,448,277,278,279,465,281,284,285,286,287,288,289,290,291,466,450,292,293,294,295,451,452,297,454,298,456,467,468,469,458,470,299,460,463,300,471,472,301,302,303,473,304,305,306,308,309,311,313,314,315,343],"binaryOperator":"(java.lang.String != null)","name":"removeConditional","position":"org.easymock.internal.ObjectMethodsFilter:44","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","position":"org.easymock.internal.MockInvocationHandler:38","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:183","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"\"Answer throwing \" + java.lang.Throwable","name":"math","position":"org.easymock.internal.ThrowingAnswer:51","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.reflect.Field.getType().isAssignableFrom(org.easymock.internal.Injection.getMock().getClass())","position":"org.easymock.internal.InjectionTarget:46","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","position":"org.easymock.internal.InjectionPlan:51","type":"CtIfImpl"},"status":-2},{"failures":[187],"variableMapping":{"actual":"actual","expected":"actual"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","position":"org.easymock.internal.matchers.Compare:55","type":"CtReturnImpl"},"status":-1},{"failures":[316,317,318,3,4,5,6,7,319,8,9,10,320,321,11,13,14,18,19,20,21,22,23,34,36,37,40,41,44,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,324,325,326,327,328,329,330,331,332,86,87,88,89,91,92,93,94,95,96,97,98,333,106,107,108,109,110,124,126,127,128,129,130,134,338,339,351,352,135,136,137,138,139,140,141,142,143,144,145,146,147,340,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,203,204,205,209,210,211,215,221,222,224,225,226,228,341,230,231,232,233,234,235,236,342,237,238,240,241,242,243,244,245,246,247,248,249,250,252,253,254,255,256,257,258,259,262,263,264,265,266,267,268,269,270,271,272,273,277,279,280,284,285,286,287,288,289,291,294,297,298,299,300,301,302,303,304,305,306,307,308,309,310,312,313,314,315,343],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.Results:65","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return int","position":"org.easymock.internal.ErrorMessage:44","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:52","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.Injector:81","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.ExpectedInvocation:64","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<org.easymock.internal.Injection>","position":"org.easymock.internal.InjectionPlan:95","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:225","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()","position":"org.easymock.internal.ArgumentToString:87","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int > 0","position":"org.easymock.LogicalOperator:51","type":"CtReturnImpl"},"status":-2},{"failures":[474,475,476],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.ConstructorArgs:54","type":"mutation","status":-1},{"failures":[],"variableMapping":{"arg":"argument"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:68","type":"CtInvocationImpl"},"status":-2},{"failures":[177],"name":"returnValue","position":"org.easymock.internal.matchers.Or:43","type":"mutation","return":"return false","status":-1},{"failures":[],"variableMapping":{"stack":"stack"},"name":"add","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>()","position":"org.easymock.internal.LastControl:62","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","position":"org.easymock.internal.LastControl:111","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"result"},"name":"add","transplant":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:93","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1372","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","position":"org.easymock.internal.RecordState:146","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:202","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","position":"org.easymock.internal.MocksControl:240","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2012","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","position":"org.easymock.internal.LastControl:73","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.List<T>.add(T)","position":"org.easymock.Capture:109","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type != null) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} ","position":"org.easymock.internal.BridgeMethodResolver:338","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int])","position":"org.easymock.internal.DefaultClassInstantiator:121","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return int < 0","position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","position":"org.easymock.internal.RecordState:139","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","position":"org.easymock.internal.RecordState:340","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectByType(java.lang.Object, java.util.List<java.lang.reflect.Field>, org.easymock.internal.InjectionPlan.getUnqualifiedInjections())","position":"org.easymock.internal.Injector:153","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","position":"org.easymock.internal.Results:40","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","position":"org.easymock.internal.ReflectionUtils:152","type":"CtThrowImpl"},"status":-2},{"failures":[178],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1120","type":"CtInvocationImpl"},"status":-1},{"failures":[1,2,477,478,479,466],"variableMapping":{"constructorArgs":"constructorArgs"},"name":"add","transplant":{"sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","position":"org.easymock.internal.MockBuilder:210","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","position":"org.easymock.internal.MockBuilder:167","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:971","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:109","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (int) == (java.lang.Integer.int)","position":"org.easymock.internal.Range:83","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.isArray()) {\n    final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n            return false;\n        } \n        break;\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:196","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:1064","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","position":"org.easymock.internal.DefaultClassInstantiator:149","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.MocksBehavior.getStubResult(org.easymock.internal.Invocation)","position":"org.easymock.internal.MocksBehavior:96","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.IMocksBehavior.addActual(org.easymock.internal.Invocation)","position":"org.easymock.internal.ReplayState:58","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Results:57","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.String java.lang.String = org.easymock.Mock.java.lang.String()","position":"org.easymock.internal.Injector:117","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.easymock.internal.Invocation.(getMockAndMethodName()) + \"(\") + org.easymock.internal.ArgumentToString.(org.easymock.internal.ArgumentToString.argumentsToString(java.lang.Object[]))) + \")\"","position":"org.easymock.internal.Invocation:110","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.ObjectMethodsFilter:121","type":"CtInvocationImpl"},"status":-2},{"failures":[98,100,153,159,166,167],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","position":"org.easymock.EasyMock:1708","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.longValue()","position":"org.easymock.internal.RecordState:201","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","position":"org.easymock.internal.ExpectedInvocation:106","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:173","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"result","bound":"result"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:355","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:360","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","position":"org.easymock.internal.ReflectionUtils:188","type":"CtIfImpl"},"status":-2},{"failures":[175,180,190,195],"binaryOperator":"(java.util.Stack<org.easymock.IArgumentMatcher> != null)","name":"negateConditional","position":"org.easymock.internal.LastControl:85","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","position":"org.easymock.EasyMock:1554","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","position":"org.easymock.internal.DefaultClassInstantiator:155","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:392","type":"CtReturnImpl"},"status":-2},{"failures":[298,306,308,309,312],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.IMocksControl>.add(org.easymock.IMocksControl)","position":"org.easymock.EasyMockSupport:531","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)))","position":"org.easymock.internal.BridgeMethodResolver:359","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","position":"org.easymock.internal.ClassInstantiatorFactory:52","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Constructor<?>.getModifiers())) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:175","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:336","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.matchers.Equals org.easymock.internal.matchers.Equals = ((org.easymock.internal.matchers.Equals)(java.lang.Object))","position":"org.easymock.internal.matchers.Equals:56","type":"CtLocalVariableImpl"},"status":-2},{"failures":[0,353],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","position":"org.easymock.Capture:131","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","position":"org.easymock.Capture:134","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.internal.Range org.easymock.internal.Range : java.util.LinkedList<org.easymock.internal.Range>) {\n    int += org.easymock.internal.Range.getMinimum();\n    if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n        int = java.lang.Integer.int;\n    } else {\n        int += org.easymock.internal.Range.getMaximum();\n    }\n}","position":"org.easymock.internal.Results:92","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<java.lang.reflect.Field>","position":"org.easymock.internal.InjectionPlan:79","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:299","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","position":"org.easymock.internal.MethodSerializationWrapper:69","type":"CtIfImpl"},"status":-2},{"failures":[390],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","position":"org.easymock.internal.RecordState:240","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","position":"org.easymock.internal.RecordState:171","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:253","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","position":"org.easymock.internal.AndroidSupport:29","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:70","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Fail to instantiate mock for \" + java.lang.Class<T>)","name":"math","position":"org.easymock.internal.ClassProxyFactory:230","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:317","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.reflect.InvocationTargetException.getCause()","position":"org.easymock.internal.Result:89","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.Injection:50","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Class<?> java.lang.Class<?> : java.lang.Class<?>[]) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n        return true;\n    } \n}","position":"org.easymock.internal.RecordState:322","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:325","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:109","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","position":"org.easymock.EasyMock:1927","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"status":-2},{"failures":[316,317,424,425,426,427,428,211,212,429,430,431,432,433,435,436,437,438,439,238,239,440,441,442,443,444],"binaryOperator":"(java.lang.String.length()) == 0","name":"negateConditional","position":"org.easymock.internal.Injector:119","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.Injector:130","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"i":"i","arguments":"initArgs"},"name":"add","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = this.java.lang.Object[][int]","position":"org.easymock.internal.Invocation:118","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","position":"org.easymock.ConstructorArgs:57","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.internal.LastControl:117","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.IMocksControl>.add(org.easymock.IMocksControl)","position":"org.easymock.EasyMockSupport:509","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.MocksBehavior:109","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","position":"org.easymock.internal.RecordState:162","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","position":"org.easymock.EasyMock:2025","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:81","type":"CtInvocationImpl"},"status":-2},{"failures":[480],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"Answer returning \" + java.lang.Object","position":"org.easymock.internal.Result:68","type":"CtReturnImpl"},"status":-1},{"failures":[481],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:81","type":"CtThrowImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":141,"org.easymock.tests2.MockedExceptionTest.testRealException":216,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":333,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":455,"org.easymock.tests.UsageVarargTest.varargIntAccepted":326,"org.easymock.tests.LimitationsTest.mockFinalMethod":405,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":170,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":46,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":303,"org.easymock.tests.UsageCallCountTest.tooManyCalls":352,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":411,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":460,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":445,"org.easymock.tests.UsageVarargTest.allKinds":86,"org.easymock.tests2.StubTest.stubWithReturnValue":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":472,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":33,"org.easymock.tests2.CaptureTest.testCaptureAll":241,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":136,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":187,"org.easymock.tests2.CaptureTest.testAnd":240,"org.easymock.tests.UsageStrictMockTest.testVerify":334,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":72,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":13,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":24,"org.easymock.tests.MockClassControlTest.testToString":45,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":265,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":417,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":309,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":80,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":163,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":238,"org.easymock.tests.UsageThrowableTest.throwError":138,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":23,"org.easymock.samples.SupportTest.addDocument":318,"org.easymock.tests2.StubTest.stub":301,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":117,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":348,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":435,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":97,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":449,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":19,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":400,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":430,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":169,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":296,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":401,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":451,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":332,"org.easymock.tests.UsageExpectAndThrowTest.object":74,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":256,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":462,"org.easymock.tests2.UsageTest.moreThanOneArgument":200,"org.easymock.tests.UsageVarargTest.varargByteAccepted":331,"org.easymock.tests.MockClassControlTest.testEquals":357,"org.easymock.tests.UsageTest.wrongArguments":39,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":51,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":380,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":439,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":75,"org.easymock.tests2.UsageTest.defaultResetToNice":206,"org.easymock.tests.MockingTest.testNiceClassMocking":368,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":215,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":257,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":280,"org.easymock.tests2.MockBuilderTest.testCreateMock":281,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":258,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":408,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":412,"org.easymock.samples.ExampleTest.voteAgainstRemovals":4,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":229,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":12,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":438,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":126,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":87,"org.easymock.tests2.CaptureTest.testCapture1_2446744":244,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":227,"org.easymock.samples.ExampleTest.voteForRemoval":6,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":421,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":339,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":475,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":16,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":55,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":30,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":110,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":156,"org.easymock.tests2.CaptureTest.testCaptureRightOne":250,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":409,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":261,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":289,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":125,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":119,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":410,"org.easymock.tests2.UsageConstraintsTest.cmpTo":182,"org.easymock.tests.MockTypeTest.fromEasyMockClass":25,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":374,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":442,"org.easymock.tests2.MockedExceptionTest.testMockedException":214,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":83,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":101,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":194,"org.easymock.samples.PartialClassMockTest.testGetArea":10,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":128,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":350,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":89,"org.easymock.samples.ConstructorCalledMockTest.testTax":1,"org.easymock.tests2.UsageTest.argumentsOrdered":208,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":260,"org.easymock.samples.ExampleTest.removeNonExistingDocument":354,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":422,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":264,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":372,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":57,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":155,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":48,"org.easymock.tests2.AnswerTest.answer":259,"org.easymock.tests.MockingTest.testNicePartialClassMocking":92,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":443,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":106,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":98,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":103,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":118,"org.easymock.tests.UsageExpectAndThrowTest.longType":67,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":29,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":81,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":299,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":311,"org.easymock.tests.UsageTest.argumentsOrdered":43,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":173,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":279,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":168,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":21,"org.easymock.tests2.MockBuilderTest.testCreateMockString":283,"org.easymock.tests2.NameTest.nameForStrictMock":345,"org.easymock.tests2.CaptureTest.testCaptureNone":248,"org.easymock.tests2.SerializationTest.testClass":235,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":387,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":399,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":113,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":320,"org.easymock.tests.MockingTest.testInterfaceMocking":365,"org.easymock.tests2.EasyMockSupportTest.testVerify":343,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":111,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":440,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":278,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":69,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":367,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":193,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":198,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":167,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":282,"org.easymock.tests.GenericTest.testBridgedEquals":407,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":179,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":269,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":284,"org.easymock.tests2.UsageConstraintsTest.testOr":177,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":255,"org.easymock.tests.MockClassControlTest.testHashCode":356,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":425,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":464,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":27,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":137,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":145,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":162,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":100,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":266,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":268,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":471,"org.easymock.tests2.UsageConstraintsTest.testSame":176,"org.easymock.tests2.UsageTest.resumeIfFailure":209,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":132,"org.easymock.tests.UsageOverloadedMethodTest.overloading":88,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":270,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":28,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":466,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":428,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":468,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":123,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":2,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":457,"org.easymock.tests.UsageTest.openCallCountByLastCall":40,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":70,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":122,"org.easymock.tests2.NameTest.nameForNiceMock":346,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":414,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":239,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":127,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":99,"org.easymock.tests2.CaptureTest.testPrimitive":243,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":286,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":131,"org.easymock.samples.BasicClassMockTest.testPrintContent":321,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":94,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":292,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":221,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":351,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":336,"org.easymock.tests2.UsageStrictMockTest.differentMethods":233,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":469,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":306,"org.easymock.tests.MockingTest.testClassMocking":364,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":148,"org.easymock.tests2.CaptureTest.testCaptureLast":247,"org.easymock.tests2.UsageConstraintsTest.equals":423,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":65,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":402,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":338,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":273,"org.easymock.tests.UsageStrictMockTest.range":108,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":41,"org.easymock.tests.UsageTest.unexpectedCallWithArray":38,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":458,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":384,"org.easymock.samples.ExampleTest.addDocument":319,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":366,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":17,"org.easymock.tests2.UsageConstraintsTest.lessThan":197,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":42,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":11,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":116,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":223,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":392,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":419,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":377,"org.easymock.tests2.MockBuilderTest.testWithConstructor":477,"org.easymock.tests2.UsageStrictMockTest.range":232,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":271,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":50,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":386,"org.easymock.tests.UsageTest.moreThanOneArgument":37,"org.easymock.tests2.UsageTest.openCallCountByLastCall":204,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":275,"org.easymock.tests.UsageStrictMockTest.differentMethods":109,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":371,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":389,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":420,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":68,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":53,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":150,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":454,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":107,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":291,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":437,"org.easymock.tests2.DependencyTest.testClassMockingSupport":447,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":79,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":34,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":427,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":316,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":359,"org.easymock.tests2.UsageConstraintsTest.testContains":183,"org.easymock.tests2.UsageConstraintsTest.testFind":174,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":245,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":478,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":373,"org.easymock.samples.ExampleTest.addAndChangeDocument":9,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":274,"org.easymock.tests.UsageVarargTest.varargCharAccepted":327,"org.easymock.tests2.CaptureTest.testCaptureFromStub":251,"org.easymock.tests.UsageVerifyTest.twoThrows":129,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":444,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":20,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":328,"org.easymock.tests2.DelegateToTest.testReturnException":224,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":203,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":473,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":315,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":341,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":406,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":434,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":133,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":375,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":418,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":249,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":76,"org.easymock.tests2.UsageConstraintsTest.testMatches":186,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":49,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":390,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":481,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":115,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":391,"org.easymock.tests2.UsageConstraintsTest.testNull":175,"org.easymock.tests.LimitationsTest.abstractClass":403,"org.easymock.tests2.EasyMockSupportClassTest.testAll":297,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":376,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":476,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":18,"org.easymock.tests2.UsageConstraintsTest.greaterThan":188,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":324,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":413,"org.easymock.tests.UsageExpectAndReturnTest.object":160,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":190,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":312,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":234,"org.easymock.tests2.DelegateToTest.testWrongClass":226,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":383,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":71,"org.easymock.samples.ExampleTest.voteAgainstRemoval":7,"org.easymock.tests.CapturesMatcherTest.test":0,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":144,"org.easymock.tests.UsageVarargTest.varargShortAccepted":329,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":120,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":112,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":432,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":96,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":317,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":355,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":436,"org.easymock.tests2.SerializationTest.testAllMockedMethod":342,"org.easymock.tests2.NameTest.nameForMocksControl":347,"org.easymock.tests.MockingTest.testStrictClassMocking":363,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":22,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":210,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":54,"org.easymock.tests.LimitationsTest.mockNativeMethod":146,"org.easymock.tests2.DelegateToTest.testStubDelegate":225,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":15,"org.easymock.tests.UsageUnorderedTest.message":135,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":394,"org.easymock.samples.ExampleTest.answerVsDelegate":5,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":360,"org.easymock.tests.UsageCallCountTest.tooFewCalls":337,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":159,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":262,"org.easymock.tests.UsageVerifyTest.twoReturns":130,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":461,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":73,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":154,"org.easymock.tests2.DependencyTest.testInterfaceMocking":272,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":393,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":304,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":59,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":395,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":307,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":220,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":178,"org.easymock.tests.MockingTest.testTwoMocks":90,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":134,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":31,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":213,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":335,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":456,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":161,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":267,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":441,"org.easymock.tests.UsageThrowableTest.throwCheckedException":142,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":453,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":26,"org.easymock.samples.ExampleTest.voteForRemovals":8,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":140,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":185,"org.easymock.tests.ReplayStateInvalidUsageTest.times":415,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":14,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":467,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":288,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":36,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":381,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":474,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":151,"org.easymock.tests2.UsageConstraintsTest.any":181,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":382,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":426,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":158,"org.easymock.tests2.CaptureTest.testCapture":353,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":385,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":314,"org.easymock.tests.LimitationsTest.privateConstructor":404,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":222,"org.easymock.tests2.CallbackTest.callback":237,"org.easymock.tests2.NameTest.nameForMock":344,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":388,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":479,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":184,"org.easymock.tests.MockNameTest.defaultName":149,"org.easymock.tests2.SerializationTest.test":236,"org.easymock.tests.UsageExpectAndReturnTest.longType":153,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":246,"org.easymock.tests2.CaptureTest.testCaptureFirst":253,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":191,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":323,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":58,"org.easymock.tests2.UsageTest.niceToStrict":202,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":52,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":56,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":104,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":369,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":77,"org.easymock.tests2.UsageTest.strictResetToDefault":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":452,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":294,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":35,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":64,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":157,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":217,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":290,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":448,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":189,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":287,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":325,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":63,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":93,"org.easymock.tests2.DelegateToTest.testDelegate":228,"org.easymock.tests2.UsageConstraintsTest.testNotNull":195,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":231,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":211,"org.easymock.tests2.CaptureTest.testCapture_2617107":242,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":396,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":416,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":429,"org.easymock.tests2.ThreadingTest.testThreadSafe":254,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":205,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":397,"org.easymock.tests.UsageThrowableTest.noUpperLimit":139,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":361,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":313,"org.easymock.tests.UsageExpectAndReturnTest.floatType":152,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":305,"org.easymock.tests2.UsageTest.wrongArguments":201,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":180,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":219,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":47,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":465,"org.easymock.samples.SupportTest.voteForRemovals":3,"org.easymock.tests.UsageRangeTest.combination":124,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":470,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":196,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":463,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":433,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":230,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":164,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":78,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":32,"org.easymock.tests.UsageExpectAndThrowTest.floatType":66,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":459,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":165,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":285,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":424,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":450,"org.easymock.tests.UsageTest.exactCallCountByLastCall":44,"org.easymock.tests2.AnswerTest.stubAnswer":263,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":310,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":298,"org.easymock.tests.MockingTest.testPartialClassMocking":91,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":166,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":207,"org.easymock.tests2.UsageConstraintsTest.constraints":172,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":218,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":349,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":102,"org.easymock.tests.UsageVarargTest.varargLongAccepted":330,"org.easymock.tests.ObjectMethodsTest.testHashCode":379,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":293,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":295,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":105,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":82,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":300,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":85,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":276,"org.easymock.tests2.DependencyTest.testClassMocking":446,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":95,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":358,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":378,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":431,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":308,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":171,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":322,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":277,"org.easymock.tests.DefaultClassInstantiatorTest.object":370,"org.easymock.tests.UsageVarargTest.differentLength":362,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":114,"org.easymock.tests.ResultTest.createReturnResultToString":480,"org.easymock.tests2.CaptureTest.testCapture2_2446744":252,"org.easymock.tests.GenericTest.testPackageScope":147}}]

[{"transplant":{"position":"org.easymock.EasyMock:1763","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"failures":[0,1],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:83","sourceCode":"return int == int","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"failures":[2,3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"maximum":"result","java.lang.Integer.MAX_VALUE":"result"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[4,5,6,7,8],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"position":"org.easymock.EasyMock:1397","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[9],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[10,11],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[12],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"failures":[13],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:183","failures":[14,9,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,2,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,11,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[232],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[37],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1646","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(int[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[233,105,106,107,108,234,109,110,111,112,113,235,114,236,237,115,116,238],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[239,240,241,242,243,244],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[20,21,24,25,26,27,32,34,35,2,36,42,43,44,64,104,236,122,123,124,125,126,153,245,246,247,248,249,158,159,160,250,251,252,253,254,166,167,170,255,256,256,257,257],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:51","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[258,14,9,15,259,16,17,18,19,20,21,22,23,24,25,26,27,28,29,260,30,31,32,33,34,35,4,2,36,37,38,39,40,41,42,43,44,45,261,46,47,48,262,49,50,51,52,263,264,265,266,53,54,58,61,62,267,63,64,65,66,67,68,72,268,73,269,270,74,75,76,271,272,273,274,78,275,276,277,278,84,279,85,86,87,88,89,280,281,92,282,93,283,94,95,96,97,284,285,98,99,100,101,102,103,104,105,106,107,108,234,109,110,111,112,113,114,236,237,115,116,286,287,288,289,117,118,122,123,124,125,126,290,291,292,293,294,295,296,297,298,299,300,127,128,301,302,129,130,303,304,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,305,306,307,308,309,310,311,312,313,152,314,153,154,155,156,157,315,245,246,247,248,249,316,317,318,158,159,160,319,232,320,321,322,323,162,324,163,164,325,326,327,328,329,330,331,166,167,168,169,170,11,332,333,334,335,171,172,173,174,175,176,177,178,336,179,180,181,182,183,337,184,185,186,187,188,189,190,191,338,339,340,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,255,341,342,212,213,214,215,343,216,217,344,345,346,347,348,218,219,220,221,222,223,224,225,227,228,229],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[262,264,265,66,349,301,302,303,304,314,155,11,190,191],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1319","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:194","failures":[350,351,352,353,354,355,356],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:623","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:118","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:346","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[357,344,347,348],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[23,27,260],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1290","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[23],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:160","sourceCode":"if (boolean) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:217","sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[46,53,64,73,131,153,173,190,191],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"verified":"lastInvocationUsed"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[262,264,265,66,349,301,302,303,304,314,155,331,11,190,191],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[33],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1660","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[48,262,264,265,64,66,67,271,272,273,274,128,302,303,304,314,153,155,156,11,189,190,191],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[358,359,360,361,362,363,364,365],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[25,260,37,42],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[9,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,2,36,37,38,39,41,42,43,44,45,46,47,48,49,51,52,266,53,54,55,56,57,58,59,60,61,62,64,66,67,366,69,70,71,72,73,75,77,78,80,81,82,83,84,279,85,86,87,88,367,89,90,368,91,1,369,93,283,94,95,96,97,284,98,99,100,101,104,105,106,108,234,111,112,113,114,237,115,116,289,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,153,155,156,316,317,318,158,159,160,370,371,372,373,374,321,375,162,163,164,166,167,170,171,173,174,175,176,177,178,336,189,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,218,220,221,223,226,229],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","answer":"value"}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:56","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"java.lang.reflect.Field.getType()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"targetField":"targetField"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":23,"org.easymock.tests2.UsageTest.argumentsOrdered":265,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":127,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":100,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":297,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":261,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":50,"org.easymock.tests2.StubTest.stubWithReturnValue":104,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":355,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":225,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":201,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":41,"org.easymock.tests2.SerializationTest.testAllMockedMethod":79,"org.easymock.tests2.DelegateToTest.testReturnException":14,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":295,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":232,"org.easymock.tests.MockingTest.testPartialClassMocking":119,"org.easymock.samples.SupportTest.voteForRemovals":229,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":6,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":12,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":336,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":254,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":144,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":320,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":69,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":132,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":269,"org.easymock.tests.UsageExpectAndThrowTest.object":142,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":62,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":38,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":350,"org.easymock.tests2.DelegateToTest.testWrongClass":15,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":158,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":159,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":29,"org.easymock.tests2.UsageTest.wrongArguments":262,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":166,"org.easymock.samples.ConstructorCalledMockTest.testTax":256,"org.easymock.tests.UsageStrictMockTest.range":155,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":292,"org.easymock.samples.ExampleTest.answerVsDelegate":219,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":285,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":54,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":359,"org.easymock.tests2.UsageConstraintsTest.testNull":25,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":90,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":143,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":81,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":99,"org.easymock.tests2.CaptureTest.testPrimitive":108,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":170,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":303,"org.easymock.tests.UsageTest.moreThanOneArgument":128,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":151,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":291,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":89,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":247,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":318,"org.easymock.tests2.CaptureTest.testCaptureNone":112,"org.easymock.tests.UsageUnorderedTest.message":11,"org.easymock.tests.UsageVerifyTest.twoReturns":191,"org.easymock.tests.UsageVarargTest.varargByteAccepted":186,"org.easymock.tests2.ThreadingTest.testThreadSafe":84,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":344,"org.easymock.tests.UsageTest.argumentsOrdered":304,"org.easymock.tests.UsageVarargTest.varargIntAccepted":181,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":215,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":288,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":230,"org.easymock.tests2.CaptureTest.testCapture_2617107":107,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":122,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":354,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":372,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":169,"org.easymock.tests2.UsageConstraintsTest.any":30,"org.easymock.tests2.StubTest.stub":103,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":312,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":126,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":373,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":296,"org.easymock.tests.UsageExpectAndThrowTest.longType":135,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":65,"org.easymock.tests2.SerializationTest.testClass":77,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":45,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":72,"org.easymock.tests.LimitationsTest.mockNativeMethod":116,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":375,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":211,"org.easymock.tests2.AnswerTest.answer":73,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":260,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":278,"org.easymock.tests2.CaptureTest.testAnd":105,"org.easymock.tests2.UsageTest.strictResetToDefault":47,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":68,"org.easymock.tests2.NameTest.nameForMocksControl":274,"org.easymock.tests2.MockedExceptionTest.testMockedException":281,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":246,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":96,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":163,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":130,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":348,"org.easymock.tests2.DelegateToTest.testDelegate":16,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":121,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":136,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":88,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":82,"org.easymock.tests.MockingTest.testNicePartialClassMocking":120,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":147,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":91,"org.easymock.tests2.CaptureTest.testCaptureLast":111,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":298,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":323,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":60,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":28,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":309,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":39,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":322,"org.easymock.tests2.CaptureTest.testCapture1_2446744":234,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":192,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":0,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":145,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":276,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":140,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":264,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":43,"org.easymock.tests.UsageThrowableTest.throwError":171,"org.easymock.tests.UsageStrictMockTest.differentMethods":156,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":333,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":241,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":85,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":249,"org.easymock.tests.UsageExpectAndThrowTest.floatType":134,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":4,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":74,"org.easymock.tests.UsageVerifyTest.twoThrows":190,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":326,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":70,"org.easymock.samples.PartialClassMockTest.testGetArea":226,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":123,"org.easymock.samples.ExampleTest.voteAgainstRemoval":221,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":371,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":317,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":316,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":369,"org.easymock.tests2.UsageTest.niceToStrict":49,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":133,"org.easymock.tests2.UsageConstraintsTest.testNotNull":42,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":280,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":178,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":363,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":250,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":80,"org.easymock.tests2.UsageTest.defaultResetToNice":263,"org.easymock.samples.ExampleTest.voteAgainstRemovals":218,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":207,"org.easymock.tests.UsageVarargTest.differentLength":337,"org.easymock.tests2.CallbackTest.callback":17,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":8,"org.easymock.tests.UsageTest.openCallCountByLastCall":129,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":5,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":141,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":97,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":20,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":340,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":341,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":290,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":168,"org.easymock.tests.UsageCallCountTest.tooFewCalls":213,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":360,"org.easymock.tests.UsageOverloadedMethodTest.overloading":117,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":328,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":34,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":289,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":203,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":57,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":33,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":113,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":293,"org.easymock.tests.UsageThrowableTest.throwCheckedException":175,"org.easymock.tests2.EasyMockSupportClassTest.testAll":366,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":161,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":7,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":149,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":307,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":277,"org.easymock.tests2.CaptureTest.testCaptureAll":106,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":319,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":59,"org.easymock.tests.MockNameTest.defaultName":300,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":268,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":56,"org.easymock.tests2.UsageConstraintsTest.testMatches":35,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":58,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":76,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":248,"org.easymock.tests.ObjectMethodsTest.testHashCode":287,"org.easymock.samples.ExampleTest.voteForRemovals":223,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":353,"org.easymock.tests2.NameTest.nameForNiceMock":273,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":87,"org.easymock.tests.UsageVarargTest.allKinds":188,"org.easymock.tests2.DependencyTest.testInterfaceMocking":61,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":189,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":352,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":308,"org.easymock.samples.BasicClassMockTest.testPrintContent":231,"org.easymock.samples.ExampleTest.addDocument":222,"org.easymock.tests2.DelegateToTest.testStubDelegate":9,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":177,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":267,"org.easymock.tests2.AnswerTest.stubAnswer":75,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":299,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":259,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":153,"org.easymock.tests2.UsageConstraintsTest.greaterThan":2,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":324,"org.easymock.tests.UsageVarargTest.varargLongAccepted":185,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":157,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":370,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":244,"org.easymock.samples.ExampleTest.voteForRemoval":220,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":279,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":210,"org.easymock.tests.UsageExpectAndReturnTest.floatType":194,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":334,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":83,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":257,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":329,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":36,"org.easymock.tests.UsageThrowableTest.noUpperLimit":172,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":21,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":46,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":165,"org.easymock.tests2.SerializationTest.test":78,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":109,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":240,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":94,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":173,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":193,"org.easymock.tests2.UsageConstraintsTest.testSame":26,"org.easymock.samples.SupportTest.addDocument":228,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":294,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":258,"org.easymock.tests2.CaptureTest.testCaptureFirst":115,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":95,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":53,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":331,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":199,"org.easymock.tests.GenericTest.testPackageScope":321,"org.easymock.tests2.CaptureTest.testCapture2_2446744":237,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":86,"org.easymock.tests2.UsageTest.moreThanOneArgument":48,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":251,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":187,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":361,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":358,"org.easymock.tests2.NameTest.nameForMock":271,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":216,"org.easymock.tests.UsageExpectAndReturnTest.longType":195,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":305,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":93,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":204,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":150,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":255,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":40,"org.easymock.tests2.UsageStrictMockTest.differentMethods":67,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":148,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":311,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":245,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":196,"org.easymock.tests.UsageCallCountTest.tooManyCalls":217,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":146,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":164,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":212,"org.easymock.tests2.MockedExceptionTest.testRealException":282,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":335,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":200,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":253,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":64,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":137,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":167,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":176,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":55,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":342,"org.easymock.tests2.NameTest.nameForStrictMock":272,"org.easymock.tests2.UsageConstraintsTest.testContains":32,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":92,"org.easymock.tests2.UsageConstraintsTest.testFind":24,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":118,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":365,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":18,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":368,"org.easymock.tests.MockTypeTest.fromEasyMockClass":332,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":313,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":19,"org.easymock.tests.UsageExpectAndReturnTest.object":202,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":242,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":10,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":37,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":1,"org.easymock.tests2.UsageStrictMockTest.range":66,"org.easymock.tests2.UsageConstraintsTest.lessThan":44,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":98,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":351,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":183,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":362,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":13,"org.easymock.tests.UsageTest.exactCallCountByLastCall":131,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":160,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":252,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":357,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":283,"org.easymock.tests2.CaptureTest.testCaptureRightOne":114,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":345,"org.easymock.tests2.UsageConstraintsTest.testOr":27,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":356,"org.easymock.tests.UsageRangeTest.combination":162,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":367,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":208,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":179,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":327,"org.easymock.tests.UsageTest.wrongArguments":302,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":197,"org.easymock.tests2.EasyMockSupportTest.testVerify":102,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":205,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":346,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":339,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":325,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":243,"org.easymock.tests.UsageVarargTest.varargShortAccepted":184,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":343,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":275,"org.easymock.tests2.UsageConstraintsTest.cmpTo":31,"org.easymock.tests.UsageVarargTest.varargCharAccepted":182,"org.easymock.tests2.CaptureTest.testCaptureMultiple":233,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":270,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":63,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":374,"org.easymock.tests2.UsageTest.openCallCountByLastCall":51,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":52,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":364,"org.easymock.tests.DefaultClassInstantiatorTest.object":239,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":101,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":338,"org.easymock.tests2.CaptureTest.testCaptureFromStub":236,"org.easymock.tests.UsageTest.unexpectedCallWithArray":301,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":286,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":349,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":139,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":314,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":174,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":214,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":206,"org.easymock.tests2.CaptureTest.testCapture":235,"org.easymock.tests2.UsageConstraintsTest.constraints":22,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":154,"org.easymock.samples.ExampleTest.addAndChangeDocument":224,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":138,"org.easymock.tests.CapturesMatcherTest.test":238,"org.easymock.tests.UsageStrictMockTest.testVerify":315,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":209,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":310,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":71,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":152,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":306,"org.easymock.tests2.CompareToTest.testGreateThan":3,"org.easymock.tests2.UsageTest.resumeIfFailure":266,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":110,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":124,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":198,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":330,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":125,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":284,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":180}}]

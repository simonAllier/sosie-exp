[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[0],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"type":"type"}},{"transplant":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[1,2],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"this.org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[3,4,5,6,7,8,9,10,11,12],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"value"}},{"transplant":{"position":"org.easymock.internal.matchers.Any:40","sourceCode":"java.lang.StringBuffer.append(\"<any>\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[3,13,14,15,16,17,18,19,20,21,22,23,5,24,25,26,27,28,29,30,31,32,33,34,35,36],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:986","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[37],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[38],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","i":"i"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:160","sourceCode":"return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:158","sourceCode":"if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n    java.lang.reflect.Field.setAccessible(true);\n    return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n} ","type":"CtIfImpl"},"failures":[39,40],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"failures":[3,13,14,41,42,23,5,24,25,43],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1519","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[44,45,46,47,48,49,50,50,51,51,52,53,54,55,56,57,3,13,14,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,4,77,78,37,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,41,103,42,104,105,106,107,108,109,1,2,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,15,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,5,24,25,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,26,27,28,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,29,224,225,226,227,228,229,230,231,12,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,36,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Any:36","sourceCode":"return true","type":"CtReturnImpl"},"failures":[3,66,69,84,87,88,93,5,195,204,205,227,228,229,230,231,233,234,235,236,237,238,239,36],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:73","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:237","sourceCode":"return org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.reflect.Method.getParameterTypes())","type":"CtReturnImpl"},"failures":[280],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"failures":[44,46,47,48,53,229],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"failures":[61,62,64,66,67,281,77,80,83,282,90],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:95","sourceCode":"return java.lang.StringBuilder.toString()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:69","sourceCode":"return java.lang.StringBuffer.toString()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[283,284,285,286,287,288,289],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[44,46,47,48,52,53,54,55,3,13,14,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,4,77,78,37,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,98,100,101,102,41,103,42,104,105,106,107,108,109,1,2,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,15,131,132,133,134,135,136,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,157,163,164,165,5,24,25,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,197,198,199,200,202,26,28,204,209,210,211,212,213,214,215,216,217,218,223,29,224,225,226,227,228,229,230,231,233,234,237,238,239,260,262,263,264,265,266,267,279],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[290,291,23,292,293,294],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:355","sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[0],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[149,150,295,296],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"failures":[50,51,297,298,299,300],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[301],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[290,291,23,292,293,294],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[302,303],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[298],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"candidateMethod"}},{"transplant":{"position":"org.easymock.internal.MockMethodInterceptor:127","sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:125","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[149,150,295],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stream":"stream"}},{"transplant":{"position":"org.easymock.internal.matchers.And:54","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[304],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":62,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":223,"org.easymock.tests2.UsageTest.argumentsOrdered":18,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":122,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":194,"org.easymock.tests2.StubTest.stubWithReturnValue":163,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":284,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":79,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":180,"org.easymock.tests2.SerializationTest.testAllMockedMethod":295,"org.easymock.tests2.DelegateToTest.testReturnException":156,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":207,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":192,"org.easymock.tests.MockingTest.testPartialClassMocking":209,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":291,"org.easymock.samples.SupportTest.voteForRemovals":53,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":280,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":303,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":202,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":252,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":10,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":296,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":240,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":208,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":152,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":95,"org.easymock.tests.UsageExpectAndThrowTest.object":250,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":203,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":33,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":78,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":55,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":285,"org.easymock.tests2.DelegateToTest.testWrongClass":158,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":238,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":239,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":68,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":233,"org.easymock.tests2.UsageTest.wrongArguments":16,"org.easymock.samples.ConstructorCalledMockTest.testTax":50,"org.easymock.tests.UsageStrictMockTest.range":24,"org.easymock.samples.ExampleTest.answerVsDelegate":45,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":119,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":142,"org.easymock.tests2.UsageConstraintsTest.testNull":64,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":251,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":41,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":121,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":126,"org.easymock.tests2.CaptureTest.testPrimitive":85,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":237,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":259,"org.easymock.tests.UsageTest.moreThanOneArgument":29,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":31,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":102,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":292,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":168,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":214,"org.easymock.tests2.CaptureTest.testCaptureNone":88,"org.easymock.tests.UsageUnorderedTest.message":36,"org.easymock.tests.UsageVerifyTest.twoReturns":28,"org.easymock.tests2.ThreadingTest.testThreadSafe":109,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":268,"org.easymock.tests.UsageTest.argumentsOrdered":32,"org.easymock.tests2.CaptureTest.testCapture_2617107":282,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":227,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":289,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":236,"org.easymock.tests2.UsageConstraintsTest.any":69,"org.easymock.tests2.StubTest.stub":162,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":231,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":222,"org.easymock.tests.UsageExpectAndThrowTest.longType":243,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":193,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":141,"org.easymock.tests2.SerializationTest.testClass":149,"org.easymock.tests.LimitationsTest.mockNativeMethod":218,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":58,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":301,"org.easymock.tests2.AnswerTest.answer":94,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":165,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":190,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":281,"org.easymock.tests2.CaptureTest.testAnd":83,"org.easymock.tests2.UsageTest.strictResetToDefault":130,"org.easymock.tests2.NameTest.nameForMocksControl":22,"org.easymock.tests2.MockedExceptionTest.testMockedException":138,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":167,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":199,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":116,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":225,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":272,"org.easymock.tests2.DelegateToTest.testDelegate":160,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":244,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":211,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":100,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":127,"org.easymock.tests.MockingTest.testNicePartialClassMocking":210,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":255,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":42,"org.easymock.tests2.CaptureTest.testCaptureLast":87,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":195,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":206,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":67,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":148,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":37,"org.easymock.tests2.CaptureTest.testCapture1_2446744":86,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":171,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":253,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":248,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":17,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":81,"org.easymock.tests.UsageThrowableTest.throwError":260,"org.easymock.tests.UsageStrictMockTest.differentMethods":25,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":2,"org.easymock.tests.UsageExpectAndThrowTest.floatType":242,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":170,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":75,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":97,"org.easymock.tests.UsageVerifyTest.twoThrows":27,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":153,"org.easymock.samples.PartialClassMockTest.testGetArea":52,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":228,"org.easymock.samples.ExampleTest.voteAgainstRemoval":47,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":213,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":212,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":106,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":241,"org.easymock.tests2.UsageTest.niceToStrict":131,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":38,"org.easymock.tests2.UsageConstraintsTest.testNotNull":80,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":267,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":137,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":6,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":125,"org.easymock.tests2.UsageTest.defaultResetToNice":134,"org.easymock.samples.ExampleTest.voteAgainstRemovals":44,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":186,"org.easymock.tests2.CallbackTest.callback":161,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":297,"org.easymock.tests.UsageTest.openCallCountByLastCall":224,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":290,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":249,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":117,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":59,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":275,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":235,"org.easymock.tests.UsageOverloadedMethodTest.overloading":216,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":278,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":73,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":215,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":145,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":182,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":72,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":39,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":89,"org.easymock.tests.UsageThrowableTest.throwCheckedException":264,"org.easymock.tests2.EasyMockSupportClassTest.testAll":151,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":293,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":257,"org.easymock.tests2.CaptureTest.testCaptureAll":84,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":205,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":147,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":144,"org.easymock.tests2.UsageConstraintsTest.testMatches":74,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":146,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":99,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":11,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":169,"org.easymock.samples.ExampleTest.voteForRemovals":48,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":288,"org.easymock.tests2.NameTest.nameForNiceMock":21,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":111,"org.easymock.tests2.DependencyTest.testInterfaceMocking":54,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":26,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":287,"org.easymock.tests2.DelegateToTest.testStubDelegate":157,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":266,"org.easymock.tests2.AnswerTest.stubAnswer":98,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":196,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":159,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":5,"org.easymock.tests2.UsageConstraintsTest.greaterThan":76,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":198,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":107,"org.easymock.samples.ExampleTest.voteForRemoval":46,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":1,"org.easymock.tests.UsageExpectAndReturnTest.floatType":173,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":189,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":108,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":51,"org.easymock.tests.UsageThrowableTest.noUpperLimit":261,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":4,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":232,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":60,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":129,"org.easymock.tests2.SerializationTest.test":150,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":40,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":114,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":262,"org.easymock.tests2.UsageConstraintsTest.testSame":65,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":172,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":191,"org.easymock.tests2.CaptureTest.testCaptureFirst":93,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":155,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":115,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":136,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":178,"org.easymock.tests.GenericTest.testPackageScope":164,"org.easymock.tests2.CaptureTest.testCapture2_2446744":92,"org.easymock.tests2.UsageTest.moreThanOneArgument":15,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":110,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":271,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":128,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":7,"org.easymock.tests.GenericTest.testBridgedEquals":0,"org.easymock.tests2.NameTest.nameForMock":19,"org.easymock.tests.UsageExpectAndReturnTest.longType":174,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":112,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":258,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":183,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":12,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":300,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":256,"org.easymock.tests2.UsageStrictMockTest.differentMethods":14,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":221,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":166,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":175,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":254,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":200,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":219,"org.easymock.tests2.MockedExceptionTest.testRealException":140,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":179,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":9,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":245,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":3,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":265,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":234,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":143,"org.easymock.tests2.UsageConstraintsTest.testContains":71,"org.easymock.tests2.NameTest.nameForStrictMock":20,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":139,"org.easymock.tests2.UsageConstraintsTest.testFind":63,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":217,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":56,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":103,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":57,"org.easymock.tests.UsageExpectAndReturnTest.object":181,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":77,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":34,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":104,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":124,"org.easymock.tests2.UsageStrictMockTest.range":13,"org.easymock.tests2.UsageConstraintsTest.lessThan":82,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":120,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":286,"org.easymock.tests.UsageTest.exactCallCountByLastCall":226,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":8,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":113,"org.easymock.tests2.CaptureTest.testCaptureRightOne":90,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":269,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":201,"org.easymock.tests2.UsageConstraintsTest.testOr":66,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":283,"org.easymock.tests.UsageRangeTest.combination":197,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":101,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":187,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":277,"org.easymock.tests.UsageTest.wrongArguments":30,"org.easymock.tests2.MockBuilderTest.testWithConstructor":298,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":176,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":184,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":270,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":276,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":274,"org.easymock.tests2.UsageConstraintsTest.cmpTo":70,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":96,"org.easymock.tests2.UsageTest.openCallCountByLastCall":132,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":133,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":123,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":273,"org.easymock.tests2.CaptureTest.testCaptureFromStub":91,"org.easymock.tests.UsageTest.unexpectedCallWithArray":294,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":247,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":263,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":23,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":302,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":299,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":185,"org.easymock.tests2.UsageConstraintsTest.constraints":61,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":105,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":246,"org.easymock.samples.ExampleTest.addAndChangeDocument":49,"org.easymock.tests.CapturesMatcherTest.test":304,"org.easymock.tests.UsageStrictMockTest.testVerify":43,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":188,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":220,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":154,"org.easymock.tests2.UsageTest.resumeIfFailure":135,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":229,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":177,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":279,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":230,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":35,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":118}}]

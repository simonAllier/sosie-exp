[{"position":"org.easymock.EasyMock:1000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2110","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:180","sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:40","sourceCode":"return java.lang.Object.equals(java.lang.Object)","type":"CtReturnImpl"},"failures":[8,9,17,18,19,23,24,319,320,321,322,323,324,325,32,43,64,89,101,122,124,140,146,149,181,184,185,238,239,241,242,243,244,245,279,301,304],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"o":"actual"}},{"position":"org.easymock.internal.matchers.CompareTo:42","failures":[326],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[90,91],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[43,141,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,238,241,242,243,244,245,255,279,289,327,328,329],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1802","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[107],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1333","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:181","failures":[0,330,331,332,333,334,335,336,337,338],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[339],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1687","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))","type":"CtInvocationImpl"},"failures":[95,267,303],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[0,1,2,340],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareTo:41","failures":[326],"status":-1,"binaryOperator":"(java.lang.Object instanceof java.lang.Comparable)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[341,236,287,342],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:81","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[343],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[0,1,2,340],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[344,9,10],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:328","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[205,345,346],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:301","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:256","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[80],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1191","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[347,348,349,350,351,352,353,354,355,356,357,358,0,1,2,3,4,5,6,7,344,359,8,9,10,360,361,11,362,12,363,13,14,15,16,17,18,19,20,21,22,23,24,25,26,364,27,28,29,30,365,31,366,319,320,367,321,322,323,368,324,325,369,370,371,32,372,33,34,373,374,375,35,36,376,37,330,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,38,39,40,41,42,43,44,404,45,46,405,47,48,49,406,331,407,408,409,50,51,410,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,411,75,412,76,77,78,79,80,81,413,82,83,84,85,414,86,87,88,89,90,91,415,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,416,417,418,419,420,421,422,423,424,425,426,427,428,113,114,115,429,116,117,118,119,120,121,122,123,124,125,126,127,128,430,431,432,129,130,131,132,133,134,135,136,433,434,435,436,437,438,439,440,441,137,138,139,140,141,142,143,144,145,442,146,147,148,149,150,151,443,444,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,445,446,447,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,448,202,449,450,451,452,453,454,455,456,203,204,205,206,207,208,209,210,211,212,213,214,457,458,215,459,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,341,236,237,238,239,240,241,242,243,244,245,246,247,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,345,475,476,477,478,479,480,346,481,482,483,484,485,248,249,250,486,487,251,252,253,254,255,256,257,258,259,488,260,261,262,263,264,265,266,267,339,268,269,489,490,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,342,290,291,327,328,329,491,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,492,312,313,314,315,316,317,318,493,494,495,496,497],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[34,36,376,330,404,405,331,498,410,499,500],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"transplant":{"position":"org.easymock.internal.MocksControl:233","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[352,0,1,2,3,4,5,6,7,8,9,10,11,362,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,366,319,320,367,321,322,323,368,324,325,369,370,371,32,372,33,34,373,375,35,36,37,381,384,394,400,42,43,44,45,48,49,406,407,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,421,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,430,431,432,129,130,131,132,133,134,136,433,434,435,436,437,438,137,138,139,140,141,142,143,144,145,146,147,148,149,150,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,189,190,191,192,193,194,195,196,197,198,199,200,201,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,238,239,240,241,242,243,244,245,246,247,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,278,279,280,281,282,283,284,285,286,288,289,291,292,293,294,295,296,297,299,300,501,501,301,302,303,304,305,306,307,308,312,313,315],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[54,56,64,84,85,87,89,90,415,101,106],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[126,127,180,303,306,307],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[502,99],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[347,348,349,350,351,352,353,354,355,356,357,358,0,1,2,3,4,5,6,7,344,359,8,9,10,360,361,11,362,12,363,13,14,15,16,17,18,19,20,21,22,23,24,25,26,364,27,28,29,30,365,31,366,319,320,367,321,322,323,368,324,325,369,370,371,32,372,33,34,373,374,375,35,36,376,37,330,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,38,39,40,41,42,43,44,404,45,46,405,47,48,49,406,331,407,408,409,50,51,410,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,411,75,412,76,77,78,79,80,81,413,82,83,84,85,414,86,87,88,89,90,91,415,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,416,417,418,419,420,421,422,423,424,425,426,427,428,113,114,115,429,116,117,118,119,120,121,122,123,124,125,126,127,128,430,431,432,129,130,131,132,133,134,135,136,433,434,435,436,437,438,439,440,441,137,138,139,140,141,142,143,144,145,442,146,147,148,149,150,151,443,444,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,445,446,447,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,448,202,449,450,451,452,453,454,455,456,203,204,205,206,207,208,209,210,211,212,213,214,457,458,215,459,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,341,236,237,238,239,240,241,242,243,244,245,246,247,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,345,475,476,477,478,479,480,346,481,482,483,484,485,248,249,250,486,487,251,252,253,254,255,256,257,258,259,488,260,261,262,263,264,265,266,267,339,268,269,489,490,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,342,290,291,327,328,329,491,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,492,312,313,314,315,316,317,318,493,494,495,496,497],"status":-1,"binaryOperator":"(int >= 0)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareEqual:39","failures":[503],"status":-1,"binaryOperator":"int == 0","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"failures":[339,490],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericType":"genericType"}},{"position":"org.easymock.internal.LastControl:48","failures":[352,0,1,7,344,359,8,9,10,11,362,12,13,14,15,16,18,20,21,22,25,26,366,319,320,367,321,322,323,368,324,325,369,370,32,372,33,34,373,375,35,36,37,381,384,394,400,42,43,45,48,406,407,51,54,55,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,75,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,108,109,110,111,112,421,428,113,114,115,429,116,117,118,119,120,121,124,126,127,431,129,130,131,132,134,136,434,434,435,435,436,439,440,441,137,138,139,140,141,442,146,147,148,149,150,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,182,183,186,445,446,447,189,196,197,198,199,200,201,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,239,240,241,242,243,244,245,246,247,475,346,483,251,252,253,254,255,256,268,489,278,279,280,281,282,283,284,285,286,288,289,290,327,328,329,297,298,299,300,304,306,307,312,313,315,493,494,495,496,497],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[0,1,2,340],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1901","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Compare<T>(T , java.util.Comparator<? super T> , org.easymock.LogicalOperator))","type":"CtInvocationImpl"},"failures":[98],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1397","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[339,490],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"type":"type"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1542","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(long))","type":"CtInvocationImpl"},"failures":[85,90,101],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[330,331,333,334,335,336,337],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[504,505,343],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:77","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1065","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"failures":[445,327],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[14,16,17,18,19,23,24,26,319,322,323,325,32,506,507,508,509,510,511,512,513,514,515,516,69,78,80,84,98,122,124,125,126,127,128,178,179,180,181,184,185,186,201,341,236,262,278,279,280,287,342,290,291,517,518,519,520,521,522,523,301,303,304,305,306,307,308],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[344,9,10,466],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:140","sourceCode":"java.lang.StringBuilder.append(\":\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[16,17,23,24,38,39,40,41,124,126,127,179,181,184,185,524,278,279,280,303,304,306,307],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[411,525,526],"status":-1,"binaryOperator":"java.lang.String == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[14,43,178,463,255,279],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[352,0,1,3,4,5,6,7,344,359,8,9,10,11,362,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,366,319,320,367,321,322,323,368,324,325,369,370,32,372,33,34,373,375,35,36,37,381,384,394,400,42,43,44,45,48,49,406,407,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,79,80,82,83,84,85,86,87,88,89,90,91,415,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,421,428,113,114,115,429,116,117,118,119,120,121,122,124,125,126,127,128,431,129,130,131,132,134,136,434,434,435,435,436,439,440,441,137,138,139,140,141,142,143,144,145,442,146,147,148,149,150,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,445,446,447,189,196,197,198,199,200,201,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,341,236,238,239,240,241,242,243,244,245,246,247,475,346,483,251,252,253,254,255,256,267,268,489,278,279,280,281,282,283,284,285,286,287,288,289,342,290,291,327,328,329,292,293,294,295,296,297,298,299,300,301,303,304,305,306,307,308,492,312,313,315,493,494,495,496,497],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":85,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":178,"org.easymock.tests2.UsageTest.argumentsOrdered":24,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":369,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":422,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":470,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":19,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":432,"org.easymock.tests2.DelegateToTest.testReturnException":113,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":252,"org.easymock.tests.MockingTest.testPartialClassMocking":312,"org.easymock.tests.MockClassControlTest.testToString":272,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":403,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":483,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":478,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":413,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":388,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":384,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":216,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":524,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":362,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":333,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":91,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":146,"org.easymock.tests2.UsageTest.wrongArguments":17,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":358,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":144,"org.easymock.samples.ExampleTest.answerVsDelegate":130,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":154,"org.easymock.tests2.UsageConstraintsTest.testNull":87,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":317,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":71,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":277,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":325,"org.easymock.tests2.CaptureTest.testPrimitive":57,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":150,"org.easymock.tests.UsageTest.moreThanOneArgument":179,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":235,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":70,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":283,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":493,"org.easymock.tests.UsageTest.argumentsOrdered":185,"org.easymock.tests.UsageVarargTest.varargIntAccepted":259,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":515,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":345,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":196,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":44,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":337,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":426,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":28,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":49,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":462,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":200,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":510,"org.easymock.tests.ReplayStateInvalidUsageTest.times":211,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":352,"org.easymock.tests2.DependencyTest.testClassMocking":360,"org.easymock.tests2.AnswerTest.answer":7,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":415,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":476,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":6,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":444,"org.easymock.tests2.CaptureTest.testAnd":54,"org.easymock.tests2.UsageTest.strictResetToDefault":15,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":405,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":77,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":282,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":299,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":321,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":497,"org.easymock.tests2.DelegateToTest.testDelegate":116,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":231,"org.easymock.tests.LimitationsTest.mockFinalMethod":459,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":255,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":296,"org.easymock.tests2.DependencyTest.testClassMockingSupport":361,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":341,"org.easymock.tests2.CaptureTest.testCapture1_2446744":58,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":411,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":229,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":4,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":205,"org.easymock.tests.UsageThrowableTest.throwError":238,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":153,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":491,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":427,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":285,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":499,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":402,"org.easymock.samples.PartialClassMockTest.testGetArea":436,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":206,"org.easymock.tests.MockingTest.testInterfaceMocking":314,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":197,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":440,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":487,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":389,"org.easymock.tests2.UsageTest.niceToStrict":18,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":217,"org.easymock.tests2.ThreadingTest.testChangeDefault":526,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":460,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":343,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":48,"org.easymock.tests2.MockBuilderTest.testCreateMock":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":397,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":355,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":507,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":225,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":322,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":443,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":329,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":187,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":142,"org.easymock.tests.UsageOverloadedMethodTest.overloading":140,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":399,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":393,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":96,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":289,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":168,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":139,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":95,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":63,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":488,"org.easymock.tests.MockClassControlTest.testEquals":276,"org.easymock.tests2.EasyMockSupportClassTest.testAll":381,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":269,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":512,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":233,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":5,"org.easymock.tests2.CaptureTest.testCaptureAll":55,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":294,"org.easymock.tests.MockNameTest.defaultName":456,"org.easymock.tests2.UsageConstraintsTest.testMatches":97,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":203,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":284,"org.easymock.samples.ExampleTest.voteForRemovals":134,"org.easymock.tests.UsageVarargTest.allKinds":267,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":278,"org.easymock.samples.BasicClassMockTest.testPrintContent":438,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":295,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":244,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":122,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":429,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":423,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":256,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":454,"org.easymock.tests2.UsageConstraintsTest.greaterThan":99,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":338,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":382,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":298,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":80,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":455,"org.easymock.samples.ExampleTest.voteForRemoval":131,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":118,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":81,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":155,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":29,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":74,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":177,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":14,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":409,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":467,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":320,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":379,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":251,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":428,"org.easymock.tests2.CaptureTest.testCaptureFirst":67,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":466,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":367,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":26,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":291,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":164,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":120,"org.easymock.tests2.UsageTest.moreThanOneArgument":16,"org.easymock.tests2.CaptureTest.testCapture2_2446744":66,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":477,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":51,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":266,"org.easymock.tests.GenericTest.testBridgedEquals":490,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":194,"org.easymock.tests.UsageExpectAndReturnTest.longType":160,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":292,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":366,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":234,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":442,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":104,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":232,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":446,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":281,"org.easymock.tests.UsageCallCountTest.tooManyCalls":195,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":518,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":189,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":398,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":165,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":357,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":221,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":243,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":33,"org.easymock.tests.MockingTest.testNiceClassMocking":318,"org.easymock.tests.MockingTest.testClassMocking":311,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":188,"org.easymock.tests2.UsageConstraintsTest.testContains":94,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":111,"org.easymock.tests2.UsageConstraintsTest.testFind":86,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":141,"org.easymock.tests.MockTypeTest.fromEasyMockClass":152,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":13,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":301,"org.easymock.tests.UsageExpectAndReturnTest.object":167,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":75,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":356,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":324,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":261,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":334,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":250,"org.easymock.tests.UsageTest.exactCallCountByLastCall":186,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":137,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":465,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":494,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":482,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":522,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":330,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":173,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":257,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":288,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":417,"org.easymock.tests.MockClassControlTest.testHashCode":275,"org.easymock.tests2.EasyMockSupportTest.testVerify":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":391,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":509,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":495,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":286,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":328,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":3,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":53,"org.easymock.tests.UsageVarargTest.varargCharAccepted":260,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":448,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":123,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":481,"org.easymock.tests2.UsageTest.openCallCountByLastCall":20,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":504,"org.easymock.tests.DefaultClassInstantiatorTest.object":202,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":370,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":327,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":248,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":523,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":392,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":223,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":241,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":350,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":416,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":78,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":274,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":222,"org.easymock.tests.CapturesMatcherTest.test":501,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":174,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":445,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":511,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":400,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":273,"org.easymock.tests2.UsageTest.resumeIfFailure":25,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":151,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":27,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":254,"org.easymock.tests2.StubTest.stubWithReturnValue":43,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":331,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":166,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":105,"org.easymock.tests2.SerializationTest.testAllMockedMethod":2,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":475,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":514,"org.easymock.samples.SupportTest.voteForRemovals":431,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":339,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":419,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":228,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":340,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":346,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":344,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":484,"org.easymock.tests.UsageExpectAndThrowTest.object":226,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":102,"org.easymock.tests2.DelegateToTest.testWrongClass":115,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":246,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":247,"org.easymock.samples.ConstructorCalledMockTest.testTax":434,"org.easymock.tests.UsageStrictMockTest.range":306,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":365,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":368,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":372,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":227,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":406,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":184,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":213,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":378,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":143,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":517,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":441,"org.easymock.tests2.CaptureTest.testCaptureNone":62,"org.easymock.tests.UsageUnorderedTest.message":201,"org.easymock.tests.UsageVerifyTest.twoReturns":280,"org.easymock.tests.UsageVarargTest.varargByteAccepted":265,"org.easymock.tests2.ThreadingTest.testThreadSafe":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":395,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":192,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":486,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":437,"org.easymock.tests2.CaptureTest.testCapture_2617107":56,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":516,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":237,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":479,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":149,"org.easymock.tests2.UsageConstraintsTest.any":92,"org.easymock.tests2.StubTest.stub":42,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":210,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":447,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":480,"org.easymock.tests.UsageExpectAndThrowTest.longType":219,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":253,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":452,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":209,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":125,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":421,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests.LimitationsTest.mockNativeMethod":215,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":489,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":176,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":349,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":128,"org.easymock.tests2.NameTest.nameForMocksControl":41,"org.easymock.tests2.MockedExceptionTest.testMockedException":110,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":351,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":383,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":183,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":220,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":315,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":363,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":68,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":407,"org.easymock.tests.MockingTest.testNicePartialClassMocking":313,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":73,"org.easymock.tests2.CompareToTest.testNotComparable":326,"org.easymock.tests2.CompareToTest.testCompareEqual":503,"org.easymock.tests2.CaptureTest.testCaptureLast":61,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":332,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":347,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":236,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":36,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":90,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":103,"org.easymock.tests.MockingTest.testTwoMocks":492,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":376,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":157,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":224,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":23,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":107,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":525,"org.easymock.samples.ExampleTest.removeNonExistingDocument":135,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":207,"org.easymock.tests.UsageStrictMockTest.differentMethods":307,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":354,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":418,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":450,"org.easymock.tests2.ConstraintsToStringTest.andToString":513,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":119,"org.easymock.tests2.MockBuilderTest.testCreateMockString":52,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":270,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":385,"org.easymock.tests.UsageExpectAndThrowTest.floatType":218,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":380,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":8,"org.easymock.tests.UsageVerifyTest.twoThrows":279,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":377,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":287,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":394,"org.easymock.samples.ExampleTest.voteAgainstRemoval":132,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":471,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":439,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":79,"org.easymock.tests.LimitationsTest.privateConstructor":458,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":500,"org.easymock.tests2.UsageConstraintsTest.testNotNull":106,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":109,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":245,"org.easymock.tests2.UsageTest.defaultResetToNice":22,"org.easymock.samples.ExampleTest.voteAgainstRemovals":129,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":472,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":172,"org.easymock.tests.UsageVarargTest.differentLength":262,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":348,"org.easymock.tests2.CallbackTest.callback":32,"org.easymock.tests2.UsageConstraintsTest.equals":414,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":520,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":412,"org.easymock.tests.UsageTest.openCallCountByLastCall":182,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":82,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":148,"org.easymock.tests.UsageCallCountTest.tooFewCalls":190,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":373,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":145,"org.easymock.tests.UsageThrowableTest.throwCheckedException":242,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":519,"org.easymock.tests.MockingTest.testStrictClassMocking":310,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":138,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":35,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":34,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":353,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":212,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":375,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":10,"org.easymock.tests.ObjectMethodsTest.testHashCode":249,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":336,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":121,"org.easymock.tests2.NameTest.nameForNiceMock":40,"org.easymock.tests2.DependencyTest.testInterfaceMocking":11,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":335,"org.easymock.samples.ExampleTest.addDocument":133,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":396,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":401,"org.easymock.tests2.DelegateToTest.testStubDelegate":114,"org.easymock.tests2.AnswerTest.stubAnswer":9,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":304,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":408,"org.easymock.tests.UsageVarargTest.varargLongAccepted":264,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":308,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":469,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":175,"org.easymock.tests.UsageExpectAndReturnTest.floatType":159,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":37,"org.easymock.tests2.ConstraintsToStringTest.orToString":506,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":435,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":425,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":100,"org.easymock.tests.UsageThrowableTest.noUpperLimit":239,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":342,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":83,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":364,"org.easymock.tests2.SerializationTest.test":1,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":59,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":449,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":158,"org.easymock.tests2.UsageConstraintsTest.testSame":88,"org.easymock.samples.SupportTest.addDocument":430,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":374,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":386,"org.easymock.tests.GenericTest.testPackageScope":268,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":496,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":464,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":424,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":316,"org.easymock.tests2.NameTest.nameForMock":38,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":169,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":410,"org.easymock.tests2.UsageStrictMockTest.differentMethods":127,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":76,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":161,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":230,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":485,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":300,"org.easymock.tests2.MockedExceptionTest.testRealException":112,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":156,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":474,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":31,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":521,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":473,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":124,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":147,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":214,"org.easymock.tests2.NameTest.nameForStrictMock":39,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":47,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":505,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":12,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":72,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":30,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":451,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":101,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":45,"org.easymock.tests2.UsageStrictMockTest.range":126,"org.easymock.tests2.UsageConstraintsTest.lessThan":108,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":420,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":468,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":319,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":390,"org.easymock.tests2.CaptureTest.testCaptureRightOne":64,"org.easymock.tests2.UsageConstraintsTest.testOr":89,"org.easymock.tests.UsageRangeTest.combination":297,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":69,"org.easymock.tests.UsageTest.wrongArguments":181,"org.easymock.tests2.MockBuilderTest.testWithConstructor":404,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":387,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":271,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":162,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":461,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":170,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":453,"org.easymock.tests.UsageVarargTest.varargShortAccepted":263,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":193,"org.easymock.tests2.UsageConstraintsTest.cmpTo":93,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":359,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":463,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":21,"org.easymock.tests2.CaptureTest.testCaptureFromStub":65,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":204,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":46,"org.easymock.tests.UsageTest.unexpectedCallWithArray":180,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":303,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":191,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":498,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":171,"org.easymock.tests2.UsageConstraintsTest.constraints":84,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":305,"org.easymock.samples.ExampleTest.addAndChangeDocument":136,"org.easymock.tests2.ConstraintsToStringTest.notToString":508,"org.easymock.tests.UsageStrictMockTest.testVerify":309,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":433,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":302,"org.easymock.tests2.CompareToTest.testGreateThan":502,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":293,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":60,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":198,"org.easymock.tests.LimitationsTest.abstractClass":457,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":163,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":199,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":290,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":258,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":323}}]

[{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"failures":[0],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:137","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[1,2,3],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:67","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","type":"CtThrowImpl"},"failures":[83],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[84,85,86,87,4,5,88,6,89,7,8,90,9,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,10,11,139,12,140,141,142,13,14,15,16,17,18,143,144,19,20,145,21,22,23,146,24,25,26,27,28,147,148,149,29,150,30,31,151,152,153,154,155,156,157,158,159,160,32,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,33,34,35,36,37,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,38,242,39,40,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,1,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,41,42,43,44,303,45,46,47,48,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,49,50,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,51,340,52,53,341,54,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,55,365,366,56,367,368,369,370,371,372,373,374,375,57,376,377,378,379,380,58,381,382,383,384,59,385,386,387,60,388,61,389,62,390,391,392,63,393,394,395,64,65,66,67,396,68,69,70,397,398,399,400,71,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,72,73,74,75,76,77,431,432,78,433,434,435,79,80,81,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,82,485,486,487,488,489,490,491],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[492,493,118,149,494,495],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[405],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:49","sourceCode":"org.easymock.internal.Injection.getAnnotation()","type":"CtInvocationImpl"},"failures":[442,445,447,448,475,478,480,481],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[404,411,457,459,467],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"failures":[496,497],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[405],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:126","sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"actual","myArgument":"actual"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:53","sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Null:35","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"failures":[110,71,408,426],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"o":"actual","this":"actual"}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"failures":[496,497],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[84,85,86,87,4,5,88,6,89,7,8,90,9,92,93,94,99,100,101,103,104,105,106,107,108,109,110,113,114,115,116,117,118,119,120,121,122,123,124,10,11,12,13,14,15,16,17,18,143,144,19,20,145,21,22,23,146,24,25,26,27,28,147,148,149,29,150,30,31,151,159,160,32,161,162,163,164,177,178,179,180,181,183,184,187,188,189,190,191,192,193,194,33,34,35,36,37,195,196,197,198,199,205,206,207,208,209,210,211,213,214,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,38,39,40,243,290,291,292,293,294,295,296,297,41,42,43,44,303,45,47,48,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,49,50,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,51,340,52,53,341,54,349,352,353,354,355,356,357,358,359,360,361,55,56,57,58,383,59,60,388,61,62,392,63,394,64,65,66,67,68,69,70,398,399,400,71,401,402,403,404,405,407,408,409,410,411,412,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,72,73,74,75,76,77,431,78,435,79,80,81,443,457,458,459,460,461,462,463,464,465,466,467,468,469,470,476,484,82,485,487,488,489,490,491],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[492,493,118,149,494,495],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"method","equalsMethod":"result"}},{"position":"org.easymock.EasyMock:1177","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[423],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:987","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:188","sourceCode":"try {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor });\n    if (org.easymock.ConstructorArgs != null) {\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>;\n        try {\n            java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n        } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n            throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n        }\n        T T;\n        try {\n            java.lang.reflect.Constructor<?>.setAccessible(true);\n            T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n        } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n        } catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n        }\n        return T;\n    } else {\n        net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory;\n        try {\n            net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n        }\n        net.sf.cglib.proxy.Factory.getCallback(0);\n        return ((T)(net.sf.cglib.proxy.Factory));\n    }\n} finally {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null);\n}","type":"CtTryImpl"},"failures":[85,85,86,86,5,93,94,128,133,136,137,138,10,11,12,142,188,212,213,214,215,216,240,38,244,245,246,247,248,249,250,251,276,277,278,279,280,1,281,282,283,54,342,343,359,361,362,363,364,55,365,366,56,367,368,369,370,371,372,373,374,375,57,376,377,378,379,380,58,381,382,383,384,59,385,386,387,60,388,61,389,62,391,392,63,393,394,64,65,66,67,69,70,72,73,75,76,77,431,78,433,434,435,79,80,81,436,437,443,450,454,488,489,490],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:251","sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"this.org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"failures":[59,63,79,437],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.EqualsWithDelta:45","sourceCode":"java.lang.StringBuffer.append(((((\"eq(\" + (java.lang.Number)) + \", \") + (java.lang.Number)) + \")\"))","type":"CtInvocationImpl"},"failures":[498],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[499,500,0,501,502,503,504,505],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[85,85,86,86,5,93,94,128,133,136,137,138,10,11,12,142,188,212,213,214,215,216,240,241,38,242,244,245,246,247,248,249,250,251,277,278,279,280,1,281,283,289,54,342,359,361,362,363,364,55,365,366,56,367,368,369,370,371,372,373,374,375,57,376,377,378,379,380,58,381,382,383,506,59,385,387,60,388,61,62,391,392,63,507,394,64,65,66,67,69,70,72,73,75,76,77,431,78,433,434,435,79,80,81,436,437,450,454,508,509,488,489,490],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"m":"result","methodName":"name"}},{"transplant":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[160,162,189,190,191,192,193,194,308,488,489,490,491],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (int)","type":"CtReturnImpl"},"failures":[114,115,117,119,122,123,149,29,31,243,327,328,334,335,51,53,345,346,347,348],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[411,412],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":405,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":116,"org.easymock.tests2.UsageTest.argumentsOrdered":335,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":319,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":444,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":262,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":330,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":88,"org.easymock.tests2.DelegateToTest.testReturnException":484,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":190,"org.easymock.tests.MockingTest.testPartialClassMocking":10,"org.easymock.tests.MockClassControlTest.testToString":246,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":344,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":157,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":437,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":370,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":56,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":220,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":50,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":412,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":32,"org.easymock.tests2.UsageTest.wrongArguments":328,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":482,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":179,"org.easymock.samples.ExampleTest.answerVsDelegate":89,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":133,"org.easymock.tests2.UsageConstraintsTest.testNull":408,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":141,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":75,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":251,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":318,"org.easymock.tests2.CaptureTest.testPrimitive":460,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":164,"org.easymock.tests.UsageTest.moreThanOneArgument":117,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":239,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":74,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":43,"org.easymock.tests.UsageTest.argumentsOrdered":123,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":298,"org.easymock.tests.UsageVarargTest.varargIntAccepted":101,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":267,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":33,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":383,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":452,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":448,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":388,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":254,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":37,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":476,"org.easymock.tests.ReplayStateInvalidUsageTest.times":173,"org.easymock.tests2.DependencyTest.testClassMocking":322,"org.easymock.tests2.AnswerTest.answer":349,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":413,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":269,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":358,"org.easymock.tests2.CaptureTest.testAnd":457,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":130,"org.easymock.tests2.UsageTest.strictResetToDefault":326,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":435,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":386,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":42,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":47,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":313,"org.easymock.tests2.DelegateToTest.testDelegate":487,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":302,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":235,"org.easymock.tests.LimitationsTest.mockFinalMethod":242,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":193,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":199,"org.easymock.tests2.DependencyTest.testClassMockingSupport":323,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":125,"org.easymock.tests2.CaptureTest.testCapture1_2446744":461,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":432,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":233,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":356,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":167,"org.easymock.tests.UsageThrowableTest.throwError":290,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":132,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":449,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":95,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":303,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":382,"org.easymock.samples.PartialClassMockTest.testGetArea":5,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":168,"org.easymock.tests.MockingTest.testInterfaceMocking":139,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":34,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":154,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":221,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":289,"org.easymock.tests2.UsageTest.niceToStrict":329,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":371,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":505,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":252,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":60,"org.easymock.tests2.MockBuilderTest.testCreateMock":392,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":378,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":479,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":494,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":229,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":314,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":129,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":98,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":203,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":177,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":502,"org.easymock.tests.UsageOverloadedMethodTest.overloading":218,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":375,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":380,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":418,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":184,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":21,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":217,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":417,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":2,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":466,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":102,"org.easymock.tests2.EasyMockSupportClassTest.testAll":55,"org.easymock.tests.MockClassControlTest.testEquals":250,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":214,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":237,"org.easymock.tests2.CaptureTest.testCaptureAll":458,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":197,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":357,"org.easymock.tests.MockNameTest.defaultName":111,"org.easymock.tests2.UsageConstraintsTest.testMatches":419,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":165,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":44,"org.easymock.samples.ExampleTest.voteForRemovals":9,"org.easymock.tests.UsageVarargTest.allKinds":110,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":113,"org.easymock.samples.BasicClassMockTest.testPrintContent":94,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":198,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":296,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":338,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":486,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":445,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":194,"org.easymock.tests2.UsageConstraintsTest.greaterThan":421,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":365,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":46,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":81,"org.easymock.samples.ExampleTest.voteForRemoval":7,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":283,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":436,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":399,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":134,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":453,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":431,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":188,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":325,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":391,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":259,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":311,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":363,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":189,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":483,"org.easymock.tests2.CaptureTest.testCaptureFirst":470,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":258,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":312,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":337,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":187,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":144,"org.easymock.tests2.CaptureTest.testCapture2_2446744":469,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":71,"org.easymock.tests2.UsageTest.moreThanOneArgument":327,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":63,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":270,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":109,"org.easymock.tests.GenericTest.testBridgedEquals":216,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":503,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":0,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":210,"org.easymock.tests.UsageExpectAndReturnTest.longType":16,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":195,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":309,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":507,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":238,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":426,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":112,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":236,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":41,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":201,"org.easymock.tests.UsageCallCountTest.tooManyCalls":211,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":379,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":19,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":481,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":225,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":295,"org.easymock.tests.MockingTest.testNiceClassMocking":142,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":65,"org.easymock.tests.MockingTest.testClassMocking":137,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":506,"org.easymock.tests2.UsageConstraintsTest.testContains":416,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":204,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":490,"org.easymock.tests2.UsageConstraintsTest.testFind":407,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":219,"org.easymock.tests.MockTypeTest.fromEasyMockClass":131,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":147,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":306,"org.easymock.tests.UsageExpectAndReturnTest.object":145,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":78,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":480,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":498,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":317,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":104,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":287,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":504,"org.easymock.tests.UsageTest.exactCallCountByLastCall":124,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":159,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":257,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":156,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":299,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":342,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":99,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":25,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":183,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":439,"org.easymock.tests.MockClassControlTest.testHashCode":249,"org.easymock.tests2.EasyMockSupportTest.testVerify":321,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":373,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":300,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":181,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":97,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":355,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":395,"org.easymock.tests.UsageVarargTest.varargCharAccepted":103,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":276,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":339,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":275,"org.easymock.tests2.UsageTest.openCallCountByLastCall":331,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":499,"org.easymock.tests.DefaultClassInstantiatorTest.object":277,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":320,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":96,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":285,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":374,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":293,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":474,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":438,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":79,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":248,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":226,"org.easymock.tests.CapturesMatcherTest.test":496,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":26,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":200,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":58,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":247,"org.easymock.tests2.UsageTest.resumeIfFailure":336,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":128,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":451,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":192,"org.easymock.tests2.StubTest.stubWithReturnValue":308,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":389,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":427,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":20,"org.easymock.tests2.SerializationTest.testAllMockedMethod":361,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":268,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":495,"org.easymock.samples.SupportTest.voteForRemovals":4,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":212,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":441,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":232,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":274,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":350,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":158,"org.easymock.tests.UsageExpectAndThrowTest.object":230,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":424,"org.easymock.tests2.DelegateToTest.testWrongClass":485,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":39,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":40,"org.easymock.tests.UsageStrictMockTest.range":30,"org.easymock.samples.ConstructorCalledMockTest.testTax":85,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":455,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":316,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":64,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":501,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":231,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":61,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":175,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":362,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":178,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":492,"org.easymock.tests2.CaptureTest.testCaptureNone":465,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":155,"org.easymock.tests.UsageUnorderedTest.message":243,"org.easymock.tests.UsageVerifyTest.twoReturns":115,"org.easymock.tests.UsageVarargTest.varargByteAccepted":108,"org.easymock.tests2.ThreadingTest.testThreadSafe":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":376,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":208,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":93,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":288,"org.easymock.tests2.CaptureTest.testCapture_2617107":459,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":127,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":163,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":272,"org.easymock.tests2.UsageConstraintsTest.any":414,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":172,"org.easymock.tests2.StubTest.stub":307,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":202,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":191,"org.easymock.tests.UsageExpectAndThrowTest.longType":223,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":273,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":1,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":171,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":340,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":443,"org.easymock.tests2.SerializationTest.testClass":359,"org.easymock.tests.LimitationsTest.mockNativeMethod":38,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":28,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":215,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":473,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":341,"org.easymock.tests2.NameTest.nameForMocksControl":348,"org.easymock.tests2.MockedExceptionTest.testMockedException":489,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":475,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":366,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":121,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":12,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":224,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":305,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":72,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":62,"org.easymock.tests.MockingTest.testNicePartialClassMocking":11,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":77,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":471,"org.easymock.tests2.CaptureTest.testCaptureLast":464,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":126,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":411,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":70,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":425,"org.easymock.tests.MockingTest.testTwoMocks":138,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":397,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":13,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":228,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":334,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":429,"org.easymock.samples.ExampleTest.removeNonExistingDocument":91,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":478,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":169,"org.easymock.tests.UsageStrictMockTest.differentMethods":31,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":440,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":279,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":400,"org.easymock.tests2.MockBuilderTest.testCreateMockString":394,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":244,"org.easymock.tests.UsageExpectAndThrowTest.floatType":222,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":367,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":420,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":364,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":352,"org.easymock.tests.UsageVerifyTest.twoThrows":114,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":343,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":57,"org.easymock.samples.ExampleTest.voteAgainstRemoval":8,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":153,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":263,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":80,"org.easymock.tests.LimitationsTest.privateConstructor":241,"org.easymock.tests2.UsageConstraintsTest.testNotNull":428,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":488,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":297,"org.easymock.tests2.UsageTest.defaultResetToNice":333,"org.easymock.samples.ExampleTest.voteAgainstRemovals":6,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":24,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":264,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":472,"org.easymock.tests.UsageVarargTest.differentLength":105,"org.easymock.tests2.CallbackTest.callback":324,"org.easymock.tests2.UsageConstraintsTest.equals":406,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":433,"org.easymock.tests.UsageTest.openCallCountByLastCall":120,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":402,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":162,"org.easymock.tests.UsageCallCountTest.tooFewCalls":206,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":67,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":180,"org.easymock.tests.UsageThrowableTest.throwCheckedException":294,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":493,"org.easymock.tests.MockingTest.testStrictClassMocking":136,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":160,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":69,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":477,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":66,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":174,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":68,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":354,"org.easymock.tests.ObjectMethodsTest.testHashCode":286,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":401,"org.easymock.tests2.NameTest.nameForNiceMock":347,"org.easymock.tests2.DependencyTest.testInterfaceMocking":49,"org.easymock.samples.ExampleTest.addDocument":90,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":377,"org.easymock.tests2.DelegateToTest.testStubDelegate":82,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":381,"org.easymock.tests2.AnswerTest.stubAnswer":353,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":29,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":390,"org.easymock.tests.UsageVarargTest.varargLongAccepted":107,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":151,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":261,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":27,"org.easymock.tests.UsageExpectAndReturnTest.floatType":15,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":54,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":86,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":447,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":422,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":185,"org.easymock.tests.UsageThrowableTest.noUpperLimit":291,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":403,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":450,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":462,"org.easymock.tests2.SerializationTest.test":360,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":3,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":278,"org.easymock.tests2.UsageConstraintsTest.testSame":409,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":14,"org.easymock.samples.SupportTest.addDocument":87,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":396,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":368,"org.easymock.tests.GenericTest.testPackageScope":213,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":301,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":256,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":446,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":140,"org.easymock.tests2.NameTest.nameForMock":345,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":22,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":393,"org.easymock.tests2.UsageStrictMockTest.differentMethods":53,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":434,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":17,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":234,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":284,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":48,"org.easymock.tests2.MockedExceptionTest.testRealException":491,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":135,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":456,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":266,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":51,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":265,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":176,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":161,"org.easymock.tests2.NameTest.nameForStrictMock":346,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":387,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":500,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":304,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":76,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":454,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":423,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":280,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":59,"org.easymock.tests2.UsageStrictMockTest.range":52,"org.easymock.tests2.UsageConstraintsTest.lessThan":430,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":508,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":442,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":260,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":310,"org.easymock.tests2.CaptureTest.testCaptureRightOne":467,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":372,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":83,"org.easymock.tests2.UsageConstraintsTest.testOr":410,"org.easymock.tests.UsageRangeTest.combination":45,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":73,"org.easymock.tests.UsageTest.wrongArguments":119,"org.easymock.tests2.MockBuilderTest.testWithConstructor":384,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":369,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":245,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":18,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":23,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":253,"org.easymock.tests.UsageVarargTest.varargShortAccepted":106,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":281,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":209,"org.easymock.tests2.UsageConstraintsTest.cmpTo":415,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":351,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":255,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":332,"org.easymock.tests2.CaptureTest.testCaptureFromStub":468,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":166,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":385,"org.easymock.tests.UsageTest.unexpectedCallWithArray":118,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":149,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":207,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":146,"org.easymock.tests2.CaptureTest.testCapture":497,"org.easymock.tests2.UsageConstraintsTest.constraints":404,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":150,"org.easymock.samples.ExampleTest.addAndChangeDocument":92,"org.easymock.tests.UsageStrictMockTest.testVerify":152,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":84,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":148,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":196,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":463,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":509,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":35,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":143,"org.easymock.tests.LimitationsTest.abstractClass":240,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":186,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":36,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":100,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":315}}]

[{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[0,1,2,3],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[4],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[5],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:172","failures":[6,7],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:185","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:256","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:141","sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:70","failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,5,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[34,36,37,38,39,40,41,43,76,44,45,47],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[15,16,17,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,29,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,65],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1290","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[34,36,44,51,5,53,55,56,58,68,73],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:67","sourceCode":"for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int]);\n    if (java.lang.Class<?> != null) {\n        java.lang.Class<?>[][int] = java.lang.Class<?>;\n    } else {\n        java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n    }\n}","type":"CtForImpl"},"failures":[113,114,115,116],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:54","sourceCode":"return false","type":"CtReturnImpl"},"failures":[117],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[34,36,44,51,5,55,56,58,68],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:192","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[16,81,83,89,103,110],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:70","failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,5,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[15,16,77,87,89,90,91,92,118,94,95,96,99,100,101],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[119,49,51,66,72],"status":-1,"binaryOperator":"int <= 0","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[120],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1519","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1672","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(short[]))","type":"CtInvocationImpl"},"failures":[62],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[17,78,121,122,88,123,124,125,126,127,128,93,94,95,29,97,129,98],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:63","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class.java.lang.Class.forName(java.lang.String, true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","type":"CtLocalVariableImpl"},"failures":[113,114,115,116],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[130],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:80","sourceCode":"return org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType())","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[8,9,131,132,133,134,135,10,11,12,13,14,15,136,137,138,16,17,139,77,78,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,88,89,90,169,170,91,92,171,172,18,19,20,21,22,173,174,175,176,177,178,179,180,181,23,182,183,184,185,186,187,188,24,189,25,26,190,191,192,193,194,195,124,196,197,198,125,126,199,127,200,201,128,202,203,204,205,206,207,93,94,95,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,27,28,230,231,29,232,96,97,233,234,235,236,237,238,239,240,241,242,98,99,243,244,245,246,100,101,247,248],"status":-2,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[249,250,251,252,1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"parameterType"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[249,250,251,253,252,0,1,2,254,114],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:235","failures":[220,221,0,1,255,256,2,254,257,258,259,3,4,260,114],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:98","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"result"}},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"failures":[8,131,261,132,133,262,263,134,135,10,11,12,13,14,15,136,138,16,17,139,77,78,121,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,88,90,169,170,91,92,171,172,18,19,20,21,22,264,265,266,173,174,175,176,177,178,179,180,181,23,182,183,184,24,25,26,267,190,191,192,193,194,195,124,196,197,198,125,126,199,127,200,201,128,202,203,204,205,206,207,93,94,95,213,214,215,216,217,218,219,222,223,224,225,226,227,228,229,27,28,231,29,232,96,97,129,233,234,235,236,237,238,239,240,241,242,98,99,243,244,245,246,100,101,247,248,268,269,270,271,30,0,272,7,273,274,275,276,277,278,279,280,281,282,283,31,284,285,286,287,288,32,33,289,290,291,292,34,35,36,37,38,39,40,41,42,43,44,46,47,293,294,295,296,297,298,299,300,301,302,303,304,305,49,50,51,5,52,53,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,114,115,116,306],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.Range:36","failures":[8,9,307,308,309,310,311,131,261,132,133,312,262,263,120,134,135,313,314,315,10,11,12,13,14,15,316,317,318,319,320,321,322,323,324,325,326,327,328,329,136,330,137,138,16,17,139,77,78,121,331,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,79,80,122,332,333,334,168,88,89,90,169,170,91,92,171,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,172,18,19,20,21,22,362,363,364,365,366,264,367,265,266,368,123,118,173,174,175,369,176,177,370,178,179,180,181,23,371,372,373,374,375,376,377,378,379,380,381,382,383,182,183,384,184,385,386,387,185,186,187,188,24,189,388,389,390,391,392,393,394,395,396,397,6,398,399,25,26,400,401,402,403,404,405,406,407,408,267,190,191,192,193,194,195,124,196,197,198,125,126,199,127,200,201,128,202,203,204,205,206,207,409,410,411,93,94,95,412,413,414,415,416,417,418,419,420,421,422,423,424,208,209,210,211,212,213,214,215,216,217,218,425,219,220,221,222,223,224,225,226,227,228,426,427,428,429,430,229,431,432,433,434,435,436,437,438,27,28,230,231,29,232,96,97,129,439,233,440,441,442,443,444,445,446,234,235,236,237,447,238,239,240,448,241,242,98,99,243,244,245,246,449,100,101,450,247,451,452,248,453,268,269,270,271,30,0,1,454,455,456,457,458,459,460,255,461,462,256,463,272,464,7,2,273,465,254,466,467,258,468,469,470,471,274,472,473,275,474,475,476,477,478,479,480,481,482,276,483,484,485,486,487,277,488,489,278,279,280,281,282,283,490,491,31,260,492,130,493,284,494,495,496,285,497,498,286,287,288,32,499,33,500,289,290,291,501,292,34,35,36,37,38,39,40,41,42,43,44,45,46,47,293,294,295,296,297,298,299,502,300,301,302,303,304,48,503,504,505,506,507,305,508,509,510,511,512,513,514,515,516,517,49,50,51,5,117,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,114,115,116,306],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.Same:37","failures":[54],"status":-1,"binaryOperator":"(java.lang.Object) == java.lang.Object","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:205","sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:149","sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","type":"CtIfImpl"},"failures":[249,250,251,253,252,0,1,2,254,114],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cstr":"classConstructor"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":5,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":168,"org.easymock.tests2.UsageTest.argumentsOrdered":101,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":302,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":431,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":345,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":244,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":223,"org.easymock.tests2.DelegateToTest.testReturnException":289,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":186,"org.easymock.tests.MockingTest.testPartialClassMocking":182,"org.easymock.tests.MockClassControlTest.testToString":403,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":455,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":333,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":496,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":354,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":477,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":192,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":275,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":28,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":249,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":57,"org.easymock.tests2.UsageTest.wrongArguments":99,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":10,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":513,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":414,"org.easymock.samples.ExampleTest.answerVsDelegate":214,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":6,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":386,"org.easymock.tests2.UsageConstraintsTest.testNull":53,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":281,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":408,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":301,"org.easymock.tests2.CaptureTest.testPrimitive":37,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":14,"org.easymock.tests.UsageTest.moreThanOneArgument":88,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":206,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":280,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":210,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":388,"org.easymock.tests.UsageTest.argumentsOrdered":92,"org.easymock.tests.UsageVarargTest.varargIntAccepted":175,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":111,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":350,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":18,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":460,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":442,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":435,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":464,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":337,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":22,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":106,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":305,"org.easymock.tests.ReplayStateInvalidUsageTest.times":324,"org.easymock.tests2.DependencyTest.testClassMocking":437,"org.easymock.tests2.AnswerTest.answer":285,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":58,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":352,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":517,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":395,"org.easymock.tests2.CaptureTest.testAnd":34,"org.easymock.tests2.UsageTest.strictResetToDefault":242,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":130,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":256,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":209,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":410,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":297,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":392,"org.easymock.tests2.DelegateToTest.testDelegate":292,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":202,"org.easymock.tests.LimitationsTest.mockFinalMethod":330,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":24,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":366,"org.easymock.tests2.DependencyTest.testClassMockingSupport":438,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":79,"org.easymock.tests2.CaptureTest.testCapture1_2446744":38,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":491,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":201,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":515,"org.easymock.tests.UsageThrowableTest.throwError":140,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":318,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":397,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":436,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":315,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":212,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":259,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":489,"org.easymock.samples.PartialClassMockTest.testGetArea":222,"org.easymock.tests.MockingTest.testInterfaceMocking":384,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":319,"org.easymock.tests2.CompareToTest.testLessOrEqual":119,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":19,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":372,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":478,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":193,"org.easymock.tests2.UsageTest.niceToStrict":243,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":379,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":335,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":272,"org.easymock.tests2.MockBuilderTest.testCreateMock":466,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":485,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":510,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":126,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":103,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":298,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":394,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":309,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":310,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":412,"org.easymock.tests.UsageOverloadedMethodTest.overloading":190,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":487,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":482,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":63,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":266,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":159,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":267,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":62,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":43,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":369,"org.easymock.tests.MockClassControlTest.testEquals":407,"org.easymock.tests2.EasyMockSupportClassTest.testAll":274,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":135,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":108,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":204,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":516,"org.easymock.tests2.CaptureTest.testCaptureAll":35,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":364,"org.easymock.tests.MockNameTest.defaultName":400,"org.easymock.tests2.UsageConstraintsTest.testMatches":64,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":211,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":316,"org.easymock.samples.ExampleTest.voteForRemovals":218,"org.easymock.tests.UsageVarargTest.allKinds":23,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":93,"org.easymock.samples.BasicClassMockTest.testPrintContent":226,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":365,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":146,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":230,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":501,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":432,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":189,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":423,"org.easymock.tests2.UsageConstraintsTest.greaterThan":66,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":252,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":472,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":409,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":494,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":424,"org.easymock.samples.ExampleTest.voteForRemoval":215,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":495,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":269,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":398,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":443,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":490,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":172,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":241,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":254,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":342,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":295,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":142,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":470,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":185,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":500,"org.easymock.tests2.CaptureTest.testCaptureFirst":47,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":341,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":296,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":247,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":118,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":155,"org.easymock.tests2.UsageTest.moreThanOneArgument":98,"org.easymock.tests2.CaptureTest.testCapture2_2446744":46,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":271,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":353,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":181,"org.easymock.tests.GenericTest.testBridgedEquals":314,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":262,"org.easymock.tests.UsageExpectAndReturnTest.longType":151,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":293,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":362,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":205,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":71,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":380,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":203,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":208,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":360,"org.easymock.tests.UsageCallCountTest.tooManyCalls":263,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":82,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":131,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":486,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":156,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":512,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":196,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":145,"org.easymock.tests.MockingTest.testNiceClassMocking":387,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":235,"org.easymock.tests.MockingTest.testClassMocking":382,"org.easymock.tests2.UsageConstraintsTest.testContains":61,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":311,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":248,"org.easymock.tests2.UsageConstraintsTest.testFind":52,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":191,"org.easymock.tests.MockTypeTest.fromEasyMockClass":396,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":137,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":33,"org.easymock.tests.UsageExpectAndReturnTest.object":158,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":31,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":511,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":300,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":177,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":250,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":377,"org.easymock.tests.UsageTest.exactCallCountByLastCall":171,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":340,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":389,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":332,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":86,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":1,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":173,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":164,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":265,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":427,"org.easymock.tests.MockClassControlTest.testHashCode":406,"org.easymock.tests2.EasyMockSupportTest.testVerify":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":480,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":105,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":390,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":264,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":308,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":514,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":48,"org.easymock.tests.UsageVarargTest.varargCharAccepted":176,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":416,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":231,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":358,"org.easymock.tests2.UsageTest.openCallCountByLastCall":245,"org.easymock.tests.DefaultClassInstantiatorTest.object":417,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":303,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":307,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":375,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":481,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":198,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":143,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":506,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":426,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":493,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":405,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":197,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":165,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":359,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":404,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":277,"org.easymock.tests2.UsageTest.resumeIfFailure":450,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":393,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":441,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":188,"org.easymock.tests2.StubTest.stubWithReturnValue":233,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":2,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":157,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":72,"org.easymock.tests2.SerializationTest.testAllMockedMethod":116,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":351,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":4,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":110,"org.easymock.samples.SupportTest.voteForRemovals":228,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":120,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":429,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":200,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":113,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":357,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":497,"org.easymock.tests.UsageExpectAndThrowTest.object":199,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":334,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":69,"org.easymock.tests2.DelegateToTest.testWrongClass":291,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":25,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":26,"org.easymock.tests.UsageStrictMockTest.range":77,"org.easymock.samples.ConstructorCalledMockTest.testTax":220,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":445,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":502,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":234,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":127,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":7,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":469,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":91,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":326,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":413,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":81,"org.easymock.tests2.CaptureTest.testCaptureNone":42,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":373,"org.easymock.tests.UsageUnorderedTest.message":15,"org.easymock.tests.UsageVerifyTest.twoReturns":95,"org.easymock.tests.UsageVarargTest.varargByteAccepted":180,"org.easymock.tests2.ThreadingTest.testThreadSafe":268,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":483,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":133,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":225,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":378,"org.easymock.tests2.CaptureTest.testCapture_2617107":36,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":112,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":122,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":13,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":355,"org.easymock.tests2.UsageConstraintsTest.any":59,"org.easymock.tests2.StubTest.stub":439,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":323,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":361,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":187,"org.easymock.tests.UsageExpectAndThrowTest.longType":195,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":356,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":421,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":322,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":232,"org.easymock.tests2.SerializationTest.testClass":114,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":229,"org.easymock.tests.LimitationsTest.mockNativeMethod":136,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":167,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":313,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":505,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":129,"org.easymock.tests2.NameTest.nameForMocksControl":459,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":507,"org.easymock.tests2.MockedExceptionTest.testMockedException":452,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":473,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":170,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":499,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":184,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":124,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":278,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":273,"org.easymock.tests.MockingTest.testNicePartialClassMocking":183,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":283,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":503,"org.easymock.tests2.CaptureTest.testCaptureLast":41,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":80,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":56,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":240,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":70,"org.easymock.tests.MockingTest.testTwoMocks":383,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":448,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":148,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":125,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":100,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":74,"org.easymock.samples.ExampleTest.removeNonExistingDocument":425,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":509,"org.easymock.tests.UsageStrictMockTest.differentMethods":78,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":320,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":428,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":419,"org.easymock.tests2.ConstraintsToStringTest.andToString":109,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":270,"org.easymock.tests2.MockBuilderTest.testCreateMockString":468,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":401,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":474,"org.easymock.tests.UsageExpectAndThrowTest.floatType":194,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":471,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":286,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":454,"org.easymock.tests.UsageVerifyTest.twoThrows":94,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":367,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":276,"org.easymock.samples.ExampleTest.voteAgainstRemoval":216,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":346,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":371,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":284,"org.easymock.tests.LimitationsTest.privateConstructor":329,"org.easymock.tests2.UsageConstraintsTest.testNotNull":73,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":451,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":147,"org.easymock.tests2.UsageTest.defaultResetToNice":449,"org.easymock.samples.ExampleTest.voteAgainstRemovals":213,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":163,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":347,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":504,"org.easymock.tests.UsageVarargTest.differentLength":370,"org.easymock.tests2.CallbackTest.callback":306,"org.easymock.tests2.UsageConstraintsTest.equals":117,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":84,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":260,"org.easymock.tests.UsageTest.openCallCountByLastCall":169,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":49,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":12,"org.easymock.tests.UsageCallCountTest.tooFewCalls":261,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":237,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":415,"org.easymock.tests.UsageThrowableTest.throwCheckedException":144,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":83,"org.easymock.tests.MockingTest.testStrictClassMocking":381,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":9,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":239,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":508,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":236,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":325,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":238,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":288,"org.easymock.tests.ObjectMethodsTest.testHashCode":376,"org.easymock.tests2.NameTest.nameForNiceMock":458,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":30,"org.easymock.tests2.DependencyTest.testInterfaceMocking":27,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":251,"org.easymock.samples.ExampleTest.addDocument":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":488,"org.easymock.tests2.DelegateToTest.testStubDelegate":290,"org.easymock.tests2.AnswerTest.stubAnswer":287,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":17,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":465,"org.easymock.tests.UsageVarargTest.varargLongAccepted":179,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":121,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":344,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":166,"org.easymock.tests.UsageExpectAndReturnTest.floatType":150,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":0,"org.easymock.tests2.ConstraintsToStringTest.orToString":102,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":221,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":434,"org.easymock.tests.UsageThrowableTest.noUpperLimit":141,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":67,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":368,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":50,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":440,"org.easymock.tests2.SerializationTest.test":115,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":39,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":418,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":149,"org.easymock.tests2.UsageConstraintsTest.testSame":54,"org.easymock.samples.SupportTest.addDocument":227,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":447,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":321,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":475,"org.easymock.tests.GenericTest.testPackageScope":134,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":391,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":339,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":433,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":385,"org.easymock.tests2.NameTest.nameForMock":456,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":160,"org.easymock.tests2.UsageStrictMockTest.differentMethods":97,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":258,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":492,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":152,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":128,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":374,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":411,"org.easymock.tests2.MockedExceptionTest.testRealException":453,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":399,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":446,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":349,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":85,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":3,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":29,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":348,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":11,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":327,"org.easymock.tests2.NameTest.nameForStrictMock":457,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":463,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":32,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":282,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":444,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":420,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":68,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":461,"org.easymock.tests2.UsageStrictMockTest.range":96,"org.easymock.tests2.UsageConstraintsTest.lessThan":75,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":430,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":253,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":294,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":343,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":479,"org.easymock.tests2.CaptureTest.testCaptureRightOne":44,"org.easymock.tests2.UsageConstraintsTest.testOr":55,"org.easymock.tests.UsageRangeTest.combination":207,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":279,"org.easymock.tests.UsageTest.wrongArguments":90,"org.easymock.tests2.MockBuilderTest.testWithConstructor":255,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":476,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":402,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":153,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":161,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":336,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":422,"org.easymock.tests.UsageVarargTest.varargShortAccepted":178,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":312,"org.easymock.tests2.UsageConstraintsTest.cmpTo":60,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":498,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":338,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":246,"org.easymock.tests2.CaptureTest.testCaptureFromStub":45,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":317,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":462,"org.easymock.tests.UsageTest.unexpectedCallWithArray":89,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":16,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":132,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":257,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":162,"org.easymock.tests2.CaptureTest.testCapture":76,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":139,"org.easymock.tests2.UsageConstraintsTest.constraints":51,"org.easymock.samples.ExampleTest.addAndChangeDocument":219,"org.easymock.tests2.ConstraintsToStringTest.notToString":104,"org.easymock.tests.UsageStrictMockTest.testVerify":331,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":224,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":138,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":363,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":40,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":20,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":154,"org.easymock.tests.LimitationsTest.abstractClass":328,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":123,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":21,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":174,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":299}}]

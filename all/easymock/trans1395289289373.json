[{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:304","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[233,234,235,236,237],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockStatement:42","sourceCode":"org.easymock.EasyMockSupport.org.easymock.EasyMockSupport.injectMocks(java.lang.Object)","type":"CtInvocationImpl"},"failures":[238,239,240,241],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"test"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[242,243,244],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"failures":[245],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"type","type":"type"}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[1,2,6,11,246,247,248,249,250,251,26,28,29,30,77,252,79,82,83,84,253,89,90,132,254,135,136,137,144,158,255,256,257,258,259,260,261,262,180,183,184,185,188,189,190,191,218,263,264],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","delegateTo":"delegateTo"}},{"position":"org.easymock.EasyMock:1531","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"hashCodeMethod","equalsMethod":"hashCodeMethod"}},{"position":"org.easymock.internal.LastControl:124","failures":[0,1,2,3,4,5,6,7,8,265,266,267,268,269,9,10,11,12,13,14,15,16,248,17,18,19,20,21,22,23,24,251,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,252,79,80,81,82,83,84,85,86,87,88,253,89,90,91,92,270,271,272,273,274,274,94,95,96,97,98,99,100,101,102,103,104,105,275,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,238,127,128,129,130,131,132,239,254,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,276,255,277,278,279,256,257,280,281,258,282,283,284,285,169,170,286,287,171,172,288,289,290,291,292,259,173,293,294,295,260,261,262,174,175,176,177,178,179,180,181,182,183,184,185,186,187,296,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,297,298,299,300,217,218,219,220,221,222,301,223,302,263,224,264,225,303,304,305,306,307,240,308,309,310,226,227,228,229,230,231,232,241],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:296","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[311,312,313,314,315,316,317],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1373","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1495","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[54],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[155],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"failures":[318],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:52","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"toStringMethod","method":"toStringMethod"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:320","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[319,320],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:760","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:120","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"cls":"searchType","type":"searchType"}},{"position":"org.easymock.internal.RecordState:305","failures":[0,1,2,3,4,5,6,321,7,8,322,9,10,22,23,24,27,29,30,32,33,34,35,36,43,45,46,47,48,49,50,51,52,55,323,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,84,91,94,95,96,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,238,127,128,129,130,131,132,239,134,136,137,139,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,276,255,277,278,279,256,257,280,281,258,282,283,285,169,170,286,287,171,172,259,173,294,295,261,176,180,181,182,184,186,187,296,190,191,192,194,195,196,197,198,199,200,203,204,205,206,208,209,211,212,213,214,215,216,297,298,299,300,217,218,219,220,221,222,223,263,224,264,225,303,305,310,226,227,228,229,231],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[324,159],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1940","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[0,1,2,11,27,29,30,78,325,326,327,328,134,136,137,182],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:34","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"failures":[329],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[1,24,43,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,101,330,331,332,105,180,187,211],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1815","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EndsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[143],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"suffix"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:140","sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2110","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:583","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:126","sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"actual","myArgument":"actual"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:76","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[333],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[334,139,140,141],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1038","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Integer>(int))","type":"CtInvocationImpl"},"failures":[156,163,168,335],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[336,337,338,339,340,341,139,342,343],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:107","failures":[344,345,346,3,4,5,347,348,349,350,351,352,353,354,355,42,356,91,92,357,333,358,359,360,361,96,362,363,364,365,366,367,368,369,370,371,131,341,139,141,285,169,170,286,171,172,292,372,259,373,374,173,293,294,295,343,260,261,375,262,174,175,176,376,377,378,297,379,380,298,381,382,383,384,385,386,387,388,389,299,390,391,392,393,394,300,395,396,217,218,220,221,222,301,223,397,398,302,263,224,264,399,400,401,402,306,307,308,308,309,309,310],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[161,162],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:786","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:36","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:196","sourceCode":"java.lang.reflect.Method.setAccessible(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[403,404,26,252,405,406],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"result","equalsMethod":"result"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"failures":[245,132,178,179,193],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:336","sourceCode":"org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[214],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"failures":[407,408],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[409],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":145,"org.easymock.tests2.UsageTest.argumentsOrdered":189,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":77,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":282,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":319,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":185,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":240,"org.easymock.tests2.DelegateToTest.testReturnException":127,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":98,"org.easymock.tests.MockingTest.testPartialClassMocking":3,"org.easymock.tests.MockClassControlTest.testToString":365,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":400,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":315,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":384,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":57,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":298,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":325,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":303,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":336,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":151,"org.easymock.tests2.UsageTest.wrongArguments":183,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":51,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":272,"org.easymock.samples.ExampleTest.answerVsDelegate":227,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":359,"org.easymock.tests2.UsageConstraintsTest.testNull":147,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":220,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":258,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":370,"org.easymock.tests2.CaptureTest.testPrimitive":199,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":55,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":76,"org.easymock.tests.UsageTest.moreThanOneArgument":78,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":219,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":39,"org.easymock.tests.UsageTest.argumentsOrdered":83,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":329,"org.easymock.tests.UsageVarargTest.varargIntAccepted":14,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":32,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":292,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":340,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":293,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":36,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":239,"org.easymock.tests2.AnswerTest.answer":192,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":291,"org.easymock.tests2.CaptureTest.testAnd":196,"org.easymock.tests2.UsageTest.strictResetToDefault":181,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":302,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":38,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":7,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":279,"org.easymock.tests2.DelegateToTest.testDelegate":130,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":72,"org.easymock.tests.LimitationsTest.mockFinalMethod":362,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":101,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":269,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":323,"org.easymock.tests2.CaptureTest.testCapture1_2446744":200,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":70,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":289,"org.easymock.tests.UsageThrowableTest.throwError":43,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":250,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":41,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":396,"org.easymock.samples.PartialClassMockTest.testGetArea":310,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":33,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":385,"org.easymock.tests2.UsageTest.niceToStrict":184,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":58,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":355,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":244,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":311,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":173,"org.easymock.tests2.MockBuilderTest.testCreateMock":260,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":392,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":405,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":66,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":256,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":332,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":270,"org.easymock.tests.UsageOverloadedMethodTest.overloading":23,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":394,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":389,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":156,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":105,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":118,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":22,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":155,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":205,"org.easymock.tests2.EasyMockSupportClassTest.testAll":297,"org.easymock.tests.MockClassControlTest.testEquals":369,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":92,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":74,"org.easymock.tests2.CaptureTest.testCaptureAll":197,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":267,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":290,"org.easymock.tests2.UsageConstraintsTest.testMatches":157,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":40,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":317,"org.easymock.samples.ExampleTest.voteForRemovals":231,"org.easymock.tests.UsageVarargTest.allKinds":21,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":0,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":268,"org.easymock.samples.BasicClassMockTest.testPrintContent":307,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":49,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":254,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":102,"org.easymock.tests2.UsageConstraintsTest.greaterThan":159,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":379,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":321,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":264,"org.easymock.samples.ExampleTest.voteForRemoval":228,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":354,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":399,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":213,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":301,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":180,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":42,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":233,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":277,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":45,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":377,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":97,"org.easymock.tests2.CaptureTest.testCaptureFirst":209,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":320,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":278,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":191,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":275,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":114,"org.easymock.tests2.UsageTest.moreThanOneArgument":182,"org.easymock.tests2.CaptureTest.testCapture2_2446744":208,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":215,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":261,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":20,"org.easymock.tests.GenericTest.testBridgedEquals":333,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":89,"org.easymock.tests.UsageExpectAndReturnTest.longType":110,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":265,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":276,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":75,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":375,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":164,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":316,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":73,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":37,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":235,"org.easymock.tests.UsageCallCountTest.tooManyCalls":90,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":85,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":393,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":115,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":62,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":48,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":169,"org.easymock.tests.MockingTest.testNiceClassMocking":347,"org.easymock.tests.MockingTest.testClassMocking":345,"org.easymock.tests2.UsageConstraintsTest.testContains":154,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":372,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":176,"org.easymock.tests2.UsageConstraintsTest.testFind":146,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":24,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":179,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":251,"org.easymock.tests.UsageExpectAndReturnTest.object":117,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":223,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":281,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":16,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":337,"org.easymock.tests.UsageTest.exactCallCountByLastCall":84,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":9,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":313,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":341,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":123,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":12,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":104,"org.easymock.tests.MockClassControlTest.testHashCode":368,"org.easymock.tests2.EasyMockSupportTest.testVerify":284,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":387,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":103,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":331,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":246,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":288,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":335,"org.easymock.tests.UsageVarargTest.varargCharAccepted":15,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":133,"org.easymock.tests2.UsageTest.openCallCountByLastCall":186,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":242,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":283,"org.easymock.tests.DefaultClassInstantiatorTest.object":348,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":330,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":388,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":64,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":46,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":408,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":263,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":367,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":63,"org.easymock.tests.CapturesMatcherTest.test":274,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":124,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":234,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":300,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":366,"org.easymock.tests2.UsageTest.resumeIfFailure":190,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":358,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":100,"org.easymock.tests2.StubTest.stubWithReturnValue":211,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":342,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":165,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":116,"org.easymock.tests2.SerializationTest.testAllMockedMethod":141,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":322,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":406,"org.easymock.samples.SupportTest.voteForRemovals":305,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":356,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":407,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":69,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":334,"org.easymock.tests.UsageExpectAndThrowTest.object":67,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":162,"org.easymock.tests2.DelegateToTest.testWrongClass":129,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":94,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":95,"org.easymock.tests.UsageStrictMockTest.range":29,"org.easymock.samples.ConstructorCalledMockTest.testTax":308,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":280,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":285,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":68,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":294,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":82,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":237,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":376,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":271,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":403,"org.easymock.tests2.CaptureTest.testCaptureNone":204,"org.easymock.tests.UsageUnorderedTest.message":11,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":249,"org.easymock.tests.UsageVerifyTest.twoReturns":2,"org.easymock.tests.UsageVarargTest.varargByteAccepted":19,"org.easymock.tests2.ThreadingTest.testThreadSafe":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":390,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":88,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":306,"org.easymock.tests2.CaptureTest.testCapture_2617107":198,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":54,"org.easymock.tests2.UsageConstraintsTest.any":152,"org.easymock.tests2.StubTest.stub":210,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":236,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":99,"org.easymock.tests.UsageExpectAndThrowTest.longType":60,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":352,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":135,"org.easymock.tests2.SerializationTest.testClass":139,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":238,"org.easymock.tests.LimitationsTest.mockNativeMethod":96,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":126,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":357,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":138,"org.easymock.tests2.MockedExceptionTest.testMockedException":175,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":380,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":81,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":5,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":61,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":217,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":295,"org.easymock.tests.MockingTest.testNicePartialClassMocking":4,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":222,"org.easymock.tests2.CaptureTest.testCaptureLast":203,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":56,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":172,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":150,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":163,"org.easymock.tests.MockingTest.testTwoMocks":346,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":107,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":65,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":188,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":167,"org.easymock.tests.UsageStrictMockTest.differentMethods":30,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":93,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":350,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":214,"org.easymock.tests2.MockBuilderTest.testCreateMockString":262,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":363,"org.easymock.tests.UsageExpectAndThrowTest.floatType":59,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":381,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":158,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":378,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":193,"org.easymock.tests.UsageVerifyTest.twoThrows":1,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":299,"org.easymock.samples.ExampleTest.voteAgainstRemoval":229,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":224,"org.easymock.tests.LimitationsTest.privateConstructor":361,"org.easymock.tests2.UsageConstraintsTest.testNotNull":166,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":174,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":50,"org.easymock.tests2.UsageTest.defaultResetToNice":296,"org.easymock.samples.ExampleTest.voteAgainstRemovals":226,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":122,"org.easymock.tests.UsageVarargTest.differentLength":248,"org.easymock.tests2.CallbackTest.callback":132,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":397,"org.easymock.tests.UsageTest.openCallCountByLastCall":80,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":142,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":53,"org.easymock.tests.UsageCallCountTest.tooFewCalls":86,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":286,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":273,"org.easymock.tests.UsageThrowableTest.throwCheckedException":47,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":404,"org.easymock.tests.MockingTest.testStrictClassMocking":344,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":171,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":10,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":170,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":287,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":195,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":339,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":216,"org.easymock.tests2.DependencyTest.testInterfaceMocking":225,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":338,"org.easymock.samples.ExampleTest.addDocument":230,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":391,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":395,"org.easymock.tests2.DelegateToTest.testStubDelegate":128,"org.easymock.tests2.AnswerTest.stubAnswer":194,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":27,"org.easymock.tests.UsageVarargTest.varargLongAccepted":18,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":31,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":125,"org.easymock.tests.UsageExpectAndReturnTest.floatType":109,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":131,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":309,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":160,"org.easymock.tests.UsageThrowableTest.noUpperLimit":44,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":143,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":401,"org.easymock.tests2.SerializationTest.test":140,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":201,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":349,"org.easymock.tests2.UsageConstraintsTest.testSame":148,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":108,"org.easymock.samples.SupportTest.addDocument":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":382,"org.easymock.tests.GenericTest.testPackageScope":91,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":312,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":119,"org.easymock.tests2.UsageStrictMockTest.differentMethods":137,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":398,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":111,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":71,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":8,"org.easymock.tests2.MockedExceptionTest.testRealException":177,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":314,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":134,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":245,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":52,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":374,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":178,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":243,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":221,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":402,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":161,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":326,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":351,"org.easymock.tests.ErrorMessageTest.testGetters":327,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":259,"org.easymock.tests2.UsageStrictMockTest.range":136,"org.easymock.tests2.UsageConstraintsTest.lessThan":168,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":255,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":386,"org.easymock.tests2.CaptureTest.testCaptureRightOne":206,"org.easymock.tests2.UsageConstraintsTest.testOr":149,"org.easymock.tests.UsageRangeTest.combination":6,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":218,"org.easymock.tests.UsageTest.wrongArguments":79,"org.easymock.tests2.MockBuilderTest.testWithConstructor":409,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":383,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":364,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":112,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":120,"org.easymock.tests.UsageVarargTest.varargShortAccepted":17,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":353,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":253,"org.easymock.tests2.UsageConstraintsTest.cmpTo":153,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":187,"org.easymock.tests2.CaptureTest.testCaptureFromStub":207,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":373,"org.easymock.tests.UsageTest.unexpectedCallWithArray":252,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":26,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":87,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":318,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":121,"org.easymock.tests2.UsageConstraintsTest.constraints":144,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":28,"org.easymock.samples.ExampleTest.addAndChangeDocument":232,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":241,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":25,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":266,"org.easymock.tests2.CompareToTest.testGreateThan":324,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":202,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":34,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":371,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":113,"org.easymock.tests.LimitationsTest.abstractClass":360,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":106,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":35,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":13,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":257,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":328}}]

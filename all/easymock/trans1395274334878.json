[{"transplant":{"position":"org.easymock.internal.RecordState:251","sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:309","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","sourceCode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )","type":"CtDoImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"leafClass"}},{"position":"org.easymock.internal.RecordState:262","failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:801","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.JavaProxyFactory:30","sourceCode":"return java.lang.reflect.Proxy.((T)(java.lang.reflect.Proxy.newProxyInstance(java.lang.Class<T>.getClassLoader(), new java.lang.Class[]{ java.lang.Class<T> }, java.lang.reflect.InvocationHandler)))","type":"CtReturnImpl"},"failures":[59,5,6,7,8,60,61,62,63,64,65,66,67,68,1,69,70,9,10,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,11,95,12,13,14,15,16,17,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,18,120,121,122,123,19,124,125,126,127,128,20,21,22,129,130,131,132,133,134,135,136,137,138,139,140,141,23,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,24,25,26,27,28,29,169,170,171,172,173,174,175,176,177,178,179,180,181,182,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,183,184,185,186,187,51,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,52,229,230,231,53,232,233,234,235,236,237,54,238,239,240,241,242,55,56,57,58,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[340,337,338,341],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:117","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[342,141,199,254,257,258,260,261,263,264,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:68","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int])","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:361","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[62,91,92,95,123,19,343,170,171,30,183,187,225,226,237,54,310,311,313,315,316,322,325,328,335],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:67","sourceCode":"return org.easymock.Mock.java.lang.String()","type":"CtReturnImpl"},"failures":[211,212,213,216,217,218,297,298,299,302,303,304],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[344,336],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:126","failures":[141,199,263,265,267],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:122","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[337,338,341],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:124","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:111","sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>[].int) ; int++) {\n    if (java.lang.Class<?>[][int].isPrimitive()) {\n        java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n    } else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n        java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n    } else {\n        final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n        org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n        java.lang.Object[][int] = java.lang.Object;\n    }\n}","type":"CtForImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[311,317],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[59,5,6,7,8,60,61,62,63,64,65,66,67,68,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,0,1,2,3,4,69,70,9,10,71,72,73,74,75,76,77,78,79,80,81,82,83,84,367,368,85,369,86,87,88,89,90,91,92,93,94,11,95,12,13,14,15,16,17,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,370,119,371,18,120,121,122,123,19,124,125,126,372,343,373,374,375,376,377,378,379,380,381,382,383,384,385,386,127,387,388,389,390,391,128,392,20,21,22,393,129,130,131,132,133,134,135,136,137,138,139,140,141,23,142,143,144,145,146,147,394,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,395,164,396,397,165,398,399,166,400,167,168,401,24,25,26,27,28,29,169,170,171,172,173,402,403,404,174,175,405,176,177,178,179,180,406,407,408,409,410,411,412,413,181,182,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,183,184,185,186,187,51,188,189,190,191,192,414,415,416,417,418,419,420,193,194,195,196,197,198,199,200,201,202,203,204,205,421,422,423,206,207,424,425,208,209,210,211,212,426,213,214,215,216,217,427,428,218,429,430,219,220,221,222,223,224,225,226,227,228,52,431,432,433,434,229,230,435,436,437,438,439,231,440,441,442,53,232,233,234,235,236,237,54,238,239,240,241,242,55,56,57,58,243,443,244,245,246,247,248,444,445,249,250,251,252,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,253,486,487,488,489,490,491,492,493,494,495,496,497,498,499,254,255,256,257,258,259,260,500,261,501,502,503,504,505,506,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,507,299,300,301,302,303,508,509,304,305,306,307,308,309,310,311,312,510,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,341,339],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"in":"in"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[340,337,338,341],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[511,512,513],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"return java.lang.reflect.Field.getType().isAssignableFrom(org.easymock.internal.Injection.getMock().getClass())","type":"CtReturnImpl"},"failures":[206,207,210,211,212,213,215,216,217,218,296,297,298,299,301,302,303,304],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","shouldBeUsedInOneThread":"threadSafe"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[514,515,516,517,518,444,519],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MocksControl:190","failures":[72,86,91,92,11,95,13,14,15,16,17,125,182,183,51,221,225,226,235,236,240,457,485,496,278,283,285,287,288,291,292,293,312,317,318,320,323,329,330,331,333,339],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"failures":[59,5,62,63,64,65,66,67,68,1,2,69,70,9,10,71,72,85,86,87,88,89,90,91,92,93,11,95,12,13,14,15,16,17,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,18,120,121,122,123,19,124,125,126,393,129,130,131,132,133,134,135,136,137,138,139,141,23,144,145,146,147,148,149,150,151,152,153,154,155,398,399,400,24,25,26,27,28,29,178,179,181,182,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,183,185,186,187,51,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,205,421,422,423,206,207,424,425,208,209,214,219,220,221,222,223,224,225,226,227,228,52,435,436,437,438,231,440,441,53,232,233,234,235,236,237,54,238,239,240,241,242,55,56,57,58,243,244,246,247,248,446,447,450,451,452,453,456,457,458,462,465,475,481,484,485,253,486,487,488,489,491,494,495,496,497,254,257,258,259,260,261,263,264,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,300,305,306,307,308,309,310,311,312,313,314,315,316,317,318,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,341,339],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"lock":"lock"}},{"transplant":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:55","sourceCode":"java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection)","type":"CtInvocationImpl"},"failures":[206,207,210,211,212,426,213,214,215,216,217,427,428,218,296,297,298,507,299,300,301,302,303,508,509,304],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"toStringMethod","equalsMethod":"toStringMethod"}},{"transplant":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[59,5,62,63,64,65,66,67,68,1,2,69,70,9,10,71,72,85,86,87,88,89,90,91,92,93,11,95,12,13,14,15,16,17,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,18,120,121,122,123,19,124,125,126,393,129,130,131,132,133,134,135,136,137,138,139,141,23,144,145,146,147,148,149,150,151,152,153,154,155,398,399,400,24,25,26,27,28,29,178,179,181,182,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,183,185,186,187,51,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,205,421,422,423,206,207,424,425,208,209,214,219,220,221,222,223,224,225,226,227,228,52,435,436,437,438,231,440,441,53,232,233,234,235,236,237,54,238,239,240,241,242,55,56,57,58,243,244,245,246,247,248,446,447,450,451,452,453,456,457,458,462,465,475,481,484,485,253,486,487,488,489,491,494,495,496,497,254,257,258,259,260,500,261,263,264,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,300,305,306,307,308,309,310,311,312,313,314,315,316,317,318,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,341,339],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[520],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int) == int","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:85","failures":[],"status":0,"binaryOperator":"(java.util.Stack<org.easymock.IArgumentMatcher> != null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:65","sourceCode":"throw java.lang.Throwable","type":"CtThrowImpl"},"failures":[139,141],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1471","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:76","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"m","equalsMethod":"m"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[1,2,4,367,368,85,369,393,396,397,165,401,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,424,425,431,434,435,438,56,57,459,462,464,466,467,470,473,476,477,480,484,485,486,487,488,491,493,494,497,498,499,341],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[340,337,338,341],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"primitiveType"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[59,5,6,7,8,60,61,62,63,64,65,67,68,1,2,3,69,70,9,10,71,72,73,85,86,87,88,89,90,91,92,93,94,11,95,12,13,14,15,16,17,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,18,120,122,123,19,124,125,126,127,128,20,21,22,393,129,130,131,132,133,139,140,141,23,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,164,165,398,399,400,24,25,26,27,28,29,169,170,171,172,173,178,179,181,182,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,183,184,185,186,187,51,188,193,194,195,196,197,198,199,200,201,202,203,205,421,421,422,422,423,206,207,424,425,208,209,214,219,220,221,222,223,224,225,226,227,228,52,435,436,437,438,231,440,441,53,232,233,234,235,236,237,54,238,239,240,241,242,55,56,57,58,243,244,245,246,247,248,249,250,251,252,446,447,450,452,453,457,462,465,475,481,484,485,253,486,487,488,491,494,495,496,497,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,300,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,341,339],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MockBuilder:159","failures":[421,422,521,522,523,492],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1951","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Long>(org.easymock.Capture<java.lang.Long>))","type":"CtInvocationImpl"},"failures":[271],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:340","sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[244,245],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.InjectionPlan:51","failures":[206,207,210,211,212,426,213,214,215,216,217,427,428,218,296,297,298,507,299,300,301,302,303,508,509,304],"status":-1,"binaryOperator":"(java.lang.String.length()) != 0","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:95","sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","type":"CtForImpl"},"failures":[268,270,278,311,312,314,316,317,319,329,334],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[443,490,506],"status":-1,"binaryOperator":"java.lang.String == null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:75","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[4],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:92","failures":[268,270,278,311,312,316,317,319,329],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":312,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":18,"org.easymock.tests2.UsageTest.argumentsOrdered":240,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":292,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":215,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":381,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":236,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":206,"org.easymock.tests2.DelegateToTest.testReturnException":263,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":25,"org.easymock.tests.MockingTest.testPartialClassMocking":398,"org.easymock.tests.MockClassControlTest.testToString":408,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":445,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":119,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":499,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":389,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":469,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":465,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":31,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":220,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":366,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":514,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":318,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":69,"org.easymock.tests2.UsageTest.wrongArguments":234,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":304,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":191,"org.easymock.samples.ExampleTest.answerVsDelegate":199,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":405,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":168,"org.easymock.tests2.UsageConstraintsTest.testNull":314,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":486,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":413,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":291,"org.easymock.tests2.CaptureTest.testPrimitive":271,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":71,"org.easymock.tests.UsageTest.moreThanOneArgument":120,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":50,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":253,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":195,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":169,"org.easymock.tests.UsageTest.argumentsOrdered":125,"org.easymock.tests.UsageVarargTest.varargIntAccepted":147,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":386,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":129,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":518,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":446,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":433,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":428,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":451,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":373,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":133,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":350,"org.easymock.tests.ReplayStateInvalidUsageTest.times":81,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":300,"org.easymock.tests2.DependencyTest.testClassMocking":429,"org.easymock.tests2.AnswerTest.answer":254,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":319,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":387,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":308,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":404,"org.easymock.tests2.CaptureTest.testAnd":268,"org.easymock.tests2.UsageTest.strictResetToDefault":232,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":494,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":194,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":185,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":286,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":173,"org.easymock.tests2.DelegateToTest.testDelegate":267,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":349,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":46,"org.easymock.tests.LimitationsTest.mockFinalMethod":369,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":28,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":138,"org.easymock.tests2.DependencyTest.testClassMockingSupport":430,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":116,"org.easymock.tests2.CaptureTest.testCapture1_2446744":272,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":490,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":44,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":306,"org.easymock.tests.UsageThrowableTest.throwError":11,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":75,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":175,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":218,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":483,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":353,"org.easymock.samples.PartialClassMockTest.testGetArea":423,"org.easymock.tests.MockingTest.testInterfaceMocking":166,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":76,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":130,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":157,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":470,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":395,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":32,"org.easymock.tests2.UsageTest.niceToStrict":235,"org.easymock.tests2.ThreadingTest.testChangeDefault":443,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":513,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":372,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":450,"org.easymock.tests2.MockBuilderTest.testCreateMock":456,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":478,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":303,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":40,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":287,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":403,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":8,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":60,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":189,"org.easymock.tests.UsageOverloadedMethodTest.overloading":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":480,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":474,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":23,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":324,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":181,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":107,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":323,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":277,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":394,"org.easymock.tests2.EasyMockSupportClassTest.testAll":462,"org.easymock.tests.MockClassControlTest.testEquals":412,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":2,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":48,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":136,"org.easymock.tests2.CaptureTest.testCaptureAll":269,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":307,"org.easymock.tests.MockNameTest.defaultName":180,"org.easymock.tests2.UsageConstraintsTest.testMatches":325,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":73,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":196,"org.easymock.samples.ExampleTest.voteForRemovals":203,"org.easymock.tests.UsageVarargTest.allKinds":155,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":187,"org.easymock.samples.BasicClassMockTest.testPrintContent":425,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":137,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":16,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":221,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":29,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":216,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":266,"org.easymock.tests2.UsageConstraintsTest.greaterThan":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":463,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":184,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":497,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":354,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":420,"org.easymock.samples.ExampleTest.voteForRemoval":200,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":498,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":244,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":176,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":489,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":346,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":393,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":53,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":455,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":378,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":284,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":12,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":460,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":24,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":262,"org.easymock.tests2.CaptureTest.testCaptureFirst":281,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":377,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":285,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":242,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":144,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":103,"org.easymock.tests2.UsageTest.moreThanOneArgument":233,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":246,"org.easymock.tests2.CaptureTest.testCapture2_2446744":280,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":457,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":388,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":154,"org.easymock.tests.GenericTest.testBridgedEquals":4,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":67,"org.easymock.tests.UsageExpectAndReturnTest.longType":99,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":134,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":282,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":49,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":164,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":332,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":47,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":21,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":193,"org.easymock.tests.UsageCallCountTest.tooManyCalls":68,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":479,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":104,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":509,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":36,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":15,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":436,"org.easymock.tests.MockingTest.testNiceClassMocking":401,"org.easymock.tests.MockingTest.testClassMocking":397,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":61,"org.easymock.tests2.UsageConstraintsTest.testContains":322,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":57,"org.easymock.tests2.UsageConstraintsTest.testFind":313,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":30,"org.easymock.tests.MockTypeTest.fromEasyMockClass":174,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":86,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":261,"org.easymock.tests.UsageExpectAndReturnTest.object":106,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":491,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":508,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":290,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":515,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":149,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":162,"org.easymock.tests.UsageTest.exactCallCountByLastCall":126,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":59,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":376,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":170,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":370,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":444,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":145,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":112,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":141,"org.easymock.tests.MockClassControlTest.testHashCode":411,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":211,"org.easymock.tests2.EasyMockSupportTest.testVerify":294,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":472,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":171,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":139,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":7,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":305,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":295,"org.easymock.tests.UsageVarargTest.varargCharAccepted":148,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":222,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":392,"org.easymock.tests2.UsageTest.openCallCountByLastCall":237,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":511,"org.easymock.tests.DefaultClassInstantiatorTest.object":414,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":293,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":6,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":160,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":473,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":38,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":13,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":507,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":210,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":495,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":410,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":352,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":37,"org.easymock.tests.CapturesMatcherTest.test":342,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":113,"org.easymock.tests.ReplayStateInvalidCallsTest.times":358,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":20,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":481,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":409,"org.easymock.tests2.UsageTest.resumeIfFailure":241,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":402,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":432,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":27,"org.easymock.tests2.StubTest.stubWithReturnValue":52,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":519,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":105,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":333,"org.easymock.tests2.SerializationTest.testAllMockedMethod":341,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":127,"org.easymock.samples.SupportTest.voteForRemovals":209,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":426,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":43,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":340,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":128,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":255,"org.easymock.tests.UsageExpectAndThrowTest.object":41,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":371,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":330,"org.easymock.tests2.DelegateToTest.testWrongClass":265,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":178,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":356,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":179,"org.easymock.samples.ConstructorCalledMockTest.testTax":421,"org.easymock.tests.UsageStrictMockTest.range":91,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":229,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":289,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":435,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":42,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":452,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":459,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":124,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":83,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":190,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":348,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":158,"org.easymock.tests2.CaptureTest.testCaptureNone":276,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":502,"org.easymock.tests.UsageUnorderedTest.message":72,"org.easymock.tests.UsageVerifyTest.twoReturns":188,"org.easymock.tests.UsageVarargTest.varargByteAccepted":153,"org.easymock.tests2.ThreadingTest.testThreadSafe":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":476,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":65,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":424,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":163,"org.easymock.tests2.CaptureTest.testCapture_2617107":270,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":390,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":10,"org.easymock.tests2.UsageConstraintsTest.any":320,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":80,"org.easymock.tests2.StubTest.stub":228,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":22,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":391,"org.easymock.tests.UsageExpectAndThrowTest.longType":34,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":26,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":418,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":79,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":224,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":214,"org.easymock.tests2.SerializationTest.testClass":337,"org.easymock.tests.LimitationsTest.mockNativeMethod":85,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":115,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":3,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":298,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":364,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":227,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":503,"org.easymock.tests2.NameTest.nameForMocksControl":252,"org.easymock.tests2.MockedExceptionTest.testMockedException":56,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":299,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":464,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":19,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":500,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":400,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":35,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":484,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":453,"org.easymock.tests.MockingTest.testNicePartialClassMocking":399,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":488,"org.easymock.tests2.CaptureTest.testCaptureLast":275,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":296,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":117,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":441,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":317,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":363,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":331,"org.easymock.tests.MockingTest.testTwoMocks":165,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":360,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":442,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":96,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":39,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":239,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":335,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":506,"org.easymock.samples.ExampleTest.removeNonExistingDocument":204,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":77,"org.easymock.tests.UsageStrictMockTest.differentMethods":92,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":302,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":212,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":505,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":416,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":245,"org.easymock.tests2.MockBuilderTest.testCreateMockString":458,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":406,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":466,"org.easymock.tests.UsageExpectAndThrowTest.floatType":33,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":326,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":461,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":257,"org.easymock.tests.UsageVerifyTest.twoThrows":51,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":140,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":475,"org.easymock.samples.ExampleTest.voteAgainstRemoval":201,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":156,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":382,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":496,"org.easymock.tests.LimitationsTest.privateConstructor":368,"org.easymock.tests2.UsageConstraintsTest.testNotNull":334,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":17,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":55,"org.easymock.tests2.UsageTest.defaultResetToNice":238,"org.easymock.samples.ExampleTest.voteAgainstRemovals":198,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":111,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":383,"org.easymock.tests.UsageVarargTest.differentLength":150,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":297,"org.easymock.tests2.CallbackTest.callback":339,"org.easymock.tests2.UsageConstraintsTest.equals":510,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":492,"org.easymock.tests.UsageTest.openCallCountByLastCall":123,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":309,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":9,"org.easymock.tests.UsageCallCountTest.tooFewCalls":63,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":438,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":192,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":504,"org.easymock.tests.UsageThrowableTest.throwCheckedException":14,"org.easymock.tests.MockingTest.testStrictClassMocking":396,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":440,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":5,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":437,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":301,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":82,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":231,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":259,"org.easymock.tests.ObjectMethodsTest.testHashCode":161,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":517,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":247,"org.easymock.tests2.NameTest.nameForNiceMock":251,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":362,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":357,"org.easymock.tests2.DependencyTest.testInterfaceMocking":219,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":516,"org.easymock.samples.ExampleTest.addDocument":202,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":477,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":482,"org.easymock.tests2.DelegateToTest.testStubDelegate":264,"org.easymock.tests2.AnswerTest.stubAnswer":258,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":89,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":454,"org.easymock.tests.UsageVarargTest.varargLongAccepted":152,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":93,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":380,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":114,"org.easymock.tests.UsageExpectAndReturnTest.floatType":98,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":248,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":422,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":427,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":142,"org.easymock.tests.UsageThrowableTest.noUpperLimit":95,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":328,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":310,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":431,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":273,"org.easymock.tests2.SerializationTest.test":338,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":520,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":415,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":97,"org.easymock.tests2.UsageConstraintsTest.testSame":315,"org.easymock.samples.SupportTest.addDocument":208,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":439,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":347,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":467,"org.easymock.tests.GenericTest.testPackageScope":1,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":172,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":375,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":217,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":167,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":345,"org.easymock.tests2.NameTest.nameForMock":249,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":108,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":523,"org.easymock.tests2.UsageStrictMockTest.differentMethods":226,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":493,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":100,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":45,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":159,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":186,"org.easymock.tests2.MockedExceptionTest.testRealException":58,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":177,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":385,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":230,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":384,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":223,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":70,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":84,"org.easymock.tests2.NameTest.nameForStrictMock":250,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":449,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":512,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":260,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":487,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":434,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":417,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":329,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":447,"org.easymock.tests2.UsageStrictMockTest.range":225,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":351,"org.easymock.tests2.UsageConstraintsTest.lessThan":336,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":213,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":283,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":379,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":471,"org.easymock.tests2.CaptureTest.testCaptureRightOne":278,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":501,"org.easymock.tests2.UsageConstraintsTest.testOr":316,"org.easymock.tests.UsageRangeTest.combination":183,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":485,"org.easymock.tests.UsageTest.wrongArguments":122,"org.easymock.tests2.MockBuilderTest.testWithConstructor":521,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":468,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":407,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":101,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":109,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":343,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":419,"org.easymock.tests.UsageVarargTest.varargShortAccepted":151,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":66,"org.easymock.tests2.UsageConstraintsTest.cmpTo":321,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":365,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":256,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":355,"org.easymock.tests2.CompareToTest.testLessThan":344,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":374,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":54,"org.easymock.tests2.CaptureTest.testCaptureFromStub":279,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":74,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":448,"org.easymock.tests.UsageTest.unexpectedCallWithArray":121,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":361,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":88,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":64,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":522,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":110,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":90,"org.easymock.tests2.UsageConstraintsTest.constraints":311,"org.easymock.samples.ExampleTest.addAndChangeDocument":205,"org.easymock.tests.UsageStrictMockTest.testVerify":94,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":207,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":87,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":135,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":274,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":131,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":102,"org.easymock.tests.LimitationsTest.abstractClass":367,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":143,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":132,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":146,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":288}}]

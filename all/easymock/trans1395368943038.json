[{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"method","equalsMethod":"result"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.internal.matchers.Compare:53","failures":[0],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,0,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[214],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[46,47,48,49,120,121,122,123,124,125,215,216],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"failures":[217],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[97],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[2,20,44,45,88,89,91,218,219],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[64,220,77,81],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:230","sourceCode":"for (final org.easymock.internal.Injection org.easymock.internal.Injection : java.util.List<org.easymock.internal.Injection>) {\n    if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n        if (org.easymock.internal.Injection != null) {\n            throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n        } \n        org.easymock.internal.Injection = org.easymock.internal.Injection;\n    } \n}","type":"CtForEachImpl"},"failures":[221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[241,242,243,244,106,107,245,246,247,248,249,250,251,252,253],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:95","sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[62,66,220],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"count":"count","stack":"stack"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[17,18,19,254],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:334","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","type":"CtInvocationImpl"},"failures":[7,8,9,255,20,26,31,32,35,44,45,56,59,73,75,83,96,134,140,146,150,152,256,155,161,167,171,173,249,186,257,258,213],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[17,18,19,254],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:150","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:129","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:61","sourceCode":"throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int))","type":"CtThrowImpl"},"failures":[259],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1646","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(int[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[260,260,261,261,14,262,58,59,60,63,64,65,66,71,73,74,75,76,81,82,83,108,109,110,111,112,116,176,182,183,184,197,198,199,200,201,202,203],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:62","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[263,14,25,26,27,28,264,29,30,31,32,33,34,262,265,35,41,44,45,59,60,61,62,63,64,65,66,67,68,220,69,70,71,72,73,74,0,75,76,77,78,79,266,80,81,82,83,108,109,110,111,112,246,116,124,249,176,215,182,183,216,267,184,196,197,198],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[260,260,261,261,268,269,270,12,271,17,19,272,21,22,273,23,24,36,274,38,39,40,275,41,276,277,42,278,43,279,280,281,46,47,48,92,282,283,284,93,94,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,132,133,329,330,331,332,175,333,334,335,336,204,205,206,337,338,207,339,340,341,342,343,344,208],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","bridgeMethod":"toStringMethod"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:269","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","type":"CtThrowImpl"},"failures":[345,346,347,348],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Find:41","sourceCode":"java.lang.StringBuffer.append(((\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[349],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:142","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.AndroidClassProxyFactory()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:146","sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","type":"CtTryImpl"},"failures":[260,260,261,261,268,269,270,350,351,12,271,17,19,272,21,22,273,23,24,36,274,38,39,40,275,41,276,277,42,278,43,279,280,281,46,47,48,92,282,283,284,93,94,285,286,287,288,289,290,291,352,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,326,327,328,132,133,329,330,331,332,175,333,334,335,336,204,205,206,337,338,207,339,340,341,342,343,344,208],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"failures":[134,135,142,149,198,202],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:49","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[72],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:251","sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:309","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[14,241,15,353,354,355,356,357,358,96,105,106,107,359,360,245,361,362,116,247,117,363,364,154,248,249,213],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:38","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[72],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[365,1,2,3,4,6,268,8,9,255,263,10,366,11,367,12,14,241,15,17,18,20,272,21,22,273,368,23,24,25,26,27,28,264,31,32,33,34,265,35,36,274,37,38,39,40,41,278,43,279,48,369,54,55,370,56,371,372,373,374,375,376,377,378,379,380,381,382,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,0,75,76,77,78,79,266,80,81,82,83,88,90,91,282,93,285,286,289,383,95,96,97,384,385,99,100,386,296,299,309,315,105,106,107,108,109,110,111,112,387,114,388,389,390,391,392,116,247,117,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,218,393,394,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,215,182,183,184,395,185,186,197,198,204,205,206,209,210,211,212,396,213,397,398,399],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[400,401],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:113","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:155","sourceCode":"return this","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[361,362,363,364],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[402,68,73,83],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:364","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[403,404],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":62,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":396,"org.easymock.tests2.UsageTest.argumentsOrdered":244,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":381,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":236,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":98,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":221,"org.easymock.tests2.DelegateToTest.testReturnException":54,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":121,"org.easymock.tests.MockingTest.testPartialClassMocking":204,"org.easymock.tests.MockClassControlTest.testToString":339,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":303,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":155,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":299,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":367,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":68,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":182,"org.easymock.tests2.UsageTest.wrongArguments":242,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":103,"org.easymock.samples.ExampleTest.answerVsDelegate":2,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":327,"org.easymock.tests2.UsageConstraintsTest.testNull":64,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":38,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":344,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":380,"org.easymock.tests2.CaptureTest.testPrimitive":28,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":184,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":174,"org.easymock.tests.UsageTest.moreThanOneArgument":213,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":37,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":201,"org.easymock.tests.UsageTest.argumentsOrdered":253,"org.easymock.tests.UsageVarargTest.varargIntAccepted":189,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":358,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":108,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":92,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":240,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":94,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":112,"org.easymock.tests.ReplayStateInvalidUsageTest.times":256,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":366,"org.easymock.tests2.DependencyTest.testClassMocking":350,"org.easymock.tests2.AnswerTest.answer":88,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":220,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":53,"org.easymock.tests2.CaptureTest.testAnd":25,"org.easymock.tests2.UsageTest.strictResetToDefault":95,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":42,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":200,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":211,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":375,"org.easymock.tests2.DelegateToTest.testDelegate":56,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":170,"org.easymock.tests.LimitationsTest.mockFinalMethod":333,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":124,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":181,"org.easymock.tests2.DependencyTest.testClassMockingSupport":351,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":361,"org.easymock.tests2.CaptureTest.testCapture1_2446744":264,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":168,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":51,"org.easymock.tests.UsageThrowableTest.throwError":387,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":317,"org.easymock.samples.PartialClassMockTest.testGetArea":268,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":109,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":156,"org.easymock.tests2.UsageTest.niceToStrict":97,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":304,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":325,"org.easymock.tests2.ThreadingTest.testChangeDefault":400,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":93,"org.easymock.tests2.MockBuilderTest.testCreateMock":288,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":312,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":229,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":164,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":354,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":376,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":348,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":126,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":101,"org.easymock.tests.UsageOverloadedMethodTest.overloading":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":308,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":314,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":394,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":73,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":395,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":145,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":72,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":33,"org.easymock.tests2.EasyMockSupportClassTest.testAll":296,"org.easymock.tests.MockClassControlTest.testEquals":343,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":133,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":172,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":179,"org.easymock.tests2.CaptureTest.testCaptureAll":26,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":52,"org.easymock.tests2.UsageConstraintsTest.testMatches":74,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":202,"org.easymock.samples.ExampleTest.voteForRemovals":6,"org.easymock.tests.UsageVarargTest.allKinds":196,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":105,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":180,"org.easymock.samples.BasicClassMockTest.testPrintContent":270,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":391,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":125,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":237,"org.easymock.tests2.UsageConstraintsTest.greaterThan":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":297,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":210,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":279,"org.easymock.samples.ExampleTest.voteForRemoval":3,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":324,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":9,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":280,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":275,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":208,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":383,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":287,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":373,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":114,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":294,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":120,"org.easymock.tests2.CaptureTest.testCaptureFirst":35,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":374,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":386,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":248,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":141,"org.easymock.tests2.UsageTest.moreThanOneArgument":96,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":263,"org.easymock.tests2.CaptureTest.testCapture2_2446744":265,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":289,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":195,"org.easymock.tests.GenericTest.testBridgedEquals":330,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":259,"org.easymock.tests.UsageExpectAndReturnTest.longType":137,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":177,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":371,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":173,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":266,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":171,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":199,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":345,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":128,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":313,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":142,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":231,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":160,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":390,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":21,"org.easymock.tests.MockingTest.testNiceClassMocking":337,"org.easymock.tests.MockingTest.testClassMocking":335,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":127,"org.easymock.tests2.UsageConstraintsTest.testContains":71,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":48,"org.easymock.tests2.UsageConstraintsTest.testFind":63,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":186,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":45,"org.easymock.tests.UsageExpectAndReturnTest.object":144,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":41,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":230,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":379,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":191,"org.easymock.tests.UsageTest.exactCallCountByLastCall":399,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":176,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":403,"org.easymock.tests2.ConstraintsToStringTest.findToString":349,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":271,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":187,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":150,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":393,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":233,"org.easymock.tests.MockClassControlTest.testHashCode":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":306,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":218,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":347,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":50,"org.easymock.tests.UsageVarargTest.varargCharAccepted":190,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":13,"org.easymock.tests2.UsageTest.openCallCountByLastCall":384,"org.easymock.tests.DefaultClassInstantiatorTest.object":318,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":382,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":245,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":307,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":388,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":232,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":278,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":341,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":161,"org.easymock.tests.CapturesMatcherTest.test":217,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":151,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":315,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":340,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":356,"org.easymock.tests2.UsageTest.resumeIfFailure":100,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":326,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":352,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":123,"org.easymock.tests2.StubTest.stubWithReturnValue":58,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":143,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":80,"org.easymock.tests2.SerializationTest.testAllMockedMethod":19,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":258,"org.easymock.samples.SupportTest.voteForRemovals":365,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":328,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":167,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":254,"org.easymock.tests.UsageExpectAndThrowTest.object":165,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":78,"org.easymock.tests2.DelegateToTest.testWrongClass":370,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":197,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":198,"org.easymock.tests.UsageStrictMockTest.range":247,"org.easymock.samples.ConstructorCalledMockTest.testTax":260,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":378,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":272,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":166,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":285,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":252,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":293,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":102,"org.easymock.tests2.CaptureTest.testCaptureNone":32,"org.easymock.tests.UsageUnorderedTest.message":249,"org.easymock.tests.UsageVerifyTest.twoReturns":107,"org.easymock.tests.UsageVarargTest.varargByteAccepted":194,"org.easymock.tests2.ThreadingTest.testThreadSafe":8,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":310,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":131,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":269,"org.easymock.tests2.CaptureTest.testCapture_2617107":27,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":267,"org.easymock.tests2.UsageConstraintsTest.any":69,"org.easymock.tests2.StubTest.stub":57,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":346,"org.easymock.tests.UsageExpectAndThrowTest.longType":158,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":122,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":322,"org.easymock.tests2.SerializationTest.testClass":17,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":369,"org.easymock.tests.LimitationsTest.mockNativeMethod":175,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":153,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":329,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":225,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":16,"org.easymock.tests2.NameTest.nameForMocksControl":87,"org.easymock.tests2.MockedExceptionTest.testMockedException":47,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":298,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":398,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":159,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":206,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":36,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":286,"org.easymock.tests.MockingTest.testNicePartialClassMocking":205,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":40,"org.easymock.tests2.CaptureTest.testCaptureLast":31,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":223,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":362,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":24,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":67,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":79,"org.easymock.tests.MockingTest.testTwoMocks":336,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":134,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":163,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":243,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":82,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":401,"org.easymock.tests.UsageStrictMockTest.differentMethods":117,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":228,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":234,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":320,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":255,"org.easymock.tests2.ConstraintsToStringTest.andToString":357,"org.easymock.tests2.MockBuilderTest.testCreateMockString":290,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":338,"org.easymock.tests.UsageExpectAndThrowTest.floatType":157,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":300,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":0,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":295,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":89,"org.easymock.tests.UsageVerifyTest.twoThrows":106,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":363,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":309,"org.easymock.samples.ExampleTest.voteAgainstRemoval":4,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":43,"org.easymock.tests.LimitationsTest.privateConstructor":332,"org.easymock.tests2.UsageConstraintsTest.testNotNull":81,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":392,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":46,"org.easymock.tests2.UsageTest.defaultResetToNice":99,"org.easymock.samples.ExampleTest.voteAgainstRemovals":1,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":257,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":224,"org.easymock.tests2.CallbackTest.callback":20,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":276,"org.easymock.tests.UsageTest.openCallCountByLastCall":397,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":59,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":216,"org.easymock.tests.UsageCallCountTest.tooFewCalls":129,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":273,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":104,"org.easymock.tests.UsageThrowableTest.throwCheckedException":389,"org.easymock.tests.MockingTest.testStrictClassMocking":334,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":359,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":23,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":215,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":22,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":227,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":368,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":91,"org.easymock.tests2.CompareToTest.testGreateOrEqual":402,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":10,"org.easymock.tests2.NameTest.nameForNiceMock":86,"org.easymock.tests2.DependencyTest.testInterfaceMocking":11,"org.easymock.samples.ExampleTest.addDocument":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":311,"org.easymock.tests2.DelegateToTest.testStubDelegate":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":316,"org.easymock.tests2.AnswerTest.stubAnswer":90,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":116,"org.easymock.tests.UsageVarargTest.varargLongAccepted":193,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":118,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":152,"org.easymock.tests.UsageExpectAndReturnTest.floatType":136,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":12,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":261,"org.easymock.tests2.ConstraintsToStringTest.orToString":353,"org.easymock.tests.UsageThrowableTest.noUpperLimit":113,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":76,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":239,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":364,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":60,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":291,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":29,"org.easymock.tests2.SerializationTest.test":18,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":319,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":135,"org.easymock.tests2.UsageConstraintsTest.testSame":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":301,"org.easymock.tests.GenericTest.testPackageScope":132,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":214,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":238,"org.easymock.tests2.NameTest.nameForMock":84,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":146,"org.easymock.tests2.UsageStrictMockTest.differentMethods":15,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":277,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":138,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":169,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":212,"org.easymock.tests2.MockedExceptionTest.testRealException":49,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":360,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":14,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":219,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":183,"org.easymock.tests2.NameTest.nameForStrictMock":85,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":284,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":44,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":39,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":292,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":77,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":321,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":282,"org.easymock.tests2.UsageStrictMockTest.range":241,"org.easymock.tests2.UsageConstraintsTest.lessThan":83,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":235,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":372,"org.easymock.tests2.CaptureTest.testCaptureRightOne":34,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":305,"org.easymock.tests2.UsageConstraintsTest.testOr":66,"org.easymock.tests.UsageRangeTest.combination":209,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":274,"org.easymock.tests.UsageTest.wrongArguments":251,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":302,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":207,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":139,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":404,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":147,"org.easymock.tests.UsageVarargTest.varargShortAccepted":192,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":323,"org.easymock.tests2.UsageConstraintsTest.cmpTo":70,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":385,"org.easymock.tests2.CaptureTest.testCaptureFromStub":262,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":283,"org.easymock.tests.UsageTest.unexpectedCallWithArray":250,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":246,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":130,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":148,"org.easymock.tests2.UsageConstraintsTest.constraints":61,"org.easymock.samples.ExampleTest.addAndChangeDocument":7,"org.easymock.tests2.ConstraintsToStringTest.notToString":355,"org.easymock.tests.UsageStrictMockTest.testVerify":119,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":222,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":115,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":178,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":30,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":110,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":140,"org.easymock.tests.LimitationsTest.abstractClass":331,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":154,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":111,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":188,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":377}}]

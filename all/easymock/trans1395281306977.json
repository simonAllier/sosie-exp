[{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:971","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[1],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:720","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[2],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[3,4],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[5,6,7,8,9,10],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[11,12,13,14,15,16,17,18,19,20,21,22],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[23,24,25,26,26,27,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:122","sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:53","sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[85,86,87,88,89,90,91,92,93,94],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"otherArgument":"o","myArgument":"o"}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:75","sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","type":"CtReturnImpl"},"failures":[95,96,97,98,99,86,100,101,102,103,104,105,106,107,108,7,109,110,111,112,113,92,114],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[95,115,116,117,118,119,120,88,89,121,122,2,123,124,125,126,127,128,129,130,131,132,133,1,134,135,136,90,91,137,138,139,11,140,12,13,14,15,16,17,141,18,20,21,142,22,58,143,144,105,7,109,145,146,147,148,149,150,151,152,153,154,155,156,157,94],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1235","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:83","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[158,159,85,160,161,162,163,164,165,166,23,24,167,168,25,26,26,27,27,169,170,28,171,29,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,30,31,32,33,190,34,35,191,192,193,194,195,196,197,198,199,200,201,202,203,204,95,205,96,97,206,207,208,209,210,211,212,213,214,98,99,215,0,216,217,218,86,100,219,220,221,222,223,224,225,226,227,228,229,36,230,231,37,232,233,234,235,236,237,238,239,240,38,241,242,243,244,245,39,246,247,248,249,250,115,251,116,117,118,119,87,120,88,89,121,122,2,123,124,125,126,127,128,129,130,131,132,133,1,134,135,136,90,91,137,252,101,102,103,104,138,253,139,254,255,256,257,258,259,11,140,12,13,14,15,16,17,141,18,20,21,142,22,260,261,262,263,264,265,266,267,268,269,270,271,272,40,273,41,274,275,276,277,278,279,42,280,43,44,281,282,45,46,47,283,48,284,49,50,285,51,52,53,286,54,55,56,57,287,58,288,289,59,60,61,62,290,63,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,64,65,66,67,68,306,307,69,308,309,310,311,312,313,314,143,144,105,106,107,108,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,7,109,341,110,111,342,343,344,112,8,113,345,346,92,114,347,348,349,70,350,351,352,353,354,145,355,71,356,357,358,359,360,72,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,146,147,148,149,150,151,152,153,154,155,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,156,157,93,405,406,407,408,409,410,411,412,413,414,94,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,73,74,75,450,76,451,452,453,454,455,456,457,458,459,460,461,462,77,78,79,80,81,82,83,84,463,464,465,466,467,468,469,470,471,472,473,474,475,3,476,477,478,4,479,480,481,482,483],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:153","failures":[169,170,28,171,351,352,353,354,145,355,148,157],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[221,149],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[159,85,160,161,163,165,168,25,26,26,27,27,169,170,28,171,29,179,188,189,30,31,32,33,190,34,35,196,95,96,97,212,213,214,98,215,216,217,218,219,220,221,222,36,37,38,39,248,249,250,115,251,116,117,118,119,120,88,89,121,122,2,124,125,126,127,128,129,130,131,132,133,1,134,136,90,91,137,138,139,254,255,256,257,258,259,11,140,13,14,17,141,18,20,21,142,22,260,261,262,263,264,265,266,267,268,269,270,271,40,273,274,275,276,277,278,279,43,45,47,48,50,52,53,286,54,55,56,58,60,61,62,291,292,293,298,299,300,301,302,303,304,64,66,143,144,105,106,107,108,331,337,109,110,111,344,112,345,346,347,70,351,352,353,354,145,355,71,373,375,376,378,146,147,148,149,150,151,152,153,154,155,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,156,157,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,74,75,76,456,464,466,467,468,469,470,471,472,473,482],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[203,205,96,97,212,213,99,215,0,86,100,219,220,118,130,261,265,266,269,43,49,50,51,53,60,62,298,105,107,108,339,7,341,110,111,344,8,113,92,114,347,484,485,410,460,461,462,486,487],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[281],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:87","sourceCode":"if ((java.util.List<java.lang.reflect.Method>.size()) == 1) {\n    java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0);\n} else {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:305","sourceCode":"return ((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","type":"CtReturnImpl"},"failures":[158,159,85,160,161,162,163,165,166,23,24,167,168,25,28,29,179,188,189,30,31,32,33,190,34,35,196,203,204,95,205,96,97,206,212,213,214,98,99,215,0,216,217,218,86,100,219,220,221,222,36,37,38,39,248,249,250,115,251,116,117,118,119,120,88,89,121,122,2,123,124,125,126,127,128,129,130,131,132,133,1,134,135,136,90,91,137,101,102,103,104,138,139,255,256,257,259,11,140,12,13,14,15,16,17,141,18,20,142,22,260,261,262,263,264,265,266,267,268,269,270,271,272,40,273,41,274,277,278,279,43,45,47,48,50,52,53,286,54,55,56,58,60,61,62,291,292,293,298,299,300,301,64,65,143,144,105,106,107,108,339,340,7,109,341,110,111,342,343,344,112,113,345,346,92,114,347,70,145,71,373,375,376,378,146,147,148,149,150,151,152,153,154,155,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,401,402,156,157,93,405,406,408,409,410,411,412,413,414,94,416,417,418,419,420,421,422,423,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,74,75,76,454,456,457,458,459,461,462],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:83","failures":[96,99,86,100,105,107,108,7,110,8,113,92,114,484,485,379],"status":-1,"binaryOperator":"java.lang.Object[] == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:62","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:75","sourceCode":"return org.easymock.internal.IMocksControlState","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","method":"method","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[40,273,41,488],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:113","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:49","sourceCode":"final java.lang.String java.lang.String = org.easymock.internal.Injection.getAnnotation().java.lang.String()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[250,290],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[169,170,28,171,213,217,222,293,107,344,346,351,352,353,354,145,355,376,148,149,157,416,418,419,420,421,422,423,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[215],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1633","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(float[]))","type":"CtInvocationImpl"},"failures":[127],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (int)","type":"CtReturnImpl"},"failures":[96,97,106,110,111],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[127,7,94],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[489,490,491],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"failures":[158,159,85,160,161,162,163,165,166,23,24,167,168,25,28,29,179,188,189,30,31,32,33,190,34,35,196,204,95,205,96,97,206,212,213,214,98,99,215,0,216,217,86,100,220,222,36,37,38,39,248,249,250,115,251,116,117,118,119,120,88,89,121,122,2,124,125,126,127,128,129,130,131,132,133,1,134,135,136,90,91,137,138,139,255,256,257,259,11,140,12,13,14,15,16,17,141,18,20,142,22,260,261,262,263,264,265,266,268,269,270,271,272,40,273,41,274,277,278,279,45,47,48,52,53,286,54,55,56,58,61,291,292,293,298,64,65,143,144,105,106,107,108,340,7,109,341,110,111,342,344,112,113,345,346,92,114,347,70,145,71,373,375,376,146,147,148,149,150,151,152,153,154,155,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,156,93,405,406,408,409,411,412,413,414,94,416,417,418,419,420,421,422,423,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,74,75,76,456,457,458,459,461,462],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if (java.lang.Object == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"expected":"actual","actual":"actual"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[3,4],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[302,303,304],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:330","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":119,"org.easymock.tests2.UsageTest.argumentsOrdered":100,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":344,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":270,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":197,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":325,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":0,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":158,"org.easymock.tests2.DelegateToTest.testReturnException":255,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":352,"org.easymock.tests.MockingTest.testPartialClassMocking":74,"org.easymock.tests.MockClassControlTest.testToString":79,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":252,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":464,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":63,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":334,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":235,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":425,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":37,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":189,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":2,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":146,"org.easymock.tests2.UsageTest.wrongArguments":99,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":185,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":296,"org.easymock.samples.ExampleTest.answerVsDelegate":85,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":69,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":452,"org.easymock.tests2.UsageConstraintsTest.testNull":88,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":54,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":84,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":269,"org.easymock.tests2.CaptureTest.testPrimitive":13,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":150,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":444,"org.easymock.tests.UsageTest.moreThanOneArgument":112,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":286,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":468,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":400,"org.easymock.tests.UsageTest.argumentsOrdered":114,"org.easymock.tests.UsageVarargTest.varargIntAccepted":406,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":330,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":151,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":42,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":201,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":46,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":317,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":155,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":490,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":179,"org.easymock.tests.ReplayStateInvalidUsageTest.times":369,"org.easymock.tests2.DependencyTest.testClassMocking":186,"org.easymock.tests2.AnswerTest.answer":274,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":123,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":332,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":211,"org.easymock.tests2.CaptureTest.testAnd":11,"org.easymock.tests2.UsageTest.strictResetToDefault":214,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":59,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":281,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":467,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":264,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":300,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":404,"org.easymock.tests2.DelegateToTest.testDelegate":259,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":440,"org.easymock.tests.LimitationsTest.mockFinalMethod":350,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":145,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":314,"org.easymock.tests2.DependencyTest.testClassMockingSupport":187,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":481,"org.easymock.tests2.CaptureTest.testCapture1_2446744":14,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":287,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":438,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":209,"org.easymock.tests.UsageThrowableTest.throwError":416,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":363,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":307,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":487,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":202,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":470,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":247,"org.easymock.samples.PartialClassMockTest.testGetArea":25,"org.easymock.tests.MockingTest.testInterfaceMocking":450,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":364,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":152,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":446,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":426,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":72,"org.easymock.tests2.UsageTest.niceToStrict":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":236,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":315,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":45,"org.easymock.tests2.MockBuilderTest.testCreateMock":49,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":243,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":182,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":434,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":5,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":265,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":304,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":454,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":294,"org.easymock.tests.UsageOverloadedMethodTest.overloading":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":245,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":128,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":376,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":391,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":291,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":127,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":18,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":407,"org.easymock.tests2.EasyMockSupportClassTest.testAll":36,"org.easymock.tests.MockClassControlTest.testEquals":83,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":65,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":442,"org.easymock.tests2.CaptureTest.testCaptureAll":140,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":210,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":312,"org.easymock.tests.MockNameTest.defaultName":415,"org.easymock.tests2.UsageConstraintsTest.testMatches":129,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":469,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":361,"org.easymock.samples.ExampleTest.voteForRemovals":163,"org.easymock.tests.UsageVarargTest.allKinds":94,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":106,"org.easymock.samples.BasicClassMockTest.testPrintContent":24,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":313,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":422,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":203,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":198,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":258,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":355,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":479,"org.easymock.tests2.UsageConstraintsTest.greaterThan":131,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":230,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":299,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":62,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":480,"org.easymock.samples.ExampleTest.voteForRemoval":160,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":249,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":290,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":308,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":57,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":71,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":213,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":284,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":322,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":262,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":418,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":228,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":351,"org.easymock.tests2.CaptureTest.testCaptureFirst":22,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":254,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":321,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":263,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":220,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":379,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":387,"org.easymock.tests2.CaptureTest.testCapture2_2446744":142,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":115,"org.easymock.tests2.UsageTest.moreThanOneArgument":98,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":333,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":414,"org.easymock.tests.GenericTest.testBridgedEquals":67,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":461,"org.easymock.tests.UsageExpectAndReturnTest.longType":383,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":260,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":310,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":443,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":424,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":135,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":441,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":472,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":466,"org.easymock.tests.UsageCallCountTest.tooManyCalls":462,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":491,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":456,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":244,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":388,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":184,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":430,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":421,"org.easymock.tests.MockingTest.testNiceClassMocking":453,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":31,"org.easymock.tests.MockingTest.testClassMocking":449,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":455,"org.easymock.tests2.UsageConstraintsTest.testContains":126,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":28,"org.easymock.tests2.UsageConstraintsTest.testFind":120,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":293,"org.easymock.tests.MockTypeTest.fromEasyMockClass":306,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":139,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":339,"org.easymock.tests.UsageExpectAndReturnTest.object":390,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":58,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":183,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":268,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":409,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":359,"org.easymock.tests.UsageTest.exactCallCountByLastCall":347,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":156,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":320,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":463,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":401,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":172,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":396,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":93,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":375,"org.easymock.tests.MockClassControlTest.testHashCode":82,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":192,"org.easymock.tests2.EasyMockSupportTest.testVerify":272,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":238,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":489,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":402,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":303,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":373,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":484,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":208,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":207,"org.easymock.tests.UsageVarargTest.varargCharAccepted":408,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":474,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":338,"org.easymock.tests2.UsageTest.openCallCountByLastCall":216,"org.easymock.tests.DefaultClassInstantiatorTest.object":475,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":271,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":302,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":357,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":485,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":432,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":239,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":419,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":177,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":191,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":60,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":81,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":431,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":397,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":471,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":39,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":80,"org.easymock.tests2.UsageTest.resumeIfFailure":219,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":68,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":354,"org.easymock.tests2.StubTest.stubWithReturnValue":222,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":283,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":389,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":136,"org.easymock.tests2.SerializationTest.testAllMockedMethod":41,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":331,"org.easymock.samples.SupportTest.voteForRemovals":168,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":6,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":305,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":194,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":437,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":488,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":337,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":275,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":465,"org.easymock.tests.UsageExpectAndThrowTest.object":435,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":1,"org.easymock.tests2.DelegateToTest.testWrongClass":257,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":143,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":144,"org.easymock.tests.UsageStrictMockTest.range":110,"org.easymock.samples.ConstructorCalledMockTest.testTax":26,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":225,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":267,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":30,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":436,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":47,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":92,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":227,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":371,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":295,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":9,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":447,"org.easymock.tests2.CaptureTest.testCaptureNone":141,"org.easymock.tests.UsageUnorderedTest.message":105,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":486,"org.easymock.tests.UsageVerifyTest.twoReturns":108,"org.easymock.tests.UsageVarargTest.varargByteAccepted":413,"org.easymock.tests2.ThreadingTest.testThreadSafe":248,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":241,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":459,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":23,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":360,"org.easymock.tests2.CaptureTest.testCapture_2617107":12,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":483,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":335,"org.easymock.tests2.UsageConstraintsTest.any":124,"org.easymock.tests2.StubTest.stub":221,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":368,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":473,"org.easymock.tests.UsageExpectAndThrowTest.longType":428,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":336,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":353,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":478,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":367,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":205,"org.easymock.tests2.SerializationTest.testClass":40,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":196,"org.easymock.tests.LimitationsTest.mockNativeMethod":70,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":399,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":66,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":176,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":206,"org.easymock.tests2.NameTest.nameForMocksControl":104,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":178,"org.easymock.tests2.MockedExceptionTest.testMockedException":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":231,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":346,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":429,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":76,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":253,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":52,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":48,"org.easymock.tests.MockingTest.testNicePartialClassMocking":75,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":56,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":174,"org.easymock.tests2.CaptureTest.testCaptureLast":17,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":482,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":122,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":35,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":134,"org.easymock.tests.MockingTest.testTwoMocks":73,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":380,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":433,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":86,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":91,"org.easymock.samples.ExampleTest.removeNonExistingDocument":164,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":181,"org.easymock.tests.UsageStrictMockTest.differentMethods":111,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":365,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":193,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":476,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":250,"org.easymock.tests2.MockBuilderTest.testCreateMockString":51,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":77,"org.easymock.tests.UsageExpectAndThrowTest.floatType":427,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":232,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":130,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":229,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":277,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":173,"org.easymock.tests.UsageVerifyTest.twoThrows":107,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":374,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":38,"org.easymock.samples.ExampleTest.voteAgainstRemoval":161,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":445,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":326,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":61,"org.easymock.tests.LimitationsTest.privateConstructor":349,"org.easymock.tests2.UsageConstraintsTest.testNotNull":90,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":423,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":169,"org.easymock.tests2.UsageTest.defaultResetToNice":218,"org.easymock.samples.ExampleTest.voteAgainstRemovals":159,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":395,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":327,"org.easymock.tests.UsageVarargTest.differentLength":410,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":175,"org.easymock.tests2.CallbackTest.callback":212,"org.easymock.tests2.UsageConstraintsTest.equals":87,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":288,"org.easymock.tests.UsageTest.openCallCountByLastCall":345,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":116,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":148,"org.easymock.tests.UsageCallCountTest.tooFewCalls":457,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":33,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":297,"org.easymock.tests.UsageThrowableTest.throwCheckedException":420,"org.easymock.tests.MockingTest.testStrictClassMocking":448,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":10,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":157,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":34,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":180,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":32,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":370,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":190,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":279,"org.easymock.tests.ObjectMethodsTest.testHashCode":358,"org.easymock.tests2.NameTest.nameForNiceMock":103,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":251,"org.easymock.tests2.DependencyTest.testInterfaceMocking":188,"org.easymock.samples.ExampleTest.addDocument":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":242,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":246,"org.easymock.tests2.DelegateToTest.testStubDelegate":256,"org.easymock.tests2.AnswerTest.stubAnswer":278,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":109,"org.easymock.tests.UsageVarargTest.varargLongAccepted":412,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":342,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":324,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":398,"org.easymock.tests.UsageExpectAndReturnTest.floatType":382,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":29,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":27,"org.easymock.tests.UsageThrowableTest.noUpperLimit":417,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":132,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":200,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":377,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":117,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":223,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":15,"org.easymock.tests2.SerializationTest.test":273,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":3,"org.easymock.tests2.UsageConstraintsTest.testSame":89,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":381,"org.easymock.samples.SupportTest.addDocument":167,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":366,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":233,"org.easymock.tests.GenericTest.testPackageScope":64,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":403,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":319,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":199,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":451,"org.easymock.tests2.NameTest.nameForMock":101,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":392,"org.easymock.tests2.UsageStrictMockTest.differentMethods":97,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":285,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":289,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":384,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":439,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":356,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":301,"org.easymock.tests2.MockedExceptionTest.testRealException":171,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":309,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":226,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":329,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":328,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":147,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":372,"org.easymock.tests2.NameTest.nameForStrictMock":102,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":282,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":138,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":55,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":224,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":477,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":133,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":43,"org.easymock.tests2.UsageStrictMockTest.range":96,"org.easymock.tests2.UsageConstraintsTest.lessThan":137,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":195,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":261,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":323,"org.easymock.tests2.CaptureTest.testCaptureRightOne":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":237,"org.easymock.tests2.UsageConstraintsTest.testOr":121,"org.easymock.tests.UsageRangeTest.combination":298,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":53,"org.easymock.tests.UsageTest.wrongArguments":113,"org.easymock.tests2.MockBuilderTest.testWithConstructor":280,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":234,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":78,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":385,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":393,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":316,"org.easymock.tests.UsageVarargTest.varargShortAccepted":411,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":4,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":460,"org.easymock.tests2.UsageConstraintsTest.cmpTo":125,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":318,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":217,"org.easymock.tests2.CaptureTest.testCaptureFromStub":21,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":362,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":44,"org.easymock.tests.UsageTest.unexpectedCallWithArray":8,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":7,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":458,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":394,"org.easymock.tests2.CaptureTest.testCapture":19,"org.easymock.tests2.UsageConstraintsTest.constraints":118,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":341,"org.easymock.samples.ExampleTest.addAndChangeDocument":165,"org.easymock.tests.UsageStrictMockTest.testVerify":343,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":166,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":340,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":311,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":16,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":153,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":386,"org.easymock.tests.LimitationsTest.abstractClass":348,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":154,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":378,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":405,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":266}}]

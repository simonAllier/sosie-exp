[{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:95","sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[1,2,3],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"count":"count","stack":"stack"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[4,5,6],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.MockBuilder:178","failures":[7,8],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[9,10],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:334","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","type":"CtInvocationImpl"},"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.ReflectionUtils:106","failures":[42,43,44,45,46,47],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:130","failures":[48],"status":-1,"binaryOperator":"(((!(java.lang.reflect.Method.isBridge())) && (!(java.lang.reflect.Method.equals(java.lang.reflect.Method)))) && (java.lang.reflect.Method.getName().equals(java.lang.reflect.Method.getName())))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:61","sourceCode":"final java.lang.Throwable java.lang.Throwable","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1052","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[49,50,51,52,53,54],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[36,55],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:198","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:36","sourceCode":"return !(org.easymock.IArgumentMatcher.matches(java.lang.Object))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[56,57,58,59],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:623","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[60],"status":-1,"binaryOperator":"(int >= 0)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[61,62,63,64,1,2,65,3,0],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"failures":[66,67,68],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"returnValue"}},{"transplant":{"position":"org.easymock.EasyMock:1385","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[49,69,70,53],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[56,57,58,59],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:39","sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:41","sourceCode":"org.easymock.IArgumentMatcher.appendTo(java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[71],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:47","sourceCode":"if (int > 0) {\n    java.lang.StringBuffer.append(\", \");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[49,50,51,52,53,54],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:879","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[61,62,72,73,74,75,28,76,77,63,78,30],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:151","sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:197","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:83","sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[37,79],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1191","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[34,36,80,81],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:45","sourceCode":"java.lang.StringBuffer.append(\"[\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.And:49","sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[82],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.Capture:82","failures":[61,62,72,73,74,75,28,76,77,63,78,30],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:88","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[83,84,85,86,87,7,88,89,90,91,92,93,94,95,96,49,97,98,99,100,101,102,103,104,105,14,106,107,108,109,110,111,112,113,114,115,116,117,118,25,52,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,64,147,148,149,150,151,152,153,8,154,155,156,157,158,38,159,39,160,161,162,163,164,165,166],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"toStringMethod","finalizeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:150","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[167,168,169,170,171,172,173,174],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[175,3,0,176],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MockMethodInterceptor:127","sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:123","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[57,58,59],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stream":"stream"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[56,57,58,59],"status":-1,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":1,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":133,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":158,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":132,"org.easymock.tests.MockNameTest.defaultName":106,"org.easymock.tests2.UsageTest.argumentsOrdered":164,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":118,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":149,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":162,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":80,"org.easymock.tests2.NameTest.nameForNiceMock":129,"org.easymock.tests2.SerializationTest.testAllMockedMethod":59,"org.easymock.tests.UsageVarargTest.allKinds":69,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":12,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":93,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":54,"org.easymock.tests.MockClassControlTest.testToString":103,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":66,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":126,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":17,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":135,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":56,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":15,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":97,"org.easymock.tests2.UsageConstraintsTest.greaterThan":36,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":170,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":125,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":101,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":32,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":24,"org.easymock.tests2.UsageTest.wrongArguments":160,"org.easymock.samples.ConstructorCalledMockTest.testTax":167,"org.easymock.tests.UsageStrictMockTest.range":99,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":91,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":168,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":115,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":90,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":159,"org.easymock.tests2.UsageConstraintsTest.testNull":175,"org.easymock.tests2.SerializationTest.test":58,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":74,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":153,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":146,"org.easymock.tests2.CaptureTest.testPrimitive":72,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":9,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":120,"org.easymock.tests.UsageTest.moreThanOneArgument":25,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":50,"org.easymock.tests2.CaptureTest.testCaptureFirst":30,"org.easymock.tests2.CaptureTest.testCaptureNone":29,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":142,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":166,"org.easymock.tests.UsageUnorderedTest.message":14,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":117,"org.easymock.tests2.UsageTest.moreThanOneArgument":39,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":60,"org.easymock.tests.UsageVerifyTest.twoReturns":95,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":155,"org.easymock.tests2.ThreadingTest.testThreadSafe":31,"org.easymock.tests.UsageTest.argumentsOrdered":121,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":84,"org.easymock.tests2.NameTest.nameForMock":127,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":112,"org.easymock.tests2.CaptureTest.testCapture_2617107":62,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":150,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":19,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":22,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":68,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":172,"org.easymock.tests2.UsageStrictMockTest.differentMethods":139,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":18,"org.easymock.tests.UsageCallCountTest.tooManyCalls":113,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":137,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":148,"org.easymock.tests2.SerializationTest.testClass":57,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":157,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":174,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":48,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":3,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":109,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":92,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":46,"org.easymock.tests2.CaptureTest.testAnd":61,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":140,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":124,"org.easymock.tests2.NameTest.nameForMocksControl":130,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":136,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":131,"org.easymock.tests2.NameTest.nameForStrictMock":128,"org.easymock.tests2.DelegateToTest.testDelegate":33,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":8,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":13,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":40,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":6,"org.easymock.tests.MockTypeTest.fromEasyMockClass":88,"org.easymock.tests2.CaptureTest.testCaptureLast":28,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":96,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":41,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":87,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":134,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":0,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":65,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":151,"org.easymock.tests2.UsageStrictMockTest.range":138,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":86,"org.easymock.tests2.UsageConstraintsTest.lessThan":37,"org.easymock.tests2.CaptureTest.testCapture1_2446744":73,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":145,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":20,"org.easymock.tests.UsageTest.exactCallCountByLastCall":122,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":163,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":141,"org.easymock.tests.UsageStrictMockTest.differentMethods":100,"org.easymock.tests2.CaptureTest.testCaptureRightOne":63,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":89,"org.easymock.tests2.UsageConstraintsTest.testOr":2,"org.easymock.tests.UsageRangeTest.combination":102,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":123,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":23,"org.easymock.tests.UsageTest.wrongArguments":119,"org.easymock.tests2.ConstraintsToStringTest.andToString":82,"org.easymock.tests2.MockBuilderTest.testCreateMockString":156,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":147,"org.easymock.tests.UsageVerifyTest.twoThrows":94,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":10,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":173,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":114,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":111,"org.easymock.tests2.CompareToTest.testLessOrEqual":81,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":67,"org.easymock.tests2.CompareToTest.testLessThan":79,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":43,"org.easymock.tests2.UsageTest.niceToStrict":161,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":85,"org.easymock.tests2.UsageConstraintsTest.testNotNull":176,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":5,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":4,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":44,"org.easymock.tests2.CaptureTest.testCaptureFromStub":78,"org.easymock.tests2.MockBuilderTest.testCreateMock":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":11,"org.easymock.tests.UsageVarargTest.differentLength":107,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":152,"org.easymock.tests2.CallbackTest.callback":38,"org.easymock.tests.UsageTest.unexpectedCallWithArray":52,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":83,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":169,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":53,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":143,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":47,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":49,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":34,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":108,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":171,"org.easymock.tests.UsageCallCountTest.tooFewCalls":110,"org.easymock.tests2.CaptureTest.testCapture":77,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":105,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":98,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":42,"org.easymock.tests2.UsageConstraintsTest.constraints":64,"org.easymock.samples.ExampleTest.addAndChangeDocument":26,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":16,"org.easymock.tests2.ConstraintsToStringTest.notToString":71,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":35,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":70,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":76,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":104,"org.easymock.tests2.CompareToTest.testGreateThan":55,"org.easymock.tests2.UsageTest.resumeIfFailure":165,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":75,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":7,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":21,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":116,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":51,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":45,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":144,"org.easymock.tests2.CaptureTest.testCaptureAll":27}}]

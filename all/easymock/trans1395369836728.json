[{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:288","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[1],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"actualTypeArgument","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[2,3,4,5,6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[7,8],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,0,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,7,70,71,72,73,74,75,76,77,78,79,8,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,2,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,4,5,6,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:76","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"m","method":"m"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:43","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String)","type":"CtInvocationImpl"},"failures":[15,17,18,31,32,33,34,95,96,102,103,299,300,301,149,150,152,153,187,188,189,236,258,260,263,264],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:390","sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","type":"CtNewClassImpl"},"failures":[9,302,303,10,11,12,13,14,15,16,17,18,19,20,21,22,304,305,306,307,308,309,310,311,312,313,314,315,23,24,25,26,27,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,28,341,29,30,342,31,32,33,34,35,36,37,38,343,39,40,41,42,43,44,344,45,46,47,0,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,345,346,63,64,347,348,349,65,66,67,69,7,70,71,72,73,74,75,76,77,78,79,8,80,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,81,82,83,84,375,85,86,87,376,88,377,378,379,380,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,2,104,105,381,382,106,107,383,384,385,108,109,386,110,111,112,113,114,115,116,117,118,387,119,388,389,120,121,122,123,390,391,392,393,124,394,395,396,397,398,399,400,401,125,126,127,128,129,130,131,132,402,403,133,134,135,136,137,138,139,140,141,142,143,144,145,146,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,3,421,422,423,424,425,426,147,148,149,150,151,152,153,154,155,156,157,158,159,427,160,428,161,4,5,6,429,430,431,162,432,433,434,435,436,437,163,164,165,166,167,168,169,170,171,172,173,174,438,439,440,441,442,175,443,176,177,178,179,444,180,181,445,446,447,448,449,450,451,452,453,454,455,456,457,458,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,1,200,201,459,460,202,203,204,461,205,206,207,208,209,210,211,212,462,213,214,215,463,464,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,465,466,467,468,469,470,266,471,267,268,269,270,271,272,273,274,275,276,277,278,472,473,474,279,280,475,281,476,477,478,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:71","sourceCode":"final java.io.IOException java.io.IOException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1725","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","type":"CtInvocationImpl"},"failures":[40],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:120","sourceCode":"java.util.List<T>.add(T)","type":"CtInvocationImpl"},"failures":[69,70,71,72,73,74,75,77,479,78],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:243","failures":[15,17,18,26,319,322,332,338,62,63,347,348,66,86,105,382,106,107,383,385,108,109,112,113,114,115,116,117,119,121,122,123,124,394,395,400,125,127,128,130,133,134,135,136,137,150,152,153,428,161,4,5,6,175,446,457,182,190,191,192,193,216,217,218,219,220,221,224,225,227,228,229,231,232,233,234,235,267,268,279,280,281],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if (java.lang.reflect.Constructor<T> == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"failures":[20,480,481,482,483,484,485,349,105,381],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[486,60],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Injector:122","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[15,35,36,39,40,41,42,47,48,49,51,52,53,58,59,60,79,111,397,397,398,398,133,134,135,136,137,404,408,409,418,422,150,428,163,182,183,186,190,191,192,193,194,267,268,277],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:71","sourceCode":"final java.io.IOException java.io.IOException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:144","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findGenericDeclaration(java.lang.reflect.Method)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"toMock"}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[24,25],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.EasyMock:1848","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:80","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"bridgeMethod","bridgeMethod":"candidateMethod"}},{"position":"org.easymock.internal.RecordState:163","failures":[11,12],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:88","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:70","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:74","sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[281],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"failures":[11,12,15,17,18,23,24,28,29,30,35,36,37,38,39,40,41,42,43,44,45,47,0,48,49,50,51,52,53,54,55,57,58,59,60,63,7,71,72,75,76,77,78,80,362,363,364,367,368,371,373,86,88,94,95,97,99,100,2,111,116,122,395,126,133,134,135,136,137,142,145,146,150,152,153,161,4,5,6,182,183,186,187,188,216,217,220,222,223,224,225,227,228,229,230,232,233,234,235,237,238,241,243,244,245,246,248,249,250,251,253,254,255,256,257,258,261,262,267,268,269,272,273,274,275,276,277],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[20,22,319,322,332,338,61,62,345,63,64,347,348,65,66,67,83,105,382,106,107,383,108,109,112,113,115,116,117,118,119,120,121,122,123,391,395,397,397,398,398,402,403,160,175,448,453,200,201,459,460,464,474,279,280,281,291,292,293,294,295,296,297,298],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:42","sourceCode":"return false","type":"CtReturnImpl"},"failures":[487],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[94],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[81,82,83,84,111,138,139,140,141,142,143,411,438,439,440,278],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:90","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[310,356,452],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:159","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1079","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","type":"CtInvocationImpl"},"failures":[37,43,53,70],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:42","sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","type":"CtThrowImpl"},"failures":[470],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"cls":"type","type":"type"}},{"transplant":{"position":"org.easymock.EasyMock:1107","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"failures":[41],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1746","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:90","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[309,23,355,362,456],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[488],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[489,69,7,70,71,72,73,74,75,76,77,479,78,79,8,80,490],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"potentialValue":"value","capture":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":38,"org.easymock.tests2.UsageTest.argumentsOrdered":103,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":257,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":372,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":356,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":414,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":98,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":396,"org.easymock.tests2.DelegateToTest.testReturnException":85,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":139,"org.easymock.tests.MockingTest.testPartialClassMocking":279,"org.easymock.tests.MockClassControlTest.testToString":293,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":342,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":446,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":422,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":391,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":326,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":237,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":322,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":299,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":394,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":480,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":44,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":182,"org.easymock.tests2.UsageTest.wrongArguments":96,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":315,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":158,"org.easymock.samples.ExampleTest.answerVsDelegate":126,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":453,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":477,"org.easymock.tests2.UsageConstraintsTest.testNull":40,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":115,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":298,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":371,"org.easymock.tests2.CaptureTest.testPrimitive":71,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":186,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":256,"org.easymock.tests.UsageTest.moreThanOneArgument":258,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":114,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":192,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":465,"org.easymock.tests.UsageTest.argumentsOrdered":264,"org.easymock.tests.UsageVarargTest.varargIntAccepted":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":419,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":133,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":61,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":360,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":64,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":406,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":137,"org.easymock.tests.ReplayStateInvalidUsageTest.times":171,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":309,"org.easymock.tests2.DependencyTest.testClassMocking":392,"org.easymock.tests2.AnswerTest.answer":9,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":344,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":3,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":92,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":450,"org.easymock.tests2.CaptureTest.testAnd":69,"org.easymock.tests2.UsageTest.strictResetToDefault":94,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":488,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":120,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":191,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":5,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":366,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":469,"org.easymock.tests2.DelegateToTest.testDelegate":88,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":252,"org.easymock.tests.LimitationsTest.mockFinalMethod":443,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":142,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":199,"org.easymock.tests2.DependencyTest.testClassMockingSupport":393,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":470,"org.easymock.tests2.CaptureTest.testCapture1_2446744":72,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":387,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":250,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":90,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":165,"org.easymock.tests.UsageThrowableTest.throwError":269,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":452,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":361,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":340,"org.easymock.samples.PartialClassMockTest.testGetArea":395,"org.easymock.tests.MockingTest.testInterfaceMocking":475,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":166,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":134,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":457,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":464,"org.easymock.tests2.UsageTest.niceToStrict":97,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":238,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":404,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":63,"org.easymock.tests2.MockBuilderTest.testCreateMock":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":335,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":312,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":246,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":367,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":449,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":431,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":282,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":156,"org.easymock.tests.UsageOverloadedMethodTest.overloading":145,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":331,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":337,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":179,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":48,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":144,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":227,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":0,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":77,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":461,"org.easymock.tests.MockClassControlTest.testEquals":297,"org.easymock.tests2.EasyMockSupportClassTest.testAll":319,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":201,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":254,"org.easymock.tests2.CaptureTest.testCaptureAll":7,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":91,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":197,"org.easymock.tests.MockNameTest.defaultName":427,"org.easymock.tests2.UsageConstraintsTest.testMatches":49,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":163,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":193,"org.easymock.samples.ExampleTest.voteForRemovals":130,"org.easymock.tests.UsageVarargTest.allKinds":212,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":187,"org.easymock.samples.BasicClassMockTest.testPrintContent":403,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":198,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":275,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":13,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":143,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":357,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":376,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":484,"org.easymock.tests2.UsageConstraintsTest.greaterThan":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":320,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":4,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":123,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":437,"org.easymock.samples.ExampleTest.voteForRemoval":127,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":390,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":24,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":454,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":118,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":160,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":93,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":349,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":411,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":364,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":317,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":138,"org.easymock.tests2.CaptureTest.testCaptureFirst":80,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":375,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":410,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":365,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":104,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":181,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":223,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":26,"org.easymock.tests2.CaptureTest.testCapture2_2446744":8,"org.easymock.tests2.UsageTest.moreThanOneArgument":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":421,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":66,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":211,"org.easymock.tests.GenericTest.testBridgedEquals":460,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":289,"org.easymock.tests.UsageExpectAndReturnTest.longType":219,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":195,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":362,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":255,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":428,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":56,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":253,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":439,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":190,"org.easymock.tests.UsageCallCountTest.tooManyCalls":290,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":284,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":336,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":224,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":314,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":242,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":274,"org.easymock.tests.MockingTest.testNiceClassMocking":478,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":106,"org.easymock.tests.MockingTest.testClassMocking":473,"org.easymock.tests2.UsageConstraintsTest.testContains":47,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":283,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":83,"org.easymock.tests2.UsageConstraintsTest.testFind":39,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":146,"org.easymock.tests.MockTypeTest.fromEasyMockClass":451,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":147,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":29,"org.easymock.tests.UsageExpectAndReturnTest.object":226,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":119,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":313,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":370,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":481,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":206,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":215,"org.easymock.tests.UsageTest.exactCallCountByLastCall":265,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":277,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":409,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":466,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":445,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":381,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":202,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":232,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":178,"org.easymock.tests.MockClassControlTest.testHashCode":296,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":351,"org.easymock.tests2.EasyMockSupportTest.testVerify":374,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":329,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":467,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":430,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":176,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":89,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":68,"org.easymock.tests.UsageVarargTest.varargCharAccepted":205,"org.easymock.tests2.CaptureTest.testCaptureMultiple":489,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":14,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":426,"org.easymock.tests2.UsageTest.openCallCountByLastCall":99,"org.easymock.tests.DefaultClassInstantiatorTest.object":162,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":373,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":429,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":213,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":244,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":330,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":272,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":307,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":350,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":121,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":295,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":243,"org.easymock.tests.CapturesMatcherTest.test":490,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":233,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":438,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":294,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":338,"org.easymock.tests2.UsageTest.resumeIfFailure":2,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":448,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":141,"org.easymock.tests2.StubTest.stubWithReturnValue":111,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":485,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":57,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":225,"org.easymock.tests2.SerializationTest.testAllMockedMethod":22,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":420,"org.easymock.samples.SupportTest.voteForRemovals":400,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":1,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":353,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":249,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":425,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":302,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":447,"org.easymock.tests.UsageExpectAndThrowTest.object":247,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":54,"org.easymock.tests2.DelegateToTest.testWrongClass":87,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":267,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":268,"org.easymock.samples.ConstructorCalledMockTest.testTax":397,"org.easymock.tests.UsageStrictMockTest.range":152,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":379,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":369,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":382,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":248,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":347,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":173,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":263,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":316,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":157,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":458,"org.easymock.tests2.CaptureTest.testCaptureNone":76,"org.easymock.tests.UsageUnorderedTest.message":236,"org.easymock.tests.UsageVerifyTest.twoReturns":189,"org.easymock.tests.UsageVarargTest.varargByteAccepted":210,"org.easymock.tests2.ThreadingTest.testThreadSafe":23,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":333,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":287,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":463,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":402,"org.easymock.tests2.CaptureTest.testCapture_2617107":70,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":471,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":423,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":185,"org.easymock.tests2.UsageConstraintsTest.any":45,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":170,"org.easymock.tests2.StubTest.stub":110,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":440,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":424,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":140,"org.easymock.tests.UsageExpectAndThrowTest.longType":240,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":435,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":169,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":16,"org.easymock.tests2.SerializationTest.testClass":20,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":355,"org.easymock.tests.LimitationsTest.mockNativeMethod":175,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":459,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":235,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":306,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":19,"org.easymock.tests2.NameTest.nameForMocksControl":34,"org.easymock.tests2.MockedExceptionTest.testMockedException":82,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":308,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":321,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":262,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":241,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":281,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":341,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":112,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":348,"org.easymock.tests.MockingTest.testNicePartialClassMocking":280,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":117,"org.easymock.tests2.CompareToTest.testNotComparable":487,"org.easymock.tests2.CaptureTest.testCaptureLast":75,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":304,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":266,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":109,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":43,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":55,"org.easymock.tests.MockingTest.testTwoMocks":474,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":386,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":216,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":245,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":102,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":59,"org.easymock.samples.ExampleTest.removeNonExistingDocument":131,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":167,"org.easymock.tests.UsageStrictMockTest.differentMethods":153,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":311,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":352,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":433,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":25,"org.easymock.tests2.MockBuilderTest.testCreateMockString":67,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":291,"org.easymock.tests.UsageExpectAndThrowTest.floatType":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":323,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":318,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":10,"org.easymock.tests.UsageVerifyTest.twoThrows":188,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":177,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":332,"org.easymock.samples.ExampleTest.voteAgainstRemoval":128,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":456,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":415,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":122,"org.easymock.tests.LimitationsTest.privateConstructor":442,"org.easymock.tests2.UsageConstraintsTest.testNotNull":58,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":81,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":276,"org.easymock.tests2.UsageTest.defaultResetToNice":101,"org.easymock.samples.ExampleTest.voteAgainstRemovals":125,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":416,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":231,"org.easymock.tests.UsageVarargTest.differentLength":207,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":305,"org.easymock.tests2.CallbackTest.callback":30,"org.easymock.tests2.UsageConstraintsTest.equals":343,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":388,"org.easymock.tests.UsageTest.openCallCountByLastCall":261,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":35,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":184,"org.easymock.tests.UsageCallCountTest.tooFewCalls":285,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":383,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":159,"org.easymock.tests.UsageThrowableTest.throwCheckedException":273,"org.easymock.tests.MockingTest.testStrictClassMocking":472,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":108,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":278,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":107,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":310,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":172,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":385,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":12,"org.easymock.tests.ObjectMethodsTest.testHashCode":214,"org.easymock.tests2.NameTest.nameForNiceMock":33,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":27,"org.easymock.tests2.DependencyTest.testInterfaceMocking":124,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":482,"org.easymock.samples.ExampleTest.addDocument":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":334,"org.easymock.tests2.DelegateToTest.testStubDelegate":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":339,"org.easymock.tests2.AnswerTest.stubAnswer":11,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":150,"org.easymock.tests.UsageVarargTest.varargLongAccepted":209,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":413,"org.easymock.tests.UsageExpectAndReturnTest.floatType":218,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":234,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":105,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":398,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":444,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":52,"org.easymock.tests.UsageThrowableTest.noUpperLimit":270,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":359,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":36,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":377,"org.easymock.tests2.SerializationTest.test":21,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":73,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":432,"org.easymock.tests2.UsageConstraintsTest.testSame":41,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":217,"org.easymock.samples.SupportTest.addDocument":399,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":384,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":168,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":324,"org.easymock.tests.GenericTest.testPackageScope":200,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":468,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":408,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":358,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":476,"org.easymock.tests2.NameTest.nameForMock":31,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":228,"org.easymock.tests2.UsageStrictMockTest.differentMethods":18,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":389,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":220,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":251,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":462,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":6,"org.easymock.tests2.MockedExceptionTest.testRealException":84,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":455,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":418,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":380,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":417,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":15,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":183,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":174,"org.easymock.tests2.NameTest.nameForStrictMock":32,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":346,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":28,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":116,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":378,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":434,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":53,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":300,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":62,"org.easymock.tests2.UsageStrictMockTest.range":17,"org.easymock.tests2.UsageConstraintsTest.lessThan":60,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":354,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":483,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":412,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":363,"org.easymock.tests2.CaptureTest.testCaptureRightOne":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":328,"org.easymock.tests2.UsageConstraintsTest.testOr":42,"org.easymock.tests.UsageRangeTest.combination":161,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":113,"org.easymock.tests.UsageTest.wrongArguments":260,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":325,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":292,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":221,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":405,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":229,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":436,"org.easymock.tests.UsageVarargTest.varargShortAccepted":208,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":288,"org.easymock.tests2.UsageConstraintsTest.cmpTo":46,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":303,"org.easymock.tests2.CompareToTest.testLessThan":486,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":407,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":100,"org.easymock.tests2.CaptureTest.testCaptureFromStub":79,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":164,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":345,"org.easymock.tests.UsageTest.unexpectedCallWithArray":259,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":149,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":286,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":230,"org.easymock.tests2.CaptureTest.testCapture":479,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":151,"org.easymock.tests2.UsageConstraintsTest.constraints":37,"org.easymock.samples.ExampleTest.addAndChangeDocument":132,"org.easymock.tests.UsageStrictMockTest.testVerify":155,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":401,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":148,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":196,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":74,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":135,"org.easymock.tests.LimitationsTest.abstractClass":441,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":222,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":180,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":136,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":203,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":301,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":368}}]

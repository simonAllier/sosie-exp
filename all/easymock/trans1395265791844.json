[{"position":"org.easymock.EasyMock:959","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[0,1,2,3,4,5],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.EasyMockProperties:133","failures":[6,7],"status":-1,"binaryOperator":"java.lang.ClassLoader == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:217","sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[8,9,10,11,12,13,14,15,16,17],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:167","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[18,19],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:173","failures":[20],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:613","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[21,22,23,24,25,26,27,28,29],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:707","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[30],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[31,17,32,33],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[34,28,29,35],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:252","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:33","sourceCode":"new java.util.ArrayList<org.easymock.internal.ExpectedInvocationAndResult>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"failures":[36,37],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"failures":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,167,168,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,13,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,18,19,227,228,229,230,20,231,232,233,21,234,235,236,36,237,37,23,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,24,25,256,34,257,26,27,30,258,259,260,261,262,263,264,265,266,29,267,268,269,35,270,271,17,32,272],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.Range:40","failures":[122],"status":-1,"binaryOperator":"(int >= 0)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:201","sourceCode":"java.util.Set<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.Set<java.lang.reflect.Method>.size()])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:71","sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","type":"CtIfImpl"},"failures":[45,273,274,169,275,204,276,205,277,206,207,278,208,279,210,211,212,280,220,221,281,17],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mockedMethods":"mockedMethods"}},{"position":"org.easymock.internal.ClassProxyFactory:191","failures":[282,44,283,45,284,285,286,52,287,96,288,289,290,110,111,112,291,273,274,292,293,294,295,296,297,298,299,0,1,2,3,300,4,5,167,168,169,301,302,303,304,179,180,181,182,184,185,195,196,197,13,14,305,275,306,204,276,307,308,205,277,206,15,207,16,278,208,309,279,310,311,209,312,210,313,314,315,316,317,318,319,211,320,321,322,323,324,212,213,214,216,217,218,280,219,325,326,327,220,221,222,328,281,17,33],"status":-1,"binaryOperator":"org.easymock.ConstructorArgs != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[17,32,33],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"position":"org.easymock.internal.Range:52","failures":[54,55,120,121,153,175,176],"status":-1,"binaryOperator":"(int) == (int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ClassProxyFactory:157","failures":[],"status":0,"binaryOperator":"(((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName())))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.Capture:134","failures":[329,330],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"delegateTo"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[31,17,32,33],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:40","sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:42","sourceCode":"return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"c":"c","this":"this"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[21,234,22,235,23,238,24,25,256,34,257,26,27,30,28,258,29,267,35,270],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.EasyMock:866","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[8,9,10,11,12,13,14,15,16,17],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:217","failures":[331,332,333,334,335,44,283,46,47,48,49,51,52,336,337,53,338,54,55,339,56,57,58,59,60,61,62,63,66,67,69,74,79,340,84,341,342,343,90,96,102,103,104,105,344,345,346,347,348,349,350,351,352,353,110,111,112,126,127,131,132,134,139,144,149,154,155,161,162,163,164,354,165,166,169,355,356,301,302,357,170,171,172,173,358,174,359,175,176,360,179,180,181,182,183,184,185,186,187,361,189,362,363,364,194,197,202,203,13,205,206,207,209,210,211,212,213,214,215,216,217,218,219,221,223,226,230,231,233,21,234,22,235,365,366,36,237,37,23,240,241,242,243,244,245,246,247,249,250,251,252,367,253,25,34,27,30,258,259,261,264,29,267,268,368,269,35,17,32,33,272],"status":-1,"binaryOperator":"(boolean) && ((org.easymock.internal.Result) == null)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:2124","failures":[162,223,226,18,227,369,228],"status":-1,"binaryOperator":"org.easymock.internal.Invocation == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:40","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>.getName(), java.lang.Double.java.lang.Class<java.lang.Double>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:208","sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[45],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[181,185,370,14,306,307,15,371,309,372,373,374],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Any:36","sourceCode":"return true","type":"CtReturnImpl"},"failures":[38,39,46,47,48,49,50,51,53,97,98,99,100,101,117,124,125,174,234,36,237,240,26,258],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:866","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[38,46,47,48,50,51,53,54,55,56,59,60,61,62,63,91,97,98,99,100,101,117,124,125,127,149,154,161,162,163,164,165,166,169,170,174,175,176,187,189,205,214,217,220,221,222,19,233,234,235,36,237,37,23,240,241,242,243,244,246,247,250,251,252,25,34,27,30,258,261,264,29,267,268,269,35,272],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ErrorMessage:51","failures":[54,375,154,155,175],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"math","type":"mutation"},{"position":"org.easymock.EasyMock:2124","failures":[162,223,226,18,227,369,228],"status":-1,"binaryOperator":"org.easymock.internal.Invocation == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[214,327],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":25,"org.easymock.tests2.UsageTest.argumentsOrdered":364,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":86,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":251,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":116,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":362,"org.easymock.tests2.StubTest.stubWithReturnValue":178,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":15,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":355,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":269,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":73,"org.easymock.tests2.SerializationTest.testAllMockedMethod":33,"org.easymock.tests2.DelegateToTest.testReturnException":230,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":91,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":114,"org.easymock.tests.MockingTest.testPartialClassMocking":110,"org.easymock.samples.SupportTest.voteForRemovals":170,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":282,"org.easymock.tests.MockClassControlTest.testToString":294,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":85,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":281,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":141,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":31,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":210,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":92,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":129,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":224,"org.easymock.tests.UsageExpectAndThrowTest.object":139,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":267,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":173,"org.easymock.tests2.DelegateToTest.testWrongClass":231,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":8,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":124,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":125,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":30,"org.easymock.tests2.UsageTest.wrongArguments":361,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":46,"org.easymock.tests.UsageStrictMockTest.range":54,"org.easymock.samples.ConstructorCalledMockTest.testTax":167,"org.easymock.samples.ExampleTest.answerVsDelegate":162,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":248,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":274,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":179,"org.easymock.tests2.UsageConstraintsTest.testNull":34,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":216,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":140,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":299,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":250,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":206,"org.easymock.tests2.CaptureTest.testPrimitive":235,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":50,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":310,"org.easymock.tests.UsageTest.moreThanOneArgument":87,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":148,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":215,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":158,"org.easymock.tests2.CaptureTest.testCaptureNone":237,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":108,"org.easymock.tests.UsageUnorderedTest.message":51,"org.easymock.tests.UsageVerifyTest.twoReturns":155,"org.easymock.tests.UsageVarargTest.varargByteAccepted":351,"org.easymock.tests2.ThreadingTest.testThreadSafe":199,"org.easymock.tests.UsageTest.argumentsOrdered":343,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":119,"org.easymock.tests.UsageVarargTest.varargIntAccepted":346,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":320,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":333,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":301,"org.easymock.tests2.CaptureTest.testCapture_2617107":22,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":97,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":275,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":49,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":277,"org.easymock.tests2.UsageConstraintsTest.any":258,"org.easymock.tests2.StubTest.stub":177,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":95,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":101,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":115,"org.easymock.tests.UsageExpectAndThrowTest.longType":132,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":300,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":359,"org.easymock.tests2.SerializationTest.testClass":17,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":171,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":253,"org.easymock.tests.LimitationsTest.mockNativeMethod":52,"org.easymock.tests2.AnswerTest.answer":223,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":83,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":45,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":28,"org.easymock.tests2.CaptureTest.testAnd":21,"org.easymock.tests2.UsageTest.strictResetToDefault":187,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":360,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":327,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":307,"org.easymock.tests2.MockedExceptionTest.testMockedException":196,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":157,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":312,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":245,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":151,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":89,"org.easymock.tests2.DelegateToTest.testDelegate":233,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":123,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":369,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":112,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":133,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":213,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":207,"org.easymock.tests.MockingTest.testNicePartialClassMocking":111,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":144,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":218,"org.easymock.tests.LimitationsTest.mockFinalMethod":287,"org.easymock.tests2.CaptureTest.testCaptureLast":36,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":117,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":84,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":27,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":185,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":268,"org.easymock.tests.MockingTest.testTwoMocks":290,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":340,"org.easymock.tests2.CaptureTest.testCapture1_2446744":236,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":370,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":64,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":142,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":137,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":363,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":270,"org.easymock.tests.UsageThrowableTest.throwError":56,"org.easymock.tests.UsageStrictMockTest.differentMethods":55,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":2,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":7,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":201,"org.easymock.tests2.MockBuilderTest.testCreateMockString":279,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":313,"org.easymock.tests.UsageExpectAndThrowTest.floatType":131,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":160,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":264,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":226,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":305,"org.easymock.tests.UsageVerifyTest.twoThrows":154,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":372,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":211,"org.easymock.samples.PartialClassMockTest.testGetArea":169,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":98,"org.easymock.samples.ExampleTest.voteAgainstRemoval":164,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":106,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":107,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":221,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":316,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":130,"org.easymock.tests2.UsageTest.niceToStrict":189,"org.easymock.tests.LimitationsTest.privateConstructor":286,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":373,"org.easymock.tests2.UsageConstraintsTest.testNotNull":35,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":195,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":63,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":205,"org.easymock.tests2.MockBuilderTest.testCreateMock":278,"org.easymock.tests2.UsageTest.defaultResetToNice":192,"org.easymock.samples.ExampleTest.voteAgainstRemovals":161,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":322,"org.easymock.tests2.CallbackTest.callback":272,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":325,"org.easymock.tests.UsageTest.openCallCountByLastCall":88,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":138,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":246,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":254,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":42,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":48,"org.easymock.tests.UsageCallCountTest.tooFewCalls":331,"org.easymock.tests.UsageOverloadedMethodTest.overloading":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":324,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":262,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":104,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":75,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":126,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":182,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":261,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":37,"org.easymock.tests.UsageThrowableTest.throwCheckedException":60,"org.easymock.tests.MockClassControlTest.testEquals":298,"org.easymock.tests2.EasyMockSupportClassTest.testAll":209,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":283,"org.easymock.tests.MockingTest.testStrictClassMocking":288,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":146,"org.easymock.tests2.CaptureTest.testCaptureAll":234,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":39,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":184,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":181,"org.easymock.tests2.UsageConstraintsTest.testMatches":263,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":183,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":19,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":159,"org.easymock.samples.ExampleTest.voteForRemovals":165,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":203,"org.easymock.tests.UsageVarargTest.allKinds":353,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":153,"org.easymock.tests2.DependencyTest.testInterfaceMocking":172,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":10,"org.easymock.samples.BasicClassMockTest.testPrintContent":302,"org.easymock.samples.ExampleTest.addDocument":354,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":321,"org.easymock.tests2.DelegateToTest.testStubDelegate":20,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":62,"org.easymock.tests2.AnswerTest.stubAnswer":18,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":232,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":118,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":53,"org.easymock.tests2.UsageConstraintsTest.greaterThan":265,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":12,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":150,"org.easymock.tests.UsageVarargTest.varargLongAccepted":350,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":222,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":339,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":5,"org.easymock.samples.ExampleTest.voteForRemoval":163,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":328,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":200,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":82,"org.easymock.tests.UsageExpectAndReturnTest.floatType":66,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":280,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":13,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":168,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":266,"org.easymock.tests.UsageThrowableTest.noUpperLimit":57,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":255,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":96,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":186,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":303,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":365,"org.easymock.tests2.SerializationTest.test":32,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":16,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":243,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":1,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":58,"org.easymock.tests2.UsageConstraintsTest.testSame":257,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":65,"org.easymock.samples.SupportTest.addDocument":357,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":311,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":113,"org.easymock.tests2.CaptureTest.testCaptureFirst":240,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":229,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":244,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":194,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":314,"org.easymock.tests.GenericTest.testPackageScope":44,"org.easymock.tests2.CaptureTest.testCapture2_2446744":239,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":202,"org.easymock.tests2.UsageTest.moreThanOneArgument":188,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":122,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":208,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":352,"org.easymock.tests.GenericTest.testBridgedEquals":284,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":374,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":334,"org.easymock.tests.UsageExpectAndReturnTest.longType":67,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":241,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":76,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":147,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":368,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":109,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":309,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":145,"org.easymock.tests2.UsageStrictMockTest.differentMethods":176,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":94,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":156,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":326,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":68,"org.easymock.tests.UsageCallCountTest.tooManyCalls":335,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":143,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":152,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":43,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":323,"org.easymock.tests2.MockedExceptionTest.testRealException":198,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":72,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":134,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":174,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":61,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":47,"org.easymock.tests.MockingTest.testNiceClassMocking":291,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":180,"org.easymock.tests.MockingTest.testClassMocking":289,"org.easymock.tests2.UsageConstraintsTest.testContains":260,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":197,"org.easymock.tests2.UsageConstraintsTest.testFind":256,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":128,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":308,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":227,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":217,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":228,"org.easymock.tests.UsageExpectAndReturnTest.object":74,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":304,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":3,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":29,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":219,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":204,"org.easymock.tests2.UsageStrictMockTest.range":175,"org.easymock.tests2.UsageConstraintsTest.lessThan":271,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":249,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":348,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":9,"org.easymock.tests.UsageTest.exactCallCountByLastCall":90,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":38,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":242,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":11,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":317,"org.easymock.tests2.CaptureTest.testCaptureRightOne":23,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":6,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":120,"org.easymock.tests2.UsageConstraintsTest.testOr":26,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":14,"org.easymock.tests.UsageRangeTest.combination":149,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":344,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":214,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":80,"org.easymock.tests.UsageTest.wrongArguments":341,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":103,"org.easymock.tests2.MockBuilderTest.testWithConstructor":306,"org.easymock.tests.MockClassControlTest.testHashCode":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":315,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":293,"org.easymock.tests2.EasyMockSupportTest.testVerify":367,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":69,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":318,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":121,"org.easymock.tests.UsageVarargTest.varargShortAccepted":349,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":4,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":41,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":102,"org.easymock.tests2.UsageConstraintsTest.cmpTo":259,"org.easymock.tests.UsageVarargTest.varargCharAccepted":347,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":225,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":358,"org.easymock.tests2.UsageTest.openCallCountByLastCall":190,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":191,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":252,"org.easymock.tests.DefaultClassInstantiatorTest.object":0,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":40,"org.easymock.tests2.CaptureTest.testCaptureFromStub":238,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":276,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":319,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":136,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":337,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":59,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":332,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":371,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":78,"org.easymock.tests2.CaptureTest.testCapture":330,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":338,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":296,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":220,"org.easymock.tests2.UsageConstraintsTest.constraints":24,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":135,"org.easymock.samples.ExampleTest.addAndChangeDocument":166,"org.easymock.tests.CapturesMatcherTest.test":329,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":81,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":93,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":356,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":336,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":295,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":212,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":366,"org.easymock.tests2.UsageTest.resumeIfFailure":193,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":99,"org.easymock.tests.LimitationsTest.abstractClass":285,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":273,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":70,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":100,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":105,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":375,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":345,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":247}}]

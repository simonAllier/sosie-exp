[{"position":"org.easymock.EasyMock:1519","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:76","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"m","method":"m"}},{"position":"org.easymock.internal.LastControl:95","failures":[0,1,2,3,4,5,6,7,8,9,10],"status":-1,"binaryOperator":"int < int","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[11,12,13,14],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:49","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Integer.java.lang.Class<java.lang.Integer>, java.lang.Integer.java.lang.Integer.valueOf(0))","type":"CtInvocationImpl"},"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[32,33,34,35],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:118","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"method":"result"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:147","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"position":"org.easymock.internal.ClassProxyFactory:191","failures":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,13,75,76,77,78,79,80,81,82,83,84,85,86,87,88,24,25,26,89,28,90,91,92,29,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120],"status":-1,"binaryOperator":"org.easymock.ConstructorArgs != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:54","sourceCode":"return false","type":"CtReturnImpl"},"failures":[121],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[122,123,124,125,126,127,128,129,130,131,36,37,132,133,38,134,135,136,137,138,39,40,139,140,141,41,142,143,42,43,144,44,145,45,46,47,48,49,146,50,51,52,53,147,54,55,56,57,58,59,60,148,149,150,151,152,153,154,0,1,121,155,2,156,3,4,32,5,157,158,159,160,33,161,11,162,163,6,164,165,166,167,7,168,34,169,170,171,172,173,174,175,176,177,178,8,179,9,180,181,182,183,184,185,186,10,187,188,189,190,191,192,15,193,16,17,18,19,20,21,194,195,196,197,198,12,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,61,220,62,63,221,64,65,66,67,222,68,223,224,69,70,225,71,72,73,22,74,13,75,76,226,77,227,78,79,80,81,82,83,84,85,86,228,87,229,23,88,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,24,25,26,27,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,89,28,90,91,92,29,285,93,94,95,96,97,98,286,99,287,288,100,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,101,102,103,104,105,106,107,108,109,110,111,112,113,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,114,341,342,343,344,345,346,14,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,115,395,396,397,398,116,399,400,401,402,403,404,405,406,407,408,409,410,411,117,118,119,120,412,413,414,415,416,417,418,419,30,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,31,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:233","sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"failMessage","key":"failMessage"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:269","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","type":"CtThrowImpl"},"failures":[402,403,452,453],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1988","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[489,490,491],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"failures":[124,125,126,127,128,129,131,36,37,132,133,38,134,135,136,137,138,39,44,46,54,60,150,152,153,154,0,1,155,2,156,3,4,32,157,158,159,160,33,161,11,162,163,6,164,165,166,167,7,168,34,169,172,173,174,8,179,9,180,181,182,183,184,185,186,10,188,189,190,191,192,15,193,17,18,19,21,194,195,196,197,198,12,199,200,202,203,205,206,207,208,209,210,211,212,214,215,216,217,218,65,67,68,72,73,22,74,13,75,77,81,85,86,228,87,23,88,230,234,235,241,253,261,26,269,270,271,272,273,274,276,282,97,98,99,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,318,110,111,325,326,327,329,330,332,333,334,335,336,337,338,114,352,353,354,355,356,357,358,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,404,405,406,407,408,409,410,411,119,412,414,415,419,30,420,421,422,454,456,457,458,459,460,461,462,468,482,483,484,485,487,488],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"failures":[8,179,9,180,181,182,183,184,186,10,187,188,189,492],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1848","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[32,33,34,35],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:65","sourceCode":"throw java.lang.Throwable","type":"CtThrowImpl"},"failures":[412,414],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"failures":[8,179,9,180,181,182,183,184,186,10,187,188,189,492],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:124","failures":[150],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:59","sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection","obj":"obj","targetField":"targetField"}},{"position":"org.easymock.internal.Range:40","failures":[122,123,124,125,126,127,128,129,130,131,36,37,132,133,38,134,135,136,137,138,39,40,139,140,141,41,142,143,42,43,144,44,145,45,46,47,48,49,146,50,51,52,53,147,54,55,56,57,58,59,60,148,149,150,151,152,153,154,0,1,121,155,2,156,3,4,32,5,157,158,159,160,33,161,11,162,163,6,164,165,166,167,7,168,34,169,170,171,172,173,174,175,176,177,178,8,179,9,180,181,182,183,184,185,186,10,187,188,189,190,191,192,15,193,16,17,18,19,20,21,194,195,196,197,198,12,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,61,220,62,63,221,64,65,66,67,222,68,223,224,69,70,225,71,72,73,22,74,13,75,76,226,77,227,78,79,80,81,82,83,84,85,86,228,87,229,23,88,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,24,25,26,27,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,89,28,90,91,92,29,285,93,94,95,96,97,98,286,99,287,288,100,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,101,102,103,104,105,106,107,108,109,110,111,112,113,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,114,341,342,343,344,345,346,14,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,115,395,396,397,398,116,399,400,401,402,403,404,405,406,407,408,409,410,411,117,118,119,120,412,413,414,415,416,417,418,419,30,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,31,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:83","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[122,122,123,123,124,125,126,127,128,129,130,131,36,37,132,133,38,134,135,136,137,138,39,40,41,142,143,42,43,144,44,145,45,46,47,48,49,146,50,51,52,53,147,54,55,56,57,58,59,60,148,149,150,151,152,153,154,0,1,121,155,2,156,3,4,32,5,157,158,159,160,33,161,11,162,163,6,164,165,166,167,7,168,34,169,170,171,172,173,174,175,176,177,178,8,179,9,180,181,182,183,184,185,186,10,187,188,189,190,191,192,15,193,16,17,18,19,20,21,194,195,196,197,198,12,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,61,220,62,63,221,64,65,66,67,222,68,224,69,70,225,71,72,73,22,74,13,75,76,226,77,227,78,79,80,81,82,83,84,85,86,228,87,23,88,230,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,24,25,26,27,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,89,28,90,91,92,29,285,93,94,95,96,97,98,286,99,287,288,100,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,101,102,103,104,105,106,107,108,109,110,111,112,113,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,340,114,341,342,343,344,345,346,14,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,115,397,398,116,399,400,401,402,403,404,405,406,407,408,409,410,411,117,118,119,120,412,413,414,415,416,417,418,419,30,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,31,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","name":"name","this":"this"}},{"position":"org.easymock.internal.Range:44","failures":[122,123,124,125,126,127,128,129,130,131,36,37,132,133,38,134,135,136,137,138,39,40,139,140,141,41,142,143,42,43,144,44,145,45,46,47,48,49,146,50,51,52,53,147,54,55,56,57,58,59,60,148,149,150,151,152,153,154,0,1,121,155,2,156,3,4,32,5,157,158,159,160,33,161,11,162,163,6,164,165,166,167,7,168,34,169,170,171,172,173,174,175,176,177,178,8,179,9,180,181,182,183,184,185,186,10,187,188,189,190,191,192,15,193,16,17,18,19,20,21,194,195,196,197,198,12,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,61,220,62,63,221,64,65,66,67,222,68,223,224,69,70,225,71,72,73,22,74,13,75,76,226,77,227,78,79,80,81,82,83,84,85,86,228,87,229,23,88,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,24,25,26,27,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,89,28,90,91,92,29,285,93,94,95,96,97,98,286,99,287,288,100,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,101,102,103,104,105,106,107,108,109,110,111,112,113,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,114,341,342,343,344,345,346,14,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,115,395,396,397,398,116,399,400,401,402,403,404,405,406,407,408,409,410,411,117,118,119,120,412,413,414,415,416,417,418,419,30,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,31,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:235","failures":[122,123,137,220,221,222,224,493,225,494,495,496,227,253,254],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[6],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1291","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.EqualsWithDelta:45","failures":[497],"status":-1,"binaryOperator":"(\"eq(\" + (java.lang.Number))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:390","sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:92","sourceCode":"for (final org.easymock.internal.Range org.easymock.internal.Range : java.util.LinkedList<org.easymock.internal.Range>) {\n    int += org.easymock.internal.Range.getMinimum();\n    if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n        int = java.lang.Integer.int;\n    } else {\n        int += org.easymock.internal.Range.getMaximum();\n    }\n}","type":"CtForEachImpl"},"failures":[124,125,126,127,128,129,131,36,37,132,133,38,134,135,136,137,138,39,44,46,54,60,150,152,153,154,0,1,155,2,156,3,4,32,157,158,159,160,33,161,11,162,163,6,164,165,167,7,168,34,169,172,173,174,8,179,9,180,182,183,184,185,186,10,189,190,191,193,17,18,21,194,195,196,197,198,12,202,203,204,205,206,207,208,209,210,211,212,214,215,216,217,218,62,65,67,68,70,72,73,22,74,13,75,77,80,81,82,85,86,228,87,23,88,230,234,235,241,249,250,251,252,253,261,26,268,269,270,271,272,273,274,275,276,282,97,98,99,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,318,319,320,321,110,111,325,326,327,329,330,331,332,333,334,335,336,337,338,114,352,353,354,355,356,357,358,360,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,387,388,389,390,391,405,406,119,417,419,30,420,421,422,454,455,456,457,458,459,460,461,462,468,480,482,483,484,485,487,488],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[122,122,123,123,38,137,44,46,54,60,498,61,62,63,65,67,68,70,499,71,73,76,80,81,82,500,501,502,503,504,253,97,98,99,110,112,114,119],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"method"}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[196,197,202,203,249,250,251,252,270,272,273,358,360,363,364,389,390,391,454,457,458,460,461],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:48","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Character.java.lang.Class<java.lang.Character>, java.lang.Character.java.lang.Character.valueOf(((char)(0))))","type":"CtInvocationImpl"},"failures":[421,448],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[109,110,111,112,113],"status":-1,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[505,506,226],"status":-1,"binaryOperator":"java.lang.String == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:213","failures":[109,113],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"failures":[507],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:373","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[347,440],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[122,123,124,125,126,127,128,129,130,131,36,37,132,133,38,134,135,136,137,138,39,40,139,140,141,41,142,143,42,43,144,44,145,45,46,47,48,49,146,50,51,52,53,147,54,55,56,57,58,59,60,148,149,150,151,152,153,154,0,1,121,155,2,156,3,4,32,5,157,158,159,160,33,161,11,162,163,6,164,165,166,167,7,168,34,169,170,171,172,173,174,175,176,177,178,8,179,9,180,181,182,183,184,185,186,10,187,188,189,190,191,192,15,193,16,17,18,19,20,21,194,195,196,197,198,12,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,61,220,62,63,221,64,65,66,67,222,68,223,224,69,70,225,71,72,73,22,74,13,75,76,226,77,227,78,79,80,81,82,83,84,85,86,228,87,229,23,88,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,24,25,26,27,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,89,28,90,91,92,29,285,93,94,95,96,97,98,286,99,287,288,100,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,101,102,103,104,105,106,107,108,109,110,111,112,113,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,114,341,342,343,344,345,346,14,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,115,395,396,397,398,116,399,400,401,402,403,404,405,406,407,408,409,410,411,117,118,119,120,412,413,414,415,416,417,418,419,30,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,31,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[2,5,6,7],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":1,"org.easymock.tests2.UsageTest.argumentsOrdered":203,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":357,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":216,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":262,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":433,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":12,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":133,"org.easymock.tests2.DelegateToTest.testReturnException":17,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":465,"org.easymock.tests.MockingTest.testPartialClassMocking":97,"org.easymock.tests.MockClassControlTest.testToString":103,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":248,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":323,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":442,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":84,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":146,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":46,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":366,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":235,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":32,"org.easymock.tests2.UsageTest.wrongArguments":197,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":352,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":247,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":279,"org.easymock.samples.ExampleTest.answerVsDelegate":125,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":116,"org.easymock.tests2.UsageConstraintsTest.testNull":2,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":288,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":74,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":108,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":215,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":500,"org.easymock.tests2.CaptureTest.testPrimitive":180,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":356,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":385,"org.easymock.tests.UsageTest.moreThanOneArgument":358,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":22,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":477,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":470,"org.easymock.tests.UsageTest.argumentsOrdered":364,"org.easymock.tests.UsageVarargTest.varargIntAccepted":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":438,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":419,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":61,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":140,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":266,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":66,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":425,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":422,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":241,"org.easymock.tests.ReplayStateInvalidUsageTest.times":348,"org.easymock.tests2.DependencyTest.testClassMocking":232,"org.easymock.tests2.AnswerTest.answer":169,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":5,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":440,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":178,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":396,"org.easymock.tests2.CaptureTest.testAnd":8,"org.easymock.tests2.UsageTest.strictResetToDefault":195,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":79,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":221,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":476,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":210,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":320,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":474,"org.easymock.tests2.DelegateToTest.testDelegate":21,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":381,"org.easymock.tests.LimitationsTest.mockFinalMethod":120,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":468,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":450,"org.easymock.tests2.DependencyTest.testClassMockingSupport":233,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":309,"org.easymock.tests2.CaptureTest.testCapture1_2446744":181,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":226,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":379,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":176,"org.easymock.tests.UsageThrowableTest.throwError":404,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":343,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":398,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":267,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":339,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":479,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":494,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":149,"org.easymock.samples.PartialClassMockTest.testGetArea":38,"org.easymock.tests.MockingTest.testInterfaceMocking":286,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":344,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":30,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":50,"org.easymock.tests2.UsageTest.niceToStrict":198,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":317,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":367,"org.easymock.tests2.ThreadingTest.testChangeDefault":505,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":489,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":423,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":65,"org.easymock.tests2.MockBuilderTest.testCreateMock":69,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":57,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":244,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":375,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":211,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":395,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":453,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":480,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":277,"org.easymock.tests.UsageOverloadedMethodTest.overloading":387,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":147,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":59,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":415,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":33,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":386,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":300,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":160,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":186,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":328,"org.easymock.tests.MockClassControlTest.testEquals":107,"org.easymock.tests2.EasyMockSupportClassTest.testAll":44,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":111,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":383,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":501,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":449,"org.easymock.tests2.CaptureTest.testCaptureAll":179,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":177,"org.easymock.tests.MockNameTest.defaultName":281,"org.easymock.tests2.UsageConstraintsTest.testMatches":161,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":478,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":341,"org.easymock.samples.ExampleTest.voteForRemovals":129,"org.easymock.tests.UsageVarargTest.allKinds":336,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":389,"org.easymock.samples.BasicClassMockTest.testPrintContent":37,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":31,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":410,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":268,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":469,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":20,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":263,"org.easymock.tests2.UsageConstraintsTest.greaterThan":162,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":285,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":145,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":319,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":82,"org.easymock.samples.ExampleTest.voteForRemoval":126,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":93,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":191,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":83,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":499,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":399,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":141,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":76,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":114,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":194,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":224,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":430,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":208,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":406,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":43,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":464,"org.easymock.tests2.CaptureTest.testCaptureFirst":189,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":16,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":429,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":209,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":205,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":418,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":296,"org.easymock.tests2.CaptureTest.testCapture2_2446744":188,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":15,"org.easymock.tests2.UsageTest.moreThanOneArgument":196,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":441,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":70,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":335,"org.easymock.tests.GenericTest.testBridgedEquals":113,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":487,"org.easymock.tests.UsageExpectAndReturnTest.longType":292,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":447,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":206,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":384,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":166,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":340,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":382,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":475,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":402,"org.easymock.tests.UsageCallCountTest.tooManyCalls":488,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":482,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":58,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":297,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":246,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":371,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":409,"org.easymock.tests.MockingTest.testNiceClassMocking":100,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":86,"org.easymock.tests.MockingTest.testClassMocking":95,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":481,"org.easymock.tests2.UsageConstraintsTest.testContains":159,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":26,"org.easymock.tests2.UsageConstraintsTest.testFind":155,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":388,"org.easymock.tests.MockTypeTest.fromEasyMockClass":397,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":455,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":152,"org.easymock.tests.UsageExpectAndReturnTest.object":299,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":77,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":245,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":497,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":214,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":330,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":315,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":507,"org.easymock.tests.UsageTest.exactCallCountByLastCall":365,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":282,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":428,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":471,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":322,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":254,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":305,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":325,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":414,"org.easymock.tests.MockClassControlTest.testHashCode":106,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":257,"org.easymock.tests2.EasyMockSupportTest.testVerify":218,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":52,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":472,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":452,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":412,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":175,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":219,"org.easymock.tests.UsageVarargTest.varargCharAccepted":329,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":284,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":269,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":446,"org.easymock.tests2.UsageTest.openCallCountByLastCall":199,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":490,"org.easymock.tests.DefaultClassInstantiatorTest.object":89,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":217,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":451,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":53,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":373,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":504,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":407,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":239,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":256,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":105,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":80,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":372,"org.easymock.tests.CapturesMatcherTest.test":492,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":306,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":401,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":60,"org.easymock.tests2.UsageTest.resumeIfFailure":204,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":115,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":139,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":467,"org.easymock.tests2.StubTest.stubWithReturnValue":276,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":222,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":167,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":298,"org.easymock.tests2.SerializationTest.testAllMockedMethod":39,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":439,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":496,"org.easymock.samples.SupportTest.voteForRemovals":135,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":109,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":259,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":378,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":445,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":170,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":324,"org.easymock.tests.UsageExpectAndThrowTest.object":376,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":164,"org.easymock.tests2.DelegateToTest.testWrongClass":19,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":337,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":338,"org.easymock.tests.UsageStrictMockTest.range":460,"org.easymock.samples.ConstructorCalledMockTest.testTax":122,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":142,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":213,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":85,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":377,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":67,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":42,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":350,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":363,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":278,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":394,"org.easymock.tests2.CaptureTest.testCaptureNone":185,"org.easymock.tests.UsageUnorderedTest.message":454,"org.easymock.tests.UsageVerifyTest.twoReturns":391,"org.easymock.tests.UsageVarargTest.varargByteAccepted":334,"org.easymock.tests2.ThreadingTest.testThreadSafe":190,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":55,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":485,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":36,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":316,"org.easymock.tests2.CaptureTest.testCapture_2617107":9,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":311,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":443,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":355,"org.easymock.tests2.UsageConstraintsTest.any":157,"org.easymock.tests2.StubTest.stub":275,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":347,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":403,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":466,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":444,"org.easymock.tests.UsageExpectAndThrowTest.longType":369,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":92,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":14,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":271,"org.easymock.tests2.SerializationTest.testClass":137,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":261,"org.easymock.tests.LimitationsTest.mockNativeMethod":119,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":112,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":308,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":503,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":238,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":274,"org.easymock.tests2.NameTest.nameForMocksControl":252,"org.easymock.tests2.MockedExceptionTest.testMockedException":25,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":45,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":362,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":151,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":99,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":370,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":72,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":68,"org.easymock.tests.MockingTest.testNicePartialClassMocking":98,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":75,"org.easymock.tests2.CaptureTest.testCaptureLast":184,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":236,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":310,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":4,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":230,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":165,"org.easymock.tests.MockingTest.testTwoMocks":96,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":231,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":289,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":374,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":202,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":168,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":506,"org.easymock.samples.ExampleTest.removeNonExistingDocument":130,"org.easymock.tests.UsageStrictMockTest.differentMethods":461,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":243,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":345,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":258,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":90,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":192,"org.easymock.tests2.MockBuilderTest.testCreateMockString":71,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":101,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":47,"org.easymock.tests.UsageExpectAndThrowTest.floatType":368,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":11,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":144,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":172,"org.easymock.tests.UsageVerifyTest.twoThrows":390,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":255,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":413,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":54,"org.easymock.samples.ExampleTest.voteAgainstRemoval":127,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":434,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":392,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":81,"org.easymock.tests.LimitationsTest.privateConstructor":118,"org.easymock.tests2.UsageConstraintsTest.testNotNull":7,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":411,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":24,"org.easymock.tests2.UsageTest.defaultResetToNice":201,"org.easymock.samples.ExampleTest.voteAgainstRemovals":124,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":435,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":304,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":237,"org.easymock.tests.UsageVarargTest.differentLength":331,"org.easymock.tests2.CallbackTest.callback":136,"org.easymock.tests2.UsageConstraintsTest.equals":121,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":227,"org.easymock.tests.UsageTest.openCallCountByLastCall":361,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":153,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":354,"org.easymock.tests.UsageCallCountTest.tooFewCalls":483,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":87,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":280,"org.easymock.tests.UsageThrowableTest.throwCheckedException":408,"org.easymock.tests.MockingTest.testStrictClassMocking":94,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":88,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":283,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":228,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":242,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":349,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":23,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":174,"org.easymock.tests2.CompareToTest.testGreateOrEqual":35,"org.easymock.tests.ObjectMethodsTest.testHashCode":314,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":193,"org.easymock.tests2.NameTest.nameForNiceMock":251,"org.easymock.tests2.DependencyTest.testInterfaceMocking":234,"org.easymock.samples.ExampleTest.addDocument":128,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":148,"org.easymock.tests2.DelegateToTest.testStubDelegate":18,"org.easymock.tests2.AnswerTest.stubAnswer":173,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":458,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":223,"org.easymock.tests.UsageVarargTest.varargLongAccepted":333,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":462,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":432,"org.easymock.tests.UsageExpectAndReturnTest.floatType":291,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":307,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":253,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":123,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":416,"org.easymock.tests.UsageThrowableTest.noUpperLimit":405,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":163,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":265,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":154,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":40,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":182,"org.easymock.tests2.SerializationTest.test":138,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":28,"org.easymock.tests2.UsageConstraintsTest.testSame":156,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":290,"org.easymock.samples.SupportTest.addDocument":134,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":229,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":346,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":48,"org.easymock.tests.GenericTest.testPackageScope":110,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":473,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":427,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":264,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":287,"org.easymock.tests2.NameTest.nameForMock":249,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":301,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":225,"org.easymock.tests2.UsageStrictMockTest.differentMethods":273,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":78,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":293,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":380,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":312,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":321,"org.easymock.tests2.MockedExceptionTest.testRealException":27,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":400,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":437,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":143,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":495,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":436,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":270,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":351,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":353,"org.easymock.tests2.NameTest.nameForStrictMock":250,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":64,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":491,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":150,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":13,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":41,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":6,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":91,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":62,"org.easymock.tests2.UsageStrictMockTest.range":272,"org.easymock.tests2.UsageConstraintsTest.lessThan":34,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":260,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":498,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":431,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":207,"org.easymock.tests2.CaptureTest.testCaptureRightOne":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":51,"org.easymock.tests2.UsageConstraintsTest.testOr":3,"org.easymock.tests.UsageRangeTest.combination":318,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":73,"org.easymock.tests.UsageTest.wrongArguments":360,"org.easymock.tests2.MockBuilderTest.testWithConstructor":220,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":49,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":102,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":294,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":424,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":302,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":29,"org.easymock.tests.UsageVarargTest.varargShortAccepted":332,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":486,"org.easymock.tests2.UsageConstraintsTest.cmpTo":158,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":171,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":426,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":200,"org.easymock.tests2.CaptureTest.testCaptureFromStub":187,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":342,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":63,"org.easymock.tests.UsageTest.unexpectedCallWithArray":359,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":457,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":484,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":493,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":303,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":459,"org.easymock.tests2.UsageConstraintsTest.constraints":0,"org.easymock.samples.ExampleTest.addAndChangeDocument":131,"org.easymock.tests.UsageStrictMockTest.testVerify":463,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":132,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":456,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":448,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":183,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":502,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":420,"org.easymock.tests.LimitationsTest.abstractClass":117,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":295,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":421,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":417,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":212,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":326}}]

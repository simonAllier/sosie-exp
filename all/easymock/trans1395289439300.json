[{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[0,1,2,3],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"failures":[4,5,6,7,8,9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:37","sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","type":"CtInvocationImpl"},"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1333","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[27,28,29,30,31,32,33,34,0],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[35],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[0,1,2,3],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:281","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[36,37],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:47","sourceCode":"this.T = T","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[38,39,40,41,42,43,44,45,46,47,48,49,50,51],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Any:36","sourceCode":"return true","type":"CtReturnImpl"},"failures":[52,53,39,45,54,50,55,56,57,58,59,60,61,62,63,64,65,66,67,9,68,69,70,71],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[72],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:33","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>.getName(), java.lang.Boolean.java.lang.Class<java.lang.Boolean>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[27,73,74,75,76,77,28,78,79,80,81,82],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,52,109,110,53,111,112,113,114,115,116,117,118,72,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,38,39,40,41,42,43,44,45,54,46,47,48,49,50,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,14,15,163,164,165,166,167,16,17,168,169,170,171,172,173,174,175,176,177,178,179,180,181,80,182,183,184,81,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,55,208,209,210,211,0,1,2,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,4,235,236,237,238,239,5,240,241,242,243,244,245,6,7,246,247,248,249,250,251,8,252,253,254,255,256,257,258,259,260,261,262,21,22,23,263,264,24,25,265,266,267,268,269,270,271,56,57,58,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,51,51,296,59,60,61,62,63,297,298,299,300,64,65,66,67,9,301,302,303,304,68,305,306,307,308,309,310,311,312,313,314,315,69,70,316,317,26,71,318,319,320,321],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[322,175,323],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[36,37],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[324],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[324,325],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[105],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[94,95,139,140,142,143,144,146,326,147,150,327,328,157,158,329,330,180,182,331,198,332,333,334,335,336,337,338,339,2,340,341,342,343,266,344,36,345,346,347,37,348,280,281,325,349,350,351,352,353,354,355,356,357,358,296,359],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[360],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ExpectedInvocation:75","failures":[116,121,39,40,42,43,44,45,54,50],"status":-1,"binaryOperator":"(((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>)))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:106","failures":[83,84,84,85,85,94,95,99,130,361,131,362,132,133,134,135,136,137,363,138,139,140,142,143,144,145,146,147,148,149,150,158,180,181,80,182,184,81,364,365,366,367,198,199,200,201,0,2,342,248,249,250,368,369,266,280,281,370,350,296],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"failures":[84,84,85,85],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[87,100,101,172,202,203,205,255],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:191","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1688","sourceCode":"return null","type":"CtReturnImpl"},"failures":[295],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:124","failures":[83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,52,109,110,53,111,112,113,114,115,116,117,118,72,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,38,39,40,41,42,43,44,45,54,46,47,48,49,50,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,14,15,163,164,165,166,167,16,17,168,169,170,171,172,173,174,175,176,177,178,179,180,181,80,182,183,184,81,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,55,208,209,210,211,0,1,2,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,4,235,236,237,238,239,5,240,241,242,243,244,245,6,7,246,247,248,249,250,251,8,252,253,254,255,256,257,258,259,260,261,262,21,22,23,263,264,24,25,265,266,267,268,269,270,271,56,57,58,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,51,51,296,59,60,61,62,63,297,298,299,300,64,65,66,67,9,301,302,303,304,68,305,306,307,308,309,310,311,312,313,314,315,69,70,316,317,26,71,318,319,320,321],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:35","sourceCode":"new java.lang.ThreadLocal<org.easymock.internal.MocksControl>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:49","sourceCode":"org.easymock.internal.Injection.getAnnotation()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[249],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[361,363],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:62","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>()","type":"CtAssignmentImpl"},"failures":[100,101,102,103,104,105,106,107,108,52,109,110,371,53,111,112,113,114,115,116,117,118,72,119,120,121,122,123,124,125,38,39,40,41,42,43,44,45,54,46,47,48,49,50,146,154,372,55,56,57,58,295,59,60,61,62,63,64,65,66,67,9,68,69,70,26,71],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[14,55,210,211,373,374,21,306,307,308,71,320,321],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1940","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[10,12,18,19,22,26],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1940","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MockBuilder:80","failures":[83,130,361,131,362,132,133,134,135,136,137,363,138,145,0,368,369,370],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[152,153],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:40","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>.getName(), java.lang.Double.java.lang.Class<java.lang.Double>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.Capture:82","failures":[375,38,40,41,42,43,44,45,46,376,47,48,50],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:163","failures":[84,85,76,79,377],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) != null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":105,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":262,"org.easymock.tests2.UsageTest.argumentsOrdered":17,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":195,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":304,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":323,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":164,"org.easymock.tests2.StubTest.stubWithReturnValue":179,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":28,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":93,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":5,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":122,"org.easymock.tests2.SerializationTest.testAllMockedMethod":2,"org.easymock.tests2.DelegateToTest.testReturnException":174,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":302,"org.easymock.tests.MockingTest.testPartialClassMocking":248,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":12,"org.easymock.samples.SupportTest.voteForRemovals":98,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":324,"org.easymock.tests.MockClassControlTest.testToString":351,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":328,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":224,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":3,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":212,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":199,"org.easymock.tests.UsageExpectAndThrowTest.object":222,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":119,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":171,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":30,"org.easymock.tests2.DelegateToTest.testWrongClass":176,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":69,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":70,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":110,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":59,"org.easymock.tests2.UsageTest.wrongArguments":15,"org.easymock.tests.UsageStrictMockTest.range":319,"org.easymock.samples.ConstructorCalledMockTest.testTax":84,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":299,"org.easymock.samples.ExampleTest.answerVsDelegate":87,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":192,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":369,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":180,"org.easymock.tests2.UsageConstraintsTest.testNull":107,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":223,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":142,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":356,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":194,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":134,"org.easymock.tests2.CaptureTest.testPrimitive":41,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":331,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":231,"org.easymock.tests.UsageTest.moreThanOneArgument":21,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":24,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":298,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":141,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":252,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":18,"org.easymock.tests2.CaptureTest.testCaptureNone":54,"org.easymock.tests.UsageUnorderedTest.message":56,"org.easymock.tests.UsageVerifyTest.twoReturns":308,"org.easymock.tests.UsageVarargTest.varargByteAccepted":293,"org.easymock.tests2.ThreadingTest.testThreadSafe":151,"org.easymock.tests.UsageTest.argumentsOrdered":25,"org.easymock.tests.UsageVarargTest.varargIntAccepted":287,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":337,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":312,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":94,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":64,"org.easymock.tests2.CaptureTest.testCapture_2617107":40,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":13,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":34,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":130,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":374,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":62,"org.easymock.tests2.UsageConstraintsTest.any":53,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":133,"org.easymock.tests2.StubTest.stub":178,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":9,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":303,"org.easymock.tests.UsageExpectAndThrowTest.longType":215,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":347,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":208,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":160,"org.easymock.tests.LimitationsTest.mockNativeMethod":296,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":173,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":370,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":247,"org.easymock.tests2.AnswerTest.answer":202,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":371,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":129,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":366,"org.easymock.tests2.CaptureTest.testAnd":38,"org.easymock.tests2.UsageTest.strictResetToDefault":162,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":211,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":77,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":147,"org.easymock.tests2.MockedExceptionTest.testMockedException":157,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":8,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":332,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":260,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":189,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":264,"org.easymock.tests2.DelegateToTest.testDelegate":177,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":250,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":216,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":139,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":135,"org.easymock.tests.MockingTest.testNicePartialClassMocking":249,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":227,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":144,"org.easymock.tests.LimitationsTest.mockFinalMethod":359,"org.easymock.tests2.CaptureTest.testCaptureLast":45,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":68,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":81,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":109,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":271,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":120,"org.easymock.tests.MockingTest.testTwoMocks":342,"org.easymock.tests2.CaptureTest.testCapture1_2446744":42,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":82,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":232,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":225,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":220,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":127,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":16,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":124,"org.easymock.tests.UsageThrowableTest.throwError":272,"org.easymock.tests.UsageStrictMockTest.differentMethods":320,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":345,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":153,"org.easymock.tests2.MockBuilderTest.testCreateMockString":138,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":333,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":254,"org.easymock.tests.UsageExpectAndThrowTest.floatType":214,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":116,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":203,"org.easymock.tests.UsageVerifyTest.twoThrows":307,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":73,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":200,"org.easymock.samples.PartialClassMockTest.testGetArea":83,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":65,"org.easymock.samples.ExampleTest.voteAgainstRemoval":89,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":335,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":213,"org.easymock.tests2.UsageTest.niceToStrict":163,"org.easymock.tests.LimitationsTest.privateConstructor":358,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":74,"org.easymock.tests2.UsageConstraintsTest.testNotNull":123,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":279,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":156,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":360,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":132,"org.easymock.tests2.MockBuilderTest.testCreateMock":136,"org.easymock.tests2.UsageTest.defaultResetToNice":167,"org.easymock.samples.ExampleTest.voteAgainstRemovals":86,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":245,"org.easymock.tests.UsageVarargTest.differentLength":290,"org.easymock.tests2.CallbackTest.callback":172,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":377,"org.easymock.tests.UsageTest.openCallCountByLastCall":263,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":221,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":10,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":190,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":102,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":297,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":61,"org.easymock.tests.UsageCallCountTest.tooFewCalls":310,"org.easymock.tests.UsageOverloadedMethodTest.overloading":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":339,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":257,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":114,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":282,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":241,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":182,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":113,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":46,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":300,"org.easymock.tests.UsageThrowableTest.throwCheckedException":276,"org.easymock.tests.MockClassControlTest.testEquals":355,"org.easymock.tests2.EasyMockSupportClassTest.testAll":198,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":281,"org.easymock.tests.MockingTest.testStrictClassMocking":340,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":229,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":19,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":11,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":364,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":269,"org.easymock.tests2.CaptureTest.testCaptureAll":39,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":128,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":58,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":184,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":80,"org.easymock.tests2.UsageConstraintsTest.testMatches":115,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":183,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":205,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":253,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":35,"org.easymock.samples.ExampleTest.voteForRemovals":91,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":33,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":155,"org.easymock.tests.UsageVarargTest.allKinds":295,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":306,"org.easymock.tests2.DependencyTest.testInterfaceMocking":170,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":32,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":270,"org.easymock.samples.BasicClassMockTest.testPrintContent":95,"org.easymock.samples.ExampleTest.addDocument":90,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":338,"org.easymock.tests2.DelegateToTest.testStubDelegate":175,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":278,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":206,"org.easymock.tests2.AnswerTest.stubAnswer":204,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":305,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":71,"org.easymock.tests2.UsageConstraintsTest.greaterThan":117,"org.easymock.tests.UsageVarargTest.varargLongAccepted":292,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":150,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":321,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":348,"org.easymock.samples.ExampleTest.voteForRemoval":88,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":327,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":152,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":246,"org.easymock.tests.UsageExpectAndReturnTest.floatType":234,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":99,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":145,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":85,"org.easymock.tests.UsageThrowableTest.noUpperLimit":273,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":118,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":266,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":103,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":161,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":329,"org.easymock.tests2.SerializationTest.test":1,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":43,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":29,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":36,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":187,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":274,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":233,"org.easymock.tests2.UsageConstraintsTest.testSame":108,"org.easymock.samples.SupportTest.addDocument":97,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":301,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":322,"org.easymock.tests2.CaptureTest.testCaptureFirst":50,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":188,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":169,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":258,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":238,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":334,"org.easymock.tests.GenericTest.testPackageScope":280,"org.easymock.tests2.CaptureTest.testCapture2_2446744":49,"org.easymock.tests2.UsageTest.moreThanOneArgument":14,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":154,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":137,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":294,"org.easymock.tests.GenericTest.testBridgedEquals":325,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":314,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":75,"org.easymock.tests.UsageExpectAndReturnTest.longType":4,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":267,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":185,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":363,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":242,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":230,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":121,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":228,"org.easymock.tests2.UsageStrictMockTest.differentMethods":210,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":79,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":251,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":326,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":235,"org.easymock.tests.UsageCallCountTest.tooManyCalls":315,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":226,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":261,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":309,"org.easymock.tests2.MockedExceptionTest.testRealException":159,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":239,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":217,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":55,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":277,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":60,"org.easymock.tests.MockingTest.testNiceClassMocking":343,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":181,"org.easymock.tests.MockingTest.testClassMocking":341,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":361,"org.easymock.tests2.UsageConstraintsTest.testContains":112,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":158,"org.easymock.tests2.UsageConstraintsTest.testFind":106,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":284,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":100,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":143,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":316,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":101,"org.easymock.tests.UsageExpectAndReturnTest.object":240,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":330,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":346,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":72,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":146,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":131,"org.easymock.tests2.UsageStrictMockTest.range":209,"org.easymock.tests2.UsageConstraintsTest.lessThan":125,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":193,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":289,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":31,"org.easymock.tests.UsageTest.exactCallCountByLastCall":265,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":57,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":186,"org.easymock.tests2.CaptureTest.testCaptureRightOne":47,"org.easymock.tests2.UsageConstraintsTest.testOr":52,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":20,"org.easymock.tests.UsageRangeTest.combination":259,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":27,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":285,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":6,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":140,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":256,"org.easymock.tests.UsageTest.wrongArguments":23,"org.easymock.tests2.MockBuilderTest.testWithConstructor":76,"org.easymock.tests.MockClassControlTest.testHashCode":354,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":350,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":236,"org.easymock.tests2.EasyMockSupportTest.testVerify":197,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":243,"org.easymock.tests.UsageVarargTest.varargShortAccepted":291,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":255,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":37,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":313,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":126,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":372,"org.easymock.tests2.UsageConstraintsTest.cmpTo":111,"org.easymock.tests.UsageVarargTest.varargCharAccepted":288,"org.easymock.tests2.CaptureTest.testCaptureMultiple":375,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":207,"org.easymock.tests2.UsageTest.openCallCountByLastCall":165,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":166,"org.easymock.tests.DefaultClassInstantiatorTest.object":344,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":196,"org.easymock.tests2.CaptureTest.testCaptureFromStub":48,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":362,"org.easymock.tests.UsageTest.unexpectedCallWithArray":22,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":336,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":219,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":367,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":275,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":26,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":311,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":78,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":244,"org.easymock.tests2.CaptureTest.testCapture":376,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":353,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":318,"org.easymock.tests2.UsageConstraintsTest.constraints":104,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":148,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":218,"org.easymock.samples.ExampleTest.addAndChangeDocument":92,"org.easymock.tests.CapturesMatcherTest.test":51,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":7,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":96,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":352,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":317,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":201,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":268,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":44,"org.easymock.tests2.UsageTest.resumeIfFailure":168,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":365,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":66,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":368,"org.easymock.tests.LimitationsTest.abstractClass":357,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":237,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":373,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":67,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":286,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":191}}]

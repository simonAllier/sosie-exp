[{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[0,1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:124","failures":[3],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:138","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[4,5,6,7],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:125","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[8,9,10],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"finalizeMethod"}},{"position":"org.easymock.internal.Range:36","failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,4,5,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,3,74,75,8,9,10,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,6,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:120","sourceCode":"java.lang.StringBuilder.append(\"\\n  Unexpected method call \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[128,415,427,428,492],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:44","sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    synchronized(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) {\n        if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n            org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n        } \n    }\n} ","type":"CtIfImpl"},"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,493,494,495,496,497,498,4,5,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,3,74,75,8,9,10,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,184,185,187,188,189,190,191,192,193,194,195,197,198,199,200,201,202,203,204,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,499,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,430,431,432,433,434,435,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[11,12,13,14,15,16,18,19,20,21,22,23,24,27,4,29,30,32,33,34,38,39,41,48,51,61,67,72,8,9,10,76,77,78,79,80,81,82,84,85,86,87,88,90,92,94,98,101,104,105,106,107,108,110,113,116,117,118,119,120,121,124,125,126,127,128,129,130,132,133,134,135,136,139,142,143,144,145,147,148,149,150,151,152,155,156,160,166,173,174,175,176,178,179,180,184,188,190,191,195,200,201,209,210,211,212,213,214,217,222,231,241,242,243,246,260,261,266,269,270,271,272,273,274,275,277,280,281,282,284,291,292,324,325,327,332,337,354,355,356,357,358,359,360,361,372,373,375,380,385,401,404,405,406,408,409,410,411,412,413,414,415,416,417,418,419,421,422,424,427,428,449,465,466,467,469,470,471,472,473,474,475,476,478],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:355","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[316,462],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:68","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[113],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"argument"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[29,36,44,262,263,268,301,354,356,357,358,359,360,361,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,398,399,400,422,427,442],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"failures":[43,320],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[522,523,265,524,525,412],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"failures":[456],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"hashCodeMethod","equalsMethod":"hashCodeMethod"}},{"position":"org.easymock.internal.Range:36","failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,4,5,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,3,74,75,8,9,10,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,6,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[290,294],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:233","failures":[11,12,13,14,15,16,18,19,20,21,22,23,24,25,25,26,26,27,4,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,48,51,61,67,70,71,72,73,3,75,8,9,10,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,160,166,173,174,175,176,178,179,180,184,188,190,191,195,200,201,209,210,211,212,213,214,217,221,222,223,231,238,239,240,241,242,243,246,253,260,261,262,263,264,266,267,268,269,270,271,272,273,274,275,276,277,281,282,284,288,289,291,292,293,314,320,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,398,399,400,401,403,404,405,406,408,409,410,411,412,413,414,415,416,417,418,419,421,422,424,426,427,428,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,461,462,465,466,467,469,470,471,472,473,474,475,476,478],"status":-1,"binaryOperator":"(org.easymock.internal.ExpectedInvocation) == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[290,294],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[34,113,213,348],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:195","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","failures":[526,527,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,528,529,530,531,532,533,8,193],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:183","failures":[11,12,13,14,15,16,18,19,20,21,22,23,24,27,4,29,30,31,33,34,35,36,41,43,44,51,61,67,72,3,75,8,9,10,76,78,79,80,81,84,85,86,87,88,90,91,92,94,95,96,97,98,100,101,102,103,104,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,128,129,130,136,139,140,141,142,143,144,145,147,148,149,150,151,152,155,160,166,173,174,175,176,178,179,180,188,190,191,200,201,209,211,212,214,231,238,240,241,242,243,246,261,262,263,264,267,268,271,272,273,274,275,276,277,281,282,284,288,289,292,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,354,355,356,357,358,359,360,361,367,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,403,404,405,406,408,409,411,413,414,415,416,417,426,427,428,444,445,446,447,448,449,451,452,465,466,467,469,470,472,473,474,475,476],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[522,523,265,524,525,412],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.Capture:82","failures":[142,144,145,146,147,148,149,151,534,152,153,155],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[25,26,4,5,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,535,536,8,175,180,181,183,186,6,193,537,196],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:198","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:122","sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:117","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[142,144,145,146,147,148,149,151,534,152,153,155],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1039","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMockSupport:480","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2123","sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[128,415,427,428,492],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:88","sourceCode":"if (org.easymock.internal.Result != null) {\n    return org.easymock.internal.Result;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocationAndResult:41","sourceCode":"return org.easymock.internal.Result","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.EasyMock:1421","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[31,126,128,129,264,277,413,415,416,426,427,428,538,539,540,492],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[290],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:93","failures":[22,23,24,25,25,26,26,4,541,542,543,48,51,61,67,72,8,10,173,174,175,176,179,180,182,544,184,185,188,189,190,191,194,195,545,197,209,210,212,213,214,215,217,220,221,222,223,243,246,280,281,282,284,291,292,293,390,395,484],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ErrorMessage:51","failures":[128,415,427,428,492],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"math","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.InstanceOf:40","sourceCode":"java.lang.StringBuffer.append(((\"isA(\" + (java.lang.Class<?>.getName())) + \")\"))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:46","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"invocation":"invocation","this":"this"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[105,111,123,546],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[224,240],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"position":"org.easymock.internal.LastControl:92","failures":[97,98,103,104,106,116,142,144,152],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":98,"org.easymock.tests2.UsageTest.argumentsOrdered":39,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":263,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":86,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":167,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":308,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":34,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":21,"org.easymock.tests2.DelegateToTest.testReturnException":90,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":439,"org.easymock.tests.MockingTest.testPartialClassMocking":281,"org.easymock.tests.MockClassControlTest.testToString":485,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":131,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":253,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":225,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":317,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":55,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":51,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":370,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":538,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":201,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":521,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":105,"org.easymock.tests2.UsageTest.wrongArguments":32,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":272,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":237,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":250,"org.easymock.samples.ExampleTest.answerVsDelegate":12,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":395,"org.easymock.tests2.UsageConstraintsTest.testNull":101,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":286,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":212,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":490,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":85,"org.easymock.tests2.CaptureTest.testPrimitive":145,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":276,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":389,"org.easymock.tests.UsageTest.moreThanOneArgument":264,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":211,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":364,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":460,"org.easymock.tests.UsageTest.argumentsOrdered":270,"org.easymock.tests.UsageVarargTest.varargIntAccepted":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":313,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":444,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":182,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":2,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":171,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":204,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":189,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":300,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":448,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":505,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":231,"org.easymock.tests.ReplayStateInvalidUsageTest.times":350,"org.easymock.tests2.DependencyTest.testClassMocking":198,"org.easymock.tests2.AnswerTest.answer":136,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":106,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":315,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":159,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":392,"org.easymock.tests2.CaptureTest.testAnd":142,"org.easymock.tests2.UsageTest.strictResetToDefault":30,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":186,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":220,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":363,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":451,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":80,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":464,"org.easymock.tests2.DelegateToTest.testDelegate":94,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":504,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":385,"org.easymock.tests.LimitationsTest.mockFinalMethod":247,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":442,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":259,"org.easymock.tests2.DependencyTest.testClassMockingSupport":199,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":295,"org.easymock.tests2.CaptureTest.testCapture1_2446744":146,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":216,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":383,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":157,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":344,"org.easymock.tests.UsageThrowableTest.throwError":354,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":394,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":491,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":172,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":366,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":535,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":69,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":508,"org.easymock.samples.PartialClassMockTest.testGetArea":24,"org.easymock.tests.MockingTest.testInterfaceMocking":283,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":345,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":445,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":457,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":482,"org.easymock.tests2.UsageTest.niceToStrict":33,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":56,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":371,"org.easymock.tests2.ThreadingTest.testChangeDefault":499,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":533,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":298,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":188,"org.easymock.tests2.MockBuilderTest.testCreateMock":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":64,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":234,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":522,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":379,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":81,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":391,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":400,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":401,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":248,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":530,"org.easymock.tests.UsageOverloadedMethodTest.overloading":261,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":66,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":422,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":111,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":260,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":333,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":110,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":151,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":468,"org.easymock.tests.MockClassControlTest.testEquals":489,"org.easymock.tests2.EasyMockSupportClassTest.testAll":48,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":292,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":387,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":541,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":158,"org.easymock.tests2.CaptureTest.testCaptureAll":143,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":257,"org.easymock.tests.MockNameTest.defaultName":369,"org.easymock.tests2.UsageConstraintsTest.testMatches":112,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":342,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":365,"org.easymock.samples.ExampleTest.voteForRemovals":16,"org.easymock.tests.UsageVarargTest.allKinds":476,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":426,"org.easymock.samples.BasicClassMockTest.testPrintContent":23,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":258,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":360,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":124,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":443,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":168,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":93,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":436,"org.easymock.tests2.UsageConstraintsTest.greaterThan":114,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":49,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":450,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":223,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":509,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":437,"org.easymock.samples.ExampleTest.voteForRemoval":13,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":224,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":239,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":396,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":205,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":215,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":501,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":29,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":243,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":193,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":305,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":78,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":356,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":46,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":438,"org.easymock.tests2.CaptureTest.testCaptureFirst":155,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":89,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":304,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":79,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":41,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":425,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":329,"org.easymock.tests2.CaptureTest.testCapture2_2446744":154,"org.easymock.tests2.UsageTest.moreThanOneArgument":31,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":241,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":195,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":316,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":475,"org.easymock.tests.GenericTest.testBridgedEquals":294,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":531,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":528,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":408,"org.easymock.tests.UsageExpectAndReturnTest.longType":325,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":76,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":255,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":545,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":388,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":459,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":119,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":386,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":454,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":362,"org.easymock.tests.UsageCallCountTest.tooManyCalls":409,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":403,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":65,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":330,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":236,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":375,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":359,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":174,"org.easymock.tests.MockingTest.testNiceClassMocking":287,"org.easymock.tests.MockingTest.testClassMocking":279,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":544,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":402,"org.easymock.tests2.UsageConstraintsTest.testContains":109,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":72,"org.easymock.tests2.UsageConstraintsTest.testFind":100,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":262,"org.easymock.tests.MockTypeTest.fromEasyMockClass":393,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":410,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":75,"org.easymock.tests.UsageExpectAndReturnTest.object":332,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":217,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":235,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":84,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":470,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":480,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":532,"org.easymock.tests.UsageTest.exactCallCountByLastCall":271,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":367,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":303,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":461,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":252,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":5,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":465,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":338,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":421,"org.easymock.tests.MockClassControlTest.testHashCode":488,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":162,"org.easymock.tests2.EasyMockSupportTest.testVerify":88,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":58,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":462,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":419,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":399,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":156,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":42,"org.easymock.tests.UsageVarargTest.varargCharAccepted":469,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":429,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":125,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":321,"org.easymock.tests2.UsageTest.openCallCountByLastCall":35,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":526,"org.easymock.tests.DefaultClassInstantiatorTest.object":430,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":87,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":398,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":478,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":59,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":377,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":357,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":229,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":161,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":507,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":487,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":221,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":376,"org.easymock.tests.ReplayStateInvalidCallsTest.times":513,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":339,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":453,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":514,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":486,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":67,"org.easymock.tests2.UsageTest.resumeIfFailure":40,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":390,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":203,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":441,"org.easymock.tests2.StubTest.stubWithReturnValue":44,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":6,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":120,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":331,"org.easymock.tests2.SerializationTest.testAllMockedMethod":10,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":314,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":523,"org.easymock.samples.SupportTest.voteForRemovals":20,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":290,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":164,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":382,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":320,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":137,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":254,"org.easymock.tests.UsageExpectAndThrowTest.object":380,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":117,"org.easymock.tests2.DelegateToTest.testWrongClass":92,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":511,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":288,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":289,"org.easymock.tests.UsageStrictMockTest.range":415,"org.easymock.samples.ConstructorCalledMockTest.testTax":25,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":207,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":83,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":173,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":529,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":381,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":190,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":45,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":269,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":352,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":249,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":524,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":503,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":458,"org.easymock.tests2.CaptureTest.testCaptureNone":150,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":494,"org.easymock.tests.UsageUnorderedTest.message":277,"org.easymock.tests.UsageVerifyTest.twoReturns":428,"org.easymock.tests.UsageVarargTest.varargByteAccepted":474,"org.easymock.tests2.ThreadingTest.testThreadSafe":238,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":62,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":406,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":481,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":22,"org.easymock.tests2.CaptureTest.testCapture_2617107":144,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":297,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":318,"org.easymock.tests2.UsageConstraintsTest.any":107,"org.easymock.tests2.StubTest.stub":43,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":349,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":455,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":440,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":319,"org.easymock.tests.UsageExpectAndThrowTest.longType":373,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":434,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":348,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":127,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":166,"org.easymock.tests2.SerializationTest.testClass":8,"org.easymock.tests.LimitationsTest.mockNativeMethod":246,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":293,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":341,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":543,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":228,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":519,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":130,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":495,"org.easymock.tests2.NameTest.nameForMocksControl":135,"org.easymock.tests2.MockedExceptionTest.testMockedException":71,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":230,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":50,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":268,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":74,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":284,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":374,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":209,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":191,"org.easymock.tests.MockingTest.testNicePartialClassMocking":282,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":214,"org.easymock.tests2.CaptureTest.testCaptureLast":149,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":0,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":226,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":296,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":518,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":180,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":104,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":118,"org.easymock.tests.MockingTest.testTwoMocks":280,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":515,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":181,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":322,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":378,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":38,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":122,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":498,"org.easymock.samples.ExampleTest.removeNonExistingDocument":17,"org.easymock.tests.UsageStrictMockTest.differentMethods":416,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":233,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":346,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":163,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":497,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":432,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":240,"org.easymock.tests2.MockBuilderTest.testCreateMockString":197,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":483,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":52,"org.easymock.tests.UsageExpectAndThrowTest.floatType":372,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":47,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":139,"org.easymock.tests.UsageVerifyTest.twoThrows":427,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":28,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":420,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":61,"org.easymock.samples.ExampleTest.voteAgainstRemoval":14,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":456,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":309,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":222,"org.easymock.tests.LimitationsTest.privateConstructor":245,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":536,"org.easymock.tests2.UsageConstraintsTest.testNotNull":121,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":70,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":361,"org.easymock.tests2.UsageTest.defaultResetToNice":37,"org.easymock.samples.ExampleTest.voteAgainstRemovals":11,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":310,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":337,"org.easymock.tests.UsageVarargTest.differentLength":471,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":227,"org.easymock.tests2.CallbackTest.callback":160,"org.easymock.tests2.UsageConstraintsTest.equals":99,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":218,"org.easymock.tests.UsageTest.openCallCountByLastCall":267,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":95,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":274,"org.easymock.tests.UsageCallCountTest.tooFewCalls":404,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":176,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":251,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":496,"org.easymock.tests.UsageThrowableTest.throwCheckedException":358,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":525,"org.easymock.tests.MockingTest.testStrictClassMocking":278,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":179,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":368,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":175,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":232,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":351,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":178,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":141,"org.easymock.tests2.CompareToTest.testGreateOrEqual":546,"org.easymock.tests.ObjectMethodsTest.testHashCode":479,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":1,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":517,"org.easymock.tests2.NameTest.nameForNiceMock":134,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":242,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":512,"org.easymock.tests2.DependencyTest.testInterfaceMocking":200,"org.easymock.samples.ExampleTest.addDocument":15,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":68,"org.easymock.tests2.DelegateToTest.testStubDelegate":91,"org.easymock.tests2.AnswerTest.stubAnswer":140,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":413,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":192,"org.easymock.tests.UsageVarargTest.varargLongAccepted":473,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":417,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":307,"org.easymock.tests.UsageExpectAndReturnTest.floatType":324,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":340,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":4,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":26,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":423,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":170,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":115,"org.easymock.tests.UsageThrowableTest.noUpperLimit":355,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":96,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":202,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":147,"org.easymock.tests2.SerializationTest.test":9,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":431,"org.easymock.tests2.UsageConstraintsTest.testSame":102,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":323,"org.easymock.samples.SupportTest.addDocument":19,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":177,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":502,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":347,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":53,"org.easymock.tests.GenericTest.testPackageScope":291,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":463,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":302,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":169,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":285,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":500,"org.easymock.tests2.NameTest.nameForMock":132,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":334,"org.easymock.tests2.UsageStrictMockTest.differentMethods":129,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":196,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":219,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":326,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":384,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":477,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":452,"org.easymock.tests2.MockedExceptionTest.testRealException":73,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":397,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":208,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":312,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":7,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":126,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":311,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":273,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":353,"org.easymock.tests2.NameTest.nameForStrictMock":133,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":187,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":527,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":3,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":213,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":206,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":539,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":433,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":116,"org.easymock.tests.ErrorMessageTest.testGetters":540,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":184,"org.easymock.tests2.UsageStrictMockTest.range":128,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":506,"org.easymock.tests2.UsageConstraintsTest.lessThan":123,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":165,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":77,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":306,"org.easymock.tests2.CaptureTest.testCaptureRightOne":152,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":57,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":493,"org.easymock.tests2.UsageConstraintsTest.testOr":103,"org.easymock.tests.UsageRangeTest.combination":449,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":210,"org.easymock.tests.UsageTest.wrongArguments":266,"org.easymock.tests2.MockBuilderTest.testWithConstructor":183,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":54,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":484,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":299,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":335,"org.easymock.tests.UsageVarargTest.varargShortAccepted":472,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":435,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":407,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":520,"org.easymock.tests2.UsageConstraintsTest.cmpTo":108,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":138,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":510,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":301,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":36,"org.easymock.tests2.CaptureTest.testCaptureFromStub":153,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":343,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":185,"org.easymock.tests.UsageTest.unexpectedCallWithArray":265,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":516,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":412,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":405,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":537,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":336,"org.easymock.tests2.CaptureTest.testCapture":534,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":414,"org.easymock.tests2.UsageConstraintsTest.constraints":97,"org.easymock.samples.ExampleTest.addAndChangeDocument":18,"org.easymock.tests.UsageStrictMockTest.testVerify":418,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":27,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":411,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":256,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":148,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":542,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":446,"org.easymock.tests.LimitationsTest.abstractClass":244,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":328,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":447,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":424,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":492,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":466,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":82}}]

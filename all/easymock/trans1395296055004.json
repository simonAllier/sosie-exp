[{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:47","sourceCode":"if (int > 0) {\n    java.lang.StringBuffer.append(\", \");\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:181","sourceCode":"return false","type":"CtReturnImpl"},"failures":[5,6,7,8,9,10,11,12,13,14],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[15],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[16,17,18,19,20,21,22,23,2,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[38,39,40,41,42,43,44,45,46,47,48],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:86","sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[49,50,51,52,53,54,16,55,17,56,57,18,19,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,20,110,111,112,113,114,21,22,23,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,2,24,164,25,26,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,189,190,190,191,192,193,27,28,194,195,196,197,198,29,30,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,38,39,225,40,226,41,42,227,43,228,229,230,231,232,233,234,235,236,44,237,238,239,240,45,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,13,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,35,292,36,37,293,294,295,296,297,298,299,300,301,302,46,303,47,304,305,306,307,308,309,310,48,311,312,313],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:72","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[314,315,316,317],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[49,50,51,52,53,54,16,55,17,56,57,18,19,58,318,59,319,320,321,322,323,324,325,326,327,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,328,329,330,331,332,333,334,335,336,337,338,86,87,339,340,88,341,342,343,344,345,346,347,89,90,348,349,350,91,92,351,93,352,353,354,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,355,20,110,111,112,113,114,21,22,23,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,356,148,357,149,358,150,151,152,153,154,155,359,360,156,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,157,399,400,401,402,403,158,404,159,160,161,162,405,406,407,408,409,410,163,411,2,24,164,25,26,165,412,166,167,168,169,170,171,172,173,174,175,176,413,414,415,416,417,418,419,420,421,177,178,179,180,181,422,182,423,183,184,185,186,424,187,425,188,189,190,426,427,428,191,192,193,27,28,194,195,196,197,198,29,30,199,200,201,429,202,430,431,432,203,204,205,5,206,433,434,435,207,436,208,437,438,209,210,211,212,213,214,215,216,217,439,218,440,441,219,220,221,222,442,443,223,224,38,39,444,225,40,226,41,42,227,43,228,229,230,231,232,233,234,235,236,44,237,238,239,240,45,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,445,258,259,260,261,262,263,264,446,447,448,449,450,265,451,452,453,454,455,456,266,267,268,269,270,271,13,272,457,273,14,458,274,275,276,277,278,279,280,281,282,283,284,285,459,460,31,32,33,34,461,462,463,464,465,466,467,468,469,470,286,471,472,287,473,474,475,476,477,478,479,480,481,288,482,483,484,485,486,289,487,488,489,490,491,492,493,290,494,495,496,497,498,499,291,500,35,292,36,37,293,294,295,501,296,297,298,299,502,300,301,302,503,46,303,47,304,305,306,307,308,309,310,48,311,312,313],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"failures":[100,385,184,267,269,270,271],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:633","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1976","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"candidateMethod"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[38,39,40,41,42,43,44,45,46,47,48],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:278","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:50","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[389,244,247,248],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[503],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[5,7,8,9,10,11,14],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1964","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:142","failures":[358],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[504,13,272,457],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"failures":[177],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:53","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[49,50,51,52,53,54,16,55,17,56,57,18,19,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,328,329,330,332,333,334,335,336,337,338,86,87,339,88,341,342,343,344,345,346,89,90,350,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,20,110,111,112,113,114,21,22,23,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,150,151,152,153,154,155,157,158,159,160,161,162,163,411,2,24,164,25,26,165,412,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,422,423,183,184,185,186,424,187,188,428,191,192,193,27,28,194,195,196,197,198,29,30,199,200,209,210,213,223,224,38,39,225,40,226,41,42,227,43,228,229,230,231,232,233,234,235,236,44,237,238,239,240,45,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,13,272,274,275,276,277,278,279,280,281,282,283,284,285,459,31,32,33,34,290,291,500,35,292,36,37,293,294,295,300,46,303,47,304,305,306,307,308,309,310,48,311,312,313],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:157","failures":[505],"status":-1,"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","type":"mutation"},{"position":"org.easymock.internal.ClassProxyFactory:168","failures":[87,348,349,350,91,92,93,354,356,148,357,358,359,360,156,361,375,376,377,378,379,380,382,414,415,416,417,418,419,420,421,182,189,190,426,427,211,212,214,215,216,217,218,441,219,220,221,222,442,443,253,254,255,457,461,465,468,286,472,473,474,477,480,482,483,486,296,297,298,299,301,302],"status":-1,"binaryOperator":"java.lang.reflect.Method[] != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:65","sourceCode":"throw java.lang.Throwable","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"failures":[101,256],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"failures":[86,89,90,20,110,111,112,113,114,154,2,24,166,167,177,178,179,180,181,218,223,224,38,39,225,40,226,41,42,227,43,228,229,230,231,232,233,234,235,236,44,237,238,239,240,45,241,242,257,258,35,501,46,303,47,304,305,306,307,308,309,310,48,311,312,313],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[376,380],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:140","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[49,50,51,52,53,89,110,111,114,24,166,167,177,178,179,180,181,189,189,190,190,223,224,225,40,226,41,230,232,233,235,236,44,45,241,242,35,311],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"position":"org.easymock.internal.matchers.EndsWith:40","failures":[506],"status":-1,"binaryOperator":"(\"endsWith(\\\"\" + (java.lang.String))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[223,235,240,507],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:65","sourceCode":"throw java.lang.Throwable","type":"CtThrowImpl"},"failures":[98,100,243,267,269],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:259","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:95","sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[38,39,40,41,42,43,44,45,46,47,48],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:78","sourceCode":"org.easymock.internal.ExpectedInvocation = new org.easymock.internal.ExpectedInvocation(org.easymock.internal.Invocation , java.util.List<org.easymock.IArgumentMatcher>)","type":"CtAssignmentImpl"},"failures":[49,50,51,52,53,54,16,17,56,57,18,19,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,328,329,330,332,333,334,335,336,337,338,86,87,339,88,341,342,343,345,346,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,108,109,20,110,111,112,113,114,21,22,23,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,148,357,149,150,151,152,153,154,155,156,157,158,163,411,2,24,164,25,26,165,412,166,167,168,169,170,171,173,174,177,178,179,180,181,422,182,423,183,184,185,186,424,187,188,189,189,190,190,426,427,428,191,192,193,27,28,194,195,196,197,198,29,30,199,200,202,203,205,206,207,209,210,211,212,213,214,215,216,218,220,221,222,223,224,38,39,225,40,226,41,42,227,43,228,229,230,231,232,233,234,235,236,44,237,238,239,240,45,241,242,243,244,245,246,247,248,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,13,272,457,273,274,275,276,277,278,279,280,281,282,283,284,285,459,31,32,33,34,286,287,288,289,290,291,500,35,292,36,37,293,294,295,296,297,298,299,300,301,302,46,303,47,304,305,306,307,308,309,310,48,311,312,313],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"failures":[223,235,237,508],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:205","sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:207","sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cstr":"cstr"}},{"position":"org.easymock.internal.matchers.Equals:57","failures":[],"status":0,"binaryOperator":"(((this.java.lang.Object) == null) && ((org.easymock.internal.matchers.Equals.java.lang.Object) == null)) || (((this.java.lang.Object) != null) && (this.java.lang.Object.equals(org.easymock.internal.matchers.Equals.java.lang.Object)))","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:633","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":39,"org.easymock.tests2.UsageTest.argumentsOrdered":30,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":54,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":284,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":451,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":393,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":195,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":423,"org.easymock.tests2.DelegateToTest.testReturnException":267,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":151,"org.easymock.tests.MockingTest.testPartialClassMocking":91,"org.easymock.tests.MockClassControlTest.testToString":416,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":460,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":59,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":443,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":401,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":476,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":66,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":287,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":210,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":7,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":227,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":110,"org.easymock.tests2.UsageTest.wrongArguments":28,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":499,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":161,"org.easymock.samples.ExampleTest.answerVsDelegate":184,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":325,"org.easymock.tests2.UsageConstraintsTest.testNull":40,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":353,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":214,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":421,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":283,"org.easymock.tests2.CaptureTest.testPrimitive":304,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":114,"org.easymock.tests.UsageTest.moreThanOneArgument":16,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":85,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":213,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":51,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":172,"org.easymock.tests.UsageTest.argumentsOrdered":19,"org.easymock.tests.UsageVarargTest.varargIntAccepted":330,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":398,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":177,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":11,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":201,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":463,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":455,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":385,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":181,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":290,"org.easymock.tests.ReplayStateInvalidUsageTest.times":370,"org.easymock.tests2.DependencyTest.testClassMocking":437,"org.easymock.tests2.AnswerTest.answer":243,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":43,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":399,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":252,"org.easymock.tests2.CaptureTest.testAnd":46,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":322,"org.easymock.tests2.UsageTest.strictResetToDefault":193,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":431,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":219,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":50,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":96,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":278,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":176,"org.easymock.tests2.DelegateToTest.testDelegate":271,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":81,"org.easymock.tests.LimitationsTest.mockFinalMethod":361,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":154,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":147,"org.easymock.tests2.DependencyTest.testClassMockingSupport":438,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":108,"org.easymock.tests2.CaptureTest.testCapture1_2446744":305,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":439,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":79,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":250,"org.easymock.tests.UsageThrowableTest.throwError":135,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":364,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":324,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":456,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":413,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":53,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":488,"org.easymock.samples.PartialClassMockTest.testGetArea":182,"org.easymock.tests.MockingTest.testInterfaceMocking":351,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":365,"org.easymock.tests2.CompareToTest.testLessOrEqual":507,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":178,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":477,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":410,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":67,"org.easymock.tests2.UsageTest.niceToStrict":194,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":383,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":203,"org.easymock.tests2.MockBuilderTest.testCreateMock":435,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":484,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":496,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":3,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":75,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":279,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":321,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":65,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":339,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":159,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":314,"org.easymock.tests.UsageOverloadedMethodTest.overloading":106,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":486,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":481,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":101,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":232,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":126,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":105,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":231,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":310,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":331,"org.easymock.tests.MockClassControlTest.testEquals":420,"org.easymock.tests2.EasyMockSupportClassTest.testAll":286,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":357,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":83,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":145,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":251,"org.easymock.tests2.CaptureTest.testCaptureAll":303,"org.easymock.tests.MockNameTest.defaultName":347,"org.easymock.tests2.UsageConstraintsTest.testMatches":233,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":52,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":362,"org.easymock.samples.ExampleTest.voteForRemovals":187,"org.easymock.tests.UsageVarargTest.allKinds":86,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":21,"org.easymock.samples.BasicClassMockTest.testPrintContent":427,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":146,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":141,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":291,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":452,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":155,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":270,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":12,"org.easymock.tests2.UsageConstraintsTest.greaterThan":235,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":381,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":471,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":95,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":222,"org.easymock.samples.ExampleTest.voteForRemoval":185,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":382,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":442,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":260,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":326,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":464,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":217,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":87,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":192,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":434,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":390,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":276,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":137,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":469,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":150,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":266,"org.easymock.tests2.CaptureTest.testCaptureFirst":313,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":389,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":277,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":200,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":104,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":122,"org.easymock.tests2.UsageTest.moreThanOneArgument":27,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":262,"org.easymock.tests2.CaptureTest.testCapture2_2446744":312,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":400,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":207,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":338,"org.easymock.tests.GenericTest.testBridgedEquals":358,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":315,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":345,"org.easymock.tests.UsageExpectAndReturnTest.longType":118,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":143,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":274,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":84,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":171,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":239,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":82,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":49,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":61,"org.easymock.tests.UsageCallCountTest.tooManyCalls":346,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":88,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":485,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":123,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":498,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":71,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":140,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":297,"org.easymock.tests.MockingTest.testNiceClassMocking":354,"org.easymock.tests.MockingTest.testClassMocking":349,"org.easymock.tests2.UsageConstraintsTest.testContains":230,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":340,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":255,"org.easymock.tests2.UsageConstraintsTest.testFind":225,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":107,"org.easymock.tests.MockTypeTest.fromEasyMockClass":323,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":163,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":258,"org.easymock.tests.UsageExpectAndReturnTest.object":125,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":218,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":497,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":282,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":8,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":333,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":408,"org.easymock.tests.UsageTest.exactCallCountByLastCall":58,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":316,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":89,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":388,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":173,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":318,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":14,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":131,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":328,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":100,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":447,"org.easymock.tests.MockClassControlTest.testHashCode":419,"org.easymock.tests2.EasyMockSupportTest.testVerify":459,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":479,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":174,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":98,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":64,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":249,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":501,"org.easymock.tests.UsageVarargTest.varargCharAccepted":332,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":374,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":500,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":404,"org.easymock.tests2.UsageTest.openCallCountByLastCall":196,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":285,"org.easymock.tests.DefaultClassInstantiatorTest.object":375,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":63,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":406,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":480,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":73,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":138,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":492,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":446,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":418,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":220,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":72,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":132,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":60,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":417,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":289,"org.easymock.tests2.UsageTest.resumeIfFailure":199,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":320,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":462,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":153,"org.easymock.tests2.StubTest.stubWithReturnValue":295,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":5,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":124,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":240,"org.easymock.tests2.SerializationTest.testAllMockedMethod":457,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":157,"org.easymock.samples.SupportTest.voteForRemovals":191,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":4,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":356,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":449,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":78,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":504,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":158,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":244,"org.easymock.tests.UsageExpectAndThrowTest.object":76,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":319,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":237,"org.easymock.tests2.DelegateToTest.testWrongClass":269,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":166,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":167,"org.easymock.samples.ConstructorCalledMockTest.testTax":189,"org.easymock.tests.UsageStrictMockTest.range":25,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":466,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":281,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":296,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":77,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":468,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":18,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":372,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":160,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":0,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":170,"org.easymock.tests2.CaptureTest.testCaptureNone":309,"org.easymock.tests.UsageUnorderedTest.message":20,"org.easymock.tests2.ConstraintsToStringTest.endsWithToString":506,"org.easymock.tests.UsageVerifyTest.twoReturns":23,"org.easymock.tests.UsageVarargTest.varargByteAccepted":337,"org.easymock.tests2.ThreadingTest.testThreadSafe":259,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":482,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":343,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":426,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":409,"org.easymock.tests2.CaptureTest.testCapture_2617107":47,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":355,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":402,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":113,"org.easymock.tests2.UsageConstraintsTest.any":228,"org.easymock.tests2.StubTest.stub":294,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":369,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":62,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":403,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":152,"org.easymock.tests.UsageExpectAndThrowTest.longType":69,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":379,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":368,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":292,"org.easymock.tests2.SerializationTest.testClass":13,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":265,"org.easymock.tests.LimitationsTest.mockNativeMethod":156,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":149,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":134,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":491,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":293,"org.easymock.tests2.NameTest.nameForMocksControl":34,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":15,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":493,"org.easymock.tests2.MockedExceptionTest.testMockedException":254,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":472,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":57,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":445,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":70,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":93,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":211,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":206,"org.easymock.tests.MockingTest.testNicePartialClassMocking":92,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":216,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":489,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":6,"org.easymock.tests2.CaptureTest.testCaptureLast":308,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":109,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":42,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":302,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":238,"org.easymock.tests.MockingTest.testTwoMocks":350,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":503,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":115,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":74,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":29,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":241,"org.easymock.samples.ExampleTest.removeNonExistingDocument":425,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":495,"org.easymock.tests.UsageStrictMockTest.differentMethods":26,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":366,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":448,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":377,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":261,"org.easymock.tests2.MockBuilderTest.testCreateMockString":208,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":414,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":473,"org.easymock.tests.UsageExpectAndThrowTest.floatType":68,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":234,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":470,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":246,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":458,"org.easymock.tests.UsageVerifyTest.twoThrows":22,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":288,"org.easymock.samples.ExampleTest.voteAgainstRemoval":186,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":394,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":168,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":221,"org.easymock.tests.LimitationsTest.privateConstructor":360,"org.easymock.tests2.UsageConstraintsTest.testNotNull":45,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":142,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":253,"org.easymock.tests2.UsageTest.defaultResetToNice":198,"org.easymock.samples.ExampleTest.voteAgainstRemovals":183,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":395,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":130,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":490,"org.easymock.tests.UsageVarargTest.differentLength":334,"org.easymock.tests2.CallbackTest.callback":264,"org.easymock.tests2.UsageConstraintsTest.equals":444,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":440,"org.easymock.tests.UsageTest.openCallCountByLastCall":56,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":223,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":112,"org.easymock.tests.UsageCallCountTest.tooFewCalls":341,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":299,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":162,"org.easymock.tests.UsageThrowableTest.throwCheckedException":139,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":1,"org.easymock.tests.MockingTest.testStrictClassMocking":348,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":90,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":301,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":494,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":298,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":371,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":300,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":248,"org.easymock.tests.ObjectMethodsTest.testHashCode":407,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":10,"org.easymock.tests2.NameTest.nameForNiceMock":33,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":263,"org.easymock.tests2.DependencyTest.testInterfaceMocking":209,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":9,"org.easymock.samples.ExampleTest.addDocument":424,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":483,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":487,"org.easymock.tests2.DelegateToTest.testStubDelegate":268,"org.easymock.tests2.AnswerTest.stubAnswer":247,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":24,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":433,"org.easymock.tests.UsageVarargTest.varargLongAccepted":336,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":165,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":392,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":133,"org.easymock.tests.UsageExpectAndReturnTest.floatType":117,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":273,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":190,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":454,"org.easymock.tests.UsageThrowableTest.noUpperLimit":136,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":102,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":236,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":224,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":461,"org.easymock.tests2.SerializationTest.test":272,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":306,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":505,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":376,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":116,"org.easymock.tests2.UsageConstraintsTest.testSame":226,"org.easymock.samples.SupportTest.addDocument":428,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":502,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":367,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":474,"org.easymock.tests.GenericTest.testPackageScope":148,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":175,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":387,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":453,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":352,"org.easymock.tests2.NameTest.nameForMock":31,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":127,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":436,"org.easymock.tests2.UsageStrictMockTest.differentMethods":37,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":441,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":119,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":80,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":405,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":97,"org.easymock.tests2.MockedExceptionTest.testRealException":256,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":327,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":397,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":396,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":35,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":111,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":373,"org.easymock.tests2.NameTest.nameForStrictMock":32,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":432,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":257,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":317,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":215,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":465,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":44,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":378,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":202,"org.easymock.tests2.UsageStrictMockTest.range":36,"org.easymock.tests2.UsageConstraintsTest.lessThan":242,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":450,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":391,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":275,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":478,"org.easymock.tests2.CaptureTest.testCaptureRightOne":48,"org.easymock.tests2.UsageConstraintsTest.testOr":41,"org.easymock.tests.UsageRangeTest.combination":94,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":212,"org.easymock.tests.UsageTest.wrongArguments":17,"org.easymock.tests2.MockBuilderTest.testWithConstructor":429,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":475,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":415,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":120,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":384,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":128,"org.easymock.tests.UsageVarargTest.varargShortAccepted":335,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":380,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":344,"org.easymock.tests2.UsageConstraintsTest.cmpTo":229,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":386,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":197,"org.easymock.tests2.CaptureTest.testCaptureFromStub":311,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":363,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":430,"org.easymock.tests.UsageTest.unexpectedCallWithArray":55,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":2,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":342,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":129,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":164,"org.easymock.tests2.UsageConstraintsTest.constraints":38,"org.easymock.samples.ExampleTest.addAndChangeDocument":188,"org.easymock.tests.UsageStrictMockTest.testVerify":412,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":422,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":411,"org.easymock.tests2.CompareToTest.testGreateThan":508,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":144,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":307,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":179,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":121,"org.easymock.tests.LimitationsTest.abstractClass":359,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":180,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":103,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":280,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":329}}]

[{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocks(java.lang.Object)","position":"org.easymock.EasyMockSupport:624","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"unordered":"org.easymock.internal.AndroidSupport.isAndroid","match":"org.easymock.internal.AndroidSupport.isAndroid","validCallCount":"org.easymock.internal.AndroidSupport.isAndroid"},"name":"add","transplant":{"sourceCode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Class.java.lang.Class.forName(\"dalvik.system.PathClassLoader\");\n    org.easymock.internal.AndroidSupport.boolean = true;\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    org.easymock.internal.AndroidSupport.boolean = false;\n}","position":"org.easymock.internal.AndroidSupport:25","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:125","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-658998692584342514L","position":"org.easymock.internal.matchers.StartsWith:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","position":"org.easymock.internal.ClassInstantiatorFactory:52","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:93","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","position":"org.easymock.internal.MocksControl:88","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<T>.add(T)","position":"org.easymock.Capture:113","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"length"},"name":"add","transplant":{"sourceCode":"return int <= 0","position":"org.easymock.internal.matchers.LessOrEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object[].int) != (java.util.List<org.easymock.IArgumentMatcher>.size())) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:90","type":"CtIfImpl"},"status":-2},{"failures":[0],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.And:49","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.matchers.And:50","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))) {\n    return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:93","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Integer>(org.easymock.Capture<java.lang.Integer>))","position":"org.easymock.EasyMock:1939","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:126","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Compare<T>(T , java.util.Comparator<? super T> , org.easymock.LogicalOperator))","position":"org.easymock.EasyMock:1901","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return true;\n} ","position":"org.easymock.internal.Results:52","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))","position":"org.easymock.ConstructorArgs:66","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","position":"org.easymock.internal.matchers.And:48","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.Injector:67","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"continue","position":"org.easymock.internal.ReflectionUtils:99","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:284","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = java.lang.Integer.int","position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl"},"status":-2},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"variableMapping":{"lastResult":"lastResult"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","position":"org.easymock.internal.RecordState:111","type":"CtAssignmentImpl"},"status":-1},{"failures":[38,39,40,41,42,27,43,44,45,46,47,48,49,50],"variableMapping":{"result":"errorMessage","i":"position"},"name":"replace","transplant":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:90","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.UnorderedBehavior org.easymock.internal.UnorderedBehavior : java.util.List<org.easymock.internal.UnorderedBehavior>.subList(int, java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : org.easymock.internal.UnorderedBehavior.getMessages(null)) {\n        org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0);\n    }\n}","position":"org.easymock.internal.MocksBehavior:167","type":"CtForEachImpl"},"status":-1},{"failures":[51,52,53,54,55,56],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.ArgumentToString:46","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","position":"org.easymock.internal.BridgeMethodResolver:322","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:196","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","position":"org.easymock.internal.LastControl:95","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double)","position":"org.easymock.internal.RecordState:65","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan)","position":"org.easymock.internal.Injector:82","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","position":"org.easymock.internal.RecordState:241","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMockSupport:519","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:323","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:207","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<java.lang.reflect.Field>.addAll(java.util.Arrays.java.util.Arrays.asList(java.lang.Class<?>.getDeclaredFields()))","position":"org.easymock.internal.Injector:199","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:326","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Double>(double))","position":"org.easymock.EasyMock:733","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"argTypes":"argTypes","toMock":"toMock","constructor":"constructor"},"name":"add","transplant":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:150","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:151","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"leq\"","position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(java.util.Properties.remove(java.lang.String)));\n} ","position":"org.easymock.internal.EasyMockProperties:119","type":"CtIfImpl"},"status":-2},{"failures":[38,39,57,58,59,42,27,43,44,60,61,62,47,49,50],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"boolean boolean = true","position":"org.easymock.internal.MocksBehavior:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount()","position":"org.easymock.internal.UnorderedBehavior:86","type":"CtLocalVariableImpl"},"status":-1},{"failures":[],"variableMapping":{"toMock":"toMock","constructorArgs":"constructorArgs","this":"this","mockedMethods":"mockedMethods"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:116","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:325","type":"CtReturnImpl"},"status":-2},{"failures":[63,64],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"boolean boolean = true","position":"org.easymock.internal.MocksBehavior:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","position":"org.easymock.internal.EasyMockProperties:127","type":"CtTryImpl"},"status":-1},{"failures":[65,66],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","position":"org.easymock.internal.ClassInstantiatorFactory:52","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.ObjectMethodsFilter:121","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","position":"org.easymock.internal.ReflectionUtils:152","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.DataOutputStream.writeShort(0)","position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>()","position":"org.easymock.internal.LastControl:39","type":"CtNewClassImpl"},"status":-2},{"failures":[67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","position":"org.easymock.internal.LastControl:111","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","position":"org.easymock.internal.LastControl:92","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.InjectionTarget:56","type":"CtInvocationImpl"},"status":-2},{"failures":[87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114],"variableMapping":{"controls":"controls"},"name":"add","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.verify();\n}","position":"org.easymock.EasyMockSupport:561","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.IMocksControl>.add(org.easymock.IMocksControl)","position":"org.easymock.EasyMockSupport:509","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:270","type":"CtInvocationImpl"},"status":-2},{"failures":[115],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.UnorderedBehavior:103","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.ExpectedInvocation:108","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","position":"org.easymock.internal.LastControl:119","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.MocksControl:352","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5554816464613350531L","position":"org.easymock.internal.ExpectedInvocation:32","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n    if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n        java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:382","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String","position":"org.easymock.LogicalOperator:62","type":"CtReturnImpl"},"status":-2},{"failures":[116,117,117,118,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,1,136,38,137,138,139,140,141,2,142,143,144,145,146,147,148,149,150,151,152,153,154,3,39,51,57,155,4,58,59,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,5,181,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,26,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,65,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,52,40,229,230,41,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,42,27,43,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,28,290,29,30,31,32,33,34,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,67,68,340,69,70,71,72,73,74,75,76,341,342,343,344,345,346,347,348,77,78,349,350,351,79,80,352,35,353,44,60,354,115,355,36,356,61,62,357,358,87,88,89,90,91,92,93,94,95,96,97,98,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,45,378,379,46,380,381,382,383,384,99,100,101,102,103,104,105,106,107,108,109,110,81,82,83,84,385,386,387,388,389,390,85,86,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,37,474,475,476,477,478,479,111,480,481,482,112,483,484,113,485,114,486,47,48,49,50],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:371","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:109","type":"CtTryImpl"},"status":-1},{"failures":[38,39,57,58,59,52,40,230,41,231,42,27,43,278,280,281,287,44,60,61,62,45,379,46,380,47,48,49,50],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.Invocation.getArguments()","position":"org.easymock.internal.ExpectedInvocation:49","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    final boolean boolean = !(boolean);\n    final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount();\n    final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation));\n    if ((boolean && boolean) && (!boolean)) {\n        continue;\n    } \n    final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount());\n    java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage);\n}","position":"org.easymock.internal.UnorderedBehavior:84","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.Class<?>.getSigners()) != null) {\n    net.sf.cglib.proxy.Enhancer.setNamingPolicy(org.easymock.internal.ClassProxyFactory.net.sf.cglib.core.NamingPolicy);\n} ","position":"org.easymock.internal.ClassProxyFactory:273","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1764","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"arg":"array"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    java.lang.Object[][int] = java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int);\n}","position":"org.easymock.internal.Invocation:73","type":"CtForImpl"},"status":-2},{"failures":[295],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(char[]))","position":"org.easymock.EasyMock:1607","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.ClassProxyFactory:107","type":"CtInvocationImpl"},"status":-2},{"failures":[116,117,117,118,118,119,120,121,122,123,124,125,126,127,129,130,131,132,133,134,135,1,136,38,137,138,139,140,141,2,142,149,150,151,152,153,154,3,39,51,57,155,4,58,59,156,165,166,167,168,169,170,171,172,174,176,177,178,179,180,5,181,487,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,182,183,488,197,198,26,201,202,203,205,217,218,219,220,221,222,223,224,225,226,227,228,52,40,229,230,41,231,232,255,261,263,264,265,266,267,268,269,270,271,272,273,274,42,27,43,275,276,277,278,280,281,282,283,284,285,286,287,288,289,28,290,29,30,31,32,33,34,293,489,489,296,297,298,300,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,490,491,492,493,338,339,67,68,69,70,71,72,73,74,75,76,341,342,343,344,345,346,347,348,77,78,349,350,351,79,80,352,35,353,44,60,354,115,355,36,356,61,62,357,358,92,359,360,361,362,363,364,365,366,367,369,370,371,372,373,374,375,376,377,45,378,379,46,380,381,382,383,384,104,81,82,83,84,385,386,387,388,389,390,85,86,391,392,393,394,395,397,398,399,400,401,402,403,404,405,406,407,408,409,410,413,414,415,417,421,422,423,425,427,428,430,431,432,433,434,435,436,437,439,442,443,444,445,451,454,464,470,473,37,474,477,478,479,111,480,481,482,112,483,484,113,485,114,47,48,49,50],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","position":"org.easymock.internal.Result:88","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!boolean) {\n    return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:53","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","position":"org.easymock.internal.ClassProxyFactory:169","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:112","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:209","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:90","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","position":"org.easymock.internal.ObjectMethodsFilter:83","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","position":"org.easymock.internal.ClassProxyFactory:193","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:78","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:354","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:288","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.internal.InjectionTarget == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:165","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.IMocksControl>.add(org.easymock.IMocksControl)","position":"org.easymock.EasyMockSupport:509","type":"CtInvocationImpl"},"status":-2},{"failures":[87,88,89,91,94,95,96,97,99,100,101,103,106,107,108,109],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injection == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:189","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\") + (org.easymock.internal.Invocation.getMethod())) + \"]\") , java.lang.IllegalArgumentException)","position":"org.easymock.internal.Result:86","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:25","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","position":"org.easymock.internal.RecordState:144","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.LastControl.threadToArgumentMatcherStack":"org.easymock.internal.LastControl.threadToArgumentMatcherStack"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","position":"org.easymock.internal.LastControl:73","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","position":"org.easymock.internal.LastControl:61","type":"CtIfImpl"},"status":-2},{"failures":[134,136,38,137,3,39,51,57,58,59,156,182,183,191,227,52,40,229,230,41,231,42,27,43,287,53,494,54,495,496,497,498,67,346,35,44,60,354,115,61,62,358,499,55,500,501,502,503,504,0,56,505,506,376,45,378,379,46,380,384,432,443,445,478,481,482,484],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:34","type":"CtIfImpl"},"status":-1},{"failures":[484],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.IMocksControl.resetToDefault()","position":"org.easymock.EasyMockSupport:584","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.verify()","position":"org.easymock.EasyMockSupport:562","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double)","position":"org.easymock.internal.RecordState:65","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.ClassProxyFactory:118","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-9054190871232972342L","position":"org.easymock.internal.ClassProxyFactory:53","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-3018631689416120154L","position":"org.easymock.internal.matchers.EqualsWithDelta:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.Results.getMainInterval().expectedCount()","position":"org.easymock.internal.Results:86","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = java.lang.Math.java.lang.Math.min(int, ((java.lang.Class<?>[].int) - 1))","position":"org.easymock.internal.Invocation:137","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.util.List<java.lang.reflect.Method>.size()) == 1) {\n    java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0);\n} else {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method);\n}","position":"org.easymock.internal.BridgeMethodResolver:87","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","position":"org.easymock.internal.MocksControl:185","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = java.lang.reflect.Constructor<?>.getParameterTypes()","position":"org.easymock.internal.ReflectionUtils:179","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    try {\n        if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasResults())) {\n            continue;\n        } \n        if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n            continue;\n        } \n        final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.ExpectedInvocationAndResults.getResults().next();\n        org.easymock.internal.Invocation.validateCaptures();\n        return org.easymock.internal.Result;\n    } finally {\n        org.easymock.internal.Invocation.clearCaptures();\n    }\n}","position":"org.easymock.internal.UnorderedBehavior:50","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","position":"org.easymock.internal.ReflectionUtils:230","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","position":"org.easymock.internal.LastControl:48","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:104","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.BridgeMethodResolver:142","type":"CtReturnImpl"},"status":-2},{"failures":[70,75,77,79],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1348","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1458","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this","mockedMethods":"mockedMethods"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:116","type":"CtReturnImpl"},"status":-2},{"failures":[116,117,118,119,120,121,122,123,124,125,126,127,129,130,131,132,133,135,1,138,139,140,141,2,142,149,150,151,152,153,154,3,39,155,4,156,165,166,167,168,169,177,178,179,180,5,181,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,185,186,187,189,190,192,193,194,195,196,197,198,26,202,203,205,217,218,219,220,221,222,223,224,225,226,228,40,229,230,41,231,271,273,274,42,27,43,280,281,282,283,285,286,287,288,289,28,290,29,30,31,32,33,34,293,296,297,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,338,339,67,68,69,70,71,72,73,74,76,341,342,343,344,345,346,347,348,77,78,349,350,351,79,80,352,35,353,44,354,115,355,36,356,357,358,92,359,360,361,362,363,364,365,366,367,369,371,372,373,375,377,45,378,379,46,380,381,382,383,384,104,81,82,83,84,385,386,387,388,389,390,85,86,391,392,393,394,395,396,397,398,401,402,403,404,405,406,407,408,409,410,413,414,415,421,422,423,425,431,432,433,434,435,436,437,439,442,444,451,454,464,470,473,37,474,477,478,479,111,480,481,482,112,483,484,113,485,114],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:174","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Result.answer()","position":"org.easymock.internal.ReplayState:60","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor })","position":"org.easymock.internal.ClassProxyFactory:189","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.Result:46","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:52","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!boolean) {\n    return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:53","type":"CtIfImpl"},"status":-2},{"failures":[116,119,87,99],"variableMapping":{"delegateTo":"obj"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection)","position":"org.easymock.internal.Injector:193","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"boolean = false","position":"org.easymock.internal.MocksBehavior:156","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.Injection:74","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"args":"arguments","org.easymock.internal.Invocation.NO_ARGS":"arguments"},"name":"add","transplant":{"sourceCode":"return java.lang.Object[] == null ? this.java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:88","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.internal.Range org.easymock.internal.Range : java.util.LinkedList<org.easymock.internal.Range>) {\n    int += org.easymock.internal.Range.getMinimum();\n    if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n        int = java.lang.Integer.int;\n    } else {\n        int += org.easymock.internal.Range.getMaximum();\n    }\n}","position":"org.easymock.internal.Results:92","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<java.lang.Class<?>>.toArray(new java.lang.Class[java.util.List<java.lang.Class<?>>.size()])","position":"org.easymock.internal.BridgeMethodResolver:390","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.BridgeMethodResolver:142","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:84","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:399","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1190","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount())) {\n        return false;\n    } \n}","position":"org.easymock.internal.UnorderedBehavior:74","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.InjectionTarget(java.lang.reflect.Field)","position":"org.easymock.internal.Injector:219","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String","position":"org.easymock.internal.Injector:119","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = org.easymock.internal.Invocation.org.easymock.internal.Invocation.createObjectArray(java.lang.Object[][((java.lang.Object[].int) - 1)])","position":"org.easymock.internal.Invocation:59","type":"CtLocalVariableImpl"},"status":-2},{"failures":[139,2,57,58,59,198,227,52,40,27,28,290,30,31,32,33,34,338,339,67,69,71,72,342,344,345,346,347,348,80,352,60,354,115,61,62,376,45,384,85,402,37,478,479,480,481,482,483,484],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:95","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:180","type":"CtReturnImpl"},"status":-2},{"failures":[130,143,146,298,381,415,507,417,418,421,422,423,425,427,428,508,430,437,443,444,447,454,464,470],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:105","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","position":"org.easymock.internal.MockBuilder:68","type":"CtIfImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:122","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{"this":"this","maximum":"maximum","minimum":"maximum"},"name":"add","transplant":{"sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","position":"org.easymock.internal.Range:65","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","position":"org.easymock.internal.Range:67","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Byte>(org.easymock.Capture<java.lang.Byte>))","position":"org.easymock.EasyMock:1987","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"((java.lang.Number.doubleValue()) <= ((java.lang.Number.doubleValue()) + (java.lang.Number.doubleValue())))","name":"conditionalBoundary","position":"org.easymock.internal.matchers.EqualsWithDelta:41","type":"mutation","status":0},{"failures":[],"variableMapping":{"o":"actual"},"name":"add","transplant":{"sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","position":"org.easymock.internal.Invocation:180","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.IArgumentMatcher.matches(java.lang.Object)) {\n    return true;\n} ","position":"org.easymock.internal.matchers.Or:39","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:317","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:380","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:252","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"continue","position":"org.easymock.internal.Injector:185","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader()","position":"org.easymock.internal.EasyMockProperties:135","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Short>(short))","position":"org.easymock.EasyMock:785","type":"CtInvocationImpl"},"status":-2},{"failures":[507,508],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","position":"org.easymock.internal.MockBuilder:69","type":"CtThrowImpl"},"status":-1},{"failures":[347,509],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"result":"method","bridgeMethod":"method"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","position":"org.easymock.internal.BridgeMethodResolver:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:98","type":"CtIfImpl"},"status":0},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1531","type":"mutation","return":"return 0","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","position":"org.easymock.internal.DefaultClassInstantiator:188","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:80","type":"CtIfImpl"},"status":-2},{"failures":[510,511,512,513,514,424,474,475],"variableMapping":{"result":"i"},"name":"replace","transplant":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:193","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) {\n    if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n        org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n    } \n}","position":"org.easymock.internal.EasyMockProperties:45","type":"CtSynchronizedImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":30,"org.easymock.tests2.MockedExceptionTest.testRealException":362,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":455,"org.easymock.tests.UsageVarargTest.varargIntAccepted":187,"org.easymock.tests.LimitationsTest.mockFinalMethod":294,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":338,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":160,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":474,"org.easymock.tests.UsageCallCountTest.tooManyCalls":286,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":303,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":466,"org.easymock.tests2.CompareToTest.testGreateThan":509,"org.easymock.tests2.StubTest.stubWithReturnValue":37,"org.easymock.tests.UsageVarargTest.allKinds":196,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":472,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":152,"org.easymock.tests2.CaptureTest.testCaptureAll":82,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":288,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":503,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":511,"org.easymock.tests2.ConstraintsToStringTest.andToString":0,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":346,"org.easymock.tests2.CaptureTest.testAnd":81,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":476,"org.easymock.tests.UsageStrictMockTest.testVerify":232,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":14,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":135,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":143,"org.easymock.tests.MockClassControlTest.testToString":159,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":404,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":310,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":481,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":22,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":326,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":104,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":514,"org.easymock.tests.UsageThrowableTest.throwError":28,"org.easymock.samples.SupportTest.addDocument":120,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":142,"org.easymock.tests2.StubTest.stub":473,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":264,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":304,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":99,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":220,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":438,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":139,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":260,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":332,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":447,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":262,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":446,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":195,"org.easymock.tests.UsageExpectAndThrowTest.object":16,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":395,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":179,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":468,"org.easymock.tests2.UsageTest.moreThanOneArgument":44,"org.easymock.tests.UsageVarargTest.varargByteAccepted":194,"org.easymock.tests.MockClassControlTest.testEquals":163,"org.easymock.tests.UsageTest.wrongArguments":57,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":168,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":496,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":236,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":103,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":17,"org.easymock.tests2.UsageTest.defaultResetToNice":356,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":54,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":55,"org.easymock.tests.MockingTest.testNiceClassMocking":208,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":361,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":396,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":425,"org.easymock.tests.InvocationTest.testHashCode":492,"org.easymock.tests2.MockBuilderTest.testCreateMock":427,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":397,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":507,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":300,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":305,"org.easymock.samples.ExampleTest.voteAgainstRemovals":122,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":376,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":102,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":134,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":273,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":197,"org.easymock.tests2.CaptureTest.testCapture1_2446744":385,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":374,"org.easymock.samples.ExampleTest.voteForRemoval":124,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":335,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":283,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":38,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":172,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":424,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":149,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":231,"org.easymock.tests2.CaptureTest.testCaptureRightOne":85,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":319,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":301,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":400,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":436,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":272,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":266,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":302,"org.easymock.tests2.UsageConstraintsTest.cmpTo":341,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":64,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":65,"org.easymock.tests.MockTypeTest.fromEasyMockClass":144,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":108,"org.easymock.tests2.MockedExceptionTest.testMockedException":360,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":25,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":224,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":351,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":42,"org.easymock.samples.PartialClassMockTest.testGetArea":130,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":246,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":26,"org.easymock.samples.ConstructorCalledMockTest.testTax":117,"org.easymock.tests2.UsageTest.argumentsOrdered":62,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":399,"org.easymock.samples.ExampleTest.removeNonExistingDocument":128,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":336,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":212,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":403,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":176,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":318,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":165,"org.easymock.tests2.AnswerTest.answer":398,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":109,"org.easymock.tests.MockingTest.testNicePartialClassMocking":203,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":40,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":221,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":510,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":226,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":265,"org.easymock.tests.UsageExpectAndThrowTest.longType":9,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":148,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":23,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":464,"org.easymock.tests2.ConstraintsToStringTest.notToString":500,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":112,"org.easymock.tests.UsageTest.argumentsOrdered":59,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":68,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":423,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":331,"org.easymock.tests2.NameTest.nameForStrictMock":48,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":141,"org.easymock.tests2.MockBuilderTest.testCreateMockString":430,"org.easymock.tests2.CaptureTest.testCaptureNone":389,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":259,"org.easymock.tests2.SerializationTest.testClass":381,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":238,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":490,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":131,"org.easymock.tests.MockingTest.testInterfaceMocking":204,"org.easymock.tests2.EasyMockSupportTest.testVerify":114,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":234,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":106,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":422,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":11,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":207,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":350,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":35,"org.easymock.tests.GenericTest.testBridgedEquals":299,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":330,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":428,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":74,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":408,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":431,"org.easymock.tests2.UsageConstraintsTest.testOr":72,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":394,"org.easymock.tests.MockClassControlTest.testHashCode":162,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":88,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":486,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":34,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":146,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":289,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":325,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":223,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":405,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":407,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":471,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":452,"org.easymock.tests2.UsageConstraintsTest.testSame":71,"org.easymock.tests2.UsageTest.resumeIfFailure":357,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":504,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":276,"org.easymock.tests.UsageOverloadedMethodTest.overloading":198,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":409,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":147,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":440,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":91,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":93,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":460,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":270,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":118,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":459,"org.easymock.tests.UsageTest.openCallCountByLastCall":155,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":12,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":491,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":269,"org.easymock.tests2.NameTest.nameForNiceMock":49,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":307,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":105,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":274,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":222,"org.easymock.tests2.CaptureTest.testPrimitive":84,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":433,"org.easymock.samples.BasicClassMockTest.testPrintContent":132,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":275,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":217,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":442,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":285,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":367,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":279,"org.easymock.tests2.UsageStrictMockTest.differentMethods":46,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":461,"org.easymock.tests.MockingTest.testClassMocking":200,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":479,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":298,"org.easymock.tests2.CaptureTest.testCaptureLast":388,"org.easymock.tests2.UsageConstraintsTest.equals":340,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":508,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":7,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":284,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":282,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":414,"org.easymock.tests.UsageStrictMockTest.range":230,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":4,"org.easymock.tests.InvocationTest.testEquals":493,"org.easymock.tests.UsageTest.unexpectedCallWithArray":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":462,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":242,"org.easymock.tests.MatchableArgumentsTest.testEquals":488,"org.easymock.samples.ExampleTest.addDocument":126,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":206,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":137,"org.easymock.tests2.UsageConstraintsTest.lessThan":352,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":58,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":133,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":263,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":66,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":370,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":251,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":333,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":216,"org.easymock.tests2.MockBuilderTest.testWithConstructor":416,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":56,"org.easymock.tests2.UsageStrictMockTest.range":379,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":410,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":167,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":182,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":244,"org.easymock.tests.UsageTest.moreThanOneArgument":39,"org.easymock.tests2.UsageTest.openCallCountByLastCall":355,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":501,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":417,"org.easymock.tests.UsageStrictMockTest.differentMethods":41,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":211,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":248,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":334,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":10,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":170,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":497,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":313,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":453,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":63,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":101,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":229,"org.easymock.tests2.DependencyTest.testClassMockingSupport":412,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":439,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":21,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":153,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":90,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":116,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":173,"org.easymock.tests2.UsageConstraintsTest.testContains":342,"org.easymock.tests2.UsageConstraintsTest.testFind":69,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":386,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":213,"org.easymock.samples.ExampleTest.addAndChangeDocument":129,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":415,"org.easymock.tests.UsageVarargTest.varargCharAccepted":189,"org.easymock.tests2.CaptureTest.testCaptureFromStub":86,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":512,"org.easymock.tests.UsageVerifyTest.twoThrows":27,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":110,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":140,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":190,"org.easymock.tests2.DelegateToTest.testReturnException":371,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":115,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":475,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":485,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":502,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":295,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":368,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":377,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":277,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":214,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":311,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":390,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":18,"org.easymock.tests2.UsageConstraintsTest.testMatches":345,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":166,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":249,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":250,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":261,"org.easymock.tests2.UsageConstraintsTest.testNull":70,"org.easymock.tests.LimitationsTest.abstractClass":291,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":215,"org.easymock.tests2.EasyMockSupportClassTest.testAll":451,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":138,"org.easymock.tests2.UsageConstraintsTest.greaterThan":347,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":185,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":306,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":77,"org.easymock.tests.UsageExpectAndReturnTest.object":323,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":483,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":380,"org.easymock.tests2.DelegateToTest.testWrongClass":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":241,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":53,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":13,"org.easymock.samples.ExampleTest.voteAgainstRemoval":125,"org.easymock.tests.CapturesMatcherTest.test":489,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":33,"org.easymock.tests.UsageVarargTest.varargShortAccepted":192,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":267,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":237,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":97,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":219,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":119,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":450,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":157,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":100,"org.easymock.tests2.NameTest.nameForMocksControl":50,"org.easymock.tests2.SerializationTest.testAllMockedMethod":383,"org.easymock.tests.MockingTest.testStrictClassMocking":199,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":2,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":358,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":458,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":171,"org.easymock.tests.LimitationsTest.mockNativeMethod":293,"org.easymock.tests2.DelegateToTest.testStubDelegate":372,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":494,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":136,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":253,"org.easymock.tests.UsageUnorderedTest.message":287,"org.easymock.samples.ExampleTest.answerVsDelegate":123,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":175,"org.easymock.tests.UsageCallCountTest.tooFewCalls":281,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":322,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":401,"org.easymock.tests.UsageVerifyTest.twoReturns":43,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":467,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":513,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":15,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":252,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":317,"org.easymock.tests2.DependencyTest.testInterfaceMocking":413,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":477,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":506,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":178,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":254,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":111,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":366,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":73,"org.easymock.tests.MockingTest.testTwoMocks":201,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":280,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":150,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":359,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":278,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":456,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":324,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":406,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":107,"org.easymock.tests.UsageThrowableTest.throwCheckedException":31,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":258,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":449,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":145,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":29,"org.easymock.samples.ExampleTest.voteForRemovals":127,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":344,"org.easymock.tests.ReplayStateInvalidUsageTest.times":308,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":1,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":457,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":435,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":3,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":239,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":314,"org.easymock.tests2.UsageConstraintsTest.any":76,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":89,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":240,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":321,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":243,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":113,"org.easymock.tests.LimitationsTest.privateConstructor":292,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":369,"org.easymock.tests2.CallbackTest.callback":384,"org.easymock.tests2.NameTest.nameForMock":47,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":247,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":429,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":343,"org.easymock.tests.MockNameTest.defaultName":312,"org.easymock.tests2.SerializationTest.test":382,"org.easymock.tests.UsageExpectAndReturnTest.longType":316,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":387,"org.easymock.tests2.CaptureTest.testCaptureFirst":392,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":78,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":184,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":177,"org.easymock.tests2.UsageTest.niceToStrict":354,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":169,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":174,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":209,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":227,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":19,"org.easymock.tests2.UsageTest.strictResetToDefault":353,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":448,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":444,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":498,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":154,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":6,"org.easymock.tests2.ConstraintsToStringTest.orToString":499,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":320,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":363,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":420,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":437,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":186,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":348,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":434,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":181,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":205,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":495,"org.easymock.tests2.DelegateToTest.testDelegate":375,"org.easymock.tests2.UsageConstraintsTest.testNotNull":79,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":378,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":419,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":92,"org.easymock.tests2.CaptureTest.testCapture_2617107":83,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":256,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":309,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":94,"org.easymock.tests2.ThreadingTest.testThreadSafe":393,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":36,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":257,"org.easymock.tests.UsageThrowableTest.noUpperLimit":290,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":188,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":484,"org.easymock.tests.UsageExpectAndReturnTest.floatType":315,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":478,"org.easymock.tests2.UsageTest.wrongArguments":60,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":75,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":365,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":161,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":426,"org.easymock.samples.SupportTest.voteForRemovals":121,"org.easymock.tests.UsageRangeTest.combination":271,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":463,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":80,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":469,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":98,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":45,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":327,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":20,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":151,"org.easymock.tests.UsageExpectAndThrowTest.floatType":8,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":465,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":328,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":432,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":87,"org.easymock.tests.ExpectedMethodCallTest.testHashCode":487,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":441,"org.easymock.tests.UsageTest.exactCallCountByLastCall":156,"org.easymock.tests2.AnswerTest.stubAnswer":402,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":482,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":454,"org.easymock.tests.MockingTest.testPartialClassMocking":202,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":329,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":61,"org.easymock.tests2.UsageConstraintsTest.constraints":67,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":364,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":337,"org.easymock.tests.UsageVarargTest.varargLongAccepted":193,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":225,"org.easymock.tests.ObjectMethodsTest.testHashCode":235,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":505,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":443,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":445,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":52,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":24,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":268,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":470,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":183,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":418,"org.easymock.tests2.DependencyTest.testClassMocking":411,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":164,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":218,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":233,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":96,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":480,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":158,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":339,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":421,"org.easymock.tests.DefaultClassInstantiatorTest.object":210,"org.easymock.tests.UsageVarargTest.differentLength":191,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":255,"org.easymock.tests2.CaptureTest.testCapture2_2446744":391,"org.easymock.tests.GenericTest.testPackageScope":296}}]

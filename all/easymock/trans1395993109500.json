[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","position":"org.easymock.internal.RecordState:241","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan)","position":"org.easymock.internal.Injector:66","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","position":"org.easymock.internal.Range:45","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:90","type":"CtReturnImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224],"variableMapping":{"interval":"interval"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.Range.getMinimum()","position":"org.easymock.internal.Results:93","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:71","type":"CtOperatorAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:255","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:296","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"length"},"name":"replace","transplant":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (((!(java.lang.reflect.Method.isBridge())) && (!(java.lang.reflect.Method.equals(java.lang.reflect.Method)))) && (java.lang.reflect.Method.getName().equals(java.lang.reflect.Method.getName()))) && ((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","position":"org.easymock.internal.BridgeMethodResolver:130","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Float>(float))","position":"org.easymock.EasyMock:839","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:813","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","position":"org.easymock.Capture:105","type":"CtSwitchImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"hashCodeMethod","equalsMethod":"hashCodeMethod"},"name":"add","transplant":{"sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:111","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Double>(org.easymock.Capture<java.lang.Double>))","position":"org.easymock.EasyMock:1975","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Long java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:187","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:168","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"o":"actual"},"name":"add","transplant":{"sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","position":"org.easymock.internal.Invocation:180","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).endsWith(java.lang.String))","position":"org.easymock.internal.matchers.EndsWith:36","type":"CtReturnImpl"},"status":-2},{"failures":[0,225,226,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,227,17,18,19,20,21,22,228,229,230,231,23,232,24,25,233,234,26,27,235,236,28,237,238,239,240,241,242,243,244,245,29,246,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,247,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,248,249,250,251,252,253,71,254,72,73,74,75,76,77,255,256,78,79,80,257,81,82,83,258,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,259,260,121,261,122,262,263,123,124,125,126,264,127,128,265,129,130,266,131,132,133,134,135,136,267,137,138,139,140,268,141,142,143,144,269,270,271,272,145,146,273,274,147,275,276,277,278,279,148,149,150,151,152,153,280,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,281,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,282,283,196,284,197,198,285,286,287,199,200,201,202,203,204,288,205,289,290,206,291,207,208,209,210,292,211,212,213,214,215,216,217,218,219,293,220,221,222,223,224],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","position":"org.easymock.internal.ReplayState:56","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))","position":"org.easymock.ConstructorArgs:66","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","position":"org.easymock.EasyMock:2053","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:360","type":"CtTryImpl"},"status":-2},{"failures":[151],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","position":"org.easymock.internal.RecordState:176","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.matchers.And:50","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).verify())) {\n    break;\n} ","position":"org.easymock.internal.MocksBehavior:91","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","position":"org.easymock.internal.LastControl:73","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.reflect.Proxy.java.lang.reflect.Proxy.getInvocationHandler(java.lang.Object)","position":"org.easymock.internal.JavaProxyFactory:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.InjectionTarget org.easymock.internal.InjectionTarget = org.easymock.internal.Injector.org.easymock.internal.Injector.injectionTargetWithField(java.lang.reflect.Field)","position":"org.easymock.internal.Injector:164","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-6785245714002503134L","position":"org.easymock.internal.matchers.Contains:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Results.getMainInterval()","position":"org.easymock.internal.Results:81","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"org.easymock.internal.Results:49","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:416","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:106","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.IMocksControl","position":"org.easymock.EasyMockSupport:482","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:90","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:88","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-551735356674347591L","position":"org.easymock.internal.matchers.InstanceOf:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-658998692584342514L","position":"org.easymock.internal.matchers.StartsWith:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(float , float))","position":"org.easymock.EasyMock:1847","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"annotation":"annotation"},"name":"add","transplant":{"sourceCode":"java.lang.String java.lang.String = org.easymock.Mock.java.lang.String()","position":"org.easymock.internal.Injector:117","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType()","position":"org.easymock.internal.Injector:121","type":"CtLocalVariableImpl"},"status":-2},{"failures":[0,225,225,226,226,1,2,3,4,5,6,7,8,9,294,10,11,12,13,14,295,15,16,296,227,17,18,19,20,21,22,228,229,230,231,23,232,24,25,233,234,26,27,235,236,28,297,298,299,300,301,302,303,304,237,238,239,240,241,242,243,244,245,29,246,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,305,50,51,52,53,54,247,55,56,57,58,59,60,61,62,63,64,65,306,66,67,68,69,70,248,249,250,251,252,253,71,254,72,73,74,75,76,307,308,309,310,77,311,255,256,78,79,80,312,313,257,81,82,83,258,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,314,315,316,317,318,319,320,321,322,323,324,325,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,259,260,121,261,122,262,263,123,124,125,126,264,127,128,265,129,130,266,131,132,133,134,135,136,267,137,138,139,140,268,141,142,143,144,269,270,271,272,145,146,273,274,147,275,276,277,278,279,148,149,150,151,152,153,280,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,281,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,282,283,196,284,197,198,285,286,287,199,200,201,202,203,204,288,205,289,290,206,291,207,208,209,210,292,211,212,213,214,215,216,217,218,219,293,220,221,222,223,224,326,327,328,329],"variableMapping":{"state":"state"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","position":"org.easymock.internal.MocksControl:222","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.replay()","position":"org.easymock.internal.MocksControl:212","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return ((int) <= int) && (int <= (int))","position":"org.easymock.internal.Range:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>[][int].isPrimitive()","position":"org.easymock.internal.Invocation:139","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","position":"org.easymock.EasyMock:2123","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.Injection org.easymock.internal.Injection = org.easymock.internal.Injector.org.easymock.internal.Injector.findUniqueAssignable(java.util.List<org.easymock.internal.Injection>, org.easymock.internal.InjectionTarget)","position":"org.easymock.internal.Injector:188","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:414","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:161","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:70","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","position":"org.easymock.internal.DefaultClassInstantiator:188","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","position":"org.easymock.internal.MockBuilder:121","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ThrowingAnswer() , true)","position":"org.easymock.internal.Result:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResult org.easymock.internal.ExpectedInvocationAndResult : java.util.List<org.easymock.internal.ExpectedInvocationAndResult>) {\n    if (org.easymock.internal.ExpectedInvocationAndResult.getExpectedInvocation().matches(org.easymock.internal.Invocation)) {\n        return org.easymock.internal.ExpectedInvocationAndResult.getResult();\n    } \n}","position":"org.easymock.internal.MocksBehavior:65","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:212","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<org.easymock.internal.UnorderedBehavior>.isEmpty()) || (!(org.easymock.internal.MocksBehavior.lastBehaviorList().allowsExpectedInvocation(org.easymock.internal.ExpectedInvocation, boolean)))) {\n    java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean));\n} ","position":"org.easymock.internal.MocksBehavior:74","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.UnorderedBehavior:105","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.Injector:73","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:195","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof char[]) && ((java.lang.Object == null) || (java.lang.Object instanceof char[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:40","type":"CtIfImpl"},"status":-2},{"failures":[330,331],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:195","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.Capture<T>.reset()","position":"org.easymock.Capture:118","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.ReflectionUtils:228","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","position":"org.easymock.Capture:79","type":"CtIfImpl"},"status":-2},{"failures":[332],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n    if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n        java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:382","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:90","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:116","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","position":"org.easymock.Capture:80","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:288","type":"CtThrowImpl"},"status":-2},{"failures":[266],"binaryOperator":"((java.lang.Number.doubleValue()) + (java.lang.Number.doubleValue()))","name":"math","position":"org.easymock.internal.matchers.EqualsWithDelta:41","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:183","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","position":"org.easymock.EasyMock:1763","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = ((org.easymock.internal.Invocation)(java.lang.Object))","position":"org.easymock.internal.Invocation:97","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:259","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>(java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size())","position":"org.easymock.internal.UnorderedBehavior:83","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount())) {\n    return false;\n} ","position":"org.easymock.internal.UnorderedBehavior:75","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>).append(\")\")","position":"org.easymock.internal.matchers.Captures:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"continue","position":"org.easymock.internal.UnorderedBehavior:90","type":"CtContinueImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","position":"org.easymock.internal.MethodSerializationWrapper:69","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException)","position":"org.easymock.internal.ClassProxyFactory:214","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isArray()) {\n    final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n            return false;\n        } \n        break;\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:196","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","position":"org.easymock.internal.ErrorMessage:54","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(((((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol())) + \" 0\"))","position":"org.easymock.internal.matchers.Compare:47","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<org.easymock.internal.Result>.get(int)","position":"org.easymock.internal.Results:74","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:94","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.Invocation:221","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.Invocation:211","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"count":"i","maximum":"i","minimum":"i"},"name":"add","transplant":{"sourceCode":"return (int <= int) && (int <= int)","position":"org.easymock.internal.Range:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:193","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type != null) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} ","position":"org.easymock.internal.BridgeMethodResolver:338","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1660","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(org.easymock.internal.Invocation.getMockAndMethodName())","position":"org.easymock.internal.ExpectedInvocation:104","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:119","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.InstantiationException java.lang.InstantiationException","position":"org.easymock.internal.AndroidClassProxyFactory:52","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"toStringMethod"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:122","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:289","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"continue","position":"org.easymock.internal.Injector:114","type":"CtContinueImpl"},"status":-2},{"failures":[25,234,235,236,254,72,74,75,78,79,80,86,140,268,270,271,155,157,158,326,327,328,329],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Results.getMainInterval().expectedCount()","position":"org.easymock.internal.Results:86","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:355","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.reflect.Constructor<?>","position":"org.easymock.ConstructorArgs:101","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int])","position":"org.easymock.internal.DefaultClassInstantiator:125","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.Injector:129","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1458","type":"CtInvocationImpl"},"status":-2},{"failures":[172,174],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.Capture<T>.reset()","position":"org.easymock.Capture:118","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.get(java.lang.Class<?>)","position":"org.easymock.internal.RecordState:229","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","position":"org.easymock.internal.MockInvocationHandler:38","type":"CtInvocationImpl"},"status":-2},{"failures":[333,216],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","position":"org.easymock.internal.ReplayState:149","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:434","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"isThreadSafe":"checkOrder"},"name":"add","transplant":{"sourceCode":"return this.boolean","position":"org.easymock.internal.MocksBehavior:189","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.isEmpty()) || (!(this.boolean))) {\n    return true;\n} else {\n    final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.get(((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size()) - 1)).getExpectedInvocation();\n    return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation);\n}","position":"org.easymock.internal.UnorderedBehavior:104","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:202","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1471","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(double , double))","position":"org.easymock.EasyMock:1831","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection)","position":"org.easymock.internal.InjectionPlan:53","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-1726286682930686024L","position":"org.easymock.internal.ObjectMethodsFilter:29","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"isA(\" + (java.lang.Class<?>.getName()))","name":"math","position":"org.easymock.internal.matchers.InstanceOf:40","type":"mutation","status":-2},{"failures":[],"variableMapping":{"behavior":"behavior"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","position":"org.easymock.internal.ReplayState:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","position":"org.easymock.internal.RecordState:146","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object));\n} ","position":"org.easymock.internal.ObjectMethodsFilter:85","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1205","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:225","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1304","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-551735356674347591L","position":"org.easymock.internal.matchers.InstanceOf:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Set<java.lang.reflect.Method>.add(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:74","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:972","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)))","position":"org.easymock.internal.MocksControl:157","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"binaryOperator":"\"Answer throwing \" + java.lang.Throwable","name":"math","position":"org.easymock.internal.ThrowingAnswer:51","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.verify()","position":"org.easymock.internal.ReplayState:73","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.InputStream.close()","position":"org.easymock.internal.EasyMockProperties:70","type":"CtInvocationImpl"},"status":-2},{"failures":[16,20,21,232,24,27,242,243,244,245,29,246,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,62,79,89,91,92,93,94,95,96,138,144,273,274,147,275,211],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:107","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:46","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"type":"clazz"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:388","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1191","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ExpectedInvocation","position":"org.easymock.internal.ExpectedInvocationAndResults:37","type":"CtReturnImpl"},"status":-2},{"failures":[233,254,334,335,336,337],"variableMapping":{"buffer":"buffer","value":"value"},"name":"add","transplant":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:38","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"status":-1},{"failures":[260,123,167],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.Or:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object != null) && (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))","position":"org.easymock.internal.matchers.InstanceOf:36","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:167","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:365","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1373","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.ExpectedInvocation:98","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","position":"org.easymock.internal.ClassProxyFactory:269","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<?>.getSigners()) != null) {\n    net.sf.cglib.proxy.Enhancer.setNamingPolicy(org.easymock.internal.ClassProxyFactory.net.sf.cglib.core.NamingPolicy);\n} ","position":"org.easymock.internal.ClassProxyFactory:273","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Float>(float))","position":"org.easymock.EasyMock:1025","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"status":-2},{"failures":[289],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:275","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:466","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"result":"result"},"name":"add","transplant":{"sourceCode":"if (org.easymock.internal.Result != null) {\n    return org.easymock.internal.Result;\n} ","position":"org.easymock.internal.MocksBehavior:88","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.ExpectedInvocationAndResult:41","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","position":"org.easymock.EasyMock:693","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.setAccessible(boolean)","position":"org.easymock.internal.DefaultClassInstantiator:196","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"c":"c"},"name":"add","transplant":{"sourceCode":"org.easymock.IMocksControl.resetToNice()","position":"org.easymock.EasyMockSupport:573","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.resetToDefault()","position":"org.easymock.EasyMockSupport:584","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1026","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return float","position":"org.easymock.EasyMock:1409","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && ((((java.lang.String)(java.lang.Object)).indexOf(java.lang.String)) >= 0)","position":"org.easymock.internal.matchers.Contains:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","position":"org.easymock.internal.Range:41","type":"CtThrowImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":92,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":73,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":205,"org.easymock.tests2.MockedExceptionTest.testRealException":275,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":333,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":45,"org.easymock.tests.UsageVarargTest.varargIntAccepted":52,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":23,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":120,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":0,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":212,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":300,"org.easymock.tests2.UsageConstraintsTest.testContains":264,"org.easymock.tests.UsageCallCountTest.tooManyCalls":85,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":317,"org.easymock.tests2.UsageConstraintsTest.testFind":261,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":332,"org.easymock.tests.UsageVarargTest.allKinds":59,"org.easymock.tests2.StubTest.stubWithReturnValue":211,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":170,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":231,"org.easymock.tests2.CaptureTest.testCaptureAll":166,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":87,"org.easymock.samples.ExampleTest.addAndChangeDocument":10,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":282,"org.easymock.tests.UsageVarargTest.varargCharAccepted":53,"org.easymock.tests2.CaptureTest.testCaptureFromStub":281,"org.easymock.tests.UsageVerifyTest.twoThrows":79,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":19,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":54,"org.easymock.tests2.DelegateToTest.testReturnException":150,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":142,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":129,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":223,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":154,"org.easymock.tests2.CaptureTest.testAnd":165,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":325,"org.easymock.tests.UsageStrictMockTest.testVerify":307,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":38,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":15,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":174,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":42,"org.easymock.tests2.UsageConstraintsTest.testMatches":265,"org.easymock.tests.MockClassControlTest.testToString":299,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":238,"org.easymock.tests2.UsageConstraintsTest.testNull":122,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":187,"org.easymock.tests2.EasyMockSupportClassTest.testAll":207,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":324,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":218,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":46,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":113,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":164,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":17,"org.easymock.tests.UsageThrowableTest.throwError":89,"org.easymock.tests2.UsageConstraintsTest.greaterThan":130,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":50,"org.easymock.samples.SupportTest.addDocument":2,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":22,"org.easymock.tests2.StubTest.stub":292,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":320,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":318,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":69,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":18,"org.easymock.tests.UsageExpectAndReturnTest.object":110,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":119,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":131,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":220,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":58,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":159,"org.easymock.tests.UsageExpectAndThrowTest.object":40,"org.easymock.tests2.DelegateToTest.testWrongClass":152,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":180,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":244,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":334,"org.easymock.tests2.UsageTest.moreThanOneArgument":140,"org.easymock.tests.UsageVarargTest.varargByteAccepted":57,"org.easymock.tests.MockClassControlTest.testEquals":303,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":37,"org.easymock.samples.ExampleTest.voteAgainstRemoval":7,"org.easymock.tests.UsageTest.wrongArguments":234,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":240,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":95,"org.easymock.tests.UsageVarargTest.varargShortAccepted":55,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":310,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":41,"org.easymock.tests2.UsageTest.defaultResetToNice":269,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":335,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":336,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":147,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":68,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":1,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":181,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":198,"org.easymock.tests2.MockBuilderTest.testCreateMock":285,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":297,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":182,"org.easymock.tests2.SerializationTest.testAllMockedMethod":162,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":314,"org.easymock.tests2.NameTest.nameForMocksControl":329,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":319,"org.easymock.samples.ExampleTest.voteAgainstRemovals":4,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":280,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":295,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":255,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":21,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":60,"org.easymock.tests2.CaptureTest.testCapture1_2446744":169,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":145,"org.easymock.tests.LimitationsTest.mockNativeMethod":97,"org.easymock.tests2.DelegateToTest.testStubDelegate":151,"org.easymock.tests.UsageUnorderedTest.message":86,"org.easymock.samples.ExampleTest.answerVsDelegate":5,"org.easymock.samples.ExampleTest.voteForRemoval":6,"org.easymock.tests.UsageCallCountTest.tooFewCalls":81,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":109,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":83,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":184,"org.easymock.tests.UsageVerifyTest.twoReturns":80,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":39,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":104,"org.easymock.tests2.DependencyTest.testInterfaceMocking":194,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":213,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":296,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":243,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":216,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":279,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":123,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":76,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":228,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":106,"org.easymock.tests2.CaptureTest.testCaptureRightOne":175,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":257,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":229,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":315,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":273,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":204,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":311,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":316,"org.easymock.tests2.UsageConstraintsTest.cmpTo":126,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":312,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":111,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":189,"org.easymock.tests2.MockedExceptionTest.testMockedException":274,"org.easymock.tests.UsageThrowableTest.throwCheckedException":93,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":49,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":135,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":250,"org.easymock.samples.PartialClassMockTest.testGetArea":11,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":78,"org.easymock.samples.ExampleTest.voteForRemovals":9,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":91,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":62,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":128,"org.easymock.samples.ConstructorCalledMockTest.testTax":225,"org.easymock.tests.ReplayStateInvalidUsageTest.times":322,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":16,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":245,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":203,"org.easymock.tests2.UsageTest.argumentsOrdered":271,"org.easymock.samples.ExampleTest.removeNonExistingDocument":294,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":24,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":186,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":105,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":237,"org.easymock.tests2.AnswerTest.answer":183,"org.easymock.tests.MockingTest.testNicePartialClassMocking":64,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":72,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":101,"org.easymock.tests2.UsageConstraintsTest.any":125,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":108,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":70,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":252,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":222,"org.easymock.tests.UsageExpectAndThrowTest.longType":33,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":47,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":149,"org.easymock.tests2.CallbackTest.callback":163,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":209,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":293,"org.easymock.tests2.NameTest.nameForMock":326,"org.easymock.tests.UsageTest.argumentsOrdered":236,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":121,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":197,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":127,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":118,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":20,"org.easymock.tests2.MockBuilderTest.testCreateMockString":287,"org.easymock.tests2.NameTest.nameForStrictMock":327,"org.easymock.tests2.CaptureTest.testCaptureNone":173,"org.easymock.tests2.SerializationTest.test":161,"org.easymock.tests.UsageExpectAndReturnTest.longType":103,"org.easymock.tests2.SerializationTest.testClass":160,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":171,"org.easymock.tests2.CaptureTest.testCaptureFirst":177,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":132,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":12,"org.easymock.tests2.UsageTest.niceToStrict":141,"org.easymock.tests2.EasyMockSupportTest.testVerify":224,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":242,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":308,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":241,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":284,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":253,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":35,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":134,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":138,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":43,"org.easymock.tests2.UsageTest.strictResetToDefault":139,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":117,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":206,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":286,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":232,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":30,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":124,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":107,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":191,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":276,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":288,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":51,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":202,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":266,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":199,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":246,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":65,"org.easymock.tests2.UsageConstraintsTest.testOr":263,"org.easymock.tests2.DelegateToTest.testDelegate":153,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":179,"org.easymock.tests2.UsageConstraintsTest.testNotNull":136,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":156,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":146,"org.easymock.tests.MockClassControlTest.testHashCode":302,"org.easymock.tests2.CaptureTest.testCapture_2617107":167,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":331,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":323,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":88,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":96,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":112,"org.easymock.tests2.ThreadingTest.testThreadSafe":178,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":144,"org.easymock.tests.UsageThrowableTest.noUpperLimit":90,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":249,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":188,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":190,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":221,"org.easymock.tests.UsageExpectAndReturnTest.floatType":102,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":214,"org.easymock.tests2.UsageTest.wrongArguments":268,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":278,"org.easymock.tests2.UsageConstraintsTest.testSame":262,"org.easymock.tests2.UsageTest.resumeIfFailure":272,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":301,"org.easymock.tests.UsageOverloadedMethodTest.overloading":61,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":192,"org.easymock.samples.SupportTest.voteForRemovals":3,"org.easymock.tests.UsageRangeTest.combination":77,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":94,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":226,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":267,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":99,"org.easymock.tests.UsageTest.openCallCountByLastCall":26,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":36,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":330,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":321,"org.easymock.tests2.NameTest.nameForNiceMock":328,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":256,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":133,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":248,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":155,"org.easymock.tests2.CaptureTest.testPrimitive":168,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":201,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":114,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":44,"org.easymock.samples.BasicClassMockTest.testPrintContent":13,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":230,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":66,"org.easymock.tests.UsageExpectAndThrowTest.floatType":32,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":289,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":84,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":115,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":148,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":200,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":313,"org.easymock.tests2.UsageStrictMockTest.differentMethods":158,"org.easymock.tests.UsageTest.exactCallCountByLastCall":28,"org.easymock.tests2.AnswerTest.stubAnswer":185,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":215,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":219,"org.easymock.tests2.CaptureTest.testCaptureLast":172,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":31,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":258,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":82,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":195,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":208,"org.easymock.tests.UsageStrictMockTest.range":74,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":27,"org.easymock.tests.UsageTest.unexpectedCallWithArray":233,"org.easymock.tests.MockingTest.testPartialClassMocking":63,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":116,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":270,"org.easymock.tests2.UsageConstraintsTest.constraints":260,"org.easymock.samples.ExampleTest.addDocument":8,"org.easymock.tests2.UsageConstraintsTest.lessThan":137,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":227,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":277,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":235,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":14,"org.easymock.tests.UsageVarargTest.varargLongAccepted":56,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":251,"org.easymock.tests.ObjectMethodsTest.testHashCode":309,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":290,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":291,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":254,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":48,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":337,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":210,"org.easymock.tests2.UsageStrictMockTest.range":157,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":193,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":239,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":305,"org.easymock.tests.UsageTest.moreThanOneArgument":25,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":67,"org.easymock.tests2.UsageTest.openCallCountByLastCall":143,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":304,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":283,"org.easymock.tests.UsageStrictMockTest.differentMethods":75,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":217,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":259,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":298,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":196,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":34,"org.easymock.tests.DefaultClassInstantiatorTest.object":306,"org.easymock.tests.UsageVarargTest.differentLength":247,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":100,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":29,"org.easymock.tests2.CaptureTest.testCapture2_2446744":176,"org.easymock.tests.GenericTest.testPackageScope":98}}]

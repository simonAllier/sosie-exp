[{"transplant":{"position":"org.easymock.internal.ArgumentToString:83","sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:84","sourceCode":"java.lang.Object[] = new java.lang.Object[0]","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:373","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:217","failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171],"status":-1,"binaryOperator":"(boolean) && ((org.easymock.internal.Result) == null)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[172,173,174],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[175,26,27,28,30,32,33,34,35,36,176,37,177,56,178,179,180,181,82,86,90,91,93,98,182,183,184,185,186,187,142,144,145,146,188,189,148,149,150,151,190,155,156,157,160,191,192,167,168],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[38,40,47,177,49,50,193,51,194,57,62],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"failures":[195,196,197],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[38,40,47,177,49,50,193,51,194,57,62],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1848","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[18,198,199,200,201,202,203,204,81,205],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[34,56,101],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:120","sourceCode":"return ((java.lang.String)(java.util.Properties.remove(java.lang.String)))","type":"CtReturnImpl"},"failures":[103,206,207,208,182,104,183,209,210,123,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,139,140,227,228,229,230,231,232,166,233,234,235,236,169,170,171,237],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[238,239],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[240,241,242,243,244,245],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"propertyFileName":"propertyFileName","properties":"properties","in":"in"}},{"transplant":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[196,246,27,30,37,247,110,248,145,188,151,249,250,251,252,253,168],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"value"}},{"position":"org.easymock.internal.Range:52","failures":[2,17,25,27,28,30,254,32,255,256,35,36,37,50,257,53,54,62,258,259,260,261,262,79,115,129,138,263,264,265,142,143,145,146,188,266,148,267,268,149,150,151,152,154,156,157,269,270,167,168],"status":-1,"binaryOperator":"(int) == (int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"this.org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"failures":[178,180,182,210],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1816","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:34","failures":[25,27,28,254,32,35,36,271,272,273,274,275,276,277,278,279,280,281,56,282,283,108,284,121,122,285,286,287,288,289,290,185,142,143,145,146,266,189,148,149,150,157,270,167,168],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[291,292,25,38,39,40,41,293,42,43,44,45,46,47,294,295,48,296,297,177,49,298,50,257,193,51,52,194,53,54,299,55,300,301,56,302,303,57,58,59,60,61,62,258,304,83,103,109,110,111,112,248,305,138,142,143,157,306,307,308,309,310,311,312,313,314],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MockInvocationHandler:37","failures":[],"status":0,"binaryOperator":"(org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:161","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    return java.lang.reflect.Constructor<T>;\n} ","type":"CtIfImpl"},"failures":[18,198,199,200,202,203,204,81,205],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:318","failures":[113,116],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.EasyMock:773","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:330","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[172,173,174],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"failures":[315],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[316,317],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[38,40,47,177,49,50,193,51,194,57,62],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MocksControl:189","failures":[23,318,319,320,321,175,26,27,28,30,32,33,34,322,35,36,37,177,323,324,68,69,180,181,70,87,89,90,325,92,326,208,327,328,329,330,187,142,144,145,146,188,189,148,149,150,151,157,167,168,331,332,333,334,335],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"failures":[18,67,336,204,179,181,81,205,206,104,210,226,227],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:361","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[27,28,255,256,297,177,298,257,193,299,301,303,258,114,264,265,145,146,267,268,337,269,338,160,270],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.Range:83","sourceCode":"return (this.int) == (this.int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:52","sourceCode":"return (int) == (int)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"maximum":"maximum","java.lang.Integer.MAX_VALUE":"minimum"}},{"transplant":{"position":"org.easymock.internal.MocksControl:88","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:231","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[339],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[18,198,199,200,202,203,204,81,205],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:123","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"equalsMethod"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:79","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"failures":[1,3,4,5,6,7,8,9,11,12,13,14,20,24,26,27,28,29,32,34,35,36,39,40,42,43,44,45,48,60,67,88,93,94,95,96,111,114,121,122,123,129,130,131,132,133,134,135,136,137,138,140,141,142,144,145,146,147,148,149,150,152,153,154,155,156,157],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[51],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:116","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:66","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))","type":"CtLocalVariableImpl"},"failures":[340,341,342,343,203,344,345,74,78,346,205],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"f":"field"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:281","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[198,199,200,347,348,203,205],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":49,"org.easymock.tests2.UsageTest.argumentsOrdered":36,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":188,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":94,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":197,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":34,"org.easymock.tests2.StubTest.stubWithReturnValue":246,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":203,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":61,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":14,"org.easymock.tests2.SerializationTest.testAllMockedMethod":20,"org.easymock.tests2.DelegateToTest.testReturnException":15,"org.easymock.tests.MockingTest.testPartialClassMocking":169,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":279,"org.easymock.samples.SupportTest.voteForRemovals":12,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":226,"org.easymock.tests.MockClassControlTest.testToString":213,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":210,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":64,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":316,"org.easymock.tests.UsageExpectAndThrowTest.object":127,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":58,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":22,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":198,"org.easymock.tests2.DelegateToTest.testWrongClass":16,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":313,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":314,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":52,"org.easymock.tests2.UsageTest.wrongArguments":32,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":109,"org.easymock.tests.UsageStrictMockTest.range":145,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":329,"org.easymock.samples.ExampleTest.answerVsDelegate":2,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":325,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":230,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":72,"org.easymock.tests2.UsageConstraintsTest.testNull":50,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":100,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":218,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":93,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":68,"org.easymock.tests2.CaptureTest.testPrimitive":41,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":248,"org.easymock.tests.UsageTest.moreThanOneArgument":266,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":149,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":328,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":99,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":285,"org.easymock.tests2.CaptureTest.testCaptureNone":45,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":241,"org.easymock.tests.UsageUnorderedTest.message":157,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":191,"org.easymock.tests.UsageVerifyTest.twoReturns":168,"org.easymock.tests.UsageVarargTest.varargByteAccepted":136,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":263,"org.easymock.tests.UsageTest.argumentsOrdered":150,"org.easymock.tests.UsageVarargTest.varargIntAccepted":131,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":154,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":8,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":280,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":306,"org.easymock.tests2.CaptureTest.testCapture_2617107":40,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":281,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":348,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":323,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":251,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":112,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":324,"org.easymock.tests2.UsageConstraintsTest.any":53,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":310,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":252,"org.easymock.tests.UsageExpectAndThrowTest.longType":125,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":275,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":223,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":26,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":70,"org.easymock.tests2.SerializationTest.testClass":18,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":23,"org.easymock.tests.LimitationsTest.mockNativeMethod":166,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":227,"org.easymock.tests2.AnswerTest.answer":79,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":194,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":0,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":321,"org.easymock.tests2.CaptureTest.testAnd":38,"org.easymock.tests2.UsageTest.strictResetToDefault":31,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":343,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":208,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":29,"org.easymock.tests2.NameTest.nameForMocksControl":262,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":242,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":89,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":268,"org.easymock.tests2.DelegateToTest.testDelegate":17,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":171,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":97,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":69,"org.easymock.tests.MockingTest.testNicePartialClassMocking":170,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":128,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":102,"org.easymock.tests.LimitationsTest.mockFinalMethod":233,"org.easymock.tests2.CaptureTest.testCaptureLast":44,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":305,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":122,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":78,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":51,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":335,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":59,"org.easymock.tests.MockingTest.testTwoMocks":236,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":121,"org.easymock.tests2.CaptureTest.testCapture1_2446744":293,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":346,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":319,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":35,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":258,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":245,"org.easymock.tests.UsageThrowableTest.throwError":113,"org.easymock.tests.UsageStrictMockTest.differentMethods":146,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":244,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":221,"org.easymock.tests2.ConstraintsToStringTest.andToString":278,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":192,"org.easymock.tests2.MockBuilderTest.testCreateMockString":181,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":211,"org.easymock.tests.UsageExpectAndThrowTest.floatType":124,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":339,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":80,"org.easymock.tests.UsageVerifyTest.twoThrows":167,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":282,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":65,"org.easymock.samples.PartialClassMockTest.testGetArea":10,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":307,"org.easymock.samples.ExampleTest.voteAgainstRemoval":4,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":250,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":104,"org.easymock.tests2.UsageTest.niceToStrict":33,"org.easymock.tests.LimitationsTest.privateConstructor":232,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":341,"org.easymock.tests2.UsageConstraintsTest.testNotNull":62,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":120,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":172,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":67,"org.easymock.tests2.UsageTest.defaultResetToNice":322,"org.easymock.tests2.MockBuilderTest.testCreateMock":179,"org.easymock.samples.ExampleTest.voteAgainstRemovals":1,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":165,"org.easymock.tests.UsageVarargTest.differentLength":186,"org.easymock.tests2.CallbackTest.callback":82,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":288,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":206,"org.easymock.tests.UsageTest.openCallCountByLastCall":267,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":272,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":90,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":296,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":327,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":111,"org.easymock.tests.UsageCallCountTest.tooFewCalls":152,"org.easymock.tests.UsageOverloadedMethodTest.overloading":159,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":300,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":107,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":75,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":158,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":55,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":46,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":330,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":243,"org.easymock.tests.UsageThrowableTest.throwCheckedException":117,"org.easymock.tests.MockClassControlTest.testEquals":217,"org.easymock.tests2.EasyMockSupportClassTest.testAll":63,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":140,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":287,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":277,"org.easymock.tests.MockingTest.testStrictClassMocking":234,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":333,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":320,"org.easymock.tests2.CaptureTest.testCaptureAll":39,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":312,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":77,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":74,"org.easymock.tests2.UsageConstraintsTest.testMatches":301,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":76,"org.easymock.samples.ExampleTest.voteForRemovals":6,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":347,"org.easymock.tests2.NameTest.nameForNiceMock":261,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":84,"org.easymock.tests.UsageVarargTest.allKinds":138,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":270,"org.easymock.tests2.DependencyTest.testInterfaceMocking":21,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":200,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":334,"org.easymock.samples.BasicClassMockTest.testPrintContent":9,"org.easymock.samples.ExampleTest.addDocument":5,"org.easymock.tests2.DelegateToTest.testStubDelegate":196,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":119,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":175,"org.easymock.tests2.AnswerTest.stubAnswer":247,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":143,"org.easymock.tests2.UsageConstraintsTest.greaterThan":302,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":202,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":336,"org.easymock.tests.UsageVarargTest.varargLongAccepted":135,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":183,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":147,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":249,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":225,"org.easymock.samples.ExampleTest.voteForRemoval":3,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":209,"org.easymock.tests.UsageExpectAndReturnTest.floatType":161,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":326,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":81,"org.easymock.tests2.ConstraintsToStringTest.orToString":271,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":303,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":283,"org.easymock.tests.UsageThrowableTest.noUpperLimit":114,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":297,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":30,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":123,"org.easymock.tests2.SerializationTest.test":19,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":42,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":204,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":220,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":87,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":115,"org.easymock.tests2.UsageConstraintsTest.testSame":257,"org.easymock.samples.SupportTest.addDocument":11,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":195,"org.easymock.tests2.CaptureTest.testCaptureFirst":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":317,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":88,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":37,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":284,"org.easymock.tests.GenericTest.testPackageScope":139,"org.easymock.tests2.CaptureTest.testCapture2_2446744":295,"org.easymock.tests2.UsageTest.moreThanOneArgument":254,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":83,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":180,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":137,"org.easymock.tests.GenericTest.testBridgedEquals":228,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":315,"org.easymock.tests2.NameTest.nameForMock":259,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":155,"org.easymock.tests.UsageExpectAndReturnTest.longType":162,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":331,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":85,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":239,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":60,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":345,"org.easymock.tests2.UsageStrictMockTest.differentMethods":28,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":207,"org.easymock.tests.UsageCallCountTest.tooManyCalls":156,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":286,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":337,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":289,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":25,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":126,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":110,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":118,"org.easymock.tests.MockingTest.testNiceClassMocking":237,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":73,"org.easymock.tests.MockingTest.testClassMocking":235,"org.easymock.tests2.UsageConstraintsTest.testContains":299,"org.easymock.tests2.NameTest.nameForStrictMock":260,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":238,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":71,"org.easymock.tests2.UsageConstraintsTest.testFind":298,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":269,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":291,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":174,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":101,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":292,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":187,"org.easymock.tests.UsageExpectAndReturnTest.object":164,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":222,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":57,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":103,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":178,"org.easymock.tests2.UsageStrictMockTest.range":27,"org.easymock.tests2.UsageConstraintsTest.lessThan":304,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":92,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":199,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":133,"org.easymock.tests.UsageTest.exactCallCountByLastCall":151,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":311,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":201,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":86,"org.easymock.tests2.CaptureTest.testCaptureRightOne":47,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":264,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":240,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":290,"org.easymock.tests2.UsageConstraintsTest.testOr":193,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":205,"org.easymock.tests.UsageRangeTest.combination":160,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":98,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":129,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":106,"org.easymock.tests.UsageTest.wrongArguments":148,"org.easymock.tests2.MockBuilderTest.testWithConstructor":342,"org.easymock.tests.MockClassControlTest.testHashCode":216,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":212,"org.easymock.tests2.EasyMockSupportTest.testVerify":96,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":163,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":338,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":274,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":265,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":224,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":105,"org.easymock.tests.UsageVarargTest.varargShortAccepted":134,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":318,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":184,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":190,"org.easymock.tests2.UsageConstraintsTest.cmpTo":54,"org.easymock.tests.UsageVarargTest.varargCharAccepted":132,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":24,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":253,"org.easymock.tests2.UsageTest.openCallCountByLastCall":255,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":256,"org.easymock.tests.DefaultClassInstantiatorTest.object":219,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":95,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":173,"org.easymock.tests2.CaptureTest.testCaptureFromStub":294,"org.easymock.tests.UsageTest.unexpectedCallWithArray":189,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":185,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":116,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":142,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":153,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":344,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":215,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":144,"org.easymock.tests2.UsageConstraintsTest.constraints":177,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":182,"org.easymock.samples.ExampleTest.addAndChangeDocument":7,"org.easymock.tests2.ConstraintsToStringTest.notToString":273,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":13,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":276,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":214,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":66,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":141,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":332,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":43,"org.easymock.tests2.UsageTest.resumeIfFailure":176,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":308,"org.easymock.tests.LimitationsTest.abstractClass":231,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":229,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":309,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":108,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":91,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":130}}]

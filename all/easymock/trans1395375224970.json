[{"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1915","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","type":"CtInvocationImpl"},"failures":[1,2,3,4,5,6,7,8,9],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[10,11],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"mock"}},{"position":"org.easymock.EasyMock:2124","failures":[12,13,14,15,16,17,18],"status":-1,"binaryOperator":"org.easymock.internal.Invocation == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:58","sourceCode":"java.lang.String[][int] = java.lang.Class<?>[][int].getName()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:205","sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:149","sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cstr":"classConstructor"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:53","sourceCode":"return false","type":"CtReturnImpl"},"failures":[19],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:612","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2123","sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtLocalVariableImpl"},"failures":[20,14,17],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:44","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Void.java.lang.Class<java.lang.Void>, null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"failures":[21,22,23],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:288","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"position":"org.easymock.EasyMock:2124","failures":[12,13,14,15,16,17,18],"status":-1,"binaryOperator":"org.easymock.internal.Invocation == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:358","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:183","sourceCode":"net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"failures":[24],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:336","sourceCode":"org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:161","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    return java.lang.reflect.Constructor<T>;\n} ","type":"CtIfImpl"},"failures":[25,26,27,28,29,30,31,32,33],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:122","sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","type":"CtReturnImpl"},"failures":[34,35,36],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:269","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","type":"CtThrowImpl"},"failures":[37,38,39,40],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1581","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(boolean[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[41,42,43,44,45,46,25,47,48,49,50,51,52,53,54,55,56,57,58,32,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,21,96,97,98,99,100,101,102,103,104,105,106,107,108,109],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[110,111,112,113,114],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"failures":[12,20,115,13,14,116,117,41,42,43,44,45,46,25,118,119,120,121,122,123,124,125,126,127,128,129,15,17,130,47,131,132,133,134,135,136,48,137,138,139,140,141,142,143,144,145,146,147,148,19,49,149,150,151,152,153,154,155,156,11,157,158,159,160,161,162,163,164,165,1,166,2,167,3,4,5,168,169,6,7,8,9,170,171,172,173,50,174,175,176,51,177,178,52,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,53,54,55,197,56,198,199,0,57,58,110,200,32,201,202,203,204,205,206,207,70,208,209,71,72,210,211,212,213,214,215,216,73,74,217,218,219,220,221,221,222,222,223,224,225,226,18,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,75,76,77,251,78,79,80,81,252,253,254,255,256,257,258,112,113,114,259,37,38,260,39,40,261,262,82,83,84,85,86,87,263,264,265,266,267,268,269,270,271,95,21,96,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,97,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,98,99,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,100,101,102,103,335,104,105,336,106,337,338,339,340,107,108,109,341,342,343,344,345,22,23,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:269","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:124","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[342,345],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"failures":[21,22,23],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:51","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[12,20,115,13,14,116,117,41,42,43,44,45,46,118,120,362,121,122,123,124,125,126,15,17,130,47,131,132,133,134,135,136,48,137,138,139,140,141,142,363,143,144,145,146,147,148,19,49,149,150,151,152,153,154,155,156,11,157,1,166,2,167,3,4,5,168,169,6,7,8,9,170,171,364,172,173,50,174,175,176,51,177,178,52,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,53,54,55,197,56,198,199,0,57,58,110,200,205,70,208,72,217,218,220,223,224,225,226,18,227,228,229,230,231,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,75,76,77,251,78,79,80,81,252,253,254,255,365,257,258,112,113,114,259,37,38,260,39,40,262,82,83,84,85,86,87,263,366,367,368,369,264,265,266,267,268,269,270,271,95,21,96,272,273,274,275,276,277,278,279,280,281,285,286,287,288,289,290,97,291,292,293,294,370,371,372,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,98,99,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,100,101,102,103,335,104,105,336,106,337,338,339,340,107,108,109,341,342,343,344,345,22,23,346,347,348,349,350,354,355,356,357,358,359,360,361],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[373,374,260,39,40],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:906","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[151],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMockSupport:530","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.createNiceControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl() : org.easymock.EasyMockSupport.createControl()","type":"CtLocalVariableImpl"},"failures":[127,128,165,219,221,222],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:70","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","type":"CtIfImpl"},"failures":[12,20,115,13,14,116,117,41,42,43,44,45,46,25,118,119,120,121,122,123,124,125,126,127,128,129,15,17,130,47,131,132,133,134,135,136,48,137,138,139,140,141,142,143,144,145,146,147,148,19,49,149,150,151,152,153,154,155,156,11,157,158,159,160,161,162,163,164,165,1,166,2,167,3,4,5,168,169,6,7,8,9,170,171,172,173,50,174,175,176,51,177,178,52,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,53,54,55,197,56,198,199,0,57,58,110,200,32,201,202,203,204,205,206,207,70,208,209,71,72,210,211,212,213,214,215,216,73,74,217,218,219,220,221,221,222,222,223,224,225,226,18,227,228,229,230,375,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,75,76,77,251,78,79,80,81,252,253,254,255,256,257,258,112,113,114,259,37,38,376,377,378,379,380,381,382,383,384,385,386,374,387,260,39,40,261,262,82,83,84,85,86,87,388,263,389,264,265,266,267,268,269,270,271,95,21,96,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,97,291,292,293,294,370,371,390,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,98,99,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,100,101,102,103,335,104,105,336,106,337,338,339,340,107,108,109,341,342,343,344,345,22,23,346,347,348,349,350,351,352,353,354,391,355,356,357,358,359,360,361,392,393,394,395,396,397,398,399],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:106","sourceCode":"return org.easymock.IAnswer<?>.answer()","type":"CtReturnImpl"},"failures":[12,13,14,116,41,42,43,44,45,46,25,118,119,120,121,122,123,124,125,126,127,128,129,15,17,130,134,135,136,48,137,138,139,140,141,142,143,144,145,146,147,148,19,49,149,150,151,152,153,154,155,156,11,157,159,160,161,162,1,166,2,167,3,4,5,168,169,6,7,8,9,170,171,172,173,50,174,175,176,51,177,178,52,179,180,181,182,183,184,185,187,188,189,191,192,193,194,195,196,53,54,197,56,198,199,0,110,200,32,201,202,203,204,205,206,207,70,208,209,71,72,210,211,212,213,214,215,73,217,218,219,220,221,222,223,224,225,226,18,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,75,77,251,78,79,80,252,253,254,255,256,258,113,114,261,262,83,84,267,268,269,270,271,95,21,96,272,273,274,275,276,277,278,279,280,281,282,283,285,286,287,288,289,97,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,98,99,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,100,103,335,336,109,341,342,343,344,345,22,23,346,347,348,349,351,352,353,355,356,357,358,360,361],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:104","sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","type":"CtThrowImpl"},"failures":[363],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:122","sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:142","sourceCode":"return true","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":48,"org.easymock.tests2.UsageTest.argumentsOrdered":58,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":334,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":179,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":364,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":56,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":220,"org.easymock.tests2.DelegateToTest.testReturnException":187,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":240,"org.easymock.tests.MockingTest.testPartialClassMocking":351,"org.easymock.tests.MockClassControlTest.testToString":394,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":263,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":127,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":99,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":218,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":26,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":142,"org.easymock.tests2.UsageTest.wrongArguments":55,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":267,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":254,"org.easymock.samples.ExampleTest.answerVsDelegate":18,"org.easymock.tests2.UsageConstraintsTest.testNull":138,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":210,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":399,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":52,"org.easymock.tests2.CaptureTest.testPrimitive":167,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":271,"org.easymock.tests.UsageTest.moreThanOneArgument":100,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":333,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":72,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":274,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":106,"org.easymock.tests.UsageTest.argumentsOrdered":105,"org.easymock.tests.UsageVarargTest.varargIntAccepted":287,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":68,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":234,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":157,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":160,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":238,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":63,"org.easymock.tests.ReplayStateInvalidUsageTest.times":385,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":120,"org.easymock.tests2.AnswerTest.answer":12,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":363,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":111,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":195,"org.easymock.tests2.CaptureTest.testAnd":1,"org.easymock.tests2.UsageTest.strictResetToDefault":53,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":215,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":273,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":175,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":113,"org.easymock.tests2.DelegateToTest.testDelegate":191,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":340,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":329,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":243,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":281,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":107,"org.easymock.tests2.CaptureTest.testCapture1_2446744":3,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":36,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":327,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":193,"org.easymock.tests.UsageThrowableTest.throwError":342,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":379,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":367,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":276,"org.easymock.samples.PartialClassMockTest.testGetArea":219,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":380,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":235,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":265,"org.easymock.tests2.UsageTest.niceToStrict":197,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":315,"org.easymock.tests2.ThreadingTest.testChangeDefault":34,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":159,"org.easymock.tests2.MockBuilderTest.testCreateMock":163,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":60,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":323,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":176,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":38,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":354,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":252,"org.easymock.tests.UsageOverloadedMethodTest.overloading":246,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":147,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":84,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":245,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":306,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":146,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":6,"org.easymock.tests.MockClassControlTest.testEquals":398,"org.easymock.tests2.EasyMockSupportClassTest.testAll":126,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":283,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":65,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":331,"org.easymock.tests2.CaptureTest.testCaptureAll":166,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":194,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":279,"org.easymock.tests.MockNameTest.defaultName":365,"org.easymock.tests2.UsageConstraintsTest.testMatches":148,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":275,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":377,"org.easymock.samples.ExampleTest.voteForRemovals":230,"org.easymock.tests.UsageVarargTest.allKinds":294,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":95,"org.easymock.samples.BasicClassMockTest.testPrintContent":233,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":280,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":346,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":117,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":190,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":244,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":29,"org.easymock.tests2.UsageConstraintsTest.greaterThan":49,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":112,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":74,"org.easymock.samples.ExampleTest.voteForRemoval":227,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":122,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":368,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":213,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":196,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":256,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":31,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":373,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":50,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":344,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":239,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":186,"org.easymock.tests2.CaptureTest.testCaptureFirst":170,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":174,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":200,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":87,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":302,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":124,"org.easymock.tests2.CaptureTest.testCapture2_2446744":9,"org.easymock.tests2.UsageTest.moreThanOneArgument":54,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":164,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":293,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":360,"org.easymock.tests.UsageExpectAndReturnTest.longType":298,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":172,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":277,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":332,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":153,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":257,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":330,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":39,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":272,"org.easymock.tests.UsageCallCountTest.tooManyCalls":361,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":89,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":355,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":303,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":319,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":23,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":202,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":391,"org.easymock.tests2.UsageConstraintsTest.testContains":145,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":184,"org.easymock.tests2.UsageConstraintsTest.testFind":137,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":247,"org.easymock.tests.MockTypeTest.fromEasyMockClass":366,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":17,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":250,"org.easymock.tests.UsageExpectAndReturnTest.object":305,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":214,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":178,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":27,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":289,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":390,"org.easymock.tests.UsageTest.exactCallCountByLastCall":336,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":348,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":388,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":337,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":93,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":33,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":285,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":311,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":83,"org.easymock.tests.MockClassControlTest.testHashCode":397,"org.easymock.tests2.EasyMockSupportTest.testVerify":181,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":62,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":338,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":37,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":262,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":192,"org.easymock.tests.UsageVarargTest.varargCharAccepted":288,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":41,"org.easymock.tests2.UsageTest.openCallCountByLastCall":198,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":180,"org.easymock.tests.DefaultClassInstantiatorTest.object":376,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":259,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":370,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":94,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":321,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":345,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":396,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":216,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":320,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":312,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":260,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":129,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":64,"org.easymock.tests2.UsageTest.resumeIfFailure":110,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":242,"org.easymock.tests2.StubTest.stubWithReturnValue":208,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":30,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":154,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":304,"org.easymock.tests2.SerializationTest.testAllMockedMethod":119,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":248,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":67,"org.easymock.samples.SupportTest.voteForRemovals":224,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":326,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":249,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":20,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":389,"org.easymock.tests.UsageExpectAndThrowTest.object":324,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":151,"org.easymock.tests2.DelegateToTest.testWrongClass":189,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":109,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":341,"org.easymock.tests.UsageStrictMockTest.range":78,"org.easymock.samples.ConstructorCalledMockTest.testTax":221,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":177,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":201,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":325,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":161,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":104,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":374,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":253,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":88,"org.easymock.tests2.CaptureTest.testCaptureNone":169,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":266,"org.easymock.tests.UsageUnorderedTest.message":98,"org.easymock.tests.UsageVerifyTest.twoReturns":96,"org.easymock.tests.UsageVarargTest.varargByteAccepted":292,"org.easymock.tests2.ThreadingTest.testThreadSafe":121,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":358,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":232,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":372,"org.easymock.tests2.CaptureTest.testCapture_2617107":2,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":69,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":270,"org.easymock.tests2.UsageConstraintsTest.any":143,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":384,"org.easymock.tests2.StubTest.stub":70,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":40,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":241,"org.easymock.tests.UsageExpectAndThrowTest.longType":317,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":383,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":43,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":171,"org.easymock.tests2.SerializationTest.testClass":25,"org.easymock.tests.LimitationsTest.mockNativeMethod":261,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":284,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":314,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":46,"org.easymock.tests2.NameTest.nameForMocksControl":133,"org.easymock.tests2.MockedExceptionTest.testMockedException":183,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":335,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":16,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":318,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":353,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":209,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":162,"org.easymock.tests.MockingTest.testNicePartialClassMocking":352,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":212,"org.easymock.tests2.CaptureTest.testCaptureLast":168,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":108,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":141,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":207,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":152,"org.easymock.tests.MockingTest.testTwoMocks":350,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":295,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":322,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":57,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":156,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":35,"org.easymock.samples.ExampleTest.removeNonExistingDocument":375,"org.easymock.tests.UsageStrictMockTest.differentMethods":79,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":381,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":123,"org.easymock.tests2.ConstraintsToStringTest.andToString":66,"org.easymock.tests2.MockBuilderTest.testCreateMockString":165,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":392,"org.easymock.tests.UsageExpectAndThrowTest.floatType":316,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":19,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":13,"org.easymock.tests.UsageVerifyTest.twoThrows":21,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":82,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":128,"org.easymock.samples.ExampleTest.voteAgainstRemoval":228,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":264,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":73,"org.easymock.tests2.UsageConstraintsTest.testNotNull":155,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":182,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":347,"org.easymock.tests2.UsageTest.defaultResetToNice":0,"org.easymock.samples.ExampleTest.voteAgainstRemovals":226,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":310,"org.easymock.tests.UsageVarargTest.differentLength":290,"org.easymock.tests2.CallbackTest.callback":130,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":91,"org.easymock.tests.UsageTest.openCallCountByLastCall":103,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":134,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":269,"org.easymock.tests.UsageCallCountTest.tooFewCalls":356,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":204,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":255,"org.easymock.tests.UsageThrowableTest.throwCheckedException":22,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":90,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":206,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":349,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":203,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":362,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":386,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":205,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":116,"org.easymock.tests.ObjectMethodsTest.testHashCode":371,"org.easymock.tests2.NameTest.nameForNiceMock":132,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":125,"org.easymock.tests2.DependencyTest.testInterfaceMocking":217,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":28,"org.easymock.samples.ExampleTest.addDocument":229,"org.easymock.tests2.DelegateToTest.testStubDelegate":188,"org.easymock.tests2.AnswerTest.stubAnswer":14,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":77,"org.easymock.tests.UsageVarargTest.varargLongAccepted":291,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":80,"org.easymock.tests.UsageExpectAndReturnTest.floatType":297,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":313,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":32,"org.easymock.tests2.ConstraintsToStringTest.orToString":59,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":222,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":149,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":85,"org.easymock.tests.UsageThrowableTest.noUpperLimit":343,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":135,"org.easymock.tests2.SerializationTest.test":118,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":4,"org.easymock.tests2.UsageConstraintsTest.testSame":139,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":296,"org.easymock.samples.SupportTest.addDocument":223,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":382,"org.easymock.tests.GenericTest.testPackageScope":282,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":339,"org.easymock.tests2.NameTest.nameForMock":47,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":307,"org.easymock.tests2.UsageStrictMockTest.differentMethods":45,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":299,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":328,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":114,"org.easymock.tests2.MockedExceptionTest.testRealException":185,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":369,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":92,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":42,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":387,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":268,"org.easymock.tests2.NameTest.nameForStrictMock":131,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":15,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":211,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":150,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":158,"org.easymock.tests2.UsageStrictMockTest.range":44,"org.easymock.tests2.UsageConstraintsTest.lessThan":11,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":24,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":173,"org.easymock.tests2.CaptureTest.testCaptureRightOne":7,"org.easymock.tests2.UsageConstraintsTest.testOr":140,"org.easymock.tests.UsageRangeTest.combination":258,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":71,"org.easymock.tests.UsageTest.wrongArguments":102,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":393,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":300,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":308,"org.easymock.tests.UsageVarargTest.varargShortAccepted":97,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":359,"org.easymock.tests2.UsageConstraintsTest.cmpTo":144,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":115,"org.easymock.tests2.CompareToTest.testLessThan":10,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":199,"org.easymock.tests2.CaptureTest.testCaptureFromStub":8,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":378,"org.easymock.tests.UsageTest.unexpectedCallWithArray":101,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":76,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":357,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":309,"org.easymock.tests2.UsageConstraintsTest.constraints":136,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":251,"org.easymock.samples.ExampleTest.addAndChangeDocument":231,"org.easymock.tests2.ConstraintsToStringTest.notToString":61,"org.easymock.tests.UsageStrictMockTest.testVerify":81,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":225,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":75,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":278,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":5,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":236,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":301,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":86,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":237,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":51,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":286}}]

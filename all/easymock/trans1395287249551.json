[{"position":"org.easymock.internal.LastControl:48","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,129,130,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:62","sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","type":"CtIfImpl"},"failures":[66,160],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"throwable":"t"}},{"transplant":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable","state":"state"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[253,250,251,254],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:324","failures":[22,23,116],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.ErrorMessage:50","failures":[13,16,255,256,116,117,137],"status":-1,"binaryOperator":"int == 1","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[257,258,259,260,261,262],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:346","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[185],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[0,8,9,12,15,59,60,61,62,63,86,87,118,119,120,121,122,129,129,130,130,136,140,208,224,225,228,229,230,231,236,238,239,241,242,247,248,249],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[13,257,16,263,260,264,265,266,267,116,117,137,268,269,270],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[257,258,259,271,49,260,264,265,266,150,268,269,270,261,272,262,273],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[210],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Compare:52","failures":[240],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:129","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:416","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:148","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[274,275,276],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[84],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[277,278,279],"status":-1,"binaryOperator":"java.lang.String == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Captures:53","failures":[280,200,201,281,202,203,282,283,204,205,206,207,208,209,210],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:70","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:74","sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.LastControl:73","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"failures":[0,1,8,9,10,11,12,13,257,15,59,60,61,62,63,284,79,86,87,136,164,182,192,193,200,201,281,202,203,282,283,204,205,206,207,208,209,210,285,224,225,226,227,228,229,230,231,232,233,286,234,235,236,237,238,239,240,241,242,243,244,245,287,246,247,248,249],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[200,281,207,226,227,229,231,232,286,243,247],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1940","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"failures":[288,289],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:435","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n}","type":"CtForEachImpl"},"failures":[288,6,290,7,289],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[0,1,6,8,9,12,13,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,59,60,61,62,63,291,67,72,73,74,86,87,292,88,89,90,111,112,113,114,115,117,123,125,126,127,131,132,133,134,135,136,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,190,196,200,201,281,202,203,204,205,206,207,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,287,246,247,248,249,250,251],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"failures":[293],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"position":"org.easymock.EasyMock:1385","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1291","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1177","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:682","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[143,294,295,296,297,177,298,185],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:126","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[199],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:104","sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","type":"CtThrowImpl"},"failures":[286],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[253,250,251,254],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[299,250],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[300,233,238,249],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":227,"org.easymock.tests2.UsageTest.argumentsOrdered":270,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":48,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":221,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":78,"org.easymock.tests2.StubTest.stubWithReturnValue":140,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":246,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":35,"org.easymock.tests2.SerializationTest.testAllMockedMethod":254,"org.easymock.tests2.DelegateToTest.testReturnException":195,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":76,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":53,"org.easymock.tests.MockingTest.testPartialClassMocking":72,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":262,"org.easymock.samples.SupportTest.voteForRemovals":132,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":288,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":47,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":103,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":253,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":91,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":54,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":173,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":187,"org.easymock.tests.UsageExpectAndThrowTest.object":101,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":244,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":135,"org.easymock.tests2.DelegateToTest.testWrongClass":197,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":86,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":87,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":233,"org.easymock.tests2.UsageTest.wrongArguments":268,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":8,"org.easymock.tests.UsageStrictMockTest.range":16,"org.easymock.samples.ConstructorCalledMockTest.testTax":129,"org.easymock.samples.ExampleTest.answerVsDelegate":124,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":218,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":141,"org.easymock.tests2.UsageConstraintsTest.testNull":229,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":102,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":179,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":220,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":169,"org.easymock.tests2.CaptureTest.testPrimitive":202,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":12,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":265,"org.easymock.tests.UsageTest.moreThanOneArgument":49,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":110,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":178,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":258,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":120,"org.easymock.tests2.CaptureTest.testCaptureNone":205,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":70,"org.easymock.tests.UsageUnorderedTest.message":13,"org.easymock.tests.UsageVerifyTest.twoReturns":117,"org.easymock.tests2.ThreadingTest.testThreadSafe":161,"org.easymock.tests.UsageTest.argumentsOrdered":266,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":81,"org.easymock.tests2.CaptureTest.testCapture_2617107":281,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":59,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":273,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":11,"org.easymock.tests2.UsageConstraintsTest.any":234,"org.easymock.tests2.StubTest.stub":139,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":63,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":57,"org.easymock.tests.UsageExpectAndThrowTest.longType":94,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":77,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":274,"org.easymock.tests2.SerializationTest.testClass":250,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":133,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":223,"org.easymock.tests.LimitationsTest.mockNativeMethod":14,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":293,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":7,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":45,"org.easymock.tests2.AnswerTest.answer":186,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":286,"org.easymock.tests2.CaptureTest.testAnd":200,"org.easymock.tests2.UsageTest.strictResetToDefault":149,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":298,"org.easymock.tests2.MockedExceptionTest.testMockedException":158,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":119,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":215,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":113,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":51,"org.easymock.tests2.DelegateToTest.testDelegate":199,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":85,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":95,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":74,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":176,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":170,"org.easymock.tests.MockingTest.testNicePartialClassMocking":73,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":106,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":181,"org.easymock.tests2.CaptureTest.testCaptureLast":204,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":79,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":46,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":232,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":147,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":245,"org.easymock.tests2.CaptureTest.testCapture1_2446744":203,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":294,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":278,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":26,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":104,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":99,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":269,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":248,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":279,"org.easymock.tests.UsageThrowableTest.throwError":18,"org.easymock.tests.UsageStrictMockTest.differentMethods":17,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":163,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":292,"org.easymock.tests.UsageExpectAndThrowTest.floatType":93,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":122,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":240,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":189,"org.easymock.tests.UsageVerifyTest.twoThrows":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":174,"org.easymock.samples.PartialClassMockTest.testGetArea":131,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":60,"org.easymock.samples.ExampleTest.voteAgainstRemoval":126,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":69,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":68,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":184,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":92,"org.easymock.tests2.UsageTest.niceToStrict":151,"org.easymock.tests2.ThreadingTest.testChangeDefault":277,"org.easymock.tests2.UsageConstraintsTest.testNotNull":247,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":25,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":157,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":168,"org.easymock.tests2.UsageTest.defaultResetToNice":154,"org.easymock.samples.ExampleTest.voteAgainstRemovals":123,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":41,"org.easymock.tests2.CallbackTest.callback":252,"org.easymock.tests.UsageTest.openCallCountByLastCall":50,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":261,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":100,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":216,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":224,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":4,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":10,"org.easymock.tests.UsageOverloadedMethodTest.overloading":89,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":295,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":238,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":66,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":88,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":37,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":144,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":275,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":237,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":206,"org.easymock.tests.UsageThrowableTest.throwCheckedException":22,"org.easymock.tests2.EasyMockSupportClassTest.testAll":172,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":290,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":272,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":259,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":108,"org.easymock.tests2.CaptureTest.testCaptureAll":201,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":1,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":146,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":143,"org.easymock.tests2.UsageConstraintsTest.testMatches":239,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":145,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":191,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":121,"org.easymock.tests2.CompareToTest.testGreateOrEqual":300,"org.easymock.samples.ExampleTest.voteForRemovals":127,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":165,"org.easymock.tests.UsageVarargTest.allKinds":284,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":115,"org.easymock.tests2.DependencyTest.testInterfaceMocking":134,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":296,"org.easymock.tests2.DelegateToTest.testStubDelegate":196,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":24,"org.easymock.tests2.AnswerTest.stubAnswer":190,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":198,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":80,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":15,"org.easymock.tests2.UsageConstraintsTest.greaterThan":241,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":112,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":185,"org.easymock.samples.ExampleTest.voteForRemoval":125,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":162,"org.easymock.tests.UsageExpectAndReturnTest.floatType":28,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":44,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":166,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":130,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":242,"org.easymock.tests.UsageThrowableTest.noUpperLimit":19,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":225,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":58,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":148,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":282,"org.easymock.tests2.SerializationTest.test":251,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":299,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":276,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":213,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":20,"org.easymock.tests2.UsageConstraintsTest.testSame":230,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":27,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":75,"org.easymock.tests2.CaptureTest.testCaptureFirst":210,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":194,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":214,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":156,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":267,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":33,"org.easymock.tests.GenericTest.testPackageScope":6,"org.easymock.tests2.CaptureTest.testCapture2_2446744":209,"org.easymock.tests2.UsageTest.moreThanOneArgument":150,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":164,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":84,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":171,"org.easymock.tests.GenericTest.testBridgedEquals":289,"org.easymock.tests.UsageExpectAndReturnTest.longType":29,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":291,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":211,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":38,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":109,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":287,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":71,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":107,"org.easymock.tests2.UsageStrictMockTest.differentMethods":138,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":56,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":118,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":30,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":105,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":114,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":5,"org.easymock.tests2.MockedExceptionTest.testRealException":160,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":34,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":96,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":136,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":23,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":9,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":142,"org.easymock.tests2.UsageConstraintsTest.testContains":236,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":159,"org.easymock.tests2.UsageConstraintsTest.testFind":228,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":90,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":192,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":180,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":193,"org.easymock.tests.UsageExpectAndReturnTest.object":36,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":255,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":243,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":182,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":167,"org.easymock.tests2.UsageStrictMockTest.range":137,"org.easymock.tests2.UsageConstraintsTest.lessThan":249,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":219,"org.easymock.tests.UsageTest.exactCallCountByLastCall":52,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":0,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":212,"org.easymock.tests2.CaptureTest.testCaptureRightOne":207,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":82,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":271,"org.easymock.tests2.UsageConstraintsTest.testOr":231,"org.easymock.tests.UsageRangeTest.combination":111,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":42,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":177,"org.easymock.tests.UsageTest.wrongArguments":264,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":65,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":31,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":39,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":83,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":64,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":3,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":285,"org.easymock.tests2.UsageConstraintsTest.cmpTo":235,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":188,"org.easymock.tests2.UsageTest.openCallCountByLastCall":152,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":153,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":222,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":2,"org.easymock.tests2.CaptureTest.testCaptureFromStub":208,"org.easymock.tests.UsageTest.unexpectedCallWithArray":260,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":263,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":98,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":257,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":21,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":40,"org.easymock.tests2.UsageConstraintsTest.constraints":226,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":183,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":97,"org.easymock.samples.ExampleTest.addAndChangeDocument":128,"org.easymock.tests.CapturesMatcherTest.test":280,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":43,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":175,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":283,"org.easymock.tests2.UsageTest.resumeIfFailure":155,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":61,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":32,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":67,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":62,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":256,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":217}}]

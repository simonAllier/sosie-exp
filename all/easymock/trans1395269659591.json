[{"transplant":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"proxy"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"failures":[256],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[257,258,259,260,261,262,263],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[264],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.CompareEqual:39","failures":[154,265,200],"status":-1,"binaryOperator":"int == 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:623","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[266,267],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:318","failures":[89,92],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.EasyMock:1495","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[268,269,248,249],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"failures":[256],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.EqualsWithDelta:45","failures":[270],"status":-1,"binaryOperator":"(\"eq(\" + (java.lang.Number))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:191","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[271],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"methodName":"name"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:249","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1803","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:666","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.JavaProxyFactory:30","sourceCode":"return java.lang.reflect.Proxy.((T)(java.lang.reflect.Proxy.newProxyInstance(java.lang.Class<T>.getClassLoader(), new java.lang.Class[]{ java.lang.Class<T> }, java.lang.reflect.InvocationHandler)))","type":"CtReturnImpl"},"failures":[0,1,2,3,4,272,273,274,275,276,277,278,5,6,7,279,8,9,280,281,282,283,284,285,286,287,288,289,290,10,291,292,11,293,12,13,14,15,16,294,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,295,46,47,296,297,298,299,300,301,302,303,304,305,306,307,308,309,48,49,50,51,52,53,310,54,55,311,312,313,314,315,56,57,58,59,316,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,317,318,319,320,321,322,323,324,325,326,327,328,329,330,82,83,86,87,88,89,90,91,92,93,94,95,96,97,98,331,99,100,332,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,131,132,135,136,137,138,139,140,141,142,333,143,334,335,144,145,146,147,150,336,337,338,339,156,340,341,342,343,344,345,346,347,348,349,350,351,157,352,353,354,355,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,356,185,186,187,357,188,189,190,191,192,193,194,195,196,197,198,358,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,218,359,360,220,361,362,221,222,223,224,225,226,227,228,229,230,231,363,232,233,234,235,236,237,238,239,240,241,242,364,243,244,245,246,247,248,250,251,252,253,365,366,367,368,254,255],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:139","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[369,370,371],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"position":"org.easymock.Capture:82","failures":[372,170,172,173,174,175,176,177,179,373,180,181,183],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[269,248,249],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"candidateMethod"}},{"position":"org.easymock.EasyMock:1988","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1940","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[374,203,210,215],"status":-1,"binaryOperator":"int < 0","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:53","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,272,273,275,5,6,7,279,8,9,280,281,282,283,284,285,286,287,288,289,290,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,295,46,47,296,297,298,299,300,301,302,303,304,305,48,49,50,51,52,53,310,54,55,311,312,313,314,56,57,58,59,316,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,317,329,330,82,83,86,87,88,89,90,91,92,93,94,95,96,97,98,331,99,100,332,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,131,132,135,136,137,138,139,140,141,142,143,144,145,146,147,150,156,344,345,346,347,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,356,185,186,187,357,188,189,190,191,192,193,194,195,196,197,198,358,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,218,220,361,362,221,222,223,224,225,226,227,228,229,230,231,363,232,233,234,235,236,237,238,239,240,241,242,364,243,244,245,246,247,248,250,251,252,253,365,366,367,368,254,255],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.CompareEqual:39","failures":[154,265,200],"status":-1,"binaryOperator":"int == 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1726","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[375,376],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[377,189,206,212],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[378],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:70","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:666","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[275,379,375,380,381,382,83,84,378,383,129,130,133,134,384,385,385,386,386,148,149,151,152,153,387,154,376,388,389,155,216,390,391,217,392,393,219,394,395,396,360,397,398,399,400,401,402,403,404,405,406,407,408,409,410,269,249,252],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:288","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[264],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"actualTypeArgument","typeVariableMap":"typeVariableMap","this":"this"}},{"position":"org.easymock.internal.ExpectedInvocation:48","failures":[358],"status":-1,"binaryOperator":"(\"\" + (org.easymock.internal.Invocation.getArguments().int))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:643","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[19,332,411,412,413,414],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1531","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1163","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:144","sourceCode":"java.io.DataOutputStream.writeLong(java.lang.Long.longValue())","type":"CtInvocationImpl"},"failures":[369,370,371],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:38","sourceCode":"new java.util.HashSet<java.lang.String>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[385,385,386,386,415,416],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":192,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":99,"org.easymock.tests2.UsageTest.argumentsOrdered":233,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":245,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":340,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":229,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":131,"org.easymock.tests2.DelegateToTest.testReturnException":185,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":63,"org.easymock.tests.MockingTest.testPartialClassMocking":379,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":271,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":331,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":394,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":107,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":145,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":258,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":198,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":0,"org.easymock.tests2.UsageTest.wrongArguments":227,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":355,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":289,"org.easymock.samples.ExampleTest.answerVsDelegate":138,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":382,"org.easymock.tests2.UsageConstraintsTest.testNull":194,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":278,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":151,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":128,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":244,"org.easymock.tests2.CaptureTest.testPrimitive":173,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":4,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":126,"org.easymock.tests.UsageTest.moreThanOneArgument":100,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":150,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":14,"org.easymock.tests.UsageTest.argumentsOrdered":105,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":295,"org.easymock.tests.UsageVarargTest.varargIntAccepted":73,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":48,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":399,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":262,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":404,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":52,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":157,"org.easymock.tests.ReplayStateInvalidUsageTest.times":325,"org.easymock.tests2.AnswerTest.answer":220,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":358,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":347,"org.easymock.tests2.CaptureTest.testAnd":170,"org.easymock.tests2.UsageTest.strictResetToDefault":225,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":376,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":13,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":54,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":240,"org.easymock.tests2.DelegateToTest.testDelegate":188,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":297,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":122,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":66,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":302,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":272,"org.easymock.tests2.CaptureTest.testCapture1_2446744":174,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":120,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":345,"org.easymock.tests.UsageThrowableTest.throwError":89,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":319,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":307,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":343,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":16,"org.easymock.samples.PartialClassMockTest.testGetArea":384,"org.easymock.tests.MockingTest.testInterfaceMocking":276,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":320,"org.easymock.tests2.CompareToTest.testLessOrEqual":377,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":49,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":312,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":108,"org.easymock.tests2.UsageTest.niceToStrict":228,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":403,"org.easymock.tests2.MockBuilderTest.testCreateMock":407,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":354,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":413,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":116,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":241,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":285,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":314,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":287,"org.easymock.tests.UsageOverloadedMethodTest.overloading":69,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":9,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":203,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":37,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":68,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":202,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":370,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":179,"org.easymock.tests.MockClassControlTest.testEquals":127,"org.easymock.tests2.EasyMockSupportClassTest.testAll":219,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":84,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":124,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":397,"org.easymock.tests2.CaptureTest.testCaptureAll":171,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":300,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":346,"org.easymock.tests.MockNameTest.defaultName":294,"org.easymock.tests2.UsageConstraintsTest.testMatches":204,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":15,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":317,"org.easymock.samples.ExampleTest.voteForRemovals":142,"org.easymock.tests.UsageVarargTest.allKinds":81,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":86,"org.easymock.samples.BasicClassMockTest.testPrintContent":134,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":301,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":95,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":158,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":67,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":341,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":357,"org.easymock.tests2.UsageConstraintsTest.greaterThan":206,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":310,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":155,"org.easymock.samples.ExampleTest.voteForRemoval":139,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":166,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":308,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":387,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":130,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":224,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":238,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":91,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":62,"org.easymock.tests2.CaptureTest.testCaptureFirst":183,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":356,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":239,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":235,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":282,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":33,"org.easymock.tests2.CaptureTest.testCapture2_2446744":182,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":168,"org.easymock.tests2.UsageTest.moreThanOneArgument":226,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":408,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":80,"org.easymock.tests.GenericTest.testBridgedEquals":85,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":60,"org.easymock.tests.UsageExpectAndReturnTest.longType":29,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":236,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":298,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":409,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":125,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":211,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":286,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":123,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":12,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":304,"org.easymock.tests.UsageCallCountTest.tooManyCalls":61,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":56,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":34,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":112,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":94,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":390,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":400,"org.easymock.tests2.UsageConstraintsTest.testContains":201,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":315,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":252,"org.easymock.tests2.UsageConstraintsTest.testFind":193,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":70,"org.easymock.tests.MockTypeTest.fromEasyMockClass":306,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":17,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":255,"org.easymock.tests.UsageExpectAndReturnTest.object":36,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":154,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":270,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":243,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":75,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":259,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":11,"org.easymock.tests.UsageTest.exactCallCountByLastCall":106,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":97,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":46,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":257,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":42,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":71,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":8,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":337,"org.easymock.tests2.EasyMockSupportTest.testVerify":247,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":47,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":7,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":284,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":344,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":359,"org.easymock.tests.UsageVarargTest.varargCharAccepted":74,"org.easymock.tests2.CaptureTest.testCaptureMultiple":372,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":159,"org.easymock.tests2.UsageTest.openCallCountByLastCall":230,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":246,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":283,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":291,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":114,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":92,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":336,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":388,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":113,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":43,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":303,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":396,"org.easymock.tests2.UsageTest.resumeIfFailure":234,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":381,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":65,"org.easymock.tests2.StubTest.stubWithReturnValue":147,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":263,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":35,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":212,"org.easymock.tests2.SerializationTest.testAllMockedMethod":249,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":329,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":414,"org.easymock.samples.SupportTest.voteForRemovals":136,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":264,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":119,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":268,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":330,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":361,"org.easymock.tests.UsageExpectAndThrowTest.object":117,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":209,"org.easymock.tests2.DelegateToTest.testWrongClass":187,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":5,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":6,"org.easymock.samples.ConstructorCalledMockTest.testTax":385,"org.easymock.tests.UsageStrictMockTest.range":22,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":334,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":364,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":216,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":118,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":405,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":104,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":327,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":288,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":411,"org.easymock.tests2.CaptureTest.testCaptureNone":178,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":313,"org.easymock.tests.UsageUnorderedTest.message":82,"org.easymock.tests.UsageVerifyTest.twoReturns":88,"org.easymock.tests.UsageVarargTest.varargByteAccepted":79,"org.easymock.tests2.ThreadingTest.testThreadSafe":165,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":59,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":133,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":293,"org.easymock.tests2.CaptureTest.testCapture_2617107":172,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":274,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":3,"org.easymock.tests2.UsageConstraintsTest.any":199,"org.easymock.tests2.StubTest.stub":146,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":324,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":305,"org.easymock.tests.UsageExpectAndThrowTest.longType":110,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":64,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":369,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":323,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":161,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":156,"org.easymock.tests2.SerializationTest.testClass":269,"org.easymock.tests.LimitationsTest.mockNativeMethod":129,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":45,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":378,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":350,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":164,"org.easymock.tests2.NameTest.nameForMocksControl":368,"org.easymock.tests2.MockedExceptionTest.testMockedException":251,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":351,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":103,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":111,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":256,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":380,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":148,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":406,"org.easymock.tests.MockingTest.testNicePartialClassMocking":375,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":153,"org.easymock.tests2.CaptureTest.testCaptureLast":177,"org.easymock.tests2.CompareToTest.testCompareEqual":265,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":348,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":273,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":393,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":197,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":210,"org.easymock.tests.MockingTest.testTwoMocks":275,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":26,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":115,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":232,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":214,"org.easymock.samples.ExampleTest.removeNonExistingDocument":333,"org.easymock.tests.UsageStrictMockTest.differentMethods":23,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":321,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":353,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":338,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":167,"org.easymock.tests2.MockBuilderTest.testCreateMockString":410,"org.easymock.tests.UsageExpectAndThrowTest.floatType":109,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":205,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":221,"org.easymock.tests.UsageVerifyTest.twoThrows":87,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":395,"org.easymock.samples.ExampleTest.voteAgainstRemoval":140,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":311,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":389,"org.easymock.tests2.UsageConstraintsTest.testNotNull":213,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":96,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":250,"org.easymock.tests2.UsageTest.defaultResetToNice":363,"org.easymock.samples.ExampleTest.voteAgainstRemovals":137,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":41,"org.easymock.tests.UsageVarargTest.differentLength":76,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":349,"org.easymock.tests2.CallbackTest.callback":184,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":415,"org.easymock.tests.UsageTest.openCallCountByLastCall":102,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":189,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":2,"org.easymock.tests.UsageCallCountTest.tooFewCalls":57,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":217,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":290,"org.easymock.tests.UsageThrowableTest.throwCheckedException":93,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":412,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":392,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":98,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":391,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":352,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":326,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":218,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":223,"org.easymock.tests.ObjectMethodsTest.testHashCode":292,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":261,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":169,"org.easymock.tests2.NameTest.nameForNiceMock":367,"org.easymock.tests2.DependencyTest.testInterfaceMocking":144,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":260,"org.easymock.samples.ExampleTest.addDocument":141,"org.easymock.tests2.DelegateToTest.testStubDelegate":186,"org.easymock.tests2.AnswerTest.stubAnswer":222,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":20,"org.easymock.tests.UsageVarargTest.varargLongAccepted":78,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":24,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":44,"org.easymock.tests.UsageExpectAndReturnTest.floatType":28,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":360,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":386,"org.easymock.tests.UsageThrowableTest.noUpperLimit":90,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":207,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":280,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":190,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":175,"org.easymock.tests2.SerializationTest.test":248,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":371,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":266,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":27,"org.easymock.tests2.UsageConstraintsTest.testSame":195,"org.easymock.samples.SupportTest.addDocument":135,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":322,"org.easymock.tests.GenericTest.testPackageScope":83,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":296,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":342,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":277,"org.easymock.tests2.NameTest.nameForMock":365,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":38,"org.easymock.tests2.UsageStrictMockTest.differentMethods":163,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":30,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":121,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":10,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":55,"org.easymock.tests2.MockedExceptionTest.testRealException":253,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":309,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":335,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":160,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":1,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":328,"org.easymock.tests2.NameTest.nameForStrictMock":366,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":254,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":152,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":208,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":401,"org.easymock.tests2.UsageStrictMockTest.range":162,"org.easymock.tests2.UsageConstraintsTest.lessThan":215,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":339,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":237,"org.easymock.tests2.CaptureTest.testCaptureRightOne":180,"org.easymock.tests2.UsageConstraintsTest.testOr":196,"org.easymock.tests.UsageRangeTest.combination":53,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":149,"org.easymock.tests.UsageTest.wrongArguments":101,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":383,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":31,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":39,"org.easymock.tests.UsageVarargTest.varargShortAccepted":77,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":267,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":316,"org.easymock.tests2.UsageConstraintsTest.cmpTo":200,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":362,"org.easymock.tests2.CompareToTest.testLessThan":374,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":231,"org.easymock.tests2.CaptureTest.testCaptureFromStub":181,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":318,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":402,"org.easymock.tests.UsageTest.unexpectedCallWithArray":332,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":19,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":58,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":416,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":40,"org.easymock.tests2.CaptureTest.testCapture":373,"org.easymock.tests2.UsageConstraintsTest.constraints":191,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":21,"org.easymock.samples.ExampleTest.addAndChangeDocument":143,"org.easymock.tests.UsageStrictMockTest.testVerify":25,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":132,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":18,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":299,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":176,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":398,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":50,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":32,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":51,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":281,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":72,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":242}}]

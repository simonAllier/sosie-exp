[{"transplantationPoint":{"position":"org.easymock.EasyMock:1975","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Double>(org.easymock.Capture<java.lang.Double>))","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:361","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:301","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[19],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:167","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:148","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[20,21,22],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[23,24,25,26,27,28,29,30,31,32,1,2,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,57,58,59,60,61,62,63,64,65,66,67,4,68,69,70,71,72,73,74,75,76,77,78,79,0,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,5,6,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,7,160,161,162,163,164,165,166,9,10,167,168,169,170,171,172,173,174,11,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,12,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,13,14,277,278,279,280,15,16,281,282,283,284,285,286,287,17,288,289,290,291,292,293,294,295,296,297,18,298,299,300,301,302,303],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[78,88],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:30","sourceCode":"new java.util.HashMap<java.lang.String, java.lang.Class<?>>(10)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:65","sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[304,305,35,36,306,307,308,309,310,90,91,311,312,313,136,139],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1988","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[23,26,27,28,30,31,2,33,314,34,315,35,37,38,41,42,316,317,318,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,57,58,60,61,62,63,64,65,66,67,4,68,69,70,72,73,74,75,76,319,320,321,322,77,78,79,0,81,82,83,84,85,86,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,114,115,116,117,118,120,121,123,124,125,128,323,324,325,326,327,130,328,329,131,132,330,133,331,332,333,334,19,335,134,135,336,136,337,338,137,138,139,140,141,142,143,144,145,146,339,340,147,148,149,150,151,152,153,154,155,156,157,159,7,163,165,10,167,168,169,170,171,172,341,11,175,176,177,342,189,199,200,203,12,204,205,206,207,208,209,210,211,212,213,214,215,343,344,216,217,218,219,220,222,223,224,225,226,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,274,345,285,286,17,288,294,346,347,348,297,349,18,298,299,300,350],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[119,6,132,156,7,351,178,179,180,187,202,204,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,14,287,288,289,290,291,292,293],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[352],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[23,26,27,28,29,30,31,32,1,2,33,314,34,315,35,37,38,39,40,41,42,316,317,318,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,57,58,60,61,62,63,64,65,66,67,4,68,69,70,71,72,73,74,75,76,353,319,320,321,322,354,355,356,357,77,78,79,0,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,112,114,115,116,117,118,119,120,121,122,123,124,5,6,125,126,127,128,129,323,324,325,326,327,130,328,329,131,132,330,358,133,331,332,333,359,334,19,360,335,361,134,135,336,136,337,337,338,338,137,138,139,140,141,142,143,144,145,362,146,339,340,147,148,149,150,151,152,153,154,155,156,157,158,159,7,162,163,164,165,166,9,10,167,168,169,170,171,172,341,11,175,176,177,363,364,365,366,367,368,369,370,371,372,373,374,375,342,184,186,187,189,190,199,200,201,202,203,12,204,205,206,207,208,209,210,211,212,213,214,215,343,344,216,217,218,219,220,221,222,223,224,225,226,228,229,230,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,13,14,277,278,279,285,286,287,17,288,289,290,291,292,293,294,295,346,347,348,297,349,18,298,299,300,301,302,303,376,350,377,378,379,380,381,382],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:251","sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"mockClass"}},{"transplant":{"position":"org.easymock.internal.RecordState:251","sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:309","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:340","sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[39],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.RecordState:80","sourceCode":"return org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType())","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:57","sourceCode":"try {\n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.IMocksBehavior.addActual(org.easymock.internal.Invocation);\n    try {\n        return org.easymock.internal.Result.answer();\n    } catch (final java.lang.Throwable java.lang.Throwable) {\n        if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n            throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n        } \n        throw java.lang.Throwable;\n    }\n} finally {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation();\n}","type":"CtTryImpl"},"failures":[23,26,27,28,29,30,31,32,1,2,314,34,315,35,37,38,39,40,41,42,316,317,318,43,383,44,45,50,51,52,53,54,55,56,3,57,58,60,61,62,63,64,65,66,67,4,68,69,70,72,73,74,75,319,321,322,355,356,77,78,79,0,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,100,101,102,103,104,107,110,111,112,114,119,120,121,122,123,124,5,6,126,127,129,323,324,325,326,327,130,328,329,132,330,133,331,332,333,334,335,134,135,336,136,337,338,137,138,139,140,141,142,143,144,145,146,339,340,147,148,149,150,151,152,153,154,155,156,157,159,7,162,163,164,165,166,9,10,341,11,342,199,200,201,202,203,12,204,205,206,207,208,209,210,343,344,216,217,218,219,220,222,223,224,225,226,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,13,14,277,278,279,285,286,287,17,288,289,290,291,292,293,294,295,346,347,348,18,299,300],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:249","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"cls":"type","typeVariableMap":"typeVariableMap","this":"this"}},{"position":"org.easymock.EasyMock:1976","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":53,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":273,"org.easymock.tests2.UsageTest.argumentsOrdered":127,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":102,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":91,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":155,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":124,"org.easymock.tests2.StubTest.stubWithReturnValue":132,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":241,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":72,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":136,"org.easymock.tests2.SerializationTest.testAllMockedMethod":315,"org.easymock.tests2.DelegateToTest.testReturnException":110,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":153,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":160,"org.easymock.tests.MockingTest.testPartialClassMocking":346,"org.easymock.samples.SupportTest.voteForRemovals":138,"org.easymock.tests.MockClassControlTest.testToString":377,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":309,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":191,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":265,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":316,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":253,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":161,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":24,"org.easymock.tests.UsageExpectAndThrowTest.object":263,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":69,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":135,"org.easymock.tests2.DelegateToTest.testWrongClass":112,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":285,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":286,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":58,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":199,"org.easymock.tests2.UsageTest.wrongArguments":122,"org.easymock.samples.ConstructorCalledMockTest.testTax":337,"org.easymock.tests.UsageStrictMockTest.range":9,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":171,"org.easymock.samples.ExampleTest.answerVsDelegate":141,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":99,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":324,"org.easymock.tests2.UsageConstraintsTest.testNull":55,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":331,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":264,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":382,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":321,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":101,"org.easymock.tests2.CaptureTest.testPrimitive":0,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":203,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":374,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":277,"org.easymock.tests.UsageTest.moreThanOneArgument":274,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":272,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":133,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":170,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":208,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":198,"org.easymock.tests2.CaptureTest.testCaptureNone":84,"org.easymock.tests.UsageUnorderedTest.message":252,"org.easymock.tests.UsageVerifyTest.twoReturns":205,"org.easymock.tests.UsageVarargTest.varargByteAccepted":224,"org.easymock.tests2.ThreadingTest.testThreadSafe":37,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":280,"org.easymock.tests.UsageTest.argumentsOrdered":278,"org.easymock.tests.UsageVarargTest.varargIntAccepted":218,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":300,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":339,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":231,"org.easymock.tests2.CaptureTest.testCapture_2617107":79,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":147,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":76,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":345,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":313,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":202,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":320,"org.easymock.tests2.UsageConstraintsTest.any":60,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":371,"org.easymock.tests2.StubTest.stub":131,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":151,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":183,"org.easymock.tests.UsageExpectAndThrowTest.longType":256,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":154,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":20,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":370,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":32,"org.easymock.tests2.SerializationTest.testClass":314,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":90,"org.easymock.tests.ReplayStateInvalidUsageTest.times":372,"org.easymock.tests.LimitationsTest.mockNativeMethod":342,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":35,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":251,"org.easymock.tests2.AnswerTest.answer":23,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":59,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":118,"org.easymock.tests2.CaptureTest.testAnd":77,"org.easymock.tests2.UsageTest.strictResetToDefault":120,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":352,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":19,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":33,"org.easymock.tests2.NameTest.nameForMocksControl":49,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":305,"org.easymock.tests2.MockedExceptionTest.testMockedException":106,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":207,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":96,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":176,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":14,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":282,"org.easymock.tests2.DelegateToTest.testDelegate":114,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":383,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":348,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":257,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":330,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":322,"org.easymock.tests.MockingTest.testNicePartialClassMocking":347,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":268,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":333,"org.easymock.tests2.CaptureTest.testCaptureLast":83,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":156,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":284,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":329,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":57,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":215,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":70,"org.easymock.tests.MockingTest.testTwoMocks":296,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":283,"org.easymock.tests2.CaptureTest.testCapture1_2446744":80,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":232,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":266,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":261,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":116,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":126,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":74,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":366,"org.easymock.tests.UsageThrowableTest.throwError":287,"org.easymock.samples.ExampleTest.removeNonExistingDocument":362,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":368,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":306,"org.easymock.tests.UsageStrictMockTest.differentMethods":10,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":193,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":39,"org.easymock.tests2.MockBuilderTest.testCreateMockString":356,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":376,"org.easymock.tests.UsageExpectAndThrowTest.floatType":255,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":210,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":66,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":26,"org.easymock.tests.UsageVerifyTest.twoThrows":204,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":317,"org.easymock.samples.PartialClassMockTest.testGetArea":336,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":367,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":148,"org.easymock.samples.ExampleTest.voteAgainstRemoval":143,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":197,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":196,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":335,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":254,"org.easymock.tests2.UsageTest.niceToStrict":123,"org.easymock.tests2.UsageConstraintsTest.testNotNull":73,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":293,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":105,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":319,"org.easymock.tests2.MockBuilderTest.testCreateMock":354,"org.easymock.tests2.UsageTest.defaultResetToNice":125,"org.easymock.samples.ExampleTest.voteAgainstRemovals":140,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":247,"org.easymock.tests.UsageVarargTest.differentLength":221,"org.easymock.tests2.CallbackTest.callback":45,"org.easymock.tests.UsageTest.openCallCountByLastCall":13,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":262,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":97,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":50,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":180,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":297,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":201,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":169,"org.easymock.tests.UsageCallCountTest.tooFewCalls":298,"org.easymock.tests.UsageOverloadedMethodTest.overloading":159,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":64,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":187,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":327,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":243,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":158,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":63,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":21,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":85,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":172,"org.easymock.tests.UsageThrowableTest.throwCheckedException":290,"org.easymock.tests.MockClassControlTest.testEquals":381,"org.easymock.tests2.EasyMockSupportClassTest.testAll":42,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":344,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":270,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":213,"org.easymock.tests2.CaptureTest.testCaptureAll":78,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":117,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":328,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":295,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":326,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":36,"org.easymock.tests.MockNameTest.defaultName":173,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":373,"org.easymock.tests2.UsageConstraintsTest.testMatches":65,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":130,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":28,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":364,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":209,"org.easymock.tests.ObjectMethodsTest.testHashCode":229,"org.easymock.samples.ExampleTest.voteForRemovals":145,"org.easymock.tests2.NameTest.nameForNiceMock":48,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":41,"org.easymock.tests.UsageVarargTest.allKinds":226,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":12,"org.easymock.tests2.DependencyTest.testInterfaceMocking":134,"org.easymock.samples.BasicClassMockTest.testPrintContent":340,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":214,"org.easymock.samples.ExampleTest.addDocument":144,"org.easymock.tests2.DelegateToTest.testStubDelegate":111,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":292,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":29,"org.easymock.tests2.AnswerTest.stubAnswer":27,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":311,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":113,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":157,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":165,"org.easymock.tests2.UsageConstraintsTest.greaterThan":67,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":175,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":361,"org.easymock.tests.UsageVarargTest.varargLongAccepted":223,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":167,"org.easymock.samples.ExampleTest.voteForRemoval":142,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":38,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":250,"org.easymock.tests.UsageExpectAndReturnTest.floatType":234,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":194,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":359,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":323,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":338,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":312,"org.easymock.tests.UsageThrowableTest.noUpperLimit":17,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":4,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":188,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":341,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":51,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":119,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":81,"org.easymock.tests2.SerializationTest.test":34,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":22,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":94,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":288,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":233,"org.easymock.tests2.UsageConstraintsTest.testSame":56,"org.easymock.samples.SupportTest.addDocument":137,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":152,"org.easymock.tests2.CaptureTest.testCaptureFirst":89,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":109,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":95,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":129,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":369,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":190,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":239,"org.easymock.tests.GenericTest.testPackageScope":343,"org.easymock.tests2.CaptureTest.testCapture2_2446744":88,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":40,"org.easymock.tests2.UsageTest.moreThanOneArgument":121,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":281,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":355,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":225,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":302,"org.easymock.tests2.NameTest.nameForMock":46,"org.easymock.tests.UsageExpectAndReturnTest.longType":235,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":211,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":92,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":271,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":244,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":71,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":174,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":269,"org.easymock.tests2.UsageStrictMockTest.differentMethods":2,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":206,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":182,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":236,"org.easymock.tests.UsageCallCountTest.tooManyCalls":303,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":267,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":227,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":177,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":18,"org.easymock.tests2.MockedExceptionTest.testRealException":108,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":240,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":195,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":308,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":258,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":31,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":375,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":291,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":200,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":325,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":349,"org.easymock.tests2.UsageConstraintsTest.testContains":62,"org.easymock.tests2.NameTest.nameForStrictMock":47,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":107,"org.easymock.tests2.UsageConstraintsTest.testFind":54,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":7,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":43,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":332,"org.easymock.tests.MockTypeTest.fromEasyMockClass":192,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":44,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":162,"org.easymock.tests.UsageExpectAndReturnTest.object":242,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":68,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":334,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":353,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":307,"org.easymock.tests2.UsageStrictMockTest.range":1,"org.easymock.tests2.UsageConstraintsTest.lessThan":75,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":100,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":220,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":310,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":230,"org.easymock.tests.UsageTest.exactCallCountByLastCall":279,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":294,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":93,"org.easymock.tests2.CaptureTest.testCaptureRightOne":86,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":15,"org.easymock.tests2.UsageConstraintsTest.testOr":3,"org.easymock.tests.UsageRangeTest.combination":11,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":358,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":248,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":216,"org.easymock.tests.UsageTest.wrongArguments":276,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":186,"org.easymock.tests.MockClassControlTest.testHashCode":380,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":350,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":237,"org.easymock.tests2.EasyMockSupportTest.testVerify":104,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":8,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":16,"org.easymock.tests.UsageVarargTest.varargShortAccepted":222,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":179,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":184,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":301,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":115,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":357,"org.easymock.tests2.UsageConstraintsTest.cmpTo":61,"org.easymock.tests.UsageVarargTest.varargCharAccepted":219,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":25,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":351,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":30,"org.easymock.tests2.UsageTest.openCallCountByLastCall":5,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":6,"org.easymock.tests.DefaultClassInstantiatorTest.object":363,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":103,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":178,"org.easymock.tests2.CaptureTest.testCaptureFromStub":87,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":365,"org.easymock.tests.UsageTest.unexpectedCallWithArray":275,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":228,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":260,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":289,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":164,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":299,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":304,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":246,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":379,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":360,"org.easymock.tests2.UsageConstraintsTest.constraints":52,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":166,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":259,"org.easymock.samples.ExampleTest.addAndChangeDocument":146,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":249,"org.easymock.tests.UsageStrictMockTest.testVerify":168,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":181,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":139,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":378,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":318,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":163,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":212,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":82,"org.easymock.tests2.UsageTest.resumeIfFailure":128,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":149,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":238,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":150,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":189,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":217,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":98}}]

[{"transplant":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:51","sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection"}},{"transplant":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:44","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Void.java.lang.Class<java.lang.Void>, null)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Not:42","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"failures":[25,26,27,28,29],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[30],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:435","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n}","type":"CtForEachImpl"},"failures":[31,32,33,34,35],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[36,37,38,39],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"failures":[40],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:207","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:602","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[62],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:602","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:113","sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"failures":[63,64,65],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:119","sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(java.util.Properties.remove(java.lang.String)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:122","sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"value","properties":"properties","key":"key"}},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[43,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:98","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"position":"org.easymock.internal.MocksControl:136","failures":[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,63,122,123,124,64,125,31,32,33,34,35,126,127,127,128,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,77,78,79,196,197,198,199],"status":-1,"binaryOperator":"org.easymock.internal.IProxyFactory != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:682","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:275","sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[170],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:128","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[43,66,67,68,69,70,71,200,72,73,74,76,77,78,79,80,81],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.Invocation:44","sourceCode":"new java.util.ArrayList<org.easymock.internal.matchers.Captures<?>>(0)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"failures":[196,197],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[9,13,14,16,21,23],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[43,66,67,68,69,70,71,200,72,73,74,75,76,77,78,79,80,81],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[127,128,201,202,203,161],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:120","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"searchType","type":"searchType"}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[30],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[204,205,206,207,208,209],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:53","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:88","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[103],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[166],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:289","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[31],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"failureDictionary":{"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":204,"org.easymock.tests2.UsageTest.argumentsOrdered":20,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":69,"org.easymock.tests2.StubTest.stubWithReturnValue":81,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":84,"org.easymock.tests2.SerializationTest.testAllMockedMethod":199,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":67,"org.easymock.tests.MockingTest.testPartialClassMocking":117,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":23,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":31,"org.easymock.tests.MockClassControlTest.testToString":104,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":168,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":179,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":175,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":37,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":46,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":47,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":27,"org.easymock.tests2.UsageTest.wrongArguments":18,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":41,"org.easymock.tests.UsageStrictMockTest.range":96,"org.easymock.samples.ConstructorCalledMockTest.testTax":127,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":101,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":148,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":94,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":156,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":109,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":142,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":75,"org.easymock.tests.UsageTest.moreThanOneArgument":8,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":11,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":169,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":13,"org.easymock.tests2.CaptureTest.testCaptureNone":60,"org.easymock.tests.UsageUnorderedTest.message":45,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":88,"org.easymock.tests.UsageTest.argumentsOrdered":12,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":186,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":129,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":50,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":24,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":136,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":7,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":44,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":134,"org.easymock.tests2.UsageConstraintsTest.any":57,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":141,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":73,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":54,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":68,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":124,"org.easymock.tests2.SerializationTest.testClass":198,"org.easymock.tests.LimitationsTest.mockNativeMethod":112,"org.easymock.tests2.DependencyTest.testClassMocking":196,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":34,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":163,"org.easymock.tests2.MockedExceptionTest.testMockedException":78,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":0,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":174,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":205,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":90,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":91,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":119,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":154,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":143,"org.easymock.tests.MockingTest.testNicePartialClassMocking":118,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":158,"org.easymock.tests.LimitationsTest.mockFinalMethod":113,"org.easymock.tests2.CaptureTest.testCaptureLast":59,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":70,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":153,"org.easymock.tests2.DependencyTest.testClassMockingSupport":197,"org.easymock.tests.MockingTest.testTwoMocks":116,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":92,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":19,"org.easymock.tests.UsageThrowableTest.throwError":65,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":1,"org.easymock.tests.UsageStrictMockTest.differentMethods":97,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":122,"org.easymock.tests2.MockBuilderTest.testCreateMockString":147,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":102,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":176,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":171,"org.easymock.tests.UsageVerifyTest.twoThrows":206,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":185,"org.easymock.samples.PartialClassMockTest.testGetArea":131,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":51,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":165,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":180,"org.easymock.tests.LimitationsTest.privateConstructor":111,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":77,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":140,"org.easymock.tests2.MockBuilderTest.testCreateMock":145,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":188,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":161,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":93,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":21,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":43,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":184,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":190,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":28,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":85,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":151,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":30,"org.easymock.tests.MockClassControlTest.testEquals":108,"org.easymock.tests2.EasyMockSupportClassTest.testAll":172,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":33,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":22,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":14,"org.easymock.tests.MockingTest.testStrictClassMocking":114,"org.easymock.tests2.CaptureTest.testCaptureAll":58,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":76,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":152,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":150,"org.easymock.tests2.CompareToTest.testGreateOrEqual":25,"org.easymock.samples.BasicClassMockTest.testPrintContent":130,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":187,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":192,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":71,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":5,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":49,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":173,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":166,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":125,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":167,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":194,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":159,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":128,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":6,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":208,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":126,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":132,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":144,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":74,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":63,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":207,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":170,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":66,"org.easymock.tests2.CaptureTest.testCaptureFirst":61,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":38,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":177,"org.easymock.tests.GenericTest.testPackageScope":32,"org.easymock.tests2.UsageTest.moreThanOneArgument":17,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":39,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":89,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":146,"org.easymock.tests.GenericTest.testBridgedEquals":35,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":203,"org.easymock.tests2.UsageStrictMockTest.differentMethods":99,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":72,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":162,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":82,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":95,"org.easymock.tests2.MockedExceptionTest.testRealException":80,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":189,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":83,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":3,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":55,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":42,"org.easymock.tests.MockingTest.testNiceClassMocking":120,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":149,"org.easymock.tests.MockingTest.testClassMocking":115,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":79,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":139,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":157,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":135,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":123,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":160,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":137,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":2,"org.easymock.tests2.UsageStrictMockTest.range":98,"org.easymock.tests2.UsageConstraintsTest.lessThan":29,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":4,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":40,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":181,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":36,"org.easymock.tests2.UsageConstraintsTest.testOr":56,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":15,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":195,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":155,"org.easymock.tests.UsageTest.wrongArguments":10,"org.easymock.tests2.MockBuilderTest.testWithConstructor":201,"org.easymock.tests.MockClassControlTest.testHashCode":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":178,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":103,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":182,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":64,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":209,"org.easymock.tests.DefaultClassInstantiatorTest.object":121,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":138,"org.easymock.tests.UsageTest.unexpectedCallWithArray":9,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":183,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":16,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":202,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":86,"org.easymock.tests2.UsageConstraintsTest.constraints":26,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":106,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":164,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":200,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":191,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":52,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":100,"org.easymock.tests.LimitationsTest.abstractClass":110,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":53,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":133}}]

[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return \"leq\"","position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:57","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","position":"org.easymock.internal.RecordState:257","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"cls":"clazz"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:253","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:411","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"equals\", new java.lang.Class[]{ java.lang.Object.java.lang.Object })","position":"org.easymock.internal.ReflectionUtils:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","position":"org.easymock.internal.RecordState:172","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"))","position":"org.easymock.internal.BridgeMethodResolver:94","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    int += 1;\n    return java.util.List<org.easymock.internal.Result>.get(int);\n} ","position":"org.easymock.internal.Results:67","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:210","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1121","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:138","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-5048595127450771363L","position":"org.easymock.internal.matchers.Captures:32","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2689588759855326190L","position":"org.easymock.internal.matchers.NotNull:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[int + int]","position":"org.easymock.internal.Invocation:62","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = org.easymock.internal.Invocation.org.easymock.internal.Invocation.createObjectArray(java.lang.Object[][((java.lang.Object[].int) - 1)])","position":"org.easymock.internal.Invocation:59","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:70","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:98","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.RecordState:327","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"max":"endPosition","java.lang.Integer.MAX_VALUE":"endPosition"},"name":"add","transplant":{"sourceCode":"int = int","position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int--","position":"org.easymock.internal.MocksBehavior:115","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1444","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:239","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:79","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:93","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:191","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","position":"org.easymock.internal.ObjectMethodsFilter:88","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new (\">\") {\n    @java.lang.Override\n    public boolean matchResult(final int result) {\n        return int > 0;\n    }\n}","position":"org.easymock.LogicalOperator:48","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1459","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[]);\n} ","position":"org.easymock.internal.MockBuilder:205","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MockInvocationHandler:41","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])","position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!(org.easymock.internal.UnorderedBehavior.verify())) {\n    boolean = false;\n    break;\n} ","position":"org.easymock.internal.MocksBehavior:155","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && ((((java.lang.String)(java.lang.Object)).indexOf(java.lang.String)) >= 0)","position":"org.easymock.internal.matchers.Contains:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","position":"org.easymock.internal.EasyMockProperties:62","type":"CtIfImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","position":"org.easymock.internal.ExpectedInvocation:93","type":"mutation","status":-1},{"failures":[],"variableMapping":{"throwable":"t"},"name":"add","transplant":{"sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","position":"org.easymock.internal.RecordState:262","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","position":"org.easymock.internal.ReplayState:62","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:112","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.Injector:129","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:933","type":"mutation","return":"return 0","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:93","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1647","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injection.getAnnotation()","position":"org.easymock.internal.InjectionPlan:49","type":"CtInvocationImpl"},"status":-2},{"failures":[18,23,27,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,70,256,257,258,259,94,105,107,108,109,110,111,112,163,242],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.ObjectMethodsFilter:60","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:267","type":"CtInvocationImpl"},"status":-1},{"failures":[152,167,233],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:430","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","position":"org.easymock.internal.RecordState:332","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.ObjectMethodsFilter:121","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.ObjectMethodsFilter:108","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:168","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.IMocksControl","position":"org.easymock.EasyMockSupport:532","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:198","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(long.long, java.lang.Long.java.lang.Long)","position":"org.easymock.internal.ReflectionUtils:38","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocks(java.lang.Object)","position":"org.easymock.EasyMockSupport:624","type":"CtInvocationImpl"},"status":-2},{"failures":[194,195,196,197,198,199,200,201,203,204,205,206,207],"variableMapping":{"currentCaptures":"currentCaptures"},"name":"add","transplant":{"sourceCode":"this.java.util.Collection<org.easymock.internal.matchers.Captures<?>>.clear()","position":"org.easymock.internal.Invocation:176","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.matchers.Captures<?> org.easymock.internal.matchers.Captures<?> : java.util.Collection<org.easymock.internal.matchers.Captures<?>>) {\n    org.easymock.internal.matchers.Captures<?>.validateCapture();\n}","position":"org.easymock.internal.Invocation:167","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.Injector:75","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2110","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:363","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.ObjectMethodsFilter:92","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","position":"org.easymock.internal.matchers.Or:48","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.Invocation:220","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","position":"org.easymock.internal.MocksControl:136","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","position":"org.easymock.EasyMock:1915","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","position":"org.easymock.EasyMock:2053","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:293","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:202","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isArray()) {\n        final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n                return false;\n            } \n            break;\n        } \n    } \n    if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:193","type":"CtForImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:251","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:212","type":"CtLocalVariableImpl"},"status":0},{"failures":[260,261,262,263,264,265],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","position":"org.easymock.internal.ReflectionUtils:188","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:324","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:440","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.Injector:75","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException)","position":"org.easymock.internal.DefaultClassInstantiator:60","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))","position":"org.easymock.internal.ExpectedInvocation:85","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:184","type":"CtReturnImpl"},"status":-2},{"failures":[155,156],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","position":"org.easymock.internal.ReplayState:68","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1444","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:840","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","position":"org.easymock.internal.MockInvocationHandler:37","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:388","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"Nothing captured yet\"","position":"org.easymock.Capture:132","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:52","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer()","position":"org.easymock.internal.ExpectedInvocation:103","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"genericType":"genericType"},"name":"add","transplant":{"sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:224","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.Invocation:209","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((T)(net.sf.cglib.proxy.Factory))","position":"org.easymock.internal.ClassProxyFactory:247","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.ClassProxyFactory:68","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new (\"<=\") {\n    @java.lang.Override\n    public boolean matchResult(final int result) {\n        return int <= 0;\n    }\n}","position":"org.easymock.LogicalOperator:30","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Float>(float))","position":"org.easymock.EasyMock:839","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:183","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>)","position":"org.easymock.internal.AndroidClassProxyFactory:48","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Invocation.org.easymock.internal.Invocation.isJavaIdentifier(java.lang.String)) {\n    return (java.lang.String + \".\") + java.lang.String;\n} ","position":"org.easymock.internal.Invocation:153","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-504083241204488174L","position":"org.easymock.internal.matchers.GreaterOrEqual:26","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5160559075998939348L","position":"org.easymock.internal.matchers.Not:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean))","position":"org.easymock.internal.MocksBehavior:75","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","mock":"mock"},"name":"add","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2025","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>)","position":"org.easymock.internal.Injector:127","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","position":"org.easymock.internal.MocksControl:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:721","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:281","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","position":"org.easymock.internal.MocksControl:248","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:682","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","position":"org.easymock.EasyMockSupport:480","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:42","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ","position":"org.easymock.internal.MocksBehavior:194","type":"CtReturnImpl"},"status":-2},{"failures":[182],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","position":"org.easymock.internal.RecordState:151","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:127","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:224","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","position":"org.easymock.internal.ReflectionUtils:230","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"method"},"name":"add","transplant":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.Invocation:84","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"f":"f"},"name":"replace","transplant":{"sourceCode":"return new org.easymock.internal.InjectionTarget(java.lang.reflect.Field)","position":"org.easymock.internal.Injector:219","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injector.org.easymock.internal.Injector.shouldNotAssignTo(java.lang.reflect.Field)) {\n    return null;\n} ","position":"org.easymock.internal.Injector:216","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"mockedMethods":"mockedMethods"},"name":"replace","transplant":{"sourceCode":"this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","position":"org.easymock.internal.MockBuilder:72","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size())","position":"org.easymock.internal.ClassProxyFactory:114","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{"cached":"org.easymock.internal.MocksControl.classProxyFactory"},"name":"replace","transplant":{"sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","position":"org.easymock.internal.MocksControl:136","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","position":"org.easymock.internal.MocksControl:146","type":"CtTryImpl"},"status":-2},{"failures":[147,266,235],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return int > 0","position":"org.easymock.LogicalOperator:51","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int == 0","position":"org.easymock.internal.matchers.CompareEqual:39","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"-2689588759855326190L","position":"org.easymock.internal.matchers.NotNull:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-3743894206806704049L","position":"org.easymock.internal.matchers.Any:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","position":"org.easymock.EasyMock:2039","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:346","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Short>(short))","position":"org.easymock.EasyMock:785","type":"CtInvocationImpl"},"status":-2},{"failures":[267,268],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:115","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","position":"org.easymock.internal.RecordState:146","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","position":"org.easymock.ConstructorArgs:60","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:987","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new (\"==\") {\n    @java.lang.Override\n    public boolean matchResult(final int result) {\n        return int == 0;\n    }\n}","position":"org.easymock.LogicalOperator:36","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(T))","position":"org.easymock.EasyMock:1568","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","position":"org.easymock.internal.LastControl:126","type":"CtInvocationImpl"},"status":-2},{"failures":[27,36,256,94,163,242],"variableMapping":{"throwable":"throwable","state":"state"},"name":"add","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:301","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:267","type":"CtInvocationImpl"},"status":-1},{"failures":[260,261,262,269,270,264,265],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ReflectionUtils:194","type":"CtReturnImpl"},"status":-1},{"failures":[189,190,191],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:110","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object)","position":"org.easymock.internal.MocksControl:156","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int])","position":"org.easymock.internal.MethodSerializationWrapper:68","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:198","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Class<?>[][int].isPrimitive()","position":"org.easymock.internal.Invocation:139","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException)","position":"org.easymock.internal.DefaultClassInstantiator:60","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"verified":"lastInvocationUsed"},"name":"add","transplant":{"sourceCode":"boolean = false","position":"org.easymock.internal.MocksBehavior:156","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:177","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","position":"org.easymock.internal.MocksControl:131","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"status":-2},{"failures":[27,271,31,86,94,95,272,100,101,102,163,170,171,185,192,273,274,230],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"(int)++","position":"org.easymock.internal.MocksBehavior:94","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int--","position":"org.easymock.internal.MocksBehavior:115","type":"CtUnaryOperatorImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","position":"org.easymock.internal.InjectionTarget:59","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:257","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:284","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"boolean = false","position":"org.easymock.internal.RecordState:79","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.objenesis.ObjenesisHelper.org.objenesis.ObjenesisHelper.newInstance(java.lang.Class<?>)","position":"org.easymock.internal.ObjenesisClassInstantiator:26","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.MocksControl.ONCE":"org.easymock.internal.MocksControl.ONCE","this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(this.org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:118","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:163","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","position":"org.easymock.internal.MockBuilder:69","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","position":"org.easymock.internal.RecordState:221","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new org.easymock.internal.MocksControl.MockType(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.internal.MocksControl:48","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:180","type":"CtIfImpl"},"status":-2},{"failures":[275],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:80","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.Invocation.getMethod()","position":"org.easymock.internal.Result:82","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:71","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Same:42","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":108,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":86,"org.easymock.tests2.MockedExceptionTest.testRealException":176,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":235,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":84,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":53,"org.easymock.tests.UsageVarargTest.varargIntAccepted":60,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":25,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":270,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":136,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":0,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":243,"org.easymock.tests2.UsageConstraintsTest.testContains":148,"org.easymock.tests.UsageCallCountTest.tooManyCalls":101,"org.easymock.tests2.UsageConstraintsTest.testFind":140,"org.easymock.tests.UsageVarargTest.allKinds":67,"org.easymock.tests2.StubTest.stubWithReturnValue":242,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":199,"org.easymock.tests2.CaptureTest.testCaptureAll":195,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":103,"org.easymock.samples.ExampleTest.addAndChangeDocument":12,"org.easymock.tests.UsageVarargTest.varargCharAccepted":61,"org.easymock.tests2.CaptureTest.testCaptureFromStub":205,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":262,"org.easymock.tests.UsageVerifyTest.twoThrows":94,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":261,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":21,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":62,"org.easymock.tests2.DelegateToTest.testReturnException":179,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":167,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":265,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":152,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":254,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":183,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":267,"org.easymock.tests2.CaptureTest.testAnd":194,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":46,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":17,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":203,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":50,"org.easymock.tests2.UsageConstraintsTest.testMatches":151,"org.easymock.tests2.UsageConstraintsTest.testNull":141,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":217,"org.easymock.tests2.EasyMockSupportClassTest.testAll":237,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":249,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":54,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":129,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":193,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":263,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":19,"org.easymock.tests.UsageThrowableTest.throwError":105,"org.easymock.tests2.UsageConstraintsTest.greaterThan":153,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":58,"org.easymock.samples.SupportTest.addDocument":4,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":24,"org.easymock.tests2.StubTest.stub":241,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":77,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":20,"org.easymock.tests.UsageExpectAndReturnTest.object":126,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":135,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":155,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":251,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":66,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":188,"org.easymock.tests.UsageExpectAndThrowTest.object":48,"org.easymock.tests2.DelegateToTest.testWrongClass":181,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":210,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":34,"org.easymock.tests2.UsageTest.moreThanOneArgument":165,"org.easymock.tests.UsageVarargTest.varargByteAccepted":65,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":45,"org.easymock.samples.ExampleTest.voteAgainstRemoval":9,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":111,"org.easymock.tests.UsageVarargTest.varargShortAccepted":63,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":49,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":175,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":76,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":3,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":211,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":228,"org.easymock.tests2.MockBuilderTest.testCreateMock":273,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":212,"org.easymock.tests2.SerializationTest.testAllMockedMethod":191,"org.easymock.samples.ExampleTest.voteAgainstRemovals":6,"org.easymock.tests2.CompareToTest.testCompareEqual":266,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":91,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":23,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":68,"org.easymock.tests2.CaptureTest.testCapture1_2446744":198,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":171,"org.easymock.tests.LimitationsTest.mockNativeMethod":113,"org.easymock.tests2.DelegateToTest.testStubDelegate":180,"org.easymock.tests.UsageUnorderedTest.message":102,"org.easymock.samples.ExampleTest.answerVsDelegate":7,"org.easymock.samples.ExampleTest.voteForRemoval":8,"org.easymock.tests.UsageCallCountTest.tooFewCalls":97,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":125,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":99,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":214,"org.easymock.tests.UsageVerifyTest.twoReturns":95,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":47,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":120,"org.easymock.tests2.DependencyTest.testInterfaceMocking":224,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":244,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":33,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":247,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":264,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":144,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":89,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":122,"org.easymock.tests2.CaptureTest.testCaptureRightOne":204,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":96,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":173,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":234,"org.easymock.tests2.UsageConstraintsTest.cmpTo":147,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":127,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":219,"org.easymock.tests2.MockedExceptionTest.testMockedException":174,"org.easymock.tests.UsageThrowableTest.throwCheckedException":109,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":57,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":81,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":159,"org.easymock.samples.PartialClassMockTest.testGetArea":13,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":93,"org.easymock.samples.ExampleTest.voteForRemovals":11,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":107,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":70,"org.easymock.samples.ConstructorCalledMockTest.testTax":1,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":150,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":18,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":35,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":233,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":27,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":216,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":121,"org.easymock.tests2.AnswerTest.answer":213,"org.easymock.tests.MockingTest.testNicePartialClassMocking":72,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":275,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":85,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":117,"org.easymock.tests2.UsageConstraintsTest.any":146,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":124,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":78,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":260,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":83,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":253,"org.easymock.tests.UsageExpectAndThrowTest.longType":41,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":55,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":178,"org.easymock.tests2.CallbackTest.callback":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":239,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":139,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":227,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":149,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":134,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":22,"org.easymock.tests2.MockBuilderTest.testCreateMockString":274,"org.easymock.tests2.CaptureTest.testCaptureNone":202,"org.easymock.tests2.SerializationTest.test":190,"org.easymock.tests.UsageExpectAndReturnTest.longType":119,"org.easymock.tests2.SerializationTest.testClass":189,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":200,"org.easymock.tests2.CaptureTest.testCaptureFirst":207,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":156,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":14,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":32,"org.easymock.tests2.UsageTest.niceToStrict":166,"org.easymock.tests2.EasyMockSupportTest.testVerify":255,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":43,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":158,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":163,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":51,"org.easymock.tests2.UsageTest.strictResetToDefault":164,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":133,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":236,"org.easymock.tests.GenericTest.testBridgedEquals":268,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":26,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":38,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":145,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":123,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":221,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":59,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":154,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":232,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":229,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":37,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":73,"org.easymock.tests2.UsageConstraintsTest.testOr":143,"org.easymock.tests2.DelegateToTest.testDelegate":182,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":209,"org.easymock.tests2.UsageConstraintsTest.testNotNull":160,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":185,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":172,"org.easymock.tests2.CaptureTest.testCapture_2617107":196,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":104,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":112,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":128,"org.easymock.tests2.ThreadingTest.testThreadSafe":208,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":169,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":80,"org.easymock.tests.UsageThrowableTest.noUpperLimit":106,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":218,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":220,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":252,"org.easymock.tests.UsageExpectAndReturnTest.floatType":118,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":245,"org.easymock.tests2.UsageConstraintsTest.testSame":142,"org.easymock.tests2.UsageTest.resumeIfFailure":170,"org.easymock.tests.UsageOverloadedMethodTest.overloading":69,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":222,"org.easymock.samples.SupportTest.voteForRemovals":5,"org.easymock.tests.UsageRangeTest.combination":90,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":110,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":259,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":2,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":161,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":115,"org.easymock.tests.UsageTest.openCallCountByLastCall":29,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":44,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":258,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":92,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":157,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":79,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":184,"org.easymock.tests2.CaptureTest.testPrimitive":197,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":231,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":130,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":52,"org.easymock.samples.BasicClassMockTest.testPrintContent":15,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":74,"org.easymock.tests.UsageExpectAndThrowTest.floatType":40,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":100,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":131,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":177,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":230,"org.easymock.tests2.UsageStrictMockTest.differentMethods":187,"org.easymock.tests.UsageTest.exactCallCountByLastCall":31,"org.easymock.tests2.AnswerTest.stubAnswer":215,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":246,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":250,"org.easymock.tests2.CaptureTest.testCaptureLast":201,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":39,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":272,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":98,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":225,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":238,"org.easymock.tests.UsageStrictMockTest.range":87,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":30,"org.easymock.tests.UsageTest.unexpectedCallWithArray":271,"org.easymock.tests.MockingTest.testPartialClassMocking":71,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":132,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":256,"org.easymock.tests2.UsageConstraintsTest.constraints":138,"org.easymock.samples.ExampleTest.addDocument":10,"org.easymock.tests2.UsageConstraintsTest.lessThan":162,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":16,"org.easymock.tests.UsageVarargTest.varargLongAccepted":64,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":82,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":240,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":257,"org.easymock.tests2.UsageStrictMockTest.range":186,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":223,"org.easymock.tests.UsageTest.moreThanOneArgument":28,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":75,"org.easymock.tests2.UsageTest.openCallCountByLastCall":168,"org.easymock.tests.UsageStrictMockTest.differentMethods":88,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":248,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":269,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":137,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":226,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":42,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":116,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":36,"org.easymock.tests2.CaptureTest.testCapture2_2446744":206,"org.easymock.tests.GenericTest.testPackageScope":114}}]

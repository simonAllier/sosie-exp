[{"position":"org.easymock.internal.MockBuilder:80","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MocksControl:105","failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384],"status":-1,"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1848","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:879","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[358],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:244","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[19,23],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:708","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:183","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[385],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[386],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:67","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","type":"CtThrowImpl"},"failures":[387],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:183","failures":[53,75,87,89,90,91,92,388,5,135,141,142,143,144,147,150,151,154,155,156,157,162,229,232,233,234,235,389,390,301,304,310,320,321,322,324,325,327,328,329,330,331,361,362,363,364,366,367,373,375,376,377,378,380,381,382,383,384,391,392],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:85","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object));\n} ","type":"CtIfImpl"},"failures":[165,393,394],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1951","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Long>(org.easymock.Capture<java.lang.Long>))","type":"CtInvocationImpl"},"failures":[152],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ClassProxyFactory:168","failures":[395,396,397,398,399,400,401,402,403,404,405,406,388,407,408,409,410,411,412,413,414,415,416,417,129,130,418,419,420,421,422,423,424,425,426,427,393,428,429,430,431,394,432,433,434,435,436,437,438,439,440,441,389,442,390,391,392],"status":-1,"binaryOperator":"java.lang.reflect.Method[] != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:194","failures":[443,444,445,446,447,448,449],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:94","sourceCode":"return org.easymock.internal.MockInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","type":"CtReturnImpl"},"failures":[19,20,21,22,23,24,25,26,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,70,71,72,73,74,75,76,77,78,79,80,81,82,395,450,451,396,83,452,453,84,85,86,88,89,90,91,92,398,454,455,456,99,106,107,108,109,110,111,0,117,1,3,5,6,7,8,9,10,13,118,119,120,121,457,122,123,124,125,126,407,408,127,409,410,411,14,412,414,458,459,415,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,422,164,169,170,171,426,460,461,462,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,230,231,232,233,234,235,237,238,239,240,241,242,243,244,245,246,247,248,265,271,441,389,15,273,274,276,277,278,279,280,281,282,283,284,285,286,390,299,300,301,302,303,304,309,310,311,312,313,314,315,316,318,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,361,368,369,370,371,372,373,374,375,376,378,380,463,463,464,464,18,384],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"proxy"}},{"transplant":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[451,453,465,466,467,468,469,448,470,471,449],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"arg","i":"i"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[472,473,474,475,193,230],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,395,450,451,396,476,83,452,453,465,477,478,84,85,86,87,88,89,90,91,92,397,479,480,398,481,399,454,400,401,482,483,402,484,485,403,486,455,404,405,385,487,406,456,488,489,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,0,117,388,1,3,4,490,5,6,7,8,491,492,9,10,13,118,119,120,121,457,449,387,493,494,495,496,497,122,498,123,124,125,126,407,408,127,409,410,411,14,499,412,500,413,414,458,459,415,416,417,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,418,501,502,419,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,420,421,422,423,163,164,165,166,167,168,169,170,171,424,425,426,460,461,172,462,173,174,427,175,176,177,178,179,180,181,182,183,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,393,428,429,430,431,394,432,433,237,238,239,240,241,242,243,244,245,246,434,435,436,437,438,439,440,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,525,441,389,15,442,273,274,275,276,277,278,279,280,281,282,283,284,285,286,390,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,16,526,527,305,306,17,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,463,464,381,18,382,383,384,391,392],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[73,79,80,90,528,193,194,197,198,230,233,304,333,334],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[451,453,465,466,467,529,530,531,532,468,469,448,470,471,449,533],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnValue":"arg","returnedType":"paramType"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[534,535,533],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:140","sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","type":"CtInvocationImpl"},"failures":[438,386,536],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:95","failures":[31,32,35,37,38,40,50,55,149,151,159],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,395,450,451,396,476,83,452,453,465,477,478,84,85,86,87,88,89,90,91,92,397,479,480,398,481,399,454,400,401,482,483,402,484,485,403,486,455,404,405,385,487,406,456,488,489,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,0,117,388,1,468,3,4,469,490,5,6,7,448,8,491,492,9,10,471,13,118,119,120,121,457,449,537,122,123,124,125,126,407,408,127,409,410,411,14,499,412,500,413,414,458,459,415,416,417,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,418,501,502,538,419,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,420,421,422,423,163,164,165,166,167,168,169,170,171,424,425,426,460,461,172,462,173,174,427,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,393,428,429,430,431,394,432,433,237,238,239,240,241,242,243,244,245,246,539,434,435,436,437,438,439,540,440,247,248,541,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,525,441,389,15,442,273,274,275,276,277,278,279,280,281,282,283,284,285,286,390,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,16,526,527,305,306,17,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,463,464,381,18,382,383,384,391,392],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:879","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (this.java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[395,450,451,396,452,453,398,454,455,456,542,543,0,388,1,2,3,4,5,6,7,8,9,10,12,13,457,407,408,409,410,411,14,412,414,458,459,415,130,422,426,460,461,462,428,441,389,15,390,16,17,463,463,464,464,18,391,392],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[72,88,91,92,192,204,208,209,211,214,231,234,235,275,285,332,333,334],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1687","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:786","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[39],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[88,90,91,230,231,233,234,236],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.EqualsWithDelta:45","sourceCode":"java.lang.StringBuffer.append(((((\"eq(\" + (java.lang.Number)) + \", \") + (java.lang.Number)) + \")\"))","type":"CtInvocationImpl"},"failures":[544],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:44","failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,395,450,451,396,476,83,452,453,465,477,478,84,85,86,87,88,89,90,91,92,397,479,480,398,481,399,454,400,401,482,483,402,484,485,403,486,455,404,405,385,487,406,456,488,489,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,0,117,388,1,468,3,4,469,490,5,6,7,448,8,491,492,9,10,471,13,118,119,120,121,457,449,537,122,123,124,125,126,407,408,127,409,410,411,14,499,412,500,413,414,458,459,415,416,417,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,418,501,502,538,419,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,420,421,422,423,163,164,165,166,167,168,169,170,171,424,425,426,460,461,172,462,173,174,427,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,393,428,429,430,431,394,432,433,237,238,239,240,241,242,243,244,245,246,539,434,435,436,437,438,439,540,440,247,248,541,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,525,441,389,15,442,273,274,275,276,277,278,279,280,281,282,283,284,285,286,390,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,16,526,527,305,306,17,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,463,464,381,18,382,383,384,391,392],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:327","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[78],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[265],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:173","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"this.org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[21,29,30,31,32,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,63,70,71,72,74,76,77,81,82,395,450,451,396,83,452,453,84,85,88,90,91,398,454,455,456,99,106,110,0,117,5,7,8,10,457,122,123,124,125,126,407,408,127,409,410,411,412,458,459,415,132,133,134,135,136,137,138,140,141,142,143,148,149,150,152,153,156,157,158,159,161,162,422,169,170,171,460,461,462,175,176,177,178,179,191,192,195,196,199,231,233,234,242,243,244,245,246,247,258,260,269,270,272,441,15,276,277,278,279,285,299,300,303,309,311,312,313,314,315,316,318,332,334,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,373,375,376,378,18,384],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","delegateTo":"value"}},{"position":"org.easymock.EasyMock:1543","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[21,29,30,31,32,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,63,70,71,72,74,76,77,78,81,82,395,450,451,396,83,452,453,84,85,88,90,91,398,454,455,456,99,110,0,117,3,5,7,8,10,457,122,123,124,125,126,407,408,127,409,410,411,412,458,459,415,130,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,152,153,156,157,158,159,161,162,422,169,170,171,460,461,462,175,176,177,178,179,191,192,195,196,199,231,233,234,245,246,247,441,15,276,277,278,279,285,299,300,303,309,311,312,313,314,315,316,332,334,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,373,375,376,378,18,384],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[0,117,388,545],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:364","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[250,369],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:54","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[72,88,90,91,546,472,547,548,549,550,475,551,528,192,231,233,234,273,274,281,284,285,286,304,332,333,334],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.internal.matchers.Any:36","failures":[37,41,88,150,156,157,162,175,176,177,178,179,188,231,245,246,247,248,299,300,301,302,303,304],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:108","sourceCode":"org.easymock.internal.Invocation.validateCaptures()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[20,21,22,24,25,26,28,29,30,31,32,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,70,71,72,73,74,75,76,77,78,79,80,81,82,395,450,451,396,83,452,453,84,85,86,87,88,89,90,91,92,398,454,455,456,99,106,109,110,111,0,117,388,1,3,5,6,7,8,9,10,13,118,119,120,121,457,122,123,124,125,126,407,408,127,409,410,411,14,412,414,458,459,415,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,422,169,170,171,460,461,462,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,228,229,230,231,232,233,234,235,237,238,239,240,241,245,246,247,248,441,389,276,278,279,280,282,283,286,390,299,300,301,302,303,304,309,310,311,312,313,314,315,316,320,321,322,324,325,326,327,328,329,330,331,332,333,334,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,361,362,363,364,365,366,367,373,374,375,376,377,378,380,463,464,381,18,382,383,384,391,392],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"actual":"invocation"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":32,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":191,"org.easymock.tests2.UsageTest.argumentsOrdered":80,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":142,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":64,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":259,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":75,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":381,"org.easymock.tests2.DelegateToTest.testReturnException":20,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":185,"org.easymock.tests.MockingTest.testPartialClassMocking":460,"org.easymock.tests.MockClassControlTest.testToString":429,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":112,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":318,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":417,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":268,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":483,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":454,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":200,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":85,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":524,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":443,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":39,"org.easymock.tests2.UsageTest.wrongArguments":73,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":299,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":105,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":182,"org.easymock.samples.ExampleTest.answerVsDelegate":374,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":17,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":174,"org.easymock.tests2.UsageConstraintsTest.testNull":35,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":409,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":433,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":141,"org.easymock.tests2.CaptureTest.testPrimitive":152,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":303,"org.easymock.tests.UsageTest.moreThanOneArgument":192,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":219,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":127,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":239,"org.easymock.tests.UsageTest.argumentsOrdered":198,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":368,"org.easymock.tests.UsageVarargTest.varargIntAccepted":322,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":550,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":264,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":175,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":447,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":1,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":502,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":68,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":6,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":251,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":179,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":508,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":99,"org.easymock.tests.ReplayStateInvalidUsageTest.times":295,"org.easymock.tests2.DependencyTest.testClassMocking":477,"org.easymock.tests2.AnswerTest.answer":106,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":40,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":266,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":121,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":527,"org.easymock.tests2.CaptureTest.testAnd":149,"org.easymock.tests2.UsageTest.strictResetToDefault":71,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":469,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":414,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":238,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":136,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":278,"org.easymock.tests2.DelegateToTest.testDelegate":24,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":372,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":507,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":215,"org.easymock.tests.LimitationsTest.mockFinalMethod":423,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":188,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":224,"org.easymock.tests2.DependencyTest.testClassMockingSupport":478,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":273,"org.easymock.tests2.CaptureTest.testCapture1_2446744":153,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":499,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":213,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":119,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":289,"org.easymock.tests.UsageThrowableTest.throwError":309,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":306,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":541,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":69,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":241,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":466,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":489,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":511,"org.easymock.samples.PartialClassMockTest.testGetArea":18,"org.easymock.tests.MockingTest.testInterfaceMocking":172,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":290,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":176,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":402,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":168,"org.easymock.tests2.UsageTest.niceToStrict":74,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":201,"org.easymock.tests2.ThreadingTest.testChangeDefault":498,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":534,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":249,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":5,"org.easymock.tests2.MockBuilderTest.testCreateMock":9,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":385,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":102,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":472,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":209,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":137,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":526,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":337,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":359,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":180,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":530,"org.easymock.tests.UsageOverloadedMethodTest.overloading":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":486,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":406,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":45,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":283,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":169,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":349,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":386,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":44,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":158,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":323,"org.easymock.tests.MockClassControlTest.testEquals":432,"org.easymock.tests2.EasyMockSupportClassTest.testAll":398,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":389,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":217,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":542,"org.easymock.tests2.CaptureTest.testCaptureAll":150,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":120,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":222,"org.easymock.tests.MockNameTest.defaultName":190,"org.easymock.tests2.UsageConstraintsTest.testMatches":46,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":240,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":287,"org.easymock.samples.ExampleTest.voteForRemovals":378,"org.easymock.tests.UsageVarargTest.allKinds":331,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":332,"org.easymock.samples.BasicClassMockTest.testPrintContent":392,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":223,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":315,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":86,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":189,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":23,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":65,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":540,"org.easymock.tests2.UsageConstraintsTest.greaterThan":48,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":481,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":277,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":415,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":512,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":440,"org.easymock.samples.ExampleTest.voteForRemoval":375,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":416,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":123,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":11,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":307,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":538,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":14,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":504,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":390,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":70,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":492,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":256,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":134,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":311,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":479,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":184,"org.easymock.tests2.CaptureTest.testCaptureFirst":162,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":19,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":255,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":135,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":82,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":286,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":345,"org.easymock.tests2.CaptureTest.testCapture2_2446744":161,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":125,"org.easymock.tests2.UsageTest.moreThanOneArgument":72,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":10,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":267,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":330,"org.easymock.tests.GenericTest.testBridgedEquals":442,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":531,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":366,"org.easymock.tests.UsageExpectAndReturnTest.longType":341,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":132,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":220,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":12,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":218,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":53,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":358,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":216,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":226,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":237,"org.easymock.tests.UsageCallCountTest.tooManyCalls":367,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":361,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":487,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":346,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":104,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":205,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":314,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":450,"org.easymock.tests.MockingTest.testNiceClassMocking":427,"org.easymock.tests.MockingTest.testClassMocking":425,"org.easymock.tests2.UsageConstraintsTest.testContains":43,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":2,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":360,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":130,"org.easymock.tests2.UsageConstraintsTest.testFind":34,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":171,"org.easymock.tests.MockTypeTest.fromEasyMockClass":305,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":28,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":228,"org.easymock.tests.UsageExpectAndReturnTest.object":348,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":412,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":103,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":544,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":140,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":444,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":325,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":166,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":532,"org.easymock.tests.UsageTest.exactCallCountByLastCall":199,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":247,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":254,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":317,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":369,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":449,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":320,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":354,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":282,"org.easymock.tests.MockClassControlTest.testHashCode":394,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":59,"org.easymock.tests2.EasyMockSupportTest.testVerify":144,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":485,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":370,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":280,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":336,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":118,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":93,"org.easymock.tests.UsageVarargTest.varargCharAccepted":324,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":539,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":87,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":272,"org.easymock.tests2.UsageTest.openCallCountByLastCall":76,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":535,"org.easymock.tests.DefaultClassInstantiatorTest.object":434,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":143,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":335,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":164,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":528,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":403,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":207,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":312,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":97,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":58,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":510,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":458,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":431,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":206,"org.easymock.tests.ReplayStateInvalidCallsTest.times":516,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":355,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":225,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":517,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":548,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":456,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":430,"org.easymock.tests2.UsageTest.resumeIfFailure":81,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":16,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":501,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":187,"org.easymock.tests2.StubTest.stubWithReturnValue":148,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":448,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":54,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":347,"org.easymock.tests2.SerializationTest.testAllMockedMethod":388,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":265,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":473,"org.easymock.samples.SupportTest.voteForRemovals":384,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":525,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":61,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":212,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":545,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":271,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":107,"org.easymock.tests.UsageExpectAndThrowTest.object":210,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":319,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":51,"org.easymock.tests2.DelegateToTest.testWrongClass":22,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":514,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":245,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":246,"org.easymock.samples.ConstructorCalledMockTest.testTax":463,"org.easymock.tests.UsageStrictMockTest.range":233,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":145,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":139,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":395,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":529,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":211,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":7,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":397,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":197,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":297,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":181,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":474,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":506,"org.easymock.tests2.CaptureTest.testCaptureNone":157,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":244,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":493,"org.easymock.tests.UsageUnorderedTest.message":304,"org.easymock.tests.UsageVerifyTest.twoReturns":334,"org.easymock.tests.UsageVarargTest.varargByteAccepted":329,"org.easymock.tests2.ThreadingTest.testThreadSafe":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":404,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":364,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":391,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":167,"org.easymock.tests2.CaptureTest.testCapture_2617107":151,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":269,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":302,"org.easymock.tests2.UsageConstraintsTest.any":41,"org.easymock.tests2.StubTest.stub":147,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":294,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":227,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":186,"org.easymock.tests.UsageExpectAndThrowTest.longType":203,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":270,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":438,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":293,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":89,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":63,"org.easymock.tests.LimitationsTest.mockNativeMethod":422,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":15,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":357,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":96,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":522,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":92,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":494,"org.easymock.tests2.NameTest.nameForMocksControl":116,"org.easymock.tests2.MockedExceptionTest.testMockedException":129,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":399,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":196,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":462,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":27,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":204,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":407,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":8,"org.easymock.tests.MockingTest.testNicePartialClassMocking":461,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":411,"org.easymock.tests2.CaptureTest.testCaptureLast":156,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":94,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":274,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":521,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":453,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":38,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":52,"org.easymock.tests.MockingTest.testTwoMocks":426,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":518,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":465,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":338,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":208,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":79,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":56,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":497,"org.easymock.samples.ExampleTest.removeNonExistingDocument":379,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":101,"org.easymock.tests.UsageStrictMockTest.differentMethods":234,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":291,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":60,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":496,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":436,"org.easymock.tests2.ConstraintsToStringTest.andToString":549,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":124,"org.easymock.tests2.MockBuilderTest.testCreateMockString":13,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":400,"org.easymock.tests.UsageExpectAndThrowTest.floatType":202,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":480,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":109,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":537,"org.easymock.tests.UsageVerifyTest.twoThrows":333,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":455,"org.easymock.samples.ExampleTest.voteAgainstRemoval":376,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":242,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":260,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":459,"org.easymock.tests.LimitationsTest.privateConstructor":421,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":467,"org.easymock.tests2.UsageConstraintsTest.testNotNull":55,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":128,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":316,"org.easymock.tests2.UsageTest.defaultResetToNice":78,"org.easymock.samples.ExampleTest.voteAgainstRemovals":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":261,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":353,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":95,"org.easymock.tests.UsageVarargTest.differentLength":326,"org.easymock.tests2.CallbackTest.callback":25,"org.easymock.tests2.UsageConstraintsTest.equals":33,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":500,"org.easymock.tests.UsageTest.openCallCountByLastCall":195,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":29,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":301,"org.easymock.tests.UsageCallCountTest.tooFewCalls":362,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":396,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":183,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":495,"org.easymock.tests.UsageThrowableTest.throwCheckedException":313,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":475,"org.easymock.tests.MockingTest.testStrictClassMocking":424,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":452,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":248,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":451,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":100,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":296,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":83,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":111,"org.easymock.tests.ObjectMethodsTest.testHashCode":165,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":446,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":520,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":126,"org.easymock.tests2.NameTest.nameForNiceMock":115,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":515,"org.easymock.tests2.DependencyTest.testInterfaceMocking":84,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":445,"org.easymock.samples.ExampleTest.addDocument":377,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":405,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":488,"org.easymock.tests2.DelegateToTest.testStubDelegate":21,"org.easymock.tests2.AnswerTest.stubAnswer":110,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":231,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":491,"org.easymock.tests.UsageVarargTest.varargLongAccepted":328,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":235,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":258,"org.easymock.tests.UsageExpectAndReturnTest.floatType":340,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":356,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":457,"org.easymock.tests2.ConstraintsToStringTest.orToString":546,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":464,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":49,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":67,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":284,"org.easymock.tests.UsageThrowableTest.noUpperLimit":310,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":30,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":418,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":154,"org.easymock.tests2.SerializationTest.test":117,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":536,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":435,"org.easymock.tests2.UsageConstraintsTest.testSame":36,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":339,"org.easymock.samples.SupportTest.addDocument":383,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":476,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":505,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":401,"org.easymock.tests.GenericTest.testPackageScope":441,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":371,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":253,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":66,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":173,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":503,"org.easymock.tests2.NameTest.nameForMock":113,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":350,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":471,"org.easymock.tests2.UsageStrictMockTest.differentMethods":91,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":413,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":342,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":214,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":163,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":279,"org.easymock.tests2.MockedExceptionTest.testRealException":131,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":308,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":146,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":263,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":551,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":88,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":262,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":298,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":300,"org.easymock.tests2.NameTest.nameForStrictMock":114,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":490,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":533,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":26,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":410,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":419,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":437,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":50,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":3,"org.easymock.tests2.UsageStrictMockTest.range":90,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":509,"org.easymock.tests2.UsageConstraintsTest.lessThan":57,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":62,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":133,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":484,"org.easymock.tests2.CaptureTest.testCaptureRightOne":159,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":387,"org.easymock.tests2.UsageConstraintsTest.testOr":37,"org.easymock.tests.UsageRangeTest.combination":276,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":408,"org.easymock.tests.UsageTest.wrongArguments":194,"org.easymock.tests2.MockBuilderTest.testWithConstructor":468,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":482,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":428,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":250,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":351,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":439,"org.easymock.tests.UsageVarargTest.varargShortAccepted":327,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":365,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":523,"org.easymock.tests2.UsageConstraintsTest.cmpTo":42,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":108,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":513,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":252,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":77,"org.easymock.tests2.CaptureTest.testCaptureFromStub":160,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":288,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":4,"org.easymock.tests.UsageTest.unexpectedCallWithArray":193,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":519,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":230,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":363,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":470,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":352,"org.easymock.tests2.UsageConstraintsTest.constraints":31,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":232,"org.easymock.samples.ExampleTest.addAndChangeDocument":380,"org.easymock.tests2.ConstraintsToStringTest.notToString":547,"org.easymock.tests.UsageStrictMockTest.testVerify":236,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":382,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":229,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":221,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":155,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":543,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":177,"org.easymock.tests.LimitationsTest.abstractClass":420,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":344,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":178,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":285,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":138,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":321}}]

[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:87","sourceCode":"if ((java.util.List<java.lang.reflect.Method>.size()) == 1) {\n    java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0);\n} else {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result","bridgeMethod":"bridgeMethod","candidateMethods":"candidateMethods","this":"this"}},{"position":"org.easymock.internal.Range:83","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"status":-1,"binaryOperator":"(int) == (java.lang.Integer.int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[37],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[56,57],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"this.org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"failures":[58,59,60,61,62,63,64,65,66,67,68,69,70],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"position":"org.easymock.EasyMock:1263","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:237","sourceCode":"return org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.reflect.Method.getParameterTypes())","type":"CtReturnImpl"},"failures":[58],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"bridgeMethod"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"failures":[71,72],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:138","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[73,74,68,69],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:337","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[75,76],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Matches:40","failures":[77],"status":-1,"binaryOperator":"(\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMockSupport:480","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:800","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[78],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[79,80,81],"status":-1,"binaryOperator":"java.lang.String == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:61","failures":[82,83,3,4,17,18,84,85,86,87,88,89,19,90,91,20,92,93,22,94,95,96,23,24,97,25,26,27,28,29,98,99,100,101,30,32,102,103,104,105,106,39,107,108,109,110,111,40,112,113,114,115,116,41,117,118,119,120,121,122,78,42,123,124,125,126,127],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1333","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:269","sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:273","sourceCode":"if ((java.lang.Class<?>.getSigners()) != null) {\n    net.sf.cglib.proxy.Enhancer.setNamingPolicy(org.easymock.internal.ClassProxyFactory.net.sf.cglib.core.NamingPolicy);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"failures":[128],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,59,144,145,146,147,148,149,149,150,150,151,152,153,154,155,156,94,157,158,61,159,62,160,161,162,163,164,165,166,167,168,169,170,171,172,173,63,174,175,176,66,177,67,68,70,178],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[179,180],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.Invocation:195","failures":[181,144,182,183,152,157,159,62,160,161,165,184,185,186,187,188,189,190,191,192,171,173,176,177,67,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,52,53,54,55],"status":-1,"binaryOperator":"(((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1191","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[220,70,221,178],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[124,222],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:305","failures":[82,83,0,1,2,129,76,4,6,7,223,224,8,9,11,12,15,225,226,16,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,138,139,140,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,18,84,85,86,87,88,271,89,19,20,272,273,274,275,276,21,277,278,279,280,281,142,92,93,22,148,282,283,284,285,286,287,288,289,151,152,290,153,154,155,94,158,61,159,160,161,162,163,291,164,165,166,167,168,169,96,23,24,97,25,28,29,98,99,101,30,292,170,31,32,34,35,36,37,38,293,102,103,104,105,106,39,107,108,109,110,40,112,113,114,115,116,41,117,118,119,120,121,122,78,42,123,124,172,63,175,176,177,43,294,44,295,46,47,296,297,50,198,68,298,51,299,300,301,302,180,125,303,210,304,305,306,217,307,308,218,309,219,310,311,312,70,221],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:183","failures":[82,0,1,2,129,313,4,5,6,7,314,8,9,11,12,15,130,226,16,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,315,316,317,318,319,320,321,322,323,17,247,249,250,138,139,140,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,84,85,86,87,88,324,325,326,327,328,329,89,19,90,91,20,276,330,21,277,278,279,280,281,143,92,93,22,146,147,148,331,332,282,333,283,284,285,286,334,287,335,288,289,151,290,153,155,160,161,162,163,291,164,165,167,168,169,96,23,24,97,26,27,28,29,98,99,30,170,31,336,32,33,34,35,337,338,36,37,339,38,293,102,103,104,105,106,39,107,108,109,110,40,112,113,114,115,116,41,117,118,119,120,121,122,78,42,123,124,63,175,176,43,294,44,295,340,46,47,50,198,68,298,51,299,300,301,180,125,303,210,126,127,304,306,217,307,308,219,310,311,312,341,70,221,178],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[96,24,99,104,105,39,108,109,111,119,42],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:124","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:157","sourceCode":"final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","type":"CtLocalVariableImpl"},"failures":[72],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[1,8,12,21,43,47],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.EasyMockProperties:62","failures":[82,83,128,342,343,0,1,2,344,345,346,347,348,349,350,351,352,353,129,354,355,356,357,358,359,360,361,362,363,364,365,366,75,367,368,369,76,370,371,372,373,374,375,376,377,313,3,4,5,6,7,314,378,379,380,381,382,383,223,224,384,8,9,385,10,11,12,13,14,15,130,225,226,16,386,387,388,389,131,132,133,134,135,136,390,391,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,315,316,317,392,318,319,393,320,321,322,323,17,247,248,249,250,394,395,137,138,139,396,140,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,423,424,425,426,18,427,428,429,430,431,432,433,141,84,85,86,87,88,271,434,324,325,326,327,435,328,329,436,89,19,90,91,20,272,437,273,274,438,275,439,440,56,441,442,71,57,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,276,330,21,277,278,279,280,281,58,142,143,59,466,92,93,144,467,468,469,182,145,183,470,22,146,147,148,331,332,282,149,150,333,283,284,285,286,334,287,471,335,472,473,288,289,151,152,290,153,154,155,156,79,94,60,474,157,158,61,159,179,62,475,476,477,478,80,160,161,162,163,479,291,164,165,480,95,481,184,185,166,186,482,167,187,483,484,188,189,485,486,487,488,168,190,489,191,192,490,169,491,492,96,23,24,97,25,26,27,28,29,98,99,100,101,30,292,493,170,494,31,495,336,32,33,34,35,337,338,36,37,496,497,339,38,293,102,103,104,105,498,106,39,107,108,109,110,111,40,112,113,114,115,116,41,117,118,119,120,121,122,78,42,123,124,171,172,173,499,63,174,175,176,64,65,66,177,67,43,294,44,45,295,340,46,47,296,48,49,297,50,193,194,195,196,197,198,199,200,201,202,203,204,68,69,500,298,51,299,501,300,301,81,302,180,125,303,205,206,207,208,209,210,211,212,213,214,215,216,126,502,127,304,305,306,217,307,308,218,309,219,310,311,312,341,70,221,178,503,504,505,506,507,52,53,54,55,508,509,510,511,512,513],"status":-1,"binaryOperator":"java.io.InputStream != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:94","sourceCode":"if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n    int = java.lang.Integer.int;\n} else {\n    int += org.easymock.internal.Range.getMaximum();\n}","type":"CtIfImpl"},"failures":[82,0,1,2,129,377,313,3,4,5,6,7,314,8,9,10,13,14,15,130,226,16,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,315,316,317,318,319,393,320,321,322,323,17,247,248,249,250,138,139,140,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,18,84,85,86,87,88,271,324,325,326,327,328,329,89,19,90,91,20,275,330,21,142,143,92,93,22,146,147,148,331,332,282,333,283,284,285,286,334,287,335,288,289,151,152,290,153,154,155,94,158,61,159,160,161,162,163,291,164,165,166,167,168,169,96,23,24,97,26,27,28,29,98,99,30,170,31,495,336,32,33,34,35,337,338,36,37,339,38,293,102,103,104,105,106,39,107,108,109,110,40,112,113,114,115,116,41,117,118,119,120,121,78,42,123,124,172,63,175,176,177,43,294,44,45,295,340,48,49,297,50,198,68,298,51,300,301,302,303,210,126,127,304,305,306,217,307,308,218,219,310,311,312,341,70,221,178,52,53,54,55],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[82,83,128,342,343,0,1,2,344,345,346,347,348,349,350,351,352,353,129,354,355,356,357,358,359,360,361,362,363,364,365,366,75,367,368,369,76,370,371,372,373,374,375,376,377,313,3,4,5,6,7,314,378,379,380,381,382,383,223,224,384,8,9,385,10,11,12,13,14,15,130,225,226,16,386,387,388,389,131,132,133,134,135,136,390,391,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,315,316,317,392,318,319,393,320,321,322,323,17,181,247,248,249,250,394,395,137,138,139,396,140,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,423,424,425,426,18,427,428,429,430,431,432,433,141,84,85,86,87,88,271,434,324,325,326,327,435,328,329,436,89,19,90,91,20,272,437,273,274,438,275,439,514,440,56,441,442,71,57,515,443,276,330,21,277,278,279,280,281,58,142,143,59,466,92,93,144,467,468,469,182,145,183,470,22,146,147,148,331,332,282,149,150,333,283,284,285,286,334,287,471,335,472,473,288,289,151,152,290,153,154,155,156,79,94,60,474,157,158,61,159,179,62,160,161,162,163,479,291,164,165,480,95,481,184,185,166,186,482,167,187,483,484,188,189,485,486,487,488,168,190,489,191,192,490,169,491,492,96,23,24,97,25,26,27,28,29,98,99,100,101,30,292,493,170,494,31,495,336,32,33,34,35,337,338,36,37,496,497,339,38,293,102,103,104,105,498,106,39,107,108,109,110,111,40,112,113,114,115,116,41,117,118,119,120,121,122,78,42,123,124,171,516,172,173,517,499,63,174,175,73,176,64,65,66,177,518,67,43,294,44,45,295,340,46,47,296,48,49,297,50,193,194,195,196,197,198,199,200,201,202,203,204,68,69,519,500,298,51,299,501,300,301,302,180,125,303,205,206,207,208,209,210,211,212,213,214,215,216,126,502,127,304,305,306,217,307,308,218,309,219,310,311,312,341,70,221,178,503,504,505,506,507,52,53,54,55,508,509,510,520,511,512,513],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:61","sourceCode":"final java.lang.Throwable java.lang.Throwable","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"failures":[521],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[83,1,8,12,16,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,423,424,425,426,18,427,274,276,21,277,278,279,280,281,292,493,170,494,36,43,47],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:138","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[73,74,68,69],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"failures":[444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1802","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"prefix"}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:173","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[17,19,339,105,109],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"actual":"expected"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[82,83,0,1,2,344,345,346,347,348,129,377,313,3,4,5,6,7,314,8,9,385,10,11,12,13,14,15,130,225,226,16,386,387,388,389,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,315,316,317,318,319,393,320,321,322,323,17,247,249,250,138,139,140,412,413,414,415,416,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,423,424,425,426,18,427,84,85,86,87,88,324,325,326,327,435,328,329,89,19,90,91,20,272,273,274,439,276,330,21,277,278,279,280,281,142,143,92,93,22,146,147,148,331,332,282,149,150,333,283,284,285,286,334,287,335,288,289,151,152,290,153,154,155,156,94,157,158,61,159,160,161,162,163,291,164,165,166,167,168,169,96,23,24,97,25,26,27,28,29,98,99,100,101,30,292,493,170,494,31,495,336,32,33,34,35,337,338,36,37,339,38,293,102,103,104,105,106,39,107,108,109,110,40,112,113,114,115,116,41,117,118,119,120,121,122,78,42,123,124,171,172,63,174,175,176,66,177,67,43,294,44,45,295,340,46,47,296,48,49,297,50,198,68,298,51,299,300,301,302,180,125,303,210,126,502,127,304,305,306,217,307,308,218,309,219,310,311,312,341,70,221,178,503,504,505,506],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.Range:40","failures":[82,83,128,342,343,0,1,2,344,345,346,347,348,349,350,351,352,353,129,354,355,356,357,358,359,360,361,362,363,364,365,366,75,367,368,369,76,370,371,372,373,374,375,376,377,313,3,4,5,6,7,314,378,379,380,381,382,383,223,224,384,8,9,385,10,11,12,13,14,15,130,225,226,16,386,387,388,389,131,132,133,134,135,136,390,391,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,315,316,317,392,318,319,393,320,321,322,323,17,181,247,248,249,250,394,395,137,138,139,396,140,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,423,424,425,426,18,427,428,429,430,431,432,433,141,84,85,86,87,88,271,434,324,325,326,327,435,328,329,436,89,19,90,91,20,272,437,273,274,438,275,439,514,440,56,441,442,71,57,515,443,276,330,21,277,278,279,280,281,58,142,143,59,466,92,93,144,467,468,469,182,145,183,470,22,146,147,148,331,332,282,149,150,333,283,284,285,286,334,287,471,335,472,473,288,289,151,152,290,153,154,155,156,79,94,60,474,157,158,61,159,179,62,160,161,162,163,479,291,164,165,480,95,481,184,185,166,186,482,167,187,483,484,188,189,485,486,487,488,168,190,489,191,192,490,169,491,492,96,23,24,97,25,26,27,28,29,98,99,100,101,30,292,493,170,494,31,495,336,32,33,34,35,337,338,36,37,496,497,339,38,293,102,103,104,105,498,106,39,107,108,109,110,111,40,112,113,114,115,116,41,117,118,119,120,121,122,78,42,123,124,171,516,172,173,517,499,63,174,175,73,176,64,65,66,177,518,67,43,294,44,45,295,340,46,47,296,48,49,297,50,193,194,195,196,197,198,199,200,201,202,203,204,68,69,519,500,298,51,299,501,300,301,302,180,125,303,205,206,207,208,209,210,211,212,213,214,215,216,126,502,127,304,305,306,217,307,308,218,309,219,310,311,312,341,70,221,178,503,504,505,506,507,52,53,54,55,508,509,510,520,511,512,513],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:148","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"failures":[522],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>).append(\")\")","type":"CtInvocationImpl"},"failures":[523],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:633","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[152],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","name":"name","this":"this"}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[117,524],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"parameterType","type":"parameterType"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":105,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":8,"org.easymock.tests2.UsageTest.argumentsOrdered":49,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":311,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":211,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":365,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":340,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":333,"org.easymock.tests2.DelegateToTest.testReturnException":298,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":424,"org.easymock.tests.MockingTest.testPartialClassMocking":138,"org.easymock.tests.MockClassControlTest.testToString":133,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":507,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":350,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":62,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":372,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":188,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":167,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":251,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":289,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":465,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":110,"org.easymock.tests2.UsageTest.wrongArguments":45,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":89,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":204,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":388,"org.easymock.samples.ExampleTest.answerVsDelegate":284,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":145,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":398,"org.easymock.tests2.UsageConstraintsTest.testNull":39,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":153,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":391,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":310,"org.easymock.tests2.CaptureTest.testPrimitive":97,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":20,"org.easymock.tests.UsageTest.moreThanOneArgument":9,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":270,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":290,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":346,"org.easymock.tests.UsageTest.argumentsOrdered":14,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":379,"org.easymock.tests.UsageVarargTest.varargIntAccepted":317,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":369,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":84,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":171,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":510,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":215,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":174,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":357,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":88,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":449,"org.easymock.tests.ReplayStateInvalidUsageTest.times":408,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":198,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":522,"org.easymock.tests2.DependencyTest.testClassMocking":472,"org.easymock.tests2.AnswerTest.answer":37,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":111,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":370,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":506,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":468,"org.easymock.tests2.CaptureTest.testAnd":96,"org.easymock.tests2.UsageTest.strictResetToDefault":294,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":517,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":157,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":345,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":249,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":307,"org.easymock.tests2.DelegateToTest.testDelegate":300,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":383,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":448,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":266,"org.easymock.tests.LimitationsTest.mockFinalMethod":354,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":18,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":416,"org.easymock.tests2.DependencyTest.testClassMockingSupport":473,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":223,"org.easymock.tests2.CaptureTest.testCapture1_2446744":25,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":79,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":264,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":504,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":402,"org.easymock.tests.UsageThrowableTest.throwError":276,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":182,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":181,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":216,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":348,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":492,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":452,"org.easymock.samples.PartialClassMockTest.testGetArea":148,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":403,"org.easymock.tests.MockingTest.testInterfaceMocking":396,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":85,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":189,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":141,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":252,"org.easymock.tests2.UsageTest.niceToStrict":295,"org.easymock.tests2.ThreadingTest.testChangeDefault":81,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":355,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":63,"org.easymock.tests2.MockBuilderTest.testCreateMock":66,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":191,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":201,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":260,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":308,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":467,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":422,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":271,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":386,"org.easymock.tests.UsageOverloadedMethodTest.overloading":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":490,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":488,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":115,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":274,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":225,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":238,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":114,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":98,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":392,"org.easymock.tests.MockClassControlTest.testEquals":390,"org.easymock.tests2.EasyMockSupportClassTest.testAll":166,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":143,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":268,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":521,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":505,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":414,"org.easymock.tests2.CaptureTest.testCaptureAll":23,"org.easymock.tests.MockNameTest.defaultName":428,"org.easymock.tests2.UsageConstraintsTest.testMatches":116,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":400,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":347,"org.easymock.samples.ExampleTest.voteForRemovals":287,"org.easymock.tests.UsageVarargTest.allKinds":17,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":0,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":415,"org.easymock.samples.BasicClassMockTest.testPrintContent":147,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":280,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":495,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":501,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":427,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":212,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":515,"org.easymock.tests2.UsageConstraintsTest.greaterThan":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":186,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":248,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":159,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":453,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":443,"org.easymock.samples.ExampleTest.voteForRemoval":285,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":179,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":302,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":183,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":520,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":156,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":445,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":130,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":43,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":362,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":306,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":184,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":423,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":500,"org.easymock.tests2.CaptureTest.testCaptureFirst":30,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":361,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":217,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":50,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":439,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":234,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":125,"org.easymock.tests2.CaptureTest.testCapture2_2446744":101,"org.easymock.tests2.UsageTest.moreThanOneArgument":44,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":177,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":371,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":323,"org.easymock.tests.GenericTest.testBridgedEquals":466,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":328,"org.easymock.tests.UsageExpectAndReturnTest.longType":230,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":412,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":304,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":269,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":436,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":122,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":267,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":418,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":344,"org.easymock.tests.UsageCallCountTest.tooManyCalls":329,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":324,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":192,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":235,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":203,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":256,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":279,"org.easymock.tests.MockingTest.testNiceClassMocking":399,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":161,"org.easymock.tests.MockingTest.testClassMocking":395,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":434,"org.easymock.tests2.UsageConstraintsTest.testContains":113,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":170,"org.easymock.tests2.UsageConstraintsTest.testFind":106,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":16,"org.easymock.tests.MockTypeTest.fromEasyMockClass":469,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":127,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":377,"org.easymock.tests.UsageExpectAndReturnTest.object":237,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":94,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":202,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":219,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":319,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":432,"org.easymock.tests.UsageTest.exactCallCountByLastCall":15,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":82,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":360,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":349,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":380,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":69,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":243,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":315,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":273,"org.easymock.tests.MockClassControlTest.testHashCode":136,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":206,"org.easymock.tests2.EasyMockSupportTest.testVerify":341,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":486,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":381,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":421,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":272,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":503,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":95,"org.easymock.tests.UsageVarargTest.varargCharAccepted":318,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":514,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":336,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":376,"org.easymock.tests2.UsageTest.openCallCountByLastCall":46,"org.easymock.tests.DefaultClassInstantiatorTest.object":440,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":312,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":420,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":430,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":487,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":258,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":277,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":196,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":205,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":451,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":158,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":135,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":257,"org.easymock.tests.CapturesMatcherTest.test":523,"org.easymock.tests.ReplayStateInvalidCallsTest.times":457,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":244,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":417,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":458,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":169,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":134,"org.easymock.tests2.UsageTest.resumeIfFailure":297,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":144,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":509,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":426,"org.easymock.tests2.StubTest.stubWithReturnValue":36,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":73,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":78,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":236,"org.easymock.tests2.SerializationTest.testAllMockedMethod":178,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":76,"org.easymock.samples.SupportTest.voteForRemovals":282,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":58,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":208,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":263,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":220,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":375,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":496,"org.easymock.tests.UsageExpectAndThrowTest.object":261,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":351,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":120,"org.easymock.tests2.DelegateToTest.testWrongClass":299,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":455,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":92,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":93,"org.easymock.samples.ConstructorCalledMockTest.testTax":149,"org.easymock.tests.UsageStrictMockTest.range":6,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":512,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":309,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":160,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":262,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":175,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":481,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":410,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":13,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":387,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":447,"org.easymock.tests2.CaptureTest.testCaptureNone":29,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":343,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":476,"org.easymock.tests.UsageUnorderedTest.message":22,"org.easymock.tests.UsageVerifyTest.twoReturns":2,"org.easymock.tests.UsageVarargTest.varargByteAccepted":322,"org.easymock.tests2.ThreadingTest.testThreadSafe":301,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":190,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":327,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":433,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":146,"org.easymock.tests2.CaptureTest.testCapture_2617107":24,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":384,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":91,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":373,"org.easymock.tests2.UsageConstraintsTest.any":40,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":407,"org.easymock.tests2.StubTest.stub":338,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":419,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":425,"org.easymock.tests.UsageExpectAndThrowTest.longType":254,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":374,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":71,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":406,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":33,"org.easymock.tests2.SerializationTest.testClass":70,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":210,"org.easymock.tests.LimitationsTest.mockNativeMethod":129,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":59,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":246,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":195,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":463,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":337,"org.easymock.tests2.NameTest.nameForMocksControl":55,"org.easymock.tests2.MockedExceptionTest.testMockedException":493,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":482,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":12,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":502,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":140,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":255,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":151,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":176,"org.easymock.tests.MockingTest.testNicePartialClassMocking":139,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":155,"org.easymock.tests2.CaptureTest.testCaptureLast":28,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":193,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":224,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":462,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":165,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":109,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":121,"org.easymock.tests.MockingTest.testTwoMocks":137,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":459,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":480,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":227,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":259,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":48,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":123,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":80,"org.easymock.samples.ExampleTest.removeNonExistingDocument":471,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":404,"org.easymock.tests.UsageStrictMockTest.differentMethods":7,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":200,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":207,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":478,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":441,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":180,"org.easymock.tests2.MockBuilderTest.testCreateMockString":67,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":131,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":187,"org.easymock.tests.UsageExpectAndThrowTest.floatType":253,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":41,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":185,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":339,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":519,"org.easymock.tests.UsageVerifyTest.twoThrows":1,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":437,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":168,"org.easymock.samples.ExampleTest.voteAgainstRemoval":286,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":128,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":366,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":61,"org.easymock.tests.LimitationsTest.privateConstructor":353,"org.easymock.tests2.UsageConstraintsTest.testNotNull":42,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":281,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":292,"org.easymock.tests2.UsageTest.defaultResetToNice":296,"org.easymock.samples.ExampleTest.voteAgainstRemovals":283,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":75,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":242,"org.easymock.tests.UsageVarargTest.differentLength":393,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":194,"org.easymock.tests2.CallbackTest.callback":31,"org.easymock.tests2.UsageConstraintsTest.equals":498,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":60,"org.easymock.tests.UsageTest.openCallCountByLastCall":11,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":102,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":90,"org.easymock.tests.UsageCallCountTest.tooFewCalls":325,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":163,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":389,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":477,"org.easymock.tests.UsageThrowableTest.throwCheckedException":278,"org.easymock.tests.MockingTest.testStrictClassMocking":394,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":164,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":83,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":162,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":199,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":409,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":291,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":293,"org.easymock.tests.ObjectMethodsTest.testHashCode":431,"org.easymock.tests2.ConstraintsToStringTest.matchesToString":77,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":461,"org.easymock.tests2.NameTest.nameForNiceMock":54,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":303,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":456,"org.easymock.tests2.DependencyTest.testInterfaceMocking":288,"org.easymock.samples.ExampleTest.addDocument":334,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":489,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":491,"org.easymock.tests2.DelegateToTest.testStubDelegate":51,"org.easymock.tests2.AnswerTest.stubAnswer":38,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":4,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":64,"org.easymock.tests.UsageVarargTest.varargLongAccepted":321,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":314,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":364,"org.easymock.tests.UsageExpectAndReturnTest.floatType":229,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":245,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":68,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":150,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":438,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":118,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":214,"org.easymock.tests.UsageThrowableTest.noUpperLimit":330,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":103,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":508,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":26,"org.easymock.tests2.SerializationTest.test":221,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":72,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":56,"org.easymock.tests2.UsageConstraintsTest.testSame":107,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":228,"org.easymock.samples.SupportTest.addDocument":332,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":479,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":446,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":405,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":483,"org.easymock.tests.GenericTest.testPackageScope":142,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":382,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":359,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":213,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":397,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":444,"org.easymock.tests2.NameTest.nameForMock":52,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":239,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":518,"org.easymock.tests2.UsageStrictMockTest.differentMethods":35,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":474,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":231,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":265,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":429,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":250,"org.easymock.tests2.MockedExceptionTest.testRealException":494,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":470,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":513,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":368,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":74,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":32,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":367,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":411,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":19,"org.easymock.tests2.NameTest.nameForStrictMock":53,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":499,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":126,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":154,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":511,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":442,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":119,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":172,"org.easymock.tests2.UsageStrictMockTest.range":34,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":450,"org.easymock.tests2.UsageConstraintsTest.lessThan":124,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":209,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":305,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":363,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":485,"org.easymock.tests2.CaptureTest.testCaptureRightOne":99,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":475,"org.easymock.tests2.UsageConstraintsTest.testOr":108,"org.easymock.tests.UsageRangeTest.combination":247,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":152,"org.easymock.tests.UsageTest.wrongArguments":10,"org.easymock.tests2.MockBuilderTest.testWithConstructor":516,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":484,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":132,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":232,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":240,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":356,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":57,"org.easymock.tests.UsageVarargTest.varargShortAccepted":320,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":435,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":464,"org.easymock.tests2.UsageConstraintsTest.cmpTo":112,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":497,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":454,"org.easymock.tests2.CompareToTest.testLessThan":222,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":358,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":47,"org.easymock.tests2.CaptureTest.testCaptureFromStub":100,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":401,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":173,"org.easymock.tests.UsageTest.unexpectedCallWithArray":385,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":460,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":3,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":326,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":241,"org.easymock.tests2.UsageConstraintsTest.constraints":104,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":5,"org.easymock.samples.ExampleTest.addAndChangeDocument":335,"org.easymock.tests.UsageStrictMockTest.testVerify":378,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":331,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":313,"org.easymock.tests2.CompareToTest.testGreateThan":524,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":413,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":27,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":86,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":233,"org.easymock.tests.LimitationsTest.abstractClass":352,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":87,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":275,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":218,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":316}}]

[{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:217","failures":[13,14,15,16,17,18,19,20,21,1,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,11,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181],"status":-1,"binaryOperator":"(boolean) && ((org.easymock.internal.Result) == null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:45","sourceCode":"java.lang.StringBuffer.append(\"[\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String)","type":"CtInvocationImpl"},"failures":[23,26,27,29,30,182,47,48,49,183,184,185,186,77,78,97,99,100,187,111,114,115,188,189,190,191],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[192,178,179,180],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:156","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"verified":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:89","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[193],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"m"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:61","sourceCode":"throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int))","type":"CtThrowImpl"},"failures":[194],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1121","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:183","sourceCode":"final java.lang.SecurityException java.lang.SecurityException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1915","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","type":"CtInvocationImpl"},"failures":[140,142,195,144,145,148,149,196,197],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:295","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:206","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:209","sourceCode":"if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[164],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[26,198,199,200,201,202],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[203,204,205,206,207,208,123,209,210,124,211,212,213,214,215,216,217,218,219,125,220,221,222,223,224,126,225,226,194,227,228,229,230,231,178],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[140,142,149,232,164,165,233,166,234,172,177],"status":-1,"binaryOperator":"int < int","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:194","failures":[235,236,237,238,239,240,241],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[242,20,21,243,244,27,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,263,264,264,97,8,196,265,266,267,165,268,233,269,270,271,272,273,172,177,274,275],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[276,277,13,14,15,16,17,19,1,22,23,278,25,26,27,28,29,30,31,279,33,47,48,49,280,281,282,283,284,51,56,57,58,59,60,285,61,62,63,64,65,286,287,288,79,81,82,83,84,85,87,88,89,90,91,92,289,96,97,98,99,100,101,290,111,113,114,115,188,189,190,191,291,120,292,136,293,294,141,142,144,145,146,147,150,151,154,159,160,161,162,234,168,175,176,180,181],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:227","sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[242,0,295,296,297,276,298,277,13,14,15,299,16,17,20,21,1,22,243,23,244,278,25,26,27,28,29,30,31,279,32,33,34,35,36,37,38,39,300,301,40,41,302,42,303,304,305,306,43,307,308,309,310,44,311,312,313,314,45,46,315,316,182,200,47,317,318,48,49,50,319,320,321,322,323,250,251,252,253,254,324,325,326,327,328,52,329,53,54,330,55,331,56,57,58,59,60,285,61,62,63,64,65,286,332,333,334,335,336,337,338,255,2,3,4,5,6,7,339,287,288,340,341,342,343,344,345,256,257,346,69,70,347,348,349,71,72,350,73,351,352,353,354,74,355,356,357,358,75,359,360,361,362,76,363,364,365,186,77,78,366,367,368,369,258,259,260,261,262,79,80,81,82,83,84,85,87,88,91,92,93,370,94,95,371,372,289,96,97,98,99,100,101,290,8,106,109,110,187,111,112,113,373,374,375,114,115,376,116,9,10,11,12,377,378,379,117,118,119,188,189,190,191,129,135,380,381,136,382,383,293,294,384,137,385,138,386,139,140,141,142,143,195,144,145,146,147,148,149,196,197,150,151,152,153,154,155,156,157,387,158,159,160,161,162,163,388,389,390,391,392,265,266,232,164,267,165,268,233,166,167,234,168,169,269,170,270,271,171,272,273,172,173,174,175,176,177,274,275,178,179,181],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[276,277,13,27,30,31,182,186,77,78,97,100,101,187,188,189,190,191],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[192,178,179,180],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1235","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:73","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"failures":[242,0,20,21,1,22,243,23,26,27,250,251,252,253,254,65,6,256,257,97,133,293,294,140,141,142,143,195,144,145,146,147,148,149,196,197,150,393,265,266,232,164,267,165,268,233,166,167,234,168,169,269,170,270,271,171,272,273,172,173,174,175,176,177,274,275],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:879","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1832","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:79","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[242,0,277,13,14,15,299,16,17,18,19,20,21,1,22,243,23,24,278,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,300,301,40,41,302,42,303,304,305,306,43,307,308,309,310,44,311,312,313,314,316,182,200,47,317,318,48,49,50,51,250,251,252,253,254,324,325,326,327,328,52,53,54,331,56,57,58,59,60,285,61,62,63,64,65,66,67,68,2,3,4,5,6,7,256,257,69,70,347,348,349,71,72,350,73,351,352,353,354,74,355,356,357,358,75,359,360,361,362,76,364,365,186,77,78,366,367,368,369,258,259,260,261,262,79,80,81,82,83,84,85,263,264,86,87,88,89,90,91,92,93,94,95,289,96,97,98,99,100,101,290,8,102,103,104,105,106,107,108,109,110,187,111,112,113,373,374,375,114,115,376,116,9,10,11,12,377,378,379,117,118,119,394,291,120,395,121,122,396,292,397,123,124,125,126,127,128,129,130,131,132,398,133,399,400,134,401,135,136,382,383,293,402,294,137,385,138,139,140,141,142,143,195,144,145,146,147,148,149,196,197,150,151,152,153,154,155,156,157,387,158,159,160,161,162,163,389,390,391,392,265,266,232,164,267,165,268,233,166,167,168,169,269,170,270,271,171,272,273,172,173,174,175,176,177,274,275,178,179,180,181],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[316,403,6,77,8,109],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable","state":"state"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:213","sourceCode":"return true","type":"CtReturnImpl"},"failures":[404,405],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"this","value":"delegateTo","this":"lastResult"}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:160","sourceCode":"throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())))","type":"CtThrowImpl"},"failures":[406,407,408],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1249","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"failures":[402],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[404],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:157","failures":[409],"status":-1,"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[172,173],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:323","sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:209","sourceCode":"if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"exception":"candidateParameter","throwableClass":"candidateParameter"}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:36","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>.getName(), java.lang.Character.java.lang.Class<java.lang.Character>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[172],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[23,26,29,410,200,47,48,49,77,78,99,111,114,115],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":164,"org.easymock.tests2.UsageTest.argumentsOrdered":115,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":316,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":160,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":370,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":113,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":87,"org.easymock.tests2.DelegateToTest.testReturnException":137,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":3,"org.easymock.tests.MockingTest.testPartialClassMocking":66,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":315,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":249,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":214,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":124,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":348,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":183,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":95,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":235,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":167,"org.easymock.tests2.UsageTest.wrongArguments":111,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":20,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":368,"org.easymock.samples.ExampleTest.answerVsDelegate":80,"org.easymock.tests2.UsageConstraintsTest.testNull":165,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":130,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":159,"org.easymock.tests2.CaptureTest.testPrimitive":143,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":243,"org.easymock.tests.UsageTest.moreThanOneArgument":182,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":362,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":129,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":260,"org.easymock.tests.UsageTest.argumentsOrdered":49,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":339,"org.easymock.tests.UsageVarargTest.varargIntAccepted":58,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_NotFound":372,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":250,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":394,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":239,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":407,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":395,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":254,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":163,"org.easymock.tests2.AnswerTest.answer":135,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":234,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":283,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":392,"org.easymock.tests2.CaptureTest.testAnd":140,"org.easymock.tests2.UsageTest.strictResetToDefault":110,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":399,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":259,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":155,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":364,"org.easymock.tests2.DelegateToTest.testDelegate":139,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":341,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":75,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":6,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":328,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":45,"org.easymock.tests2.CaptureTest.testCapture1_2446744":195,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":357,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":390,"org.easymock.tests.UsageThrowableTest.throwError":32,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":343,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":262,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":226,"org.easymock.samples.PartialClassMockTest.testGetArea":86,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":251,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":332,"org.easymock.tests2.UsageTest.niceToStrict":112,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":215,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":349,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":231,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":245,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":120,"org.easymock.tests2.MockBuilderTest.testCreateMock":396,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":222,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":201,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":354,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":156,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":297,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":276,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":366,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":228,"org.easymock.tests.UsageOverloadedMethodTest.overloading":70,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":224,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":54,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":270,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":69,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":307,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":170,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":148,"org.easymock.tests2.EasyMockSupportClassTest.testAll":123,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":19,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":360,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":391,"org.easymock.tests2.CaptureTest.testCaptureAll":141,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":326,"org.easymock.tests.MockNameTest.defaultName":346,"org.easymock.tests2.UsageConstraintsTest.testMatches":271,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":244,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":261,"org.easymock.samples.ExampleTest.voteForRemovals":84,"org.easymock.tests.UsageVarargTest.allKinds":65,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":186,"org.easymock.samples.BasicClassMockTest.testPrintContent":90,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":327,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":38,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":289,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":386,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":7,"org.easymock.tests2.UsageConstraintsTest.greaterThan":272,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":209,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":363,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":401,"org.easymock.samples.ExampleTest.voteForRemoval":81,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":378,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":344,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":408,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":398,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":109,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":51,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":205,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":153,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":34,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":207,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":2,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":384,"org.easymock.tests2.CaptureTest.testCaptureFirst":150,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":154,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":116,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":331,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":304,"org.easymock.tests2.UsageTest.moreThanOneArgument":187,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":117,"org.easymock.tests2.CaptureTest.testCapture2_2446744":197,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":284,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":292,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":64,"org.easymock.tests.GenericTest.testBridgedEquals":405,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":229,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":16,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":194,"org.easymock.tests.UsageExpectAndReturnTest.longType":41,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":151,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":324,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":361,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":175,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":255,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":359,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":258,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":322,"org.easymock.tests.UsageCallCountTest.tooManyCalls":17,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":277,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":223,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":305,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":73,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":37,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":103,"org.easymock.tests2.UsageConstraintsTest.testContains":269,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":298,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":11,"org.easymock.tests2.UsageConstraintsTest.testFind":267,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":347,"org.easymock.tests.MockTypeTest.fromEasyMockClass":342,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":278,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":294,"org.easymock.tests.UsageExpectAndReturnTest.object":43,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":133,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":158,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":60,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":236,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":337,"org.easymock.tests.UsageTest.exactCallCountByLastCall":50,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":230,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":242,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":247,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":287,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":240,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":56,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":311,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":53,"org.easymock.tests2.EasyMockSupportTest.testVerify":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":217,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":288,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":52,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":296,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":389,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":393,"org.easymock.tests.UsageVarargTest.varargCharAccepted":59,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_Found":371,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":96,"org.easymock.tests2.UsageTest.openCallCountByLastCall":373,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":161,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":203,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":295,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":335,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":410,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":218,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":352,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":35,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":400,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":351,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":312,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":321,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":126,"org.easymock.tests2.UsageTest.resumeIfFailure":376,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":406,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":5,"org.easymock.tests2.StubTest.stubWithReturnValue":8,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":241,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":176,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":306,"org.easymock.tests2.SerializationTest.testAllMockedMethod":180,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":319,"org.easymock.samples.SupportTest.voteForRemovals":92,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":202,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":404,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":356,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":192,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":320,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":380,"org.easymock.tests.UsageExpectAndThrowTest.object":74,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":173,"org.easymock.tests2.DelegateToTest.testWrongClass":138,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":256,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":257,"org.easymock.tests.UsageStrictMockTest.range":29,"org.easymock.samples.ConstructorCalledMockTest.testTax":263,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":387,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":102,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":227,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":355,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":121,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":48,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":206,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":367,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":198,"org.easymock.tests2.CaptureTest.testCaptureNone":147,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":333,"org.easymock.tests.UsageUnorderedTest.message":23,"org.easymock.tests.UsageVerifyTest.twoReturns":78,"org.easymock.tests.UsageVarargTest.varargByteAccepted":63,"org.easymock.tests2.ThreadingTest.testThreadSafe":377,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":220,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":15,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":89,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":338,"org.easymock.tests2.CaptureTest.testCapture_2617107":142,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":22,"org.easymock.tests2.UsageConstraintsTest.any":168,"org.easymock.tests2.StubTest.stub":290,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":323,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":4,"org.easymock.tests.UsageExpectAndThrowTest.longType":72,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":98,"org.easymock.tests2.SerializationTest.testClass":178,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":93,"org.easymock.tests.LimitationsTest.mockNativeMethod":24,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":314,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":101,"org.easymock.tests2.NameTest.nameForMocksControl":191,"org.easymock.tests2.MockedExceptionTest.testMockedException":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":210,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":318,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":402,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":68,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":350,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":127,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":122,"org.easymock.tests.MockingTest.testNicePartialClassMocking":67,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":132,"org.easymock.tests2.CaptureTest.testCaptureLast":146,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":46,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":166,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":108,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":174,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":300,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":353,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":114,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":274,"org.easymock.tests.UsageStrictMockTest.differentMethods":30,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":379,"org.easymock.tests2.MockBuilderTest.testCreateMockString":397,"org.easymock.tests.UsageExpectAndThrowTest.floatType":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":211,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":171,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":208,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":136,"org.easymock.tests.UsageVerifyTest.twoThrows":77,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":329,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":125,"org.easymock.samples.ExampleTest.voteAgainstRemoval":82,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":286,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":134,"org.easymock.tests2.UsageConstraintsTest.testNotNull":177,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":39,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":9,"org.easymock.tests2.UsageTest.defaultResetToNice":375,"org.easymock.samples.ExampleTest.voteAgainstRemovals":79,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":44,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":282,"org.easymock.tests.UsageVarargTest.differentLength":285,"org.easymock.tests2.CallbackTest.callback":181,"org.easymock.tests.UsageTest.openCallCountByLastCall":317,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":265,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":1,"org.easymock.tests.UsageCallCountTest.tooFewCalls":13,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":105,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":369,"org.easymock.tests.UsageThrowableTest.throwCheckedException":36,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":199,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":107,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":0,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":388,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":104,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":106,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":383,"org.easymock.tests.ObjectMethodsTest.testHashCode":336,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":238,"org.easymock.tests2.NameTest.nameForNiceMock":190,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":118,"org.easymock.tests2.DependencyTest.testInterfaceMocking":94,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":237,"org.easymock.samples.ExampleTest.addDocument":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":221,"org.easymock.tests2.DelegateToTest.testStubDelegate":385,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":225,"org.easymock.tests2.AnswerTest.stubAnswer":382,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":27,"org.easymock.tests.UsageVarargTest.varargLongAccepted":62,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":31,"org.easymock.tests.UsageExpectAndReturnTest.floatType":40,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":313,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":119,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":264,"org.easymock.tests.UsageThrowableTest.noUpperLimit":33,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":273,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":330,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":266,"org.easymock.tests2.SerializationTest.test":179,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":144,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":409,"org.easymock.tests2.UsageConstraintsTest.testSame":268,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":301,"org.easymock.samples.SupportTest.addDocument":91,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":212,"org.easymock.tests.GenericTest.testPackageScope":18,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":340,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":246,"org.easymock.tests2.NameTest.nameForMock":188,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":308,"org.easymock.tests2.UsageStrictMockTest.differentMethods":100,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":302,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":358,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":334,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":365,"org.easymock.tests2.MockedExceptionTest.testRealException":12,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":345,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":248,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":97,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":21,"org.easymock.tests2.NameTest.nameForStrictMock":189,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":204,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":293,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":131,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":184,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":172,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":291,"org.easymock.tests2.UsageStrictMockTest.range":99,"org.easymock.tests2.UsageConstraintsTest.lessThan":275,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":193,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":281,"org.easymock.tests2.CaptureTest.testCaptureRightOne":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":216,"org.easymock.tests2.UsageConstraintsTest.testOr":233,"org.easymock.tests.UsageRangeTest.combination":76,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":128,"org.easymock.tests.UsageTest.wrongArguments":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":213,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":42,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":280,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":309,"org.easymock.tests.UsageVarargTest.varargShortAccepted":61,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":299,"org.easymock.tests2.UsageConstraintsTest.cmpTo":169,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":381,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":403,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":374,"org.easymock.tests2.CaptureTest.testCaptureFromStub":196,"org.easymock.tests.UsageTest.unexpectedCallWithArray":200,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":26,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":14,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":310,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":28,"org.easymock.tests2.UsageConstraintsTest.constraints":232,"org.easymock.samples.ExampleTest.addAndChangeDocument":85,"org.easymock.tests.UsageStrictMockTest.testVerify":279,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":88,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":25,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":325,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":145,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":252,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":303,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":55,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":253,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":185,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":157,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":57}}]

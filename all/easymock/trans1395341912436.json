[{"transplant":{"position":"org.easymock.EasyMock:155","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[1,2,3,4,5,6,7,0,8,9,10],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[11,12,13,14,1,15,2,16,17,18,19,20,21,22,3,23,24,25,26,27,28,29,30,31,32,33,4,5,34,6,35,7,0,36,8,37,38,39,40,41,42,43,44,45,9,46,47,48,49,10,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"clazz","this":"this","constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:334","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Invocation:54","sourceCode":"return java.lang.Object[] == null ? this.java.lang.Object[] : java.lang.Object[]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:94","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.Invocation.NO_ARGS":"initArgs","args":"initArgs"}},{"transplant":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[90,91,92,93,94,95],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"answer"}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:177","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:122","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:266","sourceCode":"return ","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[96,97,98,99,100,101,102,103,104,105,59,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,68,127,128,129,130,131,132],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:183","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[75,79,80,81,83,84,86],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:68","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[133,133,134,134,135,136,137,74,75,77,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,26,153,154,27,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,87,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"method","this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.Capture:120","sourceCode":"java.util.List<T>.add(T)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:120","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[77,235,138,236],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:643","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1763","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:63","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class.java.lang.Class.forName(java.lang.String, true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","type":"CtLocalVariableImpl"},"failures":[77,235,138],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:216","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1121","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1039","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1107","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[202,203,204,206,207],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[5],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[237,238],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","answer":"answer"}},{"position":"org.easymock.internal.RecordState:126","failures":[239,90,91,93,94],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"failures":[240],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:41","sourceCode":"org.easymock.IArgumentMatcher.appendTo(java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[241],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:140","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Contains:40","sourceCode":"java.lang.StringBuffer.append(((\"contains(\\\"\" + (java.lang.String)) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:681","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1620","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(double[]))","type":"CtInvocationImpl"},"failures":[40],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:51","sourceCode":"public static class MockMethodInterceptor implements java.io.Serializable , net.sf.cglib.proxy.MethodInterceptor {\n    private static final long serialVersionUID = -9054190871232972342L;\n\n    private final java.lang.reflect.InvocationHandler handler;\n\n    private transient java.util.Set<java.lang.reflect.Method> mockedMethods;\n\n    public MockMethodInterceptor(final java.lang.reflect.InvocationHandler handler) {\n        this.java.lang.reflect.InvocationHandler = java.lang.reflect.InvocationHandler;\n    }\n\n    public java.lang.Object intercept(final java.lang.Object obj, java.lang.reflect.Method method, final java.lang.Object[] args, final net.sf.cglib.proxy.MethodProxy proxy) throws java.lang.Throwable {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n            return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n        } \n        if ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) {\n            if (org.easymock.internal.ClassProxyFactory.org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable())) {\n                return java.lang.Object;\n            } \n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n        } \n        if (((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))) {\n            return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[]);\n        } \n        return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n    }\n\n    public void setMockedMethods(final java.lang.reflect.Method... mockedMethods) {\n        this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[]));\n    }\n\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    private void readObject(final java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        java.io.ObjectInputStream.defaultReadObject();\n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()));\n        if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n            return ;\n        } \n        java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size());\n        for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n            try {\n                java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n            } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n                throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n            }\n        }\n    }\n\n    private void writeObject(final java.io.ObjectOutputStream stream) throws java.io.IOException {\n        java.io.ObjectOutputStream.defaultWriteObject();\n        if ((java.util.Set<java.lang.reflect.Method>) == null) {\n            java.io.ObjectOutputStream.writeObject(null);\n            return ;\n        } \n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = new java.util.HashSet<org.easymock.internal.MethodSerializationWrapper>(java.util.Set<java.lang.reflect.Method>.size());\n        for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n            java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n        }\n        java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>);\n    }\n}","type":"CtClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:35","sourceCode":"new java.lang.ThreadLocal<org.easymock.internal.MocksControl>()","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":5,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":132,"org.easymock.tests2.StubTest.stubWithReturnValue":96,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":86,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":49,"org.easymock.tests2.SerializationTest.testAllMockedMethod":138,"org.easymock.tests2.DelegateToTest.testReturnException":90,"org.easymock.tests.MockingTest.testPartialClassMocking":223,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":89,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":211,"org.easymock.tests.MockClassControlTest.testToString":228,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":119,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":159,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":186,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":236,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":107,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":182,"org.easymock.tests.UsageExpectAndThrowTest.object":117,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":46,"org.easymock.tests2.DelegateToTest.testWrongClass":91,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":79,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":71,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":72,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":36,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":65,"org.easymock.samples.ConstructorCalledMockTest.testTax":133,"org.easymock.samples.ExampleTest.answerVsDelegate":239,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":210,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":139,"org.easymock.tests2.UsageConstraintsTest.testNull":6,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":118,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":149,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":233,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":169,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":145,"org.easymock.tests2.CaptureTest.testPrimitive":16,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":69,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":126,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":176,"org.easymock.tests2.CaptureTest.testCaptureNone":21,"org.easymock.tests.UsageUnorderedTest.message":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":193,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":136,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":52,"org.easymock.tests2.CaptureTest.testCapture_2617107":2,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":84,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":163,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":68,"org.easymock.tests2.UsageConstraintsTest.any":37,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":168,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":95,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":56,"org.easymock.tests.UsageExpectAndThrowTest.longType":110,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":205,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":14,"org.easymock.tests2.SerializationTest.testClass":77,"org.easymock.tests.LimitationsTest.mockNativeMethod":218,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":12,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":214,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":8,"org.easymock.tests2.CaptureTest.testAnd":1,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":27,"org.easymock.tests2.MockedExceptionTest.testMockedException":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":181,"org.easymock.tests2.DelegateToTest.testDelegate":93,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":225,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":111,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":147,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":170,"org.easymock.tests.MockingTest.testNicePartialClassMocking":224,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":122,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":151,"org.easymock.tests.LimitationsTest.mockFinalMethod":219,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":78,"org.easymock.tests2.CaptureTest.testCaptureLast":20,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":59,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":0,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":144,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":47,"org.easymock.tests.MockingTest.testTwoMocks":222,"org.easymock.tests2.CaptureTest.testCapture1_2446744":17,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":120,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":115,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":50,"org.easymock.tests.UsageThrowableTest.throwError":99,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":203,"org.easymock.tests2.MockBuilderTest.testCreateMockString":173,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":227,"org.easymock.tests.UsageExpectAndThrowTest.floatType":109,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":183,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":43,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":178,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":76,"org.easymock.tests.UsageVerifyTest.twoThrows":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":200,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":192,"org.easymock.samples.PartialClassMockTest.testGetArea":135,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":53,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":156,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":208,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":108,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":187,"org.easymock.tests.LimitationsTest.privateConstructor":217,"org.easymock.tests2.UsageConstraintsTest.testNotNull":10,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":105,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":160,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":167,"org.easymock.tests2.MockBuilderTest.testCreateMock":171,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":195,"org.easymock.tests2.CallbackTest.callback":237,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":153,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":116,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":32,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":130,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":67,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":191,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":41,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":106,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":142,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":40,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":22,"org.easymock.tests.UsageThrowableTest.throwCheckedException":102,"org.easymock.tests.MockClassControlTest.testEquals":232,"org.easymock.tests2.EasyMockSupportClassTest.testAll":179,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":213,"org.easymock.tests.MockingTest.testStrictClassMocking":220,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":124,"org.easymock.tests2.CaptureTest.testCaptureAll":15,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":63,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":143,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":141,"org.easymock.tests2.UsageConstraintsTest.testMatches":42,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":83,"org.easymock.tests2.ConstraintsToStringTest.notNullToString":240,"org.easymock.tests.UsageVarargTest.allKinds":70,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":81,"org.easymock.samples.BasicClassMockTest.testPrintContent":137,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":199,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":104,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":92,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":60,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":58,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":85,"org.easymock.tests2.UsageConstraintsTest.greaterThan":44,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":180,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":157,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":207,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":158,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":74,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":152,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":134,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":45,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":234,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":33,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":97,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":174,"org.easymock.tests2.SerializationTest.test":235,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":18,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":87,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":202,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":100,"org.easymock.tests2.UsageConstraintsTest.testSame":35,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":177,"org.easymock.tests2.CaptureTest.testCaptureFirst":25,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":184,"org.easymock.tests.GenericTest.testPackageScope":212,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":11,"org.easymock.tests2.CaptureTest.testCapture2_2446744":24,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":172,"org.easymock.tests.GenericTest.testBridgedEquals":215,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":64,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":125,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":48,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":123,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":73,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":154,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":196,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":88,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":238,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":13,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":112,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":66,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":103,"org.easymock.tests.MockingTest.testNiceClassMocking":226,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":140,"org.easymock.tests.MockingTest.testClassMocking":221,"org.easymock.tests2.UsageConstraintsTest.testContains":39,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":162,"org.easymock.tests2.UsageConstraintsTest.testFind":34,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":127,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":166,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":28,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":150,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":29,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":175,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":204,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":9,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":26,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":164,"org.easymock.tests2.UsageConstraintsTest.lessThan":51,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":80,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":62,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":82,"org.easymock.tests2.CaptureTest.testCaptureRightOne":3,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":188,"org.easymock.tests2.UsageConstraintsTest.testOr":7,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":75,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":148,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":94,"org.easymock.tests.MockClassControlTest.testHashCode":231,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":189,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":206,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":129,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":31,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":30,"org.easymock.tests2.UsageConstraintsTest.cmpTo":38,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":131,"org.easymock.tests.DefaultClassInstantiatorTest.object":201,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":128,"org.easymock.tests2.CaptureTest.testCaptureFromStub":23,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":165,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":114,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":190,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":57,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":101,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":146,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":230,"org.easymock.tests2.UsageConstraintsTest.constraints":4,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":155,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":113,"org.easymock.tests2.ConstraintsToStringTest.notToString":241,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":198,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":19,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":54,"org.easymock.tests.LimitationsTest.abstractClass":216,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":209,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":55}}]

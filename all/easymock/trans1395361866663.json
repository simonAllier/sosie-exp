[{"transplant":{"position":"org.easymock.internal.ArgumentToString:41","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:72","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[17,18,19,20],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:159","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:59","sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"f":"targetField"}},{"transplant":{"position":"org.easymock.internal.matchers.Compare:53","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:41","sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","type":"CtTryImpl"},"failures":[21,22,23],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if (org.easymock.ConstructorArgs == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"this"}},{"transplantationPoint":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"failures":[24,25],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:104","sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","type":"CtThrowImpl"},"failures":[26],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"failures":[27],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[28],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[29],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"failures":[30,31,32,33,34,35,36,37,38,0,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,28,9,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,24,149,25,150,151],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[1,5,6,7,13,15],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"value","i":"i"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,170,171,171,93,172,173,174,175,176,94,177,178,179,180,181,182,183,184,185,186,187,188,189,104,190,191,192,193,194,105,195,196,197,198,199,200,201,202,203,204,205,206],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:304","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[207,208,209,210,211],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,170,170,171,171,93,172,173,174,175,176,94,177,178,179,180,181,182,183,184,185,186,187,188,189,104,190,191,192,193,194,105,195,196,197,198,199,200,201,202,203,204,205,206],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[119,125,212,213,150],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:51","sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","type":"CtIfImpl"},"failures":[214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[238,239,142],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"failures":[240],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"arg"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:48","sourceCode":"java.lang.StringBuffer.append(\", \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.internal.ErrorMessage:51","failures":[57,86,241,242,115],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:323","sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:193","sourceCode":"if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[243,244,245,246,247,248,249],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"exception":"parameterType","throwableClass":"parameterType"}},{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:32","sourceCode":"-5554816464613350531L","type":"CtUnaryOperatorImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,170,171,171,93,172,173,174,175,176,94,177,178,179,180,181,182,183,184,185,186,187,188,189,104,190,191,192,193,194,105,195,196,197,198,199,200,201,202,203,204,205,206],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[1,5,6,7,13,15],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[250,251],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[1,5,56,57,58,252,188,189,190,193,195,114,115,116],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:77","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Double>(double))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:210","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[253,254],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMockSupport:530","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.createNiceControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl() : org.easymock.EasyMockSupport.createControl()","type":"CtLocalVariableImpl"},"failures":[170,171,93,182,184,185],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:189","sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor })","type":"CtInvocationImpl"},"failures":[152,153,154,255,256,155,156,157,158,257,159,160,161,162,258,164,165,166,167,168,169,259,260,170,170,171,171,93,172,173,174,175,176,261,94,177,178,179,180,181,182,183,184,185,186,187,188,189,104,190,191,192,262,193,194,105,195,263,196,106,264,197,265,266,198,199,200,201,202,203,204,205,206],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"mockClass"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":120,"org.easymock.tests2.UsageTest.argumentsOrdered":12,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":38,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":232,"org.easymock.tests2.StubTest.stubWithReturnValue":99,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":243,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":215,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":67,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":138,"org.easymock.tests2.SerializationTest.testAllMockedMethod":200,"org.easymock.tests.MockingTest.testPartialClassMocking":156,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":15,"org.easymock.tests.MockClassControlTest.testToString":166,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":230,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":196,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":49,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":253,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":41,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":184,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":239,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":136,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":244,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":59,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":60,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":126,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":87,"org.easymock.tests2.UsageTest.wrongArguments":10,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":226,"org.easymock.tests.UsageStrictMockTest.range":57,"org.easymock.samples.ConstructorCalledMockTest.testTax":170,"org.easymock.samples.ExampleTest.answerVsDelegate":92,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":201,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":153,"org.easymock.tests2.UsageConstraintsTest.testNull":122,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":48,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":189,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":260,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":112,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":178,"org.easymock.tests2.CaptureTest.testPrimitive":147,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":89,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":211,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":55,"org.easymock.tests.UsageTest.moreThanOneArgument":0,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":3,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":6,"org.easymock.tests2.CaptureTest.testCaptureNone":149,"org.easymock.tests.UsageVerifyTest.twoReturns":241,"org.easymock.tests2.ThreadingTest.testThreadSafe":95,"org.easymock.tests.UsageTest.argumentsOrdered":4,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":172,"org.easymock.tests2.CaptureTest.testCapture_2617107":213,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":80,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":16,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":248,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":174,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":236,"org.easymock.tests2.UsageConstraintsTest.any":127,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":177,"org.easymock.tests2.StubTest.stub":254,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":210,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":84,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":21,"org.easymock.tests2.SerializationTest.testClass":199,"org.easymock.tests.LimitationsTest.mockNativeMethod":159,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":75,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":162,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":26,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":218,"org.easymock.tests2.CaptureTest.testAnd":212,"org.easymock.tests2.UsageTest.strictResetToDefault":28,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":193,"org.easymock.tests2.MockedExceptionTest.testMockedException":266,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":220,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":78,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":40,"org.easymock.tests2.DelegateToTest.testDelegate":145,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":43,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":158,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":187,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":179,"org.easymock.tests.MockingTest.testNicePartialClassMocking":157,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":190,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":216,"org.easymock.tests2.CaptureTest.testCaptureLast":24,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":37,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":206,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":125,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":137,"org.easymock.tests.MockingTest.testTwoMocks":155,"org.easymock.tests2.CaptureTest.testCapture1_2446744":148,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":61,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":50,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":46,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":11,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":140,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":251,"org.easymock.tests.UsageThrowableTest.throwError":31,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":222,"org.easymock.tests.UsageStrictMockTest.differentMethods":58,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":229,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":237,"org.easymock.tests2.MockBuilderTest.testCreateMockString":182,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":164,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":132,"org.easymock.tests.UsageVerifyTest.twoThrows":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":185,"org.easymock.samples.PartialClassMockTest.testGetArea":93,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":81,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":29,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":105,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":42,"org.easymock.tests2.UsageTest.niceToStrict":100,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":163,"org.easymock.tests2.ThreadingTest.testChangeDefault":250,"org.easymock.tests2.UsageConstraintsTest.testNotNull":139,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":265,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":36,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":94,"org.easymock.tests2.MockBuilderTest.testCreateMock":180,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":217,"org.easymock.tests2.CallbackTest.callback":106,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":223,"org.easymock.tests.UsageTest.openCallCountByLastCall":39,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":13,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":47,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":110,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":117,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":17,"org.easymock.tests.UsageOverloadedMethodTest.overloading":90,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":130,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":204,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":68,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":22,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":129,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":25,"org.easymock.tests.UsageThrowableTest.throwCheckedException":33,"org.easymock.tests.MockClassControlTest.testEquals":259,"org.easymock.tests2.EasyMockSupportClassTest.testAll":183,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":161,"org.easymock.tests.MockingTest.testStrictClassMocking":255,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":53,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":14,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":7,"org.easymock.tests2.CaptureTest.testCaptureAll":146,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":205,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":221,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":203,"org.easymock.tests2.UsageConstraintsTest.testMatches":131,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":143,"org.easymock.tests2.CompareToTest.testGreateOrEqual":27,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":247,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":85,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":246,"org.easymock.samples.BasicClassMockTest.testPrintContent":173,"org.easymock.tests2.DelegateToTest.testStubDelegate":144,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":35,"org.easymock.tests2.AnswerTest.stubAnswer":142,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":233,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":56,"org.easymock.tests2.UsageConstraintsTest.greaterThan":133,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":77,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":195,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":263,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":96,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":74,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":197,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":191,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":171,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":235,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":134,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":118,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":207,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":23,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":109,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":62,"org.easymock.tests2.UsageConstraintsTest.testSame":123,"org.easymock.tests2.CaptureTest.testCaptureFirst":151,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":238,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":65,"org.easymock.tests.GenericTest.testPackageScope":160,"org.easymock.tests2.UsageTest.moreThanOneArgument":9,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":181,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":234,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":18,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":240,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":107,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":69,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":54,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":52,"org.easymock.tests2.UsageStrictMockTest.differentMethods":116,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":209,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":262,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":63,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":51,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":79,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":66,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":225,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":114,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":88,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":34,"org.easymock.tests.MockingTest.testNiceClassMocking":257,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":202,"org.easymock.tests.MockingTest.testClassMocking":256,"org.easymock.tests2.UsageConstraintsTest.testContains":128,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":198,"org.easymock.tests2.UsageConstraintsTest.testFind":121,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":91,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":261,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":20,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":97,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":104,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":98,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":264,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":135,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":192,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":175,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":224,"org.easymock.tests2.UsageStrictMockTest.range":115,"org.easymock.tests2.UsageConstraintsTest.lessThan":141,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":245,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":231,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":19,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":30,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":108,"org.easymock.tests2.CaptureTest.testCaptureRightOne":150,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":8,"org.easymock.tests2.UsageConstraintsTest.testOr":124,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":249,"org.easymock.tests.UsageRangeTest.combination":76,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":72,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":188,"org.easymock.tests.UsageTest.wrongArguments":2,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":228,"org.easymock.tests.MockClassControlTest.testHashCode":169,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":165,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":70,"org.easymock.tests2.UsageTest.openCallCountByLastCall":101,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":102,"org.easymock.tests.DefaultClassInstantiatorTest.object":258,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":113,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":176,"org.easymock.tests.UsageTest.unexpectedCallWithArray":1,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":45,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":5,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":32,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":219,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":227,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":71,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":194,"org.easymock.tests2.UsageConstraintsTest.constraints":119,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":168,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":44,"org.easymock.tests.UsageStrictMockTest.testVerify":252,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":73,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":208,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":214,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":167,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":186,"org.easymock.tests2.UsageTest.resumeIfFailure":103,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":82,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":64,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":152,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":83,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":242,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":111}}]

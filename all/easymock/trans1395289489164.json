[{"transplant":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"argType":"paramType","paramType":"paramType"}},{"position":"org.easymock.EasyMock:643","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:87","sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[1,2,3],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:44","sourceCode":"final java.io.IOException java.io.IOException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[4,5],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:364","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[6,7],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,5,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,8,119,120,121,122,123,9,10,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,11,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,13,14,230,231,15,16,232,233,234,235,236,237,238,17,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,18,19,288,289,290,291,292,293,294,295,296,297,298,20,299,300,21,301,302],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[25,26,27,28,29,30,31,38,303,304,305,306,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,5,67,68,69,70,71,73,74,80,81,82,83,85,86,87,88,89,90,93,94,96,97,98,99,101,102,104,106,107,110,111,112,113,114,117,118,119,120,123,124,126,128,130,131,133,134,135,137,138,141,142,160,161,162,163,165,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,307,225,308,226,227,229,233,234,235,236,237,238,239,242,243,249,250,252,253,254,255,256,257,258,260,261,262,263,264,309,266,267,268,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,18,19,310,311,288,289,290,291,295,296,298,299,301,302,312],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[43,44,46,48,49,313,60,65,80,82,90],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"failures":[314],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[315],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:235","failures":[23,24,38,316,317,318,319,320,321,322,323,324,325,326,170],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1471","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[97,99,166,11,168,20,299,21,301,312],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:85","failures":[22,23,23,24,24,25,26,27,28,29,30,327,31,32,33,34,35,36,37,38,303,304,305,306,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,5,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,8,119,120,121,122,123,9,10,124,125,126,127,128,328,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,11,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,329,330,331,332,333,334,335,336,337,338,339,340,216,217,218,219,220,221,222,223,307,224,225,308,226,227,228,229,13,14,230,231,15,16,232,233,234,235,236,237,238,341,17,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,342,309,343,344,345,346,347,348,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,349,350,351,281,282,283,284,285,286,287,18,19,310,311,288,289,290,291,292,293,294,295,296,297,298,20,299,300,21,301,302,312],"status":-1,"binaryOperator":"org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1940","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:60","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:136","failures":[23,23,24,24,41,42,45,46,47,48,53,55,56,58,59,65,66,5,91,166,216,217,218,219,220,239,267,268,271,276,277,278,279,280,295,296,299],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:233","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[49],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:840","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[170,171,172,352],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,5,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,9,124,125,126,127,128,129,130,131,132,133,134,135,136,139,140,143,144,145,146,147,148,149,151,152,153,154,155,156,160,161,162,163,165,166,167,11,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,216,217,218,219,220,221,222,223,225,226,227,228,229,230,231,15,232,233,6,353,17,239,240,241,242,243,244,245,246,247,248,249,250,354,251,252,253,254,255,256,257,258,260,261,262,263,264,347,348,266,267,268,269,270,271,276,277,278,279,280,355,351,281,282,283,284,285,286,287,18,19,288,289,290,291,293,294,295,296,298,299,300,21,301,302],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:83","sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","type":"CtThrowImpl"},"failures":[356],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","type":"CtAssignmentImpl"},"failures":[357,358,359],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[360,361,362,363,364,365,366,367,368,369,370,57,118,8,9,10,166,11,168,371,372,373,374,375,376,377,378,12,229,13,14,15,16,17,287,18,19,20,299,21,301],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[361,368,373,375,13,20],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[379,380],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[49],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ErrorMessage:51","failures":[11,381,18,19,21],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"type"}},{"position":"org.easymock.internal.RecordState:280","failures":[26,382,130,131,132,383,133,222],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1319","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[60],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"candidateMethod"}},{"transplant":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[95],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:133","failures":[384,385,386],"status":-1,"binaryOperator":"java.lang.ClassLoader == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:141","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:142","failures":[354],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:205","sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:204","sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cstr":"cstr"}},{"position":"org.easymock.internal.RecordState:217","failures":[22,23,23,24,24,25,26,27,28,29,30,327,31,32,33,34,35,36,37,38,303,304,305,306,39,40,41,42,43,44,45,46,47,48,49,50,313,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,5,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,8,119,120,121,122,123,9,10,124,125,126,127,128,328,129,382,130,131,132,383,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,387,388,161,162,163,164,165,166,167,11,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,389,390,391,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,392,213,214,215,329,330,331,332,333,334,335,336,337,338,339,340,216,217,218,219,220,221,393,222,223,394,307,224,371,372,395,225,308,226,227,228,229,13,14,230,231,15,16,232,233,396,6,353,397,398,234,235,236,237,238,341,17,1,2,3,239,240,241,242,243,244,245,246,247,248,249,250,399,251,252,253,400,401,254,255,256,257,258,259,260,261,262,263,264,342,309,343,344,345,346,347,348,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,402,349,350,351,281,282,283,284,285,286,287,18,19,310,311,288,289,290,291,292,293,294,295,296,297,298,20,299,300,21,301,302,312,403,404,405],"status":-1,"binaryOperator":"((org.easymock.internal.Result) == null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:142","sourceCode":"return true","type":"CtReturnImpl"},"failures":[354],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:327","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:126","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[131],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.DefaultClassInstantiator:93","failures":[341,406,407],"status":-1,"binaryOperator":"(java.lang.Class<?>.getConstructors().int) == 0","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:72","sourceCode":"java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","type":"CtAssignmentImpl"},"failures":[170,171,172,352],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:53","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:139","sourceCode":"return java.lang.Class<?>[][int].isPrimitive()","type":"CtReturnImpl"},"failures":[46,47,51,52,57,58,63,65,66,82,83,84,85,86,90,92,264],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":44,"org.easymock.tests2.UsageTest.argumentsOrdered":10,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":228,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":153,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":120,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":32,"org.easymock.tests2.DelegateToTest.testReturnException":130,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":282,"org.easymock.tests.MockingTest.testPartialClassMocking":213,"org.easymock.tests.MockClassControlTest.testToString":343,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":315,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":402,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":173,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":157,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":127,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":50,"org.easymock.tests2.UsageTest.wrongArguments":8,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":267,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":274,"org.easymock.samples.ExampleTest.answerVsDelegate":26,"org.easymock.tests2.UsageConstraintsTest.testNull":46,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":97,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":152,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":348,"org.easymock.tests2.CaptureTest.testPrimitive":83,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":271,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":192,"org.easymock.tests.UsageTest.moreThanOneArgument":229,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":96,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":218,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":396,"org.easymock.tests.UsageTest.argumentsOrdered":16,"org.easymock.tests.UsageVarargTest.varargIntAccepted":256,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":369,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":276,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":71,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":74,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":280,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":364,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":129,"org.easymock.tests.ReplayStateInvalidUsageTest.times":337,"org.easymock.tests2.AnswerTest.answer":160,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":313,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":70,"org.easymock.tests2.CaptureTest.testAnd":80,"org.easymock.tests2.UsageTest.strictResetToDefault":117,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":102,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":318,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":217,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":147,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":226,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":398,"org.easymock.tests2.DelegateToTest.testDelegate":133,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":188,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":285,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":238,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":371,"org.easymock.tests2.CaptureTest.testCapture1_2446744":84,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":186,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":68,"org.easymock.tests.UsageThrowableTest.throwError":241,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":331,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":220,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":323,"org.easymock.samples.PartialClassMockTest.testGetArea":22,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":332,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":277,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":404,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":174,"org.easymock.tests2.UsageTest.niceToStrict":119,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":0,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":73,"org.easymock.tests2.MockBuilderTest.testCreateMock":77,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":182,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":361,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":148,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":3,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":310,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":272,"org.easymock.tests.UsageOverloadedMethodTest.overloading":252,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":55,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":223,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":204,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":251,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":54,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":89,"org.easymock.tests2.EasyMockSupportClassTest.testAll":156,"org.easymock.tests.MockClassControlTest.testEquals":347,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":250,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":190,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":366,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":69,"org.easymock.tests2.CaptureTest.testCaptureAll":81,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":236,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":314,"org.easymock.tests2.UsageConstraintsTest.testMatches":56,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":219,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":329,"org.easymock.samples.ExampleTest.voteForRemovals":30,"org.easymock.tests.UsageVarargTest.allKinds":264,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":287,"org.easymock.samples.BasicClassMockTest.testPrintContent":34,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":237,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":247,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":164,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":286,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":383,"org.easymock.tests2.UsageConstraintsTest.greaterThan":58,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":358,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":308,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":105,"org.easymock.samples.ExampleTest.voteForRemoval":27,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":107,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":100,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":116,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":233,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":320,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":145,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":243,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":281,"org.easymock.tests2.CaptureTest.testCaptureFirst":93,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":382,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":146,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":125,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":224,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":200,"org.easymock.tests2.UsageTest.moreThanOneArgument":118,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":109,"org.easymock.tests2.CaptureTest.testCapture2_2446744":92,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":78,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":263,"org.easymock.tests.GenericTest.testBridgedEquals":354,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":293,"org.easymock.tests.UsageExpectAndReturnTest.longType":196,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":143,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":234,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":191,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":380,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":395,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":63,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":189,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":390,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":216,"org.easymock.tests.UsageCallCountTest.tooManyCalls":294,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":374,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":288,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":201,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":178,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":246,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":137,"org.easymock.tests2.UsageConstraintsTest.testContains":53,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":311,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":379,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":113,"org.easymock.tests2.UsageConstraintsTest.testFind":45,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":253,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":40,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":297,"org.easymock.tests.UsageExpectAndReturnTest.object":203,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":101,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":151,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":258,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":351,"org.easymock.tests.UsageTest.exactCallCountByLastCall":232,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":239,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":6,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":378,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":316,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":209,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":254,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":222,"org.easymock.tests.MockClassControlTest.testHashCode":346,"org.easymock.tests2.EasyMockSupportTest.testVerify":155,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":363,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":353,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":2,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":221,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":67,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":328,"org.easymock.tests.UsageVarargTest.varargCharAccepted":257,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":357,"org.easymock.tests2.CaptureTest.testCaptureMultiple":356,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":165,"org.easymock.tests2.UsageTest.openCallCountByLastCall":121,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":154,"org.easymock.tests.DefaultClassInstantiatorTest.object":341,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":1,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":349,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":12,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":180,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":244,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":103,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":345,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":179,"org.easymock.tests.CapturesMatcherTest.test":265,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":210,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":389,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":159,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":344,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":365,"org.easymock.tests2.UsageTest.resumeIfFailure":124,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":284,"org.easymock.tests2.StubTest.stubWithReturnValue":135,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":319,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":64,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":202,"org.easymock.tests2.SerializationTest.testAllMockedMethod":172,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":400,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":325,"org.easymock.samples.SupportTest.voteForRemovals":37,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":368,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":185,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":352,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":401,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":387,"org.easymock.tests.UsageExpectAndThrowTest.object":183,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":61,"org.easymock.tests2.DelegateToTest.testWrongClass":132,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":295,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":296,"org.easymock.tests.UsageStrictMockTest.range":21,"org.easymock.samples.ConstructorCalledMockTest.testTax":23,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":150,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":136,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":184,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":75,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":15,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":339,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":273,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":373,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":405,"org.easymock.tests2.CaptureTest.testCaptureNone":88,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":385,"org.easymock.tests.UsageUnorderedTest.message":17,"org.easymock.tests.UsageVerifyTest.twoReturns":19,"org.easymock.tests.UsageVarargTest.varargByteAccepted":262,"org.easymock.tests2.ThreadingTest.testThreadSafe":106,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":291,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":33,"org.easymock.tests2.CaptureTest.testCapture_2617107":82,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":370,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":270,"org.easymock.tests2.UsageConstraintsTest.any":51,"org.easymock.tests2.StubTest.stub":134,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":336,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":391,"org.easymock.tests.UsageExpectAndThrowTest.longType":176,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":283,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":335,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":167,"org.easymock.tests2.SerializationTest.testClass":170,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":115,"org.easymock.tests.LimitationsTest.mockNativeMethod":266,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":399,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":212,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":169,"org.easymock.tests2.NameTest.nameForMocksControl":306,"org.easymock.tests2.MockedExceptionTest.testMockedException":112,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":231,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":177,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":215,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":94,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":76,"org.easymock.tests.MockingTest.testNicePartialClassMocking":214,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":99,"org.easymock.tests2.CaptureTest.testCaptureLast":87,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":372,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":142,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":49,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":62,"org.easymock.tests.MockingTest.testTwoMocks":392,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":193,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":181,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":9,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":66,"org.easymock.samples.ExampleTest.removeNonExistingDocument":327,"org.easymock.tests.UsageStrictMockTest.differentMethods":301,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":333,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":386,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":108,"org.easymock.tests2.ConstraintsToStringTest.andToString":367,"org.easymock.tests2.MockBuilderTest.testCreateMockString":79,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":342,"org.easymock.tests.UsageExpectAndThrowTest.floatType":175,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":57,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":161,"org.easymock.tests.UsageVerifyTest.twoThrows":18,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":158,"org.easymock.samples.ExampleTest.voteAgainstRemoval":28,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":403,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":104,"org.easymock.tests2.UsageConstraintsTest.testNotNull":65,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":111,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":248,"org.easymock.tests2.UsageTest.defaultResetToNice":123,"org.easymock.samples.ExampleTest.voteAgainstRemovals":25,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":208,"org.easymock.tests.UsageVarargTest.differentLength":259,"org.easymock.tests2.CallbackTest.callback":128,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":326,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":376,"org.easymock.tests.UsageTest.openCallCountByLastCall":230,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":41,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":269,"org.easymock.tests.UsageCallCountTest.tooFewCalls":289,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":139,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":275,"org.easymock.tests.UsageThrowableTest.throwCheckedException":245,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":375,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":141,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":240,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":138,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":338,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":140,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":163,"org.easymock.tests.ObjectMethodsTest.testHashCode":350,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":110,"org.easymock.tests2.NameTest.nameForNiceMock":305,"org.easymock.tests2.DependencyTest.testInterfaceMocking":126,"org.easymock.samples.ExampleTest.addDocument":29,"org.easymock.tests2.DelegateToTest.testStubDelegate":131,"org.easymock.tests2.AnswerTest.stubAnswer":162,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":299,"org.easymock.tests.UsageVarargTest.varargLongAccepted":261,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":302,"org.easymock.tests.UsageExpectAndReturnTest.floatType":195,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":211,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":38,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":24,"org.easymock.tests2.ConstraintsToStringTest.orToString":360,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":394,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":59,"org.easymock.tests.UsageThrowableTest.noUpperLimit":242,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":42,"org.easymock.tests2.SerializationTest.test":171,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":85,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":406,"org.easymock.tests2.UsageConstraintsTest.testSame":47,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":194,"org.easymock.samples.SupportTest.addDocument":36,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_Overriden":359,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":334,"org.easymock.tests.GenericTest.testPackageScope":249,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":397,"org.easymock.tests2.NameTest.nameForMock":303,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":205,"org.easymock.tests2.UsageStrictMockTest.differentMethods":168,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":322,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":197,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":187,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":355,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":227,"org.easymock.tests2.MockedExceptionTest.testRealException":114,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":377,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":324,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":166,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":268,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":340,"org.easymock.tests2.NameTest.nameForStrictMock":304,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":39,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":98,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":60,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":72,"org.easymock.tests2.UsageStrictMockTest.range":11,"org.easymock.tests2.UsageConstraintsTest.lessThan":5,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":144,"org.easymock.tests2.CaptureTest.testCaptureRightOne":90,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":384,"org.easymock.tests2.UsageConstraintsTest.testOr":48,"org.easymock.tests.UsageRangeTest.combination":225,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":95,"org.easymock.tests.UsageTest.wrongArguments":14,"org.easymock.tests2.MockBuilderTest.testWithConstructor":317,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":309,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":198,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":7,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":206,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":407,"org.easymock.tests.UsageVarargTest.varargShortAccepted":260,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":292,"org.easymock.tests2.UsageConstraintsTest.cmpTo":52,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":388,"org.easymock.tests2.CompareToTest.testLessThan":4,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":122,"org.easymock.tests2.CaptureTest.testCaptureFromStub":91,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":330,"org.easymock.tests.UsageTest.unexpectedCallWithArray":13,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":20,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":290,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":321,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":207,"org.easymock.tests2.UsageConstraintsTest.constraints":43,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":300,"org.easymock.samples.ExampleTest.addAndChangeDocument":31,"org.easymock.tests2.ConstraintsToStringTest.notToString":362,"org.easymock.tests.UsageStrictMockTest.testVerify":312,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":35,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":298,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":235,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":86,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":278,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":199,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":279,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":307,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":149,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":255,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":381}}]

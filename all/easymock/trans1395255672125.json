[{"position":"org.easymock.EasyMock:1000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:260","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[0],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:148","sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError(java.lang.StringBuilder))","type":"CtThrowImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,0,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[45,46],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"position":"org.easymock.internal.LastControl:95","failures":[17,47,48,49,50,51,52,53,54,55,56],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[52,57],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.LastControl:85","failures":[48,51,52,53],"status":-1,"binaryOperator":"(java.util.Stack<org.easymock.IArgumentMatcher> != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[58,59,60],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"failures":[61],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[17,47,48,49,50,51,52,53,54,55,56],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,1,84,85,2,3,4,86,5,87,6,88,89,90,7,8,91,92,9,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,17,47,120,48,121,49,50,122,51,123,124,125,126,127,128,0,129,130,52,57,131,132,133,53,134,135,136,137,138,139,140,141,142,143,18,144,145,19,20,21,146,147,148,22,23,24,25,149,150,54,151,55,152,153,154,155,156,157,158,56,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,26,181,182,183,27,184,28,185,29,30,31,186,187,188,189,190,191,192,193,194,195,32,33,34,196,197,198,35,36,199,200,201,202,203,37,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,38,294,295,296,297,298,299,300,301,302,303,304,305,39,306,40,41,307,308,42,43,44,309,310,311],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"equalsMethod","method":"equalsMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:225","sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"method"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[312,313,314],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[3,19,22,23,26,28,30,35,36,213,315,40,41,42,43],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[135,316],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[127,131,135,316],"status":-1,"binaryOperator":"int < 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[238,309],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[317,318,62,63,64,65,66,67,319,68,320,69,70,321,322,71,72,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,73,352,74,353,75,76,77,78,79,80,81,82,83,1,84,85,2,3,4,86,5,87,6,88,89,90,7,8,91,92,9,93,94,95,96,10,97,354,355,356,357,358,359,360,361,362,11,363,12,364,365,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,366,367,368,369,370,371,372,373,374,13,375,376,377,378,379,380,381,382,383,384,14,15,385,16,386,387,388,389,390,116,117,391,392,393,394,395,118,119,17,47,396,120,48,121,49,50,122,51,123,124,125,126,127,128,0,129,130,52,57,131,132,133,53,134,135,136,137,138,139,397,398,140,141,399,142,400,401,402,403,404,405,143,406,407,408,18,144,145,19,20,21,146,147,148,22,23,24,25,409,410,411,412,413,149,150,414,415,416,417,418,54,151,55,152,153,154,155,156,157,158,56,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,419,420,421,177,178,422,179,180,26,181,182,183,27,184,28,185,29,30,31,186,187,188,189,423,424,425,426,427,428,429,430,190,431,191,432,192,193,194,195,32,33,34,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,196,449,450,451,452,453,197,454,455,456,457,458,459,460,461,462,463,198,35,36,199,200,201,202,203,464,37,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,465,466,467,468,469,238,239,240,241,242,470,471,472,473,243,244,245,246,247,474,475,476,477,478,479,480,481,482,483,248,249,484,485,486,487,488,489,490,491,492,493,494,495,496,250,251,252,253,254,497,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,498,292,293,38,294,295,296,297,298,299,300,301,302,303,304,305,39,306,40,41,307,308,42,43,44,309,310,311],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:94","sourceCode":"java.util.List<org.easymock.IArgumentMatcher>.addAll(java.util.Stack<org.easymock.IArgumentMatcher>.subList(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int), java.util.Stack<org.easymock.IArgumentMatcher>.size()))","type":"CtInvocationImpl"},"failures":[17,47,48,121,49,51,52,53,134,54,55,56],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[384,399],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:693","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","type":"CtReturnImpl"},"failures":[123],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:72","sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","type":"CtAssignmentImpl"},"failures":[320,333,343,349,357,11,363,365,373,13,375,378,379,380,382,14,15,16,399,419,422,468],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"failures":[465],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:180","failures":[323,324,58,499,500,501,502,59,503,381,384,504,399],"status":-1,"binaryOperator":"(java.lang.Class<?>[].int) != (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[3,19,22,23,26,28,30,35,36,315,40,41,42,43],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:315","failures":[110,111,112,113,115,18,147,164,168,169,171,172,173,174,175,176,210,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,262,263,287,300,39,308],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[17,47,48,49,50,51,52,53,54,55,56],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[17,47,48,49,50,51,52,53,54,55,56],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:90","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[117,150,178],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[317,318,62,63,64,65,66,67,319,68,320,69,70,321,322,71,72,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,73,352,74,353,75,76,77,78,79,80,81,82,83,1,84,85,2,3,4,86,5,87,6,88,89,90,7,8,91,92,9,93,94,95,96,10,97,354,355,356,357,358,359,360,361,362,11,363,12,364,365,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,366,367,368,369,370,371,372,373,374,13,375,376,377,378,379,380,381,382,383,384,14,15,385,16,386,387,388,389,390,116,117,391,392,393,394,395,118,119,17,47,396,120,48,121,49,50,122,51,123,124,125,126,127,128,0,129,130,52,57,131,132,133,53,134,135,136,137,138,139,397,398,140,141,399,142,400,401,402,403,404,405,143,406,407,408,18,144,145,19,20,21,146,147,148,22,23,24,25,409,410,411,412,413,149,150,414,415,416,417,418,54,151,55,152,153,154,155,156,157,158,56,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,419,420,421,177,178,422,179,180,26,181,182,183,27,184,28,185,29,30,31,186,187,188,189,423,424,425,426,427,428,429,430,190,431,191,432,192,193,194,195,32,33,34,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,196,449,450,451,452,453,197,454,455,456,457,458,459,460,461,462,463,198,35,36,199,200,201,202,203,464,37,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,465,466,467,468,469,238,239,240,241,242,470,471,472,473,243,244,245,246,247,474,475,476,477,478,479,480,481,482,483,248,249,484,485,486,487,488,489,490,491,492,493,494,495,496,250,251,252,253,254,497,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,498,292,293,38,294,295,296,297,298,299,300,301,302,303,304,305,39,306,40,41,307,308,42,43,44,309,310,311],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1038","sourceCode":"org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Integer>(int))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:117","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"failures":[198],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"i","this":"this"}},{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[317,318,505,312,323],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:105","sourceCode":"java.lang.StringBuffer.append(\"(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[85,3,4,506,507,508,509,510,511,145,26,185,30,31,198,35,36,208,211,212,213,512,513,315,248,249,306],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"buffer"}},{"position":"org.easymock.internal.Range:40","failures":[317,318,62,63,64,65,66,67,319,68,320,69,70,321,322,71,72,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,73,352,74,353,75,76,77,78,79,80,81,82,83,1,84,85,2,3,4,86,5,87,6,88,89,90,7,8,91,92,9,93,94,95,96,10,97,354,355,356,357,358,359,360,361,362,11,363,12,364,365,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,366,367,368,369,370,371,372,373,374,13,375,376,377,378,379,380,381,382,383,384,14,15,385,16,386,387,388,389,390,116,117,391,392,393,394,395,118,119,17,47,396,120,48,121,49,50,122,51,123,124,125,126,127,128,0,129,130,52,57,131,132,133,53,134,135,136,137,138,139,397,398,140,141,399,142,400,401,402,403,404,405,143,406,407,408,18,144,145,19,20,21,146,147,148,22,23,24,25,409,410,411,412,413,149,150,414,415,416,417,418,54,151,55,152,153,154,155,156,157,158,56,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,419,420,421,177,178,422,179,180,26,181,182,183,27,184,28,185,29,30,31,186,187,188,189,423,424,425,426,427,428,429,430,190,431,191,432,192,193,194,195,32,33,34,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,196,449,450,451,452,453,197,454,455,456,457,458,459,460,461,462,463,198,35,36,199,200,201,202,203,464,37,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,465,466,467,468,469,238,239,240,241,242,470,471,472,473,243,244,245,246,247,474,475,476,477,478,479,480,481,482,483,248,249,484,485,486,487,488,489,490,491,492,493,494,495,496,250,251,252,253,254,497,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,498,292,293,38,294,295,296,297,298,299,300,301,302,303,304,305,39,306,40,41,307,308,42,43,44,309,310,311],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[110,111,112,113,115,171,172,173,174,175,176,440,238,239,240,300],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:105","sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[378,46],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:693","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","type":"CtReturnImpl"},"failures":[123],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Matches:40","failures":[514],"status":-1,"binaryOperator":"(\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:50","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"finalize\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[317,317,318,318,320,321,322,323,330,333,343,349,96,10,354,355,356,357,359,362,11,363,12,365,112,373,13,375,378,379,380,382,14,15,16,399,400,401,402,403,404,406,407,419,422,189,423,424,425,426,427,428,429,464,466,467,468,469,472,476,477,478,480,288],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:41","sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","type":"CtTryImpl"},"failures":[460,515,516],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[362],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","this":"this"}},{"position":"org.easymock.internal.matchers.Equals:54","failures":[396],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":47,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":39,"org.easymock.tests2.UsageTest.argumentsOrdered":23,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":93,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":150,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":443,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":21,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":72,"org.easymock.tests2.DelegateToTest.testReturnException":105,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":172,"org.easymock.tests.MockingTest.testPartialClassMocking":477,"org.easymock.tests.MockClassControlTest.testToString":424,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":353,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":190,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":451,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":365,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":337,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":218,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":333,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":141,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":499,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":122,"org.easymock.tests2.UsageTest.wrongArguments":19,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":260,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":395,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":216,"org.easymock.samples.ExampleTest.answerVsDelegate":63,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":422,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":482,"org.easymock.tests2.UsageConstraintsTest.testNull":48,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":354,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":429,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":9,"org.easymock.tests2.CaptureTest.testPrimitive":152,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":264,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":237,"org.easymock.tests.UsageTest.moreThanOneArgument":306,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":97,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":252,"org.easymock.tests.UsageTest.argumentsOrdered":43,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":255,"org.easymock.tests.UsageVarargTest.varargIntAccepted":291,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":511,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":448,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":243,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":60,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":373,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":417,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":368,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":379,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":435,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":247,"org.easymock.tests.ReplayStateInvalidUsageTest.times":493,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":116,"org.easymock.tests2.DependencyTest.testClassMocking":397,"org.easymock.tests2.AnswerTest.answer":98,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":51,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":449,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":139,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":421,"org.easymock.tests2.CaptureTest.testAnd":54,"org.easymock.tests2.UsageTest.strictResetToDefault":144,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":362,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":376,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":251,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":90,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":205,"org.easymock.tests2.DelegateToTest.testDelegate":109,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":259,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":233,"org.easymock.tests.LimitationsTest.mockFinalMethod":473,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":175,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":305,"org.easymock.tests2.DependencyTest.testClassMockingSupport":398,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":248,"org.easymock.tests2.CaptureTest.testCapture1_2446744":153,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":358,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":231,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":137,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":487,"org.easymock.tests.UsageThrowableTest.throwError":162,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":178,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":497,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":418,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":254,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":505,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":351,"org.easymock.samples.PartialClassMockTest.testGetArea":320,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":488,"org.easymock.tests.MockingTest.testInterfaceMocking":479,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":244,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":182,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":464,"org.easymock.tests2.UsageTest.niceToStrict":20,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":338,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":433,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":312,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":378,"org.easymock.tests2.MockBuilderTest.testCreateMock":14,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":346,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":392,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":507,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":227,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":7,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":420,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":311,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":191,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":214,"org.easymock.tests.UsageOverloadedMethodTest.overloading":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":348,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":127,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":210,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":276,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":285,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":515,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":126,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":158,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":498,"org.easymock.tests.MockClassControlTest.testEquals":428,"org.easymock.tests2.EasyMockSupportClassTest.testAll":330,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":467,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":235,"org.easymock.tests2.CaptureTest.testCaptureAll":151,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":138,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":61,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":303,"org.easymock.tests.MockNameTest.defaultName":188,"org.easymock.tests2.UsageConstraintsTest.testMatches":128,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":485,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":253,"org.easymock.samples.ExampleTest.voteForRemovals":67,"org.easymock.tests.UsageVarargTest.allKinds":298,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":198,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":304,"org.easymock.samples.BasicClassMockTest.testPrintContent":322,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":168,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":1,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":414,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":176,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":108,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":503,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":462,"org.easymock.tests2.UsageConstraintsTest.greaterThan":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":331,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":204,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":12,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":463,"org.easymock.samples.ExampleTest.voteForRemoval":64,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":80,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":364,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":179,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":369,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":357,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":18,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":288,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":384,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":440,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":88,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":328,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":171,"org.easymock.tests2.CaptureTest.testCaptureFirst":161,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":104,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":439,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":89,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":25,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":213,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":272,"org.easymock.tests2.CaptureTest.testCapture2_2446744":160,"org.easymock.tests2.UsageTest.moreThanOneArgument":145,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":82,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":450,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":15,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":297,"org.easymock.tests.GenericTest.testBridgedEquals":469,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":33,"org.easymock.tests.UsageExpectAndReturnTest.longType":268,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":87,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":301,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":46,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":236,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":170,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":132,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":234,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":239,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":250,"org.easymock.tests.UsageCallCountTest.tooManyCalls":34,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":347,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":273,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":394,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":223,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":167,"org.easymock.tests.MockingTest.testNiceClassMocking":483,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":402,"org.easymock.tests.MockingTest.testClassMocking":475,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":432,"org.easymock.tests2.UsageConstraintsTest.testContains":125,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":45,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":112,"org.easymock.tests2.UsageConstraintsTest.testFind":120,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":287,"org.easymock.tests.MockTypeTest.fromEasyMockClass":177,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":27,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":74,"org.easymock.tests.UsageExpectAndReturnTest.object":275,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":359,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":393,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":92,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":500,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":293,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":202,"org.easymock.tests.UsageTest.exactCallCountByLastCall":44,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":299,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":438,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":430,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":256,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":324,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":281,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":289,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":209,"org.easymock.tests.MockClassControlTest.testHashCode":427,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":410,"org.easymock.tests2.EasyMockSupportTest.testVerify":95,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":340,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":257,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":207,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":310,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":136,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":326,"org.easymock.tests.UsageVarargTest.varargCharAccepted":292,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":455,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":454,"org.easymock.tests2.UsageTest.openCallCountByLastCall":146,"org.easymock.tests.DefaultClassInstantiatorTest.object":456,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":94,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":313,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":309,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":200,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":315,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":341,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":165,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":389,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":409,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":426,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":11,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":224,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":282,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":238,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":509,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":425,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":349,"org.easymock.tests2.UsageTest.resumeIfFailure":24,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":419,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":367,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":174,"org.easymock.tests2.StubTest.stubWithReturnValue":115,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":381,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":133,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":274,"org.easymock.tests2.SerializationTest.testAllMockedMethod":400,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":196,"org.easymock.samples.SupportTest.voteForRemovals":70,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":465,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":412,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":230,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":197,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":99,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":431,"org.easymock.tests.UsageExpectAndThrowTest.object":228,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":57,"org.easymock.tests2.DelegateToTest.testWrongClass":107,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":241,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":242,"org.easymock.tests.UsageStrictMockTest.range":30,"org.easymock.samples.ConstructorCalledMockTest.testTax":317,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":371,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":91,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":401,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":229,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":380,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":495,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":42,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":327,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":215,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":183,"org.easymock.tests2.CaptureTest.testCaptureNone":157,"org.easymock.tests.UsageUnorderedTest.message":26,"org.easymock.tests.UsageVerifyTest.twoReturns":36,"org.easymock.tests.UsageVarargTest.varargByteAccepted":296,"org.easymock.tests2.ThreadingTest.testThreadSafe":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":344,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":195,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":203,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":321,"org.easymock.tests2.CaptureTest.testCapture_2617107":55,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":484,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":452,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":263,"org.easymock.tests2.UsageConstraintsTest.any":123,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":492,"org.easymock.tests2.StubTest.stub":114,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":240,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":453,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":173,"org.easymock.tests.UsageExpectAndThrowTest.longType":221,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":460,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":491,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":2,"org.easymock.tests2.SerializationTest.testClass":399,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":149,"org.easymock.tests.LimitationsTest.mockNativeMethod":472,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":468,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":284,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":388,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":86,"org.easymock.tests2.NameTest.nameForMocksControl":78,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":390,"org.easymock.tests2.MockedExceptionTest.testMockedException":111,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":332,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":308,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":480,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":222,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":352,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":96,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":382,"org.easymock.tests.MockingTest.testNicePartialClassMocking":478,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":356,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":386,"org.easymock.tests2.CaptureTest.testCaptureLast":156,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":58,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":249,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":407,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":50,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":131,"org.easymock.tests.MockingTest.testTwoMocks":476,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":408,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":265,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":226,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":22,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":134,"org.easymock.samples.ExampleTest.removeNonExistingDocument":319,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":489,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":391,"org.easymock.tests.UsageStrictMockTest.differentMethods":31,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":411,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":458,"org.easymock.tests2.ConstraintsToStringTest.andToString":510,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":81,"org.easymock.tests2.MockBuilderTest.testCreateMockString":16,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":189,"org.easymock.tests.UsageExpectAndThrowTest.floatType":220,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":334,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":0,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":329,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":101,"org.easymock.tests.UsageVerifyTest.twoThrows":35,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":325,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":343,"org.easymock.samples.ExampleTest.voteAgainstRemoval":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":444,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":181,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":363,"org.easymock.tests.LimitationsTest.privateConstructor":471,"org.easymock.tests2.UsageConstraintsTest.testNotNull":53,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":169,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":110,"org.easymock.tests2.UsageTest.defaultResetToNice":148,"org.easymock.samples.ExampleTest.voteAgainstRemovals":62,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":445,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":280,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":387,"org.easymock.tests.UsageVarargTest.differentLength":38,"org.easymock.tests2.CallbackTest.callback":5,"org.easymock.tests2.UsageConstraintsTest.equals":396,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":360,"org.easymock.tests.UsageTest.openCallCountByLastCall":307,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":118,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":262,"org.easymock.tests.UsageCallCountTest.tooFewCalls":193,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":404,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":217,"org.easymock.tests.UsageThrowableTest.throwCheckedException":166,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":512,"org.easymock.tests.MockingTest.testStrictClassMocking":474,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":406,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":300,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":403,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":117,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":494,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":143,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":103,"org.easymock.tests.ObjectMethodsTest.testHashCode":201,"org.easymock.tests2.ConstraintsToStringTest.matchesToString":514,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":59,"org.easymock.tests2.NameTest.nameForNiceMock":77,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":83,"org.easymock.tests2.DependencyTest.testInterfaceMocking":140,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":501,"org.easymock.samples.ExampleTest.addDocument":66,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":345,"org.easymock.tests2.DelegateToTest.testStubDelegate":106,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":350,"org.easymock.tests2.AnswerTest.stubAnswer":102,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":185,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":383,"org.easymock.tests.UsageVarargTest.varargLongAccepted":295,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":186,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":442,"org.easymock.tests.UsageExpectAndReturnTest.floatType":267,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":283,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":323,"org.easymock.tests2.ConstraintsToStringTest.orToString":506,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":318,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":416,"org.easymock.tests.UsageThrowableTest.noUpperLimit":163,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":130,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":211,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":119,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":366,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":154,"org.easymock.tests2.SerializationTest.test":142,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":516,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":457,"org.easymock.tests2.UsageConstraintsTest.testSame":121,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":266,"org.easymock.samples.SupportTest.addDocument":69,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":405,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":490,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":335,"org.easymock.tests.GenericTest.testPackageScope":466,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":437,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":415,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":481,"org.easymock.tests2.NameTest.nameForMock":75,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":277,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":385,"org.easymock.tests2.UsageStrictMockTest.differentMethods":4,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":361,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":269,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":232,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":199,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":206,"org.easymock.tests2.MockedExceptionTest.testRealException":113,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":180,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":447,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":372,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":513,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":504,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":446,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":85,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":496,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":261,"org.easymock.tests2.NameTest.nameForStrictMock":76,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":377,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":73,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":314,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":355,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":370,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":459,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":52,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":13,"org.easymock.tests2.UsageStrictMockTest.range":3,"org.easymock.tests2.UsageConstraintsTest.lessThan":135,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":413,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":502,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":441,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":6,"org.easymock.tests2.CaptureTest.testCaptureRightOne":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":339,"org.easymock.tests2.UsageConstraintsTest.testOr":49,"org.easymock.tests.UsageRangeTest.combination":37,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":10,"org.easymock.tests.UsageTest.wrongArguments":41,"org.easymock.tests2.MockBuilderTest.testWithConstructor":374,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":336,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":423,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":270,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":434,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":278,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":461,"org.easymock.tests.UsageVarargTest.varargShortAccepted":294,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":32,"org.easymock.tests2.UsageConstraintsTest.cmpTo":124,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":100,"org.easymock.tests2.CompareToTest.testLessThan":316,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":436,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":147,"org.easymock.tests2.CaptureTest.testCaptureFromStub":159,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":486,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":375,"org.easymock.tests.UsageTest.unexpectedCallWithArray":40,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":28,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":194,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":279,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":29,"org.easymock.tests2.UsageConstraintsTest.constraints":17,"org.easymock.samples.ExampleTest.addAndChangeDocument":68,"org.easymock.tests2.ConstraintsToStringTest.notToString":508,"org.easymock.tests.UsageStrictMockTest.testVerify":187,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":71,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":184,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":302,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":155,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":245,"org.easymock.tests.LimitationsTest.abstractClass":470,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":271,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":212,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":246,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":8,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":290}}]

[{"position":"org.easymock.internal.MocksBehavior:200","failures":[0],"status":-1,"binaryOperator":"(((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"position":"org.easymock.internal.LastControl:92","failures":[1,2,3,4,5,6,7,8,9],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[10,11,12],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[1,2,13,14,15,16,17,18,19,3,20,21],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMockSupport:480","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidClassProxyFactory:58","sourceCode":"throw new java.lang.RuntimeException((\"Failed to mock \" + java.lang.Class<T>) , java.io.IOException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[22,23],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:98","failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,4,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,12,89,90,91,92,93],"status":-1,"binaryOperator":"(java.lang.String) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,26,28,29,109,32,37,110,38,39,111,112,113,114,115,116,117,118,119,120,121,1,122,2,13,15,16,17,123,18,3,21,124,125,126,127,128,129,130,131,132,133,4,5,134,135,136,6,7,137,138,139,140,10,141,142,45,143,144,9,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,48,51,52,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,57,63,200,64,65,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,11,248,249,250,80,81,82,251,252,253,254,255,85,256,257,258,259,260,87,261,262,263,264,89,92,93,265,266,267,268],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[1,122,2,13,3,20,4,5,134,135,136,6,7,137,8,138,9,145,148,149],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:110","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[154,269],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[1,2,3,4,5,135,6,7,8,9,148],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[7],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[5,134],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"failures":[179,180,187,194,232,254],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ClassProxyFactory:168","failures":[96,270,271,272,273,274,275,276,277,278,279,280,281,282,283,124,43,126,127,128,129,284,130,44,285,286,152,153,287,288,199,289,22,290,291,292,23,293,294,295,208,296,248,249,297,298,250,77,78,79,299,300,301,302,303,304,305],"status":-1,"binaryOperator":"java.lang.reflect.Method[] != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[],"status":0,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:178","failures":[306,307],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:99","failures":[24,94,95,103,105,308,25,108,26,28,309,310,109,32,33,311,34,312,313,314,35,315,316,317,36,318,319,272,110,38,273,320,39,111,112,275,321,322,323,118,40,120,41,306,324,1,122,13,14,17,123,18,3,325,21,124,43,125,126,127,128,129,326,131,44,132,133,4,5,134,135,136,6,7,137,138,139,140,10,141,142,45,143,144,9,145,146,147,148,149,150,153,46,156,158,159,0,327,160,48,50,51,328,162,164,165,167,329,169,330,170,171,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,56,57,331,332,62,203,204,205,206,207,208,333,230,334,335,336,337,338,231,232,248,339,80,82,85,87,261,262,263,89,91,92,266,267,268],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:82","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])));\n} ","type":"CtIfImpl"},"failures":[24,340,94,95,97,98,99,100,101,341,342,102,103,104,105,308,106,107,25,108,26,27,28,29,309,310,109,30,31,32,33,311,34,312,313,314,35,315,316,317,36,318,319,37,272,110,38,273,320,39,111,112,275,321,322,323,117,118,119,40,343,120,121,41,306,42,324,344,1,122,2,13,14,15,16,17,123,18,3,20,325,21,124,43,125,126,127,128,345,129,130,326,131,44,286,132,133,4,5,134,135,136,6,7,137,8,138,139,140,10,141,142,45,143,144,9,145,146,346,147,148,149,150,151,152,153,154,46,347,348,155,156,349,350,157,158,159,0,327,160,47,48,49,50,51,52,328,162,163,164,165,167,168,351,351,352,352,329,353,354,355,169,356,330,170,171,172,173,174,175,357,176,177,358,359,178,307,53,360,54,361,55,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,56,57,58,59,331,332,60,61,62,362,363,364,64,203,204,205,206,207,69,70,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,71,72,333,229,230,334,335,336,337,338,231,232,365,366,367,368,73,369,370,74,75,233,234,235,236,237,238,11,248,339,297,298,77,78,79,299,300,301,80,81,82,251,252,253,254,255,371,83,372,269,84,85,86,373,374,375,256,257,258,259,260,87,261,262,263,88,12,89,90,91,92,93,304,266,267,268,376,377,378,379,380],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.Invocation:183","sourceCode":"final java.lang.SecurityException java.lang.SecurityException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:198","sourceCode":"return true","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:99","failures":[24,94,95,101,103,105,308,25,108,26,28,309,310,109,32,33,311,34,312,313,314,35,315,316,317,36,318,319,272,110,38,273,320,39,111,112,275,321,322,323,118,40,120,41,306,324,1,122,13,14,17,123,18,3,325,21,124,43,125,126,127,128,129,326,131,44,132,133,4,5,134,135,136,6,7,137,138,139,140,10,141,142,45,143,144,9,145,146,147,148,149,150,153,46,156,158,159,0,327,160,48,50,51,328,162,164,165,167,329,169,330,170,171,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,56,57,331,332,62,203,204,205,206,207,208,333,230,334,335,336,337,338,231,232,248,339,80,82,85,87,261,262,263,89,91,92,266,267,268],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:814","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[381,382,58,383,384,12],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1495","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[118,151,152,153,154,356,171,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,333,334,335,336,337,338,233,234,235,236,237,238,81,269],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Compare:53","failures":[45],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.Invocation:154","sourceCode":"return (java.lang.String + \".\") + java.lang.String","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:89","sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[385],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mockName":"defaultValue","methodName":"defaultValue"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","this":"this"}},{"transplant":{"position":"org.easymock.internal.Invocation:54","sourceCode":"return java.lang.Object[] == null ? this.java.lang.Object[] : java.lang.Object[]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:94","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.Invocation.NO_ARGS":"initArgs","args":"initArgs"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[386,297],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[381,382,58,383,384,12],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[115,130,286],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:93","sourceCode":"if (int == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[94,95,96,387],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"length":"i","clazz":"primitiveType"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:207","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"failures":[28,35],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Equals:57","failures":[],"status":0,"binaryOperator":"(((this.java.lang.Object) != null) && (this.java.lang.Object.equals(org.easymock.internal.matchers.Equals.java.lang.Object)))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"failures":[119,121,345,286,151],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"position":"org.easymock.internal.LastControl:124","failures":[24,94,95,96,97,98,99,100,101,102,103,104,105,308,106,107,25,108,26,27,28,29,309,310,109,30,31,32,33,311,34,312,313,314,35,315,316,317,36,318,319,388,37,272,110,38,273,320,39,111,112,275,321,322,323,117,118,119,40,120,121,41,306,42,324,344,1,122,2,13,14,15,16,17,123,18,3,20,325,21,124,43,125,126,127,128,345,129,130,326,131,44,132,133,4,5,134,135,136,6,7,137,138,139,140,10,141,142,45,143,144,9,145,146,346,147,148,149,150,151,152,153,154,46,155,156,349,157,158,159,0,327,160,47,161,48,49,50,51,52,389,328,390,162,163,164,165,166,167,168,391,351,352,329,287,288,169,356,330,170,171,172,173,174,175,176,177,358,359,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,56,57,58,59,331,332,60,61,62,64,65,201,202,66,67,68,203,204,205,206,207,69,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,333,229,230,334,335,336,337,338,231,232,233,234,235,236,237,238,239,240,241,242,243,76,244,245,246,247,11,248,249,80,81,82,251,252,253,254,255,371,372,269,86,256,257,258,259,260,87,262,263,392,392,88,264,12,89,90,91,92,93,266,267,268],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:80","failures":[94,119,393,40,343,120,121,41,306,42,324,394,344,345,329,307,54,339],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1421","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:67","sourceCode":"return !(java.util.List<T>.isEmpty())","type":"CtReturnImpl"},"failures":[15,16,17,18,19,21],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[27,30,31,50,58,59,60,61,69,81,82,395,12,91],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[27,30,31,50,58,59,60,61,69,81,82,86,395,12,91],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1433","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1235","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":5,"org.easymock.tests2.UsageTest.argumentsOrdered":31,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":56,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":318,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":347,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":29,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":390,"org.easymock.tests2.DelegateToTest.testReturnException":155,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":234,"org.easymock.tests.MockingTest.testPartialClassMocking":266,"org.easymock.tests.MockClassControlTest.testToString":77,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":367,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":286,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":209,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":321,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":308,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":137,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":176,"org.easymock.tests2.UsageTest.wrongArguments":27,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":174,"org.easymock.samples.ExampleTest.answerVsDelegate":163,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":54,"org.easymock.tests2.UsageConstraintsTest.testNull":135,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":126,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":36,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":301,"org.easymock.tests2.CaptureTest.testPrimitive":13,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":178,"org.easymock.tests.UsageTest.moreThanOneArgument":57,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":228,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":125,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":253,"org.easymock.tests.UsageTest.argumentsOrdered":61,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":376,"org.easymock.tests.UsageVarargTest.varargIntAccepted":241,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":203,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":119,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":121,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":207,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":24,"org.easymock.tests2.AnswerTest.answer":101,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":8,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":100,"org.easymock.tests2.CaptureTest.testAnd":1,"org.easymock.tests2.UsageTest.strictResetToDefault":108,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":130,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":252,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":262,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":314,"org.easymock.tests2.DelegateToTest.testDelegate":157,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":380,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":224,"org.easymock.tests.LimitationsTest.mockFinalMethod":296,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":237,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":260,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":71,"org.easymock.tests2.CaptureTest.testCapture1_2446744":14,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":222,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":98,"org.easymock.tests.UsageThrowableTest.throwError":333,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":360,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":255,"org.easymock.samples.PartialClassMockTest.testGetArea":329,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":204,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":354,"org.easymock.tests2.UsageTest.niceToStrict":28,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":75,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":210,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":279,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":120,"org.easymock.tests2.MockBuilderTest.testCreateMock":42,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":218,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":381,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":35,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":375,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":63,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":172,"org.easymock.tests.UsageOverloadedMethodTest.overloading":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":283,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":141,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":269,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":190,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":330,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":10,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":18,"org.easymock.tests2.EasyMockSupportClassTest.testAll":275,"org.easymock.tests.MockClassControlTest.testEquals":300,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":249,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":226,"org.easymock.tests2.CaptureTest.testCaptureAll":122,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":99,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":258,"org.easymock.tests.MockNameTest.defaultName":70,"org.easymock.tests2.UsageConstraintsTest.testMatches":142,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":254,"org.easymock.samples.ExampleTest.voteForRemovals":167,"org.easymock.tests.UsageVarargTest.allKinds":11,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":80,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":259,"org.easymock.samples.BasicClassMockTest.testPrintContent":288,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":337,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":47,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":238,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":350,"org.easymock.tests2.UsageConstraintsTest.greaterThan":143,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":261,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":44,"org.easymock.samples.ExampleTest.voteForRemoval":164,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":293,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":159,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":285,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":361,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":345,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":25,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":199,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":312,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":230,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":233,"org.easymock.tests2.CaptureTest.testCaptureFirst":21,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":348,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":313,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":33,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":86,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":186,"org.easymock.tests2.UsageTest.moreThanOneArgument":26,"org.easymock.tests2.CaptureTest.testCapture2_2446744":325,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":327,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":324,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":247,"org.easymock.tests.GenericTest.testBridgedEquals":297,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":67,"org.easymock.tests.UsageExpectAndReturnTest.longType":182,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":256,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":311,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":394,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":227,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":346,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":357,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":225,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":251,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":363,"org.easymock.tests.UsageCallCountTest.tooManyCalls":68,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":64,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":187,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":214,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":336,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":110,"org.easymock.tests.MockingTest.testNiceClassMocking":305,"org.easymock.tests.MockingTest.testClassMocking":303,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":393,"org.easymock.tests2.UsageConstraintsTest.testContains":140,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":200,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":153,"org.easymock.tests2.UsageConstraintsTest.testFind":134,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":171,"org.easymock.tests.MockTypeTest.fromEasyMockClass":53,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":107,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":88,"org.easymock.tests.UsageExpectAndReturnTest.object":189,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":129,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":317,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":243,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":370,"org.easymock.tests.UsageTest.exactCallCountByLastCall":62,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":169,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":377,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":195,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":239,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":372,"org.easymock.tests.MockClassControlTest.testHashCode":299,"org.easymock.tests2.EasyMockSupportTest.testVerify":388,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":378,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":371,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":374,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":97,"org.easymock.tests.UsageVarargTest.varargCharAccepted":242,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":161,"org.easymock.tests2.UsageTest.openCallCountByLastCall":309,"org.easymock.tests.DefaultClassInstantiatorTest.object":289,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":319,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":373,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":73,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":395,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":280,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":334,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":79,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":326,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":215,"org.easymock.tests.CapturesMatcherTest.test":392,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":196,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":362,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":323,"org.easymock.tests2.UsageTest.resumeIfFailure":32,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":307,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":236,"org.easymock.tests2.StubTest.stubWithReturnValue":118,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":188,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":147,"org.easymock.tests2.SerializationTest.testAllMockedMethod":96,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":365,"org.easymock.samples.SupportTest.voteForRemovals":328,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":382,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":386,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":221,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":387,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":366,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":341,"org.easymock.tests.UsageExpectAndThrowTest.object":219,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":145,"org.easymock.tests2.DelegateToTest.testWrongClass":349,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":231,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":232,"org.easymock.tests.UsageStrictMockTest.range":91,"org.easymock.samples.ConstructorCalledMockTest.testTax":351,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":316,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":272,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":220,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":41,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":274,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":173,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":383,"org.easymock.tests2.CaptureTest.testCaptureNone":123,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":355,"org.easymock.tests.UsageUnorderedTest.message":69,"org.easymock.tests.UsageVerifyTest.twoReturns":82,"org.easymock.tests.UsageVarargTest.varargByteAccepted":246,"org.easymock.tests2.ThreadingTest.testThreadSafe":158,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":281,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":202,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":74,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":287,"org.easymock.tests2.CaptureTest.testCapture_2617107":2,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":359,"org.easymock.tests2.UsageConstraintsTest.any":138,"org.easymock.tests2.StubTest.stub":117,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":364,"org.easymock.tests.UsageExpectAndThrowTest.longType":212,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":235,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":292,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":49,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":46,"org.easymock.tests2.SerializationTest.testClass":94,"org.easymock.tests.LimitationsTest.mockNativeMethod":208,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":198,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":339,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":52,"org.easymock.tests2.NameTest.nameForMocksControl":116,"org.easymock.tests2.MockedExceptionTest.testMockedException":152,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":276,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":332,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":213,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":268,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":124,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":306,"org.easymock.tests.MockingTest.testNicePartialClassMocking":267,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":128,"org.easymock.tests2.CaptureTest.testCaptureLast":17,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":72,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":111,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":7,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":146,"org.easymock.tests.MockingTest.testTwoMocks":304,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":179,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":217,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":30,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":149,"org.easymock.tests.UsageStrictMockTest.differentMethods":92,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":290,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":0,"org.easymock.tests2.MockBuilderTest.testCreateMockString":344,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":298,"org.easymock.tests.UsageExpectAndThrowTest.floatType":211,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":277,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":45,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":102,"org.easymock.tests.UsageVerifyTest.twoThrows":81,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":322,"org.easymock.samples.ExampleTest.voteAgainstRemoval":165,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":353,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":131,"org.easymock.tests.LimitationsTest.privateConstructor":295,"org.easymock.tests2.UsageConstraintsTest.testNotNull":148,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":151,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":338,"org.easymock.tests2.UsageTest.defaultResetToNice":109,"org.easymock.samples.ExampleTest.voteAgainstRemovals":162,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":194,"org.easymock.tests.UsageVarargTest.differentLength":76,"org.easymock.tests2.CallbackTest.callback":37,"org.easymock.tests.UsageTest.openCallCountByLastCall":331,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":132,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":358,"org.easymock.tests.UsageCallCountTest.tooFewCalls":65,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":273,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":175,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":385,"org.easymock.tests.UsageThrowableTest.throwCheckedException":335,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":384,"org.easymock.tests.MockingTest.testStrictClassMocking":302,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":39,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":356,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":38,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":340,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":320,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":104,"org.easymock.tests.ObjectMethodsTest.testHashCode":369,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":160,"org.easymock.tests2.NameTest.nameForNiceMock":115,"org.easymock.tests2.DependencyTest.testInterfaceMocking":105,"org.easymock.samples.ExampleTest.addDocument":166,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":282,"org.easymock.tests2.DelegateToTest.testStubDelegate":156,"org.easymock.tests2.AnswerTest.stubAnswer":103,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":89,"org.easymock.tests.UsageVarargTest.varargLongAccepted":245,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":93,"org.easymock.tests.UsageExpectAndReturnTest.floatType":181,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":197,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":112,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":352,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":144,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":84,"org.easymock.tests.UsageThrowableTest.noUpperLimit":229,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":133,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":270,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":15,"org.easymock.tests2.SerializationTest.test":95,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":22,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":180,"org.easymock.tests2.UsageConstraintsTest.testSame":136,"org.easymock.samples.SupportTest.addDocument":389,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":278,"org.easymock.tests.GenericTest.testPackageScope":248,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":379,"org.easymock.tests2.NameTest.nameForMock":113,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":191,"org.easymock.tests2.UsageStrictMockTest.differentMethods":51,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":284,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":183,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":223,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":368,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":263,"org.easymock.tests2.MockedExceptionTest.testRealException":154,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":55,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":48,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":177,"org.easymock.tests2.NameTest.nameForStrictMock":114,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":106,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":127,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":271,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":9,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":291,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":40,"org.easymock.tests2.UsageStrictMockTest.range":50,"org.easymock.tests2.UsageConstraintsTest.lessThan":150,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":34,"org.easymock.tests2.CaptureTest.testCaptureRightOne":3,"org.easymock.tests2.UsageConstraintsTest.testOr":6,"org.easymock.tests.UsageRangeTest.combination":87,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":43,"org.easymock.tests.UsageTest.wrongArguments":59,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":250,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":184,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":192,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":23,"org.easymock.tests.UsageVarargTest.varargShortAccepted":244,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":66,"org.easymock.tests2.UsageConstraintsTest.cmpTo":139,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":342,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":310,"org.easymock.tests2.CaptureTest.testCaptureFromStub":20,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":343,"org.easymock.tests.UsageTest.unexpectedCallWithArray":58,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":12,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":201,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":193,"org.easymock.tests2.CaptureTest.testCapture":19,"org.easymock.tests2.UsageConstraintsTest.constraints":4,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":90,"org.easymock.samples.ExampleTest.addAndChangeDocument":168,"org.easymock.tests.UsageStrictMockTest.testVerify":265,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":391,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":264,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":257,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":16,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":205,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":185,"org.easymock.tests.LimitationsTest.abstractClass":294,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":85,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":206,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":240,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":315}}]

[{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","position":"org.easymock.internal.ReflectionUtils:95","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findGenericDeclaration(java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:144","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method.getParameterTypes()","position":"org.easymock.internal.BridgeMethodResolver:131","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.String java.lang.String = org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(org.easymock.EasyMock.java.lang.String)","position":"org.easymock.internal.MocksControl:128","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:355","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:260","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.String java.lang.String : java.lang.String[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.String);\n}","position":"org.easymock.internal.MockBuilder:97","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{"currentPosition":"length","callCount":"length"},"name":"replace","transplant":{"sourceCode":"if (int > (this.int)) {\n    return true;\n} ","position":"org.easymock.internal.Results:56","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (this.java.lang.Object[].int) ; int++) {\n    final java.lang.Object java.lang.Object = this.java.lang.Object[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n        if (!(java.lang.Object.equals(java.lang.Object))) {\n            return false;\n        } \n    } else {\n        if (java.lang.Object != java.lang.Object) {\n            return false;\n        } \n    }\n}","position":"org.easymock.internal.Invocation:117","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-4214363692271370781L","position":"org.easymock.Capture:33","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2087349195182278608L","position":"org.easymock.internal.AssertionErrorWrapper:23","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[0,1,2],"variableMapping":{"expected":"proxy"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:86","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(int[]))","position":"org.easymock.EasyMock:1646","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getConstructors()[0]","position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:592","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"replace","transplant":{"sourceCode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])","position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getConstructors()[0]","position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","position":"org.easymock.internal.ReflectionUtils:72","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:210","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"invocation":"invocation","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","position":"org.easymock.internal.ReplayState:46","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","position":"org.easymock.internal.ReplayState:45","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"isThreadSafe"},"name":"replace","transplant":{"sourceCode":"this.boolean = true","position":"org.easymock.internal.AndroidSupport:27","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:181","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount())) {\n    return false;\n} ","position":"org.easymock.internal.UnorderedBehavior:75","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"method","finalizeMethod":"method"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","position":"org.easymock.internal.ObjectMethodsFilter:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.ClassProxyFactory:97","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return T","position":"org.easymock.internal.ClassProxyFactory:221","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new net.sf.cglib.core.DefaultNamingPolicy() {\n    @java.lang.Override\n    public java.lang.String getClassName(final java.lang.String prefix, final java.lang.String source, final java.lang.Object key, final net.sf.cglib.core.Predicate names) {\n        return \"codegen.\" + (net.sf.cglib.core.DefaultNamingPolicy.getClassName(java.lang.String, java.lang.String, java.lang.Object, net.sf.cglib.core.Predicate));\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:145","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:72","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = this.java.lang.Object[][int]","position":"org.easymock.internal.Invocation:118","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"continue","position":"org.easymock.ConstructorArgs:78","type":"CtContinueImpl"},"status":-2},{"failures":[3],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(short[]))","position":"org.easymock.EasyMock:1672","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.ReflectionUtils:228","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:323","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Class<?> java.lang.Class<?> : java.lang.Class<?>[]) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n        return true;\n    } \n}","position":"org.easymock.internal.RecordState:322","type":"CtForEachImpl"},"status":-2},{"failures":[4],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return true","position":"org.easymock.internal.Results:53","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int == 0","position":"org.easymock.internal.matchers.CompareEqual:39","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.util.List<java.lang.Class<?>> java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>>()","position":"org.easymock.internal.BridgeMethodResolver:380","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.Result org.easymock.internal.Result = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).addActual(org.easymock.internal.Invocation)","position":"org.easymock.internal.MocksBehavior:87","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","position":"org.easymock.internal.ClassProxyFactory:193","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:52","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:93","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"controls":"controls"},"name":"add","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToDefault();\n}","position":"org.easymock.EasyMockSupport:583","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToStrict();\n}","position":"org.easymock.EasyMockSupport:594","type":"CtForEachImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:123","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.ObjectMethodsFilter:108","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    com.google.dexmaker.stock.ProxyBuilder<T> com.google.dexmaker.stock.ProxyBuilder<T> = com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.forClass(java.lang.Class<T>).handler(org.easymock.internal.AndroidClassProxyFactory.MockHandler);\n    if (org.easymock.ConstructorArgs != null) {\n        com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs());\n    } else {\n        try {\n            org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n            java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n            java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n            com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n        } catch (java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n        }\n    }\n    return com.google.dexmaker.stock.ProxyBuilder<T>.build();\n} catch (java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException((\"Failed to mock \" + java.lang.Class<T>) , java.io.IOException);\n}","position":"org.easymock.internal.AndroidClassProxyFactory:39","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"))","position":"org.easymock.internal.ClassProxyFactory:230","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"injection":"injection"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.Injection.getAnnotation()","position":"org.easymock.internal.InjectionPlan:49","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection)","position":"org.easymock.internal.Injector:170","type":"CtInvocationImpl"},"status":0},{"failures":[5],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","position":"org.easymock.internal.ReflectionUtils:166","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","position":"org.easymock.internal.ReflectionUtils:152","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"\\'\")","position":"org.easymock.internal.ArgumentToString:41","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.ClassLoader java.lang.ClassLoader = null","position":"org.easymock.internal.EasyMockProperties:126","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"constructor":"ret"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.ReflectionUtils:157","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:52","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String)","position":"org.easymock.internal.EasyMockProperties:101","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:127","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","position":"org.easymock.EasyMock:1763","type":"CtInvocationImpl"},"status":-2},{"failures":[6,7,8],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.io.DataOutputStream.writeByte(2)","position":"org.easymock.internal.DefaultClassInstantiator:146","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeShort(0)","position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Field.set(java.lang.Object, java.lang.Object)","position":"org.easymock.internal.Injector:131","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injection != null) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n} ","position":"org.easymock.internal.Injector:232","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","position":"org.easymock.internal.ReplayState:149","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\") + (org.easymock.internal.Invocation.getMethod())) + \"]\") , java.lang.IllegalArgumentException)","position":"org.easymock.internal.Result:86","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>))","position":"org.easymock.internal.AndroidClassProxyFactory:53","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException((\"Failed to mock \" + java.lang.Class<T>) , java.io.IOException)","position":"org.easymock.internal.AndroidClassProxyFactory:58","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1688","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:242","type":"CtThrowImpl"},"status":-2},{"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.StringBuffer.toString()","position":"org.easymock.internal.ExpectedInvocation:113","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:109","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksBehavior.addBehaviorListIfNecessary(org.easymock.internal.ExpectedInvocation)","position":"org.easymock.internal.MocksBehavior:60","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:593","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:971","type":"CtInvocationImpl"},"status":-2},{"failures":[9,16,17,18,19,20,21,22,34,35,36,37,23,27,28,29],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1531","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.easymock.internal.ErrorMessage:44","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs());\n} else {\n    try {\n        org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n        java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n        com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n    } catch (java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n    }\n}","position":"org.easymock.internal.AndroidClassProxyFactory:42","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Object.getClass()","position":"org.easymock.internal.Injector:80","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.junit.runners.model.Statement.evaluate()","position":"org.easymock.internal.EasyMockStatement:43","type":"CtInvocationImpl"},"status":-2},{"failures":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,30,31,32,33],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Invocation:204","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:25","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injection = org.easymock.internal.Injection","position":"org.easymock.internal.Injector:237","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"result"},"name":"add","transplant":{"sourceCode":"if (org.easymock.internal.Result != null) {\n    return org.easymock.internal.Result;\n} ","position":"org.easymock.internal.MocksBehavior:88","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.ExpectedInvocationAndResult:41","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"bridgeMethod":"method"},"name":"replace","transplant":{"sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:70","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:79","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{"interval":"interval"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:55","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Range.getMinimum()","position":"org.easymock.internal.Results:93","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(null)","position":"org.easymock.internal.ClassProxyFactory:130","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Object.equals(java.lang.Object)","position":"org.easymock.internal.matchers.Equals:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:126","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:249","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(java.util.List<T>.isEmpty())","position":"org.easymock.Capture:67","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"cls":"type","type":"type"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:261","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field)","position":"org.easymock.internal.Injector:109","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","position":"org.easymock.EasyMock:1594","type":"CtInvocationImpl"},"status":-2},{"failures":[90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],"variableMapping":{"state":"state"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","position":"org.easymock.internal.MocksControl:222","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:302","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"new java.lang.ThreadLocal<org.easymock.internal.MocksControl>()","position":"org.easymock.internal.LastControl:35","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.Injection:74","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","position":"org.easymock.internal.RecordState:144","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Results.getMainInterval().contains(org.easymock.internal.Results.getCallCount())","position":"org.easymock.internal.Results:81","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.HashMap<java.lang.String, java.lang.Class<?>>(10)","position":"org.easymock.internal.MethodSerializationWrapper:30","type":"CtNewClassImpl"},"status":-2},{"failures":[108],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","position":"org.easymock.internal.LastControl:104","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties()","position":"org.easymock.internal.EasyMockProperties:49","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ","position":"org.easymock.internal.RecordState:266","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:355","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException)","position":"org.easymock.internal.ClassProxyFactory:210","type":"CtThrowImpl"},"status":-2},{"failures":[109],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1420","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:320","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","position":"org.easymock.internal.MethodSerializationWrapper:69","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"value":"lastInvocationUsed","checkOrder":"lastInvocationUsed"},"name":"add","transplant":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:185","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{"toMock":"toMock"},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","position":"org.easymock.EasyMock:480","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T> , this)","position":"org.easymock.EasyMockSupport:497","type":"CtReturnImpl"},"status":-2},{"failures":[36],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String","position":"org.easymock.internal.ErrorMessage:40","type":"CtReturnImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:85","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","position":"org.easymock.EasyMock:1708","type":"CtInvocationImpl"},"status":-2},{"failures":[110],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","position":"org.easymock.Capture:82","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","position":"org.easymock.Capture:112","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","position":"org.easymock.EasyMock:2143","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","position":"org.easymock.internal.RecordState:176","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","position":"org.easymock.EasyMockSupport:530","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(long))","position":"org.easymock.EasyMock:1542","type":"CtInvocationImpl"},"status":0},{"failures":[111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,90,138,139,38,140,141,142,39,143,40,144,145,146,147,148,149,91,150,9,151,10,152,153,11,12,154,0,155,156,157,158,1,159,160,161,162,163,164,165,166,167,168,169,170,171,172,92,93,94,95,96,97,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,13,14,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,6,223,224,225,226,227,228,229,230,231,232,233,234,235,236,15,16,237,17,18,238,239,240,241,2,242,243,244,245,246,247,248,249,250,251,98,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,19,20,21,99,100,101,302,303,304,305,306,307,308,309,310,22,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,102,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,108,380,381,382,3,383,384,385,386,387,109,388,389,390,391,392,393,394,395,396,23,24,397,398,399,400,401,25,26,402,403,42,43,44,45,46,47,48,49,50,51,52,53,103,104,105,106,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,27,419,28,29,420,421,422,423,424,54,55,56,57,58,59,60,61,62,63,64,65,425,426,427,428,429,430,431,432,433,434,435,436,437,110,438,439,440,441,442,443,444,445,446,447,448,449,66,67,450,451,452,453,454,68,455,456,457,458,459,69,460,70,461,462,463,464,71,465,466,467,72,73,468,74,469,470,471,472,473,474,475,476,477,75,478,479,76,480,77,481,78,79,482,80,483,484,81,485,486,82,83,487,488,489,490,491,84,492,85,86,493,494,495,496,497,107,498,499,500,501,502,87,503,504,88,505,89,506,507,508,509,510,30,31,32,33,511,512,513,514,515,516],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","position":"org.easymock.internal.EasyMockProperties:64","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","position":"org.easymock.internal.EasyMockProperties:62","type":"CtIfImpl"},"status":-1},{"failures":[112,112,113,113,125,126,127,135,38,143,155,211,212,213,215,323,326,327,328,517,518,519,105,421,423,66,67,450,451,454,68,69,520,460,70,462,463,464,71,467,72,521,73,468,74,470,471,472,473,475,75,478,479,76,482,484,491,494,498],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:106","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.ReflectionUtils:229","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","position":"org.easymock.EasyMockSupport:530","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Number","position":"org.easymock.internal.RecordState:207","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:113","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:84","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:209","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"pt":"pt","typeVariableMap":"typeVariableMap","this":"this"},"name":"add","transplant":{"sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:284","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:257","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return int <= 0","position":"org.easymock.internal.matchers.LessOrEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((this.java.lang.Object[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:114","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1848","type":"mutation","return":"return 0","status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Type[].int) != (java.lang.Class<?>[].int)) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:190","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.InstantiationException java.lang.InstantiationException","position":"org.easymock.internal.AndroidClassProxyFactory:52","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Field","position":"org.easymock.internal.InjectionTarget:73","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Short>(short))","position":"org.easymock.EasyMock:878","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"matchers":"matchers"},"name":"replace","transplant":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.ExpectedInvocation:58","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<org.easymock.IArgumentMatcher> != null) {\n    if ((java.util.List<org.easymock.IArgumentMatcher>.size()) != (org.easymock.internal.Invocation.getArguments().int)) {\n        throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"));\n    } \n    return java.util.List<org.easymock.IArgumentMatcher>;\n} ","position":"org.easymock.internal.ExpectedInvocation:45","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"actual","prefix":"regex"},"name":"add","transplant":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).startsWith(this.java.lang.String))","position":"org.easymock.internal.matchers.StartsWith:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).matches(java.lang.String))","position":"org.easymock.internal.matchers.Matches:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","position":"org.easymock.internal.EasyMockProperties:89","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String)","position":"org.easymock.internal.EasyMockProperties:101","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ","position":"org.easymock.internal.RecordState:249","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","position":"org.easymock.internal.ArgumentToString:39","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Throwable java.lang.Throwable","position":"org.easymock.internal.EasyMockProperties:129","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtInvocationImpl"},"status":-2},{"failures":[112,112,113,113,125,126,127,135,38,143,155,211,212,213,215,323,326,327,328,517,518,519,105,421,423,66,67,450,451,454,68,69,520,460,70,462,463,464,71,467,72,521,73,468,74,470,471,472,473,475,75,478,479,76,482,484,491,494,498],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","position":"org.easymock.internal.ReflectionUtils:96","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int]);\n    if (java.lang.Class<?> != null) {\n        java.lang.Class<?>[][int] = java.lang.Class<?>;\n    } else {\n        java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n    }\n}","position":"org.easymock.internal.MethodSerializationWrapper:67","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.LinkedList<org.easymock.internal.Range>.add(org.easymock.internal.Range)","position":"org.easymock.internal.Results:44","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"actual","expected":"actual","this":"this"},"name":"add","transplant":{"sourceCode":"return java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:51","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:53","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T> com.google.dexmaker.stock.ProxyBuilder<T> = com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.forClass(java.lang.Class<T>).handler(org.easymock.internal.AndroidClassProxyFactory.MockHandler)","position":"org.easymock.internal.AndroidClassProxyFactory:40","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:840","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","position":"org.easymock.internal.RecordState:96","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"e":"e"},"name":"replace","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.ObjectMethodsFilter:62","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.Invocation:214","type":"CtThrowImpl"},"status":0},{"failures":[83,88],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","position":"org.easymock.internal.ReplayState:149","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:399","type":"CtReturnImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":316,"org.easymock.tests2.MockedExceptionTest.testRealException":106,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":236,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":81,"org.easymock.tests.UsageVarargTest.varargIntAccepted":196,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":284,"org.easymock.tests.LimitationsTest.mockFinalMethod":324,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":369,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":157,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":498,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":514,"org.easymock.tests.UsageCallCountTest.tooManyCalls":310,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":333,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":492,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":455,"org.easymock.tests2.StubTest.stubWithReturnValue":107,"org.easymock.tests.UsageVarargTest.allKinds":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":496,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":148,"org.easymock.tests2.CaptureTest.testCaptureAll":426,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":311,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":385,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":517,"org.easymock.tests2.CaptureTest.testAnd":425,"org.easymock.tests.UsageStrictMockTest.testVerify":239,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":181,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":130,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":38,"org.easymock.tests.MockClassControlTest.testToString":156,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":66,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":102,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":504,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":278,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":189,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":355,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":59,"org.easymock.tests.UsageThrowableTest.throwError":313,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":293,"org.easymock.samples.SupportTest.addDocument":115,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":139,"org.easymock.tests2.StubTest.stub":497,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":269,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":334,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":54,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":228,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":474,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":296,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":136,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":265,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":361,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":77,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":519,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":267,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":480,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":204,"org.easymock.tests.UsageExpectAndThrowTest.object":183,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":441,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":86,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":94,"org.easymock.tests2.UsageTest.moreThanOneArgument":23,"org.easymock.tests.UsageVarargTest.varargByteAccepted":203,"org.easymock.tests.MockClassControlTest.testEquals":159,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":518,"org.easymock.tests.UsageTest.wrongArguments":10,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":276,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":164,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":242,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":58,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":184,"org.easymock.tests2.UsageTest.defaultResetToNice":401,"org.easymock.tests.MockingTest.testNiceClassMocking":218,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":105,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":442,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":71,"org.easymock.tests2.MockBuilderTest.testCreateMock":467,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":443,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":520,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":330,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":335,"org.easymock.samples.ExampleTest.voteAgainstRemovals":117,"org.easymock.tests2.CompareToTest.testCompareEqual":4,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":417,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":57,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":129,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":300,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":206,"org.easymock.tests2.CaptureTest.testCapture1_2446744":429,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":415,"org.easymock.samples.ExampleTest.voteForRemoval":119,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":366,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":307,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":133,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":168,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":145,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":238,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":35,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":348,"org.easymock.tests2.CaptureTest.testCaptureRightOne":435,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":331,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":446,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":472,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":299,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":271,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":332,"org.easymock.tests2.UsageConstraintsTest.cmpTo":381,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":515,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":6,"org.easymock.tests.MockTypeTest.fromEasyMockClass":142,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":63,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":465,"org.easymock.tests2.MockedExceptionTest.testMockedException":104,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":192,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":232,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":391,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":19,"org.easymock.samples.PartialClassMockTest.testGetArea":125,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":98,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":208,"org.easymock.samples.ConstructorCalledMockTest.testTax":112,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":452,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":363,"org.easymock.tests2.UsageTest.argumentsOrdered":26,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":140,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":445,"org.easymock.samples.ExampleTest.removeNonExistingDocument":123,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":367,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":221,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":449,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":172,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":347,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":161,"org.easymock.tests2.AnswerTest.answer":444,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":64,"org.easymock.tests.MockingTest.testNicePartialClassMocking":213,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":16,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":229,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":234,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":270,"org.easymock.tests.UsageExpectAndThrowTest.longType":176,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":144,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":190,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":491,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":505,"org.easymock.tests.UsageTest.argumentsOrdered":12,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":372,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":464,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":360,"org.easymock.tests2.NameTest.nameForStrictMock":31,"org.easymock.tests2.MockBuilderTest.testCreateMockString":73,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":90,"org.easymock.tests2.CaptureTest.testCaptureNone":433,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":251,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":264,"org.easymock.tests2.SerializationTest.testClass":421,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":244,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":126,"org.easymock.tests.MockingTest.testInterfaceMocking":214,"org.easymock.tests2.EasyMockSupportTest.testVerify":509,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":241,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":61,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":463,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":178,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":217,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":390,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":395,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":72,"org.easymock.tests.GenericTest.testBridgedEquals":329,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":359,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":379,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":453,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":468,"org.easymock.tests2.UsageConstraintsTest.testOr":377,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":440,"org.easymock.tests.MockClassControlTest.testHashCode":1,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":43,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":510,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":143,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":312,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":320,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":354,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":7,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":231,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":67,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":451,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":495,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":512,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":280,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":80,"org.easymock.tests2.UsageConstraintsTest.testSame":376,"org.easymock.tests2.UsageTest.resumeIfFailure":402,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":279,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":100,"org.easymock.tests.UsageOverloadedMethodTest.overloading":207,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":454,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":40,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":476,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":46,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":48,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":487,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":275,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":83,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":327,"org.easymock.tests.UsageTest.openCallCountByLastCall":152,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":41,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":179,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":274,"org.easymock.tests2.NameTest.nameForNiceMock":32,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":337,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":60,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":301,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":230,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":283,"org.easymock.tests2.CaptureTest.testPrimitive":428,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":469,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":99,"org.easymock.samples.BasicClassMockTest.testPrintContent":127,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":225,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":37,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":75,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":309,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":408,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":303,"org.easymock.tests2.UsageStrictMockTest.differentMethods":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":488,"org.easymock.tests.MockingTest.testClassMocking":210,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":502,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":328,"org.easymock.tests2.CaptureTest.testCaptureLast":432,"org.easymock.tests2.UsageConstraintsTest.equals":373,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":521,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":174,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":308,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":306,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":459,"org.easymock.tests.UsageStrictMockTest.range":17,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":153,"org.easymock.tests.UsageTest.unexpectedCallWithArray":151,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":489,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":248,"org.easymock.samples.ExampleTest.addDocument":121,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":216,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":134,"org.easymock.tests2.UsageConstraintsTest.lessThan":394,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":11,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":128,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":268,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":8,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":411,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":256,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":362,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":224,"org.easymock.tests2.UsageStrictMockTest.range":28,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":68,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":13,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":163,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":250,"org.easymock.tests.UsageTest.moreThanOneArgument":9,"org.easymock.tests2.UsageTest.openCallCountByLastCall":399,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":460,"org.easymock.tests.UsageStrictMockTest.differentMethods":18,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":220,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":253,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":365,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":177,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":166,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":342,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":483,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":511,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":56,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":237,"org.easymock.tests2.DependencyTest.testClassMockingSupport":457,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":475,"org.easymock.tests.ReplayStateInvalidCallsTest.times":289,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":188,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":149,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":45,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":111,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":169,"org.easymock.tests2.UsageConstraintsTest.testContains":382,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":291,"org.easymock.tests2.UsageConstraintsTest.testFind":374,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":430,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":222,"org.easymock.samples.ExampleTest.addAndChangeDocument":124,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":69,"org.easymock.tests.UsageVarargTest.varargCharAccepted":198,"org.easymock.tests2.CaptureTest.testCaptureFromStub":436,"org.easymock.tests.UsageVerifyTest.twoThrows":20,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":65,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":141,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":137,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":199,"org.easymock.tests2.DelegateToTest.testReturnException":412,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":398,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":499,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":508,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":325,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":409,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":418,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":101,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":223,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":340,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":434,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":185,"org.easymock.tests2.UsageConstraintsTest.testMatches":384,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":162,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":254,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":255,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":266,"org.easymock.tests.LimitationsTest.abstractClass":321,"org.easymock.tests2.UsageConstraintsTest.testNull":375,"org.easymock.tests2.EasyMockSupportClassTest.testAll":482,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":135,"org.easymock.tests2.UsageConstraintsTest.greaterThan":386,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":194,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":336,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":89,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":109,"org.easymock.tests.UsageExpectAndReturnTest.object":352,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":420,"org.easymock.tests2.DelegateToTest.testWrongClass":414,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":247,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":290,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":180,"org.easymock.samples.ExampleTest.voteAgainstRemoval":120,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":319,"org.easymock.tests.UsageVarargTest.varargShortAccepted":201,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":272,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":243,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":52,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":227,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":114,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":79,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":0,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":55,"org.easymock.tests2.NameTest.nameForMocksControl":33,"org.easymock.tests2.SerializationTest.testAllMockedMethod":423,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":281,"org.easymock.tests.MockingTest.testStrictClassMocking":209,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":138,"org.easymock.tests.ErrorMessageTest.testGetters":36,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":403,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":82,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":167,"org.easymock.tests.LimitationsTest.mockNativeMethod":323,"org.easymock.tests2.DelegateToTest.testStubDelegate":413,"org.easymock.tests.UsageUnorderedTest.message":22,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":132,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":258,"org.easymock.samples.ExampleTest.answerVsDelegate":118,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":171,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":295,"org.easymock.tests.UsageCallCountTest.tooFewCalls":305,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":351,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":447,"org.easymock.tests.UsageVerifyTest.twoReturns":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":85,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":5,"org.easymock.tests2.ThreadingTest.testChangeDefault":439,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":182,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":257,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":346,"org.easymock.tests2.DependencyTest.testInterfaceMocking":458,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":500,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":93,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":259,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":87,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":407,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":378,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":513,"org.easymock.tests.MockingTest.testTwoMocks":211,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":304,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":146,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":103,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":485,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":353,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":450,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":78,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":263,"org.easymock.tests.UsageThrowableTest.throwCheckedException":317,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":39,"org.easymock.samples.ExampleTest.voteForRemovals":122,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":315,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":383,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":297,"org.easymock.tests.ReplayStateInvalidUsageTest.times":338,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":95,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":131,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":486,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":471,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":150,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":245,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":343,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":364,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":44,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":246,"org.easymock.tests2.UsageConstraintsTest.any":380,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":350,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":249,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":507,"org.easymock.tests.LimitationsTest.privateConstructor":322,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":286,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":410,"org.easymock.tests2.CallbackTest.callback":424,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":292,"org.easymock.tests2.NameTest.nameForMock":30,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":252,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":3,"org.easymock.tests.MockNameTest.defaultName":341,"org.easymock.tests2.SerializationTest.test":422,"org.easymock.tests.UsageExpectAndReturnTest.longType":345,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":431,"org.easymock.tests2.CaptureTest.testCaptureFirst":110,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":285,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":193,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":388,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":92,"org.easymock.tests2.UsageTest.niceToStrict":397,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":165,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":170,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":235,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":186,"org.easymock.tests2.UsageTest.strictResetToDefault":396,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":481,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":479,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":91,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":173,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":349,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":404,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":461,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":473,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":195,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":387,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":470,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":97,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":215,"org.easymock.tests2.DelegateToTest.testDelegate":416,"org.easymock.tests2.UsageConstraintsTest.testNotNull":392,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":419,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":47,"org.easymock.tests2.CaptureTest.testCapture_2617107":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":261,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":339,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":49,"org.easymock.tests2.ThreadingTest.testThreadSafe":438,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":262,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":400,"org.easymock.tests.UsageThrowableTest.noUpperLimit":314,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":197,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":506,"org.easymock.tests.UsageExpectAndReturnTest.floatType":344,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":501,"org.easymock.tests2.UsageTest.wrongArguments":24,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":108,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":406,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":158,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":466,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":287,"org.easymock.samples.SupportTest.voteForRemovals":116,"org.easymock.tests.UsageRangeTest.combination":298,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":318,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":490,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":393,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":389,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":493,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":53,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":27,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":356,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":187,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":147,"org.easymock.tests.UsageExpectAndThrowTest.floatType":175,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":84,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":74,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":357,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":516,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":42,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":477,"org.easymock.tests.UsageTest.exactCallCountByLastCall":154,"org.easymock.tests2.AnswerTest.stubAnswer":448,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":88,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":277,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":288,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":484,"org.easymock.tests.MockingTest.testPartialClassMocking":212,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":358,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":25,"org.easymock.tests2.UsageConstraintsTest.constraints":371,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":34,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":405,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":368,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":282,"org.easymock.tests.UsageVarargTest.varargLongAccepted":202,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":233,"org.easymock.tests.ObjectMethodsTest.testHashCode":2,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":478,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":76,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":15,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":191,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":273,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":494,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":14,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":70,"org.easymock.tests2.DependencyTest.testClassMocking":456,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":160,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":226,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":240,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":51,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":503,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":155,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":370,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":462,"org.easymock.tests.DefaultClassInstantiatorTest.object":219,"org.easymock.tests.UsageVarargTest.differentLength":200,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":260,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":294,"org.easymock.tests2.CaptureTest.testCapture2_2446744":437,"org.easymock.tests.GenericTest.testPackageScope":326}}]

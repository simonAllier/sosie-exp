[{"transplant":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"this.org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"delegateTo"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[3,4,5,6],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[7,8,9],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[10,11,12,13],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"failures":[14],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"failures":[15,15,16,16,17],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:216","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:85","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object));\n} ","type":"CtIfImpl"},"failures":[18,19,20],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[21,22,23,24,25,26,27,28,29,30,31],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"arg"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[32],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"answer":"answer"}},{"transplant":{"position":"org.easymock.EasyMock:1519","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[15,15,16,16,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,11,13,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,27,67,68,28,69,70,71,72,73,74,75,76,77,78,79,80,81],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:95","sourceCode":"int = java.lang.Integer.int","type":"CtAssignmentImpl"},"failures":[82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"java.lang.Integer.MAX_VALUE":"max"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:357","sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:127","sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","type":"CtTryImpl"},"failures":[103,104],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[105,33,106,107,108,109,110,111,112,113,114,115,116,39,40,41,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,82,83,138,139,140,141,142,143,144,145,146,147,148,14,149,150,151,152,153,43,154,155,156,46,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,86,87,88,89,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,91,194,195,92,93,48,196,17,11,12,49,50,51,52,55,57,59,60,62,65,66,27,67,197,68,28,198,8,9,199,200,201,94,95,202,96,203,97,98,204,205,206,207,99,208,209,100,210,211,101,212,213,214,215,216,217,102,218,69,70,219,71,72,73,75,77,78,79,220,221,222,223,224,225,226,227,228,229,230,231,232,2,81],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:40","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[233],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:693","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","type":"CtReturnImpl"},"failures":[206],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[143,234,235,236,237,238,239,240,241,242,243,244,172,245,246,81,247],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.MockBuilder:178","failures":[36,60],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[10,11,12,13],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[106,248,107,108,249,109,250,251,252,253,254,255,256,257,258,259,260,110,261,111,113,262,39,40,41,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,263,137,83,264,265,142,144,145,146,266,267,268,269,148,42,236,237,238,239,240,241,14,149,150,151,152,153,270,271,272,273,274,275,84,276,277,278,43,44,155,156,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,46,157,158,47,85,166,299,300,301,302,303,86,87,88,89,304,305,90,172,185,306,188,189,190,307,193,91,308,195,93,309,48,310,311,312,313,196,314,17,315,316,317,318,319,11,12,13,53,57,58,66,27,68,28,198,8,200,201,94,95,202,96,203,97,98,204,205,206,207,99,208,209,100,210,211,101,212,213,214,216,217,102,218,69,219,71,72,73,75,76,78,221,222,223,224,320,321,226,227,228,229,231,322,2,323,245,246,81,247],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"failures":[324,139,141],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"returnedType"}},{"transplant":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[190],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"failures":[325],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1763","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"failures":[217],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Any:40","sourceCode":"java.lang.StringBuffer.append(\"<any>\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[110,261,111,113,326,327,328,3,4,137,82,83,159,189,329,330,331,195,92,93,332,333,334,335,336,337,338],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[339,340,221,222,223,224,225,320,321,226,228,341,229,342,230,231],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[343,15,16,344,105,33,345,106,248,107,108,249,109,346,250,34,35,347,348,349,251,252,253,350,254,255,351,256,257,258,259,260,352,324,110,261,111,112,113,353,326,114,115,327,328,116,3,4,262,36,354,355,356,357,37,358,359,360,361,38,39,40,362,41,363,364,365,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,366,263,367,137,368,82,83,264,265,138,139,140,369,141,370,142,143,144,145,234,371,146,147,372,373,374,375,376,377,378,379,7,235,380,266,267,268,269,381,5,382,383,6,148,384,42,236,237,238,239,240,241,14,149,150,151,152,153,270,271,272,273,385,242,243,274,275,84,276,277,278,386,387,388,389,43,44,45,390,154,155,156,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,391,392,46,393,157,158,159,18,47,394,395,396,19,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,244,428,160,0,161,429,430,431,432,433,434,435,436,162,163,437,164,438,439,440,441,442,443,444,445,446,20,447,448,449,165,85,166,167,168,169,170,171,450,451,452,453,454,299,300,301,302,303,86,87,88,89,304,455,305,90,172,173,174,175,176,177,178,179,180,181,182,183,184,456,457,458,185,186,306,187,188,189,329,190,307,191,192,193,330,331,91,194,459,308,195,460,92,93,309,48,21,32,310,311,312,313,196,461,462,314,17,315,316,317,318,319,11,12,13,463,464,465,49,466,467,50,468,469,470,471,472,473,474,475,476,51,477,478,479,480,481,52,482,483,53,55,56,484,57,58,59,60,485,486,61,62,64,487,65,66,27,67,488,197,68,28,29,198,489,8,9,199,200,201,94,95,202,490,96,203,97,98,204,205,491,206,207,99,208,209,100,210,211,101,212,213,214,215,216,217,102,218,69,70,219,71,72,73,74,492,75,493,494,76,77,78,79,495,496,497,498,499,500,501,220,502,503,504,505,506,507,508,509,510,511,512,513,221,222,223,224,225,320,321,226,227,228,229,342,230,231,514,515,516,517,518,232,519,520,521,522,523,524,1,322,2,525,526,323,103,527,528,529,104,530,245,246,81,247],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"in":"in"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[15,15,16,16,33,34,35,36,37,360,361,38,39,40,41,365,42,389,43,44,45,390,391,392,46,393,18,47,394,395,396,19,397,398,438,439,440,441,442,443,444,449,48,21,11,13,463,464,465,49,466,467,50,468,469,470,471,472,473,474,475,476,51,477,478,479,480,481,52,482,483,53,54,55,56,484,57,58,59,60,486,61,62,63,64,65,66,27,67,68,28,69,70,71,72,73,74,75,493,494,76,77,78,79,495,496,508,511,531,80,245,246,81],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"result"}},{"transplant":{"position":"org.easymock.EasyMock:612","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[1,526],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1927","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","type":"CtInvocationImpl"},"failures":[224],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[15,15,16,16,105,33,106,248,107,108,109,250,347,348,349,260,324,110,261,111,112,113,353,326,114,115,327,328,116,3,4,38,39,40,41,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,366,367,137,368,82,83,264,138,139,140,141,142,143,144,145,234,371,146,266,267,268,269,381,5,382,383,6,148,384,42,236,237,238,239,240,241,14,149,150,151,152,153,270,271,272,273,385,242,243,84,43,45,154,155,156,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,46,157,158,159,433,437,165,85,166,167,168,169,170,171,450,451,452,453,454,299,300,301,302,303,86,87,88,89,304,305,90,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,306,187,188,189,329,190,307,191,192,193,330,331,91,194,459,195,460,92,93,309,48,196,461,462,314,17,315,316,317,318,319,11,12,49,50,51,52,53,55,57,58,59,60,61,62,64,65,66,27,67,197,68,28,198,8,9,199,200,201,94,95,202,96,203,97,98,204,205,491,206,207,99,208,209,100,210,211,101,212,213,214,215,216,217,102,218,69,70,219,71,72,73,74,75,76,77,78,79,220,221,222,223,224,225,320,321,226,227,228,229,342,230,231,232,1,322,2,525,526,323,245,246,81,247],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"proxy"}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[261,112,115,143,234,371,383,236,237,238,239,240,241,156,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,165,166,167,168,169,170,171,172,187,192,245,246,81,247],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[371,90],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":202,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":112,"org.easymock.tests2.UsageTest.argumentsOrdered":331,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":183,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":502,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":0,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":307,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":345,"org.easymock.tests2.DelegateToTest.testReturnException":322,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":237,"org.easymock.tests.MockingTest.testPartialClassMocking":39,"org.easymock.tests.MockClassControlTest.testToString":394,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":32,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":141,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":496,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":436,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":471,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":50,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":279,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":186,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":420,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":205,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":144,"org.easymock.tests2.UsageTest.wrongArguments":329,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":524,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":268,"org.easymock.samples.ExampleTest.answerVsDelegate":248,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":37,"org.easymock.tests2.UsageConstraintsTest.testNull":203,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":364,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":71,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":398,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":182,"org.easymock.tests2.CaptureTest.testPrimitive":224,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":146,"org.easymock.tests.UsageTest.moreThanOneArgument":113,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":298,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":219,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":301,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":450,"org.easymock.tests.UsageTest.argumentsOrdered":328,"org.easymock.tests.UsageVarargTest.varargIntAccepted":253,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":432,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":337,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":14,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":53,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":510,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":506,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":58,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":423,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":152,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":404,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":334,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":232,"org.easymock.tests.ReplayStateInvalidUsageTest.times":379,"org.easymock.tests2.DependencyTest.testClassMocking":457,"org.easymock.tests2.AnswerTest.answer":196,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":491,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":434,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":319,"org.easymock.tests2.CaptureTest.testAnd":221,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":355,"org.easymock.tests2.UsageTest.strictResetToDefault":188,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":23,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":76,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":300,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":177,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":88,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":454,"org.easymock.tests2.DelegateToTest.testDelegate":323,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":403,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":294,"org.easymock.tests.LimitationsTest.mockFinalMethod":393,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":240,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":273,"org.easymock.tests2.DependencyTest.testClassMockingSupport":458,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":3,"org.easymock.tests2.CaptureTest.testCapture1_2446744":225,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":492,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":292,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":317,"org.easymock.tests.UsageThrowableTest.throwError":165,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":373,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":357,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":507,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":303,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":483,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":407,"org.easymock.samples.PartialClassMockTest.testGetArea":33,"org.easymock.tests.MockingTest.testInterfaceMocking":362,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":374,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":149,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":139,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":472,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":449,"org.easymock.tests2.UsageTest.niceToStrict":190,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":280,"org.easymock.tests2.ThreadingTest.testChangeDefault":489,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":421,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":57,"org.easymock.tests2.MockBuilderTest.testCreateMock":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":479,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":521,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":288,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":178,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":354,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":349,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":274,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":266,"org.easymock.tests.UsageOverloadedMethodTest.overloading":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":481,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":476,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":209,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":383,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":154,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":128,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":208,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":228,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":350,"org.easymock.tests.MockClassControlTest.testEquals":397,"org.easymock.tests2.EasyMockSupportClassTest.testAll":49,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":44,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":296,"org.easymock.tests2.CaptureTest.testCaptureAll":222,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":271,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":318,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":325,"org.easymock.tests.MockNameTest.defaultName":352,"org.easymock.tests2.UsageConstraintsTest.testMatches":100,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":147,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":302,"org.easymock.samples.ExampleTest.voteForRemovals":109,"org.easymock.tests.UsageVarargTest.allKinds":260,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":110,"org.easymock.samples.BasicClassMockTest.testPrintContent":35,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":272,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":170,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":459,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":526,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":503,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":241,"org.easymock.tests2.UsageConstraintsTest.greaterThan":211,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":466,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":87,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":79,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":408,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":444,"org.easymock.samples.ExampleTest.voteForRemoval":107,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":495,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":8,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":358,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":74,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":400,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":187,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":42,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":486,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":244,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":175,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":166,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":464,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":236,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":1,"org.easymock.tests2.CaptureTest.testCaptureFirst":231,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":427,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":176,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":194,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":384,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":124,"org.easymock.tests2.UsageTest.moreThanOneArgument":189,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":199,"org.easymock.tests2.CaptureTest.testCapture2_2446744":230,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":435,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":62,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":259,"org.easymock.tests.GenericTest.testBridgedEquals":390,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":387,"org.easymock.tests.UsageExpectAndReturnTest.longType":120,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":173,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":153,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":63,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":297,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":215,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":324,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":295,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":242,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":299,"org.easymock.tests.UsageCallCountTest.tooManyCalls":388,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":84,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":480,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":125,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":523,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":284,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":169,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":66,"org.easymock.tests.MockingTest.testNiceClassMocking":365,"org.easymock.tests.MockingTest.testClassMocking":361,"org.easymock.tests2.UsageConstraintsTest.testContains":99,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":54,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":275,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":81,"org.easymock.tests2.UsageConstraintsTest.testFind":96,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":156,"org.easymock.tests.MockTypeTest.fromEasyMockClass":356,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":305,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":366,"org.easymock.tests.UsageExpectAndReturnTest.object":127,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":75,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":522,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":181,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":255,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":447,"org.easymock.tests.UsageTest.exactCallCountByLastCall":116,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":142,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":426,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":451,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":369,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":21,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":133,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":251,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":382,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":498,"org.easymock.tests.MockClassControlTest.testHashCode":19,"org.easymock.tests2.EasyMockSupportTest.testVerify":456,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":474,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":452,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":348,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":381,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":316,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":487,"org.easymock.tests.UsageVarargTest.varargCharAccepted":254,"org.easymock.tests2.CaptureTest.testCaptureMultiple":340,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":308,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":164,"org.easymock.tests2.UsageTest.openCallCountByLastCall":191,"org.easymock.tests.DefaultClassInstantiatorTest.object":438,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":184,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":347,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":446,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":475,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":286,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":167,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":517,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":497,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":406,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":396,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":77,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":285,"org.easymock.tests.CapturesMatcherTest.test":339,"org.easymock.tests.ReplayStateInvalidCallsTest.times":412,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":134,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":385,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":413,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":52,"org.easymock.tests2.UsageTest.resumeIfFailure":91,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":36,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":509,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":239,"org.easymock.tests2.StubTest.stubWithReturnValue":172,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":24,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":126,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":216,"org.easymock.tests2.SerializationTest.testAllMockedMethod":13,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":433,"org.easymock.samples.SupportTest.voteForRemovals":105,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":336,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":389,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":500,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":291,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":10,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":437,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":461,"org.easymock.tests.UsageExpectAndThrowTest.object":289,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":370,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":213,"org.easymock.tests2.DelegateToTest.testWrongClass":525,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":410,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":157,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":158,"org.easymock.samples.ConstructorCalledMockTest.testTax":15,"org.easymock.tests.UsageStrictMockTest.range":82,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":512,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":180,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":65,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":290,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":59,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":463,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":235,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":327,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":267,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":402,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":140,"org.easymock.tests2.CaptureTest.testCaptureNone":227,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":527,"org.easymock.tests.UsageUnorderedTest.message":159,"org.easymock.tests.UsageVerifyTest.twoReturns":111,"org.easymock.tests.UsageVarargTest.varargByteAccepted":258,"org.easymock.tests2.ThreadingTest.testThreadSafe":198,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":477,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":278,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":448,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":34,"org.easymock.tests2.CaptureTest.testCapture_2617107":223,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":338,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":262,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":162,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":371,"org.easymock.tests2.UsageConstraintsTest.any":206,"org.easymock.tests2.StubTest.stub":90,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":378,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":243,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":163,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":238,"org.easymock.tests.UsageExpectAndThrowTest.longType":282,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":442,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":377,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":460,"org.easymock.tests2.SerializationTest.testClass":11,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":220,"org.easymock.tests.LimitationsTest.mockNativeMethod":46,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":136,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":45,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":516,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":418,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":309,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":528,"org.easymock.tests2.NameTest.nameForMocksControl":313,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":518,"org.easymock.tests2.MockedExceptionTest.testMockedException":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":467,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":115,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":455,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":41,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":283,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":69,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":60,"org.easymock.tests.MockingTest.testNicePartialClassMocking":40,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":73,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":514,"org.easymock.tests2.CaptureTest.testCaptureLast":226,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":4,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":417,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":28,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":204,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":214,"org.easymock.tests.MockingTest.testTwoMocks":38,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":414,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":29,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":117,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":287,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":330,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":102,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":530,"org.easymock.samples.ExampleTest.removeNonExistingDocument":346,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":520,"org.easymock.tests.UsageStrictMockTest.differentMethods":83,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":375,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":499,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":440,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":104,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":9,"org.easymock.tests2.ConstraintsToStringTest.andToString":335,"org.easymock.tests2.MockBuilderTest.testCreateMockString":64,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":18,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":468,"org.easymock.tests.UsageExpectAndThrowTest.floatType":281,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":210,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":465,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":314,"org.easymock.tests.UsageVerifyTest.twoThrows":261,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":51,"org.easymock.samples.ExampleTest.voteAgainstRemoval":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":161,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":138,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":78,"org.easymock.tests.LimitationsTest.privateConstructor":392,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":31,"org.easymock.tests2.UsageConstraintsTest.testNotNull":217,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":171,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":245,"org.easymock.tests2.UsageTest.defaultResetToNice":193,"org.easymock.samples.ExampleTest.voteAgainstRemovals":106,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":429,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":132,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":515,"org.easymock.tests.UsageVarargTest.differentLength":351,"org.easymock.tests2.CallbackTest.callback":306,"org.easymock.tests2.UsageConstraintsTest.equals":490,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":493,"org.easymock.tests.UsageTest.openCallCountByLastCall":114,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":201,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":234,"org.easymock.tests.UsageCallCountTest.tooFewCalls":276,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":67,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":269,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":529,"org.easymock.tests.UsageThrowableTest.throwCheckedException":168,"org.easymock.tests.MockingTest.testStrictClassMocking":360,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":143,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":68,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":519,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":27,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":7,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":197,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":315,"org.easymock.tests.ObjectMethodsTest.testHashCode":20,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":416,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":200,"org.easymock.tests2.NameTest.nameForNiceMock":312,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":411,"org.easymock.tests2.DependencyTest.testInterfaceMocking":185,"org.easymock.samples.ExampleTest.addDocument":249,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":478,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":482,"org.easymock.tests2.DelegateToTest.testStubDelegate":2,"org.easymock.tests2.AnswerTest.stubAnswer":17,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":137,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":485,"org.easymock.tests.UsageVarargTest.varargLongAccepted":257,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":264,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":160,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":135,"org.easymock.tests.UsageExpectAndReturnTest.floatType":119,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":48,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":16,"org.easymock.tests2.ConstraintsToStringTest.orToString":332,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":505,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":101,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":6,"org.easymock.tests.UsageThrowableTest.noUpperLimit":85,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":94,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":508,"org.easymock.tests2.SerializationTest.test":12,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":320,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":439,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":118,"org.easymock.tests2.UsageConstraintsTest.testSame":97,"org.easymock.samples.SupportTest.addDocument":344,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":488,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":401,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":376,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":469,"org.easymock.tests.GenericTest.testPackageScope":43,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":453,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":425,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":504,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":363,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":399,"org.easymock.tests2.NameTest.nameForMock":310,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":129,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":26,"org.easymock.tests2.UsageStrictMockTest.differentMethods":93,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":494,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":121,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":293,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":445,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":89,"org.easymock.tests2.MockedExceptionTest.testRealException":247,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":359,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":513,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":431,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":430,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":195,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":145,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":380,"org.easymock.tests2.NameTest.nameForStrictMock":311,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":484,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":304,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":72,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":511,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":441,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":212,"org.easymock.tests.ErrorMessageTest.testGetters":233,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":55,"org.easymock.tests2.UsageStrictMockTest.range":92,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":405,"org.easymock.tests2.UsageConstraintsTest.lessThan":218,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":531,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":501,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":428,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":174,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":473,"org.easymock.tests2.CaptureTest.testCaptureRightOne":229,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":103,"org.easymock.tests2.UsageConstraintsTest.testOr":98,"org.easymock.tests.UsageRangeTest.combination":86,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":70,"org.easymock.tests.UsageTest.wrongArguments":326,"org.easymock.tests2.MockBuilderTest.testWithConstructor":22,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":470,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":47,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":122,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":422,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":130,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":443,"org.easymock.tests.UsageVarargTest.varargShortAccepted":256,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":386,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":419,"org.easymock.tests2.UsageConstraintsTest.cmpTo":207,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":462,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":409,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":424,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":192,"org.easymock.tests2.CaptureTest.testCaptureFromStub":342,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":372,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":56,"org.easymock.tests.UsageTest.unexpectedCallWithArray":353,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":415,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":367,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":277,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":25,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":131,"org.easymock.tests2.CaptureTest.testCapture":341,"org.easymock.tests2.UsageConstraintsTest.constraints":95,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":368,"org.easymock.samples.ExampleTest.addAndChangeDocument":250,"org.easymock.tests2.ConstraintsToStringTest.notToString":333,"org.easymock.tests.UsageStrictMockTest.testVerify":265,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":343,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":263,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":270,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":321,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":150,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":80,"org.easymock.tests.LimitationsTest.abstractClass":391,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":123,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":151,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":148,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":179,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":252}}]

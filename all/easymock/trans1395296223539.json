[{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:53","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:747","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[290],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:106","failures":[291,292,293,294,294,295,295,25,296,297,63,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,125,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,226,342,343,344],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:194","sourceCode":"try {\n    java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"mockClass"}},{"position":"org.easymock.EasyMock:1531","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[44,50,62,345],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:60","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.ArrayList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:226","sourceCode":"try {\n    net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"failures":[33,264],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:933","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[294,295,25,297,346,347,299,302,348,349,350,351,303,352,353,304,354,355,356,357,358,359,360,361,362,305,363,364,365,366,367,306,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"this"}},{"transplant":{"position":"org.easymock.EasyMock:681","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[88],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:633","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:53","sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"o":"actual","this":"expected"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:356","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"position":"org.easymock.internal.Range:40","failures":[291,0,1,2,3,4,5,6,383,7,8,9,292,293,10,294,295,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,296,27,28,29,30,31,32,33,34,297,346,384,35,36,37,38,385,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,386,387,388,389,390,391,392,63,298,299,300,393,64,301,302,348,65,66,67,68,69,70,394,395,396,397,398,71,399,400,401,402,403,404,349,350,351,303,352,353,304,354,355,356,357,358,359,360,361,362,305,363,364,365,366,367,306,368,369,72,73,74,75,76,77,78,79,80,81,82,83,84,405,307,308,85,309,310,311,312,406,313,407,408,314,315,316,317,409,410,86,87,88,89,90,91,92,93,94,95,96,97,411,412,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,413,113,114,115,116,117,118,119,120,121,414,415,416,417,418,122,419,420,421,422,423,424,123,124,125,126,322,378,324,325,379,425,326,327,328,380,329,426,381,330,331,382,333,127,427,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,334,428,429,430,431,335,432,433,434,158,435,436,437,438,439,440,441,442,443,336,444,159,160,161,445,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,337,446,447,448,449,450,451,177,178,179,180,181,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,182,468,469,470,471,472,183,473,184,185,186,187,188,189,190,191,192,193,194,195,196,197,474,475,338,339,340,476,341,477,478,479,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,480,481,214,482,215,216,217,218,219,220,221,222,223,224,225,483,226,342,343,484,344,227,228,229,230,231,232,233,234,235,485,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,486,487,488,489,490,491,492,493,494,495,496,497,498,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,499,289,500,501,502,503,504],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:50","failures":[294,295,25,297,346,299,302,348,349,350,351,303,352,353,304,354,355,356,357,358,359,360,361,362,305,363,364,365,366,367,306,368,369,370,371,505,378,379,380,381,506,382],"status":-1,"binaryOperator":"(java.lang.Object[].int) != (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:117","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:162","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[66],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[291,0,1,2,3,4,5,6,383,7,8,9,292,293,10,294,294,295,295,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,296,27,28,29,30,31,32,33,34,297,346,35,36,37,38,385,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,386,390,391,392,299,300,64,301,65,66,67,68,69,70,394,395,396,397,398,71,399,400,401,402,403,404,349,303,353,304,355,356,359,360,361,362,305,364,367,306,368,369,72,73,74,75,76,77,78,79,80,81,82,83,84,405,307,308,85,309,310,311,312,313,407,408,314,315,316,317,409,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,107,109,110,111,112,413,117,118,119,120,121,414,415,416,417,418,122,419,420,421,422,423,424,123,124,125,126,324,425,326,327,328,381,330,127,427,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,430,335,433,158,435,436,437,438,439,441,442,443,336,444,159,160,161,445,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,337,446,447,448,449,450,451,177,178,179,180,181,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,182,468,469,470,471,472,183,473,184,185,186,187,188,189,190,191,192,193,194,195,196,197,474,475,338,339,340,476,341,477,478,479,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,481,214,482,215,216,217,218,219,220,221,222,223,224,225,483,226,342,343,484,344,227,228,229,230,231,232,233,234,235,485,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,486,487,488,489,490,491,492,493,494,495,496,497,498,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,499,289,500,501,502,503,504],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:318","failures":[149,152],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[52,507,508,509,510],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:49","sourceCode":"org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[1,2,3,4,5,6,7,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,296,28,29,30,32,33,34,297,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,298,299,301,302,65,68,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,307,308,85,309,310,311,312,313,314,316,86,87,88,89,90,92,93,94,95,96,97,98,117,118,119,120,121,123,124,125,126,322,326,327,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,336,159,160,161,162,163,165,166,167,168,169,170,171,172,173,174,175,177,178,179,180,181,184,185,187,188,189,190,191,192,193,194,195,196,197,339,340,341,198,200,201,202,203,204,205,206,207,208,209,210,215,216,218,219,220,221,222,223,224,226,342,344,227,228,229,236,237,238,239,241,242,243,244,245,246,248,249,251,260,491,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[43,44],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[88,496],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[2,65,67,68,70,117,127,128,465,246],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:30","sourceCode":"new java.util.HashMap<java.lang.String, java.lang.Class<?>>(10)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:64","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Float.java.lang.Class<java.lang.Float>, java.lang.Float.java.lang.Float)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:181","failures":[25,346,511,512,513,514,515,516,517,380],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:60","sourceCode":"this.java.util.List<T>.clear()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[518,11,13,14,15,16,17,18,20,519,21,22,24],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"position":"org.easymock.internal.LastControl:85","failures":[40,45,55,60],"status":-1,"binaryOperator":"(java.util.Stack<org.easymock.IArgumentMatcher> != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[291,0,1,2,3,4,5,6,7,8,9,292,293,10,294,295,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,296,28,29,30,32,33,34,297,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,298,299,300,64,301,302,65,68,69,70,71,303,304,305,306,72,73,74,75,76,77,78,79,80,81,82,83,84,307,308,85,309,310,311,312,313,314,315,316,317,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,117,118,119,120,121,122,123,124,125,126,322,324,326,327,328,329,330,331,333,127,427,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,336,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,177,178,179,180,181,184,185,186,187,188,189,190,191,192,193,194,195,196,197,339,340,341,198,200,201,202,203,204,205,206,207,208,209,210,215,216,217,218,219,220,221,222,223,224,226,342,344,227,228,229,236,237,238,239,240,241,242,243,244,245,246,248,249,252,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"failures":[520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,487,488,489,490,491,493,494,495,496,497,498],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.CompareEqual:39","failures":[47,542,313],"status":-1,"binaryOperator":"int == 0","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:120","sourceCode":"java.util.List<T>.add(T)","type":"CtInvocationImpl"},"failures":[11,13,14,15,16,17,18,20,519,21],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:323","sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[212,257],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:89","sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[543],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[309,311,93,95,96,219,220,222,223,225],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Equals:53","failures":[385,81,190],"status":-1,"binaryOperator":"(java.lang.Object == null)","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":38,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":184,"org.easymock.tests2.UsageTest.argumentsOrdered":82,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":110,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":419,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":462,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":77,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":0,"org.easymock.tests2.DelegateToTest.testReturnException":28,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":171,"org.easymock.tests.MockingTest.testPartialClassMocking":339,"org.easymock.tests.MockClassControlTest.testToString":446,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":413,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":214,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":470,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":410,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":357,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":266,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":304,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":99,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":541,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":512,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":44,"org.easymock.tests2.UsageTest.wrongArguments":75,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":261,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":404,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":204,"org.easymock.samples.ExampleTest.answerVsDelegate":2,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":335,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":478,"org.easymock.tests2.UsageConstraintsTest.testNull":40,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":309,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":451,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":109,"org.easymock.tests2.CaptureTest.testPrimitive":14,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":265,"org.easymock.tests.UsageTest.moreThanOneArgument":185,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":285,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":85,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":179,"org.easymock.tests.UsageTest.argumentsOrdered":191,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":230,"org.easymock.tests.UsageVarargTest.varargIntAccepted":161,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":467,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":206,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":516,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":322,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":423,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":388,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":454,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":210,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":525,"org.easymock.tests.ReplayStateInvalidUsageTest.times":495,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":71,"org.easymock.tests2.DependencyTest.testClassMocking":411,"org.easymock.tests2.AnswerTest.answer":65,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":45,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":468,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":121,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":429,"org.easymock.tests2.CaptureTest.testAnd":11,"org.easymock.tests2.UsageTest.strictResetToDefault":73,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":314,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":379,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":178,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":104,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":200,"org.easymock.tests2.DelegateToTest.testDelegate":32,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":234,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":524,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":281,"org.easymock.tests.LimitationsTest.mockFinalMethod":444,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":174,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":197,"org.easymock.tests2.DependencyTest.testClassMockingSupport":412,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":259,"org.easymock.tests2.CaptureTest.testCapture1_2446744":15,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":406,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":279,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":119,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":489,"org.easymock.tests.UsageThrowableTest.throwError":149,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":431,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":480,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":424,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":181,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":370,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":369,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":528,"org.easymock.samples.PartialClassMockTest.testGetArea":291,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":490,"org.easymock.tests.MockingTest.testInterfaceMocking":476,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":207,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":254,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":503,"org.easymock.tests2.UsageTest.niceToStrict":76,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":267,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":358,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":452,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":377,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":326,"org.easymock.tests2.MockBuilderTest.testCreateMock":330,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":365,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":401,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":507,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":275,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":105,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":428,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":258,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":235,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":202,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":374,"org.easymock.tests.UsageOverloadedMethodTest.overloading":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":362,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":367,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":50,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":249,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":140,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":227,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":49,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":20,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":445,"org.easymock.tests.MockClassControlTest.testEquals":450,"org.easymock.tests2.EasyMockSupportClassTest.testAll":303,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":342,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":283,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":318,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":120,"org.easymock.tests2.CaptureTest.testCaptureAll":12,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":195,"org.easymock.tests.MockNameTest.defaultName":504,"org.easymock.tests2.UsageConstraintsTest.testMatches":51,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":487,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":180,"org.easymock.samples.ExampleTest.voteForRemovals":6,"org.easymock.tests.UsageVarargTest.allKinds":169,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":243,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":196,"org.easymock.samples.BasicClassMockTest.testPrintContent":293,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":155,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":91,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":420,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":175,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":31,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":517,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":440,"org.easymock.tests2.UsageConstraintsTest.greaterThan":53,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":352,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":199,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":317,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":529,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":441,"org.easymock.samples.ExampleTest.voteForRemoval":3,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":409,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":87,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":432,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":389,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":312,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":521,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":72,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":344,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":381,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":459,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":102,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":151,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":350,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":170,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":27,"org.easymock.tests2.CaptureTest.testCaptureFirst":24,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":458,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":103,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":84,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":252,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":136,"org.easymock.tests2.CaptureTest.testCapture2_2446744":23,"org.easymock.tests2.UsageTest.moreThanOneArgument":74,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":89,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":469,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":331,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":168,"org.easymock.tests.GenericTest.testBridgedEquals":484,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":375,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":241,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":372,"org.easymock.tests.UsageExpectAndReturnTest.longType":132,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":100,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":193,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":284,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":332,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":58,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":288,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":282,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":177,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":212,"org.easymock.tests.UsageCallCountTest.tooManyCalls":242,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":236,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":366,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":137,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":403,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":271,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":154,"org.easymock.tests.MockingTest.testNiceClassMocking":479,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":298,"org.easymock.tests.MockingTest.testClassMocking":475,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":485,"org.easymock.tests2.UsageConstraintsTest.testContains":48,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":323,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":125,"org.easymock.tests2.UsageConstraintsTest.testFind":39,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":229,"org.easymock.tests.MockTypeTest.fromEasyMockClass":430,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":128,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":217,"org.easymock.tests.UsageExpectAndReturnTest.object":139,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":313,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":402,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":108,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":513,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":163,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":501,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":505,"org.easymock.tests.UsageTest.exactCallCountByLastCall":192,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":376,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":215,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":457,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":481,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":231,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":346,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":159,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":145,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":248,"org.easymock.tests.MockClassControlTest.testHashCode":449,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":415,"org.easymock.tests2.EasyMockSupportTest.testVerify":112,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":360,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":232,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":246,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":257,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":118,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":405,"org.easymock.tests.UsageVarargTest.varargCharAccepted":162,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":434,"org.easymock.tests2.CaptureTest.testCaptureMultiple":518,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":92,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":473,"org.easymock.tests2.UsageTest.openCallCountByLastCall":78,"org.easymock.tests.DefaultClassInstantiatorTest.object":158,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":111,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":256,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":289,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":273,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":361,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":152,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":321,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":397,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":414,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":527,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":448,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":315,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":272,"org.easymock.tests.ReplayStateInvalidCallsTest.times":533,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":146,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":211,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":534,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":447,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":306,"org.easymock.tests2.UsageTest.resumeIfFailure":83,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":334,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":387,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":173,"org.easymock.tests2.StubTest.stubWithReturnValue":34,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":380,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":138,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":59,"org.easymock.tests2.SerializationTest.testAllMockedMethod":296,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":182,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":508,"org.easymock.samples.SupportTest.voteForRemovals":9,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":483,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":417,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":278,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":183,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":66,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":482,"org.easymock.tests.UsageExpectAndThrowTest.object":276,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":56,"org.easymock.tests2.DelegateToTest.testWrongClass":30,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":531,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":286,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":287,"org.easymock.tests.UsageStrictMockTest.range":222,"org.easymock.samples.ConstructorCalledMockTest.testTax":294,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":391,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":107,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":63,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":373,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":277,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":328,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":497,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":190,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":349,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":203,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":523,"org.easymock.tests2.CaptureTest.testCaptureNone":19,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":255,"org.easymock.tests.UsageUnorderedTest.message":157,"org.easymock.tests.UsageVerifyTest.twoReturns":245,"org.easymock.tests.UsageVarargTest.varargByteAccepted":167,"org.easymock.tests2.ThreadingTest.testThreadSafe":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":363,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":239,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":502,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":292,"org.easymock.tests2.CaptureTest.testCapture_2617107":13,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":486,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":471,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":264,"org.easymock.tests2.UsageConstraintsTest.any":46,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":494,"org.easymock.tests2.StubTest.stub":33,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":213,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":472,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":172,"org.easymock.tests.UsageExpectAndThrowTest.longType":269,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":438,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":493,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":94,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":122,"org.easymock.tests2.SerializationTest.testClass":25,"org.easymock.tests.LimitationsTest.mockNativeMethod":336,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":148,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":343,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":396,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":320,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":539,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":97,"org.easymock.tests2.NameTest.nameForMocksControl":116,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":290,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":398,"org.easymock.tests2.MockedExceptionTest.testMockedException":124,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":353,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":189,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":427,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":270,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":341,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":307,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":329,"org.easymock.tests.MockingTest.testNicePartialClassMocking":340,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":311,"org.easymock.tests2.CompareToTest.testCompareEqual":542,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":511,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":394,"org.easymock.tests2.CaptureTest.testCaptureLast":18,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":260,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":538,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":43,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":302,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":57,"org.easymock.tests.MockingTest.testTwoMocks":338,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":535,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":348,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":129,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":274,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":81,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":61,"org.easymock.samples.ExampleTest.removeNonExistingDocument":383,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":491,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":400,"org.easymock.tests.UsageStrictMockTest.differentMethods":223,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":416,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":436,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":88,"org.easymock.tests2.MockBuilderTest.testCreateMockString":333,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":176,"org.easymock.tests.UsageExpectAndThrowTest.floatType":268,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":354,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":52,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":351,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":68,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":384,"org.easymock.tests.UsageVerifyTest.twoThrows":244,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":305,"org.easymock.samples.ExampleTest.voteAgainstRemoval":4,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":463,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":253,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":316,"org.easymock.tests.LimitationsTest.privateConstructor":443,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":371,"org.easymock.tests2.UsageConstraintsTest.testNotNull":60,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":156,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":123,"org.easymock.tests2.UsageTest.defaultResetToNice":80,"org.easymock.samples.ExampleTest.voteAgainstRemovals":1,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":464,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":144,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":395,"org.easymock.tests.UsageVarargTest.differentLength":164,"org.easymock.tests2.CallbackTest.callback":117,"org.easymock.tests2.UsageConstraintsTest.equals":385,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":510,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":407,"org.easymock.tests.UsageTest.openCallCountByLastCall":188,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":35,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":263,"org.easymock.tests.UsageCallCountTest.tooFewCalls":237,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":300,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":205,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":543,"org.easymock.tests.UsageThrowableTest.throwCheckedException":153,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":509,"org.easymock.tests.MockingTest.testStrictClassMocking":474,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":216,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":301,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":399,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":299,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":496,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":64,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":70,"org.easymock.tests.ObjectMethodsTest.testHashCode":500,"org.easymock.tests2.CompareToTest.testGreateOrEqual":345,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":515,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":537,"org.easymock.tests2.NameTest.nameForNiceMock":115,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":90,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":532,"org.easymock.tests2.DependencyTest.testInterfaceMocking":98,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":514,"org.easymock.samples.ExampleTest.addDocument":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":364,"org.easymock.tests2.DelegateToTest.testStubDelegate":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":368,"org.easymock.tests2.AnswerTest.stubAnswer":69,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":220,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":426,"org.easymock.tests.UsageVarargTest.varargLongAccepted":166,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":224,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":461,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":147,"org.easymock.tests.UsageExpectAndReturnTest.floatType":131,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":297,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":295,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":422,"org.easymock.tests.UsageThrowableTest.noUpperLimit":150,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":54,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":250,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":36,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":386,"org.easymock.tests2.SerializationTest.test":26,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":16,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":435,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":130,"org.easymock.tests2.UsageConstraintsTest.testSame":41,"org.easymock.samples.SupportTest.addDocument":8,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":393,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":522,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":492,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":355,"org.easymock.tests.GenericTest.testPackageScope":226,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":233,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":456,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":421,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":477,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":520,"org.easymock.tests2.NameTest.nameForMock":113,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":141,"org.easymock.tests2.UsageStrictMockTest.differentMethods":96,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":382,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":408,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":133,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":280,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":499,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":201,"org.easymock.tests2.MockedExceptionTest.testRealException":126,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":433,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":466,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":392,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":465,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":93,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":498,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":262,"org.easymock.tests2.NameTest.nameForStrictMock":114,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":425,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":127,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":347,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":310,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":390,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":437,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":55,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":324,"org.easymock.tests2.UsageStrictMockTest.range":95,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":526,"org.easymock.tests2.UsageConstraintsTest.lessThan":62,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":418,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":460,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":101,"org.easymock.tests2.CaptureTest.testCaptureRightOne":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":359,"org.easymock.tests2.UsageConstraintsTest.testOr":42,"org.easymock.tests.UsageRangeTest.combination":198,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":308,"org.easymock.tests.UsageTest.wrongArguments":187,"org.easymock.tests2.MockBuilderTest.testWithConstructor":378,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":356,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":337,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":134,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":453,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":142,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":439,"org.easymock.tests.UsageVarargTest.varargShortAccepted":165,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":240,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":540,"org.easymock.tests2.UsageConstraintsTest.cmpTo":47,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":67,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":530,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":455,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":79,"org.easymock.tests2.CaptureTest.testCaptureFromStub":22,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":488,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":325,"org.easymock.tests.UsageTest.unexpectedCallWithArray":186,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":536,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":219,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":238,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":506,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":143,"org.easymock.tests2.CaptureTest.testCapture":519,"org.easymock.tests2.UsageConstraintsTest.constraints":37,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":221,"org.easymock.samples.ExampleTest.addAndChangeDocument":7,"org.easymock.tests.UsageStrictMockTest.testVerify":225,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":10,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":218,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":194,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":17,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":208,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":319,"org.easymock.tests.LimitationsTest.abstractClass":442,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":135,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":209,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":251,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":160,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":106}}]

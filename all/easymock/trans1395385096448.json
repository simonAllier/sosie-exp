[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"returnedType"}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[249,250,251,252,253,254],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[7,7,8,8,10,14,15,255,256,70,257,72,73,74,258,75,259,260,76,261,77,262,263,264,78,265,95,266,267,268,269,96,97,98,99,270,271,272,273,274,106,107,108,111,112,113,114,116,117,118,120,275,276,277,121,278,279,122,280,281,282,283,284,285,286,287,288,123,289,290,291,292,293,124,294,295,296,297,298,299,300,301,139,140,302,303,304,305,306,307,308,309,310,311,312,313,186,187,188,314,315,316,317,318,319,191,320,321,198,322,323,324,325,326,327,215],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:117","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[328,329],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,330,6,7,7,8,8,9,10,11,12,13,14,15,331,332,16,17,255,256,333,334,18,335,19,336,20,21,337,338,22,23,24,25,26,27,339,340,341,342,343,28,344,345,346,347,348,349,29,30,31,32,350,33,34,35,36,37,38,351,39,40,41,42,43,44,45,46,47,48,49,50,352,51,52,53,54,55,56,57,58,353,59,60,61,62,63,64,354,355,65,66,356,357,67,68,69,358,70,257,71,72,73,74,258,359,75,259,260,76,261,77,262,263,264,78,265,360,79,80,361,362,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,363,267,268,364,269,96,97,98,365,99,270,271,272,366,274,367,100,101,368,102,103,369,370,104,371,372,105,373,106,107,108,109,374,375,376,377,378,110,379,380,381,382,383,384,111,112,113,114,115,116,117,118,119,120,275,276,277,121,278,279,122,280,281,282,283,284,285,286,287,288,123,289,290,291,292,293,124,294,295,385,125,126,127,128,386,129,130,387,388,131,132,133,134,135,136,137,138,301,139,140,302,303,141,142,143,144,145,389,304,305,306,307,308,309,390,310,391,146,251,147,392,393,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,394,395,396,181,182,183,184,397,398,399,185,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,311,312,313,186,187,424,188,425,426,314,427,428,429,430,189,190,431,432,433,434,435,315,316,436,437,317,438,439,318,319,191,320,192,193,194,195,196,197,440,441,442,443,328,444,445,446,447,448,449,450,451,452,329,321,198,322,323,324,325,326,327,453,454,455,456,199,254,457,458,459,460,461,462,200,201,202,463,203,204,464,205,206,207,208,209,210,211,212,213,214,465,466,215,216,217,467,468,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,469,470,246,247,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,248,489],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:141","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[490],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:191","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:159","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:74","sourceCode":"java.lang.Object = java.lang.reflect.Field.get(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"f":"f"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:67","sourceCode":"return !(java.util.List<T>.isEmpty())","type":"CtReturnImpl"},"failures":[62,491,64,65],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:51","sourceCode":"java.lang.StringBuffer.append(\", \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[492,493,494],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[48,49],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:36","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[338,393,182,183,495,469],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"failures":[496],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"failures":[38,43,54,497],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:41","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[100],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1333","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[32,33],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:169","sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"failures":[337,338,45,367,373,132,392,393,177,182,183,441,442,456,462,498,499,469],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer","m":"this"}},{"transplant":{"position":"org.easymock.internal.Invocation:126","sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"actual","myArgument":"actual"}},{"transplant":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"failures":[210],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.Capture:120","sourceCode":"java.util.List<T>.add(T)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[61,62,63,65],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[68,69],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[34,351,48,52],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[7,7,8,8,10,14,15,70,257,72,73,74,258,75,76,261,77,262,78,95,266,267,268,96,97,98,99,271,272,273,274,108,111,112,113,114,116,117,118,120,121,122,123,124,296,298,299,139,140,302,313,186,187,188,316,317,191,198,215],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[265,363,364,365,500,366,501,502,113,117,503],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"method":"result"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[301],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Not:40","sourceCode":"java.lang.StringBuffer.append(\"not(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[504],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[104],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[18,335],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[263,361],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:310","sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","type":"CtReturnImpl"},"failures":[0,2,3,5,7,7,8,8,10,13,16,17,21,338,22,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,353,61,62,63,64,354,355,65,66,68,70,257,71,72,73,74,75,261,77,262,78,79,80,361,362,81,82,83,84,85,86,87,88,89,90,91,92,93,267,96,98,99,272,367,100,101,102,369,370,104,105,373,108,110,111,112,113,114,115,116,117,118,119,121,122,123,124,130,134,139,302,141,142,143,144,145,147,393,148,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,177,178,179,180,395,181,183,184,398,399,416,422,186,187,188,428,429,430,189,190,191,456,199,458,459,462,210,211,212,213,214,465,216,217,218,219,220,470,247,471,472,473,474,475,248],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":32,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":456,"org.easymock.tests2.UsageTest.argumentsOrdered":372,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":92,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":379,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":410,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":103,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":11,"org.easymock.tests2.DelegateToTest.testReturnException":129,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":172,"org.easymock.tests.MockingTest.testPartialClassMocking":186,"org.easymock.tests.MockClassControlTest.testToString":322,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":385,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":395,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":419,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":283,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":122,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":226,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":17,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":38,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":216,"org.easymock.tests2.UsageTest.wrongArguments":368,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":349,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":137,"org.easymock.samples.ExampleTest.answerVsDelegate":1,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":317,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":426,"org.easymock.tests2.UsageConstraintsTest.testNull":34,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":72,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":91,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":327,"org.easymock.tests2.CaptureTest.testPrimitive":58,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":218,"org.easymock.tests.UsageTest.moreThanOneArgument":199,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":245,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":71,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":143,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":476,"org.easymock.tests.UsageTest.argumentsOrdered":461,"org.easymock.tests.UsageVarargTest.varargIntAccepted":202,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":415,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":210,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":95,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":383,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":97,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":402,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":214,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":493,"org.easymock.tests.ReplayStateInvalidUsageTest.times":450,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":28,"org.easymock.tests2.DependencyTest.testClassMocking":331,"org.easymock.tests2.AnswerTest.answer":66,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":351,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":417,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":27,"org.easymock.tests2.CaptureTest.testAnd":55,"org.easymock.tests2.UsageTest.strictResetToDefault":100,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":76,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":364,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":142,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":179,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":86,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":480,"org.easymock.tests2.DelegateToTest.testDelegate":131,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":241,"org.easymock.tests.LimitationsTest.mockFinalMethod":320,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":175,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":225,"org.easymock.tests2.DependencyTest.testClassMockingSupport":332,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":398,"org.easymock.tests2.CaptureTest.testCapture1_2446744":353,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":359,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":239,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":25,"org.easymock.tests.UsageThrowableTest.throwError":470,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":444,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":437,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":384,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":145,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":501,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":295,"org.easymock.samples.PartialClassMockTest.testGetArea":10,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":445,"org.easymock.tests.MockingTest.testInterfaceMocking":424,"org.easymock.tests2.CompareToTest.testLessOrEqual":496,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":211,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":428,"org.easymock.tests2.UsageTest.niceToStrict":102,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":284,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":315,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":400,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":96,"org.easymock.tests2.MockBuilderTest.testCreateMock":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":291,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":346,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":235,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":249,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":87,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":483,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":192,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":135,"org.easymock.tests.UsageOverloadedMethodTest.overloading":189,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":288,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":293,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":487,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":43,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":430,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":162,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":42,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":63,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":463,"org.easymock.tests2.EasyMockSupportClassTest.testAll":121,"org.easymock.tests.MockClassControlTest.testEquals":326,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":140,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":243,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":296,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":26,"org.easymock.tests2.CaptureTest.testCaptureAll":56,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":223,"org.easymock.tests.MockNameTest.defaultName":466,"org.easymock.tests2.UsageConstraintsTest.testMatches":44,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":443,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":144,"org.easymock.samples.ExampleTest.voteForRemovals":5,"org.easymock.tests.UsageVarargTest.allKinds":209,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":181,"org.easymock.samples.BasicClassMockTest.testPrintContent":15,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":224,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":474,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":336,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":388,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":176,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":380,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":390,"org.easymock.tests2.UsageConstraintsTest.greaterThan":46,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":278,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":178,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":262,"org.easymock.samples.ExampleTest.voteForRemoval":2,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":310,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":80,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":263,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":438,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":258,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":215,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":367,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":270,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":407,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":84,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":276,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":171,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":386,"org.easymock.tests2.CaptureTest.testCaptureFirst":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":406,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":85,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":373,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":489,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":158,"org.easymock.tests2.UsageTest.moreThanOneArgument":101,"org.easymock.tests2.CaptureTest.testCapture2_2446744":355,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":362,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":418,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":272,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":208,"org.easymock.tests.GenericTest.testBridgedEquals":303,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":441,"org.easymock.tests.UsageExpectAndReturnTest.longType":154,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":82,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":221,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":244,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":273,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":465,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":352,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":242,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":454,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":141,"org.easymock.tests.UsageCallCountTest.tooManyCalls":442,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":494,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":292,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":159,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":348,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":231,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":473,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":112,"org.easymock.tests.MockingTest.testNiceClassMocking":314,"org.easymock.tests.MockingTest.testClassMocking":312,"org.easymock.tests2.UsageConstraintsTest.testContains":41,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":193,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":266,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":108,"org.easymock.tests2.UsageConstraintsTest.testFind":33,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":190,"org.easymock.tests.MockTypeTest.fromEasyMockClass":436,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":391,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":19,"org.easymock.tests.UsageExpectAndReturnTest.object":161,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":75,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":347,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":90,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":204,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":434,"org.easymock.tests.UsageTest.exactCallCountByLastCall":462,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":184,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":405,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":477,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":394,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":265,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":167,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":200,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":486,"org.easymock.tests.MockClassControlTest.testHashCode":325,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":375,"org.easymock.tests2.EasyMockSupportTest.testVerify":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":286,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":492,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":478,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":484,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":482,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":24,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":358,"org.easymock.tests.UsageVarargTest.varargCharAccepted":203,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":389,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":20,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":423,"org.easymock.tests2.UsageTest.openCallCountByLastCall":369,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":93,"org.easymock.tests.DefaultClassInstantiatorTest.object":304,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":481,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":432,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":233,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":287,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":471,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":300,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":342,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":374,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":261,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":324,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":232,"org.easymock.tests.CapturesMatcherTest.test":504,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":168,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":453,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":124,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":323,"org.easymock.tests2.UsageTest.resumeIfFailure":105,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":316,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":174,"org.easymock.tests2.StubTest.stubWithReturnValue":134,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":365,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":160,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":51,"org.easymock.tests2.SerializationTest.testAllMockedMethod":120,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":416,"org.easymock.samples.SupportTest.voteForRemovals":13,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":250,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":301,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":377,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":238,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":422,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":356,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":396,"org.easymock.tests.UsageExpectAndThrowTest.object":236,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":49,"org.easymock.tests2.DelegateToTest.testWrongClass":387,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":219,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":220,"org.easymock.tests.UsageStrictMockTest.range":393,"org.easymock.samples.ConstructorCalledMockTest.testTax":7,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":333,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":89,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":111,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":237,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":98,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":460,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":452,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":275,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":136,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":252,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":429,"org.easymock.tests2.CaptureTest.testCaptureNone":62,"org.easymock.tests.UsageUnorderedTest.message":469,"org.easymock.tests.UsageVerifyTest.twoReturns":183,"org.easymock.tests.UsageVarargTest.varargByteAccepted":207,"org.easymock.tests2.ThreadingTest.testThreadSafe":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":289,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":197,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":435,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":14,"org.easymock.tests2.CaptureTest.testCapture_2617107":57,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":185,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":468,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":420,"org.easymock.tests2.UsageConstraintsTest.any":39,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":449,"org.easymock.tests2.StubTest.stub":133,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":455,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":421,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":173,"org.easymock.tests.UsageExpectAndThrowTest.longType":229,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":308,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":448,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":337,"org.easymock.tests2.SerializationTest.testClass":118,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":110,"org.easymock.tests.LimitationsTest.mockNativeMethod":191,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":170,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":302,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":299,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":341,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":23,"org.easymock.tests2.NameTest.nameForMocksControl":128,"org.easymock.tests2.MockedExceptionTest.testMockedException":107,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":343,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":279,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":459,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":188,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":230,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":335,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":70,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":99,"org.easymock.tests.MockingTest.testNicePartialClassMocking":187,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":74,"org.easymock.tests2.CaptureTest.testCaptureLast":61,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":339,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":399,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":117,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":37,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":50,"org.easymock.tests.MockingTest.testTwoMocks":313,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":503,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":151,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":234,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":371,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":53,"org.easymock.samples.ExampleTest.removeNonExistingDocument":330,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":446,"org.easymock.tests.UsageStrictMockTest.differentMethods":148,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":345,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":376,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":306,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":361,"org.easymock.tests2.MockBuilderTest.testCreateMockString":274,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":321,"org.easymock.tests.UsageExpectAndThrowTest.floatType":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":280,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":45,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":277,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":67,"org.easymock.tests.UsageVerifyTest.twoThrows":182,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":360,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":485,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":123,"org.easymock.samples.ExampleTest.voteAgainstRemoval":3,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":411,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":77,"org.easymock.tests.LimitationsTest.privateConstructor":319,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":502,"org.easymock.tests2.UsageConstraintsTest.testNotNull":52,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":475,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":106,"org.easymock.tests2.UsageTest.defaultResetToNice":104,"org.easymock.samples.ExampleTest.voteAgainstRemovals":0,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":412,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":166,"org.easymock.tests.UsageVarargTest.differentLength":464,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":340,"org.easymock.tests2.CallbackTest.callback":132,"org.easymock.tests2.UsageConstraintsTest.equals":350,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":259,"org.easymock.tests.UsageTest.openCallCountByLastCall":458,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":29,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":467,"org.easymock.tests.UsageCallCountTest.tooFewCalls":195,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":114,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":138,"org.easymock.tests.UsageThrowableTest.throwCheckedException":472,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":253,"org.easymock.tests.MockingTest.testStrictClassMocking":311,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":397,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":116,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":113,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":344,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":451,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":115,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":69,"org.easymock.tests2.CompareToTest.testGreateOrEqual":497,"org.easymock.tests.ObjectMethodsTest.testHashCode":433,"org.easymock.tests2.NameTest.nameForNiceMock":127,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":81,"org.easymock.tests2.DependencyTest.testInterfaceMocking":16,"org.easymock.samples.ExampleTest.addDocument":4,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":290,"org.easymock.tests2.DelegateToTest.testStubDelegate":130,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":294,"org.easymock.tests2.AnswerTest.stubAnswer":68,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":147,"org.easymock.tests.UsageVarargTest.varargLongAccepted":206,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":409,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":169,"org.easymock.tests.UsageExpectAndReturnTest.floatType":153,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":78,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":8,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":488,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":47,"org.easymock.tests.UsageThrowableTest.noUpperLimit":246,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":382,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":30,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":255,"org.easymock.tests2.SerializationTest.test":119,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":59,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":305,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":152,"org.easymock.tests2.UsageConstraintsTest.testSame":35,"org.easymock.samples.SupportTest.addDocument":12,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":447,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":281,"org.easymock.tests.GenericTest.testPackageScope":139,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":479,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":404,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":381,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":425,"org.easymock.tests2.NameTest.nameForMock":125,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":163,"org.easymock.tests2.UsageStrictMockTest.differentMethods":22,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":366,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":260,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":155,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":240,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":431,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":180,"org.easymock.tests2.MockedExceptionTest.testRealException":109,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":439,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":414,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":334,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":490,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":413,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":21,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":217,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":329,"org.easymock.tests2.NameTest.nameForStrictMock":126,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":269,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":18,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":73,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":256,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":498,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":48,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":307,"org.easymock.tests.ErrorMessageTest.testGetters":495,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":267,"org.easymock.tests2.UsageStrictMockTest.range":338,"org.easymock.tests2.UsageConstraintsTest.lessThan":54,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":297,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":378,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":408,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":83,"org.easymock.tests2.CaptureTest.testCaptureRightOne":64,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":285,"org.easymock.tests2.UsageConstraintsTest.testOr":36,"org.easymock.tests.UsageRangeTest.combination":177,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":257,"org.easymock.tests.UsageTest.wrongArguments":457,"org.easymock.tests2.MockBuilderTest.testWithConstructor":363,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":282,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":198,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":156,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":401,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":164,"org.easymock.tests.UsageVarargTest.varargShortAccepted":205,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":309,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":440,"org.easymock.tests2.UsageConstraintsTest.cmpTo":40,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":357,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":403,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":370,"org.easymock.tests2.CaptureTest.testCaptureFromStub":354,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":328,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":268,"org.easymock.tests.UsageTest.unexpectedCallWithArray":254,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":251,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":196,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":500,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":165,"org.easymock.tests2.CaptureTest.testCapture":491,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":392,"org.easymock.tests2.UsageConstraintsTest.constraints":31,"org.easymock.samples.ExampleTest.addAndChangeDocument":6,"org.easymock.tests.UsageStrictMockTest.testVerify":150,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":9,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":146,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":222,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":60,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":212,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":298,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":157,"org.easymock.tests.LimitationsTest.abstractClass":318,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":213,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":248,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":499,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":88,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":201}}]

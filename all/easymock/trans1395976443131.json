[{"failures":[],"variableMapping":{"controls":"controls"},"name":"replace","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : this.java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToStrict();\n}","position":"org.easymock.EasyMockSupport:594","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.verify();\n}","position":"org.easymock.EasyMockSupport:561","type":"CtForEachImpl"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.Equals:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","position":"org.easymock.internal.RecordState:305","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n    break;\n} ","position":"org.easymock.internal.BridgeMethodResolver:199","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:200","type":"CtIfImpl"},"status":0},{"failures":[268],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object[] = new java.lang.Object[0]","position":"org.easymock.internal.ArgumentToString:84","type":"CtAssignmentImpl"},"status":-1},{"failures":[269,269,270,270,11,12,13,18,271,272,273,274,275,276,277,278,279,280,281,70,71,72,282,114,115,116,283,284,179,193,195,220,221,222,223,225,226,285,229,286,230,287,231,232,288,233,289,234,235,237,238,239,290,240,291,241,242,243,292,244,245,246,247,250],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ObjectMethodsFilter:55","type":"CtTryImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper","position":"org.easymock.internal.MocksControl:225","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:40","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"bridgeMethod":"bridgeMethod","this":"this"},"name":"add","transplant":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findGenericDeclaration(java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:144","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getAllInterfacesForClass(java.lang.reflect.Method.getDeclaringClass())","position":"org.easymock.internal.BridgeMethodResolver:167","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass();\n} catch (final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException) {\n    net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader());\n    java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass();\n}","position":"org.easymock.internal.ClassProxyFactory:174","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","position":"org.easymock.internal.RecordState:77","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:210","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","position":"org.easymock.internal.LastControl:95","type":"CtForImpl"},"status":-2},{"failures":[293,80,294,295,296,297],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"]\")","position":"org.easymock.internal.ArgumentToString:52","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","position":"org.easymock.internal.RecordState:55","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.get(java.lang.Class<?>)","position":"org.easymock.internal.RecordState:229","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1790","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:250","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:50","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:55","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","position":"org.easymock.internal.AndroidSupport:29","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.LastControl:98","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:971","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","position":"org.easymock.EasyMock:1079","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1790","type":"CtReturnImpl"},"status":-2},{"failures":[248],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:147","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:466","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"\\'\")","position":"org.easymock.internal.ArgumentToString:43","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-4214363692271370781L","position":"org.easymock.Capture:33","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-8447010713532143168L","position":"org.easymock.internal.matchers.CompareTo:30","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1052","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:436","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"case FIRST :\n    if (!org.easymock.Capture<T>.(hasCaptured())) {\n        java.util.List<T>.add(T);\n    } \n    break;","position":"org.easymock.Capture:111","type":"CtCaseImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.ReflectionUtils:122","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Float>(float))","position":"org.easymock.EasyMock:839","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","position":"org.easymock.internal.InjectionPlan:60","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.Result(new DelegatingAnswer() , false)","position":"org.easymock.internal.Result:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasResults())) {\n        continue;\n    } \n    if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n        continue;\n    } \n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.ExpectedInvocationAndResults.getResults().next();\n    org.easymock.internal.Invocation.validateCaptures();\n    return org.easymock.internal.Result;\n} finally {\n    org.easymock.internal.Invocation.clearCaptures();\n}","position":"org.easymock.internal.UnorderedBehavior:51","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","mock":"mock"},"name":"replace","transplant":{"sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).verify()","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","position":"org.easymock.internal.DefaultClassInstantiator:126","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","position":"org.easymock.internal.MocksControl:385","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.reset();\n}","position":"org.easymock.EasyMockSupport:551","type":"CtForEachImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:251","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1988","type":"mutation","return":"return 0","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((int) <= int) && (int <= (int))","position":"org.easymock.internal.Range:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"not(\")","position":"org.easymock.internal.matchers.Not:40","type":"CtInvocationImpl"},"status":-2},{"failures":[293,29,30,31,32,33,34,273,80,81,294,295,104,296,297,186],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))","position":"org.easymock.EasyMock:1687","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"status":-1},{"failures":[],"variableMapping":{"proxy":"proxy"},"name":"add","transplant":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","position":"org.easymock.internal.MocksControl:183","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Proxy.java.lang.reflect.Proxy.isProxyClass(V.getClass())) {\n    return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]));\n} ","position":"org.easymock.internal.MocksControl:182","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"continue","position":"org.easymock.internal.Injector:110","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int--","position":"org.easymock.internal.MocksBehavior:115","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[201],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","position":"org.easymock.EasyMock:1927","type":"CtInvocationImpl"},"status":-1},{"failures":[],"binaryOperator":"((\"\" + int) + \" matchers expected, \")","name":"math","position":"org.easymock.internal.LastControl:92","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","position":"org.easymock.internal.ErrorMessage:49","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:282","type":"CtLocalVariableImpl"},"status":-2},{"failures":[137,155,158,298],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return int <= 0","position":"org.easymock.LogicalOperator:33","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError","position":"org.easymock.internal.MocksControl:148","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoSuchFieldException java.lang.NoSuchFieldException","position":"org.easymock.internal.DefaultClassInstantiator:162","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:65","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","position":"org.easymock.internal.ReplayState:44","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","position":"org.easymock.internal.RecordState:145","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","position":"org.easymock.EasyMock:1554","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.Injector:65","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","position":"org.easymock.internal.DefaultClassInstantiator:94","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"actualTypeArgument","bound":"actualTypeArgument"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type)","position":"org.easymock.internal.BridgeMethodResolver:327","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long)","position":"org.easymock.internal.RecordState:63","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","position":"org.easymock.internal.EasyMockProperties:63","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object));\n} ","position":"org.easymock.internal.ObjectMethodsFilter:85","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = !(boolean)","position":"org.easymock.internal.UnorderedBehavior:85","type":"CtLocalVariableImpl"},"status":-2},{"failures":[5,14,180,181,196,216,217,219],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","position":"org.easymock.internal.RecordState:120","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:270","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:284","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","position":"org.easymock.internal.MocksControl:276","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean boolean = true","position":"org.easymock.internal.MocksBehavior:152","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : org.easymock.internal.UnorderedBehavior.getMessages(null)) {\n    org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0);\n}","position":"org.easymock.internal.MocksBehavior:168","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Proxy.java.lang.reflect.Proxy.getInvocationHandler(java.lang.Object)","position":"org.easymock.internal.JavaProxyFactory:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.ReflectionUtils:229","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","position":"org.easymock.internal.RecordState:257","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory","position":"org.easymock.internal.MocksControl:135","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1039","type":"mutation","return":"return 0","status":0},{"failures":[161],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:800","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(double))","position":"org.easymock.EasyMock:1506","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.concurrent.locks.ReentrantLock()","position":"org.easymock.internal.ReplayState:32","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.verify()","position":"org.easymock.internal.ReplayState:73","type":"CtInvocationImpl"},"status":-2},{"failures":[299,284],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl"},"status":-1},{"failures":[300],"variableMapping":{"actual":"result"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.MocksBehavior:109","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Invocation == null) {\n    throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\");\n} ","position":"org.easymock.EasyMock:2124","type":"CtIfImpl"},"status":-1},{"failures":[198,199,200,201,202,203,204,205,207,208,209,210],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.MocksBehavior:109","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.UnorderedBehavior:62","type":"CtInvocationImpl"},"status":-1},{"failures":[268],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","position":"org.easymock.internal.ArgumentToString:83","type":"CtIfImpl"},"status":-1},{"failures":[269,270,301,302,303,304,305],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1262","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","position":"org.easymock.internal.MockBuilder:159","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:107","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","position":"org.easymock.EasyMock:480","type":"CtReturnImpl"},"status":-2},{"failures":[306,307,308],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","position":"org.easymock.internal.DefaultClassInstantiator:137","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"))","position":"org.easymock.internal.ClassProxyFactory:230","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!boolean) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove();\n    throw new java.lang.IllegalStateException(java.lang.String);\n} ","position":"org.easymock.internal.LastControl:102","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"\"\" + (int)","name":"math","position":"org.easymock.internal.Range:66","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ","position":"org.easymock.internal.MocksBehavior:194","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:93","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:196","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n    java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n} else {\n    java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n}","position":"org.easymock.internal.Injector:123","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.ClassProxyFactory:77","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:163","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","position":"org.easymock.internal.BridgeMethodResolver:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.ObjectMethodsFilter:108","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-6785245714002503134L","position":"org.easymock.internal.matchers.Contains:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5554816464613350531L","position":"org.easymock.internal.ExpectedInvocation:32","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:53","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.SecurityException java.lang.SecurityException","position":"org.easymock.internal.Injector:208","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"-6785245714002503134L","position":"org.easymock.internal.matchers.Contains:27","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod())","position":"org.easymock.internal.ClassProxyFactory:117","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)))","position":"org.easymock.internal.ClassProxyFactory:227","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String","position":"org.easymock.LogicalOperator:62","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","position":"org.easymock.internal.LastControl:93","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).matches(java.lang.String))","position":"org.easymock.internal.matchers.Matches:36","type":"CtReturnImpl"},"status":0},{"failures":[0,269,269,270,270,1,2,3,4,5,6,7,8,9,10,11,12,13,17,18,19,20,21,22,23,24,309,310,311,25,26,27,28,293,29,30,31,32,33,34,274,312,313,314,315,316,317,318,319,320,35,321,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77,322,323,324,325,326,78,79,80,81,82,83,84,85,86,89,90,91,92,93,94,95,96,327,97,98,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115,116,328,329,330,331,332,333,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,334,335,179,336,337,338,339,340,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,341,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,285,230,287,231,232,233,289,234,235,236,237,238,239,240,291,242,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267],"variableMapping":{"state":"state","behavior":"behavior"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(this.org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:191","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:213","type":"CtAssignmentImpl"},"status":-1},{"failures":[342,343,344,230,241,242],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:113","type":"CtReturnImpl"},"status":-1},{"failures":[269,269,270,270,11,12,13,18,24,273,274,275,276,277,278,279,280,281,70,71,72,345,73,114,115,116,283,346,178,334,335,179,193,195,220,221,222,223,225,226,285,229,230,287,231,232,288,233,289,234,235,237,238,239,290,240,291,241,242,243,244,245,246,247,248,250,251],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","position":"org.easymock.EasyMock:1725","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:117","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:440","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:879","type":"mutation","return":"return 0","status":0},{"failures":[19,20,21,22,23,25,26,35,66,73,74,75,76,77,80,81,103,104,105,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,180,181,188,198,199,200,201,202,203,204,205,206,207,208,341,209,210,214,240],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","position":"org.easymock.EasyMock:2106","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>, java.lang.Byte.java.lang.Byte)","position":"org.easymock.internal.RecordState:59","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","position":"org.easymock.internal.ArgumentToString:93","type":"CtInvocationImpl"},"status":-2},{"failures":[299],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.findGenericDeclaration(java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:144","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:159","type":"CtLocalVariableImpl"},"status":-1},{"failures":[],"binaryOperator":"(((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\")","name":"math","position":"org.easymock.internal.ExpectedInvocation:48","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","position":"org.easymock.internal.BridgeMethodResolver:322","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","position":"org.easymock.internal.LastControl:61","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int += org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:97","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int)","position":"org.easymock.internal.MocksBehavior:144","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.MockBuilder:153","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","position":"org.easymock.internal.MocksControl:93","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:734","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"genericType":"genericType"},"name":"add","transplant":{"sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((this.java.lang.Object[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:114","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:371","type":"CtReturnImpl"},"status":-2},{"failures":[243],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:801","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:233","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.Results.getMainInterval().expectedCount()","position":"org.easymock.internal.Results:86","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return boolean","position":"org.easymock.internal.Injection:82","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","position":"org.easymock.internal.ReplayState:44","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","position":"org.easymock.internal.BridgeMethodResolver:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:122","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName()))","name":"math","position":"org.easymock.internal.ReflectionUtils:166","type":"mutation","status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":109,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":82,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":240,"org.easymock.tests2.MockedExceptionTest.testRealException":336,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":79,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":51,"org.easymock.tests.UsageVarargTest.varargIntAccepted":58,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":25,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":137,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":0,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":250,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":276,"org.easymock.tests2.UsageConstraintsTest.testContains":150,"org.easymock.tests.UsageCallCountTest.tooManyCalls":102,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":329,"org.easymock.tests2.UsageConstraintsTest.testFind":141,"org.easymock.tests2.CompareToTest.testGreateThan":298,"org.easymock.tests.UsageVarargTest.allKinds":66,"org.easymock.tests2.StubTest.stubWithReturnValue":249,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":203,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":302,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":311,"org.easymock.tests2.CaptureTest.testCaptureAll":199,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":104,"org.easymock.samples.ExampleTest.addAndChangeDocument":10,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":285,"org.easymock.tests.UsageVarargTest.varargCharAccepted":59,"org.easymock.tests2.CaptureTest.testCaptureFromStub":341,"org.easymock.tests.UsageVerifyTest.twoThrows":94,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":20,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":60,"org.easymock.tests2.DelegateToTest.testReturnException":182,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":170,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":154,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":262,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":187,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":299,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":300,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":342,"org.easymock.tests2.CaptureTest.testAnd":198,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":333,"org.easymock.tests.UsageStrictMockTest.testVerify":86,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":44,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":15,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":207,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":48,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":271,"org.easymock.tests2.UsageConstraintsTest.testMatches":153,"org.easymock.tests.MockClassControlTest.testToString":275,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":313,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":303,"org.easymock.tests2.UsageConstraintsTest.testNull":142,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":220,"org.easymock.tests2.EasyMockSupportClassTest.testAll":244,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":256,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":52,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":130,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":197,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":18,"org.easymock.tests.UsageThrowableTest.throwError":106,"org.easymock.tests2.UsageConstraintsTest.greaterThan":155,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":56,"org.easymock.samples.SupportTest.addDocument":2,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":23,"org.easymock.tests2.StubTest.stub":248,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":331,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":87,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":330,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":76,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":19,"org.easymock.tests.UsageExpectAndReturnTest.object":127,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":136,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":157,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":259,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":292,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":343,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":65,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":192,"org.easymock.tests.UsageExpectAndThrowTest.object":46,"org.easymock.tests2.DelegateToTest.testWrongClass":184,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":213,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":294,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":319,"org.easymock.tests2.UsageTest.moreThanOneArgument":167,"org.easymock.tests.UsageVarargTest.varargByteAccepted":64,"org.easymock.tests.MockClassControlTest.testEquals":279,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":43,"org.easymock.samples.ExampleTest.voteAgainstRemoval":7,"org.easymock.tests.UsageTest.wrongArguments":29,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":315,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":112,"org.easymock.tests.UsageVarargTest.varargShortAccepted":62,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":47,"org.easymock.tests2.UsageTest.defaultResetToNice":173,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":295,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":296,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":179,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":75,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":1,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":214,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":232,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":273,"org.easymock.tests2.MockBuilderTest.testCreateMock":288,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":215,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":344,"org.easymock.tests2.SerializationTest.testAllMockedMethod":195,"org.easymock.tests2.NameTest.nameForMocksControl":267,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":346,"org.easymock.samples.ExampleTest.voteAgainstRemovals":4,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":186,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":91,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":22,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":67,"org.easymock.tests2.CaptureTest.testCapture1_2446744":202,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":177,"org.easymock.tests.LimitationsTest.mockNativeMethod":114,"org.easymock.tests2.DelegateToTest.testStubDelegate":183,"org.easymock.tests.UsageUnorderedTest.message":103,"org.easymock.samples.ExampleTest.answerVsDelegate":5,"org.easymock.samples.ExampleTest.voteForRemoval":6,"org.easymock.tests.UsageCallCountTest.tooFewCalls":98,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":126,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":100,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":217,"org.easymock.tests.UsageVerifyTest.twoReturns":95,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":45,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":121,"org.easymock.tests2.DependencyTest.testInterfaceMocking":227,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":17,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":251,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":318,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":254,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":340,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":145,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":24,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":85,"org.easymock.tests.MockingTest.testTwoMocks":281,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":123,"org.easymock.tests2.CaptureTest.testCaptureRightOne":208,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":97,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":309,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":328,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":334,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":239,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":90,"org.easymock.tests2.UsageConstraintsTest.cmpTo":149,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":96,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":128,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":306,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":222,"org.easymock.tests2.MockedExceptionTest.testMockedException":335,"org.easymock.tests.UsageThrowableTest.throwCheckedException":110,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":55,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":161,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":324,"org.easymock.samples.PartialClassMockTest.testGetArea":11,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":93,"org.easymock.samples.ExampleTest.voteForRemovals":9,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":108,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":69,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":152,"org.easymock.samples.ConstructorCalledMockTest.testTax":269,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":16,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":320,"org.easymock.tests2.UsageTest.argumentsOrdered":175,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":238,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":27,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":219,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":122,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":312,"org.easymock.tests2.AnswerTest.answer":216,"org.easymock.tests.MockingTest.testNicePartialClassMocking":71,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":81,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":268,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":118,"org.easymock.tests2.UsageConstraintsTest.any":148,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":125,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":77,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":88,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":326,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":261,"org.easymock.tests.UsageExpectAndThrowTest.longType":39,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":53,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":181,"org.easymock.tests2.CallbackTest.callback":196,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":246,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":258,"org.easymock.tests2.NameTest.nameForMock":264,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":304,"org.easymock.tests.UsageTest.argumentsOrdered":33,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":140,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":231,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":151,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":135,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":21,"org.easymock.tests2.NameTest.nameForStrictMock":265,"org.easymock.tests2.MockBuilderTest.testCreateMockString":289,"org.easymock.tests2.CaptureTest.testCaptureNone":206,"org.easymock.tests2.SerializationTest.test":194,"org.easymock.tests.UsageExpectAndReturnTest.longType":120,"org.easymock.tests2.SerializationTest.testClass":193,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":204,"org.easymock.tests2.CaptureTest.testCaptureFirst":210,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":282,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":158,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":12,"org.easymock.tests2.UsageTest.niceToStrict":169,"org.easymock.tests2.EasyMockSupportTest.testVerify":263,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":317,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":316,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":287,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":78,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":41,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":160,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":165,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":49,"org.easymock.tests2.UsageTest.strictResetToDefault":166,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":134,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":233,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":242,"org.easymock.tests.GenericTest.testBridgedEquals":284,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":26,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":36,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":146,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":124,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":224,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":337,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":290,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":57,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":156,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":237,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":234,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":321,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":72,"org.easymock.tests2.UsageConstraintsTest.testOr":144,"org.easymock.tests2.DelegateToTest.testDelegate":185,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":212,"org.easymock.tests2.UsageConstraintsTest.testNotNull":162,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":189,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":178,"org.easymock.tests.MockClassControlTest.testHashCode":278,"org.easymock.tests2.CaptureTest.testCapture_2617107":200,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":332,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":105,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":113,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":129,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":272,"org.easymock.tests2.ThreadingTest.testThreadSafe":211,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":172,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":307,"org.easymock.tests.UsageThrowableTest.noUpperLimit":107,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":323,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":221,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":223,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":260,"org.easymock.tests.UsageExpectAndReturnTest.floatType":119,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":252,"org.easymock.tests2.UsageTest.wrongArguments":168,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":147,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":339,"org.easymock.tests2.UsageConstraintsTest.testSame":143,"org.easymock.tests2.UsageTest.resumeIfFailure":176,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":277,"org.easymock.tests.UsageOverloadedMethodTest.overloading":68,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":225,"org.easymock.samples.SupportTest.voteForRemovals":3,"org.easymock.tests.UsageRangeTest.combination":89,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":305,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":111,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":270,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":163,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":116,"org.easymock.tests.UsageTest.openCallCountByLastCall":30,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":42,"org.easymock.tests2.NameTest.nameForNiceMock":266,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":92,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":159,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":322,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":188,"org.easymock.tests2.CaptureTest.testPrimitive":201,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":236,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":131,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":50,"org.easymock.samples.BasicClassMockTest.testPrintContent":13,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":310,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":73,"org.easymock.tests.UsageExpectAndThrowTest.floatType":38,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":291,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":101,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":132,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":180,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":235,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":327,"org.easymock.tests2.UsageStrictMockTest.differentMethods":191,"org.easymock.tests.UsageTest.exactCallCountByLastCall":34,"org.easymock.tests2.AnswerTest.stubAnswer":218,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":253,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":257,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":283,"org.easymock.tests2.CaptureTest.testCaptureLast":205,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":37,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":99,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":228,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":245,"org.easymock.tests.UsageStrictMockTest.range":83,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":31,"org.easymock.tests.UsageTest.unexpectedCallWithArray":293,"org.easymock.tests.MockingTest.testPartialClassMocking":70,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":133,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":174,"org.easymock.tests2.UsageConstraintsTest.constraints":139,"org.easymock.samples.ExampleTest.addDocument":8,"org.easymock.tests2.UsageConstraintsTest.lessThan":164,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":338,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":32,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":14,"org.easymock.tests.UsageVarargTest.varargLongAccepted":63,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":325,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":308,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":241,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":243,"org.easymock.tests2.MockBuilderTest.testWithConstructor":301,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":80,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":54,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":247,"org.easymock.tests2.UsageStrictMockTest.range":190,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":226,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":286,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":314,"org.easymock.tests.UsageTest.moreThanOneArgument":28,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":74,"org.easymock.tests2.UsageTest.openCallCountByLastCall":171,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":280,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":229,"org.easymock.tests.UsageStrictMockTest.differentMethods":84,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":255,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":138,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":274,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":230,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":40,"org.easymock.tests.DefaultClassInstantiatorTest.object":345,"org.easymock.tests.UsageVarargTest.differentLength":61,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":117,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":35,"org.easymock.tests2.CaptureTest.testCapture2_2446744":209,"org.easymock.tests.GenericTest.testPackageScope":115}}]

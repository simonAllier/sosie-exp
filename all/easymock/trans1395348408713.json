[{"transplant":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[0],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,78,79,79,80],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:180","sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[81,82,21,24,83,84],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:126","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:97","sourceCode":"for (final java.lang.String java.lang.String : java.lang.String[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.String);\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:411","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"cls"}},{"position":"org.easymock.internal.ExpectedInvocation:85","failures":[85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,18,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,0,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162],"status":-1,"binaryOperator":"((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[85,86,87,88,89,163,90,91,92,93,164,94,165,95,96,97,98,99,100,101,102,103,104,166,105,167,106,107,168,169,3,4,5,6,170,171,172,173,108,174,109,175,110,176,111,112,177,178,113,179,180,7,8,181,182,114,115,116,117,118,119,183,120,121,122,123,184,185,186,187,188,189,9,10,13,15,16,18,190,191,192,124,125,126,193,194,195,127,128,196,197,198,199,200,201,202,203,21,204,22,23,129,130,131,132,133,134,135,136,205,137,138,139,140,0,141,206,25,26,27,28,207,29,30,208,209,33,34,210,35,36,37,38,39,42,43,44,45,211,212,213,214,57,142,215,216,143,217,218,219,220,221,222,223,224,225,226,227,228,229,230,58,144,231,145,146,232,147,148,233,234,235,149,236,237,238,239,240,241,242,61,62,63,64,243,150,244,245,151,246,152,247,248,249,250,251,252,253,254,153,255,256,154,155,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,68,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,156,157,340,158,159,160,161,162,76,341,77,342,343,344,345,346,347,348,349,350,351,352,353,354,78,78,79,79,80],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.EasyMock:1205","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:93","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","type":"CtInvocationImpl"},"failures":[355],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"result","i":"i"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[21,204,22],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[85,86,87,88,89,163,90,91,92,93,94,165,95,96,97,98,99,100,101,102,103,104,105,167,106,107,168,169,3,4,5,6,108,110,111,112,113,179,8,182,114,115,116,117,118,119,183,120,121,122,123,185,186,187,188,189,10,13,15,16,18,190,191,192,125,193,194,195,196,197,200,21,204,23,129,130,132,133,136,205,137,138,140,0,206,25,26,27,28,207,29,30,33,34,210,35,36,37,39,43,44,45,57,142,216,143,217,223,146,147,148,235,236,237,238,239,62,63,64,243,150,244,246,152,247,248,249,253,254,255,256,257,282,283,284,285,286,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,156,340,158,159,160,161,162,76,77,343,345,346,348,351,80],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:328","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[356,251],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[113,190,194,217,221,229,149,151,253,256,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,156,340,158,159,160,161,162],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:109","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[85,86,87,88,89,163,90,91,92,93,164,94,165,95,96,97,98,99,100,101,102,103,104,166,105,167,106,107,168,169,3,4,5,6,170,173,108,174,109,175,110,176,111,112,177,178,113,179,8,182,114,115,116,117,118,119,183,120,121,122,123,184,185,186,187,188,189,10,13,15,16,18,190,191,192,124,125,126,193,194,195,127,128,196,197,199,200,201,203,21,204,22,23,129,130,131,132,133,134,135,136,205,137,138,140,0,141,206,25,26,27,28,207,29,30,208,209,33,34,210,35,36,37,39,43,44,45,211,212,213,214,57,142,215,216,143,217,218,220,221,223,229,58,144,231,145,146,232,147,148,233,234,235,149,236,62,63,64,150,244,245,151,246,152,247,248,249,253,254,153,255,256,154,155,257,263,264,265,266,267,268,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,316,317,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,156,157,340,158,159,160,161,162,76,341,342,343,344,345,346,347,348,349,350,351,352,353,354,80],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[164,94,166,105,173,109,175,110,176,111,112,177,178,116,121,122,123,184,10,13,18,124,126,127,128,22,130,131,134,135,136,205,0,141,208,209,211,212,213,214,58,144,231,145,146,232,147,148,233,234,245,151,357,358,359,360,361,153,154,155,263,264,265,266,267,268,269,271,272,273,274,275,276,277,278,279,280,281,282,287,316,317,157,341,342,343,345,346,347,348,349,350,351,352,353,354],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:47","sourceCode":"this.T = T","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[129,130,131,132,133,134,135,136,137,138,139,140,0,362],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[250],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[363,364,365,366,145,367],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:328","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[356,251],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[99,363,364,366,368],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[21,204,22],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"finalizeMethod","method":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[369],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:88","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:75","sourceCode":"return org.easymock.internal.IMocksControlState","type":"CtReturnImpl"},"failures":[85,86,87,88,89,163,90,91,92,93,94,165,95,96,97,98,99,100,101,102,103,104,166,105,167,106,107,168,169,3,4,5,6,170,171,172,173,108,174,109,175,110,176,111,112,177,178,113,179,180,7,8,181,182,114,115,116,117,118,119,183,120,121,122,123,184,185,186,187,188,189,9,10,13,14,15,16,17,18,20,190,191,192,124,125,126,193,194,195,127,128,196,197,198,199,200,201,202,203,21,204,22,23,129,130,131,132,133,134,135,136,205,137,138,139,140,0,141,206,25,26,27,28,207,29,30,370,371,372,373,208,209,33,34,210,35,36,37,38,39,42,43,44,45,211,212,213,214,57,142,215,216,143,217,218,219,220,221,222,223,224,225,226,227,228,229,230,58,144,231,145,146,232,147,148,233,234,235,149,236,237,238,239,240,241,242,61,62,63,64,243,150,244,245,151,246,152,247,248,249,250,251,252,374,375,376,377,253,254,367,153,255,256,154,155,257,378,379,380,381,258,259,260,261,262,263,264,265,266,267,382,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,156,157,340,158,159,160,161,162,76,341,77,342,343,344,345,346,347,348,349,350,351,352,353,354,78,78,79,79,80],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.LastControl:70","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:74","sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:53","sourceCode":"java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection)","type":"CtInvocationImpl"},"failures":[383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"failures":[315],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[88,163,92,93,94,165,96,99,102,103,104,166,105,167,168,169,3,4,5,6,170,173,175,110,176,111,112,177,179,8,182,114,115,116,117,118,119,120,121,122,123,184,188,189,13,15,16,190,191,124,125,126,127,128,197,199,201,203,21,204,22,23,129,130,131,132,134,135,136,205,137,138,0,141,206,25,26,27,28,207,29,30,33,34,210,35,36,37,39,44,57,216,143,218,220,221,223,58,231,145,146,232,147,148,233,149,236,62,63,64,150,244,245,151,152,153,154,155,257,265,266,267,268,269,271,272,273,274,275,277,278,279,280,281,287,290,291,293,298,303,322,323,325,330,335,156,157,340,158,159,160,161,162,76,341,342,343,344,345,346,347,348,349,350,351,352,353,354,80],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:353","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:194","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bounds":"genericParameters"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":88,"org.easymock.tests2.UsageTest.argumentsOrdered":128,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":253,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":122,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":126,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":354,"org.easymock.tests2.DelegateToTest.testReturnException":199,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":226,"org.easymock.tests.MockingTest.testPartialClassMocking":62,"org.easymock.tests.MockClassControlTest.testToString":50,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":243,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":47,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":4,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":320,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":169,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":93,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":150,"org.easymock.tests2.UsageTest.wrongArguments":124,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":398,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":380,"org.easymock.samples.ExampleTest.answerVsDelegate":344,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":67,"org.easymock.tests2.UsageConstraintsTest.testNull":163,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":35,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":121,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":54,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":31,"org.easymock.tests2.CaptureTest.testPrimitive":132,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":246,"org.easymock.tests.UsageTest.moreThanOneArgument":254,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":339,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":210,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":260,"org.easymock.tests.UsageTest.argumentsOrdered":155,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":315,"org.easymock.tests.UsageVarargTest.varargIntAccepted":273,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":356,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":282,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":9,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":389,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":14,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":286,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":206,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":369,"org.easymock.tests2.AnswerTest.answer":170,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":164,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":360,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":373,"org.easymock.tests2.CaptureTest.testAnd":129,"org.easymock.tests2.UsageTest.strictResetToDefault":191,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":42,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":259,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":117,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":248,"org.easymock.tests2.DelegateToTest.testDelegate":203,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":319,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":335,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":229,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":377,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":310,"org.easymock.tests2.CaptureTest.testCapture1_2446744":133,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":333,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":371,"org.easymock.tests.UsageThrowableTest.throwError":156,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":390,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":262,"org.easymock.samples.PartialClassMockTest.testGetArea":80,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":283,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":238,"org.easymock.tests2.UsageTest.niceToStrict":125,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":48,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":321,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":13,"org.easymock.tests2.MockBuilderTest.testCreateMock":17,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":395,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":329,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":363,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":118,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":242,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":263,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":378,"org.easymock.tests.UsageOverloadedMethodTest.overloading":143,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":97,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":221,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":216,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":299,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":96,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":137,"org.easymock.tests2.EasyMockSupportClassTest.testAll":3,"org.easymock.tests.MockClassControlTest.testEquals":53,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":341,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":337,"org.easymock.tests2.CaptureTest.testCaptureAll":130,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":372,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":375,"org.easymock.tests2.UsageConstraintsTest.testMatches":98,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":261,"org.easymock.samples.ExampleTest.voteForRemovals":348,"org.easymock.tests.UsageVarargTest.allKinds":281,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":235,"org.easymock.samples.BasicClassMockTest.testPrintContent":353,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":376,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":161,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":109,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":386,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":202,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":230,"org.easymock.tests2.UsageConstraintsTest.greaterThan":100,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":247,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":45,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":74,"org.easymock.samples.ExampleTest.voteForRemoval":345,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":186,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":46,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":19,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":38,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":190,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":58,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":115,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":340,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":225,"org.easymock.tests2.CaptureTest.testCaptureFirst":0,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":198,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":116,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":197,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":224,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":295,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":188,"org.easymock.tests2.CaptureTest.testCapture2_2446744":140,"org.easymock.tests2.UsageTest.moreThanOneArgument":192,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":18,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":361,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":280,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":268,"org.easymock.tests.UsageExpectAndReturnTest.longType":291,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":182,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":252,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":338,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":166,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":270,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":336,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":258,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":313,"org.easymock.tests.UsageCallCountTest.tooManyCalls":269,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":264,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":296,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":397,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":325,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":160,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":26,"org.easymock.tests.MockingTest.testNiceClassMocking":65,"org.easymock.tests.MockingTest.testClassMocking":60,"org.easymock.tests2.UsageConstraintsTest.testContains":95,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":8,"org.easymock.tests2.UsageConstraintsTest.testFind":89,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":217,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":144,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":209,"org.easymock.tests.UsageExpectAndReturnTest.object":298,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":39,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":396,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":120,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":275,"org.easymock.tests.UsageTest.exactCallCountByLastCall":257,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":142,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":316,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":24,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":271,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":304,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":220,"org.easymock.tests.MockClassControlTest.testHashCode":52,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":383,"org.easymock.tests2.EasyMockSupportTest.testVerify":184,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":317,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":218,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":241,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":370,"org.easymock.tests.UsageVarargTest.varargCharAccepted":274,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":175,"org.easymock.tests2.UsageTest.openCallCountByLastCall":193,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":123,"org.easymock.tests.DefaultClassInstantiatorTest.object":68,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":240,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":355,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":327,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":158,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":43,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":51,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":326,"org.easymock.tests.CapturesMatcherTest.test":362,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":305,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":312,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":6,"org.easymock.tests2.UsageTest.resumeIfFailure":196,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":66,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":228,"org.easymock.tests2.StubTest.stubWithReturnValue":113,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":81,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":105,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":297,"org.easymock.tests2.SerializationTest.testAllMockedMethod":22,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":250,"org.easymock.samples.SupportTest.voteForRemovals":351,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":364,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":75,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":332,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":251,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":171,"org.easymock.tests.UsageExpectAndThrowTest.object":330,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":103,"org.easymock.tests2.DelegateToTest.testWrongClass":201,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":308,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":309,"org.easymock.tests.UsageStrictMockTest.range":147,"org.easymock.samples.ConstructorCalledMockTest.testTax":78,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":183,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":25,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":331,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":15,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":154,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":379,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":365,"org.easymock.tests2.CaptureTest.testCaptureNone":205,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":239,"org.easymock.tests.UsageUnorderedTest.message":287,"org.easymock.tests.UsageVerifyTest.twoReturns":236,"org.easymock.tests.UsageVarargTest.varargByteAccepted":279,"org.easymock.tests2.ThreadingTest.testThreadSafe":185,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":267,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":352,"org.easymock.tests2.CaptureTest.testCapture_2617107":131,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":151,"org.easymock.tests2.UsageConstraintsTest.any":94,"org.easymock.tests2.StubTest.stub":178,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":314,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":227,"org.easymock.tests.UsageExpectAndThrowTest.longType":323,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":72,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":176,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":179,"org.easymock.tests2.SerializationTest.testClass":21,"org.easymock.tests.LimitationsTest.mockNativeMethod":57,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":77,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":307,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":392,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":177,"org.easymock.tests2.NameTest.nameForMocksControl":214,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":393,"org.easymock.tests2.MockedExceptionTest.testMockedException":7,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":256,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":64,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":324,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":33,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":16,"org.easymock.tests.MockingTest.testNicePartialClassMocking":63,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":37,"org.easymock.tests2.CaptureTest.testCaptureLast":136,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":83,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":311,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":30,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":92,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":104,"org.easymock.tests.MockingTest.testTwoMocks":61,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":288,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":328,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":127,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":106,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":394,"org.easymock.tests.UsageStrictMockTest.differentMethods":148,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":384,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":70,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":187,"org.easymock.tests2.MockBuilderTest.testCreateMockString":20,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":49,"org.easymock.tests.UsageExpectAndThrowTest.floatType":322,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":99,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":173,"org.easymock.tests.UsageVerifyTest.twoThrows":149,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":5,"org.easymock.samples.ExampleTest.voteAgainstRemoval":346,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":237,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":44,"org.easymock.tests.LimitationsTest.privateConstructor":56,"org.easymock.tests2.UsageConstraintsTest.testNotNull":167,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":180,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":162,"org.easymock.tests2.UsageTest.defaultResetToNice":195,"org.easymock.samples.ExampleTest.voteAgainstRemovals":343,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":303,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":359,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":391,"org.easymock.tests.UsageVarargTest.differentLength":276,"org.easymock.tests2.CallbackTest.callback":141,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":40,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":368,"org.easymock.tests.UsageTest.openCallCountByLastCall":255,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":85,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":245,"org.easymock.tests.UsageCallCountTest.tooFewCalls":265,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":28,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":381,"org.easymock.tests.UsageThrowableTest.throwCheckedException":159,"org.easymock.tests.MockingTest.testStrictClassMocking":59,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":366,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":29,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":215,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":27,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":207,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":174,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":84,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":189,"org.easymock.tests2.NameTest.nameForNiceMock":213,"org.easymock.tests2.DependencyTest.testInterfaceMocking":168,"org.easymock.samples.ExampleTest.addDocument":347,"org.easymock.tests2.DelegateToTest.testStubDelegate":200,"org.easymock.tests2.AnswerTest.stubAnswer":108,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":146,"org.easymock.tests.UsageVarargTest.varargLongAccepted":278,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":233,"org.easymock.tests.UsageExpectAndReturnTest.floatType":290,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":306,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":23,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":79,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":388,"org.easymock.tests.UsageThrowableTest.noUpperLimit":157,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":101,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":222,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":86,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":1,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":134,"org.easymock.tests2.SerializationTest.test":204,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":69,"org.easymock.tests2.UsageConstraintsTest.testSame":90,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":289,"org.easymock.samples.SupportTest.addDocument":350,"org.easymock.tests.GenericTest.testPackageScope":76,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":318,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":387,"org.easymock.tests2.NameTest.nameForMock":211,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":300,"org.easymock.tests2.UsageStrictMockTest.differentMethods":112,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":41,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":292,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":334,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":249,"org.easymock.tests2.MockedExceptionTest.testRealException":181,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":82,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":110,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":244,"org.easymock.tests2.NameTest.nameForStrictMock":212,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":12,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":208,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":36,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":2,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":102,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":71,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":10,"org.easymock.tests2.UsageStrictMockTest.range":111,"org.easymock.tests2.UsageConstraintsTest.lessThan":107,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":385,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":114,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":358,"org.easymock.tests2.CaptureTest.testCaptureRightOne":138,"org.easymock.tests2.UsageConstraintsTest.testOr":91,"org.easymock.tests.UsageRangeTest.combination":152,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":34,"org.easymock.tests.UsageTest.wrongArguments":153,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":293,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":301,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":357,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":73,"org.easymock.tests.UsageVarargTest.varargShortAccepted":277,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":382,"org.easymock.tests2.UsageConstraintsTest.cmpTo":165,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":172,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":194,"org.easymock.tests2.CaptureTest.testCaptureFromStub":139,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":11,"org.easymock.tests.UsageTest.unexpectedCallWithArray":367,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":145,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":266,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":302,"org.easymock.tests2.UsageConstraintsTest.constraints":87,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":232,"org.easymock.samples.ExampleTest.addAndChangeDocument":349,"org.easymock.tests.UsageStrictMockTest.testVerify":234,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":342,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":231,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":374,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":135,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":32,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":284,"org.easymock.tests.LimitationsTest.abstractClass":55,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":294,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":223,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":285,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":119,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":272}}]

[{"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[77],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[12,13,14,76,114,115,116,148,149,150,215,165,214],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[216,216,217,217,218,219,220,60,221,62,63,64,222,65,66,223,67,224,225,68,72,226,227,73,74,228,229,230,231,232,83,233,85,86,234,87,88,89,91,235,236,237,238,106,107,239,240,241,152,153,154,242,243,244,157,245,164,246,247,248,249,250,251,181],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"failures":[252],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:435","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n}","type":"CtForEachImpl"},"failures":[253,106,107,239,240],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[2,9,10,56,254,57,59,99,255],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:411","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[253],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:205","sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:207","sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cstr":"cstr"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"finalizeMethod","method":"finalizeMethod"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.InstanceOf:40","sourceCode":"java.lang.StringBuffer.append(((\"isA(\" + (java.lang.Class<?>.getName())) + \")\"))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[256,257,258],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[240],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"type":"type"}},{"transplant":{"position":"org.easymock.EasyMock:1568","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(T))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[259,45,46,47,48,260,49,50,51,52,53,261,54,262,263,55,56,264,265],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[1,2,3,4,5,6,7,266,218,267,268,269,219,220,8,270,9,10,11,12,271,272,13,14,273,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,274,41,42,43,44,45,46,47,48,260,49,50,51,52,53,54,263,55,56,57,58,60,221,61,62,63,64,65,67,68,69,70,275,276,71,277,278,279,280,281,282,283,284,285,286,287,288,73,228,229,289,75,76,290,77,78,291,292,293,294,80,295,83,296,233,85,86,234,297,87,88,89,90,91,235,236,237,238,96,97,298,98,99,100,101,106,107,113,299,114,300,301,115,116,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,142,144,146,147,148,149,150,151,152,153,154,265,155,156,157,160,161,162,163,302,303,304,165,305,306,307,308,309,310,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,311,312,184,185,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,313,314,212,213,315,316,317,318,319,320,321,255,322,323,214],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:82","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])));\n} ","type":"CtIfImpl"},"failures":[1,2,3,4,5,6,7,266,267,268,269,219,220,8,270,9,324,10,325,11,12,271,272,13,14,273,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,274,41,42,43,44,45,46,47,48,260,49,50,51,52,53,54,262,263,55,56,57,58,59,60,221,61,62,63,64,65,224,69,70,275,276,71,277,278,279,280,281,282,283,284,285,286,287,288,289,75,76,290,77,78,291,292,293,294,80,295,81,82,83,84,296,233,234,297,90,91,235,96,97,298,98,99,100,101,106,107,240,108,109,110,111,112,326,113,299,114,300,301,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,151,327,265,155,156,328,329,157,160,161,162,163,302,303,250,251,304,165,305,306,307,308,309,310,166,167,168,169,170,330,171,172,173,174,175,176,177,178,179,180,181,182,183,311,312,184,185,186,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,313,314,212,213,315,316,317,318,319,320,321,255,322,323],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:47","sourceCode":"this.T = T","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"potentialValue":"potentialValue"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:47","sourceCode":"java.lang.StringBuffer.append(((((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol())) + \" 0\"))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:36","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[272,294,301,309],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[331,97,332],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (this.int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[272,13,301,115,148],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"minimum":"minimum"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[216,216,217,217,218,221,222,223,67,224,68,333,72,226,227,73,228,229,231,334,232,89,235,236,237,238,335,336,337,338,339,106,239,152,153,154,157,181],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"method"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:184","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; ++int) {\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n    } \n    if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n        return false;\n    } \n}","type":"CtForImpl"},"failures":[340,341,342,343,344,345,346],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:89","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[223,67,333,347,73],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"m","name":"methodName"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[35,63,78,348],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":22,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":304,"org.easymock.tests2.UsageTest.argumentsOrdered":294,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":286,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":141,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":332,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":78,"org.easymock.tests2.StubTest.stubWithReturnValue":101,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":341,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":267,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":41,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":127,"org.easymock.tests2.SerializationTest.testAllMockedMethod":91,"org.easymock.tests2.DelegateToTest.testReturnException":96,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":139,"org.easymock.tests.MockingTest.testPartialClassMocking":152,"org.easymock.samples.SupportTest.voteForRemovals":269,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":253,"org.easymock.tests.MockClassControlTest.testToString":246,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":225,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":204,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":236,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":192,"org.easymock.tests.UsageExpectAndThrowTest.object":202,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":270,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":39,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":342,"org.easymock.tests2.DelegateToTest.testWrongClass":298,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":185,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":186,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":28,"org.easymock.tests2.UsageTest.wrongArguments":290,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":182,"org.easymock.tests.UsageStrictMockTest.range":301,"org.easymock.samples.ConstructorCalledMockTest.testTax":216,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":104,"org.easymock.samples.ExampleTest.answerVsDelegate":2,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":244,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":233,"org.easymock.tests2.UsageConstraintsTest.testNull":24,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":203,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":62,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":285,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":251,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":228,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":335,"org.easymock.tests2.CaptureTest.testPrimitive":48,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":184,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":308,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":211,"org.easymock.tests.UsageTest.moreThanOneArgument":165,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":61,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":103,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":110,"org.easymock.tests2.CaptureTest.testCaptureNone":52,"org.easymock.tests.UsageUnorderedTest.message":313,"org.easymock.tests.UsageVerifyTest.twoReturns":150,"org.easymock.tests.UsageVarargTest.varargByteAccepted":173,"org.easymock.tests2.ThreadingTest.testThreadSafe":69,"org.easymock.tests.UsageTest.argumentsOrdered":309,"org.easymock.tests.UsageVarargTest.varargIntAccepted":168,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":163,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":219,"org.easymock.tests2.CaptureTest.testCapture_2617107":47,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":176,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":346,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":72,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":215,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":312,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":74,"org.easymock.tests2.UsageConstraintsTest.any":29,"org.easymock.tests2.StubTest.stub":100,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":180,"org.easymock.tests.UsageExpectAndThrowTest.longType":195,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":140,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":257,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":348,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":271,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":296,"org.easymock.tests2.SerializationTest.testClass":89,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":273,"org.easymock.tests.LimitationsTest.mockNativeMethod":157,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":239,"org.easymock.tests2.AnswerTest.answer":56,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":137,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":18,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":338,"org.easymock.tests2.CaptureTest.testAnd":45,"org.easymock.tests2.UsageTest.strictResetToDefault":75,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":66,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":14,"org.easymock.tests2.NameTest.nameForMocksControl":95,"org.easymock.tests2.MockedExceptionTest.testMockedException":82,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":109,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":281,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":146,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":307,"org.easymock.tests2.DelegateToTest.testDelegate":98,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":324,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":196,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":154,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":60,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":229,"org.easymock.tests.MockingTest.testNicePartialClassMocking":153,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":207,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":64,"org.easymock.tests2.CaptureTest.testCaptureLast":51,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":142,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":88,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":27,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":40,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":191,"org.easymock.tests.MockingTest.testTwoMocks":241,"org.easymock.tests2.CaptureTest.testCapture1_2446744":260,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":118,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":205,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":200,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":16,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":293,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":43,"org.easymock.tests.UsageThrowableTest.throwError":314,"org.easymock.tests.UsageStrictMockTest.differentMethods":115,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":275,"org.easymock.tests2.MockBuilderTest.testCreateMockString":232,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":245,"org.easymock.tests.UsageExpectAndThrowTest.floatType":194,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":112,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":35,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":57,"org.easymock.tests.UsageVerifyTest.twoThrows":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":237,"org.easymock.samples.PartialClassMockTest.testGetArea":218,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":177,"org.easymock.samples.ExampleTest.voteAgainstRemoval":4,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":67,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":242,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":193,"org.easymock.tests2.UsageTest.niceToStrict":77,"org.easymock.tests2.UsageConstraintsTest.testNotNull":42,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":319,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":81,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":73,"org.easymock.tests2.MockBuilderTest.testCreateMock":230,"org.easymock.tests2.UsageTest.defaultResetToNice":79,"org.easymock.samples.ExampleTest.voteAgainstRemovals":1,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":133,"org.easymock.tests.UsageVarargTest.differentLength":330,"org.easymock.tests2.CallbackTest.callback":99,"org.easymock.tests.UsageTest.openCallCountByLastCall":306,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":201,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":282,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":19,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":158,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":311,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":102,"org.easymock.tests.UsageCallCountTest.tooFewCalls":161,"org.easymock.tests.UsageOverloadedMethodTest.overloading":155,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":323,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":33,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":265,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":234,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":129,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":32,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":53,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":105,"org.easymock.tests.UsageThrowableTest.throwCheckedException":316,"org.easymock.tests.MockClassControlTest.testEquals":250,"org.easymock.tests2.EasyMockSupportClassTest.testAll":235,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":107,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":209,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":336,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":17,"org.easymock.tests2.CaptureTest.testCaptureAll":46,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":189,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":327,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":87,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":86,"org.easymock.tests2.UsageConstraintsTest.testMatches":34,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":297,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":59,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":111,"org.easymock.samples.ExampleTest.voteForRemovals":6,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":345,"org.easymock.tests2.NameTest.nameForNiceMock":94,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":71,"org.easymock.tests.UsageVarargTest.allKinds":175,"org.easymock.tests2.DependencyTest.testInterfaceMocking":8,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":148,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":344,"org.easymock.samples.BasicClassMockTest.testPrintContent":220,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":190,"org.easymock.samples.ExampleTest.addDocument":5,"org.easymock.tests2.DelegateToTest.testStubDelegate":97,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":318,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":325,"org.easymock.tests2.AnswerTest.stubAnswer":58,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":143,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":114,"org.easymock.tests2.UsageConstraintsTest.greaterThan":36,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":145,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":224,"org.easymock.tests.UsageVarargTest.varargLongAccepted":172,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":116,"org.easymock.samples.ExampleTest.voteForRemoval":3,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":70,"org.easymock.tests.UsageExpectAndReturnTest.floatType":120,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":136,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":334,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":222,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":68,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":217,"org.easymock.tests.UsageThrowableTest.noUpperLimit":212,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":37,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":289,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":20,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":181,"org.easymock.tests2.SerializationTest.test":90,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":49,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":279,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":213,"org.easymock.tests2.UsageConstraintsTest.testSame":25,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":119,"org.easymock.samples.SupportTest.addDocument":268,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":138,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":331,"org.easymock.tests2.CaptureTest.testCaptureFirst":55,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":280,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":295,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":125,"org.easymock.tests.GenericTest.testPackageScope":106,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":276,"org.easymock.tests2.CaptureTest.testCapture2_2446744":263,"org.easymock.tests2.UsageTest.moreThanOneArgument":76,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":231,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":174,"org.easymock.tests.GenericTest.testBridgedEquals":240,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":302,"org.easymock.tests2.NameTest.nameForMock":92,"org.easymock.tests.UsageExpectAndReturnTest.longType":121,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":277,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":187,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":210,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":130,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":274,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":0,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":208,"org.easymock.tests2.UsageStrictMockTest.differentMethods":13,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":108,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":122,"org.easymock.tests.UsageCallCountTest.tooManyCalls":303,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":258,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":206,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":328,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":147,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":160,"org.easymock.tests2.MockedExceptionTest.testRealException":84,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":126,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":197,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":12,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":317,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":183,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":85,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":347,"org.easymock.tests2.NameTest.nameForStrictMock":93,"org.easymock.tests2.UsageConstraintsTest.testContains":31,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":159,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":83,"org.easymock.tests2.UsageConstraintsTest.testFind":23,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":156,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":9,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":63,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":326,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":10,"org.easymock.tests.UsageExpectAndReturnTest.object":128,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":38,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":65,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":226,"org.easymock.tests2.UsageStrictMockTest.range":272,"org.easymock.tests2.UsageConstraintsTest.lessThan":44,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":284,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":343,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":170,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":329,"org.easymock.tests.UsageTest.exactCallCountByLastCall":310,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":333,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":151,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":278,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":252,"org.easymock.tests2.CaptureTest.testCaptureRightOne":54,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":320,"org.easymock.tests2.UsageConstraintsTest.testOr":26,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":340,"org.easymock.tests.UsageRangeTest.combination":144,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":221,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":134,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":166,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":322,"org.easymock.tests.UsageTest.wrongArguments":305,"org.easymock.tests.MockClassControlTest.testHashCode":249,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":164,"org.easymock.tests2.EasyMockSupportTest.testVerify":288,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":123,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":131,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":256,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":321,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":255,"org.easymock.tests.UsageVarargTest.varargShortAccepted":171,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":15,"org.easymock.tests2.UsageConstraintsTest.cmpTo":30,"org.easymock.tests.UsageVarargTest.varargCharAccepted":169,"org.easymock.tests2.CaptureTest.testCaptureMultiple":259,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":254,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":11,"org.easymock.tests2.UsageTest.openCallCountByLastCall":291,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":292,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":287,"org.easymock.tests2.CaptureTest.testCaptureFromStub":262,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":227,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":199,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":339,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":315,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":299,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":162,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":132,"org.easymock.tests2.CaptureTest.testCapture":261,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":300,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":248,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":223,"org.easymock.tests2.UsageConstraintsTest.constraints":21,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":198,"org.easymock.samples.ExampleTest.addAndChangeDocument":7,"org.easymock.tests.CapturesMatcherTest.test":264,"org.easymock.tests.UsageStrictMockTest.testVerify":117,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":135,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":266,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":238,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":113,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":188,"org.easymock.tests2.UsageTest.resumeIfFailure":80,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":50,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":337,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":178,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":243,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":124,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":214,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":179,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":283,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":167}}]

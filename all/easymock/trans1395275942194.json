[{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:136","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[0,1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:71","sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","type":"CtIfImpl"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:51","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[3,25,26,27,28,29,30,31,32,32,33,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,4,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,8,9,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,11,12,13,181,182,183,184,185,186,187,188,189,190,191,14,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,16,18,20,21,23,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:310","sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","type":"CtReturnImpl"},"failures":[25,27,28,265,29,30,266,31,267,268,269,270,54,271,59,88,89,92,97,106,107,272,273,274,275,276,277,127,278,128,129,279,280,281,135,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,152,165,298,299,300,168,169,174,175,301,196,202,203,204,302,303,304,305,306,16,18,23,307,308,309,310,311,312,228,313,229,230,314,233,315,246,316,258],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[3,32,33,317,130,131,132,7,8,9,182,207,208,211,212],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[318,319,320],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"failures":[321],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[322,323,324,277,325,326],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1746","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"failures":[316,259,262,263],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1013","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[14,192,301],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"toStringMethod","equalsMethod":"toStringMethod"}},{"position":"org.easymock.EasyMock:1191","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Injector:72","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1815","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EndsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1776","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","type":"CtInvocationImpl"},"failures":[240],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"regex","key":"regex"}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[59,327,328,329,109,110,111,113,272,273,274,277,127,128,129,303,304,305,306,221,307,309,310,228,229,230],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:89","sourceCode":"return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object)","type":"CtReturnImpl"},"failures":[330,59,80,331,332,333,109,110,111,5,334,335,6,336,337,112,113,324,272,273,274,116,338,339,126,340,275,277,127,278,128,129,279,281,135,282,341,285,286,342,343,344,292,345,155,157,346,163,10,181,194,196,198,199,201,202,205,347,207,208,211,212,303,304,305,306,15,16,17,20,21,22,23,24,219,221,307,222,308,309,310,226,227,311,228,313,229,230,314,235,348,238,252],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"proxy"}},{"position":"org.easymock.internal.Range:36","failures":[3,25,26,27,28,265,29,349,30,266,31,267,32,33,268,269,270,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,350,57,351,317,58,271,4,352,330,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,353,354,355,356,357,0,358,359,360,361,362,363,364,365,366,367,368,369,370,93,94,95,371,372,331,332,333,373,374,375,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,5,376,377,334,335,6,336,337,112,113,324,272,114,115,273,274,116,117,118,119,120,121,122,123,338,124,125,339,126,340,275,276,277,127,278,128,129,279,280,378,379,380,130,131,381,132,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,133,401,402,403,404,405,134,406,281,407,135,282,283,284,341,285,286,136,137,138,139,140,141,142,143,408,342,409,410,343,344,411,412,413,414,415,416,417,418,419,420,421,422,144,145,146,147,148,149,150,151,287,288,289,423,290,291,292,293,294,295,296,297,152,153,424,425,154,426,345,155,427,156,157,158,159,160,161,7,428,162,429,430,346,8,9,163,431,10,164,165,298,166,167,299,300,168,169,170,171,172,173,174,175,176,177,178,179,432,433,434,180,435,436,11,437,438,439,440,441,442,443,444,445,12,446,447,448,449,450,13,451,452,181,182,183,184,185,186,187,188,189,190,191,14,192,301,193,194,195,196,197,198,199,200,201,202,203,204,302,453,454,455,456,457,205,347,458,459,460,461,462,206,207,208,209,463,210,211,212,464,465,303,304,305,306,213,214,215,216,217,218,15,466,16,17,467,468,18,19,20,469,21,470,471,22,23,472,24,473,474,475,476,477,478,479,219,220,221,307,222,308,223,224,225,309,310,226,227,311,312,228,313,229,230,314,480,481,482,483,484,485,231,232,233,234,486,487,488,489,490,235,348,491,492,493,494,495,236,237,238,239,496,240,241,242,243,244,245,315,246,247,248,249,250,251,252,253,254,255,256,257,316,258,259,260,261,497,262,498,263,264,499,500],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[3,32,32,33,33,268,269,58,271,4,92,372,5,6,380,130,131,132,154,156,157,159,160,161,7,162,346,8,9,163,180,11,12,13,184,14,301,501,206,207,208,209,211,212,15,502,16,17,18,19,20,21,22,23,503,24,264],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[164,298,166,167,299,300,168,170,504,171,172,174],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:108","sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"failures":[14,192,301],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"toStringMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[93,94,95],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:39","sourceCode":"return int <= 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"failures":[505],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"this.org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"threadSafe"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[506,236,253,258],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:67","sourceCode":"final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:602","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[322,323,324,277,325,326],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[3,25,26,27,28,265,29,349,30,266,31,267,32,33,268,269,270,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,350,57,351,317,58,271,4,352,330,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,353,354,355,356,357,0,358,359,360,361,362,363,364,365,366,367,368,369,370,93,94,95,371,372,331,332,333,373,374,375,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,5,376,377,334,335,6,336,337,112,113,324,272,114,115,273,274,116,117,118,119,120,121,122,123,338,124,125,339,126,340,275,276,277,127,278,128,129,279,280,378,379,380,130,131,381,132,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,133,401,402,403,404,405,134,406,281,407,135,282,283,284,341,285,286,136,137,138,139,140,141,142,143,408,342,409,410,343,344,411,412,413,414,415,416,417,418,419,420,421,422,144,145,146,147,148,149,150,151,287,288,289,423,290,291,292,293,294,295,296,297,152,153,424,425,154,426,345,155,427,156,157,158,159,160,161,7,428,162,429,430,346,8,9,163,431,10,164,165,298,166,167,299,300,168,169,170,171,172,173,174,175,176,177,178,179,432,433,434,180,435,436,11,437,438,439,440,441,442,443,444,445,12,446,447,448,449,450,13,451,452,181,182,183,184,185,186,187,188,189,190,191,14,192,301,193,194,195,196,197,198,199,200,201,202,203,204,302,453,454,455,456,457,205,347,458,459,460,461,462,206,207,208,209,463,210,211,212,464,465,303,304,305,306,213,214,215,216,217,218,15,466,16,17,467,468,18,19,20,469,21,470,471,22,23,472,24,473,474,475,476,477,478,479,219,220,221,307,222,308,223,224,225,309,310,226,227,311,312,228,313,229,230,314,480,481,482,483,484,485,231,232,233,234,486,487,488,489,490,235,348,491,492,493,494,495,236,237,238,239,496,240,241,242,243,244,245,315,246,247,248,249,250,251,252,253,254,255,256,257,316,258,259,260,261,497,262,498,263,264,499,500],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:233","failures":[3,25,26,27,28,265,29,30,266,31,267,32,32,33,33,268,269,270,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,271,4,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,272,114,115,273,274,116,117,118,119,120,121,122,123,124,125,126,275,276,277,127,278,128,129,279,280,130,131,132,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,133,401,402,403,404,405,134,406,281,135,282,283,284,285,286,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,287,288,289,290,291,292,293,294,295,296,297,152,153,154,156,157,158,159,160,161,162,8,9,163,164,165,298,166,167,299,300,168,169,170,171,172,173,174,175,176,177,178,179,180,11,12,13,181,182,183,184,185,186,187,188,189,190,191,14,192,301,193,194,195,196,197,198,199,200,201,202,203,204,302,205,206,207,208,209,210,211,212,303,304,305,306,213,214,215,216,217,218,16,18,20,21,23,219,220,221,307,222,308,223,224,225,309,310,226,227,311,312,228,313,229,230,314,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,315,246,247,248,249,250,251,252,253,254,255,256,257,316,258,259,260,261,262,263,264],"status":-1,"binaryOperator":"(org.easymock.internal.ExpectedInvocation) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:262","failures":[34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,85,93,94,95,96,98,99,100,101,102,103,106,107,110,112,115,117,118,119,120,121,122,125,138,149,150,151,182,183,184,185,219,224,234],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[177],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"this.org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[5],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[109,111,112,114,115,116,127,186,219,223,224,227,228],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[507,14,192,301],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1421","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:352","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[89,402],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"returnedType"}},{"position":"org.easymock.internal.Range:40","failures":[3,25,26,27,28,265,29,349,30,266,31,267,32,33,268,269,270,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,350,57,351,317,58,271,4,352,330,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,353,354,355,356,357,0,358,359,360,361,362,363,364,365,366,367,368,369,370,93,94,95,371,372,331,332,333,373,374,375,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,5,376,377,334,335,6,336,337,112,113,324,272,114,115,273,274,116,117,118,119,120,121,122,123,338,124,125,339,126,340,275,276,277,127,278,128,129,279,280,378,379,380,130,131,381,132,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,133,401,402,403,404,405,134,406,281,407,135,282,283,284,341,285,286,136,137,138,139,140,141,142,143,408,342,409,410,343,344,411,412,413,414,415,416,417,418,419,420,421,422,144,145,146,147,148,149,150,151,287,288,289,423,290,291,292,293,294,295,296,297,152,153,424,425,154,426,345,155,427,156,157,158,159,160,161,7,428,162,429,430,346,8,9,163,431,10,164,165,298,166,167,299,300,168,169,170,171,172,173,174,175,176,177,178,179,432,433,434,180,435,436,11,437,438,439,440,441,442,443,444,445,12,446,447,448,449,450,13,451,452,181,182,183,184,185,186,187,188,189,190,191,14,192,301,193,194,195,196,197,198,199,200,201,202,203,204,302,453,454,455,456,457,205,347,458,459,460,461,462,206,207,208,209,463,210,211,212,464,465,303,304,305,306,213,214,215,216,217,218,15,466,16,17,467,468,18,19,20,469,21,470,471,22,23,472,24,473,474,475,476,477,478,479,219,220,221,307,222,308,223,224,225,309,310,226,227,311,312,228,313,229,230,314,480,481,482,483,484,485,231,232,233,234,486,487,488,489,490,235,348,491,492,493,494,495,236,237,238,239,496,240,241,242,243,244,245,315,246,247,248,249,250,251,252,253,254,255,256,257,316,258,259,260,261,497,262,498,263,264,499,500],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1361","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"failures":[508,238,245,250,261],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[239],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:126","sourceCode":"java.lang.ClassLoader java.lang.ClassLoader = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[465],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"failures":[107,233],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1831","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(double , double))","type":"CtInvocationImpl"},"failures":[254],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[1],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[164,298,171,238,239,241,243,244,315,255,259],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[164,298,166,167,299,300,168,170,504,171,172,174],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":239,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":112,"org.easymock.tests2.UsageTest.argumentsOrdered":310,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":203,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":348,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":395,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":308,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":270,"org.easymock.tests2.DelegateToTest.testReturnException":214,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":118,"org.easymock.tests.MockingTest.testPartialClassMocking":130,"org.easymock.tests.MockClassControlTest.testToString":331,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":465,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":403,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":440,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":34,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":11,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":327,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":232,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":245,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":104,"org.easymock.tests2.UsageTest.wrongArguments":307,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":462,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":364,"org.easymock.samples.ExampleTest.answerVsDelegate":26,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":6,"org.easymock.tests2.UsageConstraintsTest.testNull":241,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":383,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":159,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":202,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":375,"org.easymock.tests2.CaptureTest.testPrimitive":166,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":108,"org.easymock.tests.UsageTest.moreThanOneArgument":113,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":53,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":158,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":141,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":87,"org.easymock.tests.UsageTest.argumentsOrdered":274,"org.easymock.tests.UsageVarargTest.varargIntAccepted":289,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":400,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":144,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":15,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":494,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":475,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":19,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":387,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":148,"org.easymock.tests.ReplayStateInvalidUsageTest.times":419,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":205,"org.easymock.tests2.DependencyTest.testClassMocking":484,"org.easymock.tests2.AnswerTest.answer":186,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":315,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":401,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":483,"org.easymock.tests2.CaptureTest.testAnd":164,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":377,"org.easymock.tests2.UsageTest.strictResetToDefault":220,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":467,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":346,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":140,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":82,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":197,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":91,"org.easymock.tests2.DelegateToTest.testDelegate":218,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":49,"org.easymock.tests.LimitationsTest.mockFinalMethod":426,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":121,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":370,"org.easymock.tests2.DependencyTest.testClassMockingSupport":485,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":345,"org.easymock.tests2.CaptureTest.testCapture1_2446744":167,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":428,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":47,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":481,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":413,"org.easymock.tests.UsageThrowableTest.throwError":96,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":335,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":495,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":361,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":452,"org.easymock.samples.PartialClassMockTest.testGetArea":3,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":414,"org.easymock.tests.MockingTest.testInterfaceMocking":381,"org.easymock.tests2.CompareToTest.testLessOrEqual":506,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":145,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":441,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":35,"org.easymock.tests2.UsageTest.niceToStrict":222,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":344,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":385,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":318,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":18,"org.easymock.tests2.MockBuilderTest.testCreateMock":22,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":448,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":459,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":43,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":325,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":198,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":376,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":151,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":281,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":362,"org.easymock.tests.UsageOverloadedMethodTest.overloading":137,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":450,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":445,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":125,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":250,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":136,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":71,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":1,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":249,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":170,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":423,"org.easymock.tests2.EasyMockSupportClassTest.testAll":180,"org.easymock.tests.MockClassControlTest.testEquals":374,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":271,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":51,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":482,"org.easymock.tests2.CaptureTest.testCaptureAll":165,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":368,"org.easymock.tests.MockNameTest.defaultName":330,"org.easymock.tests2.UsageConstraintsTest.testMatches":251,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":411,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":142,"org.easymock.samples.ExampleTest.voteForRemovals":29,"org.easymock.tests.UsageVarargTest.allKinds":297,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":109,"org.easymock.samples.BasicClassMockTest.testPrintContent":269,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":369,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":102,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":311,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":491,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":122,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":217,"org.easymock.tests2.UsageConstraintsTest.greaterThan":253,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":435,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":81,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":163,"org.easymock.samples.ExampleTest.voteForRemoval":27,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":360,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":431,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":176,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":336,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":476,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":7,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":92,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":219,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":471,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":392,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":195,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":433,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":117,"org.easymock.tests2.CaptureTest.testCaptureFirst":174,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":213,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":391,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":196,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":227,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":340,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":67,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":178,"org.easymock.tests2.CaptureTest.testCapture2_2446744":173,"org.easymock.tests2.UsageTest.moreThanOneArgument":221,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":402,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":23,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":296,"org.easymock.tests.GenericTest.testBridgedEquals":352,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":285,"org.easymock.tests.UsageExpectAndReturnTest.longType":63,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":193,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":366,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":503,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":52,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":86,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":316,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":50,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":139,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":94,"org.easymock.tests.UsageCallCountTest.tooManyCalls":286,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":135,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":449,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":68,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":461,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":39,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":101,"org.easymock.tests.MockingTest.testNiceClassMocking":384,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":207,"org.easymock.tests.MockingTest.testClassMocking":379,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":502,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":407,"org.easymock.tests2.UsageConstraintsTest.testContains":248,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":184,"org.easymock.tests2.UsageConstraintsTest.testFind":240,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":138,"org.easymock.tests.MockTypeTest.fromEasyMockClass":334,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":263,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":275,"org.easymock.tests.UsageExpectAndReturnTest.object":70,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":162,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":460,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":201,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":291,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":410,"org.easymock.tests.UsageTest.exactCallCountByLastCall":116,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":390,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":88,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":350,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":499,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":76,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":287,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":124,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":487,"org.easymock.tests.MockClassControlTest.testHashCode":373,"org.easymock.tests2.EasyMockSupportTest.testVerify":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":443,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":89,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":150,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":123,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":480,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":497,"org.easymock.tests.UsageVarargTest.varargCharAccepted":290,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":353,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":312,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":406,"org.easymock.tests2.UsageTest.openCallCountByLastCall":223,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":204,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":319,"org.easymock.tests.DefaultClassInstantiatorTest.object":354,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":149,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":444,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":41,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":99,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":456,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":486,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":8,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":333,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":40,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":77,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":93,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":13,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":332,"org.easymock.tests2.UsageTest.resumeIfFailure":226,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":5,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":474,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":120,"org.easymock.tests2.StubTest.stubWithReturnValue":234,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":469,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":69,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":258,"org.easymock.tests2.SerializationTest.testAllMockedMethod":301,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":133,"org.easymock.samples.SupportTest.voteForRemovals":31,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":326,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":317,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":489,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":46,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":507,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":134,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":187,"org.easymock.tests.UsageExpectAndThrowTest.object":44,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":351,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":256,"org.easymock.tests2.DelegateToTest.testWrongClass":216,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":152,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":153,"org.easymock.tests.UsageStrictMockTest.range":128,"org.easymock.samples.ConstructorCalledMockTest.testTax":32,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":478,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":200,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":206,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":45,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":432,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":421,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":273,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":363,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":322,"org.easymock.tests2.CaptureTest.testCaptureNone":169,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":56,"org.easymock.tests.UsageUnorderedTest.message":59,"org.easymock.tests.UsageVerifyTest.twoReturns":111,"org.easymock.tests.UsageVarargTest.varargByteAccepted":295,"org.easymock.tests2.ThreadingTest.testThreadSafe":175,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":446,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":284,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":268,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":343,"org.easymock.tests2.CaptureTest.testCapture_2617107":298,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":404,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":107,"org.easymock.tests2.UsageConstraintsTest.any":246,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":418,"org.easymock.tests2.StubTest.stub":233,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":405,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":119,"org.easymock.tests.UsageExpectAndThrowTest.longType":37,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":0,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":417,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":313,"org.easymock.tests2.SerializationTest.testClass":14,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":235,"org.easymock.tests.LimitationsTest.mockNativeMethod":154,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":4,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":79,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":455,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":314,"org.easymock.tests2.NameTest.nameForMocksControl":306,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":457,"org.easymock.tests2.MockedExceptionTest.testMockedException":183,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":436,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":115,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":498,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":132,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":38,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":156,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":21,"org.easymock.tests.MockingTest.testNicePartialClassMocking":131,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":161,"org.easymock.tests2.CompareToTest.testCompareEqual":505,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":453,"org.easymock.tests2.CaptureTest.testCaptureLast":168,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":155,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":212,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":244,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":257,"org.easymock.tests.MockingTest.testTwoMocks":380,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":464,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":60,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":42,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":309,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":260,"org.easymock.samples.ExampleTest.removeNonExistingDocument":349,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":458,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":415,"org.easymock.tests.UsageStrictMockTest.differentMethods":129,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":488,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":356,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":177,"org.easymock.tests2.MockBuilderTest.testCreateMockString":24,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":437,"org.easymock.tests.UsageExpectAndThrowTest.floatType":36,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":252,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":434,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":189,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":500,"org.easymock.tests.UsageVerifyTest.twoThrows":110,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":338,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":12,"org.easymock.samples.ExampleTest.voteAgainstRemoval":28,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":396,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":54,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":9,"org.easymock.tests.LimitationsTest.privateConstructor":425,"org.easymock.tests2.UsageConstraintsTest.testNotNull":259,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":182,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":103,"org.easymock.tests2.UsageTest.defaultResetToNice":225,"org.easymock.samples.ExampleTest.voteAgainstRemovals":25,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":397,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":75,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":454,"org.easymock.tests.UsageVarargTest.differentLength":292,"org.easymock.tests2.CallbackTest.callback":181,"org.easymock.tests2.UsageConstraintsTest.equals":496,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":429,"org.easymock.tests.UsageTest.openCallCountByLastCall":114,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":236,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":106,"org.easymock.tests.UsageCallCountTest.tooFewCalls":282,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":209,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":365,"org.easymock.tests.UsageThrowableTest.throwCheckedException":100,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":323,"org.easymock.tests.MockingTest.testStrictClassMocking":378,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":85,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":211,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":208,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":347,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":420,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":210,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":191,"org.easymock.tests2.CompareToTest.testGreateOrEqual":508,"org.easymock.tests.ObjectMethodsTest.testHashCode":409,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":179,"org.easymock.tests2.NameTest.nameForNiceMock":305,"org.easymock.tests2.DependencyTest.testInterfaceMocking":231,"org.easymock.samples.ExampleTest.addDocument":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":447,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":451,"org.easymock.tests2.DelegateToTest.testStubDelegate":215,"org.easymock.tests2.AnswerTest.stubAnswer":190,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":127,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":470,"org.easymock.tests.UsageVarargTest.varargLongAccepted":294,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":279,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":394,"org.easymock.tests.UsageExpectAndReturnTest.floatType":62,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":78,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":264,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":33,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":493,"org.easymock.tests.UsageThrowableTest.noUpperLimit":97,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":254,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":339,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":237,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":473,"org.easymock.tests2.SerializationTest.test":192,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":299,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":2,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":355,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":61,"org.easymock.tests2.UsageConstraintsTest.testSame":242,"org.easymock.samples.SupportTest.addDocument":266,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":463,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":416,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":438,"org.easymock.tests.GenericTest.testPackageScope":58,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":90,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":389,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":492,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":382,"org.easymock.tests2.NameTest.nameForMock":303,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":72,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":472,"org.easymock.tests2.UsageStrictMockTest.differentMethods":230,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":430,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":64,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":48,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":408,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":83,"org.easymock.tests2.MockedExceptionTest.testRealException":185,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":337,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":479,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":399,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":398,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":228,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":422,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":105,"org.easymock.tests2.NameTest.nameForStrictMock":304,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":468,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":262,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":320,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":160,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":477,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":255,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":328,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":357,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":16,"org.easymock.tests2.UsageStrictMockTest.range":229,"org.easymock.tests2.UsageConstraintsTest.lessThan":261,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":490,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":393,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":442,"org.easymock.tests2.CaptureTest.testCaptureRightOne":171,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":321,"org.easymock.tests2.UsageConstraintsTest.testOr":243,"org.easymock.tests.UsageRangeTest.combination":80,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":157,"org.easymock.tests.UsageTest.wrongArguments":272,"org.easymock.tests2.MockBuilderTest.testWithConstructor":466,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":439,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":372,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":65,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":386,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":73,"org.easymock.tests.UsageVarargTest.varargShortAccepted":293,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":358,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":341,"org.easymock.tests2.UsageConstraintsTest.cmpTo":247,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":188,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":388,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":224,"org.easymock.tests2.CaptureTest.testCaptureFromStub":172,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":412,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":17,"org.easymock.tests.UsageTest.unexpectedCallWithArray":324,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":277,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":283,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":74,"org.easymock.tests2.CaptureTest.testCapture":504,"org.easymock.tests2.UsageConstraintsTest.constraints":238,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":278,"org.easymock.samples.ExampleTest.addAndChangeDocument":30,"org.easymock.tests.UsageStrictMockTest.testVerify":280,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":267,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":276,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":367,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":300,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":501,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":146,"org.easymock.tests.LimitationsTest.abstractClass":424,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":66,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":147,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":126,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":199,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":288,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":329}}]

[{"position":"org.easymock.internal.LastControl:92","failures":[0,1,2,3,4,5,6,7,8],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[9,10,11,12],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"failures":[13],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:120","sourceCode":"java.lang.StringBuilder.append(\"\\n  Unexpected method call \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[14,15],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"position":"org.easymock.internal.MockBuilder:89","failures":[16,17,18,19,20],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:93","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[21,22,23,24,25,26,27,28,29,30,31],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[32],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"actual","actual":"expected","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:124","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[9,10,11],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:72","sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","type":"CtReturnImpl"},"failures":[33,34,19,35,36,20,37,38,39,40,41,42,43,44,9,45,46,47,48],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1026","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Null:35","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"failures":[49,50,51,52],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[53,54,55],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[56,57,58,59,60,61],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[62,63,64,65,66,67,68,69,70,71,72,73,74,75,21,76,77,78,79,80,16,17,23,81,82,83,84,85,86,35,20,38,39,41,87,88,89,90,91,92,93,94,95,96,0,97,1,98,99,100,101,102,103,104,2,105,106,107,108,109,110,27,111,49,112,9,10,11,4,113,50,114,6,115,116,117,32,118,119,120,8,121,122,51,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,14,192,193,194,195,196,197,198,199,200,52,201,202,203,204,205,206,207,208,209,210,29,30,31,211,212,213,214,215,216,217,218,219,220,48,221,222,223,224,225],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.Range:36","failures":[62,63,64,65,66,67,68,69,70,71,72,73,74,226,227,228,229,230,75,21,76,77,78,79,33,231,80,232,233,22,16,17,23,234,235,236,237,81,238,239,82,240,83,241,84,242,85,243,244,245,246,247,248,249,86,250,251,252,253,254,255,34,256,35,36,257,258,20,37,38,259,39,260,261,40,41,262,43,263,264,265,266,267,268,269,270,271,87,88,89,272,273,90,274,91,275,276,277,278,92,279,280,281,93,282,283,94,284,285,24,286,287,25,26,288,289,95,290,291,292,293,294,96,295,296,297,298,299,0,97,1,98,99,100,101,102,103,104,2,300,301,105,106,107,108,109,302,110,27,111,28,303,304,305,49,112,306,307,9,10,11,308,309,3,4,310,113,50,114,5,6,115,7,116,117,311,32,118,312,119,120,313,8,121,122,51,123,124,314,315,125,126,316,127,128,129,317,318,130,131,132,319,133,320,134,135,136,137,138,139,321,322,323,324,325,140,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,141,142,143,144,145,146,357,358,359,360,361,362,363,364,365,366,367,368,369,147,148,370,149,371,372,373,374,150,375,376,377,378,151,379,380,381,382,383,384,385,386,387,388,389,152,390,391,392,393,394,153,154,395,155,396,397,398,399,156,400,401,402,403,157,404,405,406,407,408,409,410,411,412,413,158,159,160,161,162,163,164,414,165,415,166,167,416,168,417,418,419,169,420,421,422,423,424,425,426,427,428,429,430,431,170,171,432,433,434,172,173,174,435,175,176,436,437,438,439,440,441,442,177,443,45,444,445,446,447,46,448,449,450,451,452,453,454,178,179,180,181,182,183,184,185,455,186,187,456,457,458,459,460,461,462,463,464,188,465,466,189,190,191,14,192,193,194,467,195,196,468,197,198,199,200,52,469,56,57,58,59,470,60,471,61,472,201,202,47,473,203,474,475,476,477,478,479,204,205,206,207,208,209,210,480,481,482,483,484,485,486,29,30,487,31,488,489,490,53,54,55,211,212,491,492,493,213,214,215,216,217,218,494,219,220,48,221,222,223,224,225],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[9,10,11,12],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.Capture:134","failures":[495,496],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:93","sourceCode":"if (int == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[9,10,11,12],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"length":"i","clazz":"primitiveType"}},{"transplant":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[22],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"type"}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[260],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:261","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[342,344,353,354,356,383,384,385,482],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[13,308,120,123],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[127,131,132,137,186,187,497,464,188,189,190,14,205,208],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[233,130],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:39","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Float.java.lang.Class<java.lang.Float>.getName(), java.lang.Float.java.lang.Class<java.lang.Float>)","type":"CtInvocationImpl"},"failures":[9,10,11,12],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[7],"status":-1,"binaryOperator":"(((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[498,499,500,501,464,205],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:336","sourceCode":"org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[472],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[4,5,7],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:193","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isArray()) {\n        final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n                return false;\n            } \n            break;\n        } \n    } \n    if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MocksControl:189","failures":[64,66,67,69,70,33,22,86,34,37,38,39,41,43,275,276,277,278,3,125,127,128,129,130,131,132,133,320,136,137,138,140,386,387,388,389,186,187,457,458,459,460,461,462,464,188,189,190,191,14,479,205,207,208,209],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[38,263,108,27,413,426,427,428,46,456],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"proxy":"proxy"}},{"position":"org.easymock.EasyMock:1471","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[62,63,64,65,66,67,68,69,70,71,72,73,74,226,227,228,229,230,75,21,76,77,78,79,33,231,80,232,233,22,16,17,23,234,235,236,237,81,238,239,82,240,83,241,84,242,85,243,244,245,246,247,248,249,86,250,251,252,253,254,255,34,256,35,36,257,258,20,37,38,259,39,261,40,41,262,43,263,267,268,269,270,271,87,88,89,272,273,90,274,91,275,276,277,278,92,279,280,281,93,282,283,94,284,285,24,286,287,25,26,288,289,95,290,291,292,293,294,96,295,296,297,298,299,0,97,1,98,99,100,101,102,103,104,2,300,301,105,106,107,108,109,110,27,111,303,304,305,49,112,306,307,9,10,11,308,309,3,4,310,113,50,114,5,6,115,7,116,117,311,32,118,312,119,120,313,8,121,122,51,123,124,314,315,125,126,316,127,128,129,317,318,130,131,132,319,133,320,134,135,136,137,138,139,321,322,323,324,325,140,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,141,142,143,144,145,146,357,358,359,360,361,362,363,364,365,366,367,368,369,147,148,370,149,371,372,373,374,150,375,376,377,378,151,379,380,381,382,383,384,385,386,387,388,389,152,390,391,392,393,394,153,154,395,155,396,397,398,399,156,400,401,402,403,157,404,405,406,407,408,409,410,411,412,413,158,159,160,161,162,163,164,414,165,415,166,167,416,168,417,418,419,169,420,421,422,423,424,425,426,427,428,429,430,431,170,171,432,433,434,172,173,174,435,175,176,436,437,438,439,440,441,442,177,443,45,446,447,46,448,449,450,451,452,453,454,178,179,180,181,182,183,184,185,455,186,187,457,458,459,460,461,462,463,464,188,465,466,189,190,191,14,192,193,194,467,195,196,468,197,198,199,200,52,469,56,57,58,59,470,60,471,61,472,201,202,47,473,203,474,475,476,477,478,479,204,205,206,207,208,209,210,480,481,482,483,484,485,486,29,30,487,31,488,489,490,53,54,55,211,212,491,492,492,493,493,213,214,215,216,217,218,494,219,220,48,221,222,223,224,225],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[127,131,132,137,417,186,187,497,464,188,189,190,14,205,208],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1385","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[75,21,77,78,79,33,80,22,16,17,23,81,85,34,19,35,36,20,37,38,39,40,41,42,43,44,93,94,95,96,106,107,108,109,27,111,9,11,169,425,45,46,201,202,47,203,486,29,30,31,492,492,493,493,48,222,223],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"method","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1831","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(double , double))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[9,10,11,12],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:161","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    return java.lang.reflect.Constructor<T>;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:162","sourceCode":"return java.lang.reflect.Constructor<T>","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[13,308,120,123],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:83","sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arguments":"arguments"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:237","sourceCode":"return org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.reflect.Method.getParameterTypes())","type":"CtReturnImpl"},"failures":[472],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[22],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[231,502,503],"status":-1,"binaryOperator":"java.lang.String == null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":4,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":462,"org.easymock.tests2.UsageTest.argumentsOrdered":132,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":72,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":326,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":343,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":129,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":221,"org.easymock.tests2.DelegateToTest.testReturnException":82,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":440,"org.easymock.tests.MockingTest.testPartialClassMocking":29,"org.easymock.tests.MockClassControlTest.testToString":426,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":226,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":482,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":235,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":352,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":286,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":94,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":368,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":88,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":115,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":141,"org.easymock.tests2.UsageTest.wrongArguments":127,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":255,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":388,"org.easymock.samples.ExampleTest.answerVsDelegate":214,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":46,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":489,"org.easymock.tests2.UsageConstraintsTest.testNull":50,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":77,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":431,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":71,"org.easymock.tests2.CaptureTest.testPrimitive":98,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":145,"org.easymock.tests.UsageTest.moreThanOneArgument":463,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":382,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":76,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":476,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":450,"org.easymock.tests.UsageTest.argumentsOrdered":190,"org.easymock.tests.UsageVarargTest.varargIntAccepted":194,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":348,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":158,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":34,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":265,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":330,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":37,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":335,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":162,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":86,"org.easymock.tests.ReplayStateInvalidUsageTest.times":364,"org.easymock.tests2.DependencyTest.testClassMocking":270,"org.easymock.tests2.AnswerTest.answer":89,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":7,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":350,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":278,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":445,"org.easymock.tests2.CaptureTest.testAnd":0,"org.easymock.tests2.UsageTest.strictResetToDefault":126,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":22,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":257,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":475,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":391,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":66,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":454,"org.easymock.tests2.DelegateToTest.testDelegate":84,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":151,"org.easymock.tests.LimitationsTest.mockFinalMethod":420,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":177,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":461,"org.easymock.tests2.DependencyTest.testClassMockingSupport":271,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":436,"org.easymock.tests2.CaptureTest.testCapture1_2446744":99,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":231,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":377,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":276,"org.easymock.tests.UsageThrowableTest.throwError":178,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":358,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":447,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":456,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":331,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":478,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":296,"org.easymock.samples.PartialClassMockTest.testGetArea":48,"org.easymock.tests.MockingTest.testInterfaceMocking":487,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":359,"org.easymock.tests2.CompareToTest.testLessOrEqual":13,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":159,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":384,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":413,"org.easymock.tests2.UsageTest.niceToStrict":128,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":287,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":369,"org.easymock.tests2.ThreadingTest.testChangeDefault":502,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":333,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":20,"org.easymock.tests2.MockBuilderTest.testCreateMock":40,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":292,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":252,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":498,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":374,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":67,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":444,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":55,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":432,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":386,"org.easymock.tests.UsageOverloadedMethodTest.overloading":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":289,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":294,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":167,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":118,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":400,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":211,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":32,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":104,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":467,"org.easymock.tests.MockClassControlTest.testEquals":430,"org.easymock.tests2.EasyMockSupportClassTest.testAll":93,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":202,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":380,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":459,"org.easymock.tests2.CaptureTest.testCaptureAll":97,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":277,"org.easymock.tests.MockNameTest.defaultName":332,"org.easymock.tests2.UsageConstraintsTest.testMatches":312,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":477,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":146,"org.easymock.samples.ExampleTest.voteForRemovals":218,"org.easymock.tests.UsageVarargTest.allKinds":52,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":455,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":460,"org.easymock.samples.BasicClassMockTest.testPrintContent":223,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":184,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":320,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":443,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":241,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":327,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":471,"org.easymock.tests2.UsageConstraintsTest.greaterThan":120,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":282,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":390,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":23,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":61,"org.easymock.samples.ExampleTest.voteForRemoval":215,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":234,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":304,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":448,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":266,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":33,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":125,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":203,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":261,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":340,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":64,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":280,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":439,"org.easymock.tests2.CaptureTest.testCaptureFirst":105,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":339,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":65,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":133,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":417,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":397,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":49,"org.easymock.tests2.CaptureTest.testCapture2_2446744":301,"org.easymock.tests2.UsageTest.moreThanOneArgument":316,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":41,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":351,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":200,"org.easymock.tests.GenericTest.testBridgedEquals":473,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":175,"org.easymock.tests.UsageExpectAndReturnTest.longType":154,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":457,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":62,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":42,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":381,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":414,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":51,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":379,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":474,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":422,"org.easymock.tests.UsageCallCountTest.tooManyCalls":176,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":434,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":293,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":398,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":254,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":149,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":183,"org.easymock.tests.MockingTest.testNiceClassMocking":490,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":107,"org.easymock.tests.MockingTest.testClassMocking":485,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":433,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":19,"org.easymock.tests2.UsageConstraintsTest.testContains":311,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":81,"org.easymock.tests2.UsageConstraintsTest.testFind":113,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":491,"org.easymock.tests.MockTypeTest.fromEasyMockClass":446,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":479,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":299,"org.easymock.tests.UsageExpectAndReturnTest.object":156,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":80,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":253,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":70,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":196,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":411,"org.easymock.tests.UsageTest.exactCallCountByLastCall":191,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":170,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":338,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":481,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":451,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":243,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":404,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":192,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":166,"org.easymock.tests.MockClassControlTest.testHashCode":429,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":322,"org.easymock.tests2.EasyMockSupportTest.testVerify":74,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":26,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":452,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":165,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":54,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":275,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":242,"org.easymock.tests.UsageVarargTest.varargCharAccepted":195,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":469,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":134,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":356,"org.easymock.tests2.UsageTest.openCallCountByLastCall":317,"org.easymock.tests.DefaultClassInstantiatorTest.object":56,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":73,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":53,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":409,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":497,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":288,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":372,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":181,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":248,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":321,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":428,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":16,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":371,"org.easymock.tests.CapturesMatcherTest.test":496,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":405,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":421,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":427,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":96,"org.easymock.tests2.UsageTest.resumeIfFailure":319,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":45,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":264,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":442,"org.easymock.tests2.StubTest.stubWithReturnValue":307,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":259,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":399,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":123,"org.easymock.tests2.SerializationTest.testAllMockedMethod":11,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":349,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":499,"org.easymock.samples.SupportTest.voteForRemovals":225,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":472,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":324,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":376,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":12,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":355,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":272,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":483,"org.easymock.tests.UsageExpectAndThrowTest.object":150,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":121,"org.easymock.tests2.DelegateToTest.testWrongClass":83,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":163,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":164,"org.easymock.samples.ConstructorCalledMockTest.testTax":492,"org.easymock.tests.UsageStrictMockTest.range":208,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":268,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":69,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":106,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":375,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":38,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":189,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":279,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":366,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":387,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":500,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":385,"org.easymock.tests2.CaptureTest.testCaptureNone":103,"org.easymock.tests.UsageUnorderedTest.message":14,"org.easymock.tests.UsageVerifyTest.twoReturns":187,"org.easymock.tests.UsageVarargTest.varargByteAccepted":199,"org.easymock.tests2.ThreadingTest.testThreadSafe":303,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":290,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":174,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":412,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":222,"org.easymock.tests2.CaptureTest.testCapture_2617107":1,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":438,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":144,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":353,"org.easymock.tests2.UsageConstraintsTest.any":116,"org.easymock.tests2.StubTest.stub":306,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":363,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":423,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":441,"org.easymock.tests.UsageExpectAndThrowTest.longType":148,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":354,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":470,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":362,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":136,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":140,"org.easymock.tests2.SerializationTest.testClass":9,"org.easymock.tests.LimitationsTest.mockNativeMethod":169,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":407,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":47,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":247,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":139,"org.easymock.tests2.NameTest.nameForMocksControl":230,"org.easymock.tests2.MockedExceptionTest.testMockedException":237,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":249,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":283,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":466,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":31,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":298,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":370,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":75,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":39,"org.easymock.tests.MockingTest.testNicePartialClassMocking":30,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":79,"org.easymock.tests2.CaptureTest.testCaptureLast":102,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":245,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":437,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":111,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":6,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":122,"org.easymock.tests.MockingTest.testTwoMocks":486,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":28,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":393,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":373,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":131,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":314,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":503,"org.easymock.samples.ExampleTest.removeNonExistingDocument":494,"org.easymock.tests.UsageStrictMockTest.differentMethods":209,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":251,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":360,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":323,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":58,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":305,"org.easymock.tests2.MockBuilderTest.testCreateMockString":43,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":424,"org.easymock.tests.UsageExpectAndThrowTest.floatType":147,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":284,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":119,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":281,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":90,"org.easymock.tests.UsageVerifyTest.twoThrows":186,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":244,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":415,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":95,"org.easymock.samples.ExampleTest.voteAgainstRemoval":216,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":344,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":383,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":17,"org.easymock.tests.LimitationsTest.privateConstructor":419,"org.easymock.tests2.UsageConstraintsTest.testNotNull":124,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":185,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":236,"org.easymock.tests2.UsageTest.defaultResetToNice":130,"org.easymock.samples.ExampleTest.voteAgainstRemovals":213,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":157,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":345,"org.easymock.tests.UsageVarargTest.differentLength":468,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":246,"org.easymock.tests2.CallbackTest.callback":92,"org.easymock.tests2.UsageConstraintsTest.equals":310,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":232,"org.easymock.tests.UsageTest.openCallCountByLastCall":465,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":308,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":143,"org.easymock.tests.UsageCallCountTest.tooFewCalls":172,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":109,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":389,"org.easymock.tests.UsageThrowableTest.throwCheckedException":182,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":501,"org.easymock.tests.MockingTest.testStrictClassMocking":484,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":171,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":27,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":108,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":250,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":365,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":110,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":91,"org.easymock.tests.ObjectMethodsTest.testHashCode":410,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":112,"org.easymock.tests2.NameTest.nameForNiceMock":229,"org.easymock.tests2.DependencyTest.testInterfaceMocking":87,"org.easymock.samples.ExampleTest.addDocument":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":291,"org.easymock.tests2.DelegateToTest.testStubDelegate":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":295,"org.easymock.tests2.AnswerTest.stubAnswer":274,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":206,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":260,"org.easymock.tests.UsageVarargTest.varargLongAccepted":198,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":342,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":406,"org.easymock.tests.UsageExpectAndReturnTest.floatType":153,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":85,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":493,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":416,"org.easymock.tests.UsageThrowableTest.noUpperLimit":179,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":313,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":329,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":309,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":263,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":100,"org.easymock.tests2.SerializationTest.test":10,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":57,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":394,"org.easymock.tests2.UsageConstraintsTest.testSame":114,"org.easymock.samples.SupportTest.addDocument":224,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":302,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":361,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":285,"org.easymock.tests.GenericTest.testPackageScope":201,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":453,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":337,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":328,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":488,"org.easymock.tests2.NameTest.nameForMock":227,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":401,"org.easymock.tests2.UsageStrictMockTest.differentMethods":138,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":262,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":233,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":395,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":378,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":408,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":392,"org.easymock.tests2.MockedExceptionTest.testRealException":238,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":449,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":269,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":347,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":135,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":346,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":142,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":367,"org.easymock.tests2.NameTest.nameForStrictMock":228,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":258,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":297,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":78,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":267,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":8,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":15,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":59,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":35,"org.easymock.tests2.UsageStrictMockTest.range":137,"org.easymock.tests2.UsageConstraintsTest.lessThan":315,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":325,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":18,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":63,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":341,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":25,"org.easymock.tests2.CaptureTest.testCaptureRightOne":2,"org.easymock.tests2.UsageConstraintsTest.testOr":5,"org.easymock.tests.UsageRangeTest.combination":152,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":21,"org.easymock.tests.UsageTest.wrongArguments":188,"org.easymock.tests2.MockBuilderTest.testWithConstructor":256,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":24,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":425,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":155,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":402,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":334,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":60,"org.easymock.tests.UsageVarargTest.varargShortAccepted":197,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":435,"org.easymock.tests2.UsageConstraintsTest.cmpTo":117,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":273,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":336,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":318,"org.easymock.tests2.CaptureTest.testCaptureFromStub":300,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":357,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":36,"org.easymock.tests.UsageTest.unexpectedCallWithArray":464,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":205,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":173,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":403,"org.easymock.tests2.CaptureTest.testCapture":495,"org.easymock.tests2.UsageConstraintsTest.constraints":3,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":207,"org.easymock.samples.ExampleTest.addAndChangeDocument":219,"org.easymock.tests.UsageStrictMockTest.testVerify":480,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":220,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":204,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":458,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":101,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":160,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":44,"org.easymock.tests.LimitationsTest.abstractClass":418,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":396,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":168,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":161,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":68,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":193}}]

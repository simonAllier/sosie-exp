[{"position":"org.easymock.internal.ArgumentToString:46","failures":[0,1,2,3,4,5],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:159","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:59","sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"f":"targetField"}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:242","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[6,7,8,9,10,11,12],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ClassProxyFactory:191","failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],"status":-1,"binaryOperator":"org.easymock.ConstructorArgs != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1149","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[104,105,24,106],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[107,108,109,110,111,112,113,114,115],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,107,108,136,137,138,139,109,110,140,111,141,142,143,144,145,146,147,148,149,112,150,151,152,153,154,155,156,13,157,14,15,158,16,17,18,19,6,20,159,160,21,22,161,23,104,105,24,25,26,162,27,28,29,30,163,31,164,32,33,34,35,36,37,38,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,113,180,114,181,182,183,184,185,186,187,115,188,189,190,39,191,192,193,40,194,195,196,197,198,199,200,201,202,41,42,43,203,204,12,205,206,207,208,209,210,211,212,44,45,213,46,214,47,48,49,50,51,215,52,53,54,55,216,56,57,58,59,60,61,62,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,63,64,266,65,267,268,66,269,270,67,68,271,272,273,69,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,70,71,72,73,74,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,75,76,77,78,79,80,81,82,355,356,357,358,359,360,361,362,363,83,364,365,366,367,84,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,85,86,87,88,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,4,427,428,429,430,431,432,89,433,434,5,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,90,91,92,93,94,95,455,96,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,97,98,99,100,101,488,102,489,490,103,491,492,493,494,495,496,497],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:68","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:573","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"failures":[372],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"failures":[498],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[499],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg"}},{"position":"org.easymock.EasyMock:1333","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:583","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"failures":[416,441],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:97","sourceCode":"if ((org.easymock.internal.Result == null) && (boolean)) {\n    org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()));\n} ","type":"CtIfImpl"},"failures":[122,123,125,126,127,128,129,130,134,135,107,137,138,139,109,143,145,146,147,148,149,154,155,156,13,14,18,19,20,21,22,23,26,30,33,34,36,165,166,167,168,176,188,201,202,41,42,43,203,206,208,209,210,211,224,231,234,235,236,239,240,241,242,243,248,249,255,265,271,272,293,294,295,296,297,311,318,322,323,324,325,326,327,328,361,362,363,370,371,419,420,421,422,423,424,425,4,427,428,429,430,433,5,435,438,439,440,444,445,446,447,449,450,451,452,453,480,481,482,483,484,485,486,497],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[156,500],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:40","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(double.double, java.lang.Double.java.lang.Double)","type":"CtInvocationImpl"},"failures":[501],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidClassProxyFactory:43","sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:83","sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arguments":"arguments"}},{"transplant":{"position":"org.easymock.EasyMock:1928","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"failures":[145,151,156,500],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.EndsWith:40","sourceCode":"java.lang.StringBuffer.append(((\"endsWith(\\\"\" + (java.lang.String)) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[502],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","sourceCode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[90,91,92,93,95,96],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Equals:37","failures":[121,122,123,124,125,126,127,129,130,131,132,108,138,109,110,154,17,19,20,104,105,26,28,35,169,170,171,173,175,176,177,179,113,180,185,186,115,190,199,200,201,202,207,208,209,210,211,212,224,231,232,233,235,236,237,238,242,243,244,247,248,255,265,67,68,273,274,275,276,277,278,279,280,281,282,284,285,286,287,288,289,290,291,292,293,294,295,296,297,302,303,304,305,306,307,309,310,312,313,314,315,316,72,322,324,325,326,327,328,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,370,371,419,426,427,428,429,430,431,433,434,436,437,440,444,445,446,447,448,449,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,479,480,481,482,483,484,485,486,491,493,494],"status":-1,"binaryOperator":"(this.java.lang.Object) == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[104,105,24,106],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:126","sourceCode":"java.lang.ClassLoader java.lang.ClassLoader = null","type":"CtLocalVariableImpl"},"failures":[116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,107,108,136,137,138,139,109,110,140,111,141,142,143,144,145,146,147,148,149,112,150,151,152,153,154,155,156,503,504,505,506,507,508,13,14,15,16,17,18,19,20,160,21,22,23,104,105,24,25,26,162,27,28,29,30,163,31,164,32,33,34,35,36,37,38,165,166,167,168,169,509,170,171,172,173,174,175,176,177,178,179,113,180,114,181,182,183,184,185,186,187,115,188,189,190,39,191,192,40,194,195,197,198,199,200,201,202,41,42,43,203,204,12,206,207,208,209,210,211,212,44,45,213,46,214,47,48,49,50,51,215,52,53,54,55,216,56,57,58,59,60,61,62,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,63,64,266,65,267,268,66,269,270,67,68,271,272,273,69,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,70,71,72,73,74,318,319,320,321,322,323,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,75,76,77,78,79,80,81,82,355,356,357,358,359,360,361,362,363,83,364,365,366,367,84,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,85,86,87,88,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,4,427,428,429,430,431,432,89,433,434,5,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,90,91,92,93,94,95,96,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,97,98,99,100,101,488,102,489,490,103,491,492,493,494,495,496,497],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[532],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:196","sourceCode":"java.lang.reflect.Method.setAccessible(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[0,1,2,3,4,5],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.EasyMockProperties:62","failures":[116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,107,108,136,137,138,139,109,110,140,111,141,142,143,144,145,146,147,148,149,112,150,151,152,153,154,155,156,503,504,506,507,508,13,14,15,16,17,18,19,20,159,160,21,22,23,104,105,24,25,26,162,27,28,29,30,163,31,164,32,33,34,35,36,37,38,165,166,167,168,169,509,170,171,172,173,174,175,176,177,178,179,113,180,114,181,182,183,184,185,186,187,115,188,189,190,39,191,192,40,194,195,196,197,198,199,200,201,202,41,42,43,203,204,12,206,207,208,209,210,211,212,44,45,213,46,214,47,48,49,50,51,215,52,53,54,55,216,56,57,58,59,60,61,62,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,63,64,266,65,267,268,66,269,270,67,68,271,272,273,69,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,70,71,72,73,74,318,319,320,321,322,323,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,75,76,77,78,79,80,81,82,355,356,357,358,359,360,361,362,363,83,364,365,366,367,84,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,85,86,87,88,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,4,427,428,429,430,431,432,89,433,434,5,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,90,91,92,93,94,95,96,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,97,98,99,100,101,488,102,489,490,103,491,492,493,494,495,496,497],"status":-1,"binaryOperator":"java.io.InputStream != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,107,108,136,137,138,139,109,110,140,111,141,142,143,144,145,146,147,148,149,112,150,151,152,153,154,155,156,13,157,14,15,158,16,17,18,19,6,20,159,160,21,22,161,23,104,105,24,25,26,162,27,28,29,30,163,31,164,32,33,34,35,36,37,38,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,113,180,114,181,182,183,184,185,186,187,115,188,189,190,39,191,192,193,40,194,195,196,197,198,199,200,201,202,41,42,43,203,204,12,205,206,207,208,209,210,211,212,44,45,213,46,214,47,48,49,50,51,215,52,53,54,55,216,56,57,58,59,60,61,62,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,63,64,266,65,267,268,66,269,270,67,68,271,272,273,69,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,70,71,72,73,74,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,75,76,77,78,79,80,81,82,355,356,357,358,359,360,361,362,363,83,364,365,366,367,84,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,85,86,87,88,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,4,427,428,429,430,431,432,89,433,434,5,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,90,91,92,93,94,95,455,96,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,97,98,99,100,101,488,102,489,490,103,491,492,493,494,495,496,497],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[121,122,123,124,125,126,127,128,129,130,131,132,134,135,107,108,137,138,139,109,110,140,141,142,143,144,145,146,147,148,149,112,150,151,153,154,155,156,14,17,19,20,22,104,105,25,26,162,27,28,29,31,34,35,36,169,170,171,172,173,176,113,180,181,182,185,186,187,115,188,189,190,199,200,202,43,204,208,210,211,46,48,56,62,224,231,232,233,235,237,238,239,242,243,248,255,63,64,266,65,268,66,269,271,271,272,272,69,276,277,279,280,282,285,287,288,289,290,291,292,293,294,295,296,297,299,301,302,303,304,71,73,318,319,320,321,322,324,325,328,370,371,87,389,390,391,427,429,430,433,434,436,437,440,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,479,481,482,483,484,485,486,100,101,102,496],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[117,118,119,120,124,130,131,132,133,111,141,152,153,14,17,22,24,180,114,183,184,185,186,190,201,206,207,208,209,210,211,212,234,236,240,241,247,262,264,265,67,68,273,274,275,276,277,279,280,281,282,284,286,305,306,307,309,310,311,312,313,314,315,316,71,72,326,327,355,357,358,359,360,362,363,373,374,393,400,404,409,410,419,425,426,4,427,428,429,430,431,432,89,435,438,439],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[210,234,240,241,533,419,4,429,5,435,438,439,480,481],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[91,95],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:144","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findGenericDeclaration(java.lang.reflect.Method)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":108,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":433,"org.easymock.tests2.UsageTest.argumentsOrdered":241,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":131,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":256,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":402,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":236,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":273,"org.easymock.tests2.DelegateToTest.testReturnException":175,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":445,"org.easymock.tests.MockingTest.testPartialClassMocking":100,"org.easymock.tests.MockClassControlTest.testToString":77,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":116,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":299,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":411,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":38,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":215,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":48,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":335,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":200,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":531,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":7,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":140,"org.easymock.tests2.UsageTest.wrongArguments":234,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":324,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":230,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":452,"org.easymock.samples.ExampleTest.answerVsDelegate":278,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":84,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":490,"org.easymock.tests2.UsageConstraintsTest.testNull":138,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":27,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":130,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":82,"org.easymock.tests2.CaptureTest.testPrimitive":181,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":328,"org.easymock.tests.UsageTest.moreThanOneArgument":434,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":354,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":162,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":484,"org.easymock.tests.UsageTest.argumentsOrdered":439,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":372,"org.easymock.tests.UsageVarargTest.varargIntAccepted":307,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":407,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":293,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":11,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":13,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":192,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":260,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":18,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":394,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":297,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":515,"org.easymock.tests.ReplayStateInvalidUsageTest.times":385,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":224,"org.easymock.tests2.DependencyTest.testClassMocking":197,"org.easymock.tests2.AnswerTest.answer":244,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":111,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":409,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":168,"org.easymock.tests2.CaptureTest.testAnd":113,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":365,"org.easymock.tests2.UsageTest.strictResetToDefault":232,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":158,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":33,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":483,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":125,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":320,"org.easymock.tests2.DelegateToTest.testDelegate":179,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":376,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":514,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":350,"org.easymock.tests.LimitationsTest.mockFinalMethod":88,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":448,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":424,"org.easymock.tests2.DependencyTest.testClassMockingSupport":198,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":476,"org.easymock.tests2.CaptureTest.testCapture1_2446744":182,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":163,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":348,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":166,"org.easymock.tests.UsageThrowableTest.throwError":285,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":379,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":367,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":261,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":317,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":486,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":218,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":518,"org.easymock.samples.PartialClassMockTest.testGetArea":69,"org.easymock.tests.MockingTest.testInterfaceMocking":488,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":380,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":294,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":390,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":52,"org.easymock.tests2.UsageTest.niceToStrict":235,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":334,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":336,"org.easymock.tests2.ThreadingTest.testChangeDefault":509,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":392,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":17,"org.easymock.tests2.MockBuilderTest.testCreateMock":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":59,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":227,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":0,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":344,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":126,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":364,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":418,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":355,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":450,"org.easymock.tests.UsageOverloadedMethodTest.overloading":303,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":216,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":494,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":145,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":467,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":302,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":144,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":187,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":308,"org.easymock.tests2.EasyMockSupportClassTest.testAll":46,"org.easymock.tests.MockClassControlTest.testEquals":81,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":72,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":352,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":422,"org.easymock.tests2.CaptureTest.testCaptureAll":180,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":167,"org.easymock.tests.MockNameTest.defaultName":487,"org.easymock.tests2.UsageConstraintsTest.testMatches":146,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":485,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":377,"org.easymock.samples.ExampleTest.voteForRemovals":282,"org.easymock.tests.UsageVarargTest.allKinds":316,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":479,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":423,"org.easymock.samples.BasicClassMockTest.testPrintContent":68,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":291,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":206,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":449,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":178,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":257,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":501,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":455,"org.easymock.tests2.UsageConstraintsTest.greaterThan":148,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":214,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":319,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":36,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":519,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":96,"org.easymock.samples.ExampleTest.voteForRemoval":279,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":170,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":37,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":532,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":368,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":193,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":30,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":511,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":89,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":231,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":160,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":399,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":123,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":287,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":45,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":444,"org.easymock.tests2.CaptureTest.testCaptureFirst":190,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":174,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":398,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":124,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":243,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":497,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":463,"org.easymock.tests2.CaptureTest.testCapture2_2446744":189,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":172,"org.easymock.tests2.UsageTest.moreThanOneArgument":233,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":410,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":22,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":315,"org.easymock.tests.GenericTest.testBridgedEquals":74,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":499,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":362,"org.easymock.tests.UsageExpectAndReturnTest.longType":459,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":420,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":121,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":353,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":152,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":301,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":351,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":482,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":442,"org.easymock.tests.UsageCallCountTest.tooManyCalls":363,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":357,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":60,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":464,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":229,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":340,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":290,"org.easymock.tests.MockingTest.testNiceClassMocking":103,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":64,"org.easymock.tests.MockingTest.testClassMocking":98,"org.easymock.tests2.UsageConstraintsTest.testContains":143,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":356,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":43,"org.easymock.tests2.UsageConstraintsTest.testFind":137,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":304,"org.easymock.tests.MockTypeTest.fromEasyMockClass":366,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":425,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":264,"org.easymock.tests.UsageExpectAndReturnTest.object":466,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":31,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":228,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":129,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":8,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":310,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":332,"org.easymock.tests.UsageTest.exactCallCountByLastCall":440,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":322,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":397,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":298,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":373,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":12,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":472,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":305,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":493,"org.easymock.tests.MockClassControlTest.testHashCode":80,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":251,"org.easymock.tests2.EasyMockSupportTest.testVerify":133,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":54,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":374,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":491,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":417,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":165,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":196,"org.easymock.tests.UsageVarargTest.varargCharAccepted":309,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":454,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":207,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":415,"org.easymock.tests2.UsageTest.openCallCountByLastCall":237,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":132,"org.easymock.tests.DefaultClassInstantiatorTest.object":90,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":416,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":330,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":533,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":55,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":342,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":288,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":222,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":250,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":517,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":34,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":79,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":341,"org.easymock.tests.ReplayStateInvalidCallsTest.times":523,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":473,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":441,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":524,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":62,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":78,"org.easymock.tests2.UsageTest.resumeIfFailure":242,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":83,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":191,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":447,"org.easymock.tests2.StubTest.stubWithReturnValue":202,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":6,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":465,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":153,"org.easymock.tests2.SerializationTest.testAllMockedMethod":24,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":408,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":1,"org.easymock.samples.SupportTest.voteForRemovals":276,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":70,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":253,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":347,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":106,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":414,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":245,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":300,"org.easymock.tests.UsageExpectAndThrowTest.object":345,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":150,"org.easymock.tests2.DelegateToTest.testWrongClass":177,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":521,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":370,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":371,"org.easymock.tests.UsageStrictMockTest.range":429,"org.easymock.samples.ConstructorCalledMockTest.testTax":271,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":194,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":128,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":63,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":346,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":19,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":438,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":387,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":44,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":451,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":2,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":513,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":391,"org.easymock.tests2.CaptureTest.testCaptureNone":186,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":504,"org.easymock.tests.UsageUnorderedTest.message":419,"org.easymock.tests2.ConstraintsToStringTest.endsWithToString":502,"org.easymock.tests.UsageVerifyTest.twoReturns":481,"org.easymock.tests.UsageVarargTest.varargByteAccepted":314,"org.easymock.tests2.ThreadingTest.testThreadSafe":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":57,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":360,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":67,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":333,"org.easymock.tests2.CaptureTest.testCapture_2617107":114,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":478,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":412,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":327,"org.easymock.tests2.UsageConstraintsTest.any":141,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":384,"org.easymock.tests2.StubTest.stub":201,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":443,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":446,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":413,"org.easymock.tests.UsageExpectAndThrowTest.longType":338,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":94,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":383,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":209,"org.easymock.tests2.SerializationTest.testClass":104,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":255,"org.easymock.tests.LimitationsTest.mockNativeMethod":87,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":475,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":73,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":221,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":529,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":212,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":505,"org.easymock.tests2.NameTest.nameForMocksControl":120,"org.easymock.tests2.MockedExceptionTest.testMockedException":42,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":47,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":437,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":102,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":263,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":339,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":25,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":20,"org.easymock.tests.MockingTest.testNicePartialClassMocking":101,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":29,"org.easymock.tests2.CaptureTest.testCaptureLast":185,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":219,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":477,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":528,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":110,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":269,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":151,"org.easymock.tests.MockingTest.testTwoMocks":99,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":525,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":270,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":456,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":343,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":240,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":155,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":508,"org.easymock.samples.ExampleTest.removeNonExistingDocument":283,"org.easymock.tests.UsageStrictMockTest.differentMethods":430,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":226,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":381,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":252,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":507,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":92,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":171,"org.easymock.tests2.MockBuilderTest.testCreateMockString":23,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":49,"org.easymock.tests.UsageExpectAndThrowTest.floatType":337,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":147,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":213,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":247,"org.easymock.tests.UsageVerifyTest.twoThrows":480,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":205,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":492,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":56,"org.easymock.samples.ExampleTest.voteAgainstRemoval":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":403,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":389,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":35,"org.easymock.tests.LimitationsTest.privateConstructor":86,"org.easymock.tests2.UsageConstraintsTest.testNotNull":154,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":41,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":292,"org.easymock.tests2.UsageTest.defaultResetToNice":239,"org.easymock.samples.ExampleTest.voteAgainstRemovals":277,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":471,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":404,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":220,"org.easymock.tests.UsageVarargTest.differentLength":311,"org.easymock.tests2.CallbackTest.callback":265,"org.easymock.tests2.UsageConstraintsTest.equals":136,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":164,"org.easymock.tests.UsageTest.openCallCountByLastCall":436,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":134,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":326,"org.easymock.tests.UsageCallCountTest.tooFewCalls":358,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":65,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":453,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":506,"org.easymock.tests.UsageThrowableTest.throwCheckedException":289,"org.easymock.tests.MockingTest.testStrictClassMocking":97,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":3,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":66,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":323,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":225,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":266,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":386,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":268,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":249,"org.easymock.tests.ObjectMethodsTest.testHashCode":331,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":10,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":527,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":173,"org.easymock.tests2.NameTest.nameForNiceMock":119,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":522,"org.easymock.tests2.DependencyTest.testInterfaceMocking":199,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":9,"org.easymock.samples.ExampleTest.addDocument":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":58,"org.easymock.tests2.DelegateToTest.testStubDelegate":176,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":217,"org.easymock.tests2.AnswerTest.stubAnswer":248,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":427,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":159,"org.easymock.tests.UsageVarargTest.varargLongAccepted":313,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":431,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":401,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":474,"org.easymock.tests.UsageExpectAndReturnTest.floatType":458,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":204,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":272,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":495,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":149,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":259,"org.easymock.tests.UsageThrowableTest.noUpperLimit":286,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":135,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":39,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":183,"org.easymock.tests2.SerializationTest.test":105,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":91,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":457,"org.easymock.tests2.UsageConstraintsTest.testSame":139,"org.easymock.samples.SupportTest.addDocument":275,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":267,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":512,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":382,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":50,"org.easymock.tests.GenericTest.testPackageScope":71,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":375,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":396,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":258,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":489,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":510,"org.easymock.tests2.NameTest.nameForMock":117,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":468,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":161,"org.easymock.tests2.UsageStrictMockTest.differentMethods":211,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":32,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":460,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":349,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":329,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":321,"org.easymock.tests2.MockedExceptionTest.testRealException":203,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":369,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":406,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":195,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":405,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":208,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":388,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":325,"org.easymock.tests2.NameTest.nameForStrictMock":118,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":16,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":262,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":28,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":40,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":112,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":93,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":14,"org.easymock.tests2.UsageStrictMockTest.range":210,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":516,"org.easymock.tests2.UsageConstraintsTest.lessThan":156,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":498,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":254,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":400,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":122,"org.easymock.tests2.CaptureTest.testCaptureRightOne":115,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":53,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":503,"org.easymock.tests2.UsageConstraintsTest.testOr":109,"org.easymock.tests.UsageRangeTest.combination":318,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":26,"org.easymock.tests.UsageTest.wrongArguments":435,"org.easymock.tests2.MockBuilderTest.testWithConstructor":157,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":51,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":76,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":461,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":469,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":393,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":95,"org.easymock.tests.UsageVarargTest.varargShortAccepted":312,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":361,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":530,"org.easymock.tests2.UsageConstraintsTest.cmpTo":142,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":246,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":520,"org.easymock.tests2.CompareToTest.testLessThan":500,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":395,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":238,"org.easymock.tests2.CaptureTest.testCaptureFromStub":188,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":378,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":15,"org.easymock.tests.UsageTest.unexpectedCallWithArray":5,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":526,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":4,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":359,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":470,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":428,"org.easymock.tests2.UsageConstraintsTest.constraints":107,"org.easymock.samples.ExampleTest.addAndChangeDocument":284,"org.easymock.tests.UsageStrictMockTest.testVerify":432,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":274,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":426,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":421,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":184,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":295,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":462,"org.easymock.tests.LimitationsTest.abstractClass":85,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":496,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":296,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":127,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":306}}]

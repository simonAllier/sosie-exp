[{"failures":[],"variableMapping":{"name":"$anonymous0"},"name":"add","transplant":{"sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:410","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * See {@link EasyMock#cmp}\n * \n * @author Henri Tremblay\n */\npublic enum LogicalOperator {\nLESS_THAN(\"<\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int < 0;\n        }\n    }, LESS_OR_EQUAL(\"<=\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int <= 0;\n        }\n    }, EQUAL(\"==\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int == 0;\n        }\n    }, GREATER_OR_EQUAL(\">=\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int >= 0;\n        }\n    }, GREATER(\">\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int > 0;\n        }\n    };\n    private java.lang.String symbol;\n    private LogicalOperator(final java.lang.String symbol) {\n        this.java.lang.String = java.lang.String;\n    }\n    public java.lang.String getSymbol() {\n        return java.lang.String;\n    }\n\n    public abstract boolean matchResult(int result);\n}","position":"org.easymock.LogicalOperator:23","type":"CtEnumImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","position":"org.easymock.internal.EasyMockProperties:127","type":"CtTryImpl"},"status":-2},{"failures":[0,1,2,3,4,5],"variableMapping":{"name":"name"},"name":"add","transplant":{"sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:410","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>)","position":"org.easymock.internal.Injector:127","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:108","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Double>(double))","position":"org.easymock.EasyMock:1012","type":"CtInvocationImpl"},"status":-2},{"failures":[6],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","position":"org.easymock.EasyMockSupport:530","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Compare:52","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:198","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-7104607303959381785L","position":"org.easymock.internal.matchers.Find:28","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(short[]))","position":"org.easymock.EasyMock:1672","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:163","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<T>.get(0)","position":"org.easymock.Capture:85","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number","position":"org.easymock.internal.RecordState:207","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String))","name":"math","position":"org.easymock.internal.EasyMockProperties:116","type":"mutation","status":-2},{"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"variableMapping":{"position":"currentPosition"},"name":"replace","transplant":{"sourceCode":"int++","position":"org.easymock.internal.MocksBehavior:94","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:55","type":"CtOperatorAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : org.easymock.internal.Invocation.getArguments()) {\n    java.util.List<org.easymock.IArgumentMatcher>.add(new org.easymock.internal.matchers.Equals(java.lang.Object));\n}","position":"org.easymock.internal.ExpectedInvocation:61","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:174","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:215","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = new java.util.HashSet<org.easymock.internal.MethodSerializationWrapper>(java.util.Set<java.lang.reflect.Method>.size())","position":"org.easymock.internal.ClassProxyFactory:134","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:623","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return float","position":"org.easymock.EasyMock:1409","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ReflectionUtils:46","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:52","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","position":"org.easymock.EasyMock:1092","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove()","position":"org.easymock.internal.LastControl:51","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","position":"org.easymock.internal.matchers.Compare:55","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:137","type":"CtInvocationImpl"},"status":0},{"failures":[45,46,47,7,48,49,50],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.asStub()","position":"org.easymock.internal.MocksControl:326","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","position":"org.easymock.internal.MocksControl:285","type":"CtInvocationImpl"},"status":-1},{"failures":[51,52],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:136","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:392","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1234","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:137","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"replace","transplant":{"sourceCode":"return java.lang.Class<?>.getConstructors()[0]","position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])","position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"method","method":"method"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.ClassProxyFactory:90","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return true;\n} ","position":"org.easymock.internal.Results:52","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory()","position":"org.easymock.internal.MocksControl:111","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ExpectedInvocationAndResult.getResult()","position":"org.easymock.internal.MocksBehavior:67","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:86","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method != null ? org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>) : false","position":"org.easymock.internal.BridgeMethodResolver:145","type":"CtReturnImpl"},"status":-2},{"failures":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","position":"org.easymock.internal.matchers.NotNull:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:38","type":"CtInvocationImpl"},"status":-1},{"failures":[70,71,72,73,74,75,76],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.String + \".\") + java.lang.String","position":"org.easymock.internal.Invocation:154","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:86","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.MockBuilder:141","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.get()","position":"org.easymock.internal.LastControl:56","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","position":"org.easymock.internal.MockBuilder:210","type":"CtIfImpl"},"status":-2},{"failures":[77],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:450","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:399","type":"CtReturnImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:90","type":"CtAssignmentImpl"},"status":-2},{"failures":[78],"variableMapping":{"buffer":"buffer"},"name":"add","transplant":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.matchers.Or:54","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.And:49","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })))","position":"org.easymock.internal.DefaultClassInstantiator:189","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:196","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>()","position":"org.easymock.internal.LastControl:125","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Float.java.lang.Class<java.lang.Float>, java.lang.Float.java.lang.Float)","position":"org.easymock.internal.RecordState:64","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.Injection != null) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n} ","position":"org.easymock.internal.Injector:232","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:643","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:284","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-8447010713532143168L","position":"org.easymock.internal.matchers.CompareTo:30","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[79,80,81,82,83,84,85,86,87,88,89,90,91,92],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"int += 1","position":"org.easymock.internal.Results:68","type":"CtOperatorAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = java.lang.reflect.Constructor<?>.getParameterTypes()","position":"org.easymock.internal.ReflectionUtils:179","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","position":"org.easymock.internal.ArgumentToString:39","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:58","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","position":"org.easymock.internal.ReflectionUtils:230","type":"CtThrowImpl"},"status":-2},{"failures":[93,94,95,96,97,98,99,100,101,102,45,103,46,7,104,105,106,8,107,108,109,110,111,112,113,9,6,10,114,115,116,117,118,119,11,120,121,122,12,123,124,125,126,127,128,129,130,131,132,13,14,133,134,135,136,137,138,139,77,140,141,142,143,144,145,15,146,147,148,149,150,16,17,151,152,153,18,154,19,20,155,156,157,21,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,57,173,174,175,176,177,178,179,180,48,181,182,183,184,22,185,186,187,188,189,190,191,192,193,194,23,195,196,197,24,198,25,199,26,27,200,28,29,201,30,202,31,203,32,204,205,206,49,207,208,89,209,210,211,212,213,214,215,216,90,217,52,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,33,236,237,238,91,239,240,34,241,242,243,35,244,36,245,37,38,246,39,40,247,41,248,42,249,43,250,44,251,65,252,253,254,92,255,256,257,258,259,260,261,262,263,264,265,266],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Results:57","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Float>(float))","position":"org.easymock.EasyMock:1025","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.MocksBehavior:70","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1988","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Stack<org.easymock.internal.Invocation> java.util.Stack<org.easymock.internal.Invocation> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.get()","position":"org.easymock.internal.LastControl:132","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"ret":"ret","clazz":"clazz"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","position":"org.easymock.internal.ReflectionUtils:150","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","position":"org.easymock.internal.ReflectionUtils:148","type":"CtForEachImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:57","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:108","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","position":"org.easymock.internal.ReplayState:40","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(int))","position":"org.easymock.EasyMock:1530","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMockSupport.org.easymock.EasyMockSupport.injectMocks(java.lang.Object)","position":"org.easymock.internal.EasyMockStatement:42","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.matchers.Captures<?>.validateCapture()","position":"org.easymock.internal.Invocation:168","type":"CtInvocationImpl"},"status":-2},{"failures":[267,268],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","position":"org.easymock.internal.MocksControl:149","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:281","type":"CtIfImpl"},"status":-2},{"failures":[15,147,149,16,152],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","position":"org.easymock.EasyMock:1518","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"break","position":"org.easymock.Capture:121","type":"CtBreakImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(java.lang.Object[], 0, java.lang.Object[], int, int)","position":"org.easymock.internal.Invocation:64","type":"CtInvocationImpl"},"status":-2},{"failures":[6,269,121,12,123,124,135,139,77,141,21,70,57,173,174,270,271,234,33,236,237,91,239,240,65,92],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount())) {\n        return false;\n    } \n}","position":"org.easymock.internal.UnorderedBehavior:74","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Same:42","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>.getName(), java.lang.Character.java.lang.Class<java.lang.Character>)","position":"org.easymock.internal.MethodSerializationWrapper:36","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","position":"org.easymock.internal.ExpectedInvocation:106","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","position":"org.easymock.EasyMock:1079","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Results.getMainInterval()","position":"org.easymock.internal.Results:81","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","position":"org.easymock.internal.ErrorMessage:57","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Equals:44","type":"CtInvocationImpl"},"status":-2},{"failures":[141,144],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.reset()","position":"org.easymock.EasyMockSupport:552","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(long))","position":"org.easymock.EasyMock:1542","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:40","type":"CtIfImpl"},"status":-2},{"failures":[80,107,108,83,109,272,114,119,145,146,152],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","position":"org.easymock.internal.LastControl:95","type":"CtForImpl"},"status":-1},{"failures":[],"binaryOperator":"(\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")))","name":"math","position":"org.easymock.internal.matchers.Find:41","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:122","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1176","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n    int = java.lang.Integer.int;\n} else {\n    int += org.easymock.internal.Range.getMaximum();\n}","position":"org.easymock.internal.Results:94","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.Invocation.getMethod();\n    java.lang.reflect.Method.setAccessible(true);\n    return java.lang.reflect.Method.invoke(java.lang.Object, org.easymock.internal.Invocation.getArguments());\n} catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n    throw new java.lang.IllegalArgumentException(((((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\") + (org.easymock.internal.Invocation.getMethod())) + \"]\") , java.lang.IllegalArgumentException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw java.lang.reflect.InvocationTargetException.getCause();\n}","position":"org.easymock.internal.Result:81","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Class<?> java.lang.Class<?> : java.lang.Class<?>[]) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n        return true;\n    } \n}","position":"org.easymock.internal.RecordState:322","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:304","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:184","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","position":"org.easymock.internal.Range:41","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n} ","position":"org.easymock.internal.EasyMockProperties:47","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"cls":"parameterType","type":"parameterType"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","position":"org.easymock.internal.ReflectionUtils:189","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","position":"org.easymock.internal.BridgeMethodResolver:88","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","position":"org.easymock.internal.RecordState:129","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)","position":"org.easymock.internal.RecordState:97","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","position":"org.easymock.internal.Result:80","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)))","position":"org.easymock.Capture:124","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return true;\n} ","position":"org.easymock.internal.Results:52","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","position":"org.easymock.internal.ClassInstantiatorFactory:72","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","position":"org.easymock.internal.ClassInstantiatorFactory:79","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"interval":"interval"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.Range.getMinimum()","position":"org.easymock.internal.Results:93","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:71","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","position":"org.easymock.internal.ReplayState:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:324","type":"CtIfImpl"},"status":-2},{"failures":[109],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1348","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1106","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","position":"org.easymock.internal.ReplayState:40","type":"CtInvocationImpl"},"status":-2},{"failures":[108,272,114,119],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1458","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:116","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.Range org.easymock.internal.Range = java.util.LinkedList<org.easymock.internal.Range>.getLast()","position":"org.easymock.internal.Results:38","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"value":"key","properties":"properties","key":"key"},"name":"replace","transplant":{"sourceCode":"return ((java.lang.String)(this.java.util.Properties.setProperty(java.lang.String, java.lang.String)))","position":"org.easymock.internal.EasyMockProperties:122","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String)","position":"org.easymock.internal.EasyMockProperties:101","type":"CtReturnImpl"},"status":0},{"failures":[109,110],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","position":"org.easymock.internal.ReplayState:68","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1148","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1163","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1764","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.MethodSerializationWrapper:79","type":"CtReturnImpl"},"status":-2},{"failures":[273],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","position":"org.easymock.internal.RecordState:281","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:220","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.Results:57","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-3018631689416120154L","position":"org.easymock.internal.matchers.EqualsWithDelta:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.Results.getMainInterval().contains(org.easymock.internal.Results.getCallCount())","position":"org.easymock.internal.Results:81","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.easymock.internal.Invocation.(toStringIsDefined(java.lang.Object))) {\n    return java.lang.String;\n} ","position":"org.easymock.internal.Invocation:147","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","position":"org.easymock.internal.RecordState:77","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()))","position":"org.easymock.internal.ClassProxyFactory:108","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>.getName(), java.lang.Byte.java.lang.Class<java.lang.Byte>)","position":"org.easymock.internal.MethodSerializationWrapper:34","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1235","type":"CtReturnImpl"},"status":-2},{"failures":[274],"variableMapping":{"controls":"controls"},"name":"add","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : this.java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.replay();\n}","position":"org.easymock.EasyMockSupport:541","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToNice();\n}","position":"org.easymock.EasyMockSupport:572","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type != null) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} ","position":"org.easymock.internal.BridgeMethodResolver:338","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:622","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.JavaProxyFactory()","position":"org.easymock.internal.MocksControl:123","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{"position":"length"},"name":"replace","transplant":{"sourceCode":"int int = this.int","position":"org.easymock.internal.MocksBehavior:102","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = java.lang.Object[].int","position":"org.easymock.internal.Invocation:61","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:255","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?> != null) {\n    for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n        final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n        if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n            java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:381","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return (int) == (java.lang.Integer.int)","position":"org.easymock.internal.Range:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int <= 0","position":"org.easymock.LogicalOperator:33","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:317","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1093","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"Delegated to \" + java.lang.Object","position":"org.easymock.internal.Result:95","type":"CtReturnImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":210,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":131,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":235,"org.easymock.tests2.DependencyTest.testClassMockingSupport":268,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":233,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":248,"org.easymock.tests.UsageVarargTest.varargIntAccepted":259,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":238,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":8,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":101,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":189,"org.easymock.tests2.UsageConstraintsTest.testContains":84,"org.easymock.tests.UsageCallCountTest.tooManyCalls":194,"org.easymock.tests2.UsageConstraintsTest.testFind":81,"org.easymock.tests2.StubTest.stubWithReturnValue":102,"org.easymock.tests.UsageVarargTest.allKinds":266,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":149,"org.easymock.tests2.CaptureTest.testCaptureAll":15,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":219,"org.easymock.samples.ExampleTest.addAndChangeDocument":22,"org.easymock.tests.UsageVarargTest.varargCharAccepted":260,"org.easymock.tests.UsageVerifyTest.twoThrows":239,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":228,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":261,"org.easymock.tests2.DelegateToTest.testReturnException":45,"org.easymock.tests2.ConstraintsToStringTest.andToString":78,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":174,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":6,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":143,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":120,"org.easymock.tests2.CaptureTest.testAnd":145,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":37,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":49,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":151,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":40,"org.easymock.tests2.UsageConstraintsTest.testMatches":85,"org.easymock.tests2.UsageConstraintsTest.testNull":108,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":164,"org.easymock.tests2.EasyMockSupportClassTest.testAll":97,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":139,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":42,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":201,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":158,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":205,"org.easymock.tests.UsageThrowableTest.throwError":208,"org.easymock.tests2.UsageConstraintsTest.greaterThan":10,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":257,"org.easymock.samples.SupportTest.addDocument":186,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":231,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":3,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":224,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":227,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":114,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":140,"org.easymock.tests.UsageExpectAndReturnTest.object":200,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":204,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":265,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":124,"org.easymock.tests.UsageExpectAndThrowTest.object":246,"org.easymock.tests2.DelegateToTest.testWrongClass":46,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":155,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":50,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":61,"org.easymock.tests2.UsageTest.moreThanOneArgument":57,"org.easymock.tests.UsageVarargTest.varargByteAccepted":264,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":245,"org.easymock.tests.UsageTest.wrongArguments":67,"org.easymock.samples.ExampleTest.voteAgainstRemoval":182,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":213,"org.easymock.tests.UsageVarargTest.varargShortAccepted":262,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":4,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":39,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":62,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":53,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":133,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":223,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":156,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":188,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":163,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":157,"org.easymock.tests2.NameTest.nameForMocksControl":75,"org.easymock.tests2.SerializationTest.testAllMockedMethod":106,"org.easymock.samples.ExampleTest.voteAgainstRemovals":180,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":269,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":230,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":215,"org.easymock.tests2.CaptureTest.testCapture1_2446744":148,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":177,"org.easymock.tests2.DelegateToTest.testStubDelegate":103,"org.easymock.tests.LimitationsTest.mockNativeMethod":232,"org.easymock.tests.UsageUnorderedTest.message":44,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":47,"org.easymock.samples.ExampleTest.answerVsDelegate":48,"org.easymock.samples.ExampleTest.voteForRemoval":181,"org.easymock.tests.UsageCallCountTest.tooFewCalls":190,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":27,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":94,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":192,"org.easymock.tests.UsageVerifyTest.twoReturns":240,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":24,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":38,"org.easymock.tests2.DependencyTest.testInterfaceMocking":159,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":134,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":270,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":56,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":137,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":109,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":237,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":25,"org.easymock.tests2.CaptureTest.testCaptureRightOne":152,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":88,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":130,"org.easymock.tests2.UsageConstraintsTest.cmpTo":112,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":28,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":166,"org.easymock.tests.UsageThrowableTest.throwCheckedException":211,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":118,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":250,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":91,"org.easymock.samples.PartialClassMockTest.testGetArea":185,"org.easymock.samples.ExampleTest.voteForRemovals":184,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":209,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":90,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":9,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":207,"org.easymock.tests2.UsageTest.argumentsOrdered":60,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":129,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":251,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":96,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":198,"org.easymock.tests2.AnswerTest.answer":93,"org.easymock.tests.MockingTest.testNicePartialClassMocking":52,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":234,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":195,"org.easymock.tests2.UsageConstraintsTest.any":111,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":26,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":225,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":142,"org.easymock.tests.UsageExpectAndThrowTest.longType":243,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":14,"org.easymock.tests2.CallbackTest.callback":21,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":249,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":99,"org.easymock.tests2.NameTest.nameForMock":72,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":274,"org.easymock.tests.UsageTest.argumentsOrdered":69,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":107,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":162,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":113,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":32,"org.easymock.tests2.MockBuilderTest.testCreateMockString":71,"org.easymock.tests2.NameTest.nameForStrictMock":73,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":229,"org.easymock.tests2.CaptureTest.testCaptureNone":17,"org.easymock.tests2.SerializationTest.test":105,"org.easymock.tests.UsageExpectAndReturnTest.longType":197,"org.easymock.tests2.SerializationTest.testClass":104,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":150,"org.easymock.tests2.CaptureTest.testCaptureFirst":18,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":115,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":178,"org.easymock.tests2.EasyMockSupportTest.testVerify":144,"org.easymock.tests2.UsageTest.niceToStrict":173,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":5,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":271,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":244,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":117,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":171,"org.easymock.tests2.UsageTest.strictResetToDefault":172,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":247,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":70,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":132,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":203,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":34,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":110,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":168,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":199,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":86,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":128,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":258,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":125,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":218,"org.easymock.tests2.UsageConstraintsTest.testOr":83,"org.easymock.tests2.DelegateToTest.testDelegate":7,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":20,"org.easymock.tests2.UsageConstraintsTest.testNotNull":119,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":122,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":154,"org.easymock.tests2.CaptureTest.testCapture_2617107":146,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":2,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":29,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":214,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":220,"org.easymock.tests2.ThreadingTest.testThreadSafe":19,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":176,"org.easymock.tests.UsageThrowableTest.noUpperLimit":89,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":165,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":167,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":141,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":135,"org.easymock.tests.UsageExpectAndReturnTest.floatType":196,"org.easymock.tests2.UsageTest.wrongArguments":58,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":272,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":54,"org.easymock.tests2.UsageConstraintsTest.testSame":82,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":169,"org.easymock.tests.UsageOverloadedMethodTest.overloading":216,"org.easymock.tests.UsageRangeTest.combination":92,"org.easymock.samples.SupportTest.voteForRemovals":187,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":212,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":1,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":87,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":256,"org.easymock.tests.UsageTest.openCallCountByLastCall":252,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":36,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":76,"org.easymock.tests2.NameTest.nameForNiceMock":74,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":116,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":121,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":127,"org.easymock.tests2.CaptureTest.testPrimitive":147,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":30,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":41,"org.easymock.samples.BasicClassMockTest.testPrintContent":179,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":221,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":51,"org.easymock.tests.UsageExpectAndThrowTest.floatType":242,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":13,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":126,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":193,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":202,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":0,"org.easymock.tests.ExpectedMethodCallTest.testHashCode":273,"org.easymock.tests2.UsageStrictMockTest.differentMethods":123,"org.easymock.tests.UsageTest.exactCallCountByLastCall":254,"org.easymock.tests2.AnswerTest.stubAnswer":95,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":136,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":77,"org.easymock.tests2.CaptureTest.testCaptureLast":16,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":241,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":191,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":98,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":160,"org.easymock.tests.UsageStrictMockTest.range":33,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":253,"org.easymock.tests.UsageTest.unexpectedCallWithArray":66,"org.easymock.tests.MockingTest.testPartialClassMocking":217,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":31,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":59,"org.easymock.tests2.UsageConstraintsTest.constraints":80,"org.easymock.samples.ExampleTest.addDocument":183,"org.easymock.tests2.UsageConstraintsTest.lessThan":11,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":68,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":206,"org.easymock.tests.UsageVarargTest.varargLongAccepted":263,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":64,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":43,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":100,"org.easymock.tests2.UsageStrictMockTest.range":12,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":170,"org.easymock.tests2.DependencyTest.testClassMocking":267,"org.easymock.tests.UsageTest.moreThanOneArgument":65,"org.easymock.tests2.UsageTest.openCallCountByLastCall":175,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":222,"org.easymock.tests.UsageStrictMockTest.differentMethods":236,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":138,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":79,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":161,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":35,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":63,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":23,"org.easymock.tests2.CaptureTest.testCapture2_2446744":153,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":226,"org.easymock.tests.GenericTest.testPackageScope":255}}]

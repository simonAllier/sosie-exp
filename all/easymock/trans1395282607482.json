[{"transplant":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.ExpectedInvocation:85","failures":[180,5,14,19,181,182,21,22,23,29,183,31,32,33,34,35,36,184,185,186,187,188,189,75,76,77,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,104,105,107,108,109,110,111,112,114,115,116,117,129,190,134,191,192,193,141,142,143,194,144,145,195,196,146,148,149,197,150,151,152],"status":-1,"binaryOperator":"((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:59","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1976","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[198,199,182,200,201,202],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:230","sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[203],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:65","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double)","type":"CtInvocationImpl"},"failures":[204,47,51,52,59,66],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:36","failures":[0,180,1,205,198,206,199,207,208,182,21,22,23,209,210,40,200,211,201,212,213,214,215,216,202,217,75,76,77,133],"status":-1,"binaryOperator":"java.lang.Object instanceof java.lang.String","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1319","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:61","sourceCode":"throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int))","type":"CtThrowImpl"},"failures":[218],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[219,220,221],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:36","failures":[0,180,1,205,198,206,199,207,208,182,21,22,23,209,210,40,200,211,201,212,213,214,215,216,202,217,75,76,77,133],"status":-1,"binaryOperator":"java.lang.Object instanceof java.lang.String","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[222,2,3,4,223,44,224,45,225,226,48,227,228,229,230,231,73,78,232,118,119,120,121,123,124,233,234,235,125,236,126,237,127,128,238,129,239,240,130,158,159,160,161,162,163,165,166,167,241,168,242,169,170,171,243,244,245,245,246,246,175],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"method","name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[180,20,29,30,31,32,33,34,35,184,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,39,42,267,268,131,136,152],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[180,1,205,208,182,22,200,185,186,187,269,76,190,192,193],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[0,180,1,21,23,270,271,251,255,256,258,261,40,50,75,77,272,133],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[0,180,1,2,3,4,5,6,7,8,273,274,275,276,277,14,278,279,280,281,282,283,284,285,286,287,19,20,288,21,23,270,289,24,25,26,27,28,290,291,292,204,293,223,183,30,36,37,38,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,40,294,295,296,297,298,299,44,224,300,301,302,303,46,47,48,304,305,306,307,267,308,227,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,309,72,310,73,188,311,75,77,272,78,79,232,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,119,120,123,124,312,313,314,315,234,126,237,316,317,130,318,319,320,132,133,134,191,137,138,140,321,141,322,323,324,325,326,142,143,194,144,195,196,146,147,148,149,151,327,152,153,154,157,162,164,165,166,167,168,242,170,172,176,328,177,178,329,179,330],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[331,332,304,305,306,307,267,308,316,317,130,318,152],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"failures":[0,180,1,205,333,334,182,21,22,23,335,209,210,40,200,185,186,187,336,337,71,74,75,76,77,133,190,192,193,338],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"proxy":"proxy"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:164","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:184","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; ++int) {\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n    } \n    if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n        return false;\n    } \n}","type":"CtForImpl"},"failures":[339,340,341,342,343,344,345],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"failures":[0,180,5,6,7,8,14,19,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,247,248,251,253,254,255,256,258,259,260,261,263,264,265,266,39,40,41,42,46,47,267,51,52,55,57,58,59,60,62,63,64,65,67,68,69,70,72,310,188,75,76,77,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,112,115,117,126,319,320,132,133,134,135,136,138,141,322,143,144,145,146,147,148,149,151,152,153,154,166,170,175,328],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:229","failures":[159],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[325,242,346],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[219,220,218,347,348,349,350,221],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:83","failures":[0,180,1,205,287,20,182,21,351,22,23,30,37,38,39,40,185,41,42,186,187,43,267,72,188,75,352,76,77,85,90,96,103,131,133,190,135,136,192,193,139,140,141,323,324,325,326,143,194,145,195,196,146,147,151,152],"status":-1,"binaryOperator":"(int) == (java.lang.Integer.int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[96,191],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[353,339,340,341,342,343,354,73,344,78,345,355,356,357],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[93],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:149","sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","type":"CtIfImpl"},"failures":[353,339,340,341,358,342,343,354,73,344,78,345,355,356,357],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:193","sourceCode":"if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[339,340,341,342,343,344,345],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"i"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1816","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[331,20,30,34,35,332,184,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,39,42,304,305,306,307,267,308,268,316,317,130,318,131,136,152],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:245","sourceCode":"net.sf.cglib.proxy.Factory.getCallback(0)","type":"CtInvocationImpl"},"failures":[359,360,222,2,3,4,361,223,44,224,45,225,226,48,362,227,363,364,365,366,367,368,232,118,119,121,123,234,125,236,369,126,237,127,128,238,129,240,316,317,130,158,159,160,161,162,163,165,166,167,241,168,370,242,169,170,171,371,346,372,373,243,244,175],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:137","sourceCode":"return java.util.List<T>.toString()","type":"CtReturnImpl"},"failures":[374],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append(((org.easymock.internal.ErrorMessage.getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[0,180,1,205,182,21,22,23,40,185,186,187,375,376,377,75,76,77,133,190,192,193,323,324,325,326],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","matches":"matches","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":83,"org.easymock.tests2.UsageTest.argumentsOrdered":193,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":39,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":116,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":307,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":191,"org.easymock.tests2.StubTest.stubWithReturnValue":152,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":345,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":60,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":102,"org.easymock.tests2.SerializationTest.testAllMockedMethod":232,"org.easymock.tests2.DelegateToTest.testReturnException":309,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":305,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":357,"org.easymock.tests.MockingTest.testPartialClassMocking":2,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":202,"org.easymock.samples.SupportTest.voteForRemovals":174,"org.easymock.tests.MockClassControlTest.testToString":363,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":49,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":346,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":259,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":247,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":159,"org.easymock.tests.UsageExpectAndThrowTest.object":257,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":375,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":100,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":173,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":339,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":46,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":47,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":89,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":36,"org.easymock.tests2.UsageTest.wrongArguments":190,"org.easymock.samples.ConstructorCalledMockTest.testTax":245,"org.easymock.tests.UsageStrictMockTest.range":22,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":302,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":338,"org.easymock.samples.ExampleTest.answerVsDelegate":328,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":113,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":226,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":118,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":347,"org.easymock.tests2.UsageConstraintsTest.testNull":85,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":258,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":165,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":368,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":115,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":127,"org.easymock.tests2.CaptureTest.testPrimitive":144,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":38,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":266,"org.easymock.tests.UsageTest.moreThanOneArgument":40,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":186,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":301,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":164,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":292,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":198,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":17,"org.easymock.tests2.CaptureTest.testCaptureNone":147,"org.easymock.tests.UsageUnorderedTest.message":205,"org.easymock.tests.UsageVerifyTest.twoReturns":1,"org.easymock.tests.UsageVarargTest.varargByteAccepted":285,"org.easymock.tests2.ThreadingTest.testThreadSafe":153,"org.easymock.tests.UsageTest.argumentsOrdered":187,"org.easymock.tests.UsageVarargTest.varargIntAccepted":280,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":299,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":334,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":243,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_NotFound":203,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":217,"org.easymock.tests2.CaptureTest.testCapture_2617107":194,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":24,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":343,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":234,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":271,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":11,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":184,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":237,"org.easymock.tests2.UsageConstraintsTest.any":90,"org.easymock.tests2.StubTest.stub":327,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":28,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":306,"org.easymock.tests.UsageExpectAndThrowTest.longType":250,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":12,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":214,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":352,"org.easymock.tests2.SerializationTest.testClass":78,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":71,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":74,"org.easymock.tests.LimitationsTest.mockNativeMethod":48,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":70,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":45,"org.easymock.tests2.AnswerTest.answer":140,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":315,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":230,"org.easymock.tests2.CaptureTest.testAnd":142,"org.easymock.tests2.UsageTest.strictResetToDefault":132,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":272,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":242,"org.easymock.tests2.NameTest.nameForMocksControl":326,"org.easymock.tests2.MockedExceptionTest.testMockedException":317,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":291,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":7,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":110,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":42,"org.easymock.tests2.DelegateToTest.testDelegate":310,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":251,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":4,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":162,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":128,"org.easymock.tests.MockingTest.testNicePartialClassMocking":3,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":262,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":167,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":353,"org.easymock.tests2.CaptureTest.testCaptureLast":146,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":267,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":210,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":88,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":124,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":277,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":101,"org.easymock.tests.MockingTest.testTwoMocks":222,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":209,"org.easymock.tests2.CaptureTest.testCapture1_2446744":145,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":51,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":260,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":313,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":255,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":192,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":104,"org.easymock.tests.UsageThrowableTest.throwError":29,"org.easymock.tests.UsageStrictMockTest.differentMethods":23,"org.easymock.tests2.ConstraintsToStringTest.andToString":216,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":155,"org.easymock.tests2.MockBuilderTest.testCreateMockString":240,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":362,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":293,"org.easymock.tests.UsageExpectAndThrowTest.floatType":249,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":96,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":321,"org.easymock.tests.UsageVerifyTest.twoThrows":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":160,"org.easymock.samples.PartialClassMockTest.testGetArea":175,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":25,"org.easymock.samples.ExampleTest.voteAgainstRemoval":178,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":16,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":15,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":10,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":170,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":248,"org.easymock.tests2.UsageTest.niceToStrict":134,"org.easymock.tests2.UsageConstraintsTest.testNotNull":103,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":316,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":35,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":221,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":126,"org.easymock.tests2.MockBuilderTest.testCreateMock":238,"org.easymock.tests2.UsageTest.defaultResetToNice":137,"org.easymock.samples.ExampleTest.voteAgainstRemovals":176,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":66,"org.easymock.tests2.CallbackTest.callback":188,"org.easymock.tests.UsageTest.openCallCountByLastCall":41,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":256,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":201,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":111,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":80,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":294,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":332,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":300,"org.easymock.tests.UsageCallCountTest.tooFewCalls":297,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":348,"org.easymock.tests.UsageOverloadedMethodTest.overloading":19,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":268,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":94,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":62,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":18,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":121,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":93,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":148,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":303,"org.easymock.tests.UsageThrowableTest.throwCheckedException":32,"org.easymock.tests.MockClassControlTest.testEquals":367,"org.easymock.tests2.EasyMockSupportClassTest.testAll":158,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":224,"org.easymock.tests.MockingTest.testStrictClassMocking":359,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":264,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":199,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":228,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":314,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":275,"org.easymock.tests2.CaptureTest.testCaptureAll":143,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":331,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":123,"org.easymock.tests.MockNameTest.defaultName":335,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":120,"org.easymock.tests2.UsageConstraintsTest.testMatches":95,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":122,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":322,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":204,"org.easymock.samples.ExampleTest.voteForRemovals":179,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":342,"org.easymock.tests2.NameTest.nameForNiceMock":325,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":157,"org.easymock.tests.UsageVarargTest.allKinds":287,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":0,"org.easymock.tests2.DependencyTest.testInterfaceMocking":172,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":341,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":276,"org.easymock.samples.BasicClassMockTest.testPrintContent":244,"org.easymock.samples.ExampleTest.addDocument":329,"org.easymock.tests2.DelegateToTest.testStubDelegate":72,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":34,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":189,"org.easymock.tests2.AnswerTest.stubAnswer":141,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":308,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":21,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":354,"org.easymock.tests2.UsageConstraintsTest.greaterThan":97,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":6,"org.easymock.tests.UsageVarargTest.varargLongAccepted":284,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":171,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":270,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":9,"org.easymock.samples.ExampleTest.voteForRemoval":177,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":371,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":154,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":69,"org.easymock.tests.UsageExpectAndReturnTest.floatType":53,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":241,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":73,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":246,"org.easymock.tests2.ConstraintsToStringTest.orToString":211,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":98,"org.easymock.tests.UsageThrowableTest.noUpperLimit":183,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":223,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":81,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":131,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":195,"org.easymock.tests2.SerializationTest.test":79,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":355,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":108,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":30,"org.easymock.tests2.UsageConstraintsTest.testSame":86,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":52,"org.easymock.samples.SupportTest.addDocument":373,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":304,"org.easymock.tests2.CaptureTest.testCaptureFirst":151,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":109,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":139,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":269,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":58,"org.easymock.tests.GenericTest.testPackageScope":44,"org.easymock.tests2.UsageTest.moreThanOneArgument":133,"org.easymock.tests2.CaptureTest.testCapture2_2446744":150,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":156,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":129,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":286,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":349,"org.easymock.tests2.NameTest.nameForMock":323,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":218,"org.easymock.tests.UsageExpectAndReturnTest.longType":54,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":273,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":106,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":265,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":239,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":63,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":263,"org.easymock.tests2.UsageStrictMockTest.differentMethods":77,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":290,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":370,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":55,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":261,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":206,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":8,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":296,"org.easymock.tests2.MockedExceptionTest.testRealException":318,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":337,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":59,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":207,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":356,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":252,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":75,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":33,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":37,"org.easymock.tests.MockingTest.testNiceClassMocking":361,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":119,"org.easymock.tests.MockingTest.testClassMocking":360,"org.easymock.tests2.NameTest.nameForStrictMock":324,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":295,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":235,"org.easymock.tests2.UsageConstraintsTest.testContains":92,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":130,"org.easymock.tests2.UsageConstraintsTest.testFind":84,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":20,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":369,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":319,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":220,"org.easymock.tests.MockTypeTest.fromEasyMockClass":336,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":166,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":320,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":181,"org.easymock.tests.UsageExpectAndReturnTest.object":61,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":372,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":376,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":99,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":168,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":125,"org.easymock.tests2.UsageStrictMockTest.range":76,"org.easymock.tests2.UsageConstraintsTest.lessThan":105,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":114,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":340,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":282,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":350,"org.easymock.tests.UsageTest.exactCallCountByLastCall":43,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":233,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":14,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":358,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":107,"org.easymock.tests2.CaptureTest.testCaptureRightOne":149,"org.easymock.tests2.UsageConstraintsTest.testOr":87,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":344,"org.easymock.tests.UsageRangeTest.combination":5,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":278,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":67,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":163,"org.easymock.tests.UsageTest.wrongArguments":185,"org.easymock.tests.MockClassControlTest.testHashCode":366,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":227,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":56,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":64,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":213,"org.easymock.tests.UsageVarargTest.varargShortAccepted":283,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":312,"org.easymock.tests2.UsageConstraintsTest.cmpTo":91,"org.easymock.tests.UsageVarargTest.varargCharAccepted":281,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":311,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":13,"org.easymock.tests2.UsageTest.openCallCountByLastCall":135,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":136,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":219,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":117,"org.easymock.tests2.CaptureTest.testCaptureFromStub":197,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":236,"org.easymock.tests.UsageTest.unexpectedCallWithArray":200,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":333,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":208,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":254,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":231,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":31,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":182,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":298,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":65,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":365,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":351,"org.easymock.tests2.UsageConstraintsTest.constraints":82,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":169,"org.easymock.samples.ExampleTest.addAndChangeDocument":330,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":253,"org.easymock.tests2.ConstraintsToStringTest.notToString":212,"org.easymock.tests.CapturesMatcherTest.test":374,"org.easymock.tests.UsageStrictMockTest.testVerify":289,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":68,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":364,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":288,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":161,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":274,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":196,"org.easymock.tests2.UsageTest.resumeIfFailure":138,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":229,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":26,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":225,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":57,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":50,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":27,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":377,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":279,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":112}}]

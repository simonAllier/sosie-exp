[{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[1,2,3,4,5,5,6,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[480,481,482],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:41","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"failures":[483,484,485],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1803","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:93","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","type":"CtInvocationImpl"},"failures":[52,486,80,81,84,85,145,146,214,224,227,394,400,401,452],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"failures":[487],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:411","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[28],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[291,296,306,311],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[1,2,3,4,7,8,9,10,11,12,13,14,15,17,29,30,35,46,47,48,50,51,52,65,71,72,81,84,85,86,92,93,94,95,96,97,98,99,112,113,115,121,122,124,129,134,145,146,147,148,149,151,152,154,155,156,157,158,167,171,172,173,174,187,188,190,195,200,208,210,211,213,223,224,225,226,227,228,229,264,265,266,267,268,269,270,272,273,274,275,276,283,288,291,294,295,297,298,300,303,306,307,308,309,310,311,320,330,331,337,344,345,346,347,349,350,351,352,353,354,357,360,361,362,363,364,366,368,370,381,383,385,391,392,394,395,396,400,401,403,404,407,410,416,417,418,419,420,421,424,429,433,434,435,436,437,438,439,442,449,450,451,452,453,454,458,461,471,477],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[430,432,445],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:39","sourceCode":"return int <= 0","type":"CtReturnImpl"},"failures":[285,287,304,310,488],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:147","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[288],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[1,2,3,5,5,6,6,28,29,30,31,32,33,34,35,36,65,101,102,103,104,105,106,108,109,110,111,112,113,115,118,159,160,161,162,163,164,165,166,179,182,239,277,278,281,282,283,362,364,489,375,490,377,378,380,381,382,383,385,386,387,388,491,492,390,404,405,493,494,495,496,497,498,416,417,419,420,421,422,424,425,426,427,428,429,430,431,432,433,434,435,436,438,439,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[262],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,499,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,500,501,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,502,503,504,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,505,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,506,437,438,439,507,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,23,24,25,26,27,29,30,35,37,38,39,40,41,42,45,46,47,48,49,50,51,52,65,66,67,68,69,70,71,72,73,78,79,80,81,82,83,84,85,86,87,88,92,93,94,95,96,97,98,99,112,113,115,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,153,154,155,156,157,158,167,169,170,171,172,173,174,175,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,206,207,208,210,211,214,218,219,220,221,222,223,224,225,226,227,228,229,264,265,266,267,268,269,270,271,272,273,274,275,276,281,282,283,284,285,286,287,288,290,291,292,293,294,295,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,320,327,328,329,330,331,337,344,345,346,347,348,349,350,351,352,353,354,355,356,357,360,361,362,363,364,366,367,368,370,371,372,373,374,375,377,381,382,383,385,387,388,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,407,410,411,412,413,415,416,417,418,419,420,421,422,424,427,428,429,430,433,434,435,436,437,438,439,440,441,442,448,449,450,451,452,453,454,458,461,471,477],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"(((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[287,288,293,294,296,306,344,346,354],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[306],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[37,38,39,40,41,42,88,215,216,217,247,281,282,283,284],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (this.java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[508,509,344,345,346,347,348,349,350,351,352,353,510,354,355,356,357],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"values":"values"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[306],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:289","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:250","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[62],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[427],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","name":"name","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:117","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[407],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:126","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:97","sourceCode":"for (final java.lang.String java.lang.String : java.lang.String[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.String);\n}","type":"CtForEachImpl"},"failures":[1,381,383,385,492],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[18,21,22,123,127,128,130,133,189,193,194,196,199,227,228,248,452,453],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[511],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1878","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[427,432,446],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:89","failures":[489,490,381,428,429],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":288,"org.easymock.tests2.UsageTest.argumentsOrdered":401,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":78,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":274,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":321,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":250,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":396,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":4,"org.easymock.tests2.DelegateToTest.testReturnException":366,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":38,"org.easymock.tests.MockingTest.testPartialClassMocking":112,"org.easymock.tests.MockClassControlTest.testToString":161,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":443,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":75,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":432,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":259,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":465,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":461,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":185,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":361,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":295,"org.easymock.tests2.UsageTest.wrongArguments":394,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":171,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":343,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":220,"org.easymock.samples.ExampleTest.answerVsDelegate":11,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":182,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":117,"org.easymock.tests2.UsageConstraintsTest.testNull":291,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":419,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":166,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":273,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":493,"org.easymock.tests2.CaptureTest.testPrimitive":347,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":175,"org.easymock.tests.UsageTest.moreThanOneArgument":79,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":204,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":418,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":68,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":18,"org.easymock.tests.UsageTest.argumentsOrdered":85,"org.easymock.tests.UsageVarargTest.varargIntAccepted":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":255,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":139,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":375,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":503,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":325,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":382,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":242,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":143,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":485,"org.easymock.tests.ReplayStateInvalidUsageTest.times":61,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":337,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":0,"org.easymock.tests2.DependencyTest.testClassMocking":358,"org.easymock.tests2.AnswerTest.answer":407,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":296,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":257,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":374,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":501,"org.easymock.tests2.CaptureTest.testAnd":344,"org.easymock.tests2.UsageTest.strictResetToDefault":392,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":427,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":379,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":67,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":169,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":268,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":22,"org.easymock.tests2.DelegateToTest.testDelegate":370,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":200,"org.easymock.tests.LimitationsTest.mockFinalMethod":36,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":41,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":27,"org.easymock.tests2.DependencyTest.testClassMockingSupport":359,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":176,"org.easymock.tests2.CaptureTest.testCapture1_2446744":348,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":423,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":198,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":372,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":55,"org.easymock.tests.UsageThrowableTest.throwError":92,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":181,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":499,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":326,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":70,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":479,"org.easymock.samples.PartialClassMockTest.testGetArea":1,"org.easymock.tests.MockingTest.testInterfaceMocking":114,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":56,"org.easymock.tests2.CompareToTest.testLessOrEqual":488,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":140,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":466,"org.easymock.tests2.UsageTest.niceToStrict":395,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":186,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":239,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":482,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":240,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":381,"org.easymock.tests2.MockBuilderTest.testCreateMock":387,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":474,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":340,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":194,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":269,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":500,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":91,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":43,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":218,"org.easymock.tests.UsageOverloadedMethodTest.overloading":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":476,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":470,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":211,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":301,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":130,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":71,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":300,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":353,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":150,"org.easymock.tests2.EasyMockSupportClassTest.testAll":458,"org.easymock.tests.MockClassControlTest.testEquals":165,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":30,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":202,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":494,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":25,"org.easymock.tests2.CaptureTest.testCaptureAll":345,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":373,"org.easymock.tests.MockNameTest.defaultName":77,"org.easymock.tests2.UsageConstraintsTest.testMatches":302,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":53,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":69,"org.easymock.samples.ExampleTest.voteForRemovals":15,"org.easymock.tests.UsageVarargTest.allKinds":158,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":144,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":26,"org.easymock.samples.BasicClassMockTest.testPrintContent":3,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":98,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":448,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":42,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":322,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":369,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":107,"org.easymock.tests2.UsageConstraintsTest.greaterThan":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":459,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":168,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":430,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":108,"org.easymock.samples.ExampleTest.voteForRemoval":12,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":431,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":328,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":491,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":183,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":504,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":422,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":391,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":65,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":386,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":247,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":266,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":456,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":37,"org.easymock.tests2.CaptureTest.testCaptureFirst":357,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":365,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":246,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":267,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":403,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":214,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":126,"org.easymock.tests2.UsageTest.moreThanOneArgument":393,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":330,"org.easymock.tests2.CaptureTest.testCapture2_2446744":356,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":388,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":258,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":157,"org.easymock.tests.GenericTest.testBridgedEquals":32,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":50,"org.easymock.tests.UsageExpectAndReturnTest.longType":122,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":23,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":264,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":492,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":203,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":205,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":309,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":201,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":66,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":216,"org.easymock.tests.UsageCallCountTest.tooManyCalls":51,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":483,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":45,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":475,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":127,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":342,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":190,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":97,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":434,"org.easymock.tests.MockingTest.testNiceClassMocking":118,"org.easymock.tests.MockingTest.testClassMocking":110,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":490,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":44,"org.easymock.tests2.UsageConstraintsTest.testContains":299,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":283,"org.easymock.tests2.UsageConstraintsTest.testFind":290,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":73,"org.easymock.tests.MockTypeTest.fromEasyMockClass":180,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":415,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":222,"org.easymock.tests.UsageExpectAndReturnTest.object":129,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":424,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":341,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":272,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":152,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":237,"org.easymock.tests.UsageTest.exactCallCountByLastCall":86,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":87,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":245,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":19,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":74,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":405,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":147,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":135,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":210,"org.easymock.tests.MockClassControlTest.testHashCode":164,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":316,"org.easymock.tests2.EasyMockSupportTest.testVerify":276,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":468,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":484,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":20,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":90,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":208,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":371,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":314,"org.easymock.tests.UsageVarargTest.varargCharAccepted":151,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":100,"org.easymock.tests2.CaptureTest.testCaptureMultiple":509,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":449,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":263,"org.easymock.tests2.UsageTest.openCallCountByLastCall":397,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":480,"org.easymock.tests.DefaultClassInstantiatorTest.object":101,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":275,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":89,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":235,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":486,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":469,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":192,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":498,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":95,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":335,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":315,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":428,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":163,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":191,"org.easymock.tests.CapturesMatcherTest.test":508,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":136,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":477,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":162,"org.easymock.tests2.UsageTest.resumeIfFailure":402,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":179,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":502,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":40,"org.easymock.tests2.StubTest.stubWithReturnValue":441,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":384,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":128,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":310,"org.easymock.tests2.SerializationTest.testAllMockedMethod":364,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":256,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":511,"org.easymock.samples.SupportTest.voteForRemovals":9,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":28,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":318,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":197,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":262,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":408,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":76,"org.easymock.tests.UsageExpectAndThrowTest.object":195,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":307,"org.easymock.tests2.DelegateToTest.testWrongClass":368,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":206,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":207,"org.easymock.samples.ConstructorCalledMockTest.testTax":5,"org.easymock.tests.UsageStrictMockTest.range":227,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":279,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":271,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":433,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":196,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":383,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":455,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":63,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":84,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":219,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":233,"org.easymock.tests2.CaptureTest.testCaptureNone":352,"org.easymock.tests.UsageUnorderedTest.message":52,"org.easymock.tests.UsageVerifyTest.twoReturns":146,"org.easymock.tests.UsageVarargTest.varargByteAccepted":156,"org.easymock.tests2.ThreadingTest.testThreadSafe":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":472,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":48,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":2,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":238,"org.easymock.tests2.CaptureTest.testCapture_2617107":346,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":178,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":174,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":260,"org.easymock.tests2.UsageConstraintsTest.any":297,"org.easymock.tests2.StubTest.stub":440,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":60,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":217,"org.easymock.tests.UsageExpectAndThrowTest.longType":188,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":39,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":261,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":105,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":59,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":451,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":320,"org.easymock.tests2.SerializationTest.testClass":362,"org.easymock.tests.LimitationsTest.mockNativeMethod":35,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":138,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":31,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":497,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":334,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":454,"org.easymock.tests2.NameTest.nameForMocksControl":447,"org.easymock.tests2.MockedExceptionTest.testMockedException":282,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":336,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":460,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":83,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":414,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":189,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":115,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":416,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":385,"org.easymock.tests.MockingTest.testNicePartialClassMocking":113,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":421,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":332,"org.easymock.tests2.CaptureTest.testCaptureLast":351,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":177,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":439,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":294,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":308,"org.easymock.tests.MockingTest.testTwoMocks":111,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":507,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":119,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":193,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":400,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":312,"org.easymock.samples.ExampleTest.removeNonExistingDocument":16,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":57,"org.easymock.tests.UsageStrictMockTest.differentMethods":228,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":339,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":317,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":103,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":329,"org.easymock.tests2.MockBuilderTest.testCreateMockString":390,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":159,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":462,"org.easymock.tests.UsageExpectAndThrowTest.floatType":187,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":303,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":457,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":410,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":406,"org.easymock.tests.UsageVerifyTest.twoThrows":145,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":209,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":471,"org.easymock.samples.ExampleTest.voteAgainstRemoval":13,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":231,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":251,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":429,"org.easymock.tests.LimitationsTest.privateConstructor":34,"org.easymock.tests2.UsageConstraintsTest.testNotNull":311,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":99,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":281,"org.easymock.tests2.UsageTest.defaultResetToNice":399,"org.easymock.samples.ExampleTest.voteAgainstRemovals":10,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":134,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":252,"org.easymock.tests.UsageVarargTest.differentLength":153,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":333,"org.easymock.tests2.CallbackTest.callback":442,"org.easymock.tests2.UsageConstraintsTest.equals":289,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":425,"org.easymock.tests.UsageTest.openCallCountByLastCall":82,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":285,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":173,"org.easymock.tests.UsageCallCountTest.tooFewCalls":46,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":436,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":221,"org.easymock.tests.UsageThrowableTest.throwCheckedException":96,"org.easymock.tests.MockingTest.testStrictClassMocking":109,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":438,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":88,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":435,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":338,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":62,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":437,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":412,"org.easymock.tests.ObjectMethodsTest.testHashCode":236,"org.easymock.tests2.NameTest.nameForNiceMock":446,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":331,"org.easymock.tests2.DependencyTest.testInterfaceMocking":360,"org.easymock.samples.ExampleTest.addDocument":14,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":473,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":478,"org.easymock.tests2.DelegateToTest.testStubDelegate":367,"org.easymock.tests2.AnswerTest.stubAnswer":411,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":225,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":505,"org.easymock.tests.UsageVarargTest.varargLongAccepted":155,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":229,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":249,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":137,"org.easymock.tests.UsageExpectAndReturnTest.floatType":121,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":404,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":6,"org.easymock.tests.UsageThrowableTest.noUpperLimit":93,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":212,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":305,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":324,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":286,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":277,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":349,"org.easymock.tests2.SerializationTest.test":363,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":102,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":120,"org.easymock.tests2.UsageConstraintsTest.testSame":292,"org.easymock.samples.SupportTest.addDocument":8,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":506,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":58,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":463,"org.easymock.tests.GenericTest.testPackageScope":29,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":21,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":244,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":323,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":116,"org.easymock.tests2.NameTest.nameForMock":444,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":131,"org.easymock.tests2.UsageStrictMockTest.differentMethods":453,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":389,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":426,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":123,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":199,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":234,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":170,"org.easymock.tests2.MockedExceptionTest.testRealException":284,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":184,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":254,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":280,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":450,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":253,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":172,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":64,"org.easymock.tests2.NameTest.nameForStrictMock":445,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":380,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":481,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":413,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":420,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":278,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":104,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":306,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":377,"org.easymock.tests2.UsageStrictMockTest.range":452,"org.easymock.tests2.UsageConstraintsTest.lessThan":313,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":495,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":319,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":489,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":248,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":467,"org.easymock.tests2.CaptureTest.testCaptureRightOne":354,"org.easymock.tests2.UsageConstraintsTest.testOr":293,"org.easymock.tests.UsageRangeTest.combination":167,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":417,"org.easymock.tests.UsageTest.wrongArguments":81,"org.easymock.tests2.MockBuilderTest.testWithConstructor":376,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":464,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":160,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":124,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":132,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":241,"org.easymock.tests.UsageVarargTest.varargShortAccepted":154,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":106,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":49,"org.easymock.tests2.UsageConstraintsTest.cmpTo":298,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":409,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":243,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":398,"org.easymock.tests2.CaptureTest.testCaptureFromStub":355,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":54,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":378,"org.easymock.tests.UsageTest.unexpectedCallWithArray":80,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":224,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":47,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":487,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":133,"org.easymock.tests2.CaptureTest.testCapture":510,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":226,"org.easymock.tests2.UsageConstraintsTest.constraints":287,"org.easymock.samples.ExampleTest.addAndChangeDocument":17,"org.easymock.tests.UsageStrictMockTest.testVerify":230,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":7,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":223,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":24,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":350,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":496,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":141,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":125,"org.easymock.tests.LimitationsTest.abstractClass":33,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":142,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":213,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":148,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":270}}]

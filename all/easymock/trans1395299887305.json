[{"position":"org.easymock.internal.MockBuilder:205","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.Range:44","failures":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,0,51,52,1,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,2,217,218,219,220,3,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,4,5,6,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,7,350,351,352,353,354,355,356,357,8,9,10,358,359,360,361,362,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,363,364,365,366,367,368,28,369,370,371,372,373,374,375,376,377,29,378,379,380,381,382,30,383,384,385,386,387,388,389,390,31,391,392,32,393,394,33,34,395,396,35,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,36,485,486,487],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:99","failures":[37,51,1,55,56,59,75,80,82,83,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,120,121,124,125,128,157,158,159,160,161,172,199,200,202,223,224,234,235,236,257,258,259,260,261,263,282,284,285,287,6,295,301,310,311,314,316,317,320,328,329,330,331,333,334,335,337,338,339,341,343,344,345,348,349,351,353,354,355,356,357,8,13,17,19,21,25,366,28,29,30,385,386,387,388,389,390,392,33,34,395,397,401,408,412,413,415,416,419,420,421,422,424,425,426,427,428,429,430,431,432,433,434,435,436,437,445,456,457,458,459,461,462,463,464,465,466,468,469,470,471,472,473,474,475,476,477,478,479,481,482,483,484,36,485],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:189","sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor })","type":"CtInvocationImpl"},"failures":[51,52,1,75,156,196,197,198,199,200,202,205,2,3,226,227,228,229,230,231,232,233,269,4,4,5,5,6,292,293,325,328,329,330,331,334,335,7,350,351,8,11,13,14,16,17,18,19,21,24,25,27,366,28,29,30,385,386,388,389,390,31,392,393,394,33,34,395,396,35,397,36,486],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"mockClass"}},{"position":"org.easymock.internal.RecordState:262","failures":[38,40,41,57,58,86,88,89,90,91,92,93,120,125,154,155,170,206,207,208,209,210,211,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,262,320,337,344,7,350,351,352],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"failures":[398,399],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:296","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[61,129,133,134,143,148,195],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.ConstructorArgs:54","failures":[4,5,330,335,336,8,9,12,15,20,23,488,26,363,364,365,366,367,368,28,369,370,371,372,373,374,375,376,377,29,378,379,380,381,382,30,383,384,489,490,36],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[114,115,168,171],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[0],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:288","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[131,410],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:70","sourceCode":"java.io.InputStream.close()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:65","sourceCode":"java.util.Properties.load(java.io.InputStream)","type":"CtInvocationImpl"},"failures":[491,492,493,494,495,496],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"in":"in"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:118","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[51,52,1,75,156,198,199,200,202,2,3,227,4,4,5,5,6,292,293,497,498,499,328,329,330,331,334,335,351,8,11,500,13,14,17,18,19,21,24,25,501,27,366,28,29,30,385,386,388,389,390,31,392,394,33,34,395,36,486],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[4,4,5,5,488,32],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[0],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"failures":[391],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[37,44,45,46,47,49,50,51,52,55,56,57,58,59,60,75,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,120,121,123,124,125,126,127,128,156,157,158,159,160,161,167,169,170,172,174,175,176,178,179,181,182,183,184,185,199,200,202,210,213,214,223,224,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,259,260,261,262,263,282,283,284,285,286,287,289,6,290,291,292,293,294,295,301,310,311,313,314,315,316,317,318,319,320,328,329,330,331,333,334,335,337,338,339,340,341,342,343,344,346,347,348,349,351,353,354,355,356,357,8,17,19,21,366,28,29,30,385,386,387,388,389,390,392,34,397,400,401,403,405,407,408,409,411,412,413,414,415,416,417,418,419,420,421,422,424,425,426,427,428,429,430,431,432,434,435,436,437,438,445,456,457,458,459,461,462,463,464,465,466,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,36,485,486,487],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[502,503,504],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:95","failures":[412,414,422,458,459,462,464,465,467,477,482],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:193","sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:52","sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:94","failures":[412,413,414,415,422,423,458,459,461,462,463,464,465,466,467,468,477,478,482,483],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Or:39","sourceCode":"if (org.easymock.IArgumentMatcher.matches(java.lang.Object)) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[464],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:172","failures":[3,19],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1026","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:172","failures":[3,19],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:108","failures":[58,86,88,89,90,91,92,93,120,125,170,210,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,262,320,337,344],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,0,51,52,1,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,2,217,218,219,220,3,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,4,5,6,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,7,350,351,352,353,354,355,356,357,8,9,10,358,359,360,361,362,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,363,364,365,366,367,368,28,369,370,371,372,373,374,375,376,377,29,378,379,380,381,382,30,383,384,385,386,387,388,389,390,31,391,392,32,393,394,33,34,395,396,35,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,36,485,486,487],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[505,391,492,495,496],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"failures":[139],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Injector:72","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:76","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[66,117,119,356],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:223","failures":[28],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[130,137,141,146,147],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[135,398],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:82","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[300,303,305,306,444,447,449,450],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1471","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[412,414,422,458,459,464,465,467,477],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"failures":[94,95,102,109,224,280],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[65,115],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.EasyMock:1976","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:62","sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","type":"CtIfImpl"},"failures":[170,352],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"throwable":"t"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[51,52,1,53,75,156,194,198,199,200,202,2,3,226,227,228,229,230,231,232,233,4,4,5,5,6,292,293,328,329,330,331,334,335,351,8,11,13,14,17,18,19,21,24,25,27,366,28,29,30,385,386,388,389,390,31,392,394,33,34,395,35,36,486],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":459,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":120,"org.easymock.tests2.UsageTest.argumentsOrdered":347,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":436,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":302,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":139,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":342,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":290,"org.easymock.tests2.DelegateToTest.testReturnException":407,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":207,"org.easymock.tests.MockingTest.testPartialClassMocking":199,"org.easymock.tests.MockClassControlTest.testToString":228,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":358,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":148,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":35,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":372,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":28,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":237,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":311,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":466,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":55,"org.easymock.tests2.UsageTest.wrongArguments":340,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":451,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":266,"org.easymock.samples.ExampleTest.answerVsDelegate":283,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":3,"org.easymock.tests2.UsageConstraintsTest.testNull":462,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":204,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":388,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":435,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":233,"org.easymock.tests2.CaptureTest.testPrimitive":415,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":59,"org.easymock.tests.UsageTest.moreThanOneArgument":121,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":256,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":387,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":279,"org.easymock.tests.UsageTest.argumentsOrdered":127,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":212,"org.easymock.tests.UsageVarargTest.varargIntAccepted":176,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":144,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":157,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":11,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":306,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":323,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":18,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":131,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":161,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":504,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":445,"org.easymock.tests.ReplayStateInvalidUsageTest.times":69,"org.easymock.tests2.DependencyTest.testClassMocking":308,"org.easymock.tests2.AnswerTest.answer":397,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":146,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":455,"org.easymock.tests2.CaptureTest.testAnd":412,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":218,"org.easymock.tests2.UsageTest.strictResetToDefault":338,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":394,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":15,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":278,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":430,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":259,"org.easymock.tests2.DelegateToTest.testDelegate":411,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":216,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":252,"org.easymock.tests.LimitationsTest.mockFinalMethod":76,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":210,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":166,"org.easymock.tests2.DependencyTest.testClassMockingSupport":309,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":114,"org.easymock.tests2.CaptureTest.testCapture1_2446744":416,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":391,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":250,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":453,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":63,"org.easymock.tests.UsageThrowableTest.throwError":86,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":220,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":54,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":307,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":281,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":489,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":384,"org.easymock.samples.PartialClassMockTest.testGetArea":6,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":64,"org.easymock.tests.MockingTest.testInterfaceMocking":201,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":158,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":187,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":194,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":238,"org.easymock.tests2.UsageTest.niceToStrict":341,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":373,"org.easymock.tests2.ThreadingTest.testChangeDefault":505,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":129,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":17,"org.easymock.tests2.MockBuilderTest.testCreateMock":24,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":380,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":448,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":246,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":431,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":217,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":41,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":42,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":264,"org.easymock.tests.UsageOverloadedMethodTest.overloading":235,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":377,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":382,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":472,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":170,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":105,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":234,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":471,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":421,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":177,"org.easymock.tests.MockClassControlTest.testEquals":232,"org.easymock.tests2.EasyMockSupportClassTest.testAll":366,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":52,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":254,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":497,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":454,"org.easymock.tests2.CaptureTest.testCaptureAll":413,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":164,"org.easymock.tests.MockNameTest.defaultName":225,"org.easymock.tests2.UsageConstraintsTest.testMatches":473,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":61,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":280,"org.easymock.samples.ExampleTest.voteForRemovals":287,"org.easymock.tests.UsageVarargTest.allKinds":185,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":261,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":165,"org.easymock.samples.BasicClassMockTest.testPrintContent":293,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":92,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":312,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":410,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":211,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":303,"org.easymock.tests2.UsageConstraintsTest.greaterThan":475,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":275,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":367,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":258,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":395,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":276,"org.easymock.samples.ExampleTest.voteForRemoval":284,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":396,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":354,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":221,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":324,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":31,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":156,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":337,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":23,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":136,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":428,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":88,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":364,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":206,"org.easymock.tests2.CaptureTest.testCaptureFirst":425,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":406,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":135,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":429,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":349,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":173,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":101,"org.easymock.tests2.CaptureTest.testCapture2_2446744":424,"org.easymock.tests2.UsageTest.moreThanOneArgument":339,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":356,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":147,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":25,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":184,"org.easymock.tests.GenericTest.testBridgedEquals":53,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":49,"org.easymock.tests.UsageExpectAndReturnTest.longType":97,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":426,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":162,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":501,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":255,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":480,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":195,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":253,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":154,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":277,"org.easymock.tests.UsageCallCountTest.tooManyCalls":50,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":502,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":44,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":381,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":102,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":450,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":242,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":91,"org.easymock.tests.MockingTest.testNiceClassMocking":205,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":329,"org.easymock.tests.MockingTest.testClassMocking":197,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":500,"org.easymock.tests2.UsageConstraintsTest.testContains":470,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":43,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":351,"org.easymock.tests2.UsageConstraintsTest.testFind":461,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":236,"org.easymock.tests.MockTypeTest.fromEasyMockClass":219,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":405,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":77,"org.easymock.tests.UsageExpectAndReturnTest.object":104,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":392,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":449,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":434,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":179,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":192,"org.easymock.tests.UsageTest.exactCallCountByLastCall":128,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":37,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":134,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":117,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":213,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":9,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":174,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":110,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":169,"org.easymock.tests.MockClassControlTest.testHashCode":231,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":297,"org.easymock.tests2.EasyMockSupportTest.testVerify":438,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":375,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":503,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":214,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":167,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":40,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":452,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":439,"org.easymock.tests.UsageVarargTest.varargCharAccepted":178,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":268,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":313,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":152,"org.easymock.tests2.UsageTest.openCallCountByLastCall":343,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":437,"org.easymock.tests.DefaultClassInstantiatorTest.object":269,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":39,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":190,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":244,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":376,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":89,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":443,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":296,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":33,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":230,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":243,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":111,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":153,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":30,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":229,"org.easymock.tests2.UsageTest.resumeIfFailure":348,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":2,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":322,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":209,"org.easymock.tests2.StubTest.stubWithReturnValue":320,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":20,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":481,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":103,"org.easymock.tests2.SerializationTest.testAllMockedMethod":486,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":145,"org.easymock.samples.SupportTest.voteForRemovals":295,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":299,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":249,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":151,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":398,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":119,"org.easymock.tests.UsageExpectAndThrowTest.object":247,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":478,"org.easymock.tests2.DelegateToTest.testWrongClass":409,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":223,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":224,"org.easymock.samples.ConstructorCalledMockTest.testTax":4,"org.easymock.tests.UsageStrictMockTest.range":82,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":326,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":433,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":328,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":248,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":19,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":126,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":363,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":265,"org.easymock.tests2.CaptureTest.testCaptureNone":420,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":188,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":492,"org.easymock.tests.UsageUnorderedTest.message":60,"org.easymock.tests.UsageVerifyTest.twoReturns":263,"org.easymock.tests.UsageVarargTest.varargByteAccepted":183,"org.easymock.tests2.ThreadingTest.testThreadSafe":353,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":378,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":47,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":193,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":292,"org.easymock.tests2.CaptureTest.testCapture_2617107":414,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":116,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":149,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":58,"org.easymock.tests2.UsageConstraintsTest.any":468,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":68,"org.easymock.tests2.StubTest.stub":319,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":155,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":150,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":208,"org.easymock.tests.UsageExpectAndThrowTest.longType":240,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":273,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":67,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":315,"org.easymock.tests2.SerializationTest.testClass":36,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":301,"org.easymock.tests.LimitationsTest.mockNativeMethod":75,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":113,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":1,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":499,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":442,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":318,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":493,"org.easymock.tests2.NameTest.nameForMocksControl":362,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":444,"org.easymock.tests2.MockedExceptionTest.testMockedException":350,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":368,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":125,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":404,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":202,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":241,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":385,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":21,"org.easymock.tests.MockingTest.testNicePartialClassMocking":200,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":390,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":440,"org.easymock.tests2.CaptureTest.testCaptureLast":419,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":115,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":465,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":335,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":479,"org.easymock.tests.MockingTest.testTwoMocks":198,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":336,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":94,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":245,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":346,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":483,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":496,"org.easymock.samples.ExampleTest.removeNonExistingDocument":288,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":447,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":65,"org.easymock.tests.UsageStrictMockTest.differentMethods":83,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":298,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":495,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":271,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":355,"org.easymock.tests2.MockBuilderTest.testCreateMockString":27,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":226,"org.easymock.tests.UsageExpectAndThrowTest.floatType":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":369,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":474,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":365,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":400,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":10,"org.easymock.tests.UsageVerifyTest.twoThrows":262,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":168,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":29,"org.easymock.samples.ExampleTest.voteAgainstRemoval":285,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":186,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":140,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":34,"org.easymock.tests.LimitationsTest.privateConstructor":74,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":490,"org.easymock.tests2.UsageConstraintsTest.testNotNull":482,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":7,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":93,"org.easymock.tests2.UsageTest.defaultResetToNice":345,"org.easymock.samples.ExampleTest.voteAgainstRemovals":282,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":141,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":109,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":441,"org.easymock.tests.UsageVarargTest.differentLength":180,"org.easymock.tests2.CallbackTest.callback":487,"org.easymock.tests2.UsageConstraintsTest.equals":460,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":32,"org.easymock.tests.UsageTest.openCallCountByLastCall":124,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":456,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":57,"org.easymock.tests.UsageCallCountTest.tooFewCalls":45,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":331,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":267,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":494,"org.easymock.tests.UsageThrowableTest.throwCheckedException":90,"org.easymock.tests.MockingTest.testStrictClassMocking":196,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":38,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":334,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":446,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":330,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":70,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":333,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":402,"org.easymock.tests.ObjectMethodsTest.testHashCode":191,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":357,"org.easymock.tests2.NameTest.nameForNiceMock":361,"org.easymock.tests2.DependencyTest.testInterfaceMocking":310,"org.easymock.samples.ExampleTest.addDocument":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":379,"org.easymock.tests2.DelegateToTest.testStubDelegate":408,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":383,"org.easymock.tests2.AnswerTest.stubAnswer":401,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":80,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":22,"org.easymock.tests.UsageVarargTest.varargLongAccepted":182,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":138,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":112,"org.easymock.tests.UsageExpectAndReturnTest.floatType":96,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":8,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":5,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":476,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":171,"org.easymock.tests.UsageThrowableTest.noUpperLimit":87,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":305,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":457,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":321,"org.easymock.tests2.SerializationTest.test":485,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":417,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":270,"org.easymock.tests2.UsageConstraintsTest.testSame":463,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":95,"org.easymock.samples.SupportTest.addDocument":294,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":332,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":66,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":370,"org.easymock.tests.GenericTest.testPackageScope":51,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":215,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":133,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":304,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":203,"org.easymock.tests2.NameTest.nameForMock":359,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":106,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":26,"org.easymock.tests2.UsageStrictMockTest.differentMethods":317,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":393,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":98,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":251,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":189,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":260,"org.easymock.tests2.MockedExceptionTest.testRealException":352,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":222,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":143,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":142,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":314,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":56,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":72,"org.easymock.tests2.NameTest.nameForStrictMock":360,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":16,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":403,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":389,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":325,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":477,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":272,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":13,"org.easymock.tests2.UsageStrictMockTest.range":316,"org.easymock.tests2.UsageConstraintsTest.lessThan":484,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":300,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":137,"org.easymock.tests2.CaptureTest.testCaptureRightOne":422,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":374,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":491,"org.easymock.tests2.UsageConstraintsTest.testOr":464,"org.easymock.tests.UsageRangeTest.combination":257,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":386,"org.easymock.tests.UsageTest.wrongArguments":123,"org.easymock.tests2.MockBuilderTest.testWithConstructor":12,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":371,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":227,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":130,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":107,"org.easymock.tests.UsageVarargTest.varargShortAccepted":181,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":274,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":48,"org.easymock.tests2.UsageConstraintsTest.cmpTo":469,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":399,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":132,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":344,"org.easymock.tests2.CaptureTest.testCaptureFromStub":423,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":62,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":14,"org.easymock.tests.UsageTest.unexpectedCallWithArray":122,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":79,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":46,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":488,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":108,"org.easymock.tests2.UsageConstraintsTest.constraints":458,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":81,"org.easymock.samples.ExampleTest.addAndChangeDocument":289,"org.easymock.tests.UsageStrictMockTest.testVerify":85,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":291,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":78,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":163,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":418,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":498,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":159,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":100,"org.easymock.tests.LimitationsTest.abstractClass":73,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":172,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":160,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":432,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":175}}]

[{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","position":"org.easymock.internal.RecordState:292","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>))","position":"org.easymock.internal.AndroidClassProxyFactory:53","type":"CtThrowImpl"},"status":0},{"failures":[0,1,2],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","position":"org.easymock.EasyMock:2170","type":"CtReturnImpl"},"status":-1},{"failures":[3],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.MocksBehavior:108","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.MocksBehavior:109","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"constructor":"constructor"},"name":"replace","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:151","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1790","type":"CtReturnImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:48","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:209","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{"args":"methodArgs","org.easymock.internal.Invocation.NO_ARGS":"methodArgs"},"name":"add","transplant":{"sourceCode":"return java.lang.Object[] == null ? java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.DefaultClassInstantiator:130","type":"CtReturnImpl"},"status":-2},{"failures":[4],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1304","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1065","type":"CtReturnImpl"},"status":-1},{"failures":[5],"variableMapping":{"actual":"actual","expected":"expected","this":"this"},"name":"replace","transplant":{"sourceCode":"return java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:37","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:45","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(((\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\"))","position":"org.easymock.internal.matchers.Find:41","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:46","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","position":"org.easymock.internal.MockBuilder:69","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)","position":"org.easymock.internal.InjectionTarget:62","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n            org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        } \n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:280","type":"CtForEachImpl"},"status":-2},{"failures":[6,6,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,5,102,103,104,105,106,107,108,4,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,3,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","position":"org.easymock.internal.RecordState:310","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"returnedType":"mockClass"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","position":"org.easymock.internal.RecordState:245","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","position":"org.easymock.internal.ClassProxyFactory:251","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:643","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.InputStream.close()","position":"org.easymock.internal.EasyMockProperties:70","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-658998692584342514L","position":"org.easymock.internal.matchers.StartsWith:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1360","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","position":"org.easymock.internal.MockBuilder:164","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:72","type":"CtThrowImpl"},"status":-2},{"failures":[190,191,192,8,9,193,10,11,194,12,195,13,196,197,198,15,16,17,18,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,31,32,33,34,35,36,37,38,39,40,230,231,47,48,51,52,53,54,55,232,56,233,234,235,57,58,236,60,66,67,237,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,5,102,103,104,105,106,107,108,4,109,110,111,112,114,116,238,120,122,123,239,240,241,124,242,243,244,126,127,128,129,245,246,130,131,132,247,133,248,249,135,136,137,138,140,141,142,145,146,250,147,251,148,149,150,151,152,153,154,155,156,158,159,160,162,164,165,166,167,168,170,172,173,174,175,252,176,177,178,179,180,181,182,183,184,186,187,188,189,253],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.UnorderedBehavior:79","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:336","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","position":"org.easymock.internal.MocksControl:146","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"pt":"pt","typeVariableMap":"typeVariableMap","this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:257","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:284","type":"CtIfImpl"},"status":0},{"failures":[],"binaryOperator":"(\"ObjectStreamClass.\" + java.lang.String)","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:183","type":"mutation","status":-2},{"failures":[254,255],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","position":"org.easymock.EasyMock:560","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","position":"org.easymock.internal.Results:40","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:417","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2087349195182278608L","position":"org.easymock.internal.AssertionErrorWrapper:23","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[256],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","position":"org.easymock.Capture:83","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Proxy.java.lang.reflect.Proxy.getInvocationHandler(java.lang.Object)","position":"org.easymock.internal.JavaProxyFactory:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:121","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : org.easymock.internal.Invocation.getArguments()) {\n    java.util.List<org.easymock.IArgumentMatcher>.add(new org.easymock.internal.matchers.Equals(java.lang.Object));\n}","position":"org.easymock.internal.ExpectedInvocation:61","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1163","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","position":"org.easymock.internal.LastControl:93","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.Class<?>.getConstructor(new java.lang.Class[0]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    if ((java.lang.Class<?>.getConstructors().int) == 0) {\n        throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n    } \n    return java.lang.Class<?>.getConstructors()[0];\n}","position":"org.easymock.internal.DefaultClassInstantiator:89","type":"CtTryImpl"},"status":0},{"failures":[92],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","position":"org.easymock.internal.RecordState:85","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1262","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:971","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MocksControl(org.easymock.MockType)","position":"org.easymock.EasyMock:491","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"number":"number"},"name":"add","transplant":{"sourceCode":"return java.lang.Number","position":"org.easymock.internal.RecordState:207","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.intValue()","position":"org.easymock.internal.RecordState:199","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation> java.util.Stack<org.easymock.internal.Invocation> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.get()","position":"org.easymock.internal.LastControl:123","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","position":"org.easymock.internal.LastControl:92","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.Result(new DelegatingAnswer() , false)","position":"org.easymock.internal.Result:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.UnorderedBehavior:63","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(int))","position":"org.easymock.EasyMock:1530","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader())","position":"org.easymock.internal.ClassProxyFactory:183","type":"CtInvocationImpl"},"status":-2},{"failures":[104],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int < 0","position":"org.easymock.LogicalOperator:27","type":"CtReturnImpl"},"status":-1},{"failures":[171],"variableMapping":{"toMock":"toMock","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:104","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:256","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Compare<T>(T , java.util.Comparator<? super T> , org.easymock.LogicalOperator))","position":"org.easymock.EasyMock:1901","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Number","position":"org.easymock.internal.RecordState:207","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.byteValue()","position":"org.easymock.internal.RecordState:195","type":"CtReturnImpl"},"status":0},{"failures":[],"binaryOperator":"(((this.java.lang.Object) == null) && ((org.easymock.internal.matchers.Equals.java.lang.Object) == null)) || (((this.java.lang.Object) != null) && (this.java.lang.Object.equals(org.easymock.internal.matchers.Equals.java.lang.Object)))","name":"removeConditional","position":"org.easymock.internal.matchers.Equals:57","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","position":"org.easymock.internal.DefaultClassInstantiator:126","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:987","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size()))","name":"math","position":"org.easymock.internal.ExpectedInvocation:48","type":"mutation","status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this","mockedMethods":"mockedMethods"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:252","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:275","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeByte(2)","position":"org.easymock.internal.DefaultClassInstantiator:146","type":"CtInvocationImpl"},"status":-2},{"failures":[20,257,258,259,260,46,47,48,55,232,56,261,115,262,263,264,125,126,127,265,266,267,268],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","position":"org.easymock.internal.Range:65","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:380","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:252","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Object[][int] = java.lang.Object","position":"org.easymock.internal.DefaultClassInstantiator:127","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.matchers.Captures<?> org.easymock.internal.matchers.Captures<?> : java.util.Collection<org.easymock.internal.matchers.Captures<?>>) {\n    org.easymock.internal.matchers.Captures<?>.setPotentialValue(null);\n}","position":"org.easymock.internal.Invocation:173","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Double>(double))","position":"org.easymock.EasyMock:1012","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<org.easymock.internal.UnorderedBehavior>.get(((java.util.List<org.easymock.internal.UnorderedBehavior>.size()) - 1))","position":"org.easymock.internal.MocksBehavior:80","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","position":"org.easymock.internal.MockBuilder:69","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"at least \" + (int)","position":"org.easymock.internal.Range:68","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","position":"org.easymock.internal.Range:65","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","position":"org.easymock.internal.MockBuilder:236","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1249","type":"CtReturnImpl"},"status":-2},{"failures":[18,99],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:642","type":"CtInvocationImpl"},"status":-1},{"failures":[],"binaryOperator":"\"Answer throwing \" + java.lang.Throwable","name":"math","position":"org.easymock.internal.ThrowingAnswer:51","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method.invoke(java.lang.Object, org.easymock.internal.Invocation.getArguments())","position":"org.easymock.internal.Result:84","type":"CtReturnImpl"},"status":-2},{"failures":[9,193,10,11,194,12,269,195,270,271,272,273,14,274,198,15,16,275,276,17,277,278,279,280,18,281,19,20,282,257,21,22,258,259,23,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,199,300,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,29,220,221,222,223,224,301,225,226,227,228,229,30,31,32,33,34,35,302,36,37,38,39,40,41,42,43,44,45,303,230,260,46,231,47,48,304,305,306,307,308,51,52,53,54,55,232,56,309,310,233,311,234,235,312,313,314,261,57,58,59,236,60,61,62,63,64,65,66,67,237,315,316,317,318,319,320,321,322,323,324,325,326,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,5,102,103,104,105,106,107,108,4,327,109,110,111,112,113,114,115,262,116,238,117,118,119,263,264,120,121,328,329,123,330,331,332,333,334,239,240,241,124,335,242,336,243,125,244,126,127,337,128,129,245,246,131,132,247,133,134,248,249,135,136,137,138,3,139,140,141,142,143,144,145,146,250,147,251,149,150,153,154,155,338,157,158,339,340,161,341,162,163,164,165,166,167,342,168,343,169,170,171,252,176,177,265,266,267,268],"variableMapping":{"this":"this","mock":"mock"},"name":"add","transplant":{"sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).verify()","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","position":"org.easymock.EasyMock:2012","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Number","position":"org.easymock.internal.RecordState:207","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:198","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.Injection:50","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1013","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.MockType.STRICT":"type"},"name":"add","transplant":{"sourceCode":"new org.easymock.internal.MocksControl.MockType(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.internal.MocksControl:49","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","position":"org.easymock.internal.MocksControl:190","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"continue","position":"org.easymock.internal.UnorderedBehavior:90","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int < 0","position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:116","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"status":-2},{"failures":[190,6,6,7,7,191,192,8,13,196,197,122,130,156,159,160,172,173,174,175,178,179,180,181,182,183,184,185,186,187,188,189,253],"variableMapping":{"controls":"controls"},"name":"replace","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : this.java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.verify();\n}","position":"org.easymock.EasyMockSupport:561","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.replay();\n}","position":"org.easymock.EasyMockSupport:541","type":"CtForEachImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.IMocksBehavior.addActual(org.easymock.internal.Invocation);\n    try {\n        return org.easymock.internal.Result.answer();\n    } catch (final java.lang.Throwable java.lang.Throwable) {\n        if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n            throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n        } \n        throw java.lang.Throwable;\n    }\n} finally {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation();\n}","position":"org.easymock.internal.ReplayState:57","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Long>(org.easymock.Capture<java.lang.Long>))","position":"org.easymock.EasyMock:1951","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:172","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:416","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:189","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"endsWith(\\\"\" + (java.lang.String))","name":"math","position":"org.easymock.internal.matchers.EndsWith:40","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","position":"org.easymock.EasyMock:2125","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())))","position":"org.easymock.internal.DefaultClassInstantiator:193","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","position":"org.easymock.EasyMock:1554","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result == null) && (boolean)) {\n    org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()));\n} ","position":"org.easymock.internal.MocksBehavior:97","type":"CtIfImpl"},"status":-2},{"failures":[344,345,346,347],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.RecordState:327","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","position":"org.easymock.internal.ReplayState:46","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:86","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (int > (int)) {\n    return true;\n} ","position":"org.easymock.internal.Results:56","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((int) <= int) && (int <= (int))","position":"org.easymock.internal.Range:79","type":"CtReturnImpl"},"status":-2},{"failures":[27,348,349,350,351,352],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:296","type":"CtThrowImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>.getName(), java.lang.Double.java.lang.Class<java.lang.Double>)","position":"org.easymock.internal.MethodSerializationWrapper:40","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","position":"org.easymock.internal.ReplayState:44","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.IProxyFactory","position":"org.easymock.internal.MocksControl:137","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","position":"org.easymock.EasyMock:1554","type":"CtInvocationImpl"},"status":-2},{"failures":[353,128,129,245],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.MethodSerializationWrapper:57","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.Invocation:105","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","position":"org.easymock.internal.RecordState:234","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.easymock.internal.MocksControl(org.easymock.MockType)","position":"org.easymock.EasyMock:491","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:244","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String))","name":"math","position":"org.easymock.internal.MocksControl:131","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type)","position":"org.easymock.internal.BridgeMethodResolver:339","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1107","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.Invocation:84","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:665","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ClassProxyFactory:194","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"leq\"","position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:116","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.internal.Result>.get(int)","position":"org.easymock.internal.Results:74","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:309","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:155","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","position":"org.easymock.internal.MocksControl:196","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"binaryOperator":"java.lang.reflect.Type == null","name":"negateConditional","position":"org.easymock.internal.BridgeMethodResolver:335","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","position":"org.easymock.internal.MocksControl:136","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next()","position":"org.easymock.internal.matchers.Or:49","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.ExpectedInvocationAndResult:41","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = new java.util.HashSet<org.easymock.internal.MethodSerializationWrapper>(java.util.Set<java.lang.reflect.Method>.size())","position":"org.easymock.internal.ClassProxyFactory:134","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setCallbackType(org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.getClass())","position":"org.easymock.internal.ClassProxyFactory:171","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","position":"org.easymock.internal.ReflectionUtils:230","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.ObjectMethodsFilter:62","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int += org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:97","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.InjectionTarget org.easymock.internal.InjectionTarget = org.easymock.internal.Injector.org.easymock.internal.Injector.injectionTargetWithField(java.lang.reflect.Field)","position":"org.easymock.internal.Injector:183","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return int >= 0","position":"org.easymock.LogicalOperator:45","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:346","type":"CtReturnImpl"},"status":-2},{"failures":[354],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:81","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","position":"org.easymock.internal.LastControl:126","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":61,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":168,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":231,"org.easymock.tests2.MockedExceptionTest.testRealException":330,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":230,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":215,"org.easymock.tests.UsageVarargTest.varargIntAccepted":222,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":18,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":89,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":177,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":190,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":286,"org.easymock.tests2.UsageConstraintsTest.testContains":101,"org.easymock.tests.UsageCallCountTest.tooManyCalls":314,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":318,"org.easymock.tests2.UsageConstraintsTest.testFind":93,"org.easymock.tests2.StubTest.stubWithReturnValue":176,"org.easymock.tests.UsageVarargTest.allKinds":229,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":248,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":280,"org.easymock.tests2.CaptureTest.testCaptureAll":132,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":57,"org.easymock.samples.ExampleTest.addAndChangeDocument":195,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":338,"org.easymock.tests.UsageVarargTest.varargCharAccepted":223,"org.easymock.tests2.CaptureTest.testCaptureFromStub":3,"org.easymock.tests.UsageVerifyTest.twoThrows":232,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":16,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":224,"org.easymock.tests2.DelegateToTest.testReturnException":241,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":238,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":104,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":189,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":243,"org.easymock.tests2.CaptureTest.testAnd":131,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":347,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":326,"org.easymock.tests.UsageStrictMockTest.testVerify":305,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":208,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":137,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":272,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":212,"org.easymock.tests2.UsageConstraintsTest.testMatches":103,"org.easymock.tests.MockClassControlTest.testToString":285,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":292,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":50,"org.easymock.tests2.UsageConstraintsTest.testNull":94,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":148,"org.easymock.tests2.EasyMockSupportClassTest.testAll":172,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":325,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":183,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":82,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":216,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":130,"org.easymock.tests.UsageThrowableTest.throwError":59,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":198,"org.easymock.tests2.UsageConstraintsTest.greaterThan":105,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":220,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":17,"org.easymock.samples.SupportTest.addDocument":192,"org.easymock.tests2.StubTest.stub":252,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":321,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":254,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":319,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":39,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":15,"org.easymock.tests.UsageExpectAndReturnTest.object":79,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":88,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":107,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":186,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":228,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":337,"org.easymock.tests.UsageExpectAndThrowTest.object":210,"org.easymock.tests2.DelegateToTest.testWrongClass":335,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":143,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":298,"org.easymock.tests2.UsageTest.moreThanOneArgument":115,"org.easymock.tests.UsageVarargTest.varargByteAccepted":227,"org.easymock.tests.MockClassControlTest.testEquals":289,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":207,"org.easymock.samples.ExampleTest.voteAgainstRemoval":11,"org.easymock.tests.UsageTest.wrongArguments":257,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":294,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":64,"org.easymock.tests.UsageVarargTest.varargShortAccepted":225,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":308,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":211,"org.easymock.tests2.UsageTest.defaultResetToNice":119,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":123,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":38,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":144,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":191,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":160,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":283,"org.easymock.tests2.MockBuilderTest.testCreateMock":340,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":145,"org.easymock.tests2.SerializationTest.testAllMockedMethod":245,"org.easymock.tests2.NameTest.nameForMocksControl":268,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":315,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":320,"org.easymock.samples.ExampleTest.voteAgainstRemovals":9,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":336,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":271,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":53,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":276,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":30,"org.easymock.tests2.CaptureTest.testCapture1_2446744":134,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":121,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":24,"org.easymock.tests.LimitationsTest.mockNativeMethod":66,"org.easymock.tests2.DelegateToTest.testStubDelegate":124,"org.easymock.tests.UsageUnorderedTest.message":261,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":351,"org.easymock.samples.ExampleTest.answerVsDelegate":193,"org.easymock.samples.ExampleTest.voteForRemoval":10,"org.easymock.tests.UsageCallCountTest.tooFewCalls":311,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":78,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":235,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":250,"org.easymock.tests.UsageVerifyTest.twoReturns":56,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":73,"org.easymock.tests2.DependencyTest.testInterfaceMocking":155,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":209,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":14,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":178,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":297,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":25,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":181,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":334,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":97,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":277,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":304,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":75,"org.easymock.tests2.CaptureTest.testCaptureRightOne":138,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":233,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":278,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":316,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":328,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":167,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":52,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":317,"org.easymock.tests2.UsageConstraintsTest.cmpTo":100,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":1,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":309,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":80,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":150,"org.easymock.tests2.MockedExceptionTest.testMockedException":329,"org.easymock.tests.UsageThrowableTest.throwCheckedException":62,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":352,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":43,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":109,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":219,"org.easymock.samples.PartialClassMockTest.testGetArea":13,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":55,"org.easymock.samples.ExampleTest.voteForRemovals":12,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":60,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":32,"org.easymock.samples.ConstructorCalledMockTest.testTax":6,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":102,"org.easymock.tests.ReplayStateInvalidUsageTest.times":323,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":273,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":299,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":166,"org.easymock.tests2.UsageTest.argumentsOrdered":264,"org.easymock.samples.ExampleTest.removeNonExistingDocument":269,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":19,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":251,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":27,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":74,"org.easymock.tests2.CaptureTest.testCaptureMultiple":256,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":291,"org.easymock.tests2.AnswerTest.answer":146,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":348,"org.easymock.tests.MockingTest.testNicePartialClassMocking":34,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":354,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":46,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":70,"org.easymock.tests2.UsageConstraintsTest.any":99,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":77,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":40,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":349,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":45,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":255,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":188,"org.easymock.tests.UsageExpectAndThrowTest.longType":203,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":217,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":240,"org.easymock.tests2.CallbackTest.callback":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":174,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":185,"org.easymock.tests2.NameTest.nameForMock":265,"org.easymock.tests.UsageTest.argumentsOrdered":259,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":92,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":159,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":5,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":87,"org.easymock.tests2.NameTest.nameForStrictMock":266,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":275,"org.easymock.tests2.MockBuilderTest.testCreateMockString":341,"org.easymock.tests2.CaptureTest.testCaptureNone":136,"org.easymock.tests2.SerializationTest.test":129,"org.easymock.tests.UsageExpectAndReturnTest.longType":72,"org.easymock.tests2.SerializationTest.testClass":128,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":249,"org.easymock.tests2.CaptureTest.testCaptureFirst":140,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":108,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":196,"org.easymock.tests2.UsageTest.niceToStrict":116,"org.easymock.tests2.EasyMockSupportTest.testVerify":253,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":296,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":306,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":295,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":26,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":339,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":303,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":205,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":327,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":113,"org.easymock.tests2.UsageTest.strictResetToDefault":114,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":213,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":86,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":161,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":170,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":281,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":200,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":98,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":76,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":152,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":331,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":342,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":106,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":165,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":221,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":162,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":300,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":35,"org.easymock.tests2.UsageConstraintsTest.testOr":96,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":142,"org.easymock.tests2.DelegateToTest.testDelegate":242,"org.easymock.tests2.UsageConstraintsTest.testNotNull":110,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":244,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":122,"org.easymock.tests.MockClassControlTest.testHashCode":288,"org.easymock.tests2.CaptureTest.testCapture_2617107":247,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":324,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":58,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":65,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":81,"org.easymock.tests2.ThreadingTest.testThreadSafe":141,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":118,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":42,"org.easymock.tests.UsageThrowableTest.noUpperLimit":236,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":149,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":151,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":0,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":187,"org.easymock.tests.UsageExpectAndReturnTest.floatType":71,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":179,"org.easymock.tests2.UsageTest.wrongArguments":262,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":333,"org.easymock.tests2.UsageConstraintsTest.testSame":95,"org.easymock.tests2.UsageTest.resumeIfFailure":120,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":287,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":346,"org.easymock.tests.UsageOverloadedMethodTest.overloading":31,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":153,"org.easymock.samples.SupportTest.voteForRemovals":8,"org.easymock.tests.UsageRangeTest.combination":51,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":63,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":345,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":7,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":111,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":237,"org.easymock.tests.UsageTest.openCallCountByLastCall":21,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":206,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":344,"org.easymock.tests2.NameTest.nameForNiceMock":267,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":322,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":54,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":4,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":41,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":125,"org.easymock.tests2.CaptureTest.testPrimitive":133,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":164,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":83,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":214,"org.easymock.samples.BasicClassMockTest.testPrintContent":197,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":279,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":36,"org.easymock.tests.UsageExpectAndThrowTest.floatType":202,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":343,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":2,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":84,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":163,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":239,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":313,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":310,"org.easymock.tests2.UsageStrictMockTest.differentMethods":127,"org.easymock.tests.UsageTest.exactCallCountByLastCall":23,"org.easymock.tests2.AnswerTest.stubAnswer":147,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":180,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":68,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":184,"org.easymock.tests2.CaptureTest.testCaptureLast":135,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":201,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":312,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":234,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":156,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":173,"org.easymock.tests.UsageStrictMockTest.range":47,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":22,"org.easymock.tests.UsageTest.unexpectedCallWithArray":282,"org.easymock.tests.MockingTest.testPartialClassMocking":33,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":85,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":263,"org.easymock.tests2.UsageConstraintsTest.constraints":91,"org.easymock.samples.ExampleTest.addDocument":194,"org.easymock.tests2.UsageConstraintsTest.lessThan":112,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":274,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":332,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":258,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":270,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":44,"org.easymock.tests.UsageVarargTest.varargLongAccepted":226,"org.easymock.tests.ObjectMethodsTest.testHashCode":307,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":169,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":171,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":260,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":218,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":175,"org.easymock.tests2.UsageStrictMockTest.range":126,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":154,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":28,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":29,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":293,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":350,"org.easymock.tests.UsageTest.moreThanOneArgument":20,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":37,"org.easymock.tests2.UsageTest.openCallCountByLastCall":117,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":290,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":157,"org.easymock.tests.UsageStrictMockTest.differentMethods":48,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":182,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":90,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":284,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":158,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":204,"org.easymock.tests.DefaultClassInstantiatorTest.object":302,"org.easymock.tests.UsageVarargTest.differentLength":301,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":49,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":353,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":69,"org.easymock.tests2.CaptureTest.testCapture2_2446744":139,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":199,"org.easymock.tests.GenericTest.testPackageScope":67}}]

[{"transplant":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:71","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:365","sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[17,18,19],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"this.org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[20],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[21],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[22,23,24,25],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[26,27,28],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[29],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1660","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:127","sourceCode":"java.lang.Object[][int] = java.lang.Object","type":"CtAssignmentImpl"},"failures":[30],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[31,32,33,34,35,36],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs","constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:364","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[37,38],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:127","sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:135","sourceCode":"java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader()","type":"CtAssignmentImpl"},"failures":[39],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"failures":[40],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1877","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.CompareEqual<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[41,42],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:42","sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","type":"CtThrowImpl"},"failures":[43],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:70","sourceCode":"java.lang.Class<?>[][int] = java.lang.Class<?>","type":"CtAssignmentImpl"},"failures":[44,45,46],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[47,48,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:124","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","bridgeMethod":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:129","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[8,80],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:197","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[81,82,83,84,85],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","answer":"answer"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[86],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[87,88,89,90,29,91,92,93,94,95,96],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:193","sourceCode":"if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[97,98,99,100,101,102,103],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"i"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:438","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":29,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":15,"org.easymock.tests2.CompareToTest.testGreateOrEqual":22,"org.easymock.tests2.StubTest.stubWithReturnValue":2,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":103,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":101,"org.easymock.tests.UsageVarargTest.allKinds":80,"org.easymock.tests.MockingTest.testPartialClassMocking":76,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":100,"org.easymock.tests2.DelegateToTest.testStubDelegate":1,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":85,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":46,"org.easymock.tests2.AnswerTest.stubAnswer":3,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":70,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":58,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":10,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":23,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":67,"org.easymock.samples.ConstructorCalledMockTest.testTax":31,"org.easymock.tests.UsageStrictMockTest.range":7,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":19,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":48,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":55,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":32,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":4,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":79,"org.easymock.tests2.UsageConstraintsTest.testNull":91,"org.easymock.tests2.SerializationTest.test":45,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":64,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":49,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":9,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":39,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":5,"org.easymock.tests.GenericTest.testPackageScope":73,"org.easymock.tests.UsageVerifyTest.twoReturns":6,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":66,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":82,"org.easymock.tests2.CaptureTest.testCapture_2617107":88,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":102,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":60,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":12,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":36,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":13,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":27,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":28,"org.easymock.tests2.SerializationTest.testClass":44,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":18,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":17,"org.easymock.tests.LimitationsTest.mockNativeMethod":75,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":74,"org.easymock.tests2.AnswerTest.answer":86,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":94,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":52,"org.easymock.tests2.CaptureTest.testAnd":87,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":84,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":8,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":40,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":78,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":65,"org.easymock.tests.MockingTest.testNicePartialClassMocking":77,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":93,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":95,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":41,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":61,"org.easymock.tests2.UsageStrictMockTest.range":0,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":43,"org.easymock.tests2.UsageConstraintsTest.lessThan":25,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":99,"org.easymock.tests.UsageTest.exactCallCountByLastCall":16,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":59,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":83,"org.easymock.tests2.CaptureTest.testCaptureRightOne":89,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":37,"org.easymock.tests2.UsageConstraintsTest.testOr":92,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":97,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":54,"org.easymock.tests2.MockBuilderTest.testWithConstructor":34,"org.easymock.tests2.MockBuilderTest.testCreateMockString":68,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":38,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":26,"org.easymock.tests2.UsageConstraintsTest.cmpTo":42,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":71,"org.easymock.samples.PartialClassMockTest.testGetArea":47,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":11,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":21,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":14,"org.easymock.tests2.UsageConstraintsTest.testNotNull":96,"org.easymock.tests.DefaultClassInstantiatorTest.object":30,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":81,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":63,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":62,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":33,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":53,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":35,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":56,"org.easymock.tests2.UsageConstraintsTest.constraints":90,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":24,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":72,"org.easymock.tests2.EasyMockSupportClassTest.testAll":69,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":51,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":20,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":50}}]

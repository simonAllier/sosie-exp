[{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[67,68,69],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"failures":[70],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:205","sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:204","sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((this.org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"failures":[71,72,73,74,75,76],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[77,78,79],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[33],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"failures":[80,81,82],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[39],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[83],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[84,85,86,73,87,88,74,75,89,90,91,92],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:52","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:57","sourceCode":"try {\n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.IMocksBehavior.addActual(org.easymock.internal.Invocation);\n    try {\n        return org.easymock.internal.Result.answer();\n    } catch (final java.lang.Throwable java.lang.Throwable) {\n        if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n            throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n        } \n        throw java.lang.Throwable;\n    }\n} finally {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation();\n}","type":"CtTryImpl"},"failures":[93,94,95,96,97,98,99,100,101,102,103,104,0,1,105,106,107,108,80,81,109,110,111,112,113,114,115,116,117,118,119,120,121,122,2,123,124,125,126,127,128,129,130,131,132,133,3,134,135,4,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,5,6,172,173,174,175,7,8,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,9,10,11,12,13,199,82,200,14,15,16,17,18,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,71,72,219,220,221,222,223,224,225,226,227,228,229,230,231,232,78,79,19,233,234,235,236,237,238,239,240,241,20,242,21,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,22,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,23,287,288,289,290,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,90,307,308,309,91,310,69,311,312,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1915","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","type":"CtInvocationImpl"},"failures":[53,55,57,58,59,62,63,64,65],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[313,314,315,19,234],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1092","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"substring","key":"substring"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:133","sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:128","sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","type":"CtAssignmentImpl"},"failures":[316,317],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"failures":[93,94,95,96,98,99,104,0,1,105,106,107,108,80,81,109,110,111,112,113,118,119,120,121,122,2,123,124,125,126,127,128,129,130,131,132,133,3,134,135,318,4,136,141,142,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,5,6,172,173,174,175,319,7,8,320,321,322,323,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,9,10,11,12,13,199,82,200,14,15,16,17,18,324,325,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,221,222,232,78,79,19,233,234,238,20,21,243,244,245,246,247,248,249,250,251,252,253,254,256,257,258,259,260,261,262,263,264,265,22,270,271,272,273,274,275,276,277,278,280,281,282,283,284,285,286,23,287,288,289,290,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,292,293,294,295,296,297,298,299,300,301,303,304,305,307,308,310,69,311,312,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:320","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[67,68],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[45],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:77","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"failures":[326],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:120","sourceCode":"java.lang.StringBuilder.append(\"\\n  Unexpected method call \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[4,327],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"argType"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[328,329],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1542","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(long))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[330,176,331,53,54,55,56,57,58,59,60,61,62,332,63,64,65,66],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[255],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1848","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[333,334,335,336,337,338,93,94,95,96,98,99,104,106,124,125,126,127,128,129,130,131,132,133,3,134,135,4,144,147,148,170,171,5,6,172,173,174,175,319,322,323,16,17,209,211,212,213,214,215,216,217,218,219,221,222,224,225,230,20,21,243,339,340,341,342,250,252,256,257,271,275,281,282,283,284,285,286,23,287,288,289,290,35,36,48,49,294,304,54,55,58,59,60,61,66],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:54","sourceCode":"return false","type":"CtReturnImpl"},"failures":[343],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[30,35,45,50],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[344],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":28,"org.easymock.tests2.UsageTest.argumentsOrdered":257,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":141,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":282,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":122,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":67,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":252,"org.easymock.tests2.StubTest.stubWithReturnValue":244,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":88,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":219,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":49,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":185,"org.easymock.tests2.SerializationTest.testAllMockedMethod":304,"org.easymock.tests2.DelegateToTest.testReturnException":310,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":120,"org.easymock.tests.MockingTest.testPartialClassMocking":115,"org.easymock.samples.SupportTest.voteForRemovals":218,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":162,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":344,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":239,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":150,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":314,"org.easymock.tests.UsageExpectAndThrowTest.object":160,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":246,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":46,"org.easymock.tests2.DelegateToTest.testWrongClass":311,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":7,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":8,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":34,"org.easymock.tests2.UsageTest.wrongArguments":250,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":14,"org.easymock.samples.ConstructorCalledMockTest.testTax":71,"org.easymock.tests.UsageStrictMockTest.range":173,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":102,"org.easymock.samples.ExampleTest.answerVsDelegate":210,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":279,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":305,"org.easymock.tests2.UsageConstraintsTest.testNull":30,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":263,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":161,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":325,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":281,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":227,"org.easymock.tests2.CaptureTest.testPrimitive":56,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":18,"org.easymock.tests.UsageTest.moreThanOneArgument":142,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":147,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":169,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":262,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":101,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":203,"org.easymock.tests2.CaptureTest.testCaptureNone":61,"org.easymock.tests.UsageUnorderedTest.message":4,"org.easymock.tests.UsageVerifyTest.twoReturns":200,"org.easymock.tests.UsageVarargTest.varargByteAccepted":132,"org.easymock.tests2.ThreadingTest.testThreadSafe":232,"org.easymock.tests.UsageTest.argumentsOrdered":148,"org.easymock.tests.UsageVarargTest.varargIntAccepted":126,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":96,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":221,"org.easymock.tests2.CaptureTest.testCapture_2617107":55,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":9,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":223,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":17,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":226,"org.easymock.tests2.UsageConstraintsTest.any":36,"org.easymock.tests2.StubTest.stub":243,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":13,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":121,"org.easymock.tests.UsageExpectAndThrowTest.longType":153,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":287,"org.easymock.tests2.SerializationTest.testClass":302,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":301,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":292,"org.easymock.tests.LimitationsTest.mockNativeMethod":118,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":326,"org.easymock.tests2.AnswerTest.answer":293,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":195,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":35,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":336,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":237,"org.easymock.tests2.CaptureTest.testAnd":53,"org.easymock.tests2.UsageTest.strictResetToDefault":248,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":290,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":267,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":87,"org.easymock.tests2.NameTest.nameForMocksControl":342,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":83,"org.easymock.tests2.MockedExceptionTest.testMockedException":298,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":202,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":276,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":197,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":146,"org.easymock.tests2.DelegateToTest.testDelegate":312,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":242,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":117,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":154,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":260,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":228,"org.easymock.tests.MockingTest.testNicePartialClassMocking":116,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":165,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":265,"org.easymock.tests2.CaptureTest.testCaptureLast":60,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":2,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":91,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":33,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":47,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":140,"org.easymock.tests2.CaptureTest.testCapture1_2446744":57,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":92,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":70,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":176,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":163,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":235,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":158,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":256,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":51,"org.easymock.tests.UsageThrowableTest.throwError":105,"org.easymock.tests.UsageStrictMockTest.differentMethods":174,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":317,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":79,"org.easymock.tests2.MockBuilderTest.testCreateMockString":231,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":205,"org.easymock.tests.UsageExpectAndThrowTest.floatType":152,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":42,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":294,"org.easymock.tests.UsageVerifyTest.twoThrows":82,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":84,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":240,"org.easymock.samples.PartialClassMockTest.testGetArea":220,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":10,"org.easymock.samples.ExampleTest.voteAgainstRemoval":212,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":269,"org.easymock.tests2.UsageTest.niceToStrict":251,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":151,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":85,"org.easymock.tests2.UsageConstraintsTest.testNotNull":50,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":297,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":110,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":225,"org.easymock.tests2.UsageTest.defaultResetToNice":255,"org.easymock.tests2.MockBuilderTest.testCreateMock":229,"org.easymock.samples.ExampleTest.voteAgainstRemovals":209,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":335,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":191,"org.easymock.tests.UsageVarargTest.differentLength":129,"org.easymock.tests2.CallbackTest.callback":271,"org.easymock.tests2.UsageConstraintsTest.equals":343,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":76,"org.easymock.tests.UsageTest.openCallCountByLastCall":145,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":159,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":277,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":25,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":338,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":16,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":100,"org.easymock.tests.UsageCallCountTest.tooFewCalls":94,"org.easymock.tests.UsageOverloadedMethodTest.overloading":207,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":40,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":113,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":307,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":206,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":187,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":39,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":62,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":103,"org.easymock.tests.UsageThrowableTest.throwCheckedException":80,"org.easymock.tests.MockClassControlTest.testEquals":324,"org.easymock.tests2.EasyMockSupportClassTest.testAll":238,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":135,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":167,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":236,"org.easymock.tests2.CaptureTest.testCaptureAll":54,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":138,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":309,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":1,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":90,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":77,"org.easymock.tests2.UsageConstraintsTest.testMatches":41,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":308,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":296,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":204,"org.easymock.samples.ExampleTest.voteForRemovals":214,"org.easymock.tests2.NameTest.nameForNiceMock":341,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":233,"org.easymock.tests.UsageVarargTest.allKinds":3,"org.easymock.tests2.DependencyTest.testInterfaceMocking":245,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":199,"org.easymock.samples.BasicClassMockTest.testPrintContent":222,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":139,"org.easymock.samples.ExampleTest.addDocument":213,"org.easymock.tests2.DelegateToTest.testStubDelegate":69,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":109,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":285,"org.easymock.tests2.AnswerTest.stubAnswer":295,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":123,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":6,"org.easymock.tests2.UsageConstraintsTest.greaterThan":43,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":270,"org.easymock.tests.UsageVarargTest.varargLongAccepted":131,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":175,"org.easymock.samples.ExampleTest.voteForRemoval":211,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":78,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":194,"org.easymock.tests.UsageExpectAndReturnTest.floatType":178,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":291,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":266,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":72,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":44,"org.easymock.tests.UsageThrowableTest.noUpperLimit":106,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":247,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":26,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":104,"org.easymock.tests2.SerializationTest.test":303,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":58,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":328,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":274,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":107,"org.easymock.tests2.UsageConstraintsTest.testSame":31,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":177,"org.easymock.samples.SupportTest.addDocument":217,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":119,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":68,"org.easymock.tests2.CaptureTest.testCaptureFirst":66,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":275,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":259,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":315,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":114,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":183,"org.easymock.tests.GenericTest.testPackageScope":134,"org.easymock.tests2.UsageTest.moreThanOneArgument":249,"org.easymock.tests2.CaptureTest.testCapture2_2446744":65,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":19,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":337,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":230,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":133,"org.easymock.tests.GenericTest.testBridgedEquals":318,"org.easymock.tests2.NameTest.nameForMock":339,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":86,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":98,"org.easymock.tests.UsageExpectAndReturnTest.longType":179,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":272,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":136,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":168,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":188,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":48,"org.easymock.tests2.UsageStrictMockTest.differentMethods":289,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":75,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":166,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":201,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":180,"org.easymock.tests.UsageCallCountTest.tooManyCalls":99,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":164,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":320,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":198,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":93,"org.easymock.tests2.MockedExceptionTest.testRealException":300,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":184,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":23,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":155,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":81,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":15,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":306,"org.easymock.tests2.NameTest.nameForStrictMock":340,"org.easymock.tests2.UsageConstraintsTest.testContains":38,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":299,"org.easymock.tests2.UsageConstraintsTest.testFind":29,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":208,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":20,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":264,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":21,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":170,"org.easymock.tests.UsageExpectAndReturnTest.object":186,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":327,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":45,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":22,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":224,"org.easymock.tests2.UsageStrictMockTest.range":288,"org.easymock.tests2.UsageConstraintsTest.lessThan":52,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":280,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":128,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":321,"org.easymock.tests.UsageTest.exactCallCountByLastCall":149,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":0,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":334,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":273,"org.easymock.tests2.CaptureTest.testCaptureRightOne":63,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":322,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":316,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":313,"org.easymock.tests2.UsageConstraintsTest.testOr":32,"org.easymock.tests.UsageRangeTest.combination":196,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":89,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":261,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":192,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":124,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":112,"org.easymock.tests.UsageTest.wrongArguments":144,"org.easymock.tests2.MockBuilderTest.testWithConstructor":73,"org.easymock.tests2.EasyMockSupportTest.testVerify":284,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":181,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":333,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":189,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":323,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":329,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":111,"org.easymock.tests.UsageVarargTest.varargShortAccepted":130,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":234,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":97,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":24,"org.easymock.tests2.UsageConstraintsTest.cmpTo":37,"org.easymock.tests.UsageVarargTest.varargCharAccepted":127,"org.easymock.tests2.CaptureTest.testCaptureMultiple":331,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":286,"org.easymock.tests2.UsageTest.openCallCountByLastCall":253,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":254,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":283,"org.easymock.tests2.CaptureTest.testCaptureFromStub":64,"org.easymock.tests.UsageTest.unexpectedCallWithArray":143,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":157,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":5,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":108,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":95,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":74,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":190,"org.easymock.tests2.CaptureTest.testCapture":332,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":268,"org.easymock.tests2.UsageConstraintsTest.constraints":27,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":172,"org.easymock.samples.ExampleTest.addAndChangeDocument":215,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":156,"org.easymock.tests.CapturesMatcherTest.test":330,"org.easymock.tests.UsageStrictMockTest.testVerify":319,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":193,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":241,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":171,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":137,"org.easymock.tests2.UsageTest.resumeIfFailure":258,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":59,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":11,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":182,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":12,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":278,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":125}}]

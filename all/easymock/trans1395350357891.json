[{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"argType"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:39","sourceCode":"return int <= 0","type":"CtReturnImpl"},"failures":[11,12,13],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"failures":[14],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:38","sourceCode":"new java.util.HashSet<java.lang.String>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:155","sourceCode":"if (!(org.easymock.internal.UnorderedBehavior.verify())) {\n    boolean = false;\n    break;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:162","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"answer":"answer"}},{"position":"org.easymock.internal.Range:40","failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,11,69,12,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,0,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,1,155,156,2,157,158,159,160,3,161,162,163,164,165,5,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,8,198,199,200,201,9,10,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[339],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[493,494,269,495,496,410],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[137,138],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:232","sourceCode":"if (org.easymock.internal.Injection != null) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n} ","type":"CtIfImpl"},"failures":[63,190],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"actualTypeArgument","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Not:40","sourceCode":"java.lang.StringBuffer.append(\"not(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.And:49","sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[12,497],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:364","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[318,479],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[48,51,52,169,270,273,274,309,310,311,316,409,453,457,458,460,463,491],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:81","sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[25,27,57,58,59,61,63,64,65,68,184,185,186,188,190,191,192,195],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[239],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[484,485],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Compare:53","failures":[85],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:47","sourceCode":"java.lang.StringBuffer.append(((((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol())) + \" 0\"))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"type":"type"}},{"transplant":{"position":"org.easymock.EasyMock:1726","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:450","sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[145,146,226],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1789","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","type":"CtInvocationImpl"},"failures":[84],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[73,88,93],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:79","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[70,75,78],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:72","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[498,499,500,501],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[260,264],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[12],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[202,203,204],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"toStringMethod","method":"toStringMethod"}},{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[23,24,134,6],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":70,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":408,"org.easymock.tests2.UsageTest.argumentsOrdered":177,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":151,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":190,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":327,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":172,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":27,"org.easymock.tests2.DelegateToTest.testReturnException":236,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":297,"org.easymock.tests.MockingTest.testPartialClassMocking":344,"org.easymock.tests.MockClassControlTest.testToString":399,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":230,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":307,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":133,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":336,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":215,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":449,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":211,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":35,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":77,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":437,"org.easymock.tests2.UsageTest.wrongArguments":170,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":68,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":246,"org.easymock.samples.ExampleTest.answerVsDelegate":16,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":369,"org.easymock.tests2.UsageConstraintsTest.testNull":73,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":349,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":120,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":404,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":150,"org.easymock.tests2.CaptureTest.testPrimitive":99,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":441,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":468,"org.easymock.tests.UsageTest.moreThanOneArgument":409,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":119,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":255,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":478,"org.easymock.tests.UsageTest.argumentsOrdered":415,"org.easymock.tests.UsageVarargTest.varargIntAccepted":419,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":332,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":429,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":154,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":38,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":194,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":159,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":319,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":433,"org.easymock.tests.ReplayStateInvalidUsageTest.times":393,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":62,"org.easymock.tests2.DependencyTest.testClassMocking":32,"org.easymock.tests2.AnswerTest.answer":110,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":78,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":334,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":56,"org.easymock.tests2.CaptureTest.testAnd":96,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":366,"org.easymock.tests2.UsageTest.strictResetToDefault":168,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":128,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":2,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":254,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":145,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":304,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":482,"org.easymock.tests2.DelegateToTest.testDelegate":240,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":464,"org.easymock.tests.LimitationsTest.mockFinalMethod":375,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":300,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":448,"org.easymock.tests2.DependencyTest.testClassMockingSupport":33,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":314,"org.easymock.tests2.CaptureTest.testCapture1_2446744":100,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":124,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":462,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":54,"org.easymock.tests.UsageThrowableTest.throwError":470,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":387,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":368,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":195,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":354,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":257,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":6,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":229,"org.easymock.samples.PartialClassMockTest.testGetArea":26,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":388,"org.easymock.tests.MockingTest.testInterfaceMocking":346,"org.easymock.tests2.CompareToTest.testLessOrEqual":13,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":430,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":352,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":450,"org.easymock.tests2.UsageTest.niceToStrict":171,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":216,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":363,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":317,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":158,"org.easymock.tests2.MockBuilderTest.testCreateMock":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":224,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":65,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":493,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":458,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":146,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":365,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":485,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":376,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":244,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":499,"org.easymock.tests.UsageOverloadedMethodTest.overloading":356,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":220,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":226,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":489,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":83,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":287,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":355,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":82,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":105,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":420,"org.easymock.tests.MockClassControlTest.testEquals":403,"org.easymock.tests2.EasyMockSupportClassTest.testAll":208,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":250,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":466,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":446,"org.easymock.tests2.CaptureTest.testCaptureAll":97,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":55,"org.easymock.tests.MockNameTest.defaultName":435,"org.easymock.tests2.UsageConstraintsTest.testMatches":84,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":385,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":256,"org.easymock.samples.ExampleTest.voteForRemovals":20,"org.easymock.tests.UsageVarargTest.allKinds":428,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":309,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":447,"org.easymock.samples.BasicClassMockTest.testPrintContent":31,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":476,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":46,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":191,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":239,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":301,"org.easymock.tests2.UsageConstraintsTest.greaterThan":86,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":209,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":303,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":131,"org.easymock.samples.ExampleTest.voteForRemoval":17,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":266,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":137,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":132,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":370,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":39,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":123,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":436,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":167,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":163,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":324,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":143,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":472,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":206,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":296,"org.easymock.tests2.CaptureTest.testCaptureFirst":109,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":235,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":323,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":144,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":179,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":492,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":283,"org.easymock.tests2.UsageTest.moreThanOneArgument":169,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":139,"org.easymock.tests2.CaptureTest.testCapture2_2446744":108,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":165,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":335,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":427,"org.easymock.tests.GenericTest.testBridgedEquals":252,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":500,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":383,"org.easymock.tests.UsageExpectAndReturnTest.longType":279,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":444,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":141,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":467,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":434,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":91,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":465,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":406,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":253,"org.easymock.tests.UsageCallCountTest.tooManyCalls":384,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":378,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":225,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":284,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":67,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":454,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":475,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":197,"org.easymock.tests.MockingTest.testNiceClassMocking":350,"org.easymock.tests.MockingTest.testClassMocking":342,"org.easymock.tests2.UsageConstraintsTest.testContains":81,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":377,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":182,"org.easymock.tests2.UsageConstraintsTest.testFind":72,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":357,"org.easymock.tests.MockTypeTest.fromEasyMockClass":367,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":45,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":267,"org.easymock.tests.UsageExpectAndReturnTest.object":286,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":125,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":66,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":149,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":422,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":361,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":501,"org.easymock.tests.UsageTest.exactCallCountByLastCall":416,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":312,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":322,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":479,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":306,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":0,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":417,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":292,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":488,"org.easymock.tests.MockClassControlTest.testHashCode":402,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":185,"org.easymock.tests2.EasyMockSupportTest.testVerify":153,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":218,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":480,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":486,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":484,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":53,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":116,"org.easymock.tests.UsageVarargTest.varargCharAccepted":421,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":258,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":47,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":340,"org.easymock.tests2.UsageTest.openCallCountByLastCall":173,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":152,"org.easymock.tests.DefaultClassInstantiatorTest.object":259,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":483,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":359,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":456,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":219,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":473,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":60,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":184,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":401,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":129,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":455,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":293,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":405,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":400,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":227,"org.easymock.tests2.UsageTest.resumeIfFailure":178,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":364,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":37,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":299,"org.easymock.tests2.StubTest.stubWithReturnValue":243,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":3,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":92,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":285,"org.easymock.tests2.SerializationTest.testAllMockedMethod":204,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":333,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":494,"org.easymock.samples.SupportTest.voteForRemovals":29,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":248,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":187,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":461,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":339,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":111,"org.easymock.tests.UsageExpectAndThrowTest.object":459,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":308,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":89,"org.easymock.tests2.DelegateToTest.testWrongClass":238,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":442,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":443,"org.easymock.samples.ConstructorCalledMockTest.testTax":23,"org.easymock.tests.UsageStrictMockTest.range":272,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":41,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":148,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":196,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":460,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":160,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":414,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":205,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":245,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":495,"org.easymock.tests2.CaptureTest.testCaptureNone":104,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":353,"org.easymock.tests.UsageUnorderedTest.message":469,"org.easymock.tests.UsageVerifyTest.twoReturns":311,"org.easymock.tests.UsageVarargTest.varargByteAccepted":426,"org.easymock.tests2.ThreadingTest.testThreadSafe":136,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":222,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":381,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":30,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":362,"org.easymock.tests2.CaptureTest.testCapture_2617107":98,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":316,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":440,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":337,"org.easymock.tests2.UsageConstraintsTest.any":79,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":392,"org.easymock.tests2.StubTest.stub":242,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":407,"org.easymock.tests.UsageExpectAndThrowTest.longType":452,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":298,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":338,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":263,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":391,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":49,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":189,"org.easymock.tests2.SerializationTest.testClass":202,"org.easymock.tests.LimitationsTest.mockNativeMethod":374,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":251,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":295,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":59,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":52,"org.easymock.tests2.NameTest.nameForMocksControl":234,"org.easymock.tests2.MockedExceptionTest.testMockedException":181,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":210,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":413,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":453,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":44,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":347,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":117,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":161,"org.easymock.tests.MockingTest.testNicePartialClassMocking":345,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":122,"org.easymock.tests2.CaptureTest.testCaptureLast":103,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":57,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":315,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":9,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":76,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":90,"org.easymock.tests.MockingTest.testTwoMocks":343,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":10,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":276,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":457,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":176,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":94,"org.easymock.samples.ExampleTest.removeNonExistingDocument":21,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":389,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":64,"org.easymock.tests.UsageStrictMockTest.differentMethods":273,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":186,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":261,"org.easymock.tests2.ConstraintsToStringTest.andToString":497,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":138,"org.easymock.tests2.MockBuilderTest.testCreateMockString":166,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":397,"org.easymock.tests.UsageExpectAndThrowTest.floatType":451,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":212,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":85,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":207,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":113,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":135,"org.easymock.tests.UsageVerifyTest.twoThrows":310,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":487,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":221,"org.easymock.samples.ExampleTest.voteAgainstRemoval":18,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":328,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":351,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":130,"org.easymock.tests.LimitationsTest.privateConstructor":373,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":7,"org.easymock.tests2.UsageConstraintsTest.testNotNull":93,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":477,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":180,"org.easymock.tests2.UsageTest.defaultResetToNice":175,"org.easymock.samples.ExampleTest.voteAgainstRemovals":15,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":291,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":329,"org.easymock.tests.UsageVarargTest.differentLength":423,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":58,"org.easymock.tests2.CallbackTest.callback":241,"org.easymock.tests2.UsageConstraintsTest.equals":71,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":126,"org.easymock.tests.UsageTest.openCallCountByLastCall":412,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":11,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":439,"org.easymock.tests.UsageCallCountTest.tooFewCalls":379,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":198,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":247,"org.easymock.tests.UsageThrowableTest.throwCheckedException":474,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":496,"org.easymock.tests.MockingTest.testStrictClassMocking":341,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":201,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":313,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":8,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":63,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":394,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":200,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":115,"org.easymock.tests.ObjectMethodsTest.testHashCode":360,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":140,"org.easymock.tests2.NameTest.nameForNiceMock":233,"org.easymock.tests2.DependencyTest.testInterfaceMocking":34,"org.easymock.samples.ExampleTest.addDocument":19,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":228,"org.easymock.tests2.DelegateToTest.testStubDelegate":237,"org.easymock.tests2.AnswerTest.stubAnswer":114,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":270,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":162,"org.easymock.tests.UsageVarargTest.varargLongAccepted":425,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":274,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":326,"org.easymock.tests.UsageExpectAndReturnTest.floatType":278,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":294,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":134,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":24,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":490,"org.easymock.tests.UsageThrowableTest.noUpperLimit":471,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":87,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":193,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":69,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":36,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":101,"org.easymock.tests2.SerializationTest.test":203,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":260,"org.easymock.tests2.UsageConstraintsTest.testSame":74,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":277,"org.easymock.samples.SupportTest.addDocument":28,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":199,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":390,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":213,"org.easymock.tests.GenericTest.testPackageScope":249,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":481,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":321,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":192,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":348,"org.easymock.tests2.NameTest.nameForMock":231,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":288,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":5,"org.easymock.tests2.UsageStrictMockTest.differentMethods":51,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":127,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":280,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":463,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":358,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":305,"org.easymock.tests2.MockedExceptionTest.testRealException":183,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":371,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":42,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":331,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":330,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":438,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":396,"org.easymock.tests2.NameTest.nameForStrictMock":232,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":157,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":498,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":43,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":121,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":40,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":88,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":262,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":155,"org.easymock.tests2.UsageStrictMockTest.range":50,"org.easymock.tests2.UsageConstraintsTest.lessThan":95,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":188,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":142,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":14,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":325,"org.easymock.tests2.CaptureTest.testCaptureRightOne":106,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":217,"org.easymock.tests2.UsageConstraintsTest.testOr":75,"org.easymock.tests.UsageRangeTest.combination":302,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":118,"org.easymock.tests.UsageTest.wrongArguments":411,"org.easymock.tests2.MockBuilderTest.testWithConstructor":1,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":214,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":398,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":281,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":289,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":318,"org.easymock.tests.UsageVarargTest.varargShortAccepted":424,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":264,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":382,"org.easymock.tests2.UsageConstraintsTest.cmpTo":80,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":112,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":320,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":174,"org.easymock.tests2.CaptureTest.testCaptureFromStub":107,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":386,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":156,"org.easymock.tests.UsageTest.unexpectedCallWithArray":410,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":269,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":380,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":4,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":290,"org.easymock.tests2.UsageConstraintsTest.constraints":12,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":271,"org.easymock.samples.ExampleTest.addAndChangeDocument":22,"org.easymock.tests.UsageStrictMockTest.testVerify":275,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":25,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":268,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":445,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":102,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":431,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":282,"org.easymock.tests.LimitationsTest.abstractClass":372,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":491,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":432,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":418,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":147}}]

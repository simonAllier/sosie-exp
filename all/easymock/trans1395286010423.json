[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,50,51,51,52,53,54],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1789","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"regex"}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[55],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:83","sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","type":"CtThrowImpl"},"failures":[56],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:173","failures":[57],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:223","failures":[7,13,18,31,58,59],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"method"}},{"position":"org.easymock.internal.RecordState:117","failures":[60,61,62,63,64,65,66,67],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"failures":[68],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[69,70,71],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:337","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[72,73,74],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[57,0,1,2,3,75,4,5,76,77,78,79,80,6,7,8,9,15,17,19,20,22,25,81,26,27,82,28,29,30,32,34,35,36,38,40,41,42,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,52,122],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"returnedType"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:180","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[20,48],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[123],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1620","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(double[]))","type":"CtInvocationImpl"},"failures":[124],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:681","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:105","sourceCode":"if ((java.lang.Class<T>.isInterface()) && (java.lang.reflect.Method[] != null)) {\n    throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\");\n} ","type":"CtIfImpl"},"failures":[61,62,125,126,127,128,129,130,131,132,133,134,135,136,137,138,124,139,140,141,142,143,123,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,0,1,2,3,75,4,5,55,162,6,7,8,9,163,63,164,165,166,65,167,168,169,170,12,13,15,17,18,20,21,22,24,171,172,173,174,25,175,81,26,27,82,28,29,30,31,32,33,35,59,176,37,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,38,206,207,208,209,39,40,41,42,83,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,43,227,228,229,230,231,232,233,234,235,236,73,237,44,46,238,239,97,98,99,100,240,241,242,243,47,244,245,246,247,248,249,250,251,74,252,253,254,101,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,67,291,50,50,51,51,52],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1790","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cached":"cached"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[292,293,294,295,296,297,298],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:65","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:62","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Integer.java.lang.Class<java.lang.Integer>, java.lang.Integer.java.lang.Integer)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[299,300,301,302,303,67],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.ConstructorArgs:54","failures":[2,5,55,304,305,306,6,307,308,7,309,310,311,312,313,314,315,316,317,8,318,319,320,321,322,9,323,324,325,326,11,327,328,297,329,330,331,25,298,50,51],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:111","sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>[].int) ; int++) {\n    if (java.lang.Class<?>[][int].isPrimitive()) {\n        java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n    } else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n        java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n    } else {\n        final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n        org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n        java.lang.Object[][int] = java.lang.Object;\n    }\n}","type":"CtForImpl"},"failures":[332,333],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[59,176,37,177,334,335,336,337,338,339,340,341,342,343,236,344,256],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[344],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:201","sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = (java.util.Set<java.lang.reflect.Method>) == null ? new java.lang.reflect.Method[0] : java.util.Set<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.Set<java.lang.reflect.Method>.size()])","type":"CtLocalVariableImpl"},"failures":[7,8,9,11,13,15,16,363,17,18,19,20,329,21,22,24,25,298,31,364,34,35,58,59,365,46,48,49,50,50,51,51,52],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ClassProxyFactory:230","failures":[],"status":0,"binaryOperator":"(((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[366,367,368],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:40","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(double.double, java.lang.Double.java.lang.Double)","type":"CtInvocationImpl"},"failures":[369],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[370],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:93","failures":[234,332,333],"status":-1,"binaryOperator":"(java.lang.Class<?>.getConstructors().int) == 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1483","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":128,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":214,"org.easymock.tests2.UsageTest.argumentsOrdered":160,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":188,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":338,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":157,"org.easymock.tests2.StubTest.stubWithReturnValue":334,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":297,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":109,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":147,"org.easymock.tests2.SerializationTest.testAllMockedMethod":12,"org.easymock.tests2.DelegateToTest.testReturnException":299,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":336,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":73,"org.easymock.tests.MockingTest.testPartialClassMocking":40,"org.easymock.samples.SupportTest.voteForRemovals":122,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":365,"org.easymock.tests.MockClassControlTest.testToString":227,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":347,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":367,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":58,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":312,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":237,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":7,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":164,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":77,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":144,"org.easymock.tests2.DelegateToTest.testWrongClass":300,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":292,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":95,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":96,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":134,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":101,"org.easymock.tests2.UsageTest.wrongArguments":155,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":362,"org.easymock.tests.UsageStrictMockTest.range":89,"org.easymock.samples.ConstructorCalledMockTest.testTax":50,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":212,"org.easymock.samples.ExampleTest.answerVsDelegate":67,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":185,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":49,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":0,"org.easymock.tests2.UsageConstraintsTest.testNull":130,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":28,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":232,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":19,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":187,"org.easymock.tests2.CaptureTest.testPrimitive":195,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":304,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":253,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":218,"org.easymock.tests.UsageTest.moreThanOneArgument":215,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":211,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":82,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":93,"org.easymock.tests2.CaptureTest.testCaptureNone":200,"org.easymock.tests.UsageUnorderedTest.message":258,"org.easymock.tests.UsageVerifyTest.twoReturns":276,"org.easymock.tests.UsageVarargTest.varargByteAccepted":271,"org.easymock.tests2.ThreadingTest.testThreadSafe":175,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":286,"org.easymock.tests.UsageTest.argumentsOrdered":219,"org.easymock.tests.UsageVarargTest.varargIntAccepted":266,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":318,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":282,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":53,"org.easymock.tests2.CaptureTest.testCapture_2617107":194,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":83,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":296,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":13,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":352,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":257,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":18,"org.easymock.tests2.UsageConstraintsTest.any":136,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":251,"org.easymock.tests2.StubTest.stub":191,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":343,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":87,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":337,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":250,"org.easymock.tests2.SerializationTest.testClass":11,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":151,"org.easymock.tests.ReplayStateInvalidUsageTest.times":74,"org.easymock.tests.LimitationsTest.mockNativeMethod":38,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":163,"org.easymock.tests2.AnswerTest.answer":63,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":46,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":117,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":135,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":174,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":355,"org.easymock.tests2.CaptureTest.testAnd":192,"org.easymock.tests2.UsageTest.strictResetToDefault":153,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":328,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":33,"org.easymock.tests2.NameTest.nameForMocksControl":170,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":357,"org.easymock.tests2.MockedExceptionTest.testMockedException":176,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":92,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":308,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":99,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":182,"org.easymock.tests2.DelegateToTest.testDelegate":302,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":290,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":42,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":26,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":20,"org.easymock.tests.MockingTest.testNicePartialClassMocking":41,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":30,"org.easymock.tests2.CaptureTest.testCaptureLast":199,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":339,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":239,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":5,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":133,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":224,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":145,"org.easymock.tests.MockingTest.testTwoMocks":39,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":238,"org.easymock.tests2.CaptureTest.testCapture1_2446744":196,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":55,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":102,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":172,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":159,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":149,"org.easymock.tests.UsageThrowableTest.throwError":259,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":246,"org.easymock.samples.ExampleTest.removeNonExistingDocument":291,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":358,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":248,"org.easymock.tests.UsageStrictMockTest.differentMethods":90,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":346,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":353,"org.easymock.tests2.MockBuilderTest.testCreateMockString":24,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":309,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":141,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":306,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":64,"org.easymock.tests.UsageVerifyTest.twoThrows":275,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":240,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":325,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":324,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":8,"org.easymock.samples.PartialClassMockTest.testGetArea":52,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":247,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":84,"org.easymock.samples.ExampleTest.voteAgainstRemoval":120,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":366,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":233,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":35,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":313,"org.easymock.tests2.UsageTest.niceToStrict":156,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":326,"org.easymock.tests2.UsageConstraintsTest.testNotNull":148,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":263,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":59,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":69,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":17,"org.easymock.tests2.MockBuilderTest.testCreateMock":21,"org.easymock.tests2.UsageTest.defaultResetToNice":158,"org.easymock.samples.ExampleTest.voteAgainstRemovals":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":72,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":113,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":354,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":320,"org.easymock.tests.UsageVarargTest.differentLength":268,"org.easymock.tests2.CallbackTest.callback":60,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":364,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":359,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":183,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":125,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":277,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":256,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":210,"org.easymock.tests.UsageCallCountTest.tooFewCalls":280,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":322,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":317,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":139,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":209,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":3,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":110,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":124,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":201,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":213,"org.easymock.tests.MockClassControlTest.testEquals":231,"org.easymock.tests2.EasyMockSupportClassTest.testAll":6,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":45,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":222,"org.easymock.tests2.CaptureTest.testCaptureAll":193,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":173,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":236,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":4,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":2,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":252,"org.easymock.tests2.UsageConstraintsTest.testMatches":140,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":75,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":65,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":244,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":94,"org.easymock.tests.ObjectMethodsTest.testHashCode":207,"org.easymock.samples.ExampleTest.voteForRemovals":121,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":295,"org.easymock.tests2.NameTest.nameForNiceMock":169,"org.easymock.tests.UsageVarargTest.allKinds":273,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":274,"org.easymock.tests2.DependencyTest.testInterfaceMocking":76,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":294,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":223,"org.easymock.samples.BasicClassMockTest.testPrintContent":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":319,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":323,"org.easymock.tests2.DelegateToTest.testStubDelegate":57,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":262,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":162,"org.easymock.tests2.AnswerTest.stubAnswer":166,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":349,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":340,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":301,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":88,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":369,"org.easymock.tests2.UsageConstraintsTest.greaterThan":142,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":370,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":307,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":98,"org.easymock.tests.UsageVarargTest.varargLongAccepted":270,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":36,"org.easymock.samples.ExampleTest.voteForRemoval":119,"org.easymock.tests.UsageExpectAndReturnTest.floatType":104,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":116,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":25,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":31,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":51,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":351,"org.easymock.tests.UsageThrowableTest.noUpperLimit":260,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":241,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":143,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":47,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":126,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":152,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":197,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":329,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":344,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":332,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":180,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":103,"org.easymock.tests2.UsageConstraintsTest.testSame":131,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":305,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":335,"org.easymock.tests2.CaptureTest.testCaptureFirst":205,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":181,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":249,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":310,"org.easymock.tests.GenericTest.testPackageScope":44,"org.easymock.tests2.CaptureTest.testCapture2_2446744":204,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":81,"org.easymock.tests2.UsageTest.moreThanOneArgument":154,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":289,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":22,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":350,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":272,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":284,"org.easymock.tests2.NameTest.nameForMock":167,"org.easymock.tests.UsageExpectAndReturnTest.longType":105,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":220,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":178,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":23,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":111,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":368,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":146,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":331,"org.easymock.tests2.UsageStrictMockTest.differentMethods":80,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":342,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":91,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":106,"org.easymock.tests.UsageCallCountTest.tooManyCalls":285,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":100,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":321,"org.easymock.tests2.MockedExceptionTest.testRealException":177,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":108,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":361,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":78,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":255,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":254,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":1,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":278,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":14,"org.easymock.tests2.UsageConstraintsTest.testContains":138,"org.easymock.tests2.NameTest.nameForStrictMock":168,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":37,"org.easymock.tests2.UsageConstraintsTest.testFind":129,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":363,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":71,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":61,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":29,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":225,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":62,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":123,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":32,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":15,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":360,"org.easymock.tests2.UsageStrictMockTest.range":79,"org.easymock.tests2.UsageConstraintsTest.lessThan":150,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":186,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":293,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":267,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":348,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":208,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":235,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":68,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":179,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":314,"org.easymock.tests2.CaptureTest.testCaptureRightOne":202,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":287,"org.easymock.tests2.UsageConstraintsTest.testOr":132,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":298,"org.easymock.tests.UsageRangeTest.combination":97,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":264,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":27,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":114,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":303,"org.easymock.tests.UsageTest.wrongArguments":217,"org.easymock.tests2.MockBuilderTest.testWithConstructor":327,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":345,"org.easymock.tests.MockClassControlTest.testHashCode":230,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":311,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":43,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":107,"org.easymock.tests2.EasyMockSupportTest.testVerify":190,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":112,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":315,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":288,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":333,"org.easymock.tests.UsageVarargTest.varargShortAccepted":269,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":66,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":283,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":171,"org.easymock.tests2.UsageConstraintsTest.cmpTo":137,"org.easymock.tests2.CaptureTest.testCaptureMultiple":56,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":165,"org.easymock.tests.DefaultClassInstantiatorTest.object":234,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":70,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":189,"org.easymock.tests2.CaptureTest.testCaptureFromStub":203,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":245,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":16,"org.easymock.tests.UsageTest.unexpectedCallWithArray":216,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":206,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":316,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":261,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":281,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":356,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":330,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":229,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":34,"org.easymock.tests2.UsageConstraintsTest.constraints":127,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":115,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":341,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":9,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":221,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":198,"org.easymock.tests2.UsageTest.resumeIfFailure":161,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":85,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":10,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":48,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":242,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":86,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":265,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":184}}]

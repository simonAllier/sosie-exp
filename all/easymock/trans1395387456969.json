[{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1093","sourceCode":"return null","type":"CtReturnImpl"},"failures":[0,1,2,3],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"returnedType"}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:177","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[17],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:63","sourceCode":"java.lang.System.java.lang.System.arraycopy(java.lang.Object[], 0, java.lang.Object[], 0, int)","type":"CtInvocationImpl"},"failures":[39,40,43,83,84,85,86,87,88,89,90,91,92,93],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMockSupport:52","sourceCode":"new java.util.ArrayList<org.easymock.IMocksControl>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"failures":[94,95,96,97,98,99,4,100,5,6,101,102,103,104,105,106,107,7,108,8,109,110,111,112,113,0,114,115,116,117,118,1,119,120,121,2,122,123,124,125,126,127,3,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,17,167,168,169,170,171,172,173,174,175,176,177,178,179,180,19,22,23,181,182,26,27,28,29,30,31,32,35,36,37,183,184,39,185,40,186,41,42,187,43,188,189,190,44,45,46,47,48,191,192,193,194,195,196,197,198,199,200,201,202,49,203,50,51,204,205,206,52,54,55,56,207,208,209,57,210,211,212,213,214,215,216,58,59,60,61,217,218,219,220,83,84,85,86,87,88,89,90,91,92,93,221,222,62,63,64,65,66,67,223,224,68,69,225,70,71,72,226,73,74,75,76,77,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,78,79,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[276,277,278,279,280,281,282,283,18,284],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"ret":"ret","clazz":"clazz"}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:117","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[285,286],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:84","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[94,95,99,100,101,276,102,103,104,7,108,8,9,10,11,114,1,119,120,121,122,125,3,128,129,130,131,13,14,15,135,136,137,138,140,141,142,143,144,145,148,149,150,151,152,153,154,155,156,157,158,159,160,161,164,166,167,169,170,172,173,174,177,178,180,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,36,37,38,183,184,39,185,40,186,41,42,187,43,189,190,197,198,201,202,203,204,206,56,207,208,209,287,212,215,216,218,219,83,84,85,86,87,89,90,91,92,93,64,65,67,225,73,230,231,233,238,243,250,253,254,255,288,258,259,260,261,262,263,264,265,80,81,82,270,271,272,273],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:178","failures":[15,289],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:83","sourceCode":"return (int) == (java.lang.Integer.int)","type":"CtReturnImpl"},"failures":[94,96,4,100,5,6,111,290,291,292,293,116,120,125,132,136,137,139,140,141,142,143,148,17,169,171,172,175,176,177,178,180,182,195,199,202,49,203,50,51,210,213,214,215,216,93,227,248,249,250,251,252,253,254,255,260],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:83","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[94,294,295,95,96,97,98,99,4,100,5,6,101,276,102,103,296,297,298,299,300,104,301,302,303,304,305,306,105,106,107,7,108,307,308,309,8,310,311,9,312,313,314,315,316,317,318,319,320,10,321,322,323,324,325,11,326,327,109,328,110,111,329,290,291,292,293,112,113,0,114,330,115,116,117,118,1,119,331,120,121,2,122,123,124,125,126,127,3,128,129,130,131,132,133,134,332,333,12,334,335,336,13,337,14,282,15,283,338,16,339,340,341,135,136,137,138,139,140,141,142,143,144,145,146,147,148,342,343,344,345,346,149,347,348,349,350,351,352,150,151,152,153,154,155,156,353,157,158,159,160,161,162,163,164,165,354,166,17,167,355,168,356,357,358,359,360,361,362,363,169,170,171,172,173,174,175,176,364,177,178,179,180,18,284,365,19,20,21,22,23,24,25,181,182,26,27,28,29,30,31,366,367,32,368,369,370,33,34,35,371,372,373,374,36,37,38,183,375,375,376,376,184,39,185,40,186,41,42,187,43,377,188,189,190,44,45,46,47,48,191,192,193,194,195,196,197,198,199,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,200,201,202,49,203,50,51,204,205,402,403,404,405,406,206,407,52,53,54,55,408,409,410,411,412,413,414,415,416,417,418,419,420,285,421,422,423,424,425,426,427,428,429,286,430,431,432,433,434,56,435,207,436,208,209,437,287,438,439,440,441,289,442,443,444,445,446,447,448,449,57,210,211,212,213,214,215,216,58,59,60,61,217,450,451,452,453,454,455,218,219,456,220,83,84,85,457,86,87,88,89,90,91,92,93,221,458,459,222,460,461,62,63,64,65,66,67,223,224,68,69,225,70,71,72,226,73,74,75,76,77,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,462,250,251,252,253,254,255,463,256,257,464,465,466,288,467,78,79,258,259,260,261,262,263,264,265,266,267,468,469,470,80,81,471,82,472,473,474,475,476,268,269,270,271,477,272,273,478,479,480,481,482,483,274,275],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:355","sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[455],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplantationPoint":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"failures":[142,144],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[94,95,96,97,98,99,4,100,5,6,101,276,102,103,104,105,106,107,7,108,8,9,10,11,109,110,111,290,291,292,293,112,113,0,114,115,116,117,118,1,119,120,121,2,122,123,124,125,126,127,3,128,129,130,131,132,133,134,332,12,13,337,14,15,338,16,340,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,353,157,158,159,160,161,162,163,164,165,166,17,167,168,360,361,362,363,169,170,171,172,173,174,175,176,364,177,178,179,180,18,19,20,21,22,23,24,25,181,182,26,27,28,29,30,31,366,32,370,33,34,35,36,37,38,183,375,375,376,376,184,39,185,40,186,41,42,187,43,377,188,189,190,44,45,46,47,48,191,192,193,194,195,196,197,198,199,200,201,202,49,203,50,51,204,205,402,403,404,405,206,52,53,54,55,412,420,285,421,422,423,424,425,426,427,428,429,286,56,207,436,208,209,287,438,57,210,211,212,213,214,215,216,58,59,60,61,217,450,451,452,453,454,218,219,83,84,85,86,87,88,89,90,91,92,93,458,459,222,62,63,64,65,66,67,223,224,68,69,225,70,71,72,226,73,74,75,76,77,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,462,250,251,252,253,254,255,288,78,79,258,259,260,261,262,263,264,265,266,267,80,81,82,475,476,268,269,270,271,477,272,273,478,479,480,481,482,483,274,275],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[94,95,97,109,110,111,186,207],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[341,135],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:58","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalArgumentException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:120","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[276,103,484,8,9,10,11,332,12,334,13,337,14,15,338,16,340,164,18,19,20,21,22,24,25,26,27,29,30,31,366,32,370,33,34,35,38,375,375,376,376,189,190,206,56,218,219,456,470,80,81,82],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"type":"searchType"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[277,278,279,485,486,282,284],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[94,4,169,175,176,180,49,214,216,248,251,252,255],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:125","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"finalizeMethod","bridgeMethod":"finalizeMethod"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:130","sourceCode":"if (java.lang.Boolean.java.lang.Boolean.valueOf(java.lang.String)) {\n    throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"));\n} ","type":"CtIfImpl"},"failures":[367],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:42","sourceCode":"if (org.easymock.internal.IMocksBehavior.isThreadSafe()) {\n    java.util.concurrent.locks.ReentrantLock.lock();\n    try {\n        return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n    } finally {\n        java.util.concurrent.locks.ReentrantLock.unlock();\n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[0,1,135,137,145],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[487],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[277,278,279,485,486,282,284],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[455,220],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[94,294,295,95,96,97,98,99,4,100,5,6,101,276,102,103,296,297,298,299,300,104,301,302,303,304,305,306,105,106,107,7,108,307,308,309,8,310,311,9,312,313,314,315,316,317,318,319,320,10,321,322,323,324,325,11,326,327,109,328,110,111,329,290,291,292,293,112,113,0,114,330,115,116,117,118,1,119,331,120,121,2,122,123,124,125,126,127,3,128,129,130,131,132,133,134,332,333,12,334,335,336,13,337,14,282,15,488,283,338,16,339,340,341,135,136,137,138,139,140,141,142,143,144,145,146,147,148,342,343,344,345,346,149,347,348,349,350,351,352,150,151,152,153,154,155,156,353,157,158,159,160,161,162,163,164,165,354,166,17,167,355,168,356,489,490,491,357,358,359,360,361,362,363,169,170,171,172,173,174,175,176,364,177,178,179,180,18,284,365,19,20,21,22,492,23,24,25,493,181,182,26,27,28,29,30,31,366,367,32,368,369,370,33,34,35,371,372,373,374,36,37,38,183,375,376,184,39,185,40,186,41,42,187,43,377,188,189,190,44,45,46,47,48,191,192,193,194,195,196,197,198,199,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,200,201,202,49,203,50,51,204,205,402,403,404,405,406,206,407,52,53,54,55,408,409,410,411,412,413,414,415,416,417,418,419,420,285,421,422,423,424,425,426,427,428,429,286,430,431,432,433,434,56,435,207,436,208,209,437,287,438,439,440,441,289,494,495,442,443,444,445,446,447,448,449,57,210,211,212,213,214,215,216,58,59,60,61,217,450,451,452,453,454,455,218,219,456,220,83,84,85,457,86,87,88,89,90,91,92,93,221,458,459,222,460,461,62,63,64,65,66,67,223,224,68,69,225,70,71,72,226,73,74,75,76,77,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,496,248,249,462,250,251,252,253,254,255,463,256,257,464,465,466,288,467,78,79,258,259,260,261,262,263,264,265,266,267,468,469,470,80,81,471,82,472,473,474,475,476,268,269,270,271,477,272,273,478,479,480,481,482,483,274,275],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1916","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:141","sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[315],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:92","sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[497,13],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:181","failures":[276,498,277,278,279,485,486,281,282,284],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":114,"org.easymock.tests2.UsageTest.argumentsOrdered":178,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":248,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":159,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":388,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":174,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":183,"org.easymock.tests2.DelegateToTest.testReturnException":166,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":192,"org.easymock.tests.MockingTest.testPartialClassMocking":80,"org.easymock.tests.MockClassControlTest.testToString":480,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":329,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":440,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":397,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":372,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":315,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":9,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":228,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":37,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":277,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":119,"org.easymock.tests2.UsageTest.wrongArguments":172,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":57,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":306,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":404,"org.easymock.samples.ExampleTest.answerVsDelegate":186,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":444,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":473,"org.easymock.tests2.UsageConstraintsTest.testNull":116,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":29,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":158,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":275,"org.easymock.tests2.CaptureTest.testPrimitive":138,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":213,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":247,"org.easymock.tests.UsageTest.moreThanOneArgument":249,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":28,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":60,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":463,"org.easymock.tests.UsageTest.argumentsOrdered":254,"org.easymock.tests.UsageVarargTest.varargIntAccepted":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":393,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":44,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":486,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":332,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":490,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":351,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":337,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":380,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":48,"org.easymock.tests.ReplayStateInvalidUsageTest.times":427,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":104,"org.easymock.tests2.DependencyTest.testClassMocking":373,"org.easymock.tests2.AnswerTest.answer":94,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":331,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":395,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":363,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":495,"org.easymock.tests2.CaptureTest.testAnd":135,"org.easymock.tests2.UsageTest.strictResetToDefault":170,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":335,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":370,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":59,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":154,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":54,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":465,"org.easymock.tests2.DelegateToTest.testDelegate":168,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":243,"org.easymock.tests.LimitationsTest.mockFinalMethod":435,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":195,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":454,"org.easymock.tests2.DependencyTest.testClassMockingSupport":374,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":466,"org.easymock.tests2.CaptureTest.testCapture1_2446744":139,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":367,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":241,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":361,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":421,"org.easymock.tests.UsageThrowableTest.throwError":258,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":443,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":496,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":352,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":327,"org.easymock.samples.PartialClassMockTest.testGetArea":38,"org.easymock.tests.MockingTest.testInterfaceMocking":471,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":422,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":45,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":448,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":461,"org.easymock.tests2.UsageTest.niceToStrict":173,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":316,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":378,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":13,"org.easymock.tests2.MockBuilderTest.testCreateMock":338,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":323,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":303,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":237,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":155,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":494,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":410,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":475,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":402,"org.easymock.tests.UsageOverloadedMethodTest.overloading":198,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":320,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":325,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":123,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":209,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":70,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":197,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":122,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":144,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":457,"org.easymock.tests2.EasyMockSupportClassTest.testAll":8,"org.easymock.tests.MockClassControlTest.testEquals":274,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":219,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":245,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":484,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":452,"org.easymock.tests2.CaptureTest.testCaptureAll":136,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":362,"org.easymock.tests.MockNameTest.defaultName":406,"org.easymock.tests2.UsageConstraintsTest.testMatches":124,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":420,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":61,"org.easymock.samples.ExampleTest.voteForRemovals":43,"org.easymock.tests.UsageVarargTest.allKinds":93,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":214,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":453,"org.easymock.samples.BasicClassMockTest.testPrintContent":190,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":264,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":98,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":196,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":348,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":355,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":418,"org.easymock.tests2.UsageConstraintsTest.greaterThan":126,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":310,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":53,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":35,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":419,"org.easymock.samples.ExampleTest.voteForRemoval":41,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":106,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":371,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":487,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":445,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":491,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":366,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":169,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":206,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":283,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":385,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":152,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":260,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":308,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":191,"org.easymock.tests2.CaptureTest.testCaptureFirst":148,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":354,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":384,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":153,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":180,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":438,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":224,"org.easymock.tests2.UsageTest.moreThanOneArgument":171,"org.easymock.tests2.CaptureTest.testCapture2_2446744":147,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":7,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":396,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":16,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":92,"org.easymock.tests.GenericTest.testBridgedEquals":220,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":272,"org.easymock.tests.UsageExpectAndReturnTest.longType":65,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":450,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":150,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":246,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":407,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":130,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":244,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":431,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":58,"org.easymock.tests.UsageCallCountTest.tooManyCalls":273,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":268,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":324,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":68,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":305,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":233,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":263,"org.easymock.tests.MockingTest.testNiceClassMocking":474,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":20,"org.easymock.tests.MockingTest.testClassMocking":469,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":497,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":476,"org.easymock.tests2.UsageConstraintsTest.testContains":2,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":164,"org.easymock.tests2.UsageConstraintsTest.testFind":115,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":199,"org.easymock.tests.MockTypeTest.fromEasyMockClass":442,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":110,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":200,"org.easymock.tests.UsageExpectAndReturnTest.object":225,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":32,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":304,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":157,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":87,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":278,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":222,"org.easymock.tests.UsageTest.exactCallCountByLastCall":255,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":266,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":383,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":439,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":256,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":284,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":74,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":83,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":208,"org.easymock.tests.MockClassControlTest.testHashCode":483,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":343,"org.easymock.tests2.EasyMockSupportTest.testVerify":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":318,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":257,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":409,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":207,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":360,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":341,"org.easymock.tests.UsageVarargTest.varargCharAccepted":86,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":411,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":401,"org.easymock.tests2.UsageTest.openCallCountByLastCall":175,"org.easymock.tests.DefaultClassInstantiatorTest.object":412,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":160,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":408,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":458,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":235,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":319,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":261,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":299,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":342,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":482,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":33,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":234,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":75,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":430,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":481,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":11,"org.easymock.tests2.UsageTest.resumeIfFailure":179,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":289,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":489,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":194,"org.easymock.tests2.StubTest.stubWithReturnValue":182,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":282,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":131,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":69,"org.easymock.tests2.SerializationTest.testAllMockedMethod":103,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":394,"org.easymock.samples.SupportTest.voteForRemovals":39,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":455,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":345,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":240,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":400,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":294,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":441,"org.easymock.tests.UsageExpectAndThrowTest.object":238,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":128,"org.easymock.tests2.DelegateToTest.testWrongClass":167,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":78,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":79,"org.easymock.tests.UsageStrictMockTest.range":50,"org.easymock.samples.ConstructorCalledMockTest.testTax":375,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":358,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":353,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":19,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":239,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":14,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":429,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":253,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":307,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":403,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":449,"org.easymock.tests2.CaptureTest.testCaptureNone":143,"org.easymock.tests.UsageUnorderedTest.message":227,"org.easymock.tests.UsageVerifyTest.twoReturns":216,"org.easymock.tests.UsageVarargTest.varargByteAccepted":91,"org.easymock.tests2.ThreadingTest.testThreadSafe":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":321,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":271,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":460,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":189,"org.easymock.tests2.CaptureTest.testCapture_2617107":137,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":398,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":212,"org.easymock.tests2.UsageConstraintsTest.any":120,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":426,"org.easymock.tests2.StubTest.stub":181,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":432,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":399,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":193,"org.easymock.tests.UsageExpectAndThrowTest.longType":231,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":416,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":425,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":100,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":149,"org.easymock.tests2.SerializationTest.testClass":276,"org.easymock.tests.LimitationsTest.mockNativeMethod":56,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":456,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":77,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":298,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":101,"org.easymock.tests2.NameTest.nameForMocksControl":293,"org.easymock.tests2.MockedExceptionTest.testMockedException":163,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":300,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":311,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":252,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":82,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":232,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":328,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":26,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":15,"org.easymock.tests.MockingTest.testNicePartialClassMocking":81,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":31,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":498,"org.easymock.tests2.CaptureTest.testCaptureLast":142,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":296,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":288,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":25,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":1,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":129,"org.easymock.tests.MockingTest.testTwoMocks":470,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":493,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":62,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":236,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":177,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":133,"org.easymock.samples.ExampleTest.removeNonExistingDocument":377,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":423,"org.easymock.tests.UsageStrictMockTest.differentMethods":51,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":302,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":344,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":414,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":107,"org.easymock.tests2.MockBuilderTest.testCreateMockString":340,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":478,"org.easymock.tests.UsageExpectAndThrowTest.floatType":230,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":312,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":125,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":309,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":95,"org.easymock.tests.UsageVerifyTest.twoThrows":215,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":365,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":436,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":10,"org.easymock.samples.ExampleTest.voteAgainstRemoval":42,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":447,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":389,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":34,"org.easymock.tests.LimitationsTest.privateConstructor":434,"org.easymock.tests2.UsageConstraintsTest.testNotNull":132,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":162,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":265,"org.easymock.tests2.UsageTest.defaultResetToNice":364,"org.easymock.samples.ExampleTest.voteAgainstRemovals":40,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":390,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":73,"org.easymock.tests.UsageVarargTest.differentLength":88,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":297,"org.easymock.tests2.CallbackTest.callback":111,"org.easymock.tests2.UsageConstraintsTest.equals":330,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":368,"org.easymock.tests.UsageTest.openCallCountByLastCall":251,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":112,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":211,"org.easymock.tests.UsageCallCountTest.tooFewCalls":269,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":22,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":405,"org.easymock.tests.UsageThrowableTest.throwCheckedException":262,"org.easymock.tests.MockingTest.testStrictClassMocking":468,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":24,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":267,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":21,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":301,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":428,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":23,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":97,"org.easymock.tests.ObjectMethodsTest.testHashCode":459,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":485,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":108,"org.easymock.tests2.NameTest.nameForNiceMock":292,"org.easymock.tests2.DependencyTest.testInterfaceMocking":36,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":279,"org.easymock.samples.ExampleTest.addDocument":187,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":322,"org.easymock.tests2.DelegateToTest.testStubDelegate":17,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":326,"org.easymock.tests2.AnswerTest.stubAnswer":96,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":49,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":488,"org.easymock.tests.UsageVarargTest.varargLongAccepted":90,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":387,"org.easymock.tests.UsageExpectAndReturnTest.floatType":64,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":76,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":18,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":376,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":437,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":127,"org.easymock.tests.UsageThrowableTest.noUpperLimit":259,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":350,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":113,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":356,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":140,"org.easymock.tests2.SerializationTest.test":102,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":413,"org.easymock.tests2.UsageConstraintsTest.testSame":117,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":63,"org.easymock.samples.SupportTest.addDocument":184,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":492,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":424,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":313,"org.easymock.tests.GenericTest.testPackageScope":218,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":464,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":382,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":349,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":472,"org.easymock.tests2.NameTest.nameForMock":290,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":71,"org.easymock.tests2.UsageStrictMockTest.differentMethods":6,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":339,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":369,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":66,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":242,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":221,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":55,"org.easymock.tests2.MockedExceptionTest.testRealException":165,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":446,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":392,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":359,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":391,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":4,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":210,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":286,"org.easymock.tests2.NameTest.nameForStrictMock":291,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":336,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":109,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":30,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":357,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":415,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":3,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":12,"org.easymock.tests2.UsageStrictMockTest.range":5,"org.easymock.tests2.UsageConstraintsTest.lessThan":134,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":346,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":386,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":151,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":280,"org.easymock.tests2.CaptureTest.testCaptureRightOne":145,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":317,"org.easymock.tests2.UsageConstraintsTest.testOr":118,"org.easymock.tests.UsageRangeTest.combination":52,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":27,"org.easymock.tests.UsageTest.wrongArguments":250,"org.easymock.tests2.MockBuilderTest.testWithConstructor":333,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":314,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":479,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":67,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":72,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":379,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":417,"org.easymock.tests.UsageVarargTest.varargShortAccepted":89,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":477,"org.easymock.tests2.UsageConstraintsTest.cmpTo":121,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":295,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":381,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":176,"org.easymock.tests2.CaptureTest.testCaptureFromStub":146,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":285,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":334,"org.easymock.tests.UsageTest.unexpectedCallWithArray":462,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":202,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":270,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":226,"org.easymock.tests2.UsageConstraintsTest.constraints":0,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":203,"org.easymock.samples.ExampleTest.addAndChangeDocument":188,"org.easymock.tests.UsageStrictMockTest.testVerify":205,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":185,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":201,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":451,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":141,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":46,"org.easymock.tests.LimitationsTest.abstractClass":433,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":223,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":47,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":287,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":156,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":84}}]

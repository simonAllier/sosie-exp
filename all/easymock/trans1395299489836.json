[{"transplantationPoint":{"position":"org.easymock.internal.matchers.StartsWith:40","sourceCode":"java.lang.StringBuffer.append(((\"startsWith(\\\"\" + (java.lang.String)) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:117","failures":[1,2,3,4,5,6,7,8],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"failures":[9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:121","sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:140","sourceCode":"java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>)","type":"CtInvocationImpl"},"failures":[10],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[11,1,12,13,14,15,16,17,18,19,20,21,22,23,23,24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,2,3,10,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,4,5,106,6,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,7,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[71,72,74,76,77,299,88,92,107,109,117],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1107","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"failures":[300],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:55","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.Capture:110","sourceCode":"break","type":"CtBreakImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:273","sourceCode":"if ((java.lang.Class<?>.getSigners()) != null) {\n    net.sf.cglib.proxy.Enhancer.setNamingPolicy(org.easymock.internal.ClassProxyFactory.net.sf.cglib.core.NamingPolicy);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:224","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:225","sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[10,50,51,301],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[155,302,303,304],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[10,50,51,301],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:234","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[216],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:255","failures":[305],"status":-1,"binaryOperator":"java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1290","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:40","sourceCode":"java.lang.StringBuffer.append(\"not(\")","type":"CtInvocationImpl"},"failures":[306],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:67","sourceCode":"return org.easymock.Mock.java.lang.String()","type":"CtReturnImpl"},"failures":[307,308,309,310,311,312,313,314,315,316,317,318],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:131","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[319],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"failMessage":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String).append(\", actual: \")","type":"CtInvocationImpl"},"failures":[29,30,36,37,97,99,100,102,103,104,105,171,173,176,177,184,262,263,265,266,270,271,272,320,321,322],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[11,1,12,13,14,15,16,26,27,28,29,30,31,32,33,34,35,36,37,38,39,9,40,41,46,47,48,49,2,3,10,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,4,5,106,6,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,7,127,128,131,132,133,134,135,138,139,140,142,143,144,145,146,147,148,149,150,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,215,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:205","failures":[22,23,24,26,323,324,43,44,45,46,10,133,325,326,327,328,329,134,135,136,330,137,331,332,333,138,334,139,335,336,337,150,338,339,340,341,342],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[72,73],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","type":"CtAssignmentImpl"},"failures":[343,344,345],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[20,21,346,42,347,348,349,350,351,352,353,354,47,48,51,126,129,355,356,142,143,145,146,147,148,357,149,358,359,338,157,360,361,158,362,363,364,365,366,190,191,305,367,368,369,370,371,372,373,374,298,375,376,377,378,379,380],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":72,"org.easymock.tests2.UsageTest.argumentsOrdered":37,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":170,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":62,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":276,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":32,"org.easymock.tests2.StubTest.stubWithReturnValue":41,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":330,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":202,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":91,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":19,"org.easymock.tests2.SerializationTest.testAllMockedMethod":51,"org.easymock.tests2.DelegateToTest.testReturnException":65,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":274,"org.easymock.tests.MockingTest.testPartialClassMocking":185,"org.easymock.samples.SupportTest.voteForRemovals":18,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":339,"org.easymock.tests.MockClassControlTest.testToString":375,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":319,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":338,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":246,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":301,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":234,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":43,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":303,"org.easymock.tests.UsageExpectAndThrowTest.object":244,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":320,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":89,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":141,"org.easymock.tests2.DelegateToTest.testWrongClass":67,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":188,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":189,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":78,"org.easymock.tests2.UsageTest.wrongArguments":30,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":179,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":318,"org.easymock.tests.UsageStrictMockTest.range":265,"org.easymock.samples.ConstructorCalledMockTest.testTax":23,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":161,"org.easymock.samples.ExampleTest.answerVsDelegate":1,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":59,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":342,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":126,"org.easymock.tests2.UsageConstraintsTest.testNull":74,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":245,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":145,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":380,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":61,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":136,"org.easymock.tests2.CaptureTest.testPrimitive":110,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":183,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":346,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":253,"org.easymock.tests.UsageTest.moreThanOneArgument":171,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":176,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":144,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":160,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":229,"org.easymock.tests2.CaptureTest.testCaptureNone":115,"org.easymock.tests.UsageUnorderedTest.message":184,"org.easymock.tests.UsageVerifyTest.twoReturns":272,"org.easymock.tests.UsageVarargTest.varargByteAccepted":295,"org.easymock.tests2.ThreadingTest.testThreadSafe":152,"org.easymock.tests.UsageTest.argumentsOrdered":177,"org.easymock.tests.UsageVarargTest.varargIntAccepted":290,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":352,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":259,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":20,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":279,"org.easymock.tests2.CaptureTest.testCapture_2617107":109,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":133,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":182,"org.easymock.tests2.UsageConstraintsTest.any":79,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":135,"org.easymock.tests2.StubTest.stub":40,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":283,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":275,"org.easymock.tests.UsageExpectAndThrowTest.longType":237,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":371,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":216,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":98,"org.easymock.tests2.SerializationTest.testClass":10,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":125,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":151,"org.easymock.tests.LimitationsTest.mockNativeMethod":158,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":340,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":212,"org.easymock.tests2.AnswerTest.answer":4,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":299,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":124,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":314,"org.easymock.tests2.CaptureTest.testAnd":107,"org.easymock.tests2.UsageTest.strictResetToDefault":28,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":328,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":101,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":149,"org.easymock.tests2.NameTest.nameForMocksControl":105,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":315,"org.easymock.tests2.MockedExceptionTest.testMockedException":47,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":347,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":286,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":56,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":175,"org.easymock.tests2.DelegateToTest.testDelegate":68,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":238,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":187,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":142,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":137,"org.easymock.tests.MockingTest.testNicePartialClassMocking":186,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":249,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":147,"org.easymock.tests.LimitationsTest.mockFinalMethod":362,"org.easymock.tests2.CaptureTest.testCaptureLast":114,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":277,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":192,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":77,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":132,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":90,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":167,"org.easymock.tests.MockingTest.testTwoMocks":365,"org.easymock.tests2.CaptureTest.testCapture1_2446744":111,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":193,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":247,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":242,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":122,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":36,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":93,"org.easymock.tests.UsageThrowableTest.throwError":219,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":316,"org.easymock.tests.UsageStrictMockTest.differentMethods":266,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":215,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":308,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":369,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":154,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":312,"org.easymock.tests2.MockBuilderTest.testCreateMockString":139,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":374,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":348,"org.easymock.tests.UsageExpectAndThrowTest.floatType":236,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":231,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":85,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":5,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":324,"org.easymock.tests.UsageVerifyTest.twoThrows":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":44,"org.easymock.samples.PartialClassMockTest.testGetArea":22,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":214,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":280,"org.easymock.samples.ExampleTest.voteAgainstRemoval":13,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":300,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":150,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":350,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":235,"org.easymock.tests2.UsageTest.niceToStrict":31,"org.easymock.tests.LimitationsTest.privateConstructor":361,"org.easymock.tests2.UsageConstraintsTest.testNotNull":92,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":226,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":46,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":134,"org.easymock.tests2.MockBuilderTest.testCreateMock":333,"org.easymock.tests2.UsageTest.defaultResetToNice":35,"org.easymock.samples.ExampleTest.voteAgainstRemovals":11,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":208,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":313,"org.easymock.tests2.CallbackTest.callback":7,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":336,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":317,"org.easymock.tests.UsageTest.openCallCountByLastCall":174,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":243,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":57,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":69,"org.easymock.tests2.ConstraintsToStringTest.startsWithToString":0,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":254,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":159,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":181,"org.easymock.tests.UsageCallCountTest.tooFewCalls":257,"org.easymock.tests.UsageOverloadedMethodTest.overloading":168,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":354,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":83,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":204,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":129,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":82,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":116,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":162,"org.easymock.tests.UsageThrowableTest.throwCheckedException":223,"org.easymock.tests.MockClassControlTest.testEquals":379,"org.easymock.tests2.EasyMockSupportClassTest.testAll":42,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":191,"org.easymock.tests.MockingTest.testStrictClassMocking":363,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":251,"org.easymock.tests2.CaptureTest.testCaptureAll":108,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":123,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":165,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":233,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":131,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":128,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":217,"org.easymock.tests2.UsageConstraintsTest.testMatches":84,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":130,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":6,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":230,"org.easymock.samples.ExampleTest.voteForRemovals":15,"org.easymock.tests2.NameTest.nameForNiceMock":104,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":156,"org.easymock.tests.UsageVarargTest.allKinds":297,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":270,"org.easymock.tests2.DependencyTest.testInterfaceMocking":140,"org.easymock.samples.BasicClassMockTest.testPrintContent":21,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":166,"org.easymock.samples.ExampleTest.addDocument":14,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":353,"org.easymock.tests2.DelegateToTest.testStubDelegate":66,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":225,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":95,"org.easymock.tests2.AnswerTest.stubAnswer":106,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":310,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":278,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":263,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":345,"org.easymock.tests2.UsageConstraintsTest.greaterThan":86,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":331,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":285,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":358,"org.easymock.tests.UsageVarargTest.varargLongAccepted":294,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":267,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":373,"org.easymock.samples.ExampleTest.voteForRemoval":12,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":359,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":153,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":211,"org.easymock.tests.UsageExpectAndReturnTest.floatType":195,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":335,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":26,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":24,"org.easymock.tests.UsageThrowableTest.noUpperLimit":220,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":87,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":70,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":27,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":157,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":355,"org.easymock.tests2.SerializationTest.test":50,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":112,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":332,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":368,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":54,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":221,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":194,"org.easymock.tests2.UsageConstraintsTest.testSame":75,"org.easymock.samples.SupportTest.addDocument":17,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":273,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_Overriden":343,"org.easymock.tests2.CaptureTest.testCaptureFirst":120,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":55,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":39,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":304,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":200,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":349,"org.easymock.tests.GenericTest.testPackageScope":190,"org.easymock.tests2.UsageTest.moreThanOneArgument":29,"org.easymock.tests2.CaptureTest.testCapture2_2446744":119,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":155,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":138,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":311,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":296,"org.easymock.tests.GenericTest.testBridgedEquals":305,"org.easymock.tests2.NameTest.nameForMock":102,"org.easymock.tests.UsageExpectAndReturnTest.longType":196,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":52,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":163,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":252,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":205,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":334,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":250,"org.easymock.tests2.UsageStrictMockTest.differentMethods":100,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":227,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":357,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":197,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":248,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":287,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":256,"org.easymock.tests2.MockedExceptionTest.testRealException":49,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":201,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":239,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":97,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":224,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":218,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":180,"org.easymock.tests.MockingTest.testNiceClassMocking":366,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":127,"org.easymock.tests.MockingTest.testClassMocking":364,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":255,"org.easymock.tests2.UsageConstraintsTest.testContains":81,"org.easymock.tests2.NameTest.nameForStrictMock":103,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":48,"org.easymock.tests2.UsageConstraintsTest.testFind":73,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":169,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":329,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":2,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":146,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":260,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":3,"org.easymock.tests.UsageExpectAndReturnTest.object":203,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":356,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":370,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":321,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":88,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":148,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":326,"org.easymock.tests2.UsageStrictMockTest.range":99,"org.easymock.tests2.UsageConstraintsTest.lessThan":94,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":60,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":292,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":309,"org.easymock.tests.UsageTest.exactCallCountByLastCall":178,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":232,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":53,"org.easymock.tests2.CaptureTest.testCaptureRightOne":117,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":302,"org.easymock.tests2.UsageConstraintsTest.testOr":76,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":323,"org.easymock.tests.UsageRangeTest.combination":284,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":288,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":209,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":143,"org.easymock.tests.UsageTest.wrongArguments":173,"org.easymock.tests2.MockBuilderTest.testWithConstructor":325,"org.easymock.tests.MockClassControlTest.testHashCode":378,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":307,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":298,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":198,"org.easymock.tests2.EasyMockSupportTest.testVerify":64,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":206,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":372,"org.easymock.tests.UsageVarargTest.varargShortAccepted":293,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":8,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":121,"org.easymock.tests2.UsageConstraintsTest.cmpTo":80,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":9,"org.easymock.tests.UsageVarargTest.varargCharAccepted":291,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":344,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":96,"org.easymock.tests2.UsageTest.openCallCountByLastCall":33,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":34,"org.easymock.tests.DefaultClassInstantiatorTest.object":367,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":63,"org.easymock.tests2.CaptureTest.testCaptureFromStub":118,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":213,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":327,"org.easymock.tests.UsageTest.unexpectedCallWithArray":172,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":351,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":241,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":262,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":222,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":258,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":207,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":377,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":337,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":264,"org.easymock.tests2.UsageConstraintsTest.constraints":71,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":240,"org.easymock.samples.ExampleTest.addAndChangeDocument":16,"org.easymock.tests2.ConstraintsToStringTest.notToString":306,"org.easymock.tests.UsageStrictMockTest.testVerify":268,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":210,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":25,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":376,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":261,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":45,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":164,"org.easymock.tests2.UsageTest.resumeIfFailure":38,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":113,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":281,"org.easymock.tests.LimitationsTest.abstractClass":360,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":341,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":199,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":282,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":269,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":322,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":289,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":58}}]

[{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[0,1,2],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:103","sourceCode":"final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:852","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Integer>(int))","type":"CtInvocationImpl"},"failures":[3,4,5,6],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[7,5],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:140","sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"clazz"}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[8],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:48","failures":[],"status":0,"binaryOperator":"org.easymock.internal.MocksControl != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:959","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[27],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:94","sourceCode":"if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n    int = java.lang.Integer.int;\n} else {\n    int += org.easymock.internal.Range.getMaximum();\n}","type":"CtIfImpl"},"failures":[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,8,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,3,238,4,239,240,241,242,243,244,245,246,247,248,249,250,251,252,5,253,254,255,256,6,257,258,259,260,261,262],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:130","failures":[263],"status":-1,"binaryOperator":"(((!(java.lang.reflect.Method.isBridge())) && (!(java.lang.reflect.Method.equals(java.lang.reflect.Method)))) && (java.lang.reflect.Method.getName().equals(java.lang.reflect.Method.getName())))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[264,265,266,111,267,268],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[269,180,181],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"failures":[270,270,271,271,180],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"failures":[30,272,273,176,178,274,181],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:853","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1542","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(long))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[168,169],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,275,276,277,278,279,280,281,99,282,283,284,285,107,286,287,128,288,289,177,290,236],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[291,292,293,294,295,296,297],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:85","failures":[241,298,254,257],"status":-1,"binaryOperator":"(java.util.Stack<org.easymock.IArgumentMatcher> != null)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"failures":[299],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"failures":[300],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:127","sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","type":"CtTryImpl"},"failures":[301,302],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"failures":[303],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[304,305,306,307,308,0,1,2],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[64,85,309,310,311,312,99,100,101,266,103,104,105,106,109,111,113,114,115,313,125,126,139,149,155,157,176,186,190,191,193,212,314,216,315,217,220,8,221,222,223,224,225,226,229,230,231,4,252],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[316,8],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[264,265,266,111,267,268],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[210],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:185","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:195","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"parameterTypes":"candidateParameters","i":"i"}},{"position":"org.easymock.internal.MocksControl:136","failures":[28,270,270,271,271,39,40,317,62,63,263,318,90,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,117,118,119,339,340,341,147,342,148,149,151,152,153,343,154,344,316,345,155,156,157,346,347,348,349,350,172,351,352,173,353,354,355,356,357,358,359,360,361,174,362,363,364,365,366,175,367,368,288,289,177,182,184,198,199,200,201,203,204,369,212,370,371,213,372,214,215,373,314,216,315,374,375,376,377,378,379,262,297],"status":-1,"binaryOperator":"org.easymock.internal.IProxyFactory != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.EndsWith:40","sourceCode":"java.lang.StringBuffer.append(((\"endsWith(\\\"\" + (java.lang.String)) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[380],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:44","failures":[28,29,30,31,32,33,34,381,35,36,37,38,270,271,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,382,383,384,385,386,387,317,62,63,263,318,388,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,275,389,299,390,391,392,303,90,393,319,320,321,322,323,324,394,325,310,395,396,397,398,399,400,401,402,403,404,405,406,326,327,328,329,330,331,332,333,276,91,92,277,278,279,280,281,93,94,95,96,97,98,99,100,334,407,408,409,410,335,411,412,101,102,266,103,413,414,104,105,106,282,283,284,285,107,286,272,415,416,287,417,108,418,109,110,111,112,113,114,115,116,419,336,337,338,117,118,420,119,421,422,339,423,424,425,426,427,428,269,429,430,431,432,433,434,273,435,436,437,438,439,440,441,442,443,444,120,445,121,122,123,124,313,125,126,446,127,128,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,129,130,131,132,133,470,471,472,134,135,136,473,137,138,139,140,141,142,143,144,145,146,340,341,147,342,474,475,476,148,149,150,151,152,153,343,477,154,344,316,345,155,156,157,346,347,158,159,160,161,478,162,163,164,165,166,167,479,480,168,169,170,481,482,171,348,349,350,172,351,352,173,353,354,355,356,357,358,359,360,361,174,362,363,364,365,366,175,367,368,176,288,289,177,290,178,483,274,179,180,181,182,183,184,185,186,187,188,189,190,191,484,192,193,194,195,196,485,9,10,11,12,197,486,13,14,15,16,17,198,199,200,201,487,202,203,204,488,489,205,206,207,208,490,209,210,491,492,211,369,493,212,370,494,371,213,372,214,296,215,495,373,314,216,496,315,374,375,376,497,377,498,499,217,218,219,220,8,221,500,501,502,222,223,224,225,226,227,228,229,230,231,232,503,504,505,506,378,379,233,234,235,236,507,18,19,20,21,237,508,22,23,24,25,26,3,238,4,239,509,240,241,242,243,244,245,298,246,247,248,249,250,251,252,5,253,254,255,256,510,6,257,258,259,511,260,512,261,262,297,513],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:42","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"failures":[514],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[264,265,266,111,267,268],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":239,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":101,"org.easymock.tests2.UsageTest.argumentsOrdered":223,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":194,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":508,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":432,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":221,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":41,"org.easymock.tests2.DelegateToTest.testReturnException":209,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":283,"org.easymock.tests.MockingTest.testPartialClassMocking":117,"org.easymock.tests.MockClassControlTest.testToString":328,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":489,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":386,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":440,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":347,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":356,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":173,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":42,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":234,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":291,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":245,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":93,"org.easymock.tests2.UsageTest.wrongArguments":220,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":17,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":397,"org.easymock.samples.ExampleTest.answerVsDelegate":30,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":335,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":422,"org.easymock.tests2.UsageConstraintsTest.testNull":241,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":151,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":193,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":333,"org.easymock.tests2.CaptureTest.testPrimitive":161,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":97,"org.easymock.tests.UsageTest.moreThanOneArgument":102,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":61,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":150,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":449,"org.easymock.tests.UsageTest.argumentsOrdered":105,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":299,"org.easymock.tests.UsageVarargTest.varargIntAccepted":136,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":436,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":129,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":295,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":369,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":25,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":376,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":372,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":425,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":133,"org.easymock.tests.ReplayStateInvalidUsageTest.times":466,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":197,"org.easymock.tests2.DependencyTest.testClassMocking":378,"org.easymock.tests2.AnswerTest.answer":178,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":298,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":438,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":506,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":408,"org.easymock.tests2.CaptureTest.testAnd":158,"org.easymock.tests2.UsageTest.strictResetToDefault":218,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":494,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":345,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":448,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":189,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":87,"org.easymock.tests2.DelegateToTest.testDelegate":211,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":303,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":57,"org.easymock.tests.LimitationsTest.mockFinalMethod":342,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":107,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":403,"org.easymock.tests2.DependencyTest.testClassMockingSupport":379,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":474,"org.easymock.tests2.CaptureTest.testCapture1_2446744":478,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":477,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":55,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":504,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":460,"org.easymock.tests.UsageThrowableTest.throwError":276,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":410,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":26,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":310,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":451,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":368,"org.easymock.samples.PartialClassMockTest.testGetArea":28,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":461,"org.easymock.tests.MockingTest.testInterfaceMocking":420,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":130,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":383,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":457,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":43,"org.easymock.tests2.UsageTest.niceToStrict":8,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":357,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":423,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":0,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":213,"org.easymock.tests2.MockBuilderTest.testCreateMock":314,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":364,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":14,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":51,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":267,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":190,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":407,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":472,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":120,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":395,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":306,"org.easymock.tests.UsageOverloadedMethodTest.overloading":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":361,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":366,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":250,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":287,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":446,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":76,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":27,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":249,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":166,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":473,"org.easymock.tests2.EasyMockSupportClassTest.testAll":172,"org.easymock.tests.MockClassControlTest.testEquals":332,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":63,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":59,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":505,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":401,"org.easymock.tests2.CaptureTest.testCaptureAll":159,"org.easymock.tests.MockNameTest.defaultName":388,"org.easymock.tests2.UsageConstraintsTest.testMatches":251,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":458,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":450,"org.easymock.samples.ExampleTest.voteForRemovals":34,"org.easymock.tests.UsageVarargTest.allKinds":144,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":98,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":402,"org.easymock.samples.BasicClassMockTest.testPrintContent":40,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":280,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":226,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":492,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":22,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":286,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":394,"org.easymock.tests2.UsageConstraintsTest.greaterThan":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":351,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":86,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":157,"org.easymock.samples.ExampleTest.voteForRemoval":31,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":325,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":170,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":346,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":411,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":497,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":343,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":90,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":217,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":429,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":187,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":92,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":349,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":282,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":490,"org.easymock.tests2.CaptureTest.testCaptureFirst":168,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":269,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":188,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":225,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":418,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":72,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":482,"org.easymock.tests2.CaptureTest.testCapture2_2446744":480,"org.easymock.tests2.UsageTest.moreThanOneArgument":219,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":439,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":216,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":143,"org.easymock.tests.GenericTest.testBridgedEquals":318,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":307,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":125,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":304,"org.easymock.tests.UsageExpectAndReturnTest.longType":68,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":399,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":185,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":60,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":510,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":389,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":58,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":447,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":405,"org.easymock.tests.UsageCallCountTest.tooManyCalls":126,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":365,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":73,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":16,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":47,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":279,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":199,"org.easymock.tests.MockingTest.testNiceClassMocking":339,"org.easymock.tests.MockingTest.testClassMocking":337,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":445,"org.easymock.tests2.UsageConstraintsTest.testContains":248,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":177,"org.easymock.tests2.UsageConstraintsTest.testFind":240,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":128,"org.easymock.tests.MockTypeTest.fromEasyMockClass":409,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":109,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":261,"org.easymock.tests.UsageExpectAndReturnTest.object":75,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":154,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":15,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":192,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":138,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":292,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":455,"org.easymock.tests.UsageTest.exactCallCountByLastCall":106,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":308,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":89,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":428,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":390,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":385,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":297,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":134,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":81,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":416,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":18,"org.easymock.tests.MockClassControlTest.testHashCode":331,"org.easymock.tests2.EasyMockSupportTest.testVerify":196,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":359,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":391,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":471,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":272,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":503,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":311,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":511,"org.easymock.tests.UsageVarargTest.varargCharAccepted":137,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":393,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":227,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":444,"org.easymock.tests2.UsageTest.openCallCountByLastCall":500,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":1,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":195,"org.easymock.tests.DefaultClassInstantiatorTest.object":319,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":470,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":453,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":312,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":49,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":360,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":277,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":11,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":507,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":155,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":330,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":48,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":82,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":404,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":175,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":329,"org.easymock.tests2.UsageTest.resumeIfFailure":224,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":334,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":375,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":285,"org.easymock.tests2.StubTest.stubWithReturnValue":236,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":296,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":6,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":74,"org.easymock.tests2.SerializationTest.testAllMockedMethod":184,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":437,"org.easymock.samples.SupportTest.voteForRemovals":37,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":268,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":317,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":20,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":54,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":443,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":483,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":387,"org.easymock.tests.UsageExpectAndThrowTest.object":52,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":255,"org.easymock.tests2.DelegateToTest.testWrongClass":491,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":145,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":146,"org.easymock.tests.UsageStrictMockTest.range":114,"org.easymock.samples.ConstructorCalledMockTest.testTax":270,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":498,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":484,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":198,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":305,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":53,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":214,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":468,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":348,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":396,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":264,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":384,"org.easymock.tests2.CaptureTest.testCaptureNone":165,"org.easymock.tests.UsageUnorderedTest.message":64,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":309,"org.easymock.tests.UsageVerifyTest.twoReturns":100,"org.easymock.tests2.ConstraintsToStringTest.endsWithToString":380,"org.easymock.tests.UsageVarargTest.varargByteAccepted":142,"org.easymock.tests2.ThreadingTest.testThreadSafe":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":362,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":124,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":456,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":39,"org.easymock.tests2.CaptureTest.testCapture_2617107":160,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":476,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":441,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":96,"org.easymock.tests2.UsageConstraintsTest.any":246,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":465,"org.easymock.tests2.StubTest.stub":235,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":406,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":442,"org.easymock.tests.UsageExpectAndThrowTest.longType":45,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":284,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":323,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":464,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":229,"org.easymock.tests2.SerializationTest.testClass":182,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":237,"org.easymock.tests.LimitationsTest.mockNativeMethod":147,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":84,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":263,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":10,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":232,"org.easymock.tests2.NameTest.nameForMocksControl":208,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":12,"org.easymock.tests2.MockedExceptionTest.testMockedException":289,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":352,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":414,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":512,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":119,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":46,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":148,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":215,"org.easymock.tests.MockingTest.testNicePartialClassMocking":118,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":153,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":485,"org.easymock.tests2.CaptureTest.testCaptureLast":164,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":475,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":204,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":244,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":256,"org.easymock.tests.MockingTest.testTwoMocks":338,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":488,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":65,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":50,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":222,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":258,"org.easymock.samples.ExampleTest.removeNonExistingDocument":381,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":462,"org.easymock.tests.UsageStrictMockTest.differentMethods":115,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":13,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":19,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":302,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":321,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":481,"org.easymock.tests2.MockBuilderTest.testCreateMockString":315,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":326,"org.easymock.tests.UsageExpectAndThrowTest.floatType":44,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":353,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":252,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":350,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":179,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":513,"org.easymock.tests.UsageVerifyTest.twoThrows":99,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":415,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":174,"org.easymock.samples.ExampleTest.voteAgainstRemoval":32,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":433,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":382,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":156,"org.easymock.tests.LimitationsTest.privateConstructor":341,"org.easymock.tests2.UsageConstraintsTest.testNotNull":257,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":281,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":288,"org.easymock.tests2.UsageTest.defaultResetToNice":502,"org.easymock.samples.ExampleTest.voteAgainstRemovals":29,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":434,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":80,"org.easymock.tests.UsageVarargTest.differentLength":139,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":9,"org.easymock.tests2.CallbackTest.callback":176,"org.easymock.tests2.UsageConstraintsTest.equals":509,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":344,"org.easymock.tests.UsageTest.openCallCountByLastCall":413,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":3,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":95,"org.easymock.tests.UsageCallCountTest.tooFewCalls":122,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":201,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":398,"org.easymock.tests.UsageThrowableTest.throwCheckedException":278,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":265,"org.easymock.tests.MockingTest.testStrictClassMocking":336,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":203,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":275,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":486,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":200,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":467,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":202,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":181,"org.easymock.tests.ObjectMethodsTest.testHashCode":454,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":294,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":171,"org.easymock.tests2.NameTest.nameForNiceMock":207,"org.easymock.tests2.DependencyTest.testInterfaceMocking":233,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":293,"org.easymock.samples.ExampleTest.addDocument":33,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":363,"org.easymock.tests2.DelegateToTest.testStubDelegate":210,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":367,"org.easymock.tests2.AnswerTest.stubAnswer":180,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":112,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":495,"org.easymock.tests.UsageVarargTest.varargLongAccepted":141,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":116,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":431,"org.easymock.tests.UsageExpectAndReturnTest.floatType":67,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":83,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":262,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":271,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":417,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":24,"org.easymock.tests.UsageThrowableTest.noUpperLimit":91,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":253,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":238,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":374,"org.easymock.tests2.SerializationTest.test":183,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":162,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":320,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":66,"org.easymock.tests2.UsageConstraintsTest.testSame":242,"org.easymock.samples.SupportTest.addDocument":36,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":487,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":463,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":354,"org.easymock.tests.GenericTest.testPackageScope":62,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":392,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":427,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":23,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":421,"org.easymock.tests2.NameTest.nameForMock":205,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":77,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":496,"org.easymock.tests2.UsageStrictMockTest.differentMethods":231,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":316,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":69,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":56,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":452,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":88,"org.easymock.tests2.MockedExceptionTest.testRealException":290,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":412,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":499,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":435,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":228,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":273,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":469,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":94,"org.easymock.tests2.NameTest.nameForStrictMock":206,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":371,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":2,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":260,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":152,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":377,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":254,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":322,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":212,"org.easymock.tests2.UsageStrictMockTest.range":230,"org.easymock.tests2.UsageConstraintsTest.lessThan":259,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":21,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":430,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":186,"org.easymock.tests2.CaptureTest.testCaptureRightOne":167,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":358,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":301,"org.easymock.tests2.UsageConstraintsTest.testOr":243,"org.easymock.tests.UsageRangeTest.combination":85,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":149,"org.easymock.tests.UsageTest.wrongArguments":103,"org.easymock.tests2.MockBuilderTest.testWithConstructor":493,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":355,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":327,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":70,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":424,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":78,"org.easymock.tests.UsageVarargTest.varargShortAccepted":140,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":324,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":313,"org.easymock.tests2.UsageConstraintsTest.cmpTo":247,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":274,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":426,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":501,"org.easymock.tests2.CaptureTest.testCaptureFromStub":479,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":459,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":370,"org.easymock.tests.UsageTest.unexpectedCallWithArray":266,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":111,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":123,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":300,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":79,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":113,"org.easymock.tests2.UsageConstraintsTest.constraints":4,"org.easymock.samples.ExampleTest.addAndChangeDocument":35,"org.easymock.tests2.ConstraintsToStringTest.notToString":514,"org.easymock.tests.UsageStrictMockTest.testVerify":419,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":38,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":110,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":400,"org.easymock.tests2.CompareToTest.testGreateThan":7,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":163,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":131,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":71,"org.easymock.tests.LimitationsTest.abstractClass":340,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":132,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":108,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":191,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":135}}]

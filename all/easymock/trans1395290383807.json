[{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:210","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:603","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Invocation:99","failures":[16,17,18,19,20,21,22,23,24,25,26,27],"status":-1,"binaryOperator":"((this.java.lang.Object.equals(org.easymock.internal.Invocation.java.lang.Object)) && (this.java.lang.reflect.Method.equals(org.easymock.internal.Invocation.java.lang.reflect.Method))) && org.easymock.internal.Invocation.(equalArguments(org.easymock.internal.Invocation.java.lang.Object[]))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1421","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","type":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[28,29,30,31,32,33],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[34],"status":-1,"binaryOperator":"(((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size()))","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[0,1,2,3,35,36,37,38,39,40,41,4,5,6,7,30,8,9,10,11,42,43,44,12,13,15],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[45,46,47,48],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"failures":[0,1,2,49,50,51,52,53,30,8,9,10,54,31],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:210","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.LastControl:61","failures":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.Range:83","failures":[0,72,1,2,73,74,3,35,75,76,36,37,77,78,57,22,79,60,38,39,40,41,80,62,63,81,82,83,64,65,67,84,85,86,4,5,6,7,30,8,87,9,10,88,11,42,89,90,43,44,91,92,68,93,71,94],"status":-1,"binaryOperator":"(int) == (java.lang.Integer.int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:734","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:43","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[0,1,2,3,35,36,37,95,96,97,98,29,99,100,4,5,6,7,8,9,10,11,42,43,44,101,102],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:826","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Double>(double))","type":"CtInvocationImpl"},"failures":[103],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"failures":[104,105],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[56],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.Injection:74","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[106,107,108,109,110,111,112,113,114,115,116,117],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:62","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.RecordState:251","sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:212","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[118],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"methodName","key":"methodName"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[0,119,120,121,122,55,56,123,57,124,58,59,125,34,22,126,127,128,129,130,79,131,132,133,134,135,136,103,60,137,138,139,140,61,62,63,141,81,82,83,64,65,142,66,143,144,67,145,146,147,4,30,8,92,148,68,69,70,93,149,150,151,152,153,154,155,71],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[156,157,158,159,160,161],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[162,131],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:48","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.specification.version\")","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[1,74,77,78,80,85,7,163,164,165,166,167,9,88,91,68,93],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[56],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:318","failures":[168,169],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:36","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:113","sourceCode":"if (org.easymock.Mock == null) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[170,171,172,173,174],"status":-1,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:115","sourceCode":"java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int])","type":"CtAssignmentImpl"},"failures":[175,176],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[56,58],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:315","failures":[177,178,179,104,74,76,78,86,88,90,180,181,182,183,92,184,105,69,70,155,94,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[170,171,172,173,174],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[175,176],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[55,56,57,58,59,34,133,60,61,63,66],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1725","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","type":"CtInvocationImpl"},"failures":[57],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:126","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[207],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1777","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:91","sourceCode":"java.lang.StringBuilder.append(\", \")","type":"CtInvocationImpl"},"failures":[208],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"failures":[64,142],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Results:90","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Float>(float))","type":"CtInvocationImpl"},"failures":[135],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:61","sourceCode":"throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int))","type":"CtThrowImpl"},"failures":[209],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:156","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:185","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"verified":"lastInvocationUsed"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":56,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":88,"org.easymock.tests2.UsageTest.argumentsOrdered":37,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":183,"org.easymock.tests2.StubTest.stubWithReturnValue":78,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":161,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":103,"org.easymock.tests2.SerializationTest.testAllMockedMethod":47,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":181,"org.easymock.samples.SupportTest.voteForRemovals":20,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":29,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":170,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":199,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":48,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":187,"org.easymock.tests.UsageExpectAndThrowTest.object":197,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":12,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":134,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":157,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":146,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":147,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":125,"org.easymock.tests2.UsageTest.wrongArguments":35,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":148,"org.easymock.tests.UsageStrictMockTest.range":9,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":111,"org.easymock.tests2.UsageConstraintsTest.testNull":57,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":198,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":50,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":23,"org.easymock.tests2.CaptureTest.testPrimitive":141,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":93,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":206,"org.easymock.tests.UsageTest.moreThanOneArgument":11,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":43,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":32,"org.easymock.tests2.CaptureTest.testCaptureNone":65,"org.easymock.tests.UsageUnorderedTest.message":4,"org.easymock.tests.UsageVerifyTest.twoReturns":7,"org.easymock.tests.UsageTest.argumentsOrdered":44,"org.easymock.tests.InvocationTest.testEquals":27,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":99,"org.easymock.tests2.CaptureTest.testCapture_2617107":63,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":149,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":100,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":70,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":165,"org.easymock.tests2.UsageConstraintsTest.any":22,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":153,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":166,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":182,"org.easymock.tests.UsageExpectAndThrowTest.longType":190,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":97,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":72,"org.easymock.tests2.SerializationTest.testClass":45,"org.easymock.tests2.AnswerTest.answer":84,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":173,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":34,"org.easymock.tests2.CaptureTest.testAnd":61,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":107,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":52,"org.easymock.tests2.NameTest.nameForMocksControl":41,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":108,"org.easymock.tests2.MockedExceptionTest.testMockedException":178,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":90,"org.easymock.tests2.DelegateToTest.testDelegate":207,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":191,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":202,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":51,"org.easymock.tests2.CaptureTest.testCaptureLast":64,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":92,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":102,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":59,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":135,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":101,"org.easymock.tests2.CaptureTest.testCapture1_2446744":81,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":200,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":195,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":36,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":137,"org.easymock.tests.UsageThrowableTest.throwError":168,"org.easymock.tests.UsageStrictMockTest.differentMethods":10,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":109,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":113,"org.easymock.tests2.ConstraintsToStringTest.andToString":98,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":117,"org.easymock.tests.UsageExpectAndThrowTest.floatType":189,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":79,"org.easymock.tests.UsageVerifyTest.twoThrows":6,"org.easymock.samples.PartialClassMockTest.testGetArea":21,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":150,"org.easymock.samples.ExampleTest.voteAgainstRemoval":17,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":164,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":188,"org.easymock.tests2.UsageConstraintsTest.testNotNull":60,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":177,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":186,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":25,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":106,"org.easymock.tests2.CallbackTest.callback":73,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":110,"org.easymock.tests.UsageTest.openCallCountByLastCall":89,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":196,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":28,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":121,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":69,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":105,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":129,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":128,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":142,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":172,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":204,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":33,"org.easymock.tests2.CaptureTest.testCaptureAll":62,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":155,"org.easymock.tests2.UsageConstraintsTest.testMatches":130,"org.easymock.samples.ExampleTest.voteForRemovals":18,"org.easymock.tests2.NameTest.nameForNiceMock":40,"org.easymock.tests.UsageVarargTest.allKinds":71,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":5,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":159,"org.easymock.tests2.DelegateToTest.testStubDelegate":80,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":185,"org.easymock.tests2.AnswerTest.stubAnswer":85,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":115,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":184,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":8,"org.easymock.tests2.UsageConstraintsTest.greaterThan":131,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":160,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":53,"org.easymock.samples.ExampleTest.voteForRemoval":16,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":163,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":118,"org.easymock.tests2.ConstraintsToStringTest.orToString":95,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":132,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":74,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":122,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":82,"org.easymock.tests2.SerializationTest.test":46,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":175,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":94,"org.easymock.tests2.UsageConstraintsTest.testSame":124,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":180,"org.easymock.tests2.CaptureTest.testCaptureFirst":67,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":77,"org.easymock.tests.GenericTest.testPackageScope":171,"org.easymock.tests2.UsageTest.moreThanOneArgument":3,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":120,"org.easymock.tests2.CaptureTest.testCapture2_2446744":144,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":116,"org.easymock.tests.GenericTest.testBridgedEquals":174,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":209,"org.easymock.tests2.NameTest.nameForMock":38,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":205,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":136,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":203,"org.easymock.tests2.UsageStrictMockTest.differentMethods":2,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":201,"org.easymock.tests2.MockedExceptionTest.testRealException":104,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":192,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":0,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":68,"org.easymock.tests2.NameTest.nameForStrictMock":39,"org.easymock.tests2.UsageConstraintsTest.testContains":127,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":179,"org.easymock.tests2.UsageConstraintsTest.testFind":123,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":86,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":139,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":140,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":13,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":133,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":145,"org.easymock.tests.ErrorMessageTest.testGetters":14,"org.easymock.tests2.UsageStrictMockTest.range":1,"org.easymock.tests2.UsageConstraintsTest.lessThan":138,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":158,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":114,"org.easymock.tests.UsageTest.exactCallCountByLastCall":91,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":154,"org.easymock.tests2.CaptureTest.testCaptureRightOne":66,"org.easymock.tests2.UsageConstraintsTest.testOr":58,"org.easymock.tests.UsageRangeTest.combination":26,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":156,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":49,"org.easymock.tests.UsageTest.wrongArguments":42,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":112,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":176,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":119,"org.easymock.tests2.UsageConstraintsTest.cmpTo":126,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":167,"org.easymock.tests2.UsageTest.openCallCountByLastCall":75,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":76,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":24,"org.easymock.tests2.CaptureTest.testCaptureFromStub":143,"org.easymock.tests.UsageTest.unexpectedCallWithArray":31,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":208,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":194,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":30,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":169,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":87,"org.easymock.tests2.UsageConstraintsTest.constraints":55,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":193,"org.easymock.samples.ExampleTest.addAndChangeDocument":19,"org.easymock.tests2.ConstraintsToStringTest.notToString":96,"org.easymock.tests.UsageStrictMockTest.testVerify":54,"org.easymock.tests2.CompareToTest.testGreateThan":162,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":83,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":151,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":152,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":15}}]

[{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:170","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:371","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:773","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.String) != null ? java.lang.String : \"EasyMock for \" + org.easymock.internal.MocksControl.(org.easymock.internal.MocksControl.getMockedType(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:98","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.io.ObjectInputStream java.io.ObjectInputStream = new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(byte[]))","position":"org.easymock.internal.DefaultClassInstantiator:202","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Long>(org.easymock.Capture<java.lang.Long>))","position":"org.easymock.EasyMock:1951","type":"CtInvocationImpl"},"status":-2},{"failures":[0],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:135","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2012","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    if (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().equals(org.easymock.internal.ExpectedInvocation)) {\n        org.easymock.internal.ExpectedInvocationAndResults.getResults().add(org.easymock.internal.Result, org.easymock.internal.Range);\n        return ;\n    } \n}","position":"org.easymock.internal.UnorderedBehavior:38","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:191","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.BridgeMethodResolver:142","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(float.float, java.lang.Float.java.lang.Float)","position":"org.easymock.internal.ReflectionUtils:39","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:287","type":"CtLocalVariableImpl"},"status":-2},{"failures":[1,2,3],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.matchers.Same:43","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n} ","position":"org.easymock.internal.EasyMockProperties:47","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:827","type":"mutation","return":"return 0","status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1848","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return float","position":"org.easymock.EasyMock:1409","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","position":"org.easymock.EasyMock:1518","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean || (org.easymock.internal.AndroidClassProxyFactory.MockHandler.(isMocked(java.lang.reflect.Method)) && (!java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers()))))) {\n    return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:88","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.BridgeMethodResolver:213","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof char[]) && ((java.lang.Object == null) || (java.lang.Object instanceof char[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:40","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:70","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-6657694947057597484L","position":"org.easymock.internal.matchers.Matches:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"status":-2},{"failures":[4,5,6,7,8,9,10,1,11,2,3,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"binaryOperator":"java.lang.Object == null","name":"negateConditional","position":"org.easymock.internal.ArgumentToString:34","type":"mutation","status":-1},{"failures":[],"variableMapping":{"otherArgument":"actual","myArgument":"actual"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:126","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).startsWith(java.lang.String))","position":"org.easymock.internal.matchers.StartsWith:36","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"add","transplant":{"sourceCode":"return new java.lang.Class[]{ java.lang.Class<?> }","position":"org.easymock.internal.BridgeMethodResolver:378","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isInterface()) {\n    return new java.lang.Class[]{ java.lang.Class<?> };\n} ","position":"org.easymock.internal.BridgeMethodResolver:377","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:200","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:260","type":"CtAssignmentImpl"},"status":0},{"failures":[46,47,48,49,50],"variableMapping":{"lastResult":"this","this":"lastResult","value":"delegateTo"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.createReturnResult(java.lang.Object)","position":"org.easymock.internal.RecordState:102","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","position":"org.easymock.internal.RecordState:129","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{"unordered":"checkOrder","match":"checkOrder","validCallCount":"checkOrder"},"name":"replace","transplant":{"sourceCode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    final boolean boolean = !(boolean);\n    final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount();\n    final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation));\n    if ((boolean && boolean) && (!boolean)) {\n        continue;\n    } \n    final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount());\n    java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage);\n}","position":"org.easymock.internal.UnorderedBehavior:84","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{"unordered":"checkOrder","match":"checkOrder","validCallCount":"checkOrder"},"name":"add","transplant":{"sourceCode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<org.easymock.internal.UnorderedBehavior>.isEmpty()) || (!(org.easymock.internal.MocksBehavior.lastBehaviorList().allowsExpectedInvocation(org.easymock.internal.ExpectedInvocation, boolean)))) {\n    java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean));\n} ","position":"org.easymock.internal.MocksBehavior:74","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.reflect.Method.getParameterTypes())","position":"org.easymock.internal.BridgeMethodResolver:237","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1000","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:110","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:137","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","position":"org.easymock.internal.ReflectionUtils:230","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ObjectMethodsFilter:115","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.matchers.Captures<?>.setPotentialValue(null)","position":"org.easymock.internal.Invocation:174","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1080","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Captures:53","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MocksControl(org.easymock.MockType)","position":"org.easymock.EasyMock:491","type":"CtReturnImpl"},"status":-2},{"failures":[51,52,53,54,55,56,57,58,59,60,61,62],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n    org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection);\n    java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField());\n} ","position":"org.easymock.internal.Injector:169","type":"CtIfImpl"},"status":-1},{"failures":[63,5,64,65,66,32,36,37,67],"variableMapping":{"verified":"lastInvocationUsed"},"name":"add","transplant":{"sourceCode":"if (boolean) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:160","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:217","type":"CtIfImpl"},"status":-1},{"failures":[68],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:414","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:399","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:411","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int]","position":"org.easymock.internal.BridgeMethodResolver:383","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{"bridgeMethod":"method"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:112","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{"result":"m"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:78","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","position":"org.easymock.internal.ClassProxyFactory:251","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1863","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper","position":"org.easymock.internal.MocksControl:225","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:353","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1928","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Double>(double))","position":"org.easymock.EasyMock:919","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","position":"org.easymock.internal.RecordState:253","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"hashCodeMethod"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:124","type":"CtInvocationImpl"},"status":-2},{"failures":[69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,107,108,108,109,110,111,112,113,114,115,116,117,118],"variableMapping":{"type":"searchType"},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.ReflectionUtils:120","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor })","position":"org.easymock.internal.ClassProxyFactory:189","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(char.char, java.lang.Character.java.lang.Character)","position":"org.easymock.internal.ReflectionUtils:36","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"-5160559075998939348L","position":"org.easymock.internal.matchers.Not:27","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Exception java.lang.Exception","position":"org.easymock.ConstructorArgs:71","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.DefaultClassInstantiator:164","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return int == 0","position":"org.easymock.internal.matchers.CompareEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:180","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","position":"org.easymock.internal.RecordState:55","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.ObjectMethodsFilter:94","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","position":"org.easymock.internal.ReplayState:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"(java.lang.String + \".\")","name":"math","position":"org.easymock.internal.Invocation:154","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl() : org.easymock.EasyMockSupport.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.Injector:217","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0]","position":"org.easymock.internal.BridgeMethodResolver:353","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"default :\n    throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));","position":"org.easymock.Capture:123","type":"CtCaseImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:207","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","position":"org.easymock.internal.ClassProxyFactory:196","type":"CtAssignmentImpl"},"status":-2},{"failures":[69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,119,89,90,91,92,93,94,95,96,120,97,98,99,100,101,102,103,104,121,122,105,106,107,107,108,108,109,123,124,110,111,112,113,114,115,125,116,117,118],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","position":"org.easymock.internal.ReflectionUtils:105","type":"CtIfImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.Method.getGenericParameterTypes()","position":"org.easymock.internal.BridgeMethodResolver:188","type":"CtLocalVariableImpl"},"status":-2},{"failures":[6,17,18,19,23,30,31,33,36,37,40,42,43,44,45],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.Object[] = new java.lang.Object[0]","position":"org.easymock.internal.ArgumentToString:84","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","position":"org.easymock.internal.ArgumentToString:93","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.ExpectedInvocation:112","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Captures:53","type":"CtReturnImpl"},"status":-2},{"failures":[126],"variableMapping":{"mockName":"methodName","methodName":"methodName"},"name":"replace","transplant":{"sourceCode":"return (java.lang.String + \".\") + java.lang.String","position":"org.easymock.internal.Invocation:154","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String","position":"org.easymock.internal.Invocation:148","type":"CtReturnImpl"},"status":-1},{"failures":[69,70,71,72,73,127,5,6,7,76,77,128,78,79,80,82,84,85,86,129,130,131,89,91,93,94,96,98,99,100,101,132,102,103,133,134,135,136,109,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,112,113,114,155,156,157,158,159,160,161,162,163,164,115,0,32,33,34,165,166,167,168,169,170,171,172,173,116,118],"binaryOperator":"java.lang.Object == null","name":"negateConditional","position":"org.easymock.internal.RecordState:243","type":"mutation","status":-1},{"failures":[174,175,176],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","position":"org.easymock.Capture:80","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.io.ObjectInputStream.readObject()","position":"org.easymock.internal.DefaultClassInstantiator:203","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (int > (int)) {\n    return true;\n} ","position":"org.easymock.internal.Results:56","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.Result(new ThrowingAnswer() , true)","position":"org.easymock.internal.Result:54","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new java.util.Properties()","position":"org.easymock.internal.EasyMockProperties:41","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    try {\n        if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasResults())) {\n            continue;\n        } \n        if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n            continue;\n        } \n        final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.ExpectedInvocationAndResults.getResults().next();\n        org.easymock.internal.Invocation.validateCaptures();\n        return org.easymock.internal.Result;\n    } finally {\n        org.easymock.internal.Invocation.clearCaptures();\n    }\n}","position":"org.easymock.internal.UnorderedBehavior:50","type":"CtForEachImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.io.DataOutputStream java.io.DataOutputStream = new java.io.DataOutputStream(java.io.ByteArrayOutputStream)","position":"org.easymock.internal.DefaultClassInstantiator:135","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:244","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int]);\n    if (java.lang.Class<?> != null) {\n        java.lang.Class<?>[][int] = java.lang.Class<?>;\n    } else {\n        java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n    }\n}","position":"org.easymock.internal.MethodSerializationWrapper:67","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes())","position":"org.easymock.internal.AndroidClassProxyFactory:50","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","position":"org.easymock.internal.ReplayState:68","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:51","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.closeMethod()","position":"org.easymock.internal.RecordState:331","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","position":"org.easymock.internal.matchers.Captures:52","type":"CtInvocationImpl"},"status":0},{"failures":[4,79,177],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.verify()","position":"org.easymock.internal.ReplayState:73","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","position":"org.easymock.internal.RecordState:332","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.util.List<org.easymock.IArgumentMatcher>.get(int).matches(java.lang.Object[][int]))) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:94","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object[].int) != (java.util.List<org.easymock.IArgumentMatcher>.size())) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:90","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"genericType":"genericType"},"name":"add","transplant":{"sourceCode":"return java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(org.easymock.internal.Range.hasFixedCount())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"));\n} ","position":"org.easymock.internal.Results:39","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksBehavior.lastBehaviorList().addExpected(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result, org.easymock.internal.Range)","position":"org.easymock.internal.MocksBehavior:61","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:223","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()","position":"org.easymock.internal.Injector:116","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(byte))","position":"org.easymock.EasyMock:1482","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.matchers.Or:43","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","position":"org.easymock.internal.Range:45","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:42","type":"CtThrowImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:336","type":"CtLocalVariableImpl"},"status":-2},{"failures":[178,51,52,53,54,55,179,180,181,57,58,59,60,61,182,183],"variableMapping":{"injection":"toAssign"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.Injection.setMatched()","position":"org.easymock.internal.InjectionTarget:65","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injection == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:189","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = new java.lang.Class[java.lang.String[].int]","position":"org.easymock.internal.MethodSerializationWrapper:65","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.ClassNotFoundException java.lang.ClassNotFoundException","position":"org.easymock.internal.AndroidSupport:28","type":"CtLocalVariableImpl"},"status":-2},{"failures":[184,185,186,171,173],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:144","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:369","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = java.lang.reflect.Constructor<?>.getParameterTypes()","position":"org.easymock.internal.ReflectionUtils:179","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:72","type":"CtThrowImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>.getName(), java.lang.Character.java.lang.Class<java.lang.Character>)","position":"org.easymock.internal.MethodSerializationWrapper:36","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Long>(org.easymock.Capture<java.lang.Long>))","position":"org.easymock.EasyMock:1951","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:592","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"equals\", new java.lang.Class[]{ java.lang.Object.java.lang.Object })","position":"org.easymock.internal.ReflectionUtils:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-6785245714002503134L","position":"org.easymock.internal.matchers.Contains:27","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1013","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:116","type":"CtReturnImpl"},"status":-2},{"failures":[187,18,44],"binaryOperator":"(java.lang.Object == null)","name":"negateConditional","position":"org.easymock.internal.matchers.Equals:53","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.UnorderedBehavior:63","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException)","position":"org.easymock.internal.DefaultClassInstantiator:45","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:213","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:180","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"constructor":"constructor"},"name":"replace","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","position":"org.easymock.internal.MockBuilder:128","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.AndroidSupport.boolean","position":"org.easymock.internal.AndroidSupport:34","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","position":"org.easymock.internal.BridgeMethodResolver:246","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.createTypeVariableMap(java.lang.reflect.Method.getDeclaringClass())","position":"org.easymock.internal.BridgeMethodResolver:111","type":"CtLocalVariableImpl"},"status":-2},{"failures":[6,7,17,18,19,188,30,31,33,34,126,189,36,37,40,42,43,44,45],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.StringBuilder.toString()","position":"org.easymock.internal.ArgumentToString:95","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"value":"mock"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.Injection:50","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"bridgeMethod":"m"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.MethodSerializationWrapper:79","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:417","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType()))","position":"org.easymock.internal.BridgeMethodResolver:285","type":"CtInvocationImpl"},"status":-2},{"failures":[190],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","position":"org.easymock.EasyMock:2052","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return boolean","position":"org.easymock.internal.Injection:82","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.LinkedList<org.easymock.internal.Range>.add(org.easymock.internal.Range)","position":"org.easymock.internal.Results:44","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.StringBuffer.toString()","position":"org.easymock.internal.ExpectedInvocation:113","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += 1","position":"org.easymock.internal.Results:68","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-6657694947057597484L","position":"org.easymock.internal.matchers.Matches:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.Invocation:210","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(((\"endsWith(\\\"\" + (java.lang.String)) + \"\\\")\"))","position":"org.easymock.internal.matchers.EndsWith:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:643","type":"CtReturnImpl"},"status":-2},{"failures":[191,192],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","position":"org.easymock.internal.DefaultClassInstantiator:126","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","position":"org.easymock.EasyMock:2159","type":"CtInvocationImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":58,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":82,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":73,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":155,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":88,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":2,"org.easymock.tests.UsageVerifyTest.twoThrows":36,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":62,"org.easymock.tests2.DelegateToTest.testReturnException":46,"org.easymock.tests2.ConstraintsToStringTest.andToString":12,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":177,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":4,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":11,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":104,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":50,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":123,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":98,"org.easymock.tests2.EasyMockSupportClassTest.testAll":69,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":148,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":110,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":181,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":162,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":164,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":55,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":153,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":122,"org.easymock.tests2.DelegateToTest.testWrongClass":47,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":192,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":24,"org.easymock.tests2.UsageTest.moreThanOneArgument":16,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":121,"org.easymock.tests.UsageTest.wrongArguments":43,"org.easymock.samples.ExampleTest.voteAgainstRemoval":135,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":28,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":59,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":26,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":9,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":180,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":87,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":161,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":129,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":94,"org.easymock.tests2.MockBuilderTest.testCreateMock":95,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":119,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":57,"org.easymock.tests2.SerializationTest.testAllMockedMethod":75,"org.easymock.samples.ExampleTest.voteAgainstRemovals":133,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":20,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":172,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":154,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":65,"org.easymock.tests.LimitationsTest.mockNativeMethod":115,"org.easymock.tests2.DelegateToTest.testStubDelegate":127,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":157,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":25,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":21,"org.easymock.tests.UsageUnorderedTest.message":40,"org.easymock.samples.ExampleTest.answerVsDelegate":49,"org.easymock.samples.ExampleTest.voteForRemoval":134,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":145,"org.easymock.tests.UsageVerifyTest.twoReturns":37,"org.easymock.tests2.DependencyTest.testInterfaceMocking":130,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":142,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":22,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":15,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":158,"org.easymock.tests.MockingTest.testTwoMocks":111,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":80,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":171,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":146,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":174,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":100,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":182,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":61,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":167,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":35,"org.easymock.samples.PartialClassMockTest.testGetArea":109,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":66,"org.easymock.samples.ExampleTest.voteForRemovals":136,"org.easymock.samples.ConstructorCalledMockTest.testTax":107,"org.easymock.tests2.UsageTest.argumentsOrdered":19,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":79,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":0,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":143,"org.easymock.tests2.AnswerTest.answer":63,"org.easymock.tests.MockingTest.testNicePartialClassMocking":113,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":183,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":32,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":188,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":139,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":52,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":144,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":163,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":71,"org.easymock.tests2.ConstraintsToStringTest.notToString":10,"org.easymock.tests.UsageTest.argumentsOrdered":45,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":93,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":152,"org.easymock.tests2.MockBuilderTest.testCreateMockString":97,"org.easymock.tests.UsageExpectAndReturnTest.longType":141,"org.easymock.tests2.SerializationTest.testClass":74,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":126,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":105,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":60,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":92,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":169,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":64,"org.easymock.tests2.UsageTest.strictResetToDefault":190,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":30,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":85,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":96,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":151,"org.easymock.tests2.ConstraintsToStringTest.orToString":8,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":132,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":81,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":78,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":76,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":27,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":114,"org.easymock.tests2.DelegateToTest.testDelegate":48,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":191,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":51,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":185,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":54,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":124,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":147,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":156,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":175,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":166,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":99,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":101,"org.easymock.tests.UsageExpectAndReturnTest.floatType":140,"org.easymock.tests2.UsageTest.wrongArguments":17,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":3,"org.easymock.tests2.UsageTest.resumeIfFailure":184,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":102,"org.easymock.samples.SupportTest.voteForRemovals":137,"org.easymock.tests.UsageRangeTest.combination":170,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":53,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":108,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":117,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":189,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":186,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":173,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":56,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":165,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":5,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":128,"org.easymock.samples.BasicClassMockTest.testPrintContent":106,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":159,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":83,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":77,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":149,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":178,"org.easymock.tests2.UsageStrictMockTest.differentMethods":7,"org.easymock.tests.UsageTest.exactCallCountByLastCall":67,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":68,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":118,"org.easymock.tests2.UsageConstraintsTest.equals":187,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":120,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":70,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":131,"org.easymock.tests.UsageStrictMockTest.range":33,"org.easymock.tests.UsageTest.unexpectedCallWithArray":42,"org.easymock.tests.MockingTest.testPartialClassMocking":112,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":150,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":18,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":23,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":44,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":168,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":14,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":176,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":84,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":86,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":31,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":13,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":72,"org.easymock.tests2.UsageStrictMockTest.range":6,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":103,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":38,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":39,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":90,"org.easymock.tests.UsageTest.moreThanOneArgument":41,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":1,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":160,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":89,"org.easymock.tests.UsageStrictMockTest.differentMethods":34,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":179,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":125,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":91,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":29,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":138,"org.easymock.tests.GenericTest.testPackageScope":116}}]

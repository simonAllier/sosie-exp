[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,72,73,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"position":"org.easymock.internal.MockBuilder:205","failures":[0,10,11,110,18,28,34,38,111,39,40,112,41,42,43,44,113,45,114,46,47,48,115,50,59,61,64,65,68,69,72,73,74,77,78,91,94],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[116,117,118],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[91,92,93,94,95],"status":-1,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[119,120],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[121,122,123,124,125,126],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[80,81,82,83,85,86],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[127,128,129,130,131,132,133,134,119],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:72","sourceCode":"java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","type":"CtAssignmentImpl"},"failures":[0,135,1,136],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"failures":[137,138],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:80","failures":[0,38,139,39,40,42,43,44,45,47,48,49,140,50,59,74,77,78,94],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:866","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.StartsWith:27","sourceCode":"-658998692584342514L","type":"CtUnaryOperatorImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[0,135,1,136],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:196","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:189","sourceCode":"org.easymock.internal.IMocksBehavior = new org.easymock.internal.MocksBehavior(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtAssignmentImpl"},"failures":[141,142,143,137,144,145,146,147,148,149,150,151,0,135,1,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,2,3,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,4,5,6,7,198,199,8,9,200,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,201,202,203,204,205,206,207,38,39,40,41,42,43,44,45,114,46,47,48,50,208,127,209,128,210,211,212,213,214,215,216,129,217,218,219,54,55,220,56,57,58,59,221,60,61,62,63,64,65,66,67,68,222,223,130,131,224,225,226,227,132,133,228,134,229,230,231,232,233,234,235,236,237,119,120,238,239,240,241,242,243,69,70,71,244,245,246,247,138,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,72,73,74,75,76,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,77,304,305,306,307,78,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,79,330,331,123,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,80,81,82,83,84,85,86,356,357,358,359,360,361,362,363,364,365,366,367,368,87,88,89,90,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,91,92,93,94,95,96,453,97,98,99,100,101,102,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,126,483,484,485,486,487,488,103,104,105,106,107,489,108,490,491,109,492,493,494,495,496],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:60","sourceCode":"return org.easymock.internal.Result.answer()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:59","sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","type":"CtTryImpl"},"failures":[244,465],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:289","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[91],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1204","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[133],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:55","sourceCode":"java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection)","type":"CtInvocationImpl"},"failures":[141,146,245,250,276,285],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:288","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1471","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[418],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[156],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[145,0,135,156,160,164,165,169,170,171,173,175,176,177,180,181,184,185,186,187,188,189,190,191,192,193,194,195,4,5,6,7,199,8,9,10,15,18,28,34,207,39,42,44,45,48,127,209,128,210,211,214,215,216,129,218,219,54,55,220,56,57,58,60,64,65,66,222,223,130,131,225,226,227,132,133,228,229,230,231,232,233,234,235,236,237,119,120,238,239,240,241,242,243,71,249,258,262,263,264,265,266,269,271,272,275,277,279,280,282,74,286,287,288,289,290,291,292,293,299,300,303,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,333,334,337,350,351,352,353,354,355,89,392,394,395,396,397,398,399,400,401,411,413,422,423,425,427,92,454,456,467,477,478,479,480,483,485,486,106,107,108],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.BridgeMethodResolver:94","failures":[],"status":0,"binaryOperator":"(\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[219],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1964","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[131],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[256,258,412],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[172,178,179,271,123,332,335,336,355,455,456,468,497,126,485],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((this.org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"failures":[0,10,11,46,61,72,72,73,73],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"position":"org.easymock.internal.RecordState:243","failures":[164,165,4,5,6,7,199,8,9,10,15,18,28,34,39,42,44,45,48,54,55,220,56,57,58,60,64,65,66,258,265,269,271,272,275,277,279,280,282,74,287,298,299,310,311,312,313,314,315,318,319,321,322,323,325,326,327,328,329,350,351,352,353,354,89,400,401,427,457,458,459,460,477,478,479,480,483,485,486,106,107,108],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:198","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:126","sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[498],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:70","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:74","sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":131,"org.easymock.tests2.UsageTest.argumentsOrdered":179,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":330,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":194,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":250,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":412,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":174,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":276,"org.easymock.tests2.DelegateToTest.testReturnException":257,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":436,"org.easymock.tests.MockingTest.testPartialClassMocking":106,"org.easymock.tests.MockClassControlTest.testToString":97,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":201,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":421,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":68,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":22,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":18,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":369,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":165,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":228,"org.easymock.tests2.UsageTest.wrongArguments":172,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":299,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":151,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":296,"org.easymock.samples.ExampleTest.answerVsDelegate":278,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":78,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":491,"org.easymock.tests2.UsageConstraintsTest.testNull":226,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":56,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":102,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":193,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":51,"org.easymock.tests2.CaptureTest.testPrimitive":210,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":303,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":388,"org.easymock.tests.UsageTest.moreThanOneArgument":331,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":220,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":459,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":492,"org.easymock.tests.UsageTest.argumentsOrdered":336,"org.easymock.tests.UsageVarargTest.varargIntAccepted":443,"org.easymock.tests.InvocationTest.testEquals":498,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":417,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":350,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":38,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":254,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":43,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":404,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":354,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":145,"org.easymock.tests.ReplayStateInvalidUsageTest.times":365,"org.easymock.tests2.DependencyTest.testClassMocking":162,"org.easymock.tests2.AnswerTest.answer":156,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":134,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":419,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":155,"org.easymock.tests2.CaptureTest.testAnd":127,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":305,"org.easymock.tests2.UsageTest.strictResetToDefault":170,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":112,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":63,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":458,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":479,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":188,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":496,"org.easymock.tests2.DelegateToTest.testDelegate":261,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":384,"org.easymock.tests.LimitationsTest.mockFinalMethod":90,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":439,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":476,"org.easymock.tests2.DependencyTest.testClassMockingSupport":163,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":389,"org.easymock.tests2.CaptureTest.testCapture1_2446744":211,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":221,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":382,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":153,"org.easymock.tests.UsageThrowableTest.throwError":392,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":359,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":307,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":255,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":461,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":36,"org.easymock.samples.PartialClassMockTest.testGetArea":74,"org.easymock.tests.MockingTest.testInterfaceMocking":489,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":360,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":351,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":287,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":434,"org.easymock.tests2.UsageTest.niceToStrict":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":23,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":370,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":402,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":118,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":42,"org.easymock.tests2.MockBuilderTest.testCreateMock":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":31,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":148,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":121,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":378,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":189,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":304,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":471,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":341,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":294,"org.easymock.tests.UsageOverloadedMethodTest.overloading":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":33,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":27,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":465,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":233,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":291,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":321,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":232,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":216,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":444,"org.easymock.tests.MockClassControlTest.testEquals":101,"org.easymock.tests2.EasyMockSupportClassTest.testAll":15,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":93,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":386,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":52,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":474,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":154,"org.easymock.tests2.CaptureTest.testCaptureAll":209,"org.easymock.tests.MockNameTest.defaultName":356,"org.easymock.tests2.UsageConstraintsTest.testMatches":234,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":460,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":357,"org.easymock.samples.ExampleTest.voteForRemovals":282,"org.easymock.tests.UsageVarargTest.allKinds":452,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":454,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":475,"org.easymock.samples.BasicClassMockTest.testPrintContent":76,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":398,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":267,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":440,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":251,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":260,"org.easymock.tests2.UsageConstraintsTest.greaterThan":236,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":16,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":478,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":66,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":86,"org.easymock.samples.ExampleTest.voteForRemoval":279,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":67,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":263,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":49,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":308,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":59,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":169,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":79,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":46,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":409,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":186,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":394,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":13,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":435,"org.easymock.tests2.CaptureTest.testCaptureFirst":219,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":256,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":408,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":187,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":181,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":468,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":317,"org.easymock.tests2.UsageTest.moreThanOneArgument":171,"org.easymock.tests2.CaptureTest.testCapture2_2446744":218,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":265,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":420,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":48,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":451,"org.easymock.tests.GenericTest.testBridgedEquals":95,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":348,"org.easymock.tests.UsageExpectAndReturnTest.longType":313,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":472,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":184,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":387,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":140,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":239,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":298,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":385,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":457,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":339,"org.easymock.tests.UsageCallCountTest.tooManyCalls":349,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":343,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":32,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":318,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":150,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":374,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":397,"org.easymock.tests.MockingTest.testNiceClassMocking":109,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":5,"org.easymock.tests.MockingTest.testClassMocking":104,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":139,"org.easymock.tests2.UsageConstraintsTest.testContains":231,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":342,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":71,"org.easymock.tests2.UsageConstraintsTest.testFind":225,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":293,"org.easymock.tests.MockTypeTest.fromEasyMockClass":306,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":481,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":168,"org.easymock.tests.UsageExpectAndReturnTest.object":320,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":60,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":149,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":192,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":446,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":432,"org.easymock.tests.UsageTest.exactCallCountByLastCall":337,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":289,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":407,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":493,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":426,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":11,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":441,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":326,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":464,"org.easymock.tests.MockClassControlTest.testHashCode":100,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":246,"org.easymock.tests2.EasyMockSupportTest.testVerify":196,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":25,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":494,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":470,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":462,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":152,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":208,"org.easymock.tests.UsageVarargTest.varargCharAccepted":445,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":268,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":425,"org.easymock.tests2.UsageTest.openCallCountByLastCall":175,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":116,"org.easymock.tests.DefaultClassInstantiatorTest.object":80,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":195,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":469,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":430,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":497,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":26,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":376,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":395,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":53,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":137,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":245,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":99,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":64,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":375,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":327,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":338,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":34,"org.easymock.tests2.UsageTest.resumeIfFailure":180,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":77,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":438,"org.easymock.tests2.StubTest.stubWithReturnValue":207,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":113,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":240,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":319,"org.easymock.tests2.SerializationTest.testAllMockedMethod":1,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":418,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":122,"org.easymock.samples.SupportTest.voteForRemovals":275,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":91,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":138,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":381,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":136,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":424,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":157,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":428,"org.easymock.tests.UsageExpectAndThrowTest.object":379,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":120,"org.easymock.tests2.DelegateToTest.testWrongClass":259,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":400,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":401,"org.easymock.tests.UsageStrictMockTest.range":485,"org.easymock.samples.ConstructorCalledMockTest.testTax":72,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":182,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":191,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":4,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":380,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":44,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":12,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":335,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":367,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":295,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":124,"org.easymock.tests2.CaptureTest.testCaptureNone":215,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":288,"org.easymock.tests.UsageUnorderedTest.message":355,"org.easymock.tests.UsageVerifyTest.twoReturns":456,"org.easymock.tests.UsageVarargTest.varargByteAccepted":450,"org.easymock.tests2.ThreadingTest.testThreadSafe":262,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":29,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":346,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":433,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":75,"org.easymock.tests2.CaptureTest.testCapture_2617107":128,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":391,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":422,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":302,"org.easymock.tests2.UsageConstraintsTest.any":229,"org.easymock.tests2.StubTest.stub":206,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":364,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":340,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":437,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":423,"org.easymock.tests.UsageExpectAndThrowTest.longType":372,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":84,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":363,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":270,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":249,"org.easymock.tests.LimitationsTest.mockNativeMethod":89,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":94,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":329,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":143,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":273,"org.easymock.tests2.NameTest.nameForMocksControl":205,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":144,"org.easymock.tests2.MockedExceptionTest.testMockedException":70,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":17,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":334,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":167,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":108,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":373,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":54,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":45,"org.easymock.tests.MockingTest.testNicePartialClassMocking":107,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":58,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":141,"org.easymock.tests2.CaptureTest.testCaptureLast":214,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":390,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":133,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":9,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":238,"org.easymock.tests.MockingTest.testTwoMocks":105,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":200,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":310,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":377,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":178,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":242,"org.easymock.samples.ExampleTest.removeNonExistingDocument":283,"org.easymock.tests.UsageStrictMockTest.differentMethods":486,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":147,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":361,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":247,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":82,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":264,"org.easymock.tests2.MockBuilderTest.testCreateMockString":50,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":19,"org.easymock.tests.UsageExpectAndThrowTest.floatType":371,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":235,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":14,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":159,"org.easymock.tests.UsageVerifyTest.twoThrows":455,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":110,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":463,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":28,"org.easymock.samples.ExampleTest.voteAgainstRemoval":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":413,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":286,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":65,"org.easymock.tests.LimitationsTest.privateConstructor":88,"org.easymock.tests2.UsageConstraintsTest.testNotNull":241,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":399,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":69,"org.easymock.tests2.UsageTest.defaultResetToNice":177,"org.easymock.samples.ExampleTest.voteAgainstRemovals":277,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":414,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":325,"org.easymock.tests.UsageVarargTest.differentLength":447,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":142,"org.easymock.tests2.CallbackTest.callback":197,"org.easymock.tests2.UsageConstraintsTest.equals":224,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":61,"org.easymock.tests.UsageTest.openCallCountByLastCall":333,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":222,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":301,"org.easymock.tests.UsageCallCountTest.tooFewCalls":344,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":7,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":297,"org.easymock.tests.UsageThrowableTest.throwCheckedException":396,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":125,"org.easymock.tests.MockingTest.testStrictClassMocking":103,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":8,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":290,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":146,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":6,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":366,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":199,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":161,"org.easymock.tests.ObjectMethodsTest.testHashCode":431,"org.easymock.tests2.NameTest.nameForNiceMock":204,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":266,"org.easymock.tests2.DependencyTest.testInterfaceMocking":164,"org.easymock.samples.ExampleTest.addDocument":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":35,"org.easymock.tests2.DelegateToTest.testStubDelegate":258,"org.easymock.tests2.AnswerTest.stubAnswer":160,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":483,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":114,"org.easymock.tests.UsageVarargTest.varargLongAccepted":449,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":487,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":411,"org.easymock.tests.UsageExpectAndReturnTest.floatType":312,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":328,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":10,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":73,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":466,"org.easymock.tests.UsageThrowableTest.noUpperLimit":393,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":237,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":253,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":223,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":2,"org.easymock.tests2.SerializationTest.test":135,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":212,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":81,"org.easymock.tests2.UsageConstraintsTest.testSame":227,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":311,"org.easymock.samples.SupportTest.addDocument":274,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":198,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":362,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":20,"org.easymock.tests.GenericTest.testPackageScope":92,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":495,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":406,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":252,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":490,"org.easymock.tests2.NameTest.nameForMock":202,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":322,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":115,"org.easymock.tests2.UsageStrictMockTest.differentMethods":272,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":62,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":314,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":383,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":429,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":480,"org.easymock.tests2.MockedExceptionTest.testRealException":244,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":309,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":416,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":183,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":415,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":269,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":300,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":368,"org.easymock.tests2.NameTest.nameForStrictMock":203,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":41,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":166,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":117,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":57,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":3,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":119,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":83,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":39,"org.easymock.tests2.UsageStrictMockTest.range":271,"org.easymock.tests2.UsageConstraintsTest.lessThan":243,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":248,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":37,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":410,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":185,"org.easymock.tests2.CaptureTest.testCaptureRightOne":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":24,"org.easymock.tests2.UsageConstraintsTest.testOr":132,"org.easymock.tests.UsageRangeTest.combination":477,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":55,"org.easymock.tests.UsageTest.wrongArguments":332,"org.easymock.tests2.MockBuilderTest.testWithConstructor":111,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":21,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":453,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":315,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":403,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":323,"org.easymock.tests.UsageVarargTest.varargShortAccepted":448,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":85,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":347,"org.easymock.tests2.UsageConstraintsTest.cmpTo":230,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":158,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":405,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":176,"org.easymock.tests2.CaptureTest.testCaptureFromStub":217,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":358,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":40,"org.easymock.tests.UsageTest.unexpectedCallWithArray":123,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":126,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":345,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":324,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":484,"org.easymock.tests2.UsageConstraintsTest.constraints":130,"org.easymock.samples.ExampleTest.addAndChangeDocument":284,"org.easymock.tests.UsageStrictMockTest.testVerify":488,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":285,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":482,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":473,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":213,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":352,"org.easymock.tests.LimitationsTest.abstractClass":87,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":316,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":467,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":353,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":442,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":190}}]
